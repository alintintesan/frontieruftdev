// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;
var HelperBehaviors = require("./helper_behaviors.js");

/**
 * Common methods for the Calendar description
 * @ignore
 * @memberof SAPUI5
 */
var CalendarDescriptionBehavior = {
    /**
     * Indicates the date currently set in the calendar.
     * @param {Date} dateValue The date value of the calendar.
     * @returns {Date | Description} If no parameter is provided, the method acts as a getter and returns the current stored date value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    date: function(dateValue){
        return this._propertyHandler("date_yyyymmdd", dateValue, HelperBehaviors.DateBehavior.dateToFormatStr.bind(this,dateValue,'yyyyMMdd'), HelperBehaviors.DateBehavior.formatStrToDate);
    },

    /**
     * Indicates the locale of the application running the calendar.
     * @param {string} localValue The locale of the application running the calendar.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored locale value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    locale: function(localValue){
        return this._propertyHandler("locale", localValue);
    }
};

/**
 * The description of an SAPUI5 Calendar test object.
 * @param {Object} [props] Initializes a Calendar test object using the supplied property bag.
 * @returns {Calendar} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes SAPUI5.EnabledDescriptionBehavior
 * @mixes SAPUI5.CalendarDescriptionBehavior
 */
function Calendar(props) {
    var calendarDes = new SAPUI5BaseDesc("Calendar");
    ObjectUtils.extend(calendarDes, HelperBehaviors.EnabledDescriptionBehavior);
    ObjectUtils.extend(calendarDes, CalendarDescriptionBehavior);
    calendarDes._defineByPropertyBag(props);
    return calendarDes;
}


/**
 * An SAPUI5 Calendar.
 * @constructor
 * @memberof SAPUI5
 * @class CalendarTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes SAPUI5.EnabledTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @mixes SAPUI5.CalendarTOBehavior._properties
 * @mixes SAPUI5.CalendarTOBehavior._methods
 */
function CalendarTO(session, description) {
    description = description || Calendar();
    var calendarTO = new SAPUI5BaseTestObject("SAPUICalendar", session, description);
    calendarTO._mergeBehavior(HelperBehaviors.EnabledTOBehavior);
    calendarTO._mergeBehavior(CalendarTOBehavior);
    return calendarTO;
}

//Consts
var dateWiredName = "date_yyyymmdd";
var setDataWiredName = "SetDate";

/**
 * @ignore
 * @memberof SAPUI5
 */
var CalendarTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.CalendarTOBehavior
     */
    _properties:{
        /**
         * The date currently set in the calendar.
         * @function
         * @returns {Promise<Date>} a promise that is fulfilled with the date value to which this object is currently set.
         */
        date: {
			type: 'date',
            wiredName: dateWiredName,
			getter: function () {
				return this._getROProperty(dateWiredName, arguments).then(HelperBehaviors.DateBehavior.formatStrToDate);
            }
        },

        /**
         * The locale of the application running the calendar.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the locale value to which the application is running.
         */
        locale: {

        }
    },

    /**
     * @ignore
     * @memberof SAPUI5.CalendarTOBehavior
     */
    _methods: {
        /**
         * Sets the date.
         * @function
         * @param {Date} date The date value to set.
         * @returns {Promise<void>} a promise that is fulfilled after the specified date has been set in the Calendar.
         */
        setDate: {
            wiredName: setDataWiredName,
            exec: function (date) {
                return this._executeWithEvents(arguments, setDataWiredName, HelperBehaviors.DateBehavior.dateToFormatStr(date, 'yyyyMMdd'));
            }
        }
    }
};


module.exports.Calendar = Calendar;
module.exports.CalendarTO = CalendarTO;
