// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;

/**
 * @typedef {Object} ToolBarDesign - Supported ToolBar design styles.
 * @property {string} flat  Flat ToolBar style.
 * @property {string} standard  Standard ToolBar style.
 * @property {string} transparent  Transparent ToolBar style.
 * @memberof SAPUI5
 */
var ToolBarDesign = {
    flat: 'Flat',
    standard: 'Standard',
    transparent: 'Transparent'
};

/**
 * Common methods for the ToolBar description
 * @ignore
 * @memberof SAPUI5
 */
var ToolBarDescriptionBehavior = {
    /**
     * Indicates whether the toolbar is independent or nested in another control.
     * @param {boolean} isStandalone Indicates whether the toolbar is independent or nested in another control.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored standalone status;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isStandalone: function(isStandalone){
        return this._propertyHandler("standalone", isStandalone);
    },

    /**
     * Indicates the visual design of the toolbar.
     * @param {SAPUI5.ToolBarDesign} design The visual design of the toolbar.
     * @returns {SAPUI5.ToolBarDesign | Description} If no parameter is provided, the method acts as a getter and returns the current stored design status;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    design: function(design){
        return this._propertyHandler("design", design);
    },

    /**
     * Indicates the number of items in the left part of the toolbar.
     * @param {number} count The number of items.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored left part item count;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    leftItemsCount: function(count){
        return this._propertyHandler("left items count", count);
    },

    /**
     * Indicates the number of items in the middle part of the toolbar.
     * @param {number} count The number of items.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored middle part item count;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    middleItemsCount: function(count){
        return this._propertyHandler("middle items count", count);
    },

    /**
     * Indicates the number of items in the right part of the toolbar.
     * @param {number} count The number of items.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored right part item count;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    rightItemsCount: function(count){
        return this._propertyHandler("right items count", count);
    }
};

/**
 * The description of an SAPUI5 ToolBar test object.
 * @param {Object} [props] Initializes a ToolBar test object using the supplied property bag.
 * @returns {ToolBar} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes SAPUI5.ToolBarDescriptionBehavior
 */
function ToolBar(props) {
    var toolBarDes = new SAPUI5BaseDesc("ToolBar");
    ObjectUtils.extend(toolBarDes, ToolBarDescriptionBehavior);

    toolBarDes._defineByPropertyBag(props);

    return toolBarDes;
}

/**
 * An SAPUI5 ToolBar.
 * @constructor
 * @memberof SAPUI5
 * @class ToolBarTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes SAPUI5.ToolBarTOBehavior._methods
 * @mixes SAPUI5.ToolBarTOBehavior._properties
 */
function ToolBarTO(session, description) {
    description = description || ToolBar();
    var toolBarTO = new SAPUI5BaseTestObject("SAPUIToolbar", session, description);
    toolBarTO._mergeBehavior(ToolBarTOBehavior);
    return toolBarTO;
}

//Consts
var openOverflowWiredName = "OpenOverflow";

/**
 * @ignore
 * @memberof SAPUI5
 */
var ToolBarTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.ToolBarTOBehavior
     */
    _properties: {
        /**
         * Indicated whether the toolbar is independent or nested in another control.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the status of whether the toolbar is independent.
         */
        isStandalone: {
            wiredName: "standalone"
        },

        /**
         * The visual design of the toolbar.
         * @function
         * @returns {Promise<ToolBarDesign>} a promise that is fulfilled with the visual design of the toolbar.
         */
        design: {
            type: 'enum',
            enumType: ToolBarDesign,
            enumName: 'ToolBarDesign'
        },

        /**
         * The number of items in the left part of the toolbar.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the left part item count.
         */
        leftItemsCount: {
            type: 'uint',
            wiredName: "left items count"
        },

        /**
         * The number of items in the middle part of the toolbar.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the middle part item count.
         */
        middleItemsCount: {
            type: 'uint',
            wiredName: "middle items count"
        },

        /**
         * The number of items in the right part of the toolbar.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the right part item count.
         */
        rightItemsCount: {
            type: 'uint',
            wiredName: "right items count"
        }
    },
    /**
     * @ignore
     * @memberof SAPUI5.ToolBarTOBehavior
     */
    _methods: {
        /**
         * Opens the overflow menu that displays additional toolbar items.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the overflow menu is open.
         */
        openOverflow: {
            wiredName: openOverflowWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, openOverflowWiredName);
            }
        }
    }
};

module.exports.ToolBarDesign = ToolBarDesign;
module.exports.ToolBar = ToolBar;
module.exports.ToolBarTO = ToolBarTO;
