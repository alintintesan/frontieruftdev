// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;
var HelperBehaviors = require("./helper_behaviors.js");

/**
 * @typedef {Object} DateType - Supported date types.
 * @property {string} date  Date type.
 * @property {string} time  Time type.
 * @property {string} dateTime  Date and time type.
 * @memberof SAPUI5
 */
var DateType = {
    date: "Date",
    time: "Time",
    dateTime: "DateTime"
};

/**
 * Common methods for the DateTimeInput description
 * @ignore
 * @memberof SAPUI5
 */
var DateTimeInputDescriptionBehavior = {
    /**
     * Indicates the placeholder of the DateTimeInput object.
     * @param {string} placeholder The placeholder of the DateTimeInput object.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored placeholder;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    placeholder: function(placeholder){
        return this._propertyHandler("placeholder", placeholder);
    },

    /**
     * Indicates the display format of the DateTimeInput object.
     * @param {string} format The display format of the DateTimeInput object.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored display format;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    displayFormat: function(format){
        return this._propertyHandler("display format", format);
    },

    /**
     * Indicates the type of date displayed in the object.
     * @param {SAPUI5.DateType} type The type of date displayed in the object.
     * @returns {SAPUI5.DateType | Description} If no parameter is provided, the method acts as a getter and returns the current stored date type;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    dateType: function(type){
        return this._propertyHandler("date type", type);
    }
    
    
};

/**
 * The description of an SAPUI5 DateTimeInput test object.
 * @param {Object} [props] Initializes a DateTimeInput test object using the supplied property bag.
 * @returns {DateTimeInput} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes SAPUI5.EnabledDescriptionBehavior
 * @mixes SAPUI5.DateTimeInputDescriptionBehavior
 */
function DateTimeInput(props) {
    var dateTimeInputDes = new SAPUI5BaseDesc("DateTimeInput");

    ObjectUtils.extend(dateTimeInputDes, HelperBehaviors.EnabledDescriptionBehavior);
    ObjectUtils.extend(dateTimeInputDes, DateTimeInputDescriptionBehavior);

    dateTimeInputDes._defineByPropertyBag(props);

    return dateTimeInputDes;
}

/**
 * An SAPUI5 DateTimeInput.
 * @constructor
 * @memberof SAPUI5
 * @class DateTimeInputTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes SAPUI5.EnabledTOBehavior._properties
 * @mixes SAPUI5.DateTimeInputTOBehavior._properties
 * @mixes SAPUI5.DateTimeInputTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 */
function DateTimeInputTO(session, description) {
    description = description || DateTimeInput();
    var dateTimeInputTO = new SAPUI5BaseTestObject("SAPUIDateTimeInput", session, description);

    dateTimeInputTO._mergeBehavior(HelperBehaviors.EnabledTOBehavior);
    dateTimeInputTO._mergeBehavior(DateTimeInputTOBehavior);

    return dateTimeInputTO;
}

//Consts
var valueWiredName = "GetDateTime";
var setDateTimeWiredName = "SetDateTime";

/**
 * @ignore
 * @memberof SAPUI5
 */
var DateTimeInputTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.DateTimeInputTOBehavior
     */
    _properties: {
        /**
         * The placeholder of the DateTimeInput object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the placeholder to which this object is currently set.
         */
        placeholder: {

        },

        /**
         * The display format of the DateTimeInput object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the display format that can be set.
         */
        displayFormat: {
            wiredName: "display format"
        },

        /**
         * The type of date displayed in the object.
         * @function
         * @returns {Promise<SAPUI5.DateType>} a promise that is fulfilled with the type of date displayed.
         */
        dateType: {
            type: 'enum',
            enumType: DateType,
            enumName: 'DateType',
            wiredName: "date type"
        }
    },

    /**
     * @ignore
     * @memberof SAPUI5.DateTimeInputTOBehavior
     */
    _methods: {
        /**
         * The current value of the DateTimeInput object.
         * @function
         * @returns {Promise<Date>} a promise that is fulfilled with the date value to which this object is currently set.
         */
        value: {
            wiredName: valueWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, valueWiredName).then(HelperBehaviors.DateBehavior.formatStrToDate);
            }
        },

        /**
         * Sets the date and time.
         * @param {Date} date The date and time to set.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after setting the specified date in the DateTimeInput.
         */
        setDateTime: {
            wiredName: setDateTimeWiredName,
            exec: function (date) {
                return this._executeWithEvents(arguments, setDateTimeWiredName, HelperBehaviors.DateBehavior.dateToFormatStr(date));
            }
        }
    }
};

module.exports.DateType = DateType;
module.exports.DateTimeInput = DateTimeInput;
module.exports.DateTimeInputTO = DateTimeInputTO;