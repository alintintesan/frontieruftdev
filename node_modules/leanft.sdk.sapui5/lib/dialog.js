// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/29/2015.
 */

var Core = require("leanft.sdk.core");
var Web = require("leanft.sdk.web").Behaviors;
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;

/**
 * The description of an SAPUI5 Dialog test object.
 * @param {Object} [props] Initializes a Dialog test object using the supplied property bag.
 * @returns {Dialog} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 */
function Dialog(props) {
    var dialogDes = new SAPUI5BaseDesc("Dialog");

    dialogDes._defineByPropertyBag(props);

    return dialogDes;
}

/**
 * An SAPUI5 Dialog.
 * @constructor
 * @memberof SAPUI5
 * @class DialogTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes SAPUI5.DialogTOBehavior._methods
 */
function DialogTO(session, description) {
    description = description || Dialog();
    var dialogTO = new SAPUI5BaseTestObject("SAPUIDialog", session, description);

    dialogTO._mergeBehavior(DialogTOBehavior);

    return dialogTO;
}

//Consts
var closeWiredName = "Close";

/**
 * @ignore
 * @memberof SAPUI5
 */
var DialogTOBehavior = {
    /**
    * @ignore
    * @memberof SAPUI5.DialogTOBehavior
    */
    _methods: {
        /**
         * Closes the dialog box.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the dialog is closed.
         */
        close: {
            wiredName: closeWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, closeWiredName);
            }
        }
    }
};

module.exports.Dialog = Dialog;
module.exports.DialogTO = DialogTO;


