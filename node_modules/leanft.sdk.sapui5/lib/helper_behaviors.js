// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/31/2015.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var WebBehaviors = require("leanft.sdk.web").Behaviors;
var WebHelperFuncs = WebBehaviors.HelperFuncs;
var BuildPathBehavior = WebBehaviors.BuildPathBehavior;
var StringUtils = Core.StringUtils;
var ObjectUtils = Core.ObjectUtils;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

//Consts
var isCheckedWiredName = "state";
var isEnabledWiredName = "disabled";
var isReadOnlyWiredName = "readonly";
var itemsWiredName = "all items";


/////////////////// Checked Behaviors /////////////////////////

/**
 * @ignore
 * @memberof SAPUI5
 */
var CheckedDescriptionBehavior = {
    /*jshint eqnull:true */
    /**
     * Indicates whether the object is selected.
     * @param {boolean} state Indicates whether the object is selected.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isChecked value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isChecked: function(state){
        return this._propertyHandler("state", state, function(checked){
            return Core.Convert.toBool(checked) ? "On" : "Off";
        }, function(checked){
            return checked === "On";
        });
    }
};



/**
 * @ignore
 * @memberof SAPUI5
 */
var CheckedTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.CheckedTOBehavior
     */
    _properties: {
        /**
         * Indicates whether the check box is checked. Null if indeterminate.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the check box is checked. Null if indeterminate.
         */
        isChecked: {
            wiredName: isCheckedWiredName,
            getter: function () {
                return this._getROProperty(isCheckedWiredName, arguments).then(function (res) {
                    return res.toLowerCase() === "on";
                });
            }
        }
    }
};


/////////////////// Enabled Behaviors /////////////////////////
/**
 * @ignore
 * @memberof SAPUI5
 */
var EnabledDescriptionBehavior = {
    /*jshint eqnull:true */
    /**
     * Indicates whether the object is enabled.
     * @param {boolean} enabled Indicates whether the object is enabled.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isEnabled: function(enabled){
        return this._propertyHandler("disabled", enabled, function(enabled){
            return !Core.Convert.toBool(enabled);
        }, function(enabled){
            return !enabled;
        });
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var EnabledTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.EnabledTOBehavior
     */
    _properties: {
        /**
         * Indicates whether this object is enabled.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether this object is enabled.
         */
        isEnabled: {
            wiredName: isEnabledWiredName,
            getter: function () {
                return this._getROProperty(isEnabledWiredName, arguments).then(function (res) {
                    return !res;
                });
            }
        }
    }
};

ObjectUtils.combineBehaviors(EnabledTOBehavior, WaitUntilEnabledBehavior);

/////////////////// ReadOnly Behaviors /////////////////////////

/**
 * @ignore
 * @memberof SAPUI5
 */
var ReadOnlyDescriptionBehavior = {
    /**
     * Indicates whether the test object is read-only.
     * @param readOnly Indicates whether the test object is read-only.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored indication of whether the test object is read-only;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isReadOnly: function(readOnly){
        return this._propertyHandler("readonly", readOnly, Core.Convert.toBool);
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var ReadOnlyTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.ReadOnlyTOBehavior
     */
    _properties: {
        /**
         * Indicates whether the object is read-only.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object is read-only.
         */
        isReadOnly: function () {
            return this._getROProperty("readonly", arguments);
        }
    }
};

/////////////////// Text Behaviors /////////////////////////

/**
 * @ignore
 * @memberof SAPUI5
 */
var TextDescriptionBehavior = {
    /**
     * The text of this object.
     * @param {string} text The text of this object.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    text: function(text){
        return this._propertyHandler("text", text);
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var TextTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.TextTOBehavior
     */
    _properties: {
        /**
         * The text of this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's text.
         */
        text: {

        }
    }
};

var Orientations = {
    horizontal: "horizontal",
    vertical: "vertical"
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var OrientationDescriptionBehavior = {
    /**
     * Specifies how the items are displayed.
     * @param {Orientation} orientation The orientation of the items that are displayed.
     * @returns {Orientation | Description} If no parameter is provided, the method acts as a getter and returns the current stored orientation;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    orientation: function(orientation){
        return this._propertyHandler("orientation", orientation);
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var OrientationTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.OrientationTOBehavior
     */
    _properties: {
        /**
         * Specifies how the items are displayed.
         * @function
         * @returns {Promise<Orientation>} a promise that is fulfilled with how the items are displayed.
         */
        orientation: {
            type: 'enum',
            enumType: Orientations,
            enumName: 'Orientation'
        }
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var DateBehavior = {
    dateToFormatStr: function(date,format){
        function patch(x){
            return x <= 9 ? '0' + x : x;
        }
        if(!(date instanceof Date))
            throw new Error("You must supply a Date object");
        var y = date.getFullYear(),
            M = date.getMonth() + 1,
            d = date.getDate(),
            h = date.getHours(),
            m = date.getMinutes(),
            s = date.getSeconds();
        var dateStr = '' + y + patch(M) + patch(d),
            timeStr = patch(h) + ':' + patch(m) + ':' + patch(s);
        switch (format) {
            case 'yyyyMMdd':
                return dateStr;
            case 'hh:mm:ss':
                return timeStr;
            default:
                return dateStr + ',' + timeStr;
        }
    },

    formatStrToDate: function (dateTimeStr) {
        function setDateInDateObject(dateStr, dateObj){
            if (dateStr.length !== 8){
                return false;
            }
            var year = parseInt(dateStr.slice(0,4),10);
            var day  = parseInt(dateStr.slice(6,8),10);
            var month = parseInt(dateStr.slice(4,6),10) - 1;
            var rc1 = dateObj.setDate(day);
            var rc2 = dateObj.setMonth(month);
            var rc3 = dateObj.setFullYear(year);
            if (isNaN(rc1) || isNaN(rc2) || isNaN(rc3)){
                return false;
            }
            return true;
        }
        function setTimeInDateObject(timeStr, dateObj){
            var timeParams = timeStr.split(":");
            var rc1 = dateObj.setHours(timeParams[0]);
            var rc2 = dateObj.setMinutes(timeParams[1]);
            var rc3 = dateObj.setSeconds(timeParams[2]);
            if (isNaN(rc1) || isNaN(rc2) || isNaN(rc3)){
                return false;
            }
            return true;
        }

        var dateObj = new Date();
        var params = dateTimeStr.split(",");

        // dateTimeStr format is YYYYMMDD,HH:MM:SS or YYYYMMDD or HH:MM:SS
        //  so if after the split by ',' we get two members in the array, we assume we have to set both Date and Time
        if (params.length === 2) {
            //Set Time in dateObj
            if (!setTimeInDateObject(params[1], dateObj)) {
                //Date Time Format is invalid, Format should be YYYYMMDD,HH:MM:SS
                return null;
            }
            //Set Date in dateObj
            if (!setDateInDateObject(params[0], dateObj)) {
                //Date Time Format is invalid, Format should be YYYYMMDD,HH:MM:SS
                return null;
            }
            return dateObj;
        }
        else if (params.length === 1) {    //if after the split by ',' we get one members in the array,
            // we check if the string is Date or Time and update the DateTimeInput by it.
            if (params[0].split(':').length === 3) {
                //input contains only Time
                if (!setTimeInDateObject(params[0], dateObj)) {
                    //Time Format is invalid, Format should be HH:MM:SS
                    return null;
                }
            }
            else {
                //input contains only Date
                if (!setDateInDateObject(params[0], dateObj)) {
                    //Date Format is invalid, Format should be YYYYMMDD
                    return null;
                }
            }
            return dateObj;
        }
    }
};

/////////////////// ItemsCount Behavior /////////////////////////
/**
 * @ignore
 * @memberof SAPUI5
 */
var ItemsCountDescriptionBehavior = {
    /**
     * The number of items in the object.
     * @param {number} count The number of items in the object.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored itemsCount value;
     * Otherwise it returns 'this' for use with the builder pattern.
     */
    itemsCount: function(count){
        return this._propertyHandler("items count", count, null, null, Convert.toNumber);
    }
};

/////////////////// Items Behavior /////////////////////////////
/**
 * @ignore
 * @memberof SAPUI5
 */
var ItemsDescriptionBehavior = {
    /**
     * An array of all items in the object.
     * @param items {string[]} An array of all items in the object.
     * @returns {string[] | Description} if no parameter is provided, the method acts as a getter and returns the current stored items value;
     * Otherwise it returns 'this' for use with the builder pattern.
     */
    items: function(items) {
        return this._propertyHandler("all items", items,
            StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var ItemsTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.ItemsTOBehavior
     */
    _properties: {
        /**
         * Returns an array of all items in the object.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the array of the items contained in the object.
         */
        items: {
            wiredName: itemsWiredName,
            getter: function () {
                return this._getROProperty(itemsWiredName, arguments).then(StringUtils.splitFunc(";"));
            }
        }
    },

    _additionalProperties: {
        itemsCount: {type: "uint", wiredName: "items count"}
    }
};

//Consts
var selectWiredName = "Select";

/**
 * @ignore
 * @memberof SAPUI5
 */
var SelectItemTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.SelectItemTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Selects the specified item in the object.
         * @function
         * @param item {number | string} Selects the specified item in the object. Can be the item name (string) or the item index (number). Index begins with 1.
         * @returns {Promise<void>} a promise that is fulfilled after selecting the specified item in the object.
         */
        select: {
            wiredName: selectWiredName,
            exec: function (item) {
                if (item == null)
                    throw new Error("You must pass one argument to select() method");

                if (typeof item !== "number" && typeof item !== "string")
                    throw new Error("Only number or string is allowed to pass to select() method");

                return this._executeWithEvents(arguments, selectWiredName, HelperFuncs.itemTransform(item)).then(function (res) {
                    if (res === false)
                        throw new Error("Cannot identify the specified item in the object. Confirm that the specified item is a valid item in the object.");
                });
            }
        }
    }
};

//Consts
var expandWiredName = "Expand";
var collapseWiredName = "Collapse";

/**
 * @ignore
 * @memberof SAPUI5
 */
var ExpandCollapseItemTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.ExpandCollapseItemTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Expands the specified item in the object.
         * @function
         * @param {number|string} item The item or numeric index of the item to expand. Index values begin with 0.<br/>
         * Note: if it is a path to an item, you can use the buildItemPath function to create the item path.
         * @returns {Promise<void>} a promise that is fulfilled after the expand operation has occurred.
         */
        expand: {
            wiredName: expandWiredName,
            exec: function (item) {
                if (item == null)
                    throw new Error("You must pass one argument to expand() method");

                if (typeof item !== "number" && typeof item !== "string")
                    throw new Error("Only number or string is allowed to pass to expand() method");

                return this._executeWithEvents(arguments, expandWiredName, HelperFuncs.itemTransform(item));
            }
        },
        /*jshint eqnull:true */
        /**
         * Collapses the specified item in the object.
         * @function
         * @param {number|string} item The item or numeric index of the item to collapse. Index values begin with 1.<br/>
         * Note: if there is a path to the item, you can use the buildItemPath function to create the item path.
         * @returns {Promise<void>} a promise that is fulfilled after the collapse operation has occurred.
         */
        collapse: {
            wiredName: collapseWiredName,
            exec: function (item) {
                if (item == null)
                    throw new Error("You must pass one argument to collapse() method");

                if (typeof item !== "number" && typeof item !== "string")
                    throw new Error("Only number or string is allowed to pass to collapse() method");

                return this._executeWithEvents(arguments, collapseWiredName, HelperFuncs.itemTransform(item));
            }
        }
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var SelectPathTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.SelectPathTOBehavior
     */
    _methods: {
        /**
         * Selects the specified item in the object.
         * @function
         * @param {string} itemPath The path to the item in the object to select. <br/>
         * Note: you can use the buildItemPath function to create the item path.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        select: {
            wiredName: selectWiredName,
            exec: function (itemPath) {
                if (itemPath == null)
                    throw new Error("You must pass one argument to select() method");

                if (typeof itemPath !== "string")
                    throw new Error("Only path string is allowed to pass to select() method");

                return this._executeWithEvents(arguments, selectWiredName, itemPath).then(function (res) {
                    if (res === false)
                        throw new Error("Cannot identify the specified path in the object. Confirm that the specified item exists in the object.");
                });
            }
        },

        /**
         * Builds the item path from the arguments passed.
         * Arguments can be either a string - the name of the item, or a number - the index of the item. Item index values begin with 0.<br/>
         * Example: if ("item1", 4) passed, it means the path to the 4th item under top-level item 'item1'.
         * @function
         * @returns {string} a string representing the item path as described by the arguments.
         */
        buildItemPath: function () {
            var items = Core.ArrayUtils.toArray(arguments);
            return BuildPathBehavior._buildPath.apply(undefined, items.map(HelperFuncs.itemTransform));
        }
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var PageInfoBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.PageInfoBehavior
     */
    TOBehavior: {
        /**
         * @ignore
         * @memberof SAPUI5.PageInfoBehavior.TOBehavior
         */
        _properties: {
            /**
             * The page number of the currently selected page.
             * @function
             * @returns {Promise<number>} a promise that is fulfilled with the number of the currently selected page in the object.
             */
            currentPage: {
                type: 'uint',
                wiredName: "current page"
            },

            /**
             * The total number of pages in the object.
             * @function
             * @returns {Promise<number>} a promise that is fulfilled with the total number of pages in the object.
             */
            pagesCount: {
                type: 'uint',
                wiredName: "total pages"
            }
        }
    },
    DescriptionBehavior:{
        /**
         * The number of pages in the object.
         * @param {number} count The number of pages in the object.
         * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored total pages count;
         * otherwise it returns 'this' for use with the builder pattern.
         */
        pagesCount: function(count){
            return this._propertyHandler("total pages", count, null, null, Convert.toNumber);
        }
    }
};

//Consts
var nextPageWiredName = "NextPage";
var previousPageWiredName = "PreviousPage";

/**
 * @ignore
 * @memberof SAPUI5
 */
var NextPageAndPreviousPageTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.NextPageAndPreviousPageTOBehavior
     */
    _methods: {
        /**
         * Scrolls the object to the next page.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        nextPage: {
            wiredName: nextPageWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, nextPageWiredName);
            }
        },

        /**
         * Scrolls the object to the previous page.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        previousPage: {
            wiredName: previousPageWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, previousPageWiredName);
            }
        }
    }
};

//Consts
var firstPageWiredName = "FirstPage";
var lastPageWiredName = "LastPage";

/**
 * @ignore
 * @memberof SAPUI5
 */
var FirstPageAndLastPageTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.FirstPageAndLastPageTOBehavior
     */
    _methods: {
        /**
         * Scrolls the object to the first page.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
        */
        firstPage: {
            wiredName: firstPageWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, firstPageWiredName);
            }
        },

        /**
         * Scrolls the object to the last page.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        lastPage: {
            wiredName: lastPageWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, lastPageWiredName);
            }
        }
    }
};

//Consts
var nextWiredName = "Next";
var previousWiredName = "Previous";

/**
 * @ignore
 * @memberof SAPUI5
 */
var NavigationTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.NavigationTOBehavior
     */
    _methods: {
        /**
         * Scrolls the object to the next item.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        next: {
            wiredName: nextWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, nextWiredName);
            }
        },

        /**
         * Scrolls the object to the previous item.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        previous: {
            wiredName: previousWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, previousWiredName);
            }
        }
    }
};

var selectedItemWiredName = "selected item";
/**
 * @ignore
 * @memberof SAPUI5
 */
var SelectedItemTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.SelectedItemTOBehavior
     */
    _properties: {
        /**
         * The selected item in the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the selected item in the object.
         */
        selectedItem: {
            wiredName: selectedItemWiredName,
            getter: function () {
                return this._getROProperty(selectedItemWiredName, arguments).then(function(item){ 
                    return item || null;
                });
            }
        }
    }
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var HelperFuncs = {
    itemTransform: function(item) {
        if(typeof item === 'number')
            return "#" + (item + 1);

        return item;
    }
};

// Descriptions
module.exports.CheckedDescriptionBehavior = CheckedDescriptionBehavior;
module.exports.EnabledDescriptionBehavior = EnabledDescriptionBehavior;
module.exports.ReadOnlyDescriptionBehavior = ReadOnlyDescriptionBehavior;
module.exports.TextDescriptionBehavior = TextDescriptionBehavior;
module.exports.OrientationDescriptionBehavior = OrientationDescriptionBehavior;
module.exports.ItemsCountDescriptionBehavior = ItemsCountDescriptionBehavior;
module.exports.ItemsDescriptionBehavior = ItemsDescriptionBehavior;
module.exports.PageInfoDescriptionBehavior = PageInfoBehavior.DescriptionBehavior;

// Test Objects
module.exports.EnabledTOBehavior = EnabledTOBehavior;
module.exports.ReadOnlyTOBehavior = ReadOnlyTOBehavior;
module.exports.CheckedTOBehavior = CheckedTOBehavior;
module.exports.TextTOBehavior = TextTOBehavior;
module.exports.OrientationTOBehavior = OrientationTOBehavior;
module.exports.Orientations = Orientations;
module.exports.DateBehavior = DateBehavior;
module.exports.ItemsTOBehavior = ItemsTOBehavior;
module.exports.SelectItemTOBehavior = SelectItemTOBehavior;
module.exports.NavigationTOBehavior = NavigationTOBehavior;
module.exports.FirstPageAndLastPageTOBehavior = FirstPageAndLastPageTOBehavior;
module.exports.NextPageAndPreviousPageTOBehavior = NextPageAndPreviousPageTOBehavior;
module.exports.SelectedItemTOBehavior = SelectedItemTOBehavior;
module.exports.ExpandCollapseItemTOBehavior = ExpandCollapseItemTOBehavior;
module.exports.SelectPathTOBehavior = SelectPathTOBehavior;
module.exports.PageInfoTOBehavior = PageInfoBehavior.TOBehavior;
module.exports.HelperFuncs = HelperFuncs;