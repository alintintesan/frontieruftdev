// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 02/02/2015.
 */

var Core = require("leanft.sdk.core");
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;
var HelperBehaviors = require("./helper_behaviors.js");
var WebBehaviors = require("leanft.sdk.web").Behaviors;
var SapUI5HelperFuncs = HelperBehaviors.HelperFuncs;

/**
 * @typedef {Object} SelectType - Supported ListBox selection types.
 * @property {string} singleSelection  A single-select list box.
 * @property {string} comboboxSelection  A combo box.
 * @property {string} extendedSelection  An extended multi-select list.
 * @memberof SAPUI5
 */
var SelectType = {
    /*
     * A single-select list box.
     */
    singleSelection: "singleselection",

    /*
     * A combo box.
     */
    comboboxSelection: "comboboxselection",

    /*
     * An extended multi-select list.
     */
    extendedSelection: "extendedselection"
};

/**
 * @memberof sapui5
 * @ignore
 */
var SelectTypeLinker = {
    singleselection: "Single Selection",
    comboboxselection: "Combobox Select",
    extendedselection: "Extended Selection"
};

var selectTypeToNative = function(selectType){
    /*jshint eqnull:true */
    var nativeString = SelectTypeLinker[selectType.toLowerCase()];
    if (typeof(nativeString) === "undefined") {
        throw new Error("You must supply a valid selectType");
    }

    return nativeString;
};

var nativeToSelectType = function(nativeString){
    var results = Object.keys(SelectTypeLinker).filter(function(key) {
        return SelectTypeLinker[key] === nativeString;
    });

    if(results.length === 1)
        return results[0];

    throw new Error("Enum selectType name not found");
};

/**
 * Common methods for the ListBox description
 * @ignore
 * @memberof SAPUI5
 */
var ListBoxDescriptionBehavior = {
    /**
     * The selection type of the list.
     * Possible values: 'singleSelection', 'comboboxSelection', 'extendedSelection'.
     * @param {SAPUI5.SelectType} selectType The selectType of the list box.
     * @returns {SAPUI5.SelectType | Description} If no parameter is provided, the method acts as a getter and returns the current stored value of selectType;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectType: function(selectType){
        return this._propertyHandler("select type", selectType, selectTypeToNative, nativeToSelectType);
    }
};

/**
 * The description of an SAPUI5 ListBox test object.
 * @param {Object} [props] Initializes a ListBox test object using the supplied property bag.
 * @returns {ListBox} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes Web.ListBoxDescriptionBehavior
 * @mixes SAPUI5.EnabledDescriptionBehavior
 * @mixes SAPUI5.ItemsCountDescriptionBehavior
 * @mixes SAPUI5.ListBoxDescriptionBehavior
 */
function ListBox(props) {
    var listBoxDes = new SAPUI5BaseDesc("ListBox");

    Core.ObjectUtils.extend(listBoxDes, WebBehaviors.ListBoxDescriptionBehavior);
    Core.ObjectUtils.extend(listBoxDes, HelperBehaviors.EnabledDescriptionBehavior);
    Core.ObjectUtils.extend(listBoxDes, HelperBehaviors.ItemsCountDescriptionBehavior);
    Core.ObjectUtils.extend(listBoxDes, ListBoxDescriptionBehavior);

    listBoxDes._defineByPropertyBag(props);

    return listBoxDes;
}

/**
 * An SAPUI5 ListBox.
 * @constructor
 * @memberof SAPUI5
 * @class ListBoxTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes Web.ListBoxTOBehavior._properties
 * @mixes Web.ListBoxTOBehavior._methods
 * @mixes SAPUI5.EnabledTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @mixes SAPUI5.MobileListBoxBehavior._methods
 * @mixes SAPUI5.ListBoxTOBehavior._properties
 * @mixes SAPUI5.ListBoxTOBehavior._methods
 */
function ListBoxTO(session, description) {
    description = description || ListBox();
    var listBoxTO = new SAPUI5BaseTestObject("SAPUIList", session, description);

    listBoxTO._mergeBehavior(WebBehaviors.ListBoxTOBehavior);
    listBoxTO._mergeBehavior(HelperBehaviors.EnabledTOBehavior);
    listBoxTO._mergeBehavior(MobileListBoxBehavior);
    listBoxTO._mergeBehavior(ListBoxTOBehavior);

    return listBoxTO;
}

//Consts
var selectTypeWiredName = "select type";
var selectWiredName = "Select";
var singleSelectWiredName = "SingleSelect";
var extendSelectWiredName = "ExtendSelect";
var deselectWiredName = "ExtendDeselect";
var setWiredName = "Set";
var filterByDateWiredName = "FilterByDate";
var setItemDataWiredName = "SetItemData";


/**
 * @ignore
 * @memberof SAPUI5
 */
var ListBoxTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.ListBoxTOBehavior
     */
    _properties:{
        /**
         * The selection type of the list box.
         * @function
         * @returns {Promise<SAPUI5.SelectType>} a promise that is fulfilled with the selection type of the list box.
         */
        selectType: {
            type: 'enum',
            enumType: SelectType,
            enumName: 'SelectType',
            wiredName: selectTypeWiredName,
            getter: function () {
                return this._getROProperty(selectTypeWiredName, arguments).then(nativeToSelectType);
            }
        },

        /**
         * Indicates whether multi-selection is available for the list box.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether multi-selection is available for the list box.
         */
        isMultiple: {
            wiredName: selectTypeWiredName,
            getter: function() {
                return this._getROProperty(selectTypeWiredName, arguments).then(function (res) {
                    return res === "Extended Selection";
                });
            }
        },

        /**
         * Returns an array of all selected items in the list.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with an array of all selected items in the list.
         */
        selectedItems: {
            wiredName: "selection",
            getter: function() {
                return this._getROProperties("selected item index", "all items").then(function (res) {
                    var indicesStr = res[0];

                    if (indicesStr) {
                        var selectedIndices = indicesStr.split(";");
                        var allItems = res[1].split(";");

                        return selectedIndices.map(function (selectedIndex) {
                            return allItems[selectedIndex - 1];
                        });
                    }

                    return [];
                });
            }
        }
    },
    /**
     * @ignore
     * @memberof SAPUI5.ListBoxTOBehavior
     */
    _methods: {
        /**
         * Selects a list of items in the list box.
         * @function
         * @param {...number | string} item You can pass as many items as you like, each item can be either the name of the item you wish to select,
         * or the numeric index of the item in the list. Index values begin with 0.<br/>
         * Example: listBox.select("someItem", 2, "anotherItem");
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        select: {
            wiredName: selectWiredName,
            exec: function (item) {
                return this._executeOnItemsCollection(arguments, selectWiredName, extendSelectWiredName, Core.ArrayUtils.toArray(arguments), SapUI5HelperFuncs.itemTransform);
            }
        },
        /**
         * Selects one item in the list box.
         * @function
         * @param {number | string} item You can pass one item only.<br/>
         * Examples: listBox.singleSelect(2); listBox.singleSelect(“someItem”);
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        singleSelect: {
            wiredName: singleSelectWiredName,
            exec: function (item) {
                return this._executeWithEvents(arguments, singleSelectWiredName, SapUI5HelperFuncs.itemTransform(item));
            }
        },
        /**
         * Selects a list of items in the list box.
         * @function
         * @param {...number | string} item You can pass as many items as you like, each item can be either the name of the item you wish to select,
         * or the numeric index of the item in the list. Index values begin with 0.<br/>
         * Example: listBox.select("someItem", 2, "anotherItem");
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        extendSelect: {
            wiredName: extendSelectWiredName,
            exec: function (item) {
                return this._executeOnItemsCollection(arguments, extendSelectWiredName, extendSelectWiredName, Core.ArrayUtils.toArray(arguments), SapUI5HelperFuncs.itemTransform);
            }
        },
        /**
         * Deselects a list of items in the list box.
         * @function
         * @param {...number | string} item You can pass as many items as you like, each item can be either the name of the item to select,
         * or the numeric index of the item in the list. Index values begin with 0. <br/>
         * Example: listBox.deselect("someItem", 2, "anotherItem");
         * @returns {Promise<void>} a promise that is fulfilled when the operation is done.
         */
        deselect: {
            wiredName: deselectWiredName,
            exec: function (item) {
                return this._executeSingleOpOnCollection(arguments, deselectWiredName, Core.ArrayUtils.toArray(arguments), SapUI5HelperFuncs.itemTransform);
            }
        },

        /**
         * Enters the specified text in the list box.
         * @function
         * @param {string} text The specified text to enter.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        set: {
            wiredName: setWiredName,
            exec: function (text) {
                return this._executeWithEvents(arguments, setWiredName, Core.Convert.toString(text));
            }
        },

        /**
         * Invokes the specified filter according to the specified date.
         * @function
         * @param {string} date The specified date by which to filter.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        filterByDate: {
            wiredName: filterByDateWiredName,
            exec: function (date) {
                return this._executeWithEvents(arguments, filterByDateWiredName, HelperBehaviors.DateBehavior.dateToFormatStr(date, 'yyyyMMdd'));
            }
        },

        /**
         * Enters the specified text in the list box item.
         * @function
         * @param {string | number} item The list item to enter text into. It can be the name or numeric index of the item.
         * Numeric index values begin with 0.
         * @param {string} text The specified text to enter.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        setItemData: {
            wiredName: setItemDataWiredName,
            exec: function (item, text) {
                return this._executeWithEvents(arguments, setItemDataWiredName, SapUI5HelperFuncs.itemTransform(item), Core.Convert.toString(text));
            }
        }
    },

    _additionalProperties: {
        itemsCount: {type: "uint", wiredName: "items count"}
    }
};

//Consts
var deleteWiredName = "Delete";
var moreWiredName = "More";
var showItemDetails = "Details";

/**
 * @ignore
 * @memberof SAPUI5
 */
var MobileListBoxBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.MobileListBoxBehavior
     */
    _methods: {
        /**
         * Selects the radio button adjacent to the list item. This is an additional list box functionality on mobile devices.<br/>
         * Note: only applicable when there is a radio button adjacent to the list item.
         * @function
         * @param {string | number} item The list item to select. This can be the name or numeric index of the item.
         * Numeric index values begin with 0.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        singleSelect: {
            wiredName: singleSelectWiredName,
            exec: function (item) {
                return this._executeWithEvents(arguments, singleSelectWiredName, SapUI5HelperFuncs.itemTransform(item));
            }
        },

        /**
         * Deletes the specified item from the list. This is an additional list box functionality on mobile devices.<br/>
         * Note: only applicable when the item is deletable.
         * @function
         * @param {string | number} item The list item to delete. This can be the name or numeric index of the item.
         * Numeric index values begin with 0.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        delete: {
            wiredName: deleteWiredName,
            exec: function (item) {
                return this._executeWithEvents(arguments, deleteWiredName, SapUI5HelperFuncs.itemTransform(item));
            }
        },

        /**
         * Clicks the 'More' button to expand the list and show more list items. This is an additional list box functionality on mobile devices. <br/>
         * Note: only applicable when there there is a 'More' button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        more: {
            wiredName: moreWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, moreWiredName);
            }
        },

        /**
         * Selects the specified item in the list and expands the item's details. This is an additional list box functionality on mobile devices.<br/>
         * Note: only applicable when the list item has details to show.
         * @function
         * @param {string | number} item The list item. This can be the name or numeric index of the item.
         * Numeric index values begin with 0.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        showItemDetails: {
            wiredName: showItemDetails,
            exec: function (item) {
                return this._executeWithEvents(arguments, showItemDetails, SapUI5HelperFuncs.itemTransform(item));
            }
        }
    }
};

module.exports.ListBox = ListBox;
module.exports.ListBoxTO = ListBoxTO;
module.exports.SelectType = SelectType;