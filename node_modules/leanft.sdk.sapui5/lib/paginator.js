// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/30/2015.
 */

var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;
var Convert = Core.Convert;
var Web = require("leanft.sdk.web").Behaviors;
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;

/**
 * Common methods for the Paginator description
 * @ignore
 * @memberof SAPUI5
 */
var PaginatorDescriptionBehavior = {
    /**
     * Indicates the total number of pages in the paginator.
     * @param {number} totalPages Indicates the total number of pages in the paginator.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored total number of pages in the paginator value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    totalPagesCount: function(totalPages){
        return this._propertyHandler("total pages", totalPages, Convert.toNumber);
    },
    /**
     * Indicates the number of the visible pages in the paginator.
     * @param {number} visiblePages Indicates the number of the visible pages in the paginator.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the number of the visible pages in the paginator value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    visiblePagesCount: function(visiblePages){
        return this._propertyHandler("visible pages", visiblePages, Convert.toNumber);
    }
};

/**
 * The description of an SAPUI5 Paginator test object.
 * @param {Object} [props] Initializes a Paginator test object using the supplied property bag.
 * @returns {Paginator} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes SAPUI5.PaginatorDescriptionBehavior
 */
function Paginator(props) {
    var paginatorDes = new SAPUI5BaseDesc("Paginator");

    ObjectUtils.extend(paginatorDes, PaginatorDescriptionBehavior);

    paginatorDes._defineByPropertyBag(props);

    return paginatorDes;
}

/**
 * An SAPUI5 Paginator.
 * @constructor
 * @memberof SAPUI5
 * @class PaginatorTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes SAPUI5.PaginatorTOBehavior._properties
 * @mixes SAPUI5.PaginatorTOBehavior._methods
 */
function PaginatorTO(session, description) {
    description = description || Paginator();
    var paginatorTO = new SAPUI5BaseTestObject("SAPUIPaginator", session, description);

    paginatorTO._mergeBehavior(PaginatorTOBehavior);

    return paginatorTO;
}

//Consts
var navigateToWiredName = "SetPage";
var firstPageWiredName = "FirstPage";
var lastPageWiredName = "LastPage";
var previousPageWiredName = "PreviousPage";
var nextPageWiredName = "NextPage";

/**
 * @ignore
 * @memberof SAPUI5
 */
var PaginatorTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.PaginatorTOBehavior
     */
    _properties: {
        /**
         * The page number of the currently selected page.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the index of the currently selected page.
         */
        currentPage: {
            type: 'uint',
            wiredName: "current page"
        },
        /**
         * The total number of pages.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the total number of pages.
         */
        totalPagesCount: {
            type: 'uint',
            wiredName: "total pages"
        },
        /**
         * The number of pages currently visible in the paginator.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of pages currently visible in the paginator.
         */
        visiblePagesCount: {
            type: 'uint',
            wiredName: "visible pages"
        }
    },

    /**
     * @ignore
     * @memberof SAPUI5.PaginatorTOBehavior
     */
    _methods: {
        /**
         * Navigates to the specified page.
         * @function
         * @param {number} pageNum The specified page to navigate to.
         * @returns {Promise<void>} a promise that is fulfilled after navigating to the specified page.
         */
        navigateTo: {
            wiredName: navigateToWiredName,
            exec: function (pageNum) {
                return this._executeWithEvents(arguments, navigateToWiredName, Convert.toNumber(pageNum)).then(function (res) {
                    if (!res)
                        throw new Error("Failed to navigate to page " + pageNum);
                });
            }
        },
        /**
         * Scrolls to the first page.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after navigating to the first page.
         */
        firstPage: {
            wiredName: firstPageWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, firstPageWiredName).then(function (res) {
                    if (!res)
                        throw new Error("Failed to navigate to first page.");
                });
            }
        },
        /**
         * Scrolls to the last page.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after navigating to the last page.
         */
        lastPage: {
            wiredName: lastPageWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, lastPageWiredName).then(function (res) {
                    if (!res)
                        throw new Error("Failed to navigate to last page.");
                });
            }
        },
        /**
         * Scrolls to the previous page.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after navigating to the previous page.
         */
        previousPage: {
            wiredName: previousPageWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, previousPageWiredName).then(function (res) {
                    if (!res)
                        throw new Error("Failed to navigate to previous page.");
                });
            }
        },
        /**
         * Scrolls to the next page.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after navigating to the next page.
         */
        nextPage: {
            wiredName: nextPageWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, nextPageWiredName).then(function (res) {
                    if (!res)
                        throw new Error("Failed to navigate to next page.");
                });
            }
        }
    }
};

module.exports.Paginator = Paginator;
module.exports.PaginatorTO = PaginatorTO;