// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 28/01/2016.
 * This file will contain the implementation of SAPUI Tree
 */

var Core = require("leanft.sdk.core");
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;
var HelperBehaviors = require("./helper_behaviors.js");
var StringUtils = Core.StringUtils;

/**
 * The description of an SAPUI5 TreeView test object.
 * @param {Object} [props] Initializes a TreeView test object using the supplied property bag.
 * @returns {TreeView} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes SAPUI5.EnabledDescriptionBehavior
 * @mixes SAPUI5.TreeDescriptionBehaviour
 */
function TreeView(props){
    var treeDescription = new SAPUI5BaseDesc("TreeView");

    Core.ObjectUtils.extend(treeDescription, HelperBehaviors.EnabledDescriptionBehavior);
    Core.ObjectUtils.extend(treeDescription, TreeDescriptionBehaviour);

    treeDescription._defineByPropertyBag(props);

    return treeDescription;
}

/**
 * Common methods for the Tree description
 * @ignore
 * @memberof SAPUI5
 */
var TreeDescriptionBehaviour = {

    /**
     * An array of all visible nodes in the object.
     * @param {string[]} nodes An array of all visible nodes in the object.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored visibleNodes value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    visibleNodes: function(nodes) {
        return this._propertyHandler("all items", nodes,
            StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    },

    /**
     * Deprecated (use selectedNodePath instead)
     * The currently selected node in this tree.
     * @param {string} [selectedNode] When provided, this method acts as a setter and sets the selectedNode value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedNode value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedNode: function(selectedNode){
        return this.selectedNodePath(selectedNode);
    },

    /**
     * The currently selected node in this tree.
     * @param {string} [selectedNode] When provided, this method acts as a setter and sets the selectedNode value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedNode value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedNodePath: function(selectedNode){
        return this._simplePropertyHandler("selected item", selectedNode);
    }
};

/**
 * An SAPUI5 TreeView.
 * @constructor
 * @memberof SAPUI5
 * @class TreeTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes SAPUI5.EnabledTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @mixes SAPUI5.SelectPathTOBehavior._methods
 * @mixes SAPUI5.ExpandCollapseItemTOBehavior._methods
 * @mixes SAPUI5.TreeBehavior._properties
 * @mixes SAPUI5.TreeBehavior._methods
 */
function TreeTO(session,description) {
    description = description || TreeView();
    var treeTO = new SAPUI5BaseTestObject("SAPUITree", session, description);

    treeTO._mergeBehavior(HelperBehaviors.EnabledTOBehavior);
    treeTO._mergeBehavior(HelperBehaviors.SelectPathTOBehavior);
    treeTO._mergeBehavior(HelperBehaviors.ExpandCollapseItemTOBehavior);
    treeTO._mergeBehavior(TreeBehaviour);

    return treeTO;
}

//Consts
var allItemsWiredName = "all items";
var activateWiredName = "Activate";

/**
 * @ignore
 * @memberof SAPUI5
 */
var TreeBehaviour = {
    /**
     * @ignore
     * @memberof SAPUI5.TreeBehaviour
     */
    _properties: {
        /**
         * Returns an array of all visible nodes in the object.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the array of the visible nodes contained in the object.
         */
        visibleNodes: {
            wiredName: allItemsWiredName,
            getter: function () {
                return this._getROProperty(allItemsWiredName, arguments).then(StringUtils.splitFunc(";"));
            }
        },

        /**
         * The selected node in this tree.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the selected node's path.
         */
        selectedNodePath: {
            wiredName: "selected item"
        }
    },
    /**
     * @ignore
     * @memberof SAPUI5.TreeBehaviour
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Activates the specified node in the object.
         * @function
         * @param {string} itemPath The path to the node in the object to activate. <br/>
         * Note: you can use the buildItemPath function to create the node path.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        activate: {
            wiredName: activateWiredName,
            exec: function (itemPath) {
                if (itemPath == null)
                    throw new Error("You must pass one argument to activate() method");

                if (typeof itemPath !== "string")
                    throw new Error("Only path string is allowed to pass to activate() method");

                return this._executeWithEvents(arguments, activateWiredName, itemPath);
            }
        },

        // located under _methods so this property won't appear in the documentation

        /**
         * Deprecated (use selectedNodePath instead)
         * The selected node in this tree.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the selected node's path.
         */
        selectedNode: function () {
            return this._getROProperty("selected item", arguments);
        }
    }
};

module.exports.TreeView = TreeView;
module.exports.TreeTO = TreeTO;
