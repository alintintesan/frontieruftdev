// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/28/2015.
 */

var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;
var WebBehaviors = require("leanft.sdk.web").Behaviors;
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;
var HelperBehaviors = require("./helper_behaviors.js");

/**
 * The description of an SAPUI5 Button test object.
 * @param {Object} [props] Initializes a Button test object using the supplied property bag.
 * @returns {Button} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes Web.ButtonDescriptionBehavior
 * @mixes SAPUI5.EnabledDescriptionBehavior
 */
function Button(props) {
    var buttonDes = new SAPUI5BaseDesc("Button");

    ObjectUtils.extend(buttonDes, WebBehaviors.ButtonDescriptionBehavior);
    ObjectUtils.extend(buttonDes, HelperBehaviors.EnabledDescriptionBehavior);

    buttonDes._defineByPropertyBag(props);

    return buttonDes;
}

/**
 * An SAPUI5 Button.
 * @constructor
 * @memberof SAPUI5
 * @class ButtonTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes Web.ButtonTOBehavior._properties
 * @mixes SAPUI5.EnabledTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @mixes SAPUI5.ButtonTOBehavior._methods
 */
function ButtonTO(session, description) {
    description = description || Button();
    var buttonTO = new SAPUI5BaseTestObject("SAPUIButton", session, description);

    buttonTO._mergeBehavior(WebBehaviors.ButtonTOBehavior);
    buttonTO._mergeBehavior(HelperBehaviors.EnabledTOBehavior);
    buttonTO._mergeBehavior(ButtonTOBehavior);

    return buttonTO;
}

//Consts
var openMenuWiredName = "OpenMenu";

/**
 * @ignore
 * @memberof SAPUI5
 */
var ButtonTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.ButtonTOBehavior
     */
    _methods: {
        /**
         * Opens the pop-up menu associated with this button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the open menu operation has occurred.
         */
        openMenu: {
            wiredName: openMenuWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, openMenuWiredName);
            }
        }
    }
};

module.exports.Button = Button;
module.exports.ButtonTO = ButtonTO;
