// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var Core = require("leanft.sdk.core");
var Web = require("leanft.sdk.web").Behaviors;
var ObjectUtils = Core.ObjectUtils;
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;
var HelperBehaviors = require("./helper_behaviors.js");
var StringUtils = Core.StringUtils;

/**
 * @typedef {Object} DatePickerDisplayMode - Supported DatePicker display modes.
 * @property {string} week  Week display mode.
 * @property {string} twoWeeks  Two weeks display mode.
 * @property {string} month  Month display mode.
 * @property {string} twoMonths  Two months display mode.
 * @property {string} year  Year display mode.
 * @memberof SAPUI5
 */
var DatePickerDisplayMode = {
    week: 'week',
    twoWeeks: 'twoWeeks',
    month: 'month',
    twoMonths: 'twoMonths',
    year: 'year',

    _convertToRuntime: function(mode) {
        var _convertMap = {
            week: 'week',
            year: 'year',
            twoweeks: '2 weeks',
            month: '1 month',
            twomonths: '2 months'
        };
        return _convertMap[mode.toLowerCase()];
    },

    _convertToDisplayMode: function(str) {
        var _convertMap = {
            week: 'week',
            year: 'year',
            '2 weeks': 'twoWeeks',
            '1 month': 'month',
            '2 months': 'twoMonths'
        };
        return _convertMap[str.toLowerCase()];
    }
};

/**
 * Common methods for the DatePicker description
 * @ignore
 * @memberof SAPUI5
 */
var DatePickerDescriptionBehavior = {
    /**
     * Indicates the mode for displaying the date picker object.
     * @param {SAPUI5.DatePickerDisplayMode} The mode for displaying the date picker object.
     * @returns {SAPUI5.DatePickerDisplayMode | Description} If no parameter is provided, the method acts as a getter and returns the current stored display mode;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    displayMode: function(mode){
        return this._propertyHandler("display mode", mode, DatePickerDisplayMode._convertToRuntime, DatePickerDisplayMode._convertToDisplayMode);
    }
};

/**
 * The description of an SAPUI5 DatePicker test object.
 * @param {Object} [props] Initializes a DatePicker test object using the supplied property bag.
 * @returns {DatePicker} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes SAPUI5.DatePickerDescriptionBehavior
 */
function DatePicker(props) {
    var datePickerDes = new SAPUI5BaseDesc("DatePicker");
    ObjectUtils.extend(datePickerDes, DatePickerDescriptionBehavior);

    datePickerDes._defineByPropertyBag(props);

    return datePickerDes;
}

/**
 * An SAPUI5 DatePicker.
 * @constructor
 * @memberof SAPUI5
 * @class DatePickerTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes SAPUI5.NavigationTOBehavior._methods
 * @mixes SAPUI5.DatePickerTOBehavior._methods
 * @mixes SAPUI5.DatePickerTOBehavior._properties
 */
function DatePickerTO(session, description) {
    description = description || DatePicker();
    var datePickerTO = new SAPUI5BaseTestObject("SAPUIDatePicker", session, description);
    datePickerTO._mergeBehavior(HelperBehaviors.NavigationTOBehavior);
    datePickerTO._mergeBehavior(DatePickerTOBehavior);
    return datePickerTO;
}

//Consts
var displayModeWiredName = "display mode";
var selectedDatesWiredName = "selected dates";
var monthsWiredName = "months list";
var selectWiredName = "SelectDate";
var deselectWiredName = "DeselectDate";

/**
 * @ignore
 * @memberof SAPUI5
 */
var DatePickerTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.DatePickerTOBehavior
     */
    _properties: {
        /**
         * Indicates how the date picker object is displayed.
         * @function
         * @returns {Promise<SAPUI5.DatePickerDisplayMode>} a promise that is fulfilled with the mode for displaying the date picker object.
         */
        displayMode: {
            type: 'enum',
            enumType: DatePickerDisplayMode,
            enumName: 'DatePickerDisplayMode',
            wiredName: displayModeWiredName,
            getter: function () {
                return this._getROProperty(displayModeWiredName, arguments).then(DatePickerDisplayMode._convertToDisplayMode);
            }
        },

        /**
         * The date values selected in the date picker.
         * @function
         * @returns {Promise<Date[]>} a promise that is fulfilled with the date values selected in the date picker.
         */
        selectedDates: {
            wiredName: selectedDatesWiredName,
            getter: function () {
                return this._getROProperty(selectedDatesWiredName, arguments).then(function (value) {
                    return value === '' ? [] : value.split(';').map(function (dateStr) {
                        return new Date(dateStr);
                    });
                });
            }
        },

        /**
         * The list of months contained in this date picker.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the month list contained in the date picker.
         */
        months: {
            wiredName: monthsWiredName,
            getter: function () {
                return this._getROProperty(monthsWiredName, arguments).then(StringUtils.splitFunc(";"));
            }
        }
    },

    /**
     * @ignore
     * @memberof SAPUI5.DatePickerTOBehavior
     */
    _methods: {
        /**
         * Selects the date.
         * @function
         * @param {Date} date The date to select from the list.
         * @returns {Promise<void>} a promise that is fulfilled after the specified date has been selected.
         */
        select: {
            wiredName: selectWiredName,
            exec: function (date) {
                return this._executeWithEvents(arguments, selectWiredName, HelperBehaviors.DateBehavior.dateToFormatStr(date, 'yyyyMMdd'));
            }
        },

        /**
         * Deselects the specified date.
         * @function
         * @param {Date} date The date to deselect from the list.
         * @returns {Promise<void>} a promise that is fulfilled after the specified date has been deselected.
         */
        deselect: {
            wiredName: deselectWiredName,
            exec: function (date) {
                return this._executeWithEvents(arguments, deselectWiredName, HelperBehaviors.DateBehavior.dateToFormatStr(date, 'yyyyMMdd'));
            }
        }
    }
};

module.exports.DatePickerDisplayMode = DatePickerDisplayMode;
module.exports.DatePicker = DatePicker;
module.exports.DatePickerTO = DatePickerTO;
