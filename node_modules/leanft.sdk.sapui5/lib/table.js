// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;
var ArrayUtils = Core.ArrayUtils;
var Web = require("leanft.sdk.web").Behaviors;
var WebTableCell = Web.TableCellBehavior;
var ExecuteItemsWithEventsBehavior = require("leanft.sdk.core").ExecuteItemsWithEventsBehavior;
var StringUtils = Core.StringUtils;
var HelperBehaviors = require("./helper_behaviors.js");
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;
var MergeBehavior = Core.MergeBehavior;

/**
 * Common methods for the Table description
 * @ignore
 * @memberof SAPUI5
 */
var TableDescriptionBehavior = {
    /**
     * An array of column headers.
     * @param {string[]} [colNamesArr] When provided, this method acts as a setter and sets the columnHeaders value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored columnHeaders value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    columnHeaders: function(colNamesArr){
        return this._propertyHandler("columns", colNamesArr, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    },
    /**
     * The number of rows in the table including the header.
     * @param {number} [rowsCount] When provided, this method acts as a setter and sets the rowsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored rowsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    rowsCount: function(rowsCount){
        return this._propertyHandler("row count", rowsCount);
    },
    /**
     * The number of columns in the table.
     * @param {number} [columnsCount] When provided, this method acts as a setter and sets the columnsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored columnsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    columnsCount: function(columnsCount){
        return this._propertyHandler("column count", columnsCount);
    }
};

/**
 * The description of an SAPUI5 Table test object.
 * @param {Object} [props] Initializes a Table test object using the supplied property bag.
 * @returns {Table} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes Web.TableDescriptionBehavior
 * @mixes SAPUI5.TableDescriptionBehavior
 */
function Table(props) {
    var tableDes = new SAPUI5BaseDesc("Table");
    ObjectUtils.extend(tableDes, Web.TableDescriptionBehavior);
    ObjectUtils.extend(tableDes, TableDescriptionBehavior);
    tableDes._defineByPropertyBag(props);
    return tableDes;
}

/**
 * A single cell in the {@link TableTO} SAPUI5 object.
 * @param {number} rowIndex  The 0-based index of the cell's row.
 * @param {number} cellIndex  The 0-based index of the cell's column.
 * @param {TableTO} ownerTable The table that the current cell belongs to.
 * @mixes SAPUI5.TableCellBehavior._properties
 * @mixes SAPUI5.TableCellBehavior._methods
 * @constructor
 * @memberof SAPUI5
 */
function TableCell(rowIndex,cellIndex,ownerTable){
    var isNumberCellIndex = typeof cellIndex === "number";
    var cell = new WebTableCell(rowIndex,isNumberCellIndex?cellIndex:-1,ownerTable);
    if (!isNumberCellIndex)
        cell._columnName = cellIndex;

    //added in order to be able to retrieve the web table implementation, since it is overwritten after the merge
    cell._webImpl = {
		$: cell.$,
        text: cell.text,
        countOf: cell.countOf
	};
    cell._mergeBehavior(TableCellBehavior);
    return cell;
}

//Consts
var setTextWiredName = "SetCellData";
var selectItemWiredName = "SelectItemInCell";
var countOfWiredName = "ChildItemCount";

/**
 * The methods of TableCell object
 * @memberof SAPUI5
 * @ignore
 */
var TableCellBehavior = {

    /**
     * @memberof SAPUI5.TableCellBehavior
     * @ignore
     */
    _properties: {
        //Override same methods in WebTableCell.prototype
        text: function(){
            if (this._columnName) {
                return this._updateCellIndex().then(function(){
                    return this._webImpl.text.apply(this);
                }.bind(this));
            }
            return this._webImpl.text.apply(this);
        }
    },

    /**
     * @memberof SAPUI5.TableCellBehavior
     * @ignore
     */
    _methods: {
        /**
         * Sets the contents of the table cell to the specified text value.
         * @function
         * @param {string} text The text value to set.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        setText: {
            wiredName: setTextWiredName,
            exec: function (text) {
                return this._ownerTable._executeWithEventsOnItem(this, this._ownerTable._executeCommand, setTextWiredName, this._rowIndex, this._columnName ? this._columnName : this._cellIndex, text);
            }
        },

        /**
         * Selects the specified item in the table cell according to its text.
         * @function
         * @param {string} text The text of the item to select.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        selectItem: {
            wiredName: selectItemWiredName,
            exec: function(text){
                return this._ownerTable._executeWithEventsOnItem(this, this._ownerTable._executeCommand, selectItemWiredName, this._rowIndex, this._columnName?this._columnName:this._cellIndex, text);
            }
        },

        $: function(childType){
            if (this._columnName) {
                return this._updateCellIndex().then(function(){
                    return this._webImpl.$.apply(this,childType);
                }.bind(this));
            }
            return this._webImpl.$.apply(this,childType);
        },

        countOf: {
            wiredName: countOfWiredName,
            exec: function(childType){
                if (this._columnName) {
                    return this._updateCellIndex().then(function(){
                        return this._webImpl.countOf.apply(this,childType);
                    }.bind(this));
                }
                return this._webImpl.countOf.apply(this,childType);
            }
        }
    },

    /**
     * @memberof SAPUI5.TableCellBehavior
     * @ignore
     */
    _helpers: {
        _updateCellIndex: function () {
            return this._ownerTable.columnHeaders().then(function (headers) {
                var cellIndex = headers.indexOf(this._columnName);
                this._cellIndex = cellIndex + 1;
            }.bind(this));
        }
    }
};

/**
 * An SAPUI5 Table.
 * Note: Row-related methods always refer only to visible rows.
 * @constructor
 * @memberof SAPUI5
 * @class TableTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes Web.TableTestObjectBehavior._properties
 * @mixes Web.TableTestObjectBehavior._methods
 * @mixes Web.TableBorderTOBehavior._properties
 * @mixes Web.TableFindRowTOBehavior._methods
 * @mixes SAPUI5.FirstPageAndLastPageTOBehavior._methods
 * @mixes SAPUI5.NextPageAndPreviousPageTOBehavior._methods
 * @mixes SAPUI5.DesktopTableBehavior._methods
 * @mixes SAPUI5.MobileTableBehavior._methods
 * @mixes SAPUI5.TableTestObjectBehavior._methods
 * @mixes SAPUI5.TableTestObjectBehavior._properties
 */
function TableTO(session, description) {
    description = description || Table();
    var tableTO = new SAPUI5BaseTestObject("SAPUITable", session, description);
    tableTO._mergeBehavior(Web.TableTestObjectBehavior);
    tableTO._mergeBehavior(Web.TableBorderTOBehavior);
    tableTO._mergeBehavior(Web.TableFindRowTOBehavior);
    tableTO._mergeBehavior(HelperBehaviors.FirstPageAndLastPageTOBehavior);
    tableTO._mergeBehavior(HelperBehaviors.NextPageAndPreviousPageTOBehavior);
    tableTO._mergeBehavior(DesktopTableBehavior);
    tableTO._mergeBehavior(MobileTableBehavior);
    tableTO._mergeBehavior(TableTestObjectBehavior);
    tableTO._mergeBehavior(ExecuteItemsWithEventsBehavior);
    return tableTO;
}
function _rowIndexAdjust(item){
    return item+1;
}
function _columnIndexAdjust(col){
    if(typeof col === 'number')
        return "#"+(col+1);

    return col;
}

//Consts
var columnsWiredName = "columns";
var selectedRowIndicesWiredName = "selected rows indices";
var selectCellWiredName = "SelectCell";
var selectRowWiredName = "SelectRow";
var deselectRowWiredName = "ExtendDeselectRow";
var selectAllRowsWiredName = "SelectAll";
var deselectAllRowsWiredName = "DeselectAll";
var deleteRowWiredName = "DeleteRow";
var moreWiredName = "More";

/**
 * @ignore
 * @memberof SAPUI5
 */
var TableTestObjectBehavior = {
    _helpers: {

        /**
         * Initializes a complete table of cells (array of arrays).
         * @param {number} rows The number of rows in the requested table.
         * @param {number} cols The number of cells in each row.
         * @param {number} base The index of first visible row.
         * @returns {Object[]} an array of rows.
         * @private
         */
        _initTable: function (rows, cols, base) {
            var table = [];
            for (var rowIndex = 0; rowIndex < rows; rowIndex++) {
                table[rowIndex] = this._initRowInTable(rowIndex + base - 1, cols);
            }
            return table;
        },

        /**
         * Initializes a row of cells.
         * @param {number} rowNumber The row number to initialize.
         * @param {number} cols The number of cells.
         * @returns {Object[]} an array of cells.
         * @private
         */
        _initRowInTable: function (rowNumber, cols) {
            var resRow = [];
            for (var cellIndex = 0; cellIndex < cols; cellIndex++) {
                resRow[cellIndex] = new TableCell(rowNumber, cellIndex, this);
            }
            return resRow;
        }
    },
    /**
     * @ignore
     * @memberof SAPUI5.TableTestObjectBehavior
     */
    _properties: {
        /**
         * Returns either a specific cell or a promise of all cells in the table.
         * @function
         * @param {number} [row] The row index (0-based) of the specific cell.
         * @param {number} [col] The column index (0-based) in the row specified by the row parameter.
         * @returns {Promise<TableCell[][]> | TableCell} either a promise for all the cells in the table (when called without arguments) or the specified cell.
         */
        cells: function (row, col) {
            if (arguments.length < 2) {
                return this._getROPropertiesWithoutEvents("row count", "column count", "first row index").then(function (tableInfo) {
                    return this._initTable.apply(this, tableInfo);
                }.bind(this));
            }
            return new TableCell(row, col, this);
        },

        /**
         * An array of column headers.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the collection of column headers.
         */
        columnHeaders: {
            wiredName: columnsWiredName,
            getter: function(){
                return this._getROProperty(columnsWiredName, arguments).then(StringUtils.splitFunc(";"));
            }
        },

        /**
         * The number of rows in the table including the header.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of rows in the table.
         */
        rowsCount: {
            wiredName: "row count"
        },
        /**
         * An array of selected row indices.
         * @function
         * @returns {Promise<number[]>} a promise that is fulfilled with an array of selected row indices of the table.
         */
        selectedRows: {
            wiredName: selectedRowIndicesWiredName,
            getter: function(){
                return this._getROProperty(selectedRowIndicesWiredName, arguments).then(function(str){
                    return str === '' ? [] : str.split(';').map(function(index){return index-1;});
                });
            }
        }
    },
    /**
     * @ignore
     * @memberof SAPUI5.TableTestObjectBehavior
     */
    _methods: {
        /**
         * Selects the specified cell in the table (by column and row).
         * @function
         * @param {number} row The row number (0-based) of the cell to select.
         * @param {number|string} col The column number (0-based) or the name of the cell to select.
         * @returns {Promise<void>} a promise that is fulfilled after the cell is selected.
         */
        selectCell: {
            wiredName: selectCellWiredName,
            exec: function (row, col) {
                return this._executeWithEvents(arguments, selectCellWiredName, _rowIndexAdjust(row), _columnIndexAdjust(col));
            }
        },

        /**
         * Selects the specified rows in the table (by index).
         * @function
         * @param {...number} indices The indices (0-based) of the rows to select.
         * @returns {Promise<void>} a promise that is fulfilled after the specified rows are selected.
         */
        selectRow: {
            wiredName: selectRowWiredName,
            exec: function () {
                return this._executeOnItemsCollection(arguments, selectRowWiredName, "ExtendSelectRow", ArrayUtils.toArray(arguments), _rowIndexAdjust);
            }
        },

        /**
         * Deselects the specified rows in the table (by index).
         * @function
         * @param {...number} indices The indices (0-based) of the rows to deselect.
         * @returns {Promise<void>} a promise that is fulfilled after the specified rows are deselected.
         */
        deselectRow: {
            wiredName: deselectRowWiredName,
            exec: function () {
                return this._executeOnItemsCollection(arguments, deselectRowWiredName, deselectRowWiredName, ArrayUtils.toArray(arguments), _rowIndexAdjust);
            }
        },

        /**
         * Selects all rows in the table.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after all the rows are selected.
         */
        selectAllRows: {
            wiredName: selectAllRowsWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, selectAllRowsWiredName);
            }
        },

        /**
         * Deselects all rows in the table.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after all the rows are deselected.
         */
        deselectAllRows: {
            wiredName: deselectAllRowsWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, deselectAllRowsWiredName);
            }
        },

        /**
         * Deletes the specified rows in the table.
         * @function
         * @param {...number} indices The indices (0-based) of the rows to delete.
         * @returns {Promise<void>} a promise that is fulfilled after the specified rows are deleted.
         */
        deleteRow: {
            wiredName: deleteRowWiredName,
            exec: function () {
                return this._executeOnItemsCollection(arguments, deleteRowWiredName, deleteRowWiredName, ArrayUtils.toArray(arguments), _rowIndexAdjust);
            }
        },

        /**
         * Clicks the More button in the expandable table.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the table is expanded.
         */
        more: {
            wiredName: moreWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, moreWiredName);
            }
        }
    }
};

//Consts
var currentPageWiredName = "CurrentPage";
var moveColumnWiredName = "MoveColumn";
var resizeColumnWiredName = "ResizeColumn";
var navigateToPageWiredName = "SetPage";
var openMenuWiredName = "OpenMenu";
var clickColumnHeaderWiredName = "HeaderClick";

/**
 * @ignore
 * @memberof SAPUI5
 */
var DesktopTableBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.DesktopTableBehavior
     */
    _methods: {
        /**
         * The current page number in this table.
         * This is additional functionality for tables on desktop devices.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the current page number of the table.
         */
        currentPage: {
            wiredName: currentPageWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, currentPageWiredName);
            }
        },
        /**
         * Moves the specified column to the specified column position.
         * This is additional functionality for tables on desktop devices.
         * @function
         * @param {number|string} fromCol The index (0-based) or the name of the source column.
         * @param {number|string} toCol The index (0-based) or the name of the destination column.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        moveColumn: {
            wiredName: moveColumnWiredName,
            exec: function (fromCol, toCol) {
                return this._executeWithEvents(arguments, moveColumnWiredName, _columnIndexAdjust(fromCol), _columnIndexAdjust(toCol));
            }
        },

        /**
         * Resizes the specified column (according to its index or name) to the specified width.
         * This is additional functionality for tables on desktop devices.
         * @function
         * @param {number|string} column The index (0-based) or name of the column to resize.
         * @param {number} width The new column width.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        resizeColumn: {
            wiredName: resizeColumnWiredName,
            exec: function (column, width) {
                return this._executeWithEvents(arguments, resizeColumnWiredName, _columnIndexAdjust(column), width);
            }
        },

        /**
         * Scrolls the table to the specified page.
         * This is additional functionality for tables on desktop devices.
         * @function
         * @param {number} pageNum The page number to scroll to.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        navigateToPage: {
            wiredName: navigateToPageWiredName,
            exec: function (pageNum) {
                return this._executeWithEvents(arguments, navigateToPageWiredName, pageNum);
            }
        },

        /**
         * Clicks the column header (according to its index or name) to open the associated menu.
         * This is additional functionality for tables on desktop devices.
         * @function
         * @param {number|string} column The column index (0-based) or name to click.
         * @returns {Promise<void>} a promise that is fulfilled after the menu of the column header is open.
         */
        openMenu: {
            wiredName: openMenuWiredName,
            exec: function (column) {
                return this._executeWithEvents(arguments, openMenuWiredName, _columnIndexAdjust(column));
            }
        },

        /**
         * Clicks the header of the specified column according to its index or name.
         * This is additional functionality for tables on desktop devices.
         * @function
         * @param {number|string} column The column index (0-based) or name to click.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        clickColumnHeader: {
            wiredName: clickColumnHeaderWiredName,
            exec: function (column) {
                return this._executeWithEvents(arguments, clickColumnHeaderWiredName, _columnIndexAdjust(column));
            }
        }
    }
};

//Consts
var mobileNavigateToRowWiredName = "Navigate";

/**
 * @ignore
 * @memberof SAPUI5
 */
var MobileTableBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.MobileTableBehavior
     */
    _methods: {
        /**
         * Navigates to the specified row.
         * This is additional functionality for tables on desktop devices.
         * @param {number} rowIndex The row index (0-based).
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        navigateToRow: {
            wiredName: mobileNavigateToRowWiredName,
            exec: function (rowIndex) {
                return this._executeWithEvents(arguments, mobileNavigateToRowWiredName, rowIndex + 1);
            }
        }
    }
};

module.exports.Table = Table;
module.exports.TableTO = TableTO;


