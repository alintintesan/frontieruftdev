// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/30/2015.
 */

var Core = require("leanft.sdk.core");
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;
var HelperBehaviors = require("./helper_behaviors.js");
var Web = require("leanft.sdk.web").Behaviors;

var SapUI5HelperFuncs = HelperBehaviors.HelperFuncs;

/**
 * The description of an SAPUI5 Menu test object.
 * @param {Object} [props] Initializes a Menu test object using the supplied property bag.
 * @returns {Menu} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes SAPUI5.EnabledDescriptionBehavior
 */
function Menu(props) {
    var menuDes = new SAPUI5BaseDesc("Menu");

    Core.ObjectUtils.extend(menuDes, HelperBehaviors.EnabledDescriptionBehavior);

    menuDes._defineByPropertyBag(props);

    return menuDes;
}

/**
 * An SAPUI5 Menu.
 * @constructor
 * @memberof SAPUI5
 * @class MenuTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes SAPUI5.EnabledTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @mixes SAPUI5.MenuTOBehavior._methods
 */
function MenuTO(session, description) {
    description = description || Menu();
    var menuTO = new SAPUI5BaseTestObject("SAPUIMenu", session, description);

    menuTO._mergeBehavior(HelperBehaviors.EnabledTOBehavior);
    menuTO._mergeBehavior(MenuTOBehavior);

    return menuTO;
}

//Consts
var selectWiredName = "Select";

/**
 * @memberof SAPUI5
 * @ignore
 */
var MenuTOBehavior = {
    /**
     * @memberof SAPUI5.MenuTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Selects the specified item in the menu. <br/>
         * Note: you can use the buildMenuPath function to create the menu path.
         * @function
         * @param {string} path Selects the specified item in the menu.
         * @returns {Promise<void>} a promise that is fulfilled after selecting the specified item in the menu.
         */
        select: {
            wiredName: selectWiredName,
            exec: function (path) {
                return this._executeWithEvents(arguments, selectWiredName, Core.Convert.toString(path)).then(function (res) {
                    if (false === res)
                        throw new Error("Cannot identify the specified path in the SAPUI5 menu test object. Confirm that the specified path is a valid path in the menu.");
                });
            }
        },
        /**
         * Sets value in the menu item's text field. <br/>
         * Note: you can use the buildMenuPath function to create the menu path.
         * @function
         * @param {string} itemPath The path to the menu item.
         * @param {string} value The value to enter in the menu item's text field.
         * @returns {Promise<void>} a promise that is fulfilled after the operation has occurred.
         */
        setItemValue: {
            wiredName: selectWiredName,
            exec: function (itemPath, value) {
                return this._executeWithEvents(arguments, selectWiredName, Core.Convert.toString(itemPath), Core.Convert.toString(value));
            }
        },
        /**
         * Builds the menu path from the arguments passed.
         * Arguments can be either a string (the name of the menu item), or a number (the 0-based index of the menu item). <br/>
         * Example: if ("menu1", 4) is passed, then it selects 'menu1' from the top level menu item, and selects the 4th menu item in the open menu.
         * @function
         * @returns {string} a string representing the menu path as described by the arguments.
         */
        buildMenuPath: function () {
            var items = Core.ArrayUtils.toArray(arguments);
            return Web.BuildPathBehavior._buildPath.apply(undefined, items.map(SapUI5HelperFuncs.itemTransform));
        }
    }
};

module.exports.Menu = Menu;
module.exports.MenuTO = MenuTO;