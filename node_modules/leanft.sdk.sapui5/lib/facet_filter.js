// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 01/20/2015.
 */

var Core = require("leanft.sdk.core");
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;
var HelperBehaviors = require("./helper_behaviors.js");
var SapUI5HelperFuncs = HelperBehaviors.HelperFuncs;
var ArrayUtils = Core.ArrayUtils;
var StringUtils = Core.StringUtils;

/**
 * @typedef {Object} FacetFilterMode - Supported FacetFilter visual modes.
 * @property {string} auto  Auto mode.
 * @property {string} fixed  Fixed mode.
 * @property {string} simple  Simple mode.
 * @property {string} light  Light mode.
 * @memberof SAPUI5
 */
var FacetFilterMode = {
    auto: "Auto",
    fixed: "Fixed",
    simple: "Simple",
    light: "Light"
};

var facetFilterModeToNative = function(mode){
    var key = mode.toLowerCase();
    if(!(key in FacetFilterMode))
        throw new Error("You must supply a valid FacetFilterMode type");

    return FacetFilterMode[key];
};

/**
 * Common methods for the FacetFilter description
 * @ignore
 * @memberof SAPUI5
 */
var FacetFilterDescriptionBehavior = {
    /**
     * The visual mode of the facet filter.
     * @param {SAPUI5.FacetFilterMode} facetFilterMode The visual mode of the facet filter.
     * @returns {SAPUI5.FacetFilterMode | Description} If no parameter is provided, the method acts as a getter and returns the current stored value of mode;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    mode: function(facetFilterMode){
        return this._propertyHandler("mode", facetFilterMode, facetFilterModeToNative);
    },

    /**
     * The number of all the filter lists in the object.
     * @param {number} [count] The number of all the filter lists in the object.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored filtersCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    filtersCount: function(count){ // number
        return this._propertyHandler("list count", count, Core.Convert.toNumber);
    },

    /**
     * An array of all the titles of the filter lists.
     * @param {string[]} filters An array of all the titles of the filter lists.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored filters value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    filters: function(filters) {
        return this._propertyHandler("all lists", filters,
            StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    }
};

/**
 * The description of an SAPUI5 FacetFilter test object.
 * @param {Object} [props] Initializes a FacetFilter test object using the supplied property bag.
 * @returns {FacetFilter} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes SAPUI5.EnabledDescriptionBehavior
 * @mixes SAPUI5.FacetFilterDescriptionBehavior
 */
function FacetFilter(props) {
    var facetFilterDes = new SAPUI5BaseDesc("FacetFilter");

    Core.ObjectUtils.extend(facetFilterDes, HelperBehaviors.EnabledDescriptionBehavior);
    Core.ObjectUtils.extend(facetFilterDes, FacetFilterDescriptionBehavior);

    facetFilterDes._defineByPropertyBag(props);

    return facetFilterDes;
}

/**
 * An SAPUI5 FacetFilter.
 * @constructor
 * @memberof SAPUI5
 * @class FacetFilterTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes SAPUI5.EnabledTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @mixes SAPUI5.NavigationTOBehavior._methods
 * @mixes SAPUI5.MobileFacetFilterBehavior._methods
 * @mixes SAPUI5.DesktopFacetFilterBehavior._methods
 * @mixes SAPUI5.FacetFilterTOBehavior._methods
 * @mixes SAPUI5.FacetFilterTOBehavior._properties
 */
function FacetFilterTO(session, description) {
    description = description || FacetFilter();
    var facetFilterTO = new SAPUI5BaseTestObject("SAPUIFacetFilter", session, description);

    facetFilterTO._mergeBehavior(HelperBehaviors.EnabledTOBehavior);
    facetFilterTO._mergeBehavior(HelperBehaviors.NavigationTOBehavior);
    facetFilterTO._mergeBehavior(MobileFacetFilterBehavior);
    facetFilterTO._mergeBehavior(DesktopFacetFilterBehavior);
    facetFilterTO._mergeBehavior(FacetFilterTOBehavior);

    return facetFilterTO;
}

//Consts
var filtersWiredName = "all lists";
var getSelectedKeysForWiredName = "SelectedKeys";
var getSelectedKeysCountForWiredName = "SelectedKeysCount";

/**
 * @ignore
 * @memberof SAPUI5
 */
var FacetFilterTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.FacetFilterTOBehavior
     */
    _properties: {
        /**
         * Returns an array of all the titles of the filter lists in the object.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the array of the titles of the filter lists contained in the object.
         */
        filters: {
            wiredName: filtersWiredName,
            getter: function () {
                return this._getROProperty(filtersWiredName, arguments).then(StringUtils.splitFunc(";"));
            }
        },

        /**
         * The visual mode of the object.
         * @function
         * @returns {Promise<SAPUI5.FacetFilterMode>} a promise that is fulfilled with the visual mode of the object.
         */
        mode: {
            type: 'enum',
            enumType: FacetFilterMode,
            enumName: 'FacetFilterMode'
        }
    },

    /**
     * @ignore
     * @memberof SAPUI5.FacetFilterTOBehavior
     */
    _methods: {
        /**
         * Gets the selected filter keys in the specific filter list.
         * @function
         * @param filter {string | number} The specific filter list to get selected keys for. It can be the title or numeric index of the filter list.
         * Numeric index values begin with 0.
         * @returns {Promise<string[]>} a promise that is fulfilled with the array of selected keys of the filter list.
         */
        getSelectedKeysFor: {
            wiredName: getSelectedKeysForWiredName,
            exec: function (filter) {
                return this._executeWithEvents(arguments, getSelectedKeysForWiredName, SapUI5HelperFuncs.itemTransform(filter))
                    .then(StringUtils.splitFunc(";"));
            }
        },

        /**
         * Returns the number of selected keys in the specific filter list.
         * @function
         * @param {string | number} filter The specific filter list to get selected keys for. It can be the title or numeric index of the filter list.
         * Numeric index values begin with 0.
         * @returns {Promise<number>} a promise that is fulfilled with the number of selected keys of the filter list.
         */
        getSelectedKeysCountFor: {
            wiredName: getSelectedKeysCountForWiredName,
            exec: function (filter) {
                return this._executeWithEvents(arguments, getSelectedKeysCountForWiredName, SapUI5HelperFuncs.itemTransform(filter));
            }
        }
    }
};

//Consts
var openWiredName = "Open";
var removeWiredName = "Remove";
var openDialogWiredName = "OpenDialog";
var resetWiredName = "Reset";

/**
 * @ignore
 * @memberof SAPUI5
 */
var MobileFacetFilterBehavior = {
    _methods: {
        /**
         * Opens the specified filter list from the facet filter. This is an additional functionality for the facet filter on mobile devices.<br/>
         * Usage: facetfilter.open(filterlist); then operate on the opened filter list as a SAPUI list.
         * @function
         * @param {string | number} filter The specific filter list to open. It can be the title or numeric index of the filter list.
         * Numeric index values begin with 0.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is done.
         */
        open: {
            wiredName: openWiredName,
            exec: function (filter) {
                return this._executeWithEvents(arguments, openWiredName, SapUI5HelperFuncs.itemTransform(filter));
            }
        },

        /**
         * Removes the specified filter list from the facet filter. This is an additional functionality for the facet filter on mobile devices.<br/>
         * Note: only applicable when the filter list is removable.
         * @function
         * @param {string | number} filter The specific filter list to remove. It can be the title or numeric index of the filter list.
         * Numeric index values begin with 0.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is done.
         */
        remove: {
            wiredName: removeWiredName,
            exec: function (filter) {
                return this._executeWithEvents(arguments, removeWiredName, SapUI5HelperFuncs.itemTransform(filter));
            }
        },

        /**
         * Opens the facet filter dialog box. This is an additional functionality for the facet filter on mobile devices.<br/>
         * Note: only applicable when there is dialog box associated with the object.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation is done.
         */
        openDialog: {
            wiredName: openDialogWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, openDialogWiredName);
            }
        },

        /**
         * Resets the facet filter list. This is an additional functionality for the facet filter on mobile devices.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation is done.
         */
        reset: {
            wiredName: resetWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, resetWiredName);
            }
        }
    }
};

//Consts
var filterByWiredName = "FilterBy";

/**
 * @ignore
 * @memberof SAPUI5
 */
var DesktopFacetFilterBehavior = {
    _methods: {
        /**
         * Invokes the specified filter according to the specified keys. This is an additional functionality for the facet filter on desktop devices.
         * @function
         * @param {string | number} filter The specific filter list to invoke. It can be the title or numeric index of the filter list.
         * Numeric index values begin with 0.
         * @param {...number | string} key You can pass as many keys as you like, each key can be either the name of the key to select,
         * or the numeric index of the key.<br/>
         * Example: facetFilter.filterBy("filter1", 2, "key1"); This invokes filtering on the 2nd key and key "key1" on filter list "filter1".
         * @returns {Promise<void>} a promise that is fulfilled when the operation is done.
         */
        filterBy: {
            wiredName: filterByWiredName,
            exec: function () {
                var inputs = ArrayUtils.toArray(arguments);
                if (inputs === null || inputs.length === 0 || inputs.length === 1)
                    return;

                var filter = inputs[0];
                var keys = inputs.splice(1, inputs.length - 1);
                return this._executeOnItemsCollection(arguments, filterByWiredName, "ExtendFilterBy", keys, SapUI5HelperFuncs.itemTransform, SapUI5HelperFuncs.itemTransform(filter));
            }
        }
    }
};
module.exports.FacetFilter = FacetFilter;
module.exports.FacetFilterTO = FacetFilterTO;
module.exports.FacetFilterMode = FacetFilterMode;