// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var Core = require("leanft.sdk.core");
var Web = require("leanft.sdk.web").Behaviors;
var WebHelperFuncs = require("leanft.sdk.web").HelperFuncs;
var ObjectUtils = Core.ObjectUtils;
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;
var HelperBehaviors = require("./helper_behaviors.js");
var StringUtils = Core.StringUtils;

/**
 * @typedef {Object} RowRepeaterDesign - Supported RowRepeater visual design styles.
 * @property {string} bareShell  BareShell design style.
 * @property {string} standard  Standard design style.
 * @property {string} transparent  Transparent design style.
 * @memberof SAPUI5
 */
var RowRepeaterDesign = {
    bareShell: 'BareShell',
    standard: 'Standard',
    transparent: 'Transparent'
};

/**
 * Common methods for the RowRepeater description
 * @ignore
 * @memberof SAPUI5
 */
var RowRepeaterDescriptionBehavior = {
    /**
     * Indicates whether the More button is visible.
     * @param {boolean} hasMoreSteps Indicates whether the More button is visible.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored visibility of the More button;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    hasMoreSteps: function(hasMoreSteps){
        return this._propertyHandler("show more steps", hasMoreSteps, WebHelperFuncs.boolToInt, WebHelperFuncs.intToBool, Core.Convert.toBool);
    },

    /**
     * Indicates the visual design of the row repeater.
     * @param {SAPUI5.RowRepeaterDesign} design The visual design of the row repeater.
     * @returns {SAPUI5.RowRepeaterDesign | Description} If no parameter is provided, the method acts as a getter and returns the current stored design status;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    design: function(design){
        return this._propertyHandler("design", design);
    },

    /**
     * Indicates the filter buttons that you can use to filter the rows.
     * @param {string[]} filters The filter buttons.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored filter buttons;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    filters: function(filters){
        return this._propertyHandler("filters", filters, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    },

    /**
     * Indicates the sorter buttons that you can use to sort the rows.
     * @param {string[]} sorters The sorter buttons.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored sorter buttons.;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    sorters: function(sorters){
        return this._propertyHandler("sorters", sorters, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    }
};

/**
 * The description of an SAPUI5 RowRepeater test object.
 * @param {Object} [props] Initializes a RowRepeater test object using the supplied property bag.
 * @returns {RowRepeater} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes SAPUI5.PageInfoDescriptionBehavior
 * @mixes SAPUI5.RowRepeaterDescriptionBehavior
 */
function RowRepeater(props) {
    var rowRepeaterDes = new SAPUI5BaseDesc("RowRepeater");
    ObjectUtils.extend(rowRepeaterDes, HelperBehaviors.PageInfoDescriptionBehavior);
    ObjectUtils.extend(rowRepeaterDes, RowRepeaterDescriptionBehavior);

    rowRepeaterDes._defineByPropertyBag(props);

    return rowRepeaterDes;
}

/**
 * An SAPUI5 RowRepeater.
 * @constructor
 * @memberof SAPUI5
 * @class RowRepeaterTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes SAPUI5.FirstPageAndLastPageTOBehavior._methods
 * @mixes SAPUI5.NextPageAndPreviousPageTOBehavior._methods
 * @mixes SAPUI5.PageInfoBehavior.TOBehavior._properties
 * @mixes SAPUI5.RowRepeaterTOBehavior._properties
 * @mixes SAPUI5.RowRepeaterTOBehavior._methods
 */
function RowRepeaterTO(session, description) {
    description = description || RowRepeater();
    var rowRepeaterTO = new SAPUI5BaseTestObject("SAPUIRowRepeater", session, description);
    rowRepeaterTO._mergeBehavior(HelperBehaviors.FirstPageAndLastPageTOBehavior);
    rowRepeaterTO._mergeBehavior(HelperBehaviors.NextPageAndPreviousPageTOBehavior);
    rowRepeaterTO._mergeBehavior(HelperBehaviors.PageInfoTOBehavior);
    rowRepeaterTO._mergeBehavior(RowRepeaterTOBehavior);
    return rowRepeaterTO;
}

//Consts
var hasMoreStepsWiredName = "show more steps";
var moreWiredName = "ShowMore";
var navigateToWiredName = "SetPage";
var filterByWiredName = "FilterBy";
var sortByWiredName = "SortBy";
var getCellDataWiredName = "GetCellData";
var findRowWithCellTextInColumnWiredName = "GetRowWithCellText";

/**
 * @ignore
 * @memberof SAPUI5
 */
var RowRepeaterTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.RowRepeaterTOBehavior
     */
    _properties: {
        /**
         * Indicates whether the More button is visible.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the visibility of the More button.
         */
        hasMoreSteps: {
            wiredName: hasMoreStepsWiredName,
            getter: function () {
                return this._getROProperty(hasMoreStepsWiredName, arguments).then(function (steps) {
                    return steps > 0;
                });
            }
        },

        /**
         * The visual design of the row repeater.
         * @function
         * @returns {Promise<SAPUI5.RowRepeaterDesign>} a promise that is fulfilled with the visual design of the row repeater.
         */
        design: {
            type: 'enum',
            enumType: RowRepeaterDesign,
            enumName: 'RowRepeaterDesign'
        },

        /**
         * The number of visible rows in the row repeater.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the visible row count.
         */
        rowsCount: {
            type: 'uint',
            wiredName: "rows count"
        },

        /**
         * A list of the filter buttons for filtering the rows.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with an array of filter buttons.
         */
        filters: {
            getter: function () {
                return this._getROProperty("filters", arguments).then(StringUtils.splitFunc(";"));
            }
        },

        /**
         * A list of the sorter buttons for sorting the rows.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with an array of sorter buttons.
         */
        sorters: {
            getter: function () {
                return this._getROProperty("sorters", arguments).then(StringUtils.splitFunc(";"));
            }
        }
    },
    /**
     * @ignore
     * @memberof SAPUI5.RowRepeaterTOBehavior
     */
    _methods: {
        /**
         * Displays additional rows. (Relevant only if the More button is visible.)
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the additional rows show.
         */
        more: {
            wiredName: moreWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, moreWiredName);
            }
        },

        /**
         * Scrolls to the specified page.
         * @function
         * @param {number} pageNum The page number to navigate to.
         * @returns {Promise<void>} a promise that is fulfilled after scrolling to the specified page in the row repeater.
         */
        navigateTo: {
            wiredName: navigateToWiredName,
            exec: function (pageNum) {
                return this._executeWithEvents(arguments, navigateToWiredName, pageNum);
            }
        },

        /**
         * Clicks the specified filter button.
         * @function
         * @param {string} filter The name of the filter button.
         * @returns {Promise<void>} a promise that is fulfilled after the filter operation is done.
         */
        filterBy: {
            wiredName: filterByWiredName,
            exec: function (filter) {
                return this._executeWithEvents(arguments, filterByWiredName, filter);
            }
        },

        /**
         * Clicks the specified sorter button.
         * @function
         * @param {string} sorter The name of the sorter button.
         * @returns {Promise<void>} a promise that is fulfilled after the sort operation is done.
         */
        sortBy: {
            wiredName: sortByWiredName,
            exec: function (sorter) {
                return this._executeWithEvents(arguments, sortByWiredName, sorter);
            }
        },

        /**
         * Returns the contents of the specified cell.
         * @function
         * @param {number} row The 0-based row index.
         * @param {number} column The 0-based column index.
         * @returns {Promise<string>} a promise that is fulfilled with the contents of the specified cell.
         */
        getCellData: {
            wiredName: getCellDataWiredName,
            exec: function (row, column) {
                row += 1;
                column += 1;
                return this._executeWithEvents(arguments, getCellDataWiredName, row, column);
            }
        },

        /**
         * Returns the index of the first row containing the specified text in the specified column.
         * @function
         * @param {string} text The text to search for.
         * @param {number} columnNumber The 0-based column number to search.
         * @param {number} [startFromRow] The 0-based row number to start the search from.
         * @returns {Promise<number>} a promise that is fulfilled with the index of the first row containing the specified text in the specified column.
         */
        findRowWithCellTextInColumn: {
            wiredName: findRowWithCellTextInColumnWiredName,
            exec: function (text, columnNumber, startFromRow) {
                columnNumber += 1;
                if (startFromRow !== undefined) {
                    startFromRow += 1;
                    return this._executeWithEvents(arguments, findRowWithCellTextInColumnWiredName, text, columnNumber, startFromRow);
                }
                return this._executeWithEvents(arguments, findRowWithCellTextInColumnWiredName, text, columnNumber);
            }
        }
    }
};

module.exports.RowRepeaterDesign = RowRepeaterDesign;
module.exports.RowRepeater = RowRepeater;
module.exports.RowRepeaterTO = RowRepeaterTO;
