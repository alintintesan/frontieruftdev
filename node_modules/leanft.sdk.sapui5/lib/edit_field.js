// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/30/2015.
 */

var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;
var Web = require("leanft.sdk.web").Behaviors;
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;
var HelperBehaviors = require("./helper_behaviors.js");

/**
 * The description of an SAPUI5 Edit test object.
 * @param {Object} [props] Initializes an Edit test object using the supplied property bag.
 * @returns {Edit} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes Web.FormFieldBehavior
 * @mixes Web.EditFieldBaseDescriptionBehavior
 * @mixes Web.EditDescriptionBehavior
 * @mixes SAPUI5.EnabledDescriptionBehavior
 */
function Edit(props) {
    var editFieldDes = new SAPUI5BaseDesc("EditField");

    ObjectUtils.extend(editFieldDes, Web.FormFieldBehavior);
    ObjectUtils.extend(editFieldDes, Web.EditFieldBaseDescriptionBehavior);
    ObjectUtils.extend(editFieldDes, Web.EditDescriptionBehavior);
    ObjectUtils.extend(editFieldDes, HelperBehaviors.EnabledDescriptionBehavior);

    editFieldDes._defineByPropertyBag(props);

    return editFieldDes;
}

/**
 * An SAPUI5 EditField.
 * @constructor
 * @memberof SAPUI5
 * @class EditFieldTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes Web.EditFieldBaseTestObjectBehavior._properties
 * @mixes Web.EditFieldBaseTestObjectBehavior._methods
 * @mixes Web.EditTOBehavior._properties
 * @mixes Web.EditTOBehavior._methods
 * @mixes SAPUI5.EnabledTOBehavior._properties
 * @mixes SAPUI5.ReadOnlyTOBehavior._properties
 * @mixes SAPUI5.EditFieldTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 */
function EditFieldTO(session, description) {
    description = description || Edit();
    var editFieldTO = new SAPUI5BaseTestObject("SAPUITextEdit", session, description);

    editFieldTO._mergeBehavior(Web.EditFieldBaseTestObjectBehavior);
    editFieldTO._mergeBehavior(Web.EditTOBehavior);
    editFieldTO._mergeBehavior(HelperBehaviors.EnabledTOBehavior);
    editFieldTO._mergeBehavior(HelperBehaviors.ReadOnlyTOBehavior);
    editFieldTO._mergeBehavior(EditFieldTOBehavior);

    return editFieldTO;
}

//Consts
var searchWiredName = "Search";
var clearWiredName = "Clear";
var openPossibleEntriesWiredName = "OpenPossibleEntries";
var refreshWiredName = "Refresh";

/**
 * @ignore
 * @memberof SAPUI5
 */
var EditFieldTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.EditFieldTOBehavior
     */
    _methods:{
        /**
         * Enters the specified text in the Search edit box and clicks the Search button.
         * @function
         * @param {string} text The specified text to enter.
         * @returns {Promise<void>} a promise that is fulfilled after the searching is done.
         */
        search: {
            wiredName: searchWiredName,
            exec: function (text) {
                return this._executeWithEvents(arguments, searchWiredName, Core.Convert.toString(text));
            }
        },
        /**
         * Clears the text in the object.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the text is cleared.
         */
        clear: {
            wiredName: clearWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, clearWiredName);
            }
        },
        /**
         * Opens the list displaying possible values.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the list displaying possible values is open.
         */
        openPossibleEntries: {
            wiredName: openPossibleEntriesWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, openPossibleEntriesWiredName);
            }
        },
        /**
         * Clicks the Refresh button associated with the object.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the refresh is done.
         */
        refresh: {
            wiredName: refreshWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, refreshWiredName);
            }
        }
    }
};

module.exports.Edit = Edit;
module.exports.EditFieldTO = EditFieldTO;
module.exports.EditFieldTOBehavior = EditFieldTOBehavior;
