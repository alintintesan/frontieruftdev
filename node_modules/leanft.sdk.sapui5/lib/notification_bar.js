// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 02/23/2016.
 */

var Core = require("leanft.sdk.core");
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;
var HelperBehaviors = require("./helper_behaviors.js");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;


/**
 * @typedef {Object} BarState - Supported NotificationBar states.
 * @property {string} default  Default NotificationBar state.
 * @property {string} max  Maximum NotificationBar state.
 * @property {string} hidden  Hidden NotificationBar state.
 * @property {string} invisible  Invisible NotificationBar state.
 * @memberof SAPUI5
 */
var BarState = {
    default: "default",
    max: "max",
    hidden: "hidden",
    invisible: "invisible"
};

/**
 * @ignore
 * @memberof SAPUI5
 */
var BarStateLinker = {
    default: "Default",
    max: "Enlarged",
    hidden: "Hidden",
    invisible: "Invisible"
};


/**
 * @ignore
 * @memberof SAPUI5
 */
function barStateToNative(state){
    /*jshint eqnull:true */
    var nativeString = BarStateLinker[state.toLowerCase()];
    if(nativeString == null)
        throw new Error("You must supply a valid BarState type");

    return nativeString;
}


/**
 * @ignore
 * @memberof SAPUI5
 */
function nativeToBarState(nativeString){
    var value = nativeString.toLowerCase();
    var result = Object.keys(BarStateLinker).filter(function(key) {
        return BarStateLinker[key].toLowerCase() === value;
    });

    if (result.length === 1) {
        return result[0];
    }

    throw new Error("Enum BarState type name not found");
}

/**
 * Common methods for the NotificationBar description
 * @ignore
 * @memberof SAPUI5
 */
var NotificationBarDescriptionBehavior = {
    /**
     * The number of notifiers contained in the notification bar.
     * @param {number} [count] The number of notifiers contained in the notification bar.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored notifiersCount;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    notifiersCount: function(count){ // number
        return this._propertyHandler("notifiers count", count, Core.Convert.toNumber);
    },

    /**
     * Indicates whether the window of the notification bar is resizable.
     * @param {boolean} resizable Indicates whether the notification bar is resizable.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isResizable value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isResizable: function(resizable){
        return this._propertyHandler("resizable", resizable, Core.Convert.toBool);
    },

    /**
     * Specifies the display state of the notification bar.
     * @param {SAPUI5.BarState} state The display state of the notification bar.
     * @returns {SAPUI5.BarState | Description} If no parameter is provided, the method acts as a getter and returns the current stored state;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    state: function(state){
        return this._propertyHandler("state", state, barStateToNative, nativeToBarState);
    }
};

/**
 * The description of an SAPUI5 NotificationBar test object.
 * @param {Object} [props] Initializes a NotificationBar test object using the supplied property bag.
 * @returns {NotificationBar} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes SAPUI5.NotificationBarDescriptionBehavior
 */
function NotificationBar(props) {
    var notificationBarDes = new SAPUI5BaseDesc("NotificationBar");

    Core.ObjectUtils.extend(notificationBarDes, NotificationBarDescriptionBehavior);

    notificationBarDes._defineByPropertyBag(props);

    return notificationBarDes;
}

/**
 * An SAPUI5 NotificationBar.
 * @constructor
 * @memberof SAPUI5
 * @class NotificationBarTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes SAPUI5.NotificationBarTOBehavior._methods
 * @mixes SAPUI5.NotificationBarTOBehavior._properties
 */
function NotificationBarTO(session, description) {
    description = description || NotificationBar();
    var notificationBarTO = new SAPUI5BaseTestObject("SAPUINotificationBar", session, description);

    notificationBarTO._mergeBehavior(NotificationBarTOBehavior);

    return notificationBarTO;
}

/*jshint eqnull:true */
/**
 * A single notification in the {@link NotificationBarTO} SAPUI5 object.
 * @param {number} notifierIndex The 0-based index of the notifier that contains the notification.
 * @param {number} notificationIndex The 0-based index of the notification.
 * @param {NotificationBarTO} ownerBar The notification bar that the current notification belongs to.
 * @mixes SAPUI5.NotificationBehavior._properties
 * @mixes SAPUI5.NotificationBehavior._methods
 * @constructor
 * @memberof SAPUI5
 */
function Notification(notifierIndex, notificationIndex, ownerBar){
    /*jshint eqnull:true */
    if(typeof(notifierIndex) !== "number")
        throw new Error("notifier index is not a number");

    if(typeof(notificationIndex) !== "number")
        throw new Error("notification index is not a number");

    if(ownerBar == null)
        throw new Error("Owner notification bar is null");

    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(NotificationBehavior);

    this._notifierIndex = notifierIndex +1;
    this._notificationIndex = notificationIndex +1;
    this._ownerBar = ownerBar;
}

/**
 * @memberof Notification
 */
Notification.prototype = {
    _ownerBar: null,
    _notificationIndex: -1,
    _notifierIndex: -1
};

//Consts
var selectNotificationWiredName = "SelectNotification";

/**
 * The methods of Notification object
 * @memberof SAPUI5
 * @ignore
 */
var NotificationBehavior = {

    /**
     * @memberof SAPUI5.NotificationBehavior
     * @ignore
     */
    _properties: {

        /**
         * The text of the notification message.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text of the notification message.
         */
        text: function () {
            return this._ownerBar._executeWithEvents(arguments, "GetNotificationText", this._notifierIndex, this._notificationIndex);
        },

        /**
         * The time at which the notification message was received.
         * @function
         * @returns {Promise<Date>} a promise that is fulfilled with the time the notification message was received.
         */
        receivedTime: function () {
            return this._ownerBar._executeWithEvents(arguments, "GetNotificationTimestamp", this._notifierIndex, this._notificationIndex).then(function (res) {
                return new Date(res);
            });
        }
    },

    /**
     * @memberof SAPUI5.NotificationBehavior
     * @ignore
     */
    _methods: {

        /**
         * Selects the notification message.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation is done.
         */
        select: {
            wiredName: selectNotificationWiredName,
            exec: function () {
                return this._ownerBar._executeWithEvents(arguments, selectNotificationWiredName, this._notifierIndex, this._notificationIndex);
            }
        }
    }
};

/**
 * @typedef {Object} MessageLevel - Supported message levels.
 * @property {string} information  Information message level.
 * @property {string} success  Success message level.
 * @property {string} warning  Warning message level.
 * @property {string} error  Error message level.
 * @memberof SAPUI5
 */
var MessageLevel = {
    information: "Information",
    success: "Success",
    warning: "Warning",
    error: "Error"
};

/*jshint eqnull:true */
/**
 * A single message in the {@link NotificationBarTO} SAPUI5 object.
 * @param {number} messageIndex The 0-based index of the message.
 * @param {NotificationBarTO} ownerBar The notification bar that the current message belongs to.
 * @constructor
 * @mixes SAPUI5.MessageBehavior._properties
 * @mixes SAPUI5.MessageBehavior._methods
 * @memberof SAPUI5
 */
function Message(messageIndex,ownerBar){

    if(typeof(messageIndex) !== "number")
        throw new Error("message index is not a number");

    if(ownerBar == null)
        throw new Error("Owner notification bar is null");

    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(MessageBehavior);

    this._messageIndex = messageIndex +1;
    this._ownerBar = ownerBar;
}

/**
 * @memberof Message
 */
Message.prototype = {
    _ownerBar: null,
    _messageIndex: -1

};

//Consts
var selectMessageWiredName = "SelectMessage";

/**
 * The methods of Message object
 * @memberof SAPUI5
 * @ignore
 */
var MessageBehavior = {

    /**
     * @memberof SAPUI5.MessageBehavior
     * @ignore
     */
    _properties: {

        /**
         * The text of the message.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text of the message.
         */
        text: function () {
            return this._ownerBar._executeWithEvents(arguments, "GetMessageText", this._messageIndex);
        },

        /**
         * The time at which the message was received.
         * @function
         * @returns {Promise<Date>} a promise that is fulfilled with the time at which the message was received.
         */
        receivedTime: function () {
            return this._ownerBar._executeWithEvents(arguments, "GetMessageTimestamp", this._messageIndex).then(function (res) {
                return new Date(res);
            });
        },

        /**
         * The severity level of the message.
         * @function
         * @returns {Promise<SAPUI5.MessageLevel>} a promise that is fulfilled with the severity level of the message.
         */
        level: {
            nonTranslatable: true,
            type: 'enum',
            enumType: MessageLevel,
            enumName: 'MessageLevel',
            getter: function () {
                return this._ownerBar._executeWithEvents(arguments, "GetMessageLevel", this._messageIndex);
            }
        }
    },

    /**
     * @memberof SAPUI5.MessageBehavior
     * @ignore
     */
    _methods: {

        /**
         * Selects the message.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation is done.
         */
        select: {
            wiredName: selectMessageWiredName,
            exec: function () {
                return this._ownerBar._executeWithEvents(arguments, selectMessageWiredName, this._messageIndex);
            }
        }
    }
};

//Consts
var enlargeWiredName = "Enlarge";
var minimizeWiredName = "Minimize";
var showWiredName = "Show";
var hideWiredName = "Hide";

/**
 * @ignore
 * @memberof SAPUI5
 */
var NotificationBarTOBehavior = {

    _helpers: {
        /**
         * Initializes a complete notification bar of notifications (array of arrays when no argument provided) or an array of notifications (when notifierIndex provided).
         * @param {number} [notifierIndex] The 0-based index of the notifier to initialize.
         * @returns {Promise<Notification[][] | Notification[]>} a promise that is fulfilled with the array of all notifications or an array of notifications if a specific notifierIndex is provided.
         * @private
         */
        _initNotificationBar: function (notifierIndex) {
            /*jshint -W083 */
            if (typeof(notifierIndex) === "number") {
                return this._executeWithEvents(arguments, "GetNotificationCountByIndex", notifierIndex + 1).then(function (count) {
                    return this._initNotifier(notifierIndex, count);
                }.bind(this));
            }

            return this._getROProperty("notifiers count", arguments).then(function (notifiersCount) {
                var notificationBar = [];

                if (notifiersCount === 0)
                    return notificationBar;

                var lastPromise = this._executeWithEvents(arguments, "GetNotificationCountByIndex", 1).then(function (count) {
                    notificationBar[0] = this._initNotifier(0, count);
                }.bind(this));

                for (var notifierIndex = 1; notifierIndex < notifiersCount; notifierIndex++) {
                    lastPromise = lastPromise.then(function (index) {
                        return this._executeWithEvents(arguments, "GetNotificationCountByIndex", index + 1).then(function (count) {
                            notificationBar[index] = this._initNotifier(index, count);
                        }.bind(this));
                    }.bind(this, notifierIndex));
                }

                return lastPromise.then(function () {
                    return notificationBar;
                });
            }.bind(this));
        },

        /**
         * Initializes a notifier of notifications.
         * @param {number} notifierIndex The 0-based index of the notifier to initialize.
         * @param {number} notificationsCount The total number of the notifications in the notifier.
         * @returns {Object[]} an array of cells.
         * @private
         */
        _initNotifier: function (notifierIndex, notificationsCount) {
            var notifications = [];
            for (var notificationIndex = 0; notificationIndex < notificationsCount; notificationIndex++) {
                notifications[notificationIndex] = new Notification(notifierIndex, notificationIndex, this);
            }
            return notifications;
        }
    },

    /**
     * @ignore
     * @memberof SAPUI5.NotificationBarTOBehavior
     */
    _properties: {
        /**
         * Returns either a specific notification (when both notifierIndex and notificationIndex are provided)
         * or an array of notifications (when only notifierIndex is provided) or all notifications in the notification bar (when no arguments provided).
         * @function
         * @param {number} [notifierIndex] The index of the notifier. Index values begin with 0.
         * @param {number} [notificationIndex] The index of the notification in the specified notifier. Index values begin with 0.
         * @returns {Notification | Promise<Notification[]> | Promise<Notification[][]>} either the specified notification, or a promise fulfilled with an array of notifications in the specific notifier or a promise fulfilled with all notifications in the notification bar (array of arrays).
         */
        notifications: function (notifierIndex, notificationIndex) {
            if (arguments.length < 2) {
                return this._initNotificationBar(notifierIndex);
            }

            return new Notification(notifierIndex, notificationIndex, this);
        },

        /**
         * Returns either a specific message or all messages in the message notifier.
         * @function
         * @param {number} [messageIndex] The 0-based index of the message in the message notifier.
         * @returns {Promise<Message[]> | Message} either a promise for all the messages in the message notifier (when called without arguments),
         * or the specified message.
         */
        messages: function (messageIndex) {
            if (arguments.length > 0) {
                return new Message(messageIndex, this);
            }

            return this._getROProperty("has message notifier", arguments).then(function (has) {
                var messages = [];
                if (has !== true) {
                    return messages;
                }

                return this._executeWithEvents(arguments, "GetMessageCount").then(function (messageCount) {
                    for (var index = 0; index < messageCount; index++) {
                        messages[index] = new Message(index, this);
                    }
                    return messages;
                }.bind(this));
            }.bind(this));
        },

        /**
         * Indicates whether the object is resizable.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object is resizable.
         */
        isResizable: {
            wiredName: "resizable"
        },

        /**
         * The display state of the notification bar.
         * @function
         * @returns {Promise<BarState>} a promise that is fulfilled with the display state of the notification bar.
         */
        state: {
            type: 'enum',
            enumType: BarState,
            enumName: 'BarState',
            getter: function () {
                return this._getROProperty("state", arguments).then(nativeToBarState);
            }
        }
    },
    /**
     * @ignore
     * @memberof SAPUI5.NotificationBarTOBehavior
     */
    _methods: {

        /**
         * Enlarges the notification bar.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        enlarge: {
            wiredName: enlargeWiredName,
            exec: function(){
                return this._executeWithEvents(arguments, enlargeWiredName);
            }
        },

        /**
         * Minimizes the notification bar.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        minimize: {
            wiredName: minimizeWiredName,
            exec: function(){
                return this._executeWithEvents(arguments, minimizeWiredName);
            }
        },

        /**
         * Shows the notification bar.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        show: {
            wiredName: showWiredName,
            exec: function(){
                return this._executeWithEvents(arguments, showWiredName);
            }
        },

        /**
         * Hides the notification bar.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the operation is done.
         */
        hide: {
            wiredName: hideWiredName,
            exec: function(){
                return this._executeWithEvents(arguments, hideWiredName);
            }
        }
    }
};

module.exports.NotificationBar = NotificationBar;
module.exports.NotificationBarTO = NotificationBarTO;
module.exports.BarState = BarState;
module.exports.MessageLevel = MessageLevel;
