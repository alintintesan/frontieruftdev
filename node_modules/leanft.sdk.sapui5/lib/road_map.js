// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 01/20/2015.
 */

var Core = require("leanft.sdk.core");
var SAPUI5BaseDesc = require("./sapui5_base.js").SAPUI5BaseDesc;
var SAPUI5BaseTestObject = require("./sapui5_base.js").SAPUI5BaseTestObject;
var HelperBehaviors = require("./helper_behaviors.js");
var StringUtils = Core.StringUtils;

/**
 * Common methods for the RoadMap description
 * @ignore
 * @memberof SAPUI5
 */
var RoadMapDescriptionBehavior = {
    /**
     * The number of all the top-level steps in the road map.
     * @param {number} [count] The number of all the top-level steps contained in the road map.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the currently stored stepsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    stepsCount: function(count){ // number
        return this._propertyHandler("steps count", count, Core.Convert.toNumber);
    },

    /**
     * An array of all the top-level steps in the road map.
     * @param {string[]} steps An array of all the top-level steps in the road map.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the currently stored steps value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    steps: function(steps) {
        return this._propertyHandler("all steps", steps,
            StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    }
};

/**
 * The description of an SAPUI5 RoadMap test object.
 * @param {Object} [props] Initializes a RoadMap test object using the supplied property bag.
 * @returns {RoadMap} the description object that was initialized.
 * @constructor
 * @memberof SAPUI5
 * @extends SAPUI5.SAPUI5BaseDesc
 * @mixes SAPUI5.ItemsCountDescriptionBehavior
 * @mixes SAPUI5.ItemsDescriptionBehavior
 * @mixes SAPUI5.RoadMapDescriptionBehavior
 */
function RoadMap(props) {
    var roadMapDes = new SAPUI5BaseDesc("RoadMap");

    Core.ObjectUtils.extend(roadMapDes, HelperBehaviors.ItemsCountDescriptionBehavior);
    Core.ObjectUtils.extend(roadMapDes, HelperBehaviors.ItemsDescriptionBehavior);
    Core.ObjectUtils.extend(roadMapDes, RoadMapDescriptionBehavior);

    roadMapDes._defineByPropertyBag(props);

    return roadMapDes;
}

/**
 * An SAPUI5 RoadMap.
 * @constructor
 * @memberof SAPUI5
 * @class RoadMapTO
 * @extends SAPUI5.SAPUI5BaseTestObject
 * @mixes SAPUI5.ItemsTOBehavior._properties
 * @mixes SAPUI5.SelectedItemTOBehavior._properties
 * @mixes SAPUI5.NavigationTOBehavior._methods
 * @mixes SAPUI5.SelectPathTOBehavior._methods
 * @mixes SAPUI5.ExpandCollapseItemTOBehavior._methods
 * @mixes SAPUI5.RoadMapTOBehavior._properties
 */
function RoadMapTO(session, description) {
    description = description || RoadMap();
    var roadMapTO = new SAPUI5BaseTestObject("SAPUIRoadMap", session, description);

    roadMapTO._mergeBehavior(HelperBehaviors.ItemsTOBehavior);
    roadMapTO._mergeBehavior(HelperBehaviors.SelectedItemTOBehavior);
    roadMapTO._mergeBehavior(HelperBehaviors.NavigationTOBehavior);
    roadMapTO._mergeBehavior(HelperBehaviors.SelectPathTOBehavior);
    roadMapTO._mergeBehavior(HelperBehaviors.ExpandCollapseItemTOBehavior);
    roadMapTO._mergeBehavior(RoadMapTOBehavior);

    return roadMapTO;
}

//Consts
var stepsWiredName = "all steps";

/**
 * @ignore
 * @memberof SAPUI5
 */
var RoadMapTOBehavior = {
    /**
     * @ignore
     * @memberof SAPUI5.RoadMapTOBehavior
     */
    _properties: {
        /**
         * Returns an array of all the top-level steps in the road map.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the array of all the top-level steps in the road map.
         */
        steps: {
            wiredName: stepsWiredName,
            getter: function () {
                return this._getROProperty(stepsWiredName, arguments).then(StringUtils.splitFunc(";"));
            }
        }
    }
};

module.exports.RoadMap = RoadMap;
module.exports.RoadMapTO = RoadMapTO;

