// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 01/20/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("MenubarDescriptionBehavior",function(){
    var MenubarDesc = require("../lib/menubar.js").Menubar;
    var menubarDescUnderTest;

    beforeEach(function(){
        menubarDescUnderTest = MenubarDesc();
    });

    describe("itemsCount method",function() {
        it("should add 'items count' to _properties with the correct value when value is given",function(){
            menubarDescUnderTest.itemsCount(5);
            assert.strictEqual(menubarDescUnderTest._properties["items count"], 5);
        });
        it("should add 'items count' to _properties and convert the value to number when value given is string",function(){
            menubarDescUnderTest.itemsCount("5");
            assert.strictEqual(menubarDescUnderTest._properties["items count"], 5);
        });
        it("should throw error when value given is NaN",function(){
            assert.throws(function(){
                menubarDescUnderTest.itemsCount("5a");
            });
        });
        it("should add 'items count' to _properties with the correct value when value is given using property bag",function(){
            menubarDescUnderTest = MenubarDesc({
                itemsCount: 5
            });
            assert.strictEqual(menubarDescUnderTest._properties["items count"], 5);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = menubarDescUnderTest.itemsCount(5);
            assert.strictEqual(result, menubarDescUnderTest);
        });
        it("should remove 'items count' from _properties when value is null",function(){
            menubarDescUnderTest._properties["items count"] = 5;
            menubarDescUnderTest.itemsCount(null);
            assert(!("items count" in menubarDescUnderTest._properties));
        });
        it("should return the value of 'items count' from _properties when value is not given",function(){
            menubarDescUnderTest._properties["items count"] = 5;
            var itemsCount = menubarDescUnderTest.itemsCount();
            assert.equal(itemsCount, 5);
        });
    });

    describe("items method",function() {
        it("should add 'all items' to _properties when value is given",function(){
            menubarDescUnderTest.items(["item1","item2"]);
            assert.strictEqual(menubarDescUnderTest._properties["all items"], "item1;item2");
        });

        it("should add 'all items' to _properties when value is given using property bag",function(){
            menubarDescUnderTest = MenubarDesc({
                items: ["item1","item2"]
            });
            assert.strictEqual(menubarDescUnderTest._properties["all items"], "item1;item2");
        });

        it("should return this - builder pattern, when value is given",function(){
            var result = menubarDescUnderTest.items(["item1","item2"]);
            assert.strictEqual(result, menubarDescUnderTest);
        });

        it("should remove 'all items' from _properties when value is null",function(){
            menubarDescUnderTest._properties["all items"] = "item1;item2";
            menubarDescUnderTest.items(null);
            assert(!("all items" in menubarDescUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties when value is not given",function(){
            menubarDescUnderTest._properties["all items"] = "item1;item2";
            var value = menubarDescUnderTest.items();
            assert.deepEqual(value, ["item1","item2"]);
        });

        it("should not change value of 'all items' in _properties when get is called", function() {
            menubarDescUnderTest._properties["all items"] = "item1;item2";
            menubarDescUnderTest.items();
            assert.strictEqual(menubarDescUnderTest._properties["all items"], "item1;item2");
        });
    });

});

describe("MenubarTOBehavior",function(){
    var MenubarTO = require("../lib/menubar.js").MenubarTO;
    var menubarTOBehaviorUnderTest;

    beforeEach(function(){
        menubarTOBehaviorUnderTest = MenubarTO({});
        sinon.stub(menubarTOBehaviorUnderTest, "_getROProperty");
        sinon.stub(menubarTOBehaviorUnderTest, "_executeCommand");
		
		menubarTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        menubarTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(menubarTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("items",function(){
        var promiseMock = {then: function(cb) {return cb("item1;item2");}};
        it("should query the property 'all items'",function(){
            menubarTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            menubarTOBehaviorUnderTest.items();
            assert(menubarTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(menubarTOBehaviorUnderTest._getROProperty.firstCall.args,["all items", arguments]);
        });
        it("should split the string returned by the promise with delimiter: ';'",function(){
            menubarTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = menubarTOBehaviorUnderTest.items();
            assert.deepEqual(res,["item1", "item2"]);
        });
    });

    describe("select", function(){
        beforeEach(function(){
            var promise = {
                then: function(cb) {
                    return cb(true);
                }
            };
            menubarTOBehaviorUnderTest._executeCommand.returns(promise);
        });

        it("should call Select with string arg as is, when called with string value", function() {
            menubarTOBehaviorUnderTest.select("item1");
            assert(menubarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(menubarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Select", "item1"]);
        });
        it("should add prefix of '#' to numeric arg", function() {
            menubarTOBehaviorUnderTest.select(8);
            assert(menubarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(menubarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Select", "#9"]);
        });
    });
});