// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/31/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var ToggleTO = require("../lib/toggle_button.js").ToggleTO;
var Web = require("leanft.sdk.web");

describe("ToggleButton Description unit tests", function() {
    var ToggleButtonDesc = require("../lib/toggle_button.js").Toggle;
    var toggleButtonDescUnderTest;

    beforeEach(function() {
        toggleButtonDescUnderTest = new ToggleButtonDesc();
    });

    it("should have all keys of Web.Button & Web.Checkbox", function() {
        var WebButtonDesc = Web.Button;
        var webButtonDesc = new WebButtonDesc();

        for(var webKey in webButtonDesc) {
            assert(webKey in toggleButtonDescUnderTest, "key: " + webKey + " is missing in Toggle");
        }

        var CheckBoxDesc = Web.CheckBox;
        var checkBoxDesc = new CheckBoxDesc();

        for(var webKey in checkBoxDesc) {
            if (webKey!="type"){ // all checkbox keys should be in toggle button description, except for type
                assert(webKey in toggleButtonDescUnderTest, "key: " + webKey + " is missing in Toggle");
            }
        }
    });
});


describe("ToggleTO",function() {
    var toggleTOUnderTest;
    beforeEach(function () {
        toggleTOUnderTest = new ToggleTO();
        sinon.stub(toggleTOUnderTest, "_executeCommand");
		
		// toggleTOUnderTest._session.fireEvent = sinon.stub();
        // toggleTOUnderTest._session._promiseManager = {rootBranchThen :sinon.stub() };
    });

    it("should have all keys of Web.Button & Web.Checkbox", function() {
        var WebButtonTO = Web.ButtonTO;
        var webButtonTO = new WebButtonTO({});

        for(var webKey in webButtonTO) {
            assert(webKey in toggleTOUnderTest, "key: " + webKey + " is missing in Toggle");
        }

        var CheckBoxTO = Web.CheckBoxTO;
        var checkBoxTO = new CheckBoxTO({});

        for(var webKey in checkBoxTO) {
            assert(webKey in toggleTOUnderTest, "key: " + webKey + " is missing in Toggle");
        }
    });

    describe("set", function () {
        it("should throw error if no arguments passed", function () {
            assert.throws(function () {
                toggleTOUnderTest.set();
            });
        });
        it("should throw error if non boolean string passed", function () {
            assert.throws(function () {
                toggleTOUnderTest.set("truw");
            });
        });
        it("should throw error if null passed", function () {
            assert.throws(function () {
                toggleTOUnderTest.set(null);
            });
        });
        it("should call the _executeCommand and pass it the correct arguments when true passed", function () {
            toggleTOUnderTest.set(true);
            assert(toggleTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(toggleTOUnderTest._executeCommand.firstCall.args.splice(0,2), ["Set", "On"]);
        });
        it("should call the _executeCommand and pass it the correct arguments when false passed", function () {
            toggleTOUnderTest.set("false");
            assert(toggleTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(toggleTOUnderTest._executeCommand.firstCall.args.splice(0,2), ["Set", "Off"]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            toggleTOUnderTest._executeCommand.returns(getROPromise);
            var res = toggleTOUnderTest.set(true);
            assert.strictEqual(res, getROPromise);
        });
    });

});