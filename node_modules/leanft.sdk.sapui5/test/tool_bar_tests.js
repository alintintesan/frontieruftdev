// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var assert = require("assert");
var sinon = require("sinon");

describe("ToolBar Description unit tests", function() {
    var ToolBarDesc = require("../lib/tool_bar.js").ToolBar;
    var toolBarDescUnderTest;

    beforeEach(function() {
        toolBarDescUnderTest = new ToolBarDesc();
    });

    describe("isStandalone method",function() {
        it("should add 'standalone' with the correct value",function(){
            toolBarDescUnderTest.isStandalone(true);
            assert.strictEqual(toolBarDescUnderTest._properties['standalone'], true);
        });
        it("should add 'standalone' with correct value when value is given using property bag",function(){
            toolBarDescUnderTest = ToolBarDesc({
                isStandalone: true
            });
            assert.strictEqual(toolBarDescUnderTest._properties['standalone'], true);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = toolBarDescUnderTest.isStandalone(true);
            assert.strictEqual(result, toolBarDescUnderTest);
        });
        it("should remove 'isStandalone' from _properties when value is null",function(){
            toolBarDescUnderTest._properties['standalone'] = true;
            toolBarDescUnderTest.isStandalone(null);
            assert(!('standalone' in toolBarDescUnderTest._properties));
        });
        it("should return the value of 'isStandalone' from _properties when value is not given",function(){
            toolBarDescUnderTest._properties['standalone'] = true;
            var isStandaloneLevel = toolBarDescUnderTest.isStandalone();
            assert.equal(isStandaloneLevel, true);
        });
    });

    describe("design method",function() {
        it("should add 'design' with the correct value",function(){
            toolBarDescUnderTest.design("Standard");
            assert.strictEqual(toolBarDescUnderTest._properties['design'], "Standard");
        });
        it("should add 'design' with correct value when value is given using property bag",function(){
            toolBarDescUnderTest = ToolBarDesc({
                design: "standard"
            });
            assert.strictEqual(toolBarDescUnderTest._properties['design'], "standard");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = toolBarDescUnderTest.design("Standard");
            assert.strictEqual(result, toolBarDescUnderTest);
        });
        it("should remove 'design' from _properties when value is null",function(){
            toolBarDescUnderTest._properties['design'] = "Standard";
            toolBarDescUnderTest.design(null);
            assert(!("design" in toolBarDescUnderTest._properties));
        });
        it("should return the value of 'design' from _properties when value is not given",function(){
            toolBarDescUnderTest._properties['design'] = "Standard";
            var design = toolBarDescUnderTest.design();
            assert.strictEqual(design, "Standard");
        });
    });

    describe("leftItemsCount method",function() {
        it("should add 'left items count' with the correct value",function(){
            toolBarDescUnderTest.leftItemsCount(3);
            assert.strictEqual(toolBarDescUnderTest._properties['left items count'], 3);
        });
        it("should add 'left items count' with correct value when value is given using property bag",function(){
            toolBarDescUnderTest = ToolBarDesc({
                leftItemsCount: 3
            });
            assert.strictEqual(toolBarDescUnderTest._properties['left items count'], 3);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = toolBarDescUnderTest.leftItemsCount(3);
            assert.strictEqual(result, toolBarDescUnderTest);
        });
        it("should remove 'left items count' from _properties when value is null",function(){
            toolBarDescUnderTest._properties['left items count'] = 3;
            toolBarDescUnderTest.leftItemsCount(null);
            assert(!("left items count" in toolBarDescUnderTest._properties));
        });
        it("should return the value of 'left items count' from _properties when value is not given",function(){
            toolBarDescUnderTest._properties['left items count'] = 3;
            var design = toolBarDescUnderTest.leftItemsCount();
            assert.strictEqual(design, 3);
        });
    });
});

describe("ToolBar Test Object Behavior",function(){
    var ToolBarTO = require("../lib/tool_bar.js").ToolBarTO;
    var toolBarTOBehaviorUnderTest;

    beforeEach(function(){
        toolBarTOBehaviorUnderTest = ToolBarTO({});
        sinon.stub(toolBarTOBehaviorUnderTest, "_executeCommand");
        sinon.stub(toolBarTOBehaviorUnderTest, "_getROProperty");
		
		toolBarTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        toolBarTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(toolBarTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("isStandalone",function(){
        it("should query the property 'standalone'",function(){
            toolBarTOBehaviorUnderTest._getROProperty.returns(true);
            toolBarTOBehaviorUnderTest.isStandalone();
            assert(toolBarTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(toolBarTOBehaviorUnderTest._getROProperty.firstCall.args,['standalone', arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            toolBarTOBehaviorUnderTest._getROProperty.returns(true);
            var res = toolBarTOBehaviorUnderTest.isStandalone();
            assert.strictEqual(res,true);
        });
    });

    describe("design",function(){
        it("should query the property 'design'",function(){
            toolBarTOBehaviorUnderTest.design();
            assert(toolBarTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(toolBarTOBehaviorUnderTest._getROProperty.firstCall.args,["design", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            toolBarTOBehaviorUnderTest._getROProperty.returns("Standard");
            var res = toolBarTOBehaviorUnderTest.design();
            assert.strictEqual(res,"Standard");
        });
    });

    describe("leftItemsCount",function(){

        it("should query the property 'left items count'",function(){
            toolBarTOBehaviorUnderTest._getROProperty.returns(3);
            toolBarTOBehaviorUnderTest.leftItemsCount();
            assert(toolBarTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(toolBarTOBehaviorUnderTest._getROProperty.firstCall.args,["left items count", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            toolBarTOBehaviorUnderTest._getROProperty.returns(3);
            var res = toolBarTOBehaviorUnderTest.leftItemsCount();
            assert.strictEqual(res,3);
        });
    });

    describe("openOverflow",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            toolBarTOBehaviorUnderTest.openOverflow();
            assert(toolBarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(toolBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["OpenOverflow"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            toolBarTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = toolBarTOBehaviorUnderTest.openOverflow();
            assert.strictEqual(res,getROPromise);
        });
    });
});