// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created by swisas on 12/30/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("TileDescriptionBehavior",function(){
    var TileDesc = require("../lib/tile.js").Tile;
    var tileDescUnderTest;

    beforeEach(function(){
        tileDescUnderTest = TileDesc();
    });

    describe("isEnabled method",function() {
        it("should add 'disabled' with correct value when value is true",function(){
            tileDescUnderTest.isEnabled(true);
            assert.strictEqual(tileDescUnderTest._properties["disabled"], false);
        });
        it("should add 'disabled' with correct value when value is false",function(){
            tileDescUnderTest.isEnabled(false);
            assert.strictEqual(tileDescUnderTest._properties["disabled"], true);
        });
        it("should add 'disabled' with correct value when value is 'true'",function(){
            tileDescUnderTest.isEnabled("true");
            assert.strictEqual(tileDescUnderTest._properties["disabled"], false);
        });
        it("should add 'disabled' with correct value when value is 'false'",function(){
            tileDescUnderTest.isEnabled("false");
            assert.strictEqual(tileDescUnderTest._properties["disabled"], true);
        });
        it("should add 'disabled' with correct value when value is given using property bag",function(){
            tileDescUnderTest = TileDesc({
                isEnabled: true
            });
            assert.strictEqual(tileDescUnderTest._properties["disabled"], false);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = tileDescUnderTest.isEnabled(true);
            assert.strictEqual(result, tileDescUnderTest);
        });
        it("should remove 'disabled' from _properties when value is null",function(){
            tileDescUnderTest._properties["disabled"] = true;
            tileDescUnderTest.isEnabled(null);
            assert(!("disabled" in tileDescUnderTest._properties));
        });
        it("should return the value of 'disabled' from _properties when value is not given",function(){
            tileDescUnderTest._properties["disabled"] = false;
            var isChecked = tileDescUnderTest.isEnabled();
            assert.equal(isChecked, true);
        });
        it("should return null when value is not given",function(){
            tileDescUnderTest._properties["disabled"] = null;
            var isEnabled = tileDescUnderTest.isEnabled();
            assert.equal(isEnabled, null);
        });
    });

});

describe("Tile Test Object Behavior",function(){
    var TileTO = require("../lib/tile.js").TileTO;
    var tileTOBehaviorUnderTest;

    beforeEach(function(){
        tileTOBehaviorUnderTest = TileTO({});
        sinon.stub(tileTOBehaviorUnderTest, "_getROProperty");
		
		tileTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        tileTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(tileTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("isEnabled",function(){
        it("should query the property 'disabled'",function(){
            var getROPromise = {
                then: function(cb) {
                    return cb(true);
                }
            };
            tileTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            tileTOBehaviorUnderTest.isEnabled();
            assert(tileTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(tileTOBehaviorUnderTest._getROProperty.firstCall.args, ["disabled", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {
                then: function(cb) {
                    return cb(true);
                }
            };
            tileTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = tileTOBehaviorUnderTest.isEnabled();
            assert.strictEqual(res, false);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {
                then: function(cb) {
                    return cb(false);
                }
            };
            tileTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = tileTOBehaviorUnderTest.isEnabled();
            assert.strictEqual(res, true);
        });
    });

});
