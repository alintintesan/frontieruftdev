// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 01/20/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("CarouselDescriptionBehavior",function(){
    var CarouselDesc = require("../lib/carousel.js").Carousel;
    var carouselDescUnderTest;

    beforeEach(function(){
        carouselDescUnderTest = CarouselDesc();
    });

    describe("itemsCount method",function() {
        it("should add 'items count' with correct value when value is given",function(){
            carouselDescUnderTest.itemsCount(2);
            assert.strictEqual(carouselDescUnderTest._properties["items count"], 2);
        });
        it("should add 'items count' with correct value when value is given using property bag",function(){
            carouselDescUnderTest = CarouselDesc({
                itemsCount: 2
            });
            assert.strictEqual(carouselDescUnderTest._properties["items count"], 2);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = carouselDescUnderTest.itemsCount(2);
            assert.strictEqual(result, carouselDescUnderTest);
        });
        it("should remove 'items count' from _properties when value is null",function(){
            carouselDescUnderTest._properties["items count"] = 2;
            carouselDescUnderTest.itemsCount(null);
            assert(!("items count" in carouselDescUnderTest._properties));
        });
        it("should return the value of 'items count' from _properties when value is not given",function(){
            carouselDescUnderTest._properties["items count"] = 2;
            var itemsCount = carouselDescUnderTest.itemsCount();
            assert.equal(itemsCount, 2);
        });
    });

});

describe("CarouselTOBehavior",function(){
    var CarouselTO = require("../lib/carousel.js").CarouselTO;
    var carouselTOBehaviorUnderTest;

    beforeEach(function(){
        carouselTOBehaviorUnderTest = CarouselTO({});
        sinon.stub(carouselTOBehaviorUnderTest, "_getROProperty");
        sinon.stub(carouselTOBehaviorUnderTest, "_executeCommand");
		
		carouselTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        carouselTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(carouselTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("itemsCount",function(){
        it("should query the property 'items count'",function(){
            carouselTOBehaviorUnderTest.itemsCount();
            assert(carouselTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(carouselTOBehaviorUnderTest._getROProperty.firstCall.args, ["items count", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {};
            carouselTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = carouselTOBehaviorUnderTest.itemsCount();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("next",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            carouselTOBehaviorUnderTest.next();
            assert(carouselTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(carouselTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["Next"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            carouselTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = carouselTOBehaviorUnderTest.next();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("previous",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            carouselTOBehaviorUnderTest.previous();
            assert(carouselTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(carouselTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["Previous"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            carouselTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = carouselTOBehaviorUnderTest.previous();
            assert.strictEqual(res,getROPromise);
        });
    });
});