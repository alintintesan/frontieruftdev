// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/30/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var Web = require("leanft.sdk.web");

describe("EditField Description unit tests", function() {
    var EditFieldDesc = require("../lib/edit_field.js").Edit;
    var editFieldDescUnderTest;

    beforeEach(function() {
        editFieldDescUnderTest = new EditFieldDesc();
    });

    it("should have all keys of Web.Edit", function() {
        var WebEditDesc = Web.Edit;
        var webEditDesc = new WebEditDesc();

        for(var webKey in webEditDesc) {
            assert(webKey in editFieldDescUnderTest, "key: " + webKey + " is missing in EditField");
        }
    });
});


describe("EditField Test Object Behavior",function(){
    var EditTO = require("../lib/edit_field.js").EditFieldTO;
    var editTOBehaviorUnderTest;

    beforeEach(function(){
        editTOBehaviorUnderTest = EditTO({});
        sinon.stub(editTOBehaviorUnderTest, "_getROProperty");
        sinon.stub(editTOBehaviorUnderTest, "_executeCommand");
		
		editTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        editTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(editTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    it("should have all keys of Web.Edit", function() {
        var WebEditTO = Web.EditTO;
        var webEditTO = new WebEditTO({});

        for(var webKey in webEditTO) {
            assert(webKey in editTOBehaviorUnderTest, "key: " + webKey + " is missing in EditField");
        }
    });

    describe("isReadOnly",function(){
        it("should query the property 'readonly'",function(){
            editTOBehaviorUnderTest.isReadOnly();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(editTOBehaviorUnderTest._getROProperty.firstCall.args,["readonly", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.isReadOnly();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("search",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            editTOBehaviorUnderTest.search("google");
            assert(editTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(editTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Search", "google"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = editTOBehaviorUnderTest.search("google");
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("clear",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            editTOBehaviorUnderTest.clear();
            assert(editTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(editTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["Clear"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = editTOBehaviorUnderTest.clear();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("openPossibleEntries",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            editTOBehaviorUnderTest.openPossibleEntries();
            assert(editTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(editTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["OpenPossibleEntries"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = editTOBehaviorUnderTest.openPossibleEntries();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("refresh",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            editTOBehaviorUnderTest.refresh();
            assert(editTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(editTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["Refresh"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = editTOBehaviorUnderTest.refresh();
            assert.strictEqual(res,getROPromise);
        });
    });

});