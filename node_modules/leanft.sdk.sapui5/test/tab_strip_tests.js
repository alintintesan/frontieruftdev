// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/31/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("TabStrip Description",function(){
    var TabStripDesc = require("../lib/tab_strip.js").TabStrip;
    var tabStripDescUnderTest;

    beforeEach(function(){
        tabStripDescUnderTest = TabStripDesc();
    });

    describe("tabs method",function() {
        it("should add 'all items' with correct value when a value is given",function(){
            tabStripDescUnderTest.tabs(["male","female"]);
            assert.strictEqual(tabStripDescUnderTest._properties["all items"], "male;female");
        });
        it("should add 'all items' with correct value, when value is given using property bag",function(){
            tabStripDescUnderTest = TabStripDesc({
                tabs: ["male","female"]
            });
            assert.strictEqual(tabStripDescUnderTest._properties["all items"], "male;female");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = tabStripDescUnderTest.tabs(["male","female"]);
            assert.strictEqual(result, tabStripDescUnderTest);
        });
        it("should remove 'all items' from _properties when value is null",function(){
            tabStripDescUnderTest._properties["all items"] = "male;female";
            tabStripDescUnderTest.tabs(null);
            assert(!("all items" in tabStripDescUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties, when value is not given",function(){
            tabStripDescUnderTest._properties["all items"] = "male;female";
            var items = tabStripDescUnderTest.tabs();
            assert.deepEqual(items, ["male","female"]);
        });
        it("should not modify property 'all items', upon get",function(){
            tabStripDescUnderTest._properties["all items"] = "male;female";
            tabStripDescUnderTest.tabs();
            assert.strictEqual(tabStripDescUnderTest._properties["all items"], "male;female");
        });
        it("should return same value in get, when value is set",function(){
            tabStripDescUnderTest.tabs(["male","female"]);
            var tabs = tabStripDescUnderTest.tabs();
            assert.deepEqual(tabs, ["male","female"]);
        });
    });

    describe("tabsCount method",function() {
        it("should add 'items count' with correct value when value is given",function(){
            tabStripDescUnderTest.tabsCount(2);
            assert.strictEqual(tabStripDescUnderTest._properties["items count"], 2);
        });
        it("should add 'items count' with correct value when value is given using property bag",function(){
            tabStripDescUnderTest = TabStripDesc({
                tabsCount: 2
            });
            assert.strictEqual(tabStripDescUnderTest._properties["items count"], 2);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = tabStripDescUnderTest.tabsCount(2);
            assert.strictEqual(result, tabStripDescUnderTest);
        });
        it("should remove 'items count' from _properties when value is null",function(){
            tabStripDescUnderTest._properties["items count"] = 2;
            tabStripDescUnderTest.tabsCount(null);
            assert(!("items count" in tabStripDescUnderTest._properties));
        });
        it("should return the value of 'items count' from _properties when value is not given",function(){
            tabStripDescUnderTest._properties["items count"] = 2;
            var tabsCount = tabStripDescUnderTest.tabsCount();
            assert.equal(tabsCount, 2);
        });
    });

});

describe("TabStrip Test Object",function(){
    var TabStripTO = require("../lib/tab_strip.js").TabStripTO;
    var tabStripTOUnderTest;

    beforeEach(function(){
        tabStripTOUnderTest = TabStripTO({});
        sinon.stub(tabStripTOUnderTest, "_getROProperty");
        sinon.stub(tabStripTOUnderTest, "_executeCommand");
		
		tabStripTOUnderTest._session.fireEvent = sinon.stub();
        tabStripTOUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(tabStripTOUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("tabs",function(){
        it("should convert the returned string to array",function(){
            var promise = {
                then: function(cb){return cb("male;female");}
            };

            tabStripTOUnderTest._getROProperty.returns(promise);
            var res = tabStripTOUnderTest.tabs();
            assert.deepEqual(res,["male","female"]);
        });
        it("should query the property 'all items'",function(){
            var promise  = {then: sinon.spy()};
            tabStripTOUnderTest._getROProperty.returns(promise);
            tabStripTOUnderTest.tabs();
            assert(tabStripTOUnderTest._getROProperty.calledOnce);
            assert.equal(tabStripTOUnderTest._getROProperty.firstCall.args[0],"all items");
        });
    });

    describe("selectedTab",function(){
        it("should query the property selected item",function(){
            tabStripTOUnderTest.selectedTab();
            assert(tabStripTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(tabStripTOUnderTest._getROProperty.firstCall.args, ["selected item", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {};
            tabStripTOUnderTest._getROProperty.returns(getROPromise);
            var res = tabStripTOUnderTest.selectedTab();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("select", function () {
        it("should call the _executeCommand method and pass it the correct arguments", function () {
            var promise = {
                then: function(cb) {
                    return cb({});
                }
            };
            tabStripTOUnderTest._executeCommand.returns(promise);
            tabStripTOUnderTest.select("someItem");
            assert(tabStripTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tabStripTOUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Select", "someItem"]);
        });
        it("should call the _executeCommand method and pass it numeric string with # when number is passed", function () {
            var promise = {
                then: function(cb) {
                    return cb({});
                }
            };
            tabStripTOUnderTest._executeCommand.returns(promise);
            tabStripTOUnderTest.select(2);
            assert(tabStripTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tabStripTOUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Select", "#3"]);
        });
        it("should throw an error if false is returned from _executeCommand", function () {
            var promise = {
                then: function(cb) {
                    return cb(false);
                }
            };
            tabStripTOUnderTest._executeCommand.returns(promise);
            assert.throws(function() {
                tabStripTOUnderTest.select("someItem");
            });
        });
    });

    describe("remove", function () {
        it("should call the _executeCommand method and pass it the correct arguments", function () {
            var promise = {
                then: function(cb) {
                    return cb({});
                }
            };
            tabStripTOUnderTest._executeCommand.returns(promise);
            tabStripTOUnderTest.remove("someItem");
            assert(tabStripTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tabStripTOUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Remove", "someItem"]);
        });
        it("should call the _executeCommand method and pass it numeric string with # when number is passed", function () {
            var promise = {
                then: function(cb) {
                    return cb({});
                }
            };
            tabStripTOUnderTest._executeCommand.returns(promise);
            tabStripTOUnderTest.remove(2);
            assert(tabStripTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tabStripTOUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Remove", "#3"]);
        });
        it("should throw an error if false is returned from _executeCommand", function () {
            var promise = {
                then: function(cb) {
                    return cb(false);
                }
            };
            tabStripTOUnderTest._executeCommand.returns(promise);
            assert.throws(function() {
                tabStripTOUnderTest.remove("someItem");
            });
        });
    });

    describe("deselect", function () {
        it("should call the _executeCommand method and pass it the correct arguments", function () {
            var promise = {
                then: function(cb) {
                    return cb({});
                }
            };
            tabStripTOUnderTest._executeCommand.returns(promise);
            tabStripTOUnderTest.deselect("someItem");
            assert(tabStripTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tabStripTOUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Deselect", "someItem"]);
        });
        it("should call the _executeCommand method and pass it numeric string with # when number is passed", function () {
            var promise = {
                then: function(cb) {
                    return cb({});
                }
            };
            tabStripTOUnderTest._executeCommand.returns(promise);
            tabStripTOUnderTest.deselect(2);
            assert(tabStripTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tabStripTOUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Deselect", "#3"]);
        });
        it("should throw an error if false is returned from _executeCommand", function () {
            var promise = {
                then: function(cb) {
                    return cb(false);
                }
            };
            tabStripTOUnderTest._executeCommand.returns(promise);
            assert.throws(function() {
                tabStripTOUnderTest.deselect("someItem");
            });
        });
    });
});
