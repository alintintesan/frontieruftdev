// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var assert = require("assert");
var sinon = require("sinon");
var Web = require("leanft.sdk.web");

describe("Table Description unit tests", function() {
    var TableDesc = require("../lib/table.js").Table;
    var tableDescUnderTest;

    beforeEach(function() {
        tableDescUnderTest = new TableDesc();
    });
    
    it("should have all keys of Web.Table", function() {
        var WebTableDesc = Web.Table;
        var webTableDesc = new WebTableDesc();

        for(var webKey in webTableDesc) {
            assert(webKey in tableDescUnderTest, "key: " + webKey + " is missing in Table");
        }
    });

    describe("border method",function() {
        it("should add 'border' to _properties with the correct value when value is given",function(){
            tableDescUnderTest.border(5);
            assert.strictEqual(tableDescUnderTest._properties["border"], "5");
        });
        it("should add 'border' to _properties with the correct value when value is given using property bag",function(){
            tableDescUnderTest = TableDesc({
                border: 5
            });
            assert.strictEqual(tableDescUnderTest._properties["border"], "5");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = tableDescUnderTest.border(5);
            assert.strictEqual(result, tableDescUnderTest);
        });
        it("should remove 'border' from _properties when value is null",function(){
            tableDescUnderTest._properties["border"] = "5";
            tableDescUnderTest.border(null);
            assert(!("border" in tableDescUnderTest._properties));
        });
        it("should return the value of 'border' from _properties when value is not given",function(){
            tableDescUnderTest._properties["border"] = "5";
            var border = tableDescUnderTest.border();
            assert.strictEqual(border, 5);
        });
    });

    describe("columnHeaders method",function() {
        it("should add 'columns' with the correct value",function(){
            tableDescUnderTest.columnHeaders(['a','b','c']);
            assert.strictEqual(tableDescUnderTest._properties['columns'], 'a;b;c');
        });
        it("should add 'columns' with correct value when value is given using property bag",function(){
            tableDescUnderTest = TableDesc({
                columnHeaders: ['a','b','c']
            });
            assert.strictEqual(tableDescUnderTest._properties['columns'], 'a;b;c');
        });
        it("should return this - builder pattern when value is given",function(){
            var result = tableDescUnderTest.columnHeaders(['a','b','c']);
            assert.strictEqual(result, tableDescUnderTest);
        });
        it("should remove 'columns' from _properties when value is null",function(){
            tableDescUnderTest._properties['columns'] = 'a;b;c';
            tableDescUnderTest.columnHeaders(null);
            assert(!('columns' in tableDescUnderTest._properties));
        });
        it("should return the value of 'columns' from _properties when value is not given",function(){
            tableDescUnderTest._properties['columns'] = 'a;b;c';
            var ret = tableDescUnderTest.columnHeaders();
            assert.deepEqual(ret, ['a','b','c']);
        });
    });

    describe("rowsCount method",function() {
        it("should add 'row count' with the correct value",function(){
            tableDescUnderTest.rowsCount(5);
            assert.strictEqual(tableDescUnderTest._properties['row count'], 5);
        });
        it("should add 'row count' with correct value when value is given using property bag",function(){
            tableDescUnderTest = TableDesc({
                rowsCount: 5
            });
            assert.strictEqual(tableDescUnderTest._properties['row count'], 5);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = tableDescUnderTest.rowsCount(5);
            assert.strictEqual(result, tableDescUnderTest);
        });
        it("should remove 'row count' from _properties when value is null",function(){
            tableDescUnderTest._properties['row count'] = 5;
            tableDescUnderTest.rowsCount(null);
            assert(!("row count" in tableDescUnderTest._properties));
        });
        it("should return the value of 'row count' from _properties when value is not given",function(){
            tableDescUnderTest._properties['row count'] = 5;
            var ret = tableDescUnderTest.rowsCount();
            assert.strictEqual(ret, 5);
        });
    });

    describe("columnsCount method",function() {
        it("should add 'column count' with the correct value",function(){
            tableDescUnderTest.columnsCount(5);
            assert.strictEqual(tableDescUnderTest._properties['column count'], 5);
        });
        it("should add 'column count' with correct value when value is given using property bag",function(){
            tableDescUnderTest = TableDesc({
                columnsCount: 5
            });
            assert.strictEqual(tableDescUnderTest._properties['column count'], 5);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = tableDescUnderTest.columnsCount(6);
            assert.strictEqual(result, tableDescUnderTest);
        });
        it("should remove 'column count' from _properties when value is null",function(){
            tableDescUnderTest._properties['column count'] = 5;
            tableDescUnderTest.columnsCount(null);
            assert(!("column count" in tableDescUnderTest._properties));
        });
        it("should return the value of 'column count' from _properties when value is not given",function(){
            tableDescUnderTest._properties['column count'] = 5;
            var ret = tableDescUnderTest.columnsCount();
            assert.strictEqual(ret, 5);
        });
    });
});

describe("Table Test Object Behavior",function(){
    var TableTO = require("../lib/table.js").TableTO;
    var tableTOBehaviorUnderTest;

    beforeEach(function(){
        tableTOBehaviorUnderTest = TableTO({});
        sinon.stub(tableTOBehaviorUnderTest, "_executeCommand");
        sinon.stub(tableTOBehaviorUnderTest, "_getROProperty");

        tableTOBehaviorUnderTest._getROProperties = sinon.stub();
        tableTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(tableTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    it("should have all keys of Web.Table", function() {
        var WebTableTO = Web.TableTO;
        var webTableTO = new WebTableTO({});

        for(var webKey in webTableTO) {
            assert(webKey in tableTOBehaviorUnderTest, "key: " + webKey + " is missing in Table");
        }
    });

    describe("border",function(){
        it("should query the property 'border'",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb("5");
                }
            };
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            tableTOBehaviorUnderTest.border();
            assert(tableTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._getROProperty.firstCall.args,["border", arguments]);
        });
        it("should return 0 if 'border' string value is an empty string",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb("");
                }
            };
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            assert.strictEqual(tableTOBehaviorUnderTest.border(), 0);
        });
        it("should return 0 if 'border' string value is null",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(null);
                }
            };
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            assert.strictEqual(tableTOBehaviorUnderTest.border(), 0);
        });
        it("should return 'border' value as array if it's not an empty string",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb("5");
                }
            };
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            assert.deepEqual(tableTOBehaviorUnderTest.border(), 5);
        });
    });

    describe("cells",function(){
        describe("single cell", function () {
            var cellUnderTest;
            beforeEach(function () {
                cellUnderTest = tableTOBehaviorUnderTest.cells(2,3);
            });

            it("should return a proxy to a given table cell in case row and column index were provided and save them as one based",function(){
                assert.strictEqual(cellUnderTest._rowIndex,3);
                assert.strictEqual(cellUnderTest._cellIndex,4);
                assert.strictEqual(cellUnderTest._ownerTable,tableTOBehaviorUnderTest);
            });

            describe("rowIndex", function () {
                it("should return the zero based rowIndex", function () {
                    assert.strictEqual(cellUnderTest.rowIndex(), 2);
                });
            });

            describe("columnIndex", function () {
                it("should return the columnIndex", function () {
                    assert.strictEqual(cellUnderTest.columnIndex(), 3);
                });
            });
        });

        describe("all cells", function () {
            beforeEach(function () {
                var promiseMock = {then: function(cb) {return cb([3,5,1]);}};
                sinon.stub(tableTOBehaviorUnderTest,"_getROPropertiesWithoutEvents");
                tableTOBehaviorUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            });

            it("should return a promise of all cells in the table",function(){
                var res = tableTOBehaviorUnderTest.cells();
                assert(tableTOBehaviorUnderTest._getROPropertiesWithoutEvents.calledOnce);
                assert.deepEqual(tableTOBehaviorUnderTest._getROPropertiesWithoutEvents.firstCall.args,["row count","column count","first row index"]);

                assert.strictEqual(res.length,3);
                assert.strictEqual(res[0].length,5);

                assert.strictEqual(res[0][0]._rowIndex,1);
            });

            it("should have correct zero based rowIndex value", function () {
                var res = tableTOBehaviorUnderTest.cells();
                res[0].forEach(function (cell) {
                    assert.strictEqual(cell.rowIndex(), 0);
                });

                res[1].forEach(function (cell) {
                    assert.strictEqual(cell.rowIndex(), 1);
                });
            });

            it("should have correct zero based columnIndex value", function () {
                var res = tableTOBehaviorUnderTest.cells();
                res[0].forEach(function (cell, columnIndex) {
                    assert.strictEqual(cell.columnIndex(), columnIndex);
                });

                res[1].forEach(function (cell, columnIndex) {
                    assert.strictEqual(cell.columnIndex(), columnIndex);
                });
            });
        });
    });

    describe("columnHeaders",function(){
        var promiseMock = {then: function(cb) {return cb("a;b;c");}};
        it("should query the property 'columns'",function(){
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            tableTOBehaviorUnderTest.columnHeaders();
            assert(tableTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._getROProperty.firstCall.args,['columns', arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = tableTOBehaviorUnderTest.columnHeaders();
            assert.deepEqual(res,[ 'a', 'b', 'c' ]);
        });
    });

    describe("rowsCount",function(){
        it("should query the property 'row count'",function(){
            tableTOBehaviorUnderTest._getROProperty.returns(3);
            tableTOBehaviorUnderTest.rowsCount();
            assert(tableTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._getROProperty.firstCall.args,["row count", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            tableTOBehaviorUnderTest._getROProperty.returns(3);
            var res = tableTOBehaviorUnderTest.rowsCount();
            assert.strictEqual(res,3);
        });
    });

    describe("selectedRows",function(){
        var promiseMock = {then: function(cb) {return cb("2;3;4");}},
            promiseMock1 = {then: function(cb) {return cb("");}};
        it("should query the property 'selected rows indices'",function(){
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            tableTOBehaviorUnderTest.selectedRows();
            assert(tableTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._getROProperty.firstCall.args,["selected rows indices", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = tableTOBehaviorUnderTest.selectedRows();
            assert.strictEqual(res[0],1);
            assert.deepEqual(res,[1,2,3]);
        });
        it("should return the same promise that was returned from _getROProperty, expects empty array",function(){
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock1);
            var res = tableTOBehaviorUnderTest.selectedRows();
            assert.strictEqual(res.length,0);
            assert.deepEqual(res,[]);
        });
    });
    describe("selectCell",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            tableTOBehaviorUnderTest.selectCell(2,5);
            assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,3), ["SelectCell",3,"#6"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            tableTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOBehaviorUnderTest.selectCell(2,5);
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("selectRow",function(){
        it("should call the _executeCommand method once and pass it the correct arguments",function(){
            tableTOBehaviorUnderTest.selectRow(1);
            assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,2), ["SelectRow",2]);
        });
        it("should call SelectRow with first arg passed and ExtendSelectRow for all other", function() {
            var promiseMock = {then: function(cb) {return cb();}};
            tableTOBehaviorUnderTest._executeCommand.returns(promiseMock);
            tableTOBehaviorUnderTest.selectRow(2, 8);
            assert(tableTOBehaviorUnderTest._executeCommand.calledTwice);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,2), ["SelectRow", 3]);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.secondCall.args.splice(0,2), ["ExtendSelectRow", 9]);
        });
    });

    describe("deselectRow",function(){
        it("should call the _executeCommand method once and pass it the correct arguments",function(){
            tableTOBehaviorUnderTest.deselectRow(1);
            assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,2), ["ExtendDeselectRow",2]);
        });
        it("should call ExtendDeselectRow with first arg passed and ExtendDeselectRow for all other", function() {
            var promiseMock = {then: function(cb) {return cb();}};
            tableTOBehaviorUnderTest._executeCommand.returns(promiseMock);
            tableTOBehaviorUnderTest.deselectRow(2, 8);
            assert(tableTOBehaviorUnderTest._executeCommand.calledTwice);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,2), ["ExtendDeselectRow", 3]);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.secondCall.args.splice(0,2), ["ExtendDeselectRow", 9]);
        });
    });

    describe("selectAllRows",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            tableTOBehaviorUnderTest.selectAllRows();
            assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["SelectAll"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            tableTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOBehaviorUnderTest.selectAllRows();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("deselectAllRows",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            tableTOBehaviorUnderTest.deselectAllRows();
            assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["DeselectAll"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            tableTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOBehaviorUnderTest.deselectAllRows();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("deleteRow",function(){
        it("should call the _executeCommand method once and pass it the correct arguments",function(){
            tableTOBehaviorUnderTest.deleteRow(1);
            assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,2), ["DeleteRow",2]);
        });
        it("should call ExtendDeselectRow with first arg passed and ExtendDeselectRow for all other", function() {
            var promiseMock = {then: function(cb) {return cb();}};
            tableTOBehaviorUnderTest._executeCommand.returns(promiseMock);
            tableTOBehaviorUnderTest.deleteRow(2, 8);
            assert(tableTOBehaviorUnderTest._executeCommand.calledTwice);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,2), ["DeleteRow", 3]);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.secondCall.args.splice(0,2), ["DeleteRow", 9]);
        });
    });

    describe("more",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            tableTOBehaviorUnderTest.more();
            assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["More"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            tableTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOBehaviorUnderTest.more();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("currentPage",function(){
        it("should query the property 'CurrentPage'",function(){
            tableTOBehaviorUnderTest._executeCommand.returns(3);
            tableTOBehaviorUnderTest.currentPage();
            assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1),["CurrentPage"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            tableTOBehaviorUnderTest._executeCommand.returns(3);
            var res = tableTOBehaviorUnderTest.currentPage();
            assert.strictEqual(res,3);
        });
    });

    describe("moveColumn",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            tableTOBehaviorUnderTest.moveColumn('Name',5);
            assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 3), ["MoveColumn","Name",'#6']);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            tableTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOBehaviorUnderTest.moveColumn('Name',5);
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("resizeColumn",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            tableTOBehaviorUnderTest.resizeColumn(2,50);
            assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 3), ["ResizeColumn","#3",50]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            tableTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOBehaviorUnderTest.resizeColumn(2,50);
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("navigateToPage",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            tableTOBehaviorUnderTest.navigateToPage(5);
            assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["SetPage",5]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            tableTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOBehaviorUnderTest.navigateToPage(5);
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("openMenu",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            tableTOBehaviorUnderTest.openMenu(5);
            assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["OpenMenu",'#6']);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            tableTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOBehaviorUnderTest.openMenu('Name');
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("clickColumnHeader",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            tableTOBehaviorUnderTest.clickColumnHeader(5);
            assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["HeaderClick",'#6']);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            tableTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOBehaviorUnderTest.clickColumnHeader('Name');
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("navigateToRow",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            tableTOBehaviorUnderTest.navigateToRow(5);
            assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Navigate",6]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            tableTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOBehaviorUnderTest.navigateToRow(5);
            assert.strictEqual(res,getROPromise);
        });
    });

});