// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var assert = require("assert");
var sinon = require("sinon");

describe("DatePicker Description unit tests", function() {
    var DatePickerDesc = require("../lib/date_picker.js").DatePicker;
    var datePickerDescUnderTest;

    beforeEach(function() {
        datePickerDescUnderTest = new DatePickerDesc();
    });

    describe("displayMode method",function() {
        it("should add 'display mode' with the correct value",function(){
            datePickerDescUnderTest.displayMode('twoMonths');
            assert.strictEqual(datePickerDescUnderTest._properties["display mode"], '2 months');
        });
        it("should add 'display mode' with correct value when value is given using property bag",function(){
            datePickerDescUnderTest = DatePickerDesc({
                displayMode: 'twoMonths'
            });
            assert.strictEqual(datePickerDescUnderTest._properties["display mode"], '2 months');
        });
        it("should return this - builder pattern when value is given",function(){
            var result = datePickerDescUnderTest.displayMode('twoMonths');
            assert.strictEqual(result, datePickerDescUnderTest);
        });
        it("should remove 'displayMode' from _properties when value is null",function(){
            datePickerDescUnderTest._properties["display mode"] = '2 months';
            datePickerDescUnderTest.displayMode(null);
            assert(!("display mode" in datePickerDescUnderTest._properties));
        });
        it("should return the value of 'displayMode' from _properties when value is not given",function(){
            datePickerDescUnderTest._properties["display mode"] = '2 months';
            var displayModeLevel = datePickerDescUnderTest.displayMode();
            assert.equal(displayModeLevel, 'twoMonths');
        });
    });
});

describe("DatePicker Test Object Behavior",function(){
    var DatePickerTO = require("../lib/date_picker.js").DatePickerTO;
    var datePickerTOBehaviorUnderTest;

    beforeEach(function(){
        datePickerTOBehaviorUnderTest = DatePickerTO({});
        sinon.stub(datePickerTOBehaviorUnderTest, "_executeCommand");
        sinon.stub(datePickerTOBehaviorUnderTest, "_getROProperty");
		
		datePickerTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        datePickerTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(datePickerTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("displayMode",function(){
        var promiseMock = {then: function(cb) {return cb("2 months");}};
        it("should query the property 'display mode'",function(){
            datePickerTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            datePickerTOBehaviorUnderTest.displayMode();
            assert(datePickerTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(datePickerTOBehaviorUnderTest._getROProperty.firstCall.args,["display mode", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            datePickerTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = datePickerTOBehaviorUnderTest.displayMode();
            assert.strictEqual(res,"twoMonths");
        });
    });

    describe("selectedDates",function(){
        var selectedDatesStr = "Thu Jan 15 2015;Mon Jan 12 2015;Tue Feb 17 2015";
        var promiseMock = {then: function(cb) {return cb(selectedDatesStr);}};
        it("should query the property 'selected dates'",function(){
            datePickerTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            datePickerTOBehaviorUnderTest.selectedDates();
            assert(datePickerTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(datePickerTOBehaviorUnderTest._getROProperty.firstCall.args,["selected dates", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            datePickerTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = datePickerTOBehaviorUnderTest.selectedDates();
            assert.deepEqual(Array.prototype.map.call(res, function(item){return item.toDateString();}), selectedDatesStr.split(';'));
        });
        it("should return empty array if selectedDates is empty",function(){
            datePickerTOBehaviorUnderTest._getROProperty.returns({then: function(cb) {return cb('');}});
            var res = datePickerTOBehaviorUnderTest.selectedDates();
            assert.deepEqual(res, []);
        });
    });

    describe("months",function(){
        var promiseMock = {then: function(cb) {return cb("Jan;Feb;Mar;Apr");}};
        it("should query the property 'months list'",function(){
            datePickerTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            datePickerTOBehaviorUnderTest.months();
            assert(datePickerTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(datePickerTOBehaviorUnderTest._getROProperty.firstCall.args,["months list", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            datePickerTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = datePickerTOBehaviorUnderTest.months();
            assert.deepEqual(res,[ 'Jan','Feb','Mar','Apr' ]);
        });
    });

    describe("select",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            datePickerTOBehaviorUnderTest.select(new Date("2016-02-01"));
            assert(datePickerTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(datePickerTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["SelectDate","20160201"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            datePickerTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = datePickerTOBehaviorUnderTest.select(new Date("2016-02-01"));
            assert.strictEqual(res,getROPromise);
        });
        it("should throw exception if parameter is not Date object",function(){
            assert.throws(function() {
                datePickerTOBehaviorUnderTest.select("2016-02-01");
            });
        });
    });

    describe("deselect",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            datePickerTOBehaviorUnderTest.deselect(new Date("2016-02-01"));
            assert(datePickerTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(datePickerTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["DeselectDate","20160201"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            datePickerTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = datePickerTOBehaviorUnderTest.deselect(new Date("2016-02-01"));
            assert.strictEqual(res,getROPromise);
        });
        it("should throw exception if parameter is not Date object",function(){
            assert.throws(function() {
                datePickerTOBehaviorUnderTest.deselect("2016-02-01");
            });
        });
    });

});