// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created by 12/28/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("AccordionDescriptionBehavior",function(){
    var AccordionDesc = require("../lib/accordion.js").Accordion;
    var accordionDescUnderTest;

    beforeEach(function(){
        accordionDescUnderTest = AccordionDesc();
    });

    describe("items method",function() {
        it("should add 'all items' with correct value when a value is given",function(){
            accordionDescUnderTest.items(["male","female"]);
            assert.strictEqual(accordionDescUnderTest._properties["all items"], "male;female");
        });
        it("should add 'all items' with correct value, when value is given using property bag",function(){
            accordionDescUnderTest = AccordionDesc({
                items: ["male","female"]
            });
            assert.strictEqual(accordionDescUnderTest._properties["all items"], "male;female");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = accordionDescUnderTest.items(["male","female"]);
            assert.strictEqual(result, accordionDescUnderTest);
        });
        it("should remove 'all items' from _properties when value is null",function(){
            accordionDescUnderTest._properties["all items"] = "male;female";
            accordionDescUnderTest.items(null);
            assert(!("all items" in accordionDescUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties, when value is not given",function(){
            accordionDescUnderTest._properties["all items"] = "male;female";
            var items = accordionDescUnderTest.items();
            assert.deepEqual(items, ["male","female"]);
        });
        it("should not modify property 'all items', upon get",function(){
            accordionDescUnderTest._properties["all items"] = "male;female";
            accordionDescUnderTest.items();
            assert.strictEqual(accordionDescUnderTest._properties["all items"], "male;female");
        });
        it("should return same value in get, when value is set",function(){
            accordionDescUnderTest.items(["male","female"]);
            var items = accordionDescUnderTest.items();
            assert.deepEqual(items, ["male","female"]);
        });
    });

    describe("itemsCount method",function() {
        it("should add 'items count' with correct value when value is given",function(){
            accordionDescUnderTest.itemsCount(2);
            assert.strictEqual(accordionDescUnderTest._properties["items count"], 2);
        });
        it("should add 'items count' with correct value when value is given using property bag",function(){
            accordionDescUnderTest = AccordionDesc({
                itemsCount: 2
            });
            assert.strictEqual(accordionDescUnderTest._properties["items count"], 2);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = accordionDescUnderTest.itemsCount(2);
            assert.strictEqual(result, accordionDescUnderTest);
        });
        it("should remove 'items count' from _properties when value is null",function(){
            accordionDescUnderTest._properties["items count"] = 2;
            accordionDescUnderTest.itemsCount(null);
            assert(!("items count" in accordionDescUnderTest._properties));
        });
        it("should return the value of 'items count' from _properties when value is not given",function(){
            accordionDescUnderTest._properties["items count"] = 2;
            var itemsCount = accordionDescUnderTest.itemsCount();
            assert.equal(itemsCount, 2);
        });
    });

});

describe("AccordionTOBehavior",function(){
    var AccordionTO = require("../lib/accordion.js").AccordionTO;
    var accordionTOBehaviorUnderTest;

    beforeEach(function(){
        accordionTOBehaviorUnderTest = AccordionTO({});
        sinon.stub(accordionTOBehaviorUnderTest, "_getROProperty");
        sinon.stub(accordionTOBehaviorUnderTest, "_executeCommand");

		accordionTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        accordionTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(accordionTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("items",function(){
        it("should convert the returned string to array",function(){
            var promise = {
                then: function(cb){return cb("male;female");}
            };
            accordionTOBehaviorUnderTest._getROProperty.returns(promise);
            var res = accordionTOBehaviorUnderTest.items();
            assert.deepEqual(res,["male","female"]);
        });
        it("should query the property 'all items'",function(){
            var promise  = {then: sinon.spy()};
            accordionTOBehaviorUnderTest._getROProperty.returns(promise);
            accordionTOBehaviorUnderTest.items();
            assert(accordionTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(accordionTOBehaviorUnderTest._getROProperty.firstCall.args, ["all items", arguments]);
        });
    });

    describe("selectedItem",function(){
        it("should query the property 'selected item'",function(){
            accordionTOBehaviorUnderTest.selectedItem();
            assert(accordionTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(accordionTOBehaviorUnderTest._getROProperty.firstCall.args, ["selected item", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {};
            accordionTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = accordionTOBehaviorUnderTest.selectedItem();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("expand",function(){
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                accordionTOBehaviorUnderTest.expand();
            });
        });
        it("should call the _executeCommand method and pass it string arg as is",function(){
            accordionTOBehaviorUnderTest.expand("some name");
            assert(accordionTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(accordionTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Expand", "some name"]);
        });
        it("should call the _executeCommand method and pass it numeric arg as string in #N format",function(){
            accordionTOBehaviorUnderTest.expand(3);
            assert(accordionTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(accordionTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Expand", "#4"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            accordionTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = accordionTOBehaviorUnderTest.expand("some name");
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("collapse",function(){
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                accordionTOBehaviorUnderTest.collapse();
            });
        });
        it("should call the _executeCommand method and pass it string arg as is",function(){
            accordionTOBehaviorUnderTest.collapse("some name");
            assert(accordionTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(accordionTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Collapse", "some name"]);
        });
        it("should call the _executeCommand method and pass it numeric arg as string in #N format",function(){
            accordionTOBehaviorUnderTest.collapse(3);
            assert(accordionTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(accordionTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Collapse", "#4"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            accordionTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = accordionTOBehaviorUnderTest.collapse("some name");
            assert.strictEqual(res,getROPromise);
        });
    });

});