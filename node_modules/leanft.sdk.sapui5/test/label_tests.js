// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/29/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("LabelDescriptionBehavior",function(){
    var LabelDesc = require("../lib/label.js").Label;
    var labelDescUnderTest;

    beforeEach(function(){
        labelDescUnderTest = LabelDesc();
    });

    describe("text method",function() {
        it("should add 'text' with correct value when value is true",function(){
            labelDescUnderTest.text("some text");
            assert.strictEqual(labelDescUnderTest._properties["text"], "some text");
        });
        it("should add 'text' with correct value when value is given using property bag",function(){
            labelDescUnderTest = LabelDesc({
                text: "some text"
            });
            assert.strictEqual(labelDescUnderTest._properties["text"], "some text");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = labelDescUnderTest.text("some text");
            assert.strictEqual(result, labelDescUnderTest);
        });
        it("should remove 'text' from _properties when value is null",function(){
            labelDescUnderTest._properties["text"] = "some text";
            labelDescUnderTest.text(null);
            assert(!("text" in labelDescUnderTest._properties));
        });
        it("should return the value of 'text' from _properties when value is not given",function(){
            labelDescUnderTest._properties["text"] = "some text";
            var isChecked = labelDescUnderTest.text();
            assert.equal(isChecked, "some text");
        });
    });

});

describe("Label Test Object Behavior",function(){
    var LabelTO = require("../lib/label.js").LabelTO;
    var labelTOBehaviorUnderTest;

    beforeEach(function(){
        labelTOBehaviorUnderTest = LabelTO({});
        sinon.stub(labelTOBehaviorUnderTest, "_getROProperty");
		
		labelTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        labelTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(labelTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("text",function(){
        it("should query the property text",function(){
            labelTOBehaviorUnderTest.text();
            assert(labelTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(labelTOBehaviorUnderTest._getROProperty.firstCall.args, ["text", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {};
            labelTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = labelTOBehaviorUnderTest.text();
            assert.strictEqual(res,getROPromise);
        });
    });

});

