// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var assert = require("assert");
var sinon = require("sinon");

describe("RatingIndicator Description unit tests", function() {
    var RatingIndicatorDesc = require("../lib/rating_indicator.js").RatingIndicator;
    var ratingIndicatorDescUnderTest;

    beforeEach(function() {
        ratingIndicatorDescUnderTest = new RatingIndicatorDesc();
    });

    describe("rating method",function() {
        it("should add 'rating' with the correct value",function(){
            ratingIndicatorDescUnderTest.rating(1);
            assert.strictEqual(ratingIndicatorDescUnderTest._properties["rating"], '1');
        });
        it("should add 'rating' with the numeric string value",function(){
            ratingIndicatorDescUnderTest.rating('1.1');
            assert.strictEqual(ratingIndicatorDescUnderTest._properties["rating"], '1.1');
        });
        it("should throw exception if params is not numeric string",function(){
            assert.throws(function() {
                ratingIndicatorDescUnderTest.rating("1a");
            });
        });
        it("should add 'rating' with correct value when value is given using property bag",function(){
            ratingIndicatorDescUnderTest = RatingIndicatorDesc({
                rating: 1
            });
            assert.strictEqual(ratingIndicatorDescUnderTest._properties["rating"], '1');
        });
        it("should return this - builder pattern when value is given",function(){
            var result = ratingIndicatorDescUnderTest.rating(1);
            assert.strictEqual(result, ratingIndicatorDescUnderTest);
        });
        it("should remove 'rating' from _properties when value is null",function(){
            ratingIndicatorDescUnderTest._properties["rating"] = 1;
            ratingIndicatorDescUnderTest.rating(null);
            assert(!("rating" in ratingIndicatorDescUnderTest._properties));
        });
        it("should return the value of 'rating' from _properties when value is not given",function(){
            ratingIndicatorDescUnderTest._properties["rating"] = 1;
            var ratingLevel = ratingIndicatorDescUnderTest.rating();
            assert.strictEqual(ratingLevel, 1);
        });
    });

    describe("maxRating method",function() {
        it("should add 'maximum rating' with the correct value",function(){
            ratingIndicatorDescUnderTest.maxRating(5);
            assert.strictEqual(ratingIndicatorDescUnderTest._properties["maximum rating"], '5');
        });
        it("should add 'maximum rating' with the numeric string value",function(){
            ratingIndicatorDescUnderTest.maxRating('5');
            assert.strictEqual(ratingIndicatorDescUnderTest._properties["maximum rating"], '5');
        });
        it("should throw exception if params is not numeric string",function(){
            assert.throws(function() {
                ratingIndicatorDescUnderTest.maxRating("1a");
            });
        });
        it("should add 'maximum rating' with correct value when value is given using property bag",function(){
            ratingIndicatorDescUnderTest = RatingIndicatorDesc({
                maxRating: 5
            });
            assert.strictEqual(ratingIndicatorDescUnderTest._properties["maximum rating"], '5');
        });
        it("should return this - builder pattern when value is given",function(){
            var result = ratingIndicatorDescUnderTest.maxRating(5);
            assert.strictEqual(result, ratingIndicatorDescUnderTest);
        });
        it("should remove 'maximum rating' from _properties when value is null",function(){
            ratingIndicatorDescUnderTest._properties["maximum rating"] = 5;
            ratingIndicatorDescUnderTest.maxRating(null);
            assert(!("maximum rating" in ratingIndicatorDescUnderTest._properties));
        });
        it("should return the value of 'maximum rating' from _properties when value is not given",function(){
            ratingIndicatorDescUnderTest._properties["maximum rating"] = 5;
            var ratingLevel = ratingIndicatorDescUnderTest.maxRating();
            assert.strictEqual(ratingLevel, 5);
        });
    });

    describe("orientation method",function() {
        it("should add 'orientation' with the correct value",function(){
            ratingIndicatorDescUnderTest.orientation("horizontal");
            assert.strictEqual(ratingIndicatorDescUnderTest._properties["orientation"], "horizontal");
        });
        it("should add 'orientation' with correct value when value is given using property bag",function(){
            ratingIndicatorDescUnderTest = RatingIndicatorDesc({
                orientation: "horizontal"
            });
            assert.strictEqual(ratingIndicatorDescUnderTest._properties["orientation"], "horizontal");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = ratingIndicatorDescUnderTest.orientation("horizontal");
            assert.strictEqual(result, ratingIndicatorDescUnderTest);
        });
        it("should remove 'orientation' from _properties when value is null",function(){
            ratingIndicatorDescUnderTest._properties["orientation"] = "horizontal";
            ratingIndicatorDescUnderTest.orientation(null);
            assert(!("orientation" in ratingIndicatorDescUnderTest._properties));
        });
        it("should return the value of 'orientation' from _properties when value is not given",function(){
            ratingIndicatorDescUnderTest._properties["orientation"] = "horizontal";
            var orientation = ratingIndicatorDescUnderTest.orientation();
            assert.equal(orientation, "horizontal");
        });
    });
});

describe("RatingIndicator Test Object Behavior",function(){
    var RatingIndicatorTO = require("../lib/rating_indicator.js").RatingIndicatorTO;
    var ratingIndicatorTOBehaviorUnderTest;
    var promiseMock = {then: function(cb) {return cb("5");}};

    beforeEach(function(){
        ratingIndicatorTOBehaviorUnderTest = RatingIndicatorTO({});
        sinon.stub(ratingIndicatorTOBehaviorUnderTest, "_executeCommand");
        sinon.stub(ratingIndicatorTOBehaviorUnderTest, "_getROProperty");
        ratingIndicatorTOBehaviorUnderTest._getROProperty.returns(promiseMock);
		
		ratingIndicatorTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        ratingIndicatorTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(ratingIndicatorTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("setRating",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            ratingIndicatorTOBehaviorUnderTest.setRating(1);
            assert(ratingIndicatorTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(ratingIndicatorTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["SetLevel",1]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            ratingIndicatorTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = ratingIndicatorTOBehaviorUnderTest.setRating(1);
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("rating",function(){
        it("should query the property 'rating'",function(){
            ratingIndicatorTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            ratingIndicatorTOBehaviorUnderTest.rating();
            assert(ratingIndicatorTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(ratingIndicatorTOBehaviorUnderTest._getROProperty.firstCall.args,["rating", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            ratingIndicatorTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = ratingIndicatorTOBehaviorUnderTest.rating();
            assert.strictEqual(res, 5);
        });
    });

    describe("maxRating",function(){
        var promiseMock = {then: function(cb) {return cb("5");}};
        it("should query the property 'maximum rating'",function(){
            ratingIndicatorTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            ratingIndicatorTOBehaviorUnderTest.maxRating();
            assert(ratingIndicatorTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(ratingIndicatorTOBehaviorUnderTest._getROProperty.firstCall.args,["maximum rating", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var res = ratingIndicatorTOBehaviorUnderTest.maxRating();
            assert.strictEqual(res,5);
        });
    });

    describe("orientation",function(){
        it("should query the property 'orientation'",function(){
            ratingIndicatorTOBehaviorUnderTest.orientation();
            assert(ratingIndicatorTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(ratingIndicatorTOBehaviorUnderTest._getROProperty.firstCall.args,["orientation", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            ratingIndicatorTOBehaviorUnderTest._getROProperty.returns('horizontal');
            var res = ratingIndicatorTOBehaviorUnderTest.orientation();
            assert.strictEqual(res,"horizontal");
        });
    });

});