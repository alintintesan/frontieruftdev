// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var assert = require("assert");
var sinon = require("sinon");

describe("Calendar Description unit tests", function() {
    var CalendarDesc = require("../lib/calendar.js").Calendar;
    var calendarDescUnderTest;

    beforeEach(function() {
        calendarDescUnderTest = new CalendarDesc();
    });

    describe("date method",function() {
        it("should add 'date_yyyymmdd' with the correct value",function(){
            calendarDescUnderTest.date(new Date('2016-02-01'));
            assert.strictEqual(calendarDescUnderTest._properties["date_yyyymmdd"], '20160201');
        });
        it("should add 'date_yyyymmdd' with correct value when value is given using property bag",function(){
            calendarDescUnderTest = CalendarDesc({
                date: new Date('2016-01-01')
            });
            assert.strictEqual(calendarDescUnderTest._properties["date_yyyymmdd"], '20160101');
        });
        it("should return this - builder pattern when value is given",function(){
            var result = calendarDescUnderTest.date(new Date('2016-01-01'));
            assert.strictEqual(result, calendarDescUnderTest);
        });
        it("should remove 'date_yyyymmdd' from _properties when value is null",function(){
            calendarDescUnderTest._properties["date_yyyymmdd"] = '20160101';
            calendarDescUnderTest.date(null);
            assert(!("date_yyyymmdd" in calendarDescUnderTest._properties));
        });
        it("should return the value of 'date_yyyymmdd' from _properties when value is not given",function(){
            calendarDescUnderTest._properties["date_yyyymmdd"] = '20160101';
            var dateValue = calendarDescUnderTest.date();
            assert.strictEqual(dateValue.toDateString(), new Date('2016-01-01').toDateString());
        });
        it("should throw exception if parameter is not Date object",function(){
            assert.throws(function() {
                calendarDescUnderTest.date("2016-01-01");
            });
        });
    });

    describe("locale method",function() {
        it("should add 'locale' with the correct value",function(){
            calendarDescUnderTest.locale('EN');
            assert.strictEqual(calendarDescUnderTest._properties["locale"], 'EN');
        });
        it("should add 'locale' with correct value when value is given using property bag",function(){
            calendarDescUnderTest = CalendarDesc({
                locale: 'EN'
            });
            assert.strictEqual(calendarDescUnderTest._properties["locale"], 'EN');
        });
        it("should return this - builder pattern when value is given",function(){
            var result = calendarDescUnderTest.locale('EN');
            assert.strictEqual(result, calendarDescUnderTest);
        });
        it("should remove 'locale' from _properties when value is null",function(){
            calendarDescUnderTest._properties["locale"] = 'EN';
            calendarDescUnderTest.locale(null);
            assert(!("locale" in calendarDescUnderTest._properties));
        });
        it("should return the value of 'locale' from _properties when value is not given",function(){
            calendarDescUnderTest._properties["locale"] = 'EN';
            var localeValue = calendarDescUnderTest.locale();
            assert.strictEqual(localeValue, 'EN');
        });
    });
});

describe("Calendar Test Object Behavior",function(){
    var CalendarTO = require("../lib/calendar.js").CalendarTO;
    var calendarTOBehaviorUnderTest;

    beforeEach(function(){
        calendarTOBehaviorUnderTest = CalendarTO({});
        sinon.stub(calendarTOBehaviorUnderTest, "_executeCommand");
        sinon.stub(calendarTOBehaviorUnderTest, "_getROProperty");
		
		calendarTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        calendarTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(calendarTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("date",function(){
        var promiseMock = {then: function(cb) {return cb("20160101");}};
        it("should query the property 'date_yyyymmdd'",function(){
            calendarTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            calendarTOBehaviorUnderTest.date();
            assert(calendarTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(calendarTOBehaviorUnderTest._getROProperty.firstCall.args,["date_yyyymmdd", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            calendarTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = calendarTOBehaviorUnderTest.date();
            assert.strictEqual(res.toDateString(),new Date('2016-01-01').toDateString());
        });
    });

    describe("locale",function(){
        it("should query the property 'locale'",function(){
            calendarTOBehaviorUnderTest.locale();
            assert(calendarTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(calendarTOBehaviorUnderTest._getROProperty.firstCall.args,["locale", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {};
            calendarTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = calendarTOBehaviorUnderTest.locale();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("setDate",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            calendarTOBehaviorUnderTest.setDate(new Date("2016-02-01"));
            assert(calendarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(calendarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["SetDate","20160201"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            calendarTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = calendarTOBehaviorUnderTest.setDate(new Date("2016-02-01"));
            assert.strictEqual(res,getROPromise);
        });
        it("should throw exception if parameter is not Date object",function(){
            assert.throws(function() {
                calendarTOBehaviorUnderTest.setDate("2016-02-01");
            });
        });
    });

});