// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var assert = require("assert");
var sinon = require("sinon");

describe("RowRepeater Description unit tests", function() {
    var RowRepeaterDesc = require("../lib/row_repeater.js").RowRepeater;
    var rowRepeaterDescUnderTest;

    beforeEach(function() {
        rowRepeaterDescUnderTest = new RowRepeaterDesc();
    });

    describe("hasMoreSteps method",function() {
        xit("should add 'show more steps' with the correct value",function(){
            rowRepeaterDescUnderTest.hasMoreSteps(true);
            assert.strictEqual(rowRepeaterDescUnderTest._properties['show more steps'], 1);
        });
        xit("should add 'show more steps' with correct value when value is given using property bag",function(){
            rowRepeaterDescUnderTest = RowRepeaterDesc({
                hasMoreSteps: true
            });
            assert.strictEqual(rowRepeaterDescUnderTest._properties['show more steps'], 1);
        });
        xit("should return this - builder pattern when value is given",function(){
            var result = rowRepeaterDescUnderTest.hasMoreSteps(true);
            assert.strictEqual(result, rowRepeaterDescUnderTest);
        });
        xit("should remove 'show more steps' from _properties when value is null",function(){
            rowRepeaterDescUnderTest._properties['show more steps'] = true;
            rowRepeaterDescUnderTest.hasMoreSteps(null);
            assert(!('show more steps' in rowRepeaterDescUnderTest._properties));
        });
        xit("should return the value of 'show more steps' from _properties when value is not given",function(){
            rowRepeaterDescUnderTest._properties['show more steps'] = true;
            var hasMore = rowRepeaterDescUnderTest.hasMoreSteps();
            assert.equal(hasMore, true);
        });
    });

    describe("design method",function() {
        it("should add 'design' with the correct value",function(){
            rowRepeaterDescUnderTest.design("Standard");
            assert.strictEqual(rowRepeaterDescUnderTest._properties['design'], "Standard");
        });
        it("should add 'design' with correct value when value is given using property bag",function(){
            rowRepeaterDescUnderTest = RowRepeaterDesc({
                design: "standard"
            });
            assert.strictEqual(rowRepeaterDescUnderTest._properties['design'], "standard");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = rowRepeaterDescUnderTest.design("Standard");
            assert.strictEqual(result, rowRepeaterDescUnderTest);
        });
        it("should remove 'design' from _properties when value is null",function(){
            rowRepeaterDescUnderTest._properties['design'] = "Standard";
            rowRepeaterDescUnderTest.design(null);
            assert(!("design" in rowRepeaterDescUnderTest._properties));
        });
        it("should return the value of 'design' from _properties when value is not given",function(){
            rowRepeaterDescUnderTest._properties['design'] = "Standard";
            var design = rowRepeaterDescUnderTest.design();
            assert.strictEqual(design, "Standard");
        });
    });

    describe("filters method",function() {
        it("should add 'filters' with the correct value",function(){
            rowRepeaterDescUnderTest.filters(['a','b','c']);
            assert.strictEqual(rowRepeaterDescUnderTest._properties['filters'], 'a;b;c');
        });
        it("should add 'filters' with correct value when value is given using property bag",function(){
            rowRepeaterDescUnderTest = RowRepeaterDesc({
                filters: ['a','b','c']
            });
            assert.strictEqual(rowRepeaterDescUnderTest._properties['filters'], 'a;b;c');
        });
        it("should return this - builder pattern when value is given",function(){
            var result = rowRepeaterDescUnderTest.filters(['a','b','c']);
            assert.strictEqual(result, rowRepeaterDescUnderTest);
        });
        it("should remove 'filters' from _properties when value is null",function(){
            rowRepeaterDescUnderTest._properties['filters'] = 'a;b;c';
            rowRepeaterDescUnderTest.filters(null);
            assert(!("filters" in rowRepeaterDescUnderTest._properties));
        });
        it("should return the value of 'filters' from _properties when value is not given",function(){
            rowRepeaterDescUnderTest._properties['filters'] = 'a;b;c';
            var filters = rowRepeaterDescUnderTest.filters();
            assert.deepEqual(filters, ['a','b','c']);
        });
    });

    describe("sorters method",function() {
        it("should add 'sorters' with the correct value",function(){
            rowRepeaterDescUnderTest.sorters(['a','b','c']);
            assert.strictEqual(rowRepeaterDescUnderTest._properties['sorters'], 'a;b;c');
        });
        it("should add 'sorters' with correct value when value is given using property bag",function(){
            rowRepeaterDescUnderTest = RowRepeaterDesc({
                sorters: ['a','b','c']
            });
            assert.strictEqual(rowRepeaterDescUnderTest._properties['sorters'], 'a;b;c');
        });
        it("should return this - builder pattern when value is given",function(){
            var result = rowRepeaterDescUnderTest.sorters(['a','b','c']);
            assert.strictEqual(result, rowRepeaterDescUnderTest);
        });
        it("should remove 'filters' from _properties when value is null",function(){
            rowRepeaterDescUnderTest._properties['sorters'] = 'a;b;c';
            rowRepeaterDescUnderTest.sorters(null);
            assert(!("sorters" in rowRepeaterDescUnderTest._properties));
        });
        it("should return the value of 'sorters' from _properties when value is not given",function(){
            rowRepeaterDescUnderTest._properties['sorters'] = 'a;b;c';
            var sorters = rowRepeaterDescUnderTest.sorters();
            assert.deepEqual(sorters, ['a','b','c']);
        });
    });
});

describe("RowRepeater Test Object Behavior",function(){
    var RowRepeaterTO = require("../lib/row_repeater.js").RowRepeaterTO;
    var rowRepeaterTOBehaviorUnderTest;

    beforeEach(function(){
        rowRepeaterTOBehaviorUnderTest = RowRepeaterTO({});
        sinon.stub(rowRepeaterTOBehaviorUnderTest, "_executeCommand");
        sinon.stub(rowRepeaterTOBehaviorUnderTest, "_getROProperty");
		
		rowRepeaterTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        rowRepeaterTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(rowRepeaterTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("hasMoreSteps",function(){
        var promiseMockT = {then: function(cb) {return cb(3);}},
            promiseMockF = {then: function(cb) {return cb(0);}};
        it("should query the property 'show more steps'",function(){
            rowRepeaterTOBehaviorUnderTest._getROProperty.returns(promiseMockT);
            rowRepeaterTOBehaviorUnderTest.hasMoreSteps();
            assert(rowRepeaterTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._getROProperty.firstCall.args,['show more steps', arguments]);
        });
        it("should return the same promise that was returned from _getROProperty,expects true",function(){
            rowRepeaterTOBehaviorUnderTest._getROProperty.returns(promiseMockT);
            var res = rowRepeaterTOBehaviorUnderTest.hasMoreSteps();
            assert.strictEqual(res,true);
        });
        it("should return the same promise that was returned from _getROProperty,expects false",function(){
            rowRepeaterTOBehaviorUnderTest._getROProperty.returns(promiseMockF);
            var res = rowRepeaterTOBehaviorUnderTest.hasMoreSteps();
            assert.strictEqual(res,false);
        });
    });

    describe("design",function(){
        it("should query the property 'design'",function(){
            rowRepeaterTOBehaviorUnderTest.design();
            assert(rowRepeaterTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._getROProperty.firstCall.args,["design", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            rowRepeaterTOBehaviorUnderTest._getROProperty.returns("Standard");
            var res = rowRepeaterTOBehaviorUnderTest.design();
            assert.strictEqual(res,"Standard");
        });
    });

    describe("rowsCount",function(){
        it("should query the property 'rows count'",function(){
            rowRepeaterTOBehaviorUnderTest._getROProperty.returns(3);
            rowRepeaterTOBehaviorUnderTest.rowsCount();
            assert(rowRepeaterTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._getROProperty.firstCall.args,["rows count", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            rowRepeaterTOBehaviorUnderTest._getROProperty.returns(3);
            var res = rowRepeaterTOBehaviorUnderTest.rowsCount();
            assert.strictEqual(res,3);
        });
    });
    describe("pagesCount",function(){
        it("should query the property 'total pages'",function(){
            rowRepeaterTOBehaviorUnderTest._getROProperty.returns(3);
            rowRepeaterTOBehaviorUnderTest.pagesCount();
            assert(rowRepeaterTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._getROProperty.firstCall.args,["total pages", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            rowRepeaterTOBehaviorUnderTest._getROProperty.returns(3);
            var res = rowRepeaterTOBehaviorUnderTest.pagesCount();
            assert.strictEqual(res,3);
        });
    });
    describe("currentPage",function(){
        it("should query the property 'current page'",function(){
            rowRepeaterTOBehaviorUnderTest._getROProperty.returns(3);
            rowRepeaterTOBehaviorUnderTest.currentPage();
            assert(rowRepeaterTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._getROProperty.firstCall.args,["current page", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            rowRepeaterTOBehaviorUnderTest._getROProperty.returns(3);
            var res = rowRepeaterTOBehaviorUnderTest.currentPage();
            assert.strictEqual(res,3);
        });
    });

    describe("filters",function(){
        var promiseMock = {then: function(cb) {return cb("a;b;c");}};
        it("should query the property 'filters'",function(){
            rowRepeaterTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            rowRepeaterTOBehaviorUnderTest.filters();
            assert(rowRepeaterTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._getROProperty.firstCall.args,["filters", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            rowRepeaterTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = rowRepeaterTOBehaviorUnderTest.filters();
            assert.deepEqual(res,[ 'a','b','c' ]);
        });
    });
    describe("sorters",function(){
        var promiseMock = {then: function(cb) {return cb("a;b;c");}};
        it("should query the property 'sorters'",function(){
            rowRepeaterTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            rowRepeaterTOBehaviorUnderTest.sorters();
            assert(rowRepeaterTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._getROProperty.firstCall.args,["sorters", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            rowRepeaterTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = rowRepeaterTOBehaviorUnderTest.sorters();
            assert.deepEqual(res,[ 'a','b','c' ]);
        });
    });
    describe("more",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            rowRepeaterTOBehaviorUnderTest.more();
            assert(rowRepeaterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["ShowMore"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            rowRepeaterTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = rowRepeaterTOBehaviorUnderTest.more();
            assert.strictEqual(res,getROPromise);
        });
    });
    describe("firstPage",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            rowRepeaterTOBehaviorUnderTest.firstPage();
            assert(rowRepeaterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["FirstPage"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            rowRepeaterTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = rowRepeaterTOBehaviorUnderTest.firstPage();
            assert.strictEqual(res,getROPromise);
        });
    });
    describe("lastPage",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            rowRepeaterTOBehaviorUnderTest.lastPage();
            assert(rowRepeaterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["LastPage"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            rowRepeaterTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = rowRepeaterTOBehaviorUnderTest.lastPage();
            assert.strictEqual(res,getROPromise);
        });
    });
    describe("nextPage",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            rowRepeaterTOBehaviorUnderTest.nextPage();
            assert(rowRepeaterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["NextPage"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            rowRepeaterTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = rowRepeaterTOBehaviorUnderTest.nextPage();
            assert.strictEqual(res,getROPromise);
        });
    });
    describe("previousPage",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            rowRepeaterTOBehaviorUnderTest.previousPage();
            assert(rowRepeaterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["PreviousPage"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            rowRepeaterTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = rowRepeaterTOBehaviorUnderTest.previousPage();
            assert.strictEqual(res,getROPromise);
        });
    });
    describe("navigateTo",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            rowRepeaterTOBehaviorUnderTest.navigateTo(5);
            assert(rowRepeaterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["SetPage","5"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            rowRepeaterTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = rowRepeaterTOBehaviorUnderTest.navigateTo(5);
            assert.strictEqual(res,getROPromise);
        });
    });
    describe("filterBy",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            rowRepeaterTOBehaviorUnderTest.filterBy('country');
            assert(rowRepeaterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["FilterBy","country"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            rowRepeaterTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = rowRepeaterTOBehaviorUnderTest.filterBy('country');
            assert.strictEqual(res,getROPromise);
        });
    });
    describe("sortBy",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            rowRepeaterTOBehaviorUnderTest.sortBy('country');
            assert(rowRepeaterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["SortBy","country"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            rowRepeaterTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = rowRepeaterTOBehaviorUnderTest.sortBy('country');
            assert.strictEqual(res,getROPromise);
        });
    });
    describe("getCellData",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            rowRepeaterTOBehaviorUnderTest.getCellData(2,5);
            assert(rowRepeaterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 3), ["GetCellData",3,6]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            rowRepeaterTOBehaviorUnderTest._executeCommand.returns('ABC');
            var res = rowRepeaterTOBehaviorUnderTest.getCellData(2,5);
            assert.strictEqual(res,'ABC');
        });
    });
    describe("findRowWithCellTextInColumn",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            rowRepeaterTOBehaviorUnderTest.findRowWithCellTextInColumn('ABC',5);
            assert(rowRepeaterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 3), ["GetRowWithCellText",'ABC',6]);
        });
        it("should call the _executeCommand method and pass it the correct arguments(3 arguments)",function(){
            rowRepeaterTOBehaviorUnderTest.findRowWithCellTextInColumn('ABC',5,3);
            assert(rowRepeaterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(rowRepeaterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 4), ["GetRowWithCellText",'ABC',6,4]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            rowRepeaterTOBehaviorUnderTest._executeCommand.returns(10);
            var res = rowRepeaterTOBehaviorUnderTest.findRowWithCellTextInColumn('ABC',5,2);
            assert.strictEqual(res,10);
        });
    });

});