// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/31/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("RadioGroup Description",function(){
    var RadioGroupDesc = require("../lib/radio_group.js").RadioGroup;
    var radioGroupDescUnderTest;

    beforeEach(function(){
        radioGroupDescUnderTest = RadioGroupDesc();
    });

    describe("items method",function() {
        it("should add 'all items' with correct value when a value is given",function(){
            radioGroupDescUnderTest.items(["male","female"]);
            assert.strictEqual(radioGroupDescUnderTest._properties["all items"], "male;female");
        });
        it("should add 'all items' with correct value, when value is given using property bag",function(){
            radioGroupDescUnderTest = RadioGroupDesc({
                items: ["male","female"]
            });
            assert.strictEqual(radioGroupDescUnderTest._properties["all items"], "male;female");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = radioGroupDescUnderTest.items(["male","female"]);
            assert.strictEqual(result, radioGroupDescUnderTest);
        });
        it("should remove 'all items' from _properties when value is null",function(){
            radioGroupDescUnderTest._properties["all items"] = "male;female";
            radioGroupDescUnderTest.items(null);
            assert(!("all items" in radioGroupDescUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties, when value is not given",function(){
            radioGroupDescUnderTest._properties["all items"] = "male;female";
            var items = radioGroupDescUnderTest.items();
            assert.deepEqual(items, ["male","female"]);
        });
        it("should not modify property 'all items', upon get",function(){
            radioGroupDescUnderTest._properties["all items"] = "male;female";
            radioGroupDescUnderTest.items();
            assert.strictEqual(radioGroupDescUnderTest._properties["all items"], "male;female");
        });
        it("should return same value in get, when value is set",function(){
            radioGroupDescUnderTest.items(["male","female"]);
            var items = radioGroupDescUnderTest.items();
            assert.deepEqual(items, ["male","female"]);
        });
    });

});

describe("RadioGroup Test Object Behavior",function(){
    var RadioGroupTO = require("../lib/radio_group.js").RadioGroupTO;
    var radioGroupTOBehaviorUnderTest;

    beforeEach(function(){
        radioGroupTOBehaviorUnderTest = RadioGroupTO({});
        sinon.stub(radioGroupTOBehaviorUnderTest, "_getROProperty");
        sinon.stub(radioGroupTOBehaviorUnderTest, "_executeCommand");
		
		radioGroupTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        radioGroupTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(radioGroupTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("items",function(){
        it("should convert the returned string to array",function(){
            var promise = {
                then: function(cb){return cb("male;female");}
            };

            radioGroupTOBehaviorUnderTest._getROProperty.returns(promise);
            var res = radioGroupTOBehaviorUnderTest.items();
            assert.deepEqual(res,["male","female"]); // js not comparing objects
        });
        it("should query the property 'all items'",function(){
            var promise  = {then: sinon.spy()};
            radioGroupTOBehaviorUnderTest._getROProperty.returns(promise);
            radioGroupTOBehaviorUnderTest.items();
            assert(radioGroupTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(radioGroupTOBehaviorUnderTest._getROProperty.firstCall.args[0],"all items");
        });
    });

    describe("select", function(){
        it("should throw error if no arguments passed",function(){
            assert.throws(function(){
                radioGroupTOBehaviorUnderTest.select();
            });
        });
        it("should call the _executeCommand method",function(){
            radioGroupTOBehaviorUnderTest.select(1);
            assert(radioGroupTOBehaviorUnderTest._executeCommand.calledOnce);
        });
        it("should be able to accept a string",function(){
            radioGroupTOBehaviorUnderTest.select("female");
            assert.equal(radioGroupTOBehaviorUnderTest._executeCommand.firstCall.args[1], "female");
        });
        it("should be able to except null",function(){
            radioGroupTOBehaviorUnderTest.select(null);
            assert.equal(radioGroupTOBehaviorUnderTest._executeCommand.firstCall.args[1], null);
        });
        it("should be able to except empty string",function(){
            radioGroupTOBehaviorUnderTest.select("");
            assert.equal(radioGroupTOBehaviorUnderTest._executeCommand.firstCall.args[1], "");
        });
        it("should be able to except a number and and pass it to _executeCommand as '#{}' string format",function(){
            radioGroupTOBehaviorUnderTest.select(2);
            assert.equal(radioGroupTOBehaviorUnderTest._executeCommand.firstCall.args[1], '#3');
        });
        it("should return the same promise that was returned from _executeCommand method",function(){
            radioGroupTOBehaviorUnderTest._executeCommand.returns(2);
            var res = radioGroupTOBehaviorUnderTest.select(2);
            assert.strictEqual(res,2);
        });
    });

    describe("selectedItem",function(){
        it("should query the property selection",function(){
            radioGroupTOBehaviorUnderTest.selectedItem();
            assert(radioGroupTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(radioGroupTOBehaviorUnderTest._getROProperty.firstCall.args, ["selection", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {};
            radioGroupTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = radioGroupTOBehaviorUnderTest.selectedItem();
            assert.strictEqual(res,getROPromise);
        });
    });

});