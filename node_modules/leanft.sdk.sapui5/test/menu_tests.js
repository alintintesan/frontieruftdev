// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/30/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Menu Test Object Behavior",function() {
    var MenuTO = require("../lib/menu.js").MenuTO;
    var menuTOBehaviorUnderTest;

    beforeEach(function () {
        menuTOBehaviorUnderTest = MenuTO({});
        sinon.stub(menuTOBehaviorUnderTest, "_executeCommand");
		
		menuTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        menuTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(menuTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("select", function () {
        it("should call the _executeCommand method and pass it the correct arguments", function () {
            var promise = {
                then: function(cb) {
                    return cb({});
                }
            };
            menuTOBehaviorUnderTest._executeCommand.returns(promise);
            menuTOBehaviorUnderTest.select("some_path");
            assert(menuTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(menuTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Select", "some_path"]);
        });
        it("should throw an error if false is returned from _executeCommand", function () {
            var promise = {
                then: function(cb) {
                    return cb(false);
                }
            };
            menuTOBehaviorUnderTest._executeCommand.returns(promise);
            assert.throws(function() {
                menuTOBehaviorUnderTest.select("some_path");
            });
        });
    });

    describe("setItemValue", function () {
        it("should call the _executeCommand method and pass it the correct arguments", function () {
            var promise = {
                then: function(cb) {
                    return cb({});
                }
            };
            menuTOBehaviorUnderTest._executeCommand.returns(promise);
            menuTOBehaviorUnderTest.setItemValue("some_item_path", "some_value");
            assert(menuTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(menuTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 3), ["Select", "some_item_path", "some_value"]);
        });
        it("should call the correct path returned from buildMenuPath", function () {
            var promise = {
                then: function(cb) {
                    return cb({});
                }
            };
            menuTOBehaviorUnderTest._executeCommand.returns(promise);

            var path = menuTOBehaviorUnderTest.buildMenuPath("node1", 0, "node3")

            menuTOBehaviorUnderTest.setItemValue(path, "some_value");
            assert(menuTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(menuTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 3), ["Select", "node1;#1;node3", "some_value"]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var promise = {};
            menuTOBehaviorUnderTest._executeCommand.returns(promise);
            var res = menuTOBehaviorUnderTest.setItemValue("some_item_path", "some_value");
            assert.deepEqual(res, {});
        });
    });

});