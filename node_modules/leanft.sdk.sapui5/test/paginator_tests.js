// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/30/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("PaginatorDescriptionBehavior",function(){
    var PaginatorDesc = require("../lib/paginator.js").Paginator;
    var paginatorDescUnderTest;

    beforeEach(function(){
        paginatorDescUnderTest = PaginatorDesc();
    });

    describe("totalPagesCount method",function() {
        it("should add 'total pages' with the correct value",function(){
            paginatorDescUnderTest.totalPagesCount(1);
            assert.strictEqual(paginatorDescUnderTest._properties["total pages"], 1);
        });
        it("should add 'total pages' with the correct value when value is a numeric string",function(){
            paginatorDescUnderTest.totalPagesCount("1");
            assert.strictEqual(paginatorDescUnderTest._properties["total pages"], 1);
        });
        it("should throw exception if params is not numeric string",function(){
            assert.throws(function() {
                paginatorDescUnderTest.totalPagesCount("1a");
            });
        });
        it("should add 'total pages' with correct value when value is given using property bag",function(){
            paginatorDescUnderTest = PaginatorDesc({
                totalPagesCount: 1
            });
            assert.strictEqual(paginatorDescUnderTest._properties["total pages"], 1);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = paginatorDescUnderTest.totalPagesCount(1);
            assert.strictEqual(result, paginatorDescUnderTest);
        });
        it("should remove 'total pages' from _properties when value is null",function(){
            paginatorDescUnderTest._properties["total pages"] = 1;
            paginatorDescUnderTest.totalPagesCount(null);
            assert(!("total pages" in paginatorDescUnderTest._properties));
        });
        it("should return the value of 'total pages' from _properties when value is not given",function(){
            paginatorDescUnderTest._properties["total pages"] = 1;
            var totalPagesCount = paginatorDescUnderTest.totalPagesCount();
            assert.equal(totalPagesCount, 1);
        });
    });

    describe("visiblePagesCount method",function() {
        it("should add 'visible pages' with the correct value",function(){
            paginatorDescUnderTest.visiblePagesCount(1);
            assert.strictEqual(paginatorDescUnderTest._properties["visible pages"], 1);
        });
        it("should add 'visible pages' with the correct value when value is a numeric string",function(){
            paginatorDescUnderTest.visiblePagesCount("1");
            assert.strictEqual(paginatorDescUnderTest._properties["visible pages"], 1);
        });
        it("should throw exception if params is not numeric string",function(){
            assert.throws(function() {
                paginatorDescUnderTest.visiblePagesCount("1a");
            });
        });
        it("should add 'visible pages' with correct value when value is given using property bag",function(){
            paginatorDescUnderTest = PaginatorDesc({
                visiblePagesCount: 1
            });
            assert.strictEqual(paginatorDescUnderTest._properties["visible pages"], 1);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = paginatorDescUnderTest.visiblePagesCount(1);
            assert.strictEqual(result, paginatorDescUnderTest);
        });
        it("should remove 'visible pages' from _properties when value is null",function(){
            paginatorDescUnderTest._properties["visible pages"] = 1;
            paginatorDescUnderTest.visiblePagesCount(null);
            assert(!("visible pages" in paginatorDescUnderTest._properties));
        });
        it("should return the value of 'visible pages' from _properties when value is not given",function(){
            paginatorDescUnderTest._properties["visible pages"] = 1;
            var visiblePagesCount = paginatorDescUnderTest.visiblePagesCount();
            assert.equal(visiblePagesCount, 1);
        });
    });

});

describe("Paginator Test Object Behavior",function(){
    var PaginatorTO = require("../lib/paginator.js").PaginatorTO;
    var paginatorTOBehaviorUnderTest;

    beforeEach(function(){
        paginatorTOBehaviorUnderTest = PaginatorTO({});
        sinon.stub(paginatorTOBehaviorUnderTest, "_getROProperty");
        sinon.stub(paginatorTOBehaviorUnderTest, "_executeCommand");
		
		paginatorTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        paginatorTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(paginatorTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("currentPage",function(){
        it("should query the property 'current page'",function(){
            paginatorTOBehaviorUnderTest.currentPage();
            assert(paginatorTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(paginatorTOBehaviorUnderTest._getROProperty.firstCall.args, ["current page", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {};
            paginatorTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = paginatorTOBehaviorUnderTest.currentPage();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("totalPagesCount",function(){
        it("should query the property 'total pages'",function(){
            paginatorTOBehaviorUnderTest.totalPagesCount();
            assert(paginatorTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(paginatorTOBehaviorUnderTest._getROProperty.firstCall.args, ["total pages", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {};
            paginatorTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = paginatorTOBehaviorUnderTest.totalPagesCount();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("visiblePagesCount",function(){
        it("should query the property 'visible pages'",function(){
            paginatorTOBehaviorUnderTest.visiblePagesCount();
            assert(paginatorTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(paginatorTOBehaviorUnderTest._getROProperty.firstCall.args, ["visible pages", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {};
            paginatorTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = paginatorTOBehaviorUnderTest.visiblePagesCount();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("navigateTo", function () {
        it("should call the _executeCommand method and pass it the correct arguments", function () {
            var promise = {
                then: function(cb) {
                    return cb({});
                }
            };
            paginatorTOBehaviorUnderTest._executeCommand.returns(promise);
            paginatorTOBehaviorUnderTest.navigateTo(5);
            assert(paginatorTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(paginatorTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["SetPage", 5]);
        });
        it("should throw error if false returned from _executeCommand", function () {
            var promise = {
                then: function(cb) {
                    return cb(false);
                }
            };
            paginatorTOBehaviorUnderTest._executeCommand.returns(promise);
            assert.throws(function(){
                paginatorTOBehaviorUnderTest.navigateTo(5);
            });
        });
    });

    describe("firstPage", function () {
        it("should call the _executeCommand method and pass it the correct arguments", function () {
            var promise = {
                then: function(cb) {
                    return cb({});
                }
            };
            paginatorTOBehaviorUnderTest._executeCommand.returns(promise);
            paginatorTOBehaviorUnderTest.firstPage();
            assert(paginatorTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(paginatorTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["FirstPage"]);
        });
        it("should throw error if false returned from _executeCommand", function () {
            var promise = {
                then: function(cb) {
                    return cb(false);
                }
            };
            paginatorTOBehaviorUnderTest._executeCommand.returns(promise);
            assert.throws(function(){
                paginatorTOBehaviorUnderTest.firstPage();
            });
        });
    });

    describe("lastPage", function () {
        it("should call the _executeCommand method and pass it the correct arguments", function () {
            var promise = {
                then: function(cb) {
                    return cb({});
                }
            };
            paginatorTOBehaviorUnderTest._executeCommand.returns(promise);
            paginatorTOBehaviorUnderTest.lastPage();
            assert(paginatorTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(paginatorTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["LastPage"]);
        });
        it("should throw error if false returned from _executeCommand", function () {
            var promise = {
                then: function(cb) {
                    return cb(false);
                }
            };
            paginatorTOBehaviorUnderTest._executeCommand.returns(promise);
            assert.throws(function(){
                paginatorTOBehaviorUnderTest.lastPage();
            });
        });
    });

    describe("previousPage", function () {
        it("should call the _executeCommand method and pass it the correct arguments", function () {
            var promise = {
                then: function(cb) {
                    return cb({});
                }
            };
            paginatorTOBehaviorUnderTest._executeCommand.returns(promise);
            paginatorTOBehaviorUnderTest.previousPage();
            assert(paginatorTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(paginatorTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["PreviousPage"]);
        });
        it("should throw error if false returned from _executeCommand", function () {
            var promise = {
                then: function(cb) {
                    return cb(false);
                }
            };
            paginatorTOBehaviorUnderTest._executeCommand.returns(promise);
            assert.throws(function(){
                paginatorTOBehaviorUnderTest.previousPage();
            });
        });
    });

    describe("nextPage", function () {
        it("should call the _executeCommand method and pass it the correct arguments", function () {
            var promise = {
                then: function(cb) {
                    return cb({});
                }
            };
            paginatorTOBehaviorUnderTest._executeCommand.returns(promise);
            paginatorTOBehaviorUnderTest.nextPage();
            assert(paginatorTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(paginatorTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["NextPage"]);
        });
        it("should throw error if false returned from _executeCommand", function () {
            var promise = {
                then: function(cb) {
                    return cb(false);
                }
            };
            paginatorTOBehaviorUnderTest._executeCommand.returns(promise);
            assert.throws(function(){
                paginatorTOBehaviorUnderTest.nextPage();
            });
        });
    });

});