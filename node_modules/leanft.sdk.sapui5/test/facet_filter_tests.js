// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 01/20/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("FacetFilterDescriptionBehavior",function(){
    var FacetFilterDesc = require("../lib/facet_filter.js").FacetFilter;
    var facetFilterDescUnderTest;

    beforeEach(function(){
        facetFilterDescUnderTest = FacetFilterDesc();
    });

    describe("filtersCount method",function() {
        it("should add 'list count' with correct value when value is given",function(){
            facetFilterDescUnderTest.filtersCount(2);
            assert.strictEqual(facetFilterDescUnderTest._properties["list count"], 2);
        });
        it("should add 'list count' with correct value when value is given using property bag",function(){
            facetFilterDescUnderTest = FacetFilterDesc({
                filtersCount: 2
            });
            assert.strictEqual(facetFilterDescUnderTest._properties["list count"], 2);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = facetFilterDescUnderTest.filtersCount(2);
            assert.strictEqual(result, facetFilterDescUnderTest);
        });
        it("should remove 'list count' from _properties when value is null",function(){
            facetFilterDescUnderTest._properties["list count"] = 2;
            facetFilterDescUnderTest.filtersCount(null);
            assert(!("list count" in facetFilterDescUnderTest._properties));
        });
        it("should return the value of 'list count' from _properties when value is not given",function(){
            facetFilterDescUnderTest._properties["list count"] = 2;
            var filtersCount = facetFilterDescUnderTest.filtersCount();
            assert.strictEqual(filtersCount, 2);
        });
    });

    describe("filters method",function() {
        it("should add 'all lists' with correct value when a value is given",function(){
            facetFilterDescUnderTest.filters(["male","female"]);
            assert.strictEqual(facetFilterDescUnderTest._properties["all lists"], "male;female");
        });
        it("should add 'all lists' with correct value, when value is given using property bag",function(){
            facetFilterDescUnderTest = FacetFilterDesc({
                filters: ["male","female"]
            });
            assert.strictEqual(facetFilterDescUnderTest._properties["all lists"], "male;female");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = facetFilterDescUnderTest.filters(["male","female"]);
            assert.strictEqual(result, facetFilterDescUnderTest);
        });
        it("should remove 'all lists' from _properties when value is null",function(){
            facetFilterDescUnderTest._properties["all lists"] = "male;female";
            facetFilterDescUnderTest.filters(null);
            assert(!("all lists" in facetFilterDescUnderTest._properties));
        });
        it("should return the value of 'all lists' from _properties, when value is not given",function(){
            facetFilterDescUnderTest._properties["all lists"] = "male;female";
            var filters = facetFilterDescUnderTest.filters();
            assert.deepEqual(filters, ["male","female"]);
        });
        it("should not modify property 'all lists', upon get",function(){
            facetFilterDescUnderTest._properties["all lists"] = "male;female";
            facetFilterDescUnderTest.filters();
            assert.strictEqual(facetFilterDescUnderTest._properties["all lists"], "male;female");
        });
        it("should return same value in get, when value is set",function(){
            facetFilterDescUnderTest.filters(["male","female"]);
            var filters = facetFilterDescUnderTest.filters();
            assert.deepEqual(filters, ["male","female"]);
        });
    });

    describe("mode method",function() {
        it("should add 'mode' with the correct value",function(){
            facetFilterDescUnderTest.mode("fixed");
            assert.strictEqual(facetFilterDescUnderTest._properties["mode"], "Fixed");
        });
        it("should throw exception if params is not valid",function(){
            assert.throws(function() {
                facetFilterDescUnderTest.mode("1fixed");
            });
        });
        it("should add 'mode' with correct value when value is given using property bag",function(){
            facetFilterDescUnderTest = FacetFilterDesc({
                mode: "fixed"
            });
            assert.strictEqual(facetFilterDescUnderTest._properties["mode"], "Fixed");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = facetFilterDescUnderTest.mode("fixed");
            assert.strictEqual(result, facetFilterDescUnderTest);
        });
        it("should remove 'mode' from _properties when value is null",function(){
            facetFilterDescUnderTest._properties["mode"] = "fixed";
            facetFilterDescUnderTest.mode(null);
            assert(!("mode" in facetFilterDescUnderTest._properties));
        });
        it("should return the value of 'mode' from _properties when value is not given",function(){
            facetFilterDescUnderTest._properties["mode"] = "fixed";
            var mode = facetFilterDescUnderTest.mode();
            assert.strictEqual(mode, "fixed");
        });
    });
});

describe("FacetFilterTOBehavior",function(){
    var FacetFilterTO = require("../lib/facet_filter.js").FacetFilterTO;
    var facetFilterTOBehaviorUnderTest;

    beforeEach(function(){
        facetFilterTOBehaviorUnderTest = FacetFilterTO({});
        sinon.stub(facetFilterTOBehaviorUnderTest, "_getROProperty");
        sinon.stub(facetFilterTOBehaviorUnderTest, "_executeCommand");
        facetFilterTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        facetFilterTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(facetFilterTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("filters",function(){
        it("should convert the returned string to array",function(){
            var promise = {
                then: function(cb){return cb("male;female");}
            };
            facetFilterTOBehaviorUnderTest._getROProperty.returns(promise);
            var res = facetFilterTOBehaviorUnderTest.filters();
            assert.deepEqual(res,["male","female"]);
        });
        it("should query the property 'all lists'",function(){
            var promise  = {then: sinon.spy()};
            facetFilterTOBehaviorUnderTest._getROProperty.returns(promise);
            facetFilterTOBehaviorUnderTest.filters();
            assert(facetFilterTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._getROProperty.firstCall.args, ["all lists", arguments]);
        });
    });

    describe("mode",function(){
        it("should query the property 'mode'",function(){
            facetFilterTOBehaviorUnderTest.mode();
            assert(facetFilterTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._getROProperty.firstCall.args,["mode", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            facetFilterTOBehaviorUnderTest._getROProperty.returns('fixed');
            var res = facetFilterTOBehaviorUnderTest.mode();
            assert.strictEqual(res,"fixed");
        });
    });

    describe("getSelectedKeysFor list title",function(){
        it("should call the _executeCommand method with 'SelectedKeys'and pass it the correct arguments and returned string to array",function(){
            var promise = {
                then: function(cb){return cb("key1;key2");}
            };

            facetFilterTOBehaviorUnderTest._executeCommand.returns(promise);
            var res = facetFilterTOBehaviorUnderTest.getSelectedKeysFor("list1");
            assert.deepEqual(res,["key1","key2"]);
            assert(facetFilterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["SelectedKeys", "list1"]);
        });
    });

    describe("getSelectedKeysFor list index",function() {
        it("should call the _executeCommand method with 'SelectedKeys'and pass it the correct arguments and returned string to array", function () {
            var promise = {
                then: function (cb) {
                    return cb("key1;key2");
                }
            };

            facetFilterTOBehaviorUnderTest._executeCommand.returns(promise);
            var res = facetFilterTOBehaviorUnderTest.getSelectedKeysFor(1);
            assert.deepEqual(res,["key1","key2"]);
            assert(facetFilterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["SelectedKeys", "#2"]);
        });
    });

    describe("getSelectedKeysCountFor list title",function(){
        it("should call the _executeCommand method with 'SelectedKeysCount'and pass it the correct arguments",function(){
            var promiseMock = {};

            facetFilterTOBehaviorUnderTest._executeCommand.returns(promiseMock);
            var res = facetFilterTOBehaviorUnderTest.getSelectedKeysCountFor("list1");
            assert.strictEqual(res,promiseMock);
            assert(facetFilterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["SelectedKeysCount", "list1"]);
        });
    });

    describe("getSelectedKeysCountFor list index",function() {
        it("should call the _executeCommand method with 'SelectedKeysCount'and pass it the correct arguments", function () {
            var promiseMock = {};

            facetFilterTOBehaviorUnderTest._executeCommand.returns(promiseMock);
            var res = facetFilterTOBehaviorUnderTest.getSelectedKeysCountFor(1);
            assert.strictEqual(res,promiseMock);
            assert(facetFilterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["SelectedKeysCount", "#2"]);
        });
    });

    describe("openDialog",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            facetFilterTOBehaviorUnderTest.openDialog();
            assert(facetFilterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["OpenDialog"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            facetFilterTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = facetFilterTOBehaviorUnderTest.openDialog();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("reset",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            facetFilterTOBehaviorUnderTest.reset();
            assert(facetFilterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["Reset"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            facetFilterTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = facetFilterTOBehaviorUnderTest.reset();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("remove", function(){
        it("should call Remove with string arg as is, when called with single string value", function() {
            facetFilterTOBehaviorUnderTest.remove("item1");
            assert(facetFilterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Remove", "item1"]);
        });
        it("should add prefix of '#' to numeric arg", function() {
            facetFilterTOBehaviorUnderTest.remove(8);
            assert(facetFilterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Remove", "#9"]);
        });
    });

    describe("open", function(){
        it("should call Open with string arg as is, when called with single string value", function() {
            facetFilterTOBehaviorUnderTest.open("item1");
            assert(facetFilterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Open", "item1"]);
        });
        it("should add prefix of '#' to numeric arg", function() {
            facetFilterTOBehaviorUnderTest.open(8);
            assert(facetFilterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Open", "#9"]);
        });
    });

    describe("filterBy", function(){
        it("should call FilterBy with string arg as is, when called with single string value", function() {
            facetFilterTOBehaviorUnderTest.filterBy("filter1", "key1");
            assert(facetFilterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,3), ["FilterBy", "filter1", "key1"]);
        });
        it("should add prefix of '#' to numeric arg", function() {
            facetFilterTOBehaviorUnderTest.filterBy(2, 1);
            assert(facetFilterTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,3), ["FilterBy", "#3", "#2"]);
        });
        it("should call Select with first arg passed and ExtendSelect for all other", function() {
            var promiseMock = {then: function(cb) {return cb();}};
            facetFilterTOBehaviorUnderTest._executeCommand.returns(promiseMock);
            facetFilterTOBehaviorUnderTest.filterBy("filter1", "key1", 8);
            //assert(facetFilterTOBehaviorUnderTest._executeCommand.calledTwice);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,3), ["FilterBy", "filter1", "key1"]);
            assert.deepEqual(facetFilterTOBehaviorUnderTest._executeCommand.secondCall.args.splice(0,3), ["ExtendFilterBy", "filter1", "#9"]);
        });
    });
});