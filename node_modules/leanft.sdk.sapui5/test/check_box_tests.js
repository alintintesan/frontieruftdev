// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/28/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("CheckBoxDescriptionBehavior",function(){
    var CheckBoxDesc = require("../lib/check_box.js").CheckBox;
    var checkBoxDescUnderTest;

    beforeEach(function(){
        checkBoxDescUnderTest = CheckBoxDesc();
    });

    describe("isChecked method",function() {
        it("should add 'state' with correct value when value is true",function(){
            checkBoxDescUnderTest.isChecked(true);
            assert.strictEqual(checkBoxDescUnderTest._properties["state"], "On");
        });
        it("should add 'state' with correct value when value is false",function(){
            checkBoxDescUnderTest.isChecked(false);
            assert.strictEqual(checkBoxDescUnderTest._properties["state"], "Off");
        });
        it("should add 'state' with correct value when value is 'true'",function(){
            checkBoxDescUnderTest.isChecked("true");
            assert.strictEqual(checkBoxDescUnderTest._properties["state"], "On");
        });
        it("should add 'state' with correct value when value is 'false'",function(){
            checkBoxDescUnderTest.isChecked("false");
            assert.strictEqual(checkBoxDescUnderTest._properties["state"], "Off");
        });
        it("should add 'state' with correct value when value is given using property bag",function(){
            checkBoxDescUnderTest = CheckBoxDesc({
                isChecked: true
            });
            assert.strictEqual(checkBoxDescUnderTest._properties["state"], "On");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = checkBoxDescUnderTest.isChecked(true);
            assert.strictEqual(result, checkBoxDescUnderTest);
        });
        it("should remove 'state' from _properties when value is null",function(){
            checkBoxDescUnderTest._properties["state"] = "On";
            checkBoxDescUnderTest.isChecked(null);
            assert(!("state" in checkBoxDescUnderTest._properties));
        });
        it("should return true when the value of 'state' is 'On' when value is not given",function(){
            checkBoxDescUnderTest._properties["state"] = "On";
            var isChecked = checkBoxDescUnderTest.isChecked();
            assert.equal(isChecked, true);
        });
        it("should return false when the value of 'state' is 'Off' when value is not given",function(){
            checkBoxDescUnderTest._properties["state"] = "Off";
            var isChecked = checkBoxDescUnderTest.isChecked();
            assert.equal(isChecked, false);
        });
        it("should return null when value is not given",function(){
            var isChecked = checkBoxDescUnderTest.isChecked();
            assert.equal(isChecked, null);
        });
    });

    describe("isEnabled method",function() {
        it("should add 'disabled' with correct value when value is true",function(){
            checkBoxDescUnderTest.isEnabled(true);
            assert.strictEqual(checkBoxDescUnderTest._properties["disabled"], false);
        });
        it("should add 'disabled' with correct value when value is false",function(){
            checkBoxDescUnderTest.isEnabled(false);
            assert.strictEqual(checkBoxDescUnderTest._properties["disabled"], true);
        });
        it("should add 'disabled' with correct value when value is 'true'",function(){
            checkBoxDescUnderTest.isEnabled("true");
            assert.strictEqual(checkBoxDescUnderTest._properties["disabled"], false);
        });
        it("should add 'disabled' with correct value when value is 'false'",function(){
            checkBoxDescUnderTest.isEnabled("false");
            assert.strictEqual(checkBoxDescUnderTest._properties["disabled"], true);
        });
        it("should add 'disabled' with correct value when value is given using property bag",function(){
            checkBoxDescUnderTest = CheckBoxDesc({
                isEnabled: true
            });
            assert.strictEqual(checkBoxDescUnderTest._properties["disabled"], false);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = checkBoxDescUnderTest.isEnabled(true);
            assert.strictEqual(result, checkBoxDescUnderTest);
        });
        it("should remove 'disabled' from _properties when value is null",function(){
            checkBoxDescUnderTest._properties["disabled"] = false;
            checkBoxDescUnderTest.isEnabled(null);
            assert(!("disabled" in checkBoxDescUnderTest._properties));
        });
        it("should return true when the value of 'disabled' is false when value is not given",function(){
            checkBoxDescUnderTest._properties["disabled"] = false;
            var isEnabled = checkBoxDescUnderTest.isEnabled();
            assert.equal(isEnabled, true);
        });
        it("should return false when the value of 'disabled' is true when value is not given",function(){
            checkBoxDescUnderTest._properties["disabled"] = true;
            var isEnabled = checkBoxDescUnderTest.isEnabled();
            assert.equal(isEnabled, false);
        });
        it("should return null when value is not given",function(){
            var isEnabled = checkBoxDescUnderTest.isEnabled();
            assert.equal(isEnabled, null);
        });
    });
});

describe("CheckBox Test Object Behavior",function(){
    var CheckBoxTO = require("../lib/check_box.js").CheckBoxTO;
    var checkBoxTOBehaviorUnderTest;

    beforeEach(function(){
        checkBoxTOBehaviorUnderTest = CheckBoxTO({});
        sinon.stub(checkBoxTOBehaviorUnderTest, "_getROProperty");
		
		checkBoxTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        checkBoxTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(checkBoxTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("isChecked",function(){
        it("should query the property 'state'",function(){
            var getROPromise = {
                then: function(cb) {
                    return cb("On");
                }
            };
            checkBoxTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            checkBoxTOBehaviorUnderTest.isChecked();
            assert(checkBoxTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(checkBoxTOBehaviorUnderTest._getROProperty.firstCall.args, ["state", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {
                then: function(cb) {
                    return cb("On");
                }
            };
            checkBoxTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = checkBoxTOBehaviorUnderTest.isChecked();
            assert.strictEqual(res, true);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {
                then: function(cb) {
                    return cb("Off");
                }
            };
            checkBoxTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = checkBoxTOBehaviorUnderTest.isChecked();
            assert.strictEqual(res, false);
        });
    });

    describe("isEnabled",function(){
        it("should query the property 'disabled'",function(){
            var getROPromise = {
                then: function(cb) {
                    return cb(false);
                }
            };
            checkBoxTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            checkBoxTOBehaviorUnderTest.isEnabled();
            assert(checkBoxTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(checkBoxTOBehaviorUnderTest._getROProperty.firstCall.args, ["disabled", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {
                then: function(cb) {
                    return cb(true);
                }
            };
            checkBoxTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = checkBoxTOBehaviorUnderTest.isEnabled();
            assert.strictEqual(res, false);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {
                then: function(cb) {
                    return cb(false);
                }
            };
            checkBoxTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = checkBoxTOBehaviorUnderTest.isEnabled();
            assert.strictEqual(res, true);
        });
    });

});