// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var assert = require("assert");
var sinon = require("sinon");

describe("NavigationBar Test Object Behavior",function(){
    var NavigationBarTO = require("../lib/navigation_bar.js").NavigationBarTO;
    var navigationBarTOBehaviorUnderTest;

    beforeEach(function(){
        navigationBarTOBehaviorUnderTest = NavigationBarTO({});
        sinon.stub(navigationBarTOBehaviorUnderTest, "_executeCommand");
		
		navigationBarTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        navigationBarTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(navigationBarTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("openMenu",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            navigationBarTOBehaviorUnderTest.openMenu();
            assert(navigationBarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(navigationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["OpenMenu"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            navigationBarTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = navigationBarTOBehaviorUnderTest.openMenu();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("select", function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            navigationBarTOBehaviorUnderTest.select("item1");
            assert(navigationBarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(navigationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Select","item1"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            navigationBarTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = navigationBarTOBehaviorUnderTest.select('item2');
            assert.strictEqual(res,getROPromise);
        });
    });
});