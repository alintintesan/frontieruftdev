// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created by 12/28/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("TreeViewDescriptionBehavior",function(){
    var TreeViewDesc = require("../lib/tree.js").TreeView;
    var treeViewDescUnderTest;

    beforeEach(function(){
        treeViewDescUnderTest = TreeViewDesc();
    });

    describe("visible nodes method",function() {
        it("should add 'all items' with correct value when a value is given",function(){
            treeViewDescUnderTest.visibleNodes(["male","female"]);
            assert.strictEqual(treeViewDescUnderTest._properties["all items"], "male;female");
        });
        it("should add 'all items' with correct value, when value is given using property bag",function(){
            treeViewDescUnderTest = TreeViewDesc({
                visibleNodes: ["male","female"]
            });
            assert.strictEqual(treeViewDescUnderTest._properties["all items"], "male;female");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = treeViewDescUnderTest.visibleNodes(["male","female"]);
            assert.strictEqual(result, treeViewDescUnderTest);
        });
        it("should remove 'all items' from _properties when value is null",function(){
            treeViewDescUnderTest._properties["all items"] = "male;female";
            treeViewDescUnderTest.visibleNodes(null);
            assert(!("all items" in treeViewDescUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties, when value is not given",function(){
            treeViewDescUnderTest._properties["all items"] = "male;female";
            var items = treeViewDescUnderTest.visibleNodes();
            assert.deepEqual(items, ["male","female"]);
        });
        it("should not modify property 'all items', upon get",function(){
            treeViewDescUnderTest._properties["all items"] = "male;female";
            treeViewDescUnderTest.visibleNodes();
            assert.strictEqual(treeViewDescUnderTest._properties["all items"], "male;female");
        });
        it("should return same value in get, when value is set",function(){
            treeViewDescUnderTest.visibleNodes(["male","female"]);
            var items = treeViewDescUnderTest.visibleNodes();
            assert.deepEqual(items, ["male","female"]);
        });
    });

    describe("selected node method",function() {
        it("should add 'selected item' with correct value when value is true",function(){
            treeViewDescUnderTest.selectedNode("some selected item");
            assert.strictEqual(treeViewDescUnderTest._properties["selected item"], "some selected item");
        });
        it("should add 'selected item' with correct value when value is given using property bag",function(){
            treeViewDescUnderTest = TreeViewDesc({
                selectedNode: "some selected item"
            });
            assert.strictEqual(treeViewDescUnderTest._properties["selected item"], "some selected item");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = treeViewDescUnderTest.selectedNode("some selected item");
            assert.strictEqual(result, treeViewDescUnderTest);
        });
        it("should remove 'selected item' from _properties when value is null",function(){
            treeViewDescUnderTest._properties["selected item"] = "some selected item";
            treeViewDescUnderTest.selectedNode(null);
            assert(!("selected item" in treeViewDescUnderTest._properties));
        });
        it("should return the value of 'selected item' from _properties when value is not given",function(){
            treeViewDescUnderTest._properties["selected item"] = "some selected item";
            var selectedItem = treeViewDescUnderTest.selectedNode();
            assert.strictEqual(selectedItem, "some selected item");
        });
    });

});

describe("TreeViewTOBehavior",function(){
    var TreeViewTO = require("../lib/tree.js").TreeTO;
    var treeViewTOBehaviorUnderTest;

    beforeEach(function(){
        treeViewTOBehaviorUnderTest = TreeViewTO({});
        sinon.stub(treeViewTOBehaviorUnderTest, "_getROProperty");
        sinon.stub(treeViewTOBehaviorUnderTest, "_executeCommand");
		
		treeViewTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        treeViewTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(treeViewTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("visible nodes",function(){
        it("should convert the returned string to array",function(){
            var promise = {
                then: function(cb){return cb("male;female");}
            };
            treeViewTOBehaviorUnderTest._getROProperty.returns(promise);
            var res = treeViewTOBehaviorUnderTest.visibleNodes();
            assert.deepEqual(res,["male","female"]);
        });
        it("should query the property 'all items'",function(){
            var promise  = {then: sinon.spy()};
            treeViewTOBehaviorUnderTest._getROProperty.returns(promise);
            treeViewTOBehaviorUnderTest.visibleNodes();
            assert(treeViewTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(treeViewTOBehaviorUnderTest._getROProperty.firstCall.args, ["all items", arguments]);
        });
    });

    describe("selectedNode",function(){
        it("should query the property 'selected item'",function(){
            treeViewTOBehaviorUnderTest.selectedNode();
            assert(treeViewTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(treeViewTOBehaviorUnderTest._getROProperty.firstCall.args, ["selected item", arguments]);
        });
        it("should return the same promise that was returned from _getROProperty",function(){
            var getROPromise = {};
            treeViewTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = treeViewTOBehaviorUnderTest.selectedNode();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("activate",function(){
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                treeViewTOBehaviorUnderTest.activate();
            });
        });
        it("should call the _executeCommand method and pass it string arg as is",function(){
            treeViewTOBehaviorUnderTest.activate("some name");
            assert(treeViewTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(treeViewTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Activate", "some name"]);
        });
        it("should throw error if non string arguments passed", function(){
            assert.throws(function(){
                treeViewTOBehaviorUnderTest.activate(3);
            });
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            treeViewTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = treeViewTOBehaviorUnderTest.activate("some name");
            assert.strictEqual(res,getROPromise);
        });
        it("should call the correct path returned from buildItemPath", function () {
            var path = treeViewTOBehaviorUnderTest.buildItemPath("node1", 0, "node3")

            treeViewTOBehaviorUnderTest.activate(path);
            assert(treeViewTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(treeViewTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Activate", "node1;#1;node3"]);
        });
    });

});