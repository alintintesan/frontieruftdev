// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/31/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var Web = require("leanft.sdk.web");

describe("RadioButton Description unit tests", function() {
    var RadioButton = require("../lib/radio_button.js").RadioButton;
    var radioButtonDescUnderTest;

    beforeEach(function() {
        radioButtonDescUnderTest = new RadioButton();
    });

    it("should have all keys of Web.Button", function() {
        var WebButtonDesc = Web.Button;
        var webButtonDesc = new WebButtonDesc();

        for(var webKey in webButtonDesc) {
            assert(webKey in radioButtonDescUnderTest, "key: " + webKey + " is missing in RadioButton");
        }
    });
});

describe("RadioButton Test Object Behavior",function(){
    var RadioButtonTO = require("../lib/radio_button.js").RadioButtonTO;
    var radioButtonTOBehaviorUnderTest;

    beforeEach(function(){
        radioButtonTOBehaviorUnderTest = RadioButtonTO({});
        sinon.stub(radioButtonTOBehaviorUnderTest, "_executeCommand");
		
		radioButtonTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        radioButtonTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(radioButtonTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    it("should have all keys of Web.Button", function() {
        var WebButtonTO = Web.ButtonTO;
        var webButtonTO = new WebButtonTO({});

        for(var webKey in webButtonTO) {
            assert(webKey in radioButtonTOBehaviorUnderTest, "key: " + webKey + " is missing in RadioButton");
        }
    });

    describe("set",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            radioButtonTOBehaviorUnderTest.set();
            assert(radioButtonTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(radioButtonTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["Select"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            radioButtonTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = radioButtonTOBehaviorUnderTest.set();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("activate",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            radioButtonTOBehaviorUnderTest.activate();
            assert(radioButtonTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(radioButtonTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["Activate"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            radioButtonTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = radioButtonTOBehaviorUnderTest.activate();
            assert.strictEqual(res,getROPromise);
        });
    });

});