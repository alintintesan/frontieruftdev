// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 01/20/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var BarState = require("../lib/notification_bar.js").BarState;
var MessageLevel = require("../lib/notification_bar.js").MessageLevel;

describe("NotificationBarDescriptionBehavior",function(){
    var NotificationBarDesc = require("../lib/notification_bar.js").NotificationBar;
    var notificationBarDescUnderTest;

    beforeEach(function(){
        notificationBarDescUnderTest = NotificationBarDesc();
    });

    describe("state method",function() {
        it("should add 'state' with the correct value",function(){
            notificationBarDescUnderTest.state(BarState.max);
            assert.strictEqual(notificationBarDescUnderTest._properties["state"], "Enlarged");
        });
        it("should throw exception if params is not valid",function(){
            assert.throws(function() {
                notificationBarDescUnderTest.state("max1");
            });
        });
        it("should add 'state' with correct value when value is given using property bag",function(){
            notificationBarDescUnderTest = NotificationBarDesc({
                state: BarState.max
            });
            assert.strictEqual(notificationBarDescUnderTest._properties["state"], "Enlarged");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = notificationBarDescUnderTest.state(BarState.max);
            assert.strictEqual(result, notificationBarDescUnderTest);
        });
        it("should set 'state' from _properties when value is null",function(){
            notificationBarDescUnderTest._properties["state"] = "Enlarged";
            notificationBarDescUnderTest.state(null);
            assert(!("state" in notificationBarDescUnderTest._properties));
        });
        it("should return the value of 'state' from _properties when value is not given",function(){
            notificationBarDescUnderTest._properties["state"] = "Enlarged";
            var barState = notificationBarDescUnderTest.state();
            assert.strictEqual(barState, BarState.max);
        });
    });

    describe("notifiersCount method",function() {
        it("should add 'notifiers count' with correct value when value is given",function(){
            notificationBarDescUnderTest.notifiersCount(2);
            assert.strictEqual(notificationBarDescUnderTest._properties["notifiers count"], 2);
        });
        it("should add 'notifiers count' with correct value when value is given using property bag",function(){
            notificationBarDescUnderTest = NotificationBarDesc({
                notifiersCount: 2
            });
            assert.strictEqual(notificationBarDescUnderTest._properties["notifiers count"], 2);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = notificationBarDescUnderTest.notifiersCount(2);
            assert.strictEqual(result, notificationBarDescUnderTest);
        });
        it("should remove 'notifiers count' from _properties when value is null",function(){
            notificationBarDescUnderTest._properties["notifiers count"] = 2;
            notificationBarDescUnderTest.notifiersCount(null);
            assert(!("notifiers count" in notificationBarDescUnderTest._properties));
        });
        it("should return the value of 'notifiers count' from _properties when value is not given",function(){
            notificationBarDescUnderTest._properties["notifiers count"] = 2;
            var notifiersCount = notificationBarDescUnderTest.notifiersCount();
            assert.equal(notifiersCount, 2);
        });
    });

    describe("isResizable method",function() {
        it("should add 'resizable' with the correct value",function(){
            notificationBarDescUnderTest.isResizable(true);
            assert.strictEqual(notificationBarDescUnderTest._properties['resizable'], true);
        });
        it("should add 'resizable' with correct value when value is given using property bag",function(){
            notificationBarDescUnderTest = NotificationBarDesc({
                isResizable: true
            });
            assert.strictEqual(notificationBarDescUnderTest._properties['resizable'], true);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = notificationBarDescUnderTest.isResizable(true);
            assert.strictEqual(result, notificationBarDescUnderTest);
        });
        it("should remove 'resizable' from _properties when value is null",function(){
            notificationBarDescUnderTest._properties['resizable'] = true;
            notificationBarDescUnderTest.isResizable(null);
            assert(!('resizable' in notificationBarDescUnderTest._properties));
        });
        it("should return the value of 'resizable' from _properties when value is not given",function(){
            notificationBarDescUnderTest._properties['resizable'] = true;
            var hasMore = notificationBarDescUnderTest.isResizable();
            assert.equal(hasMore, true);
        });
    });
});

describe("NotificationBarTOBehavior",function(){
    var NotificationBarTO = require("../lib/notification_bar.js").NotificationBarTO;
    var notificationBarTOBehaviorUnderTest;

    beforeEach(function(){
        notificationBarTOBehaviorUnderTest = NotificationBarTO({});

        notificationBarTOBehaviorUnderTest._executeCommand = sinon.stub();
        notificationBarTOBehaviorUnderTest._getROProperty = sinon.stub();
		
		notificationBarTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        notificationBarTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(notificationBarTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("notifications",function(){

        beforeEach(function(){
            var promise  = {then: function(cb) {return cb(6);}};
            notificationBarTOBehaviorUnderTest._getROProperty.returns(promise);

            var promiseExec  = {then: function(cb) {return cb(4);}};
            notificationBarTOBehaviorUnderTest._executeCommand.returns(promiseExec);
        });

        it("should return a proxy to a given notification in case notifier and notification index were provided and save them as one based",function(){
            var res = notificationBarTOBehaviorUnderTest.notifications(0,2);

            assert.strictEqual(res._notifierIndex,1);
            assert.strictEqual(res._notificationIndex,3);
        });

        describe("specific notification",function(){
            var notificationUnderTest;
            beforeEach(function(){
                notificationUnderTest = notificationBarTOBehaviorUnderTest.notifications(0,0);
            });

            describe("text",function(){
                it("should execute the command 'GetNotificationText' and provide the notification index",function(){
                    var promise  = {then: sinon.spy()};
                    notificationBarTOBehaviorUnderTest._executeCommand.returns(promise);

                    notificationUnderTest.text();

                    assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                    assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 3),["GetNotificationText",1,1]);
                });
            });

            describe("receivedTime",function(){
                it("should execute the command 'GetNotificationTimestamp' and provide the notification index and returns correct date",function(){
                    var promiseMock = {
                        then: function(cb) {
                            return cb("Sat, 25 Apr 2015 03:39:52 GMT");
                        }
                    };
                    notificationBarTOBehaviorUnderTest._executeCommand.returns(promiseMock);

                    var res = notificationUnderTest.receivedTime();

                    assert.strictEqual(25, res.getDate());

                    assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                    assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 3),["GetNotificationTimestamp",1,1]);
                });
            });

            describe("select",function(){
                it("should execute the command 'SelectNotification' and provide the notification index",function(){
                    var promise  = {then: sinon.spy()};
                    notificationBarTOBehaviorUnderTest._executeCommand.returns(promise);

                    notificationUnderTest.select();

                    assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                    assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 3),["SelectNotification",1,1]);
                });
            });
        });

        describe("a notifier of notifications", function() {
            beforeEach(function(){
                execiteCommandPromise = {
                    then: function(fullfill){
                        return fullfill.apply(this,this._callWithArgs);
                    },
                    _callWithArgs: [6]
                };
                getROPropertyPromise = {
                    then: function(fullfill){
                        return fullfill.apply(this,this._callWithArgs);
                    },
                    _callWithArgs: []
                };

                notificationBarTOBehaviorUnderTest._executeCommand.returns(execiteCommandPromise);
                notificationBarTOBehaviorUnderTest._getROProperty.returns(getROPropertyPromise);
            });

            it("should execute GetNotificationCountByIndex",function(){
                var notifications = notificationBarTOBehaviorUnderTest.notifications(0);
                assert.strictEqual(6, notifications.length)

                assert(notificationBarTOBehaviorUnderTest._getROProperty.notCalled);

                assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2),["GetNotificationCountByIndex",1]);

            });

            it("should throw exception if passed notifier index not less than 'notifiers count",function(){
                assert.throws(function(){
                    notificationBarTOBehaviorUnderTest.notifications(NotifiersCount);
                });

            });
        });

        //it("should query 'notifiers count' and execute multiple 'GetNotificationCountByIndex' according to notifiers count",function(){
        //    getROPropertyPromise = {
        //        then: function(fullfill){
        //            fullfill(6);
        //            return {
        //                then: sinon.stub()
        //            };
        //        }
        //    };
        //    execiteCommandPromise = {
        //        then: function(fullfill){
        //            return fullfill.apply(this,this._callWithArgs);
        //        },
        //        _callWithArgs: [4]
        //    };
        //
        //    notificationBarTOBehaviorUnderTest._executeCommand.returns(execiteCommandPromise);
        //    notificationBarTOBehaviorUnderTest._getROProperty.returns(getROPropertyPromise);
        //
        //    notificationBarTOBehaviorUnderTest.notifications().then(function(res){
        //        assert(notificationBarTOBehaviorUnderTest._getROProperty.calledOnce);
        //        assert.deepEqual(notificationBarTOBehaviorUnderTest._getROProperty.firstCall.args,["notifiers count", arguments]);
        //
        //        assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.callCount, 6);
        //        assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2),["GetNotificationCountByIndex",1]);
        //        assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.secondCall.args.slice(0, 2),["GetNotificationCountByIndex",2]);
        //    })
        //});
    });

    describe("messages", function() {

        it("should return a proxy to a given message if message index provided", function() {
            var message = notificationBarTOBehaviorUnderTest.messages(0);

            assert.strictEqual(message._messageIndex, 1);
        });

        describe("specific message", function(){
            var messageUnderTest;

            beforeEach(function() {
                messageUnderTest = notificationBarTOBehaviorUnderTest.messages(0);
            });

            it("text should execute 'GetMessageText'", function() {
                messageUnderTest.text();

                assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2),["GetMessageText", 1]);
            });

            it("receivedTime should execute 'GetMessageTimestamp'", function() {
                var promiseMock = {
                    then: function(cb) {
                        return cb("Sat, 25 Apr 2015 03:39:52 GMT");
                    }
                };
                notificationBarTOBehaviorUnderTest._executeCommand.returns(promiseMock);

                var date = messageUnderTest.receivedTime();

                assert.strictEqual(25, date.getDate());
                assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2),["GetMessageTimestamp", 1]);
            });

            it("level should execute 'GetMessageLevel'", function() {
                notificationBarTOBehaviorUnderTest._executeCommand.returns("Information");

                var level = messageUnderTest.level();

                assert.strictEqual(MessageLevel.information, level);

                assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2),["GetMessageLevel", 1]);
            });

            it("select method should execute 'SelectMessage'", function() {
                messageUnderTest.select();

                assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
                assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2),["SelectMessage", 1]);
            });
        });

        it("should return an array of all messages if no parameter provided", function() {
            execiteCommandPromise = {
                then: function(fullfill){
                    return fullfill.apply(this,this._callWithArgs);
                },
                _callWithArgs: [6]
            };
            getROPropertyPromise = {
                then: function(fullfill){
                    return fullfill.apply(this,this._callWithArgs);
                },
                _callWithArgs: [true]
            };

            notificationBarTOBehaviorUnderTest._executeCommand.returns(execiteCommandPromise);
            notificationBarTOBehaviorUnderTest._getROProperty.returns(getROPropertyPromise);

            var messages = notificationBarTOBehaviorUnderTest.messages();

            assert(notificationBarTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._getROProperty.firstCall.args,["has message notifier", arguments]);

            assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1),["GetMessageCount"]);

            assert.strictEqual(messages.length, 6);
        });

        it("should return empty array if 'has message notifier' is false", function() {
            getROPropertyPromise = {
                then: function(cb){
                    return cb.apply(this, [false]);
                }
            };

            notificationBarTOBehaviorUnderTest._getROProperty.returns(getROPropertyPromise);

            var messages = notificationBarTOBehaviorUnderTest.messages();

            assert(notificationBarTOBehaviorUnderTest._executeCommand.notCalled);
            assert.strictEqual(messages.length, 0);
        })
    });

    describe("state",function(){
        var promiseMock = {then: function(cb) {return cb("Enlarged");}};
        it("should query the property 'state'",function(){
            notificationBarTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = notificationBarTOBehaviorUnderTest.state();
            assert(notificationBarTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._getROProperty.firstCall.args,["state", arguments]);
        });
        it("should return the correct value according to that was returned from _getROProperty",function(){
            notificationBarTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = notificationBarTOBehaviorUnderTest.state();
            assert.strictEqual(res,BarState.max);
        });
    });

    describe("isResizable",function(){
        it("should query the property 'resizable'",function(){
            notificationBarTOBehaviorUnderTest.isResizable();
            assert(notificationBarTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._getROProperty.firstCall.args,["resizable", arguments]);
        });
        it("should return the correct promise according to that was returned from _getROProperty",function(){
            var promiseMock = {};
            notificationBarTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = notificationBarTOBehaviorUnderTest.isResizable();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("enlarge",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            notificationBarTOBehaviorUnderTest.enlarge();
            assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["Enlarge"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            notificationBarTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = notificationBarTOBehaviorUnderTest.enlarge();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("minimize",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            notificationBarTOBehaviorUnderTest.minimize();
            assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["Minimize"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            notificationBarTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = notificationBarTOBehaviorUnderTest.minimize();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("show",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            notificationBarTOBehaviorUnderTest.show();
            assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["Show"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            notificationBarTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = notificationBarTOBehaviorUnderTest.show();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("hide",function(){
        it("should call the _executeCommand method and pass it the correct arguments",function(){
            notificationBarTOBehaviorUnderTest.hide();
            assert(notificationBarTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(notificationBarTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 1), ["Hide"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            notificationBarTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = notificationBarTOBehaviorUnderTest.hide();
            assert.strictEqual(res,getROPromise);
        });
    });
});