// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 01/20/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var SelectType = require("../lib/list_box.js").SelectType;

describe("ListBoxDescriptionBehavior",function(){
    var ListBoxDesc = require("../lib/list_box.js").ListBox;
    var listBoxDescUnderTest;

    beforeEach(function(){
        listBoxDescUnderTest = ListBoxDesc();
    });

    describe("selectType method",function() {
        it("should add 'select type' with the correct value",function(){
            listBoxDescUnderTest.selectType(SelectType.singleSelection);
            assert.strictEqual(listBoxDescUnderTest._properties["select type"], "Single Selection");
        });
        it("should throw exception if params is not valid",function(){
            assert.throws(function() {
                listBoxDescUnderTest.selectType("Single Selection");
            });
        });
        it("should add 'select type' with correct value when value is given using property bag",function(){
            listBoxDescUnderTest = ListBoxDesc({
                selectType: SelectType.comboboxSelection
            });
            assert.strictEqual(listBoxDescUnderTest._properties["select type"], "Combobox Select");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = listBoxDescUnderTest.selectType(SelectType.extendedSelection);
            assert.strictEqual(result, listBoxDescUnderTest);
        });
        it("should set 'select type' from _properties when value is null",function(){
            listBoxDescUnderTest._properties["select type"] = "Extended Selection";
            listBoxDescUnderTest.selectType(null);
            assert(!("select type" in listBoxDescUnderTest._properties));
        });
        it("should return the value of 'select type' from _properties when value is not given",function(){
            listBoxDescUnderTest._properties["select type"] = "Single Selection";
            var selectType = listBoxDescUnderTest.selectType();
            assert.strictEqual(selectType, SelectType.singleSelection);
        });
    });
});

describe("ListBoxTOBehavior",function(){
    var ListBoxTO = require("../lib/list_box.js").ListBoxTO;
    var listBoxTOBehaviorUnderTest;

    beforeEach(function(){
        listBoxTOBehaviorUnderTest = ListBoxTO({});

        listBoxTOBehaviorUnderTest._executeCommand = sinon.stub();
        listBoxTOBehaviorUnderTest._getROProperty = sinon.stub();
        listBoxTOBehaviorUnderTest._getROProperties = sinon.stub();
        listBoxTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        listBoxTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(listBoxTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("items",function(){
        it("should convert the returned string to array",function(){
            var promise = {
                then: function(cb){return cb("male;female");}
            };
            listBoxTOBehaviorUnderTest._getROProperty.returns(promise);
            var res = listBoxTOBehaviorUnderTest.items();
            assert.deepEqual(res,["male","female"]);
        });
        it("should query the property 'all items'",function(){
            var promise  = {then: sinon.spy()};
            listBoxTOBehaviorUnderTest._getROProperty.returns(promise);
            listBoxTOBehaviorUnderTest.items();
            assert(listBoxTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(listBoxTOBehaviorUnderTest._getROProperty.firstCall.args, ["all items", arguments]);
        });
    });

    describe("selectType",function(){
        var promiseMock = {then: function(cb) {return cb("Single Selection");}};
        it("should query the property 'select type'",function(){
            listBoxTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = listBoxTOBehaviorUnderTest.selectType();
            assert(listBoxTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(listBoxTOBehaviorUnderTest._getROProperty.firstCall.args,["select type", arguments]);
        });
        it("should return the correct promise according to that was returned from _getROProperty",function(){
            listBoxTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = listBoxTOBehaviorUnderTest.selectType();
            assert.strictEqual(res,SelectType.singleSelection);
        });
    });

    describe("isMultiple",function(){
        var promiseMock = {then: function(cb) {return cb("Extended Selection");}};
        it("should query the property 'select type'",function(){
            listBoxTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            listBoxTOBehaviorUnderTest.isMultiple();
            assert(listBoxTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(listBoxTOBehaviorUnderTest._getROProperty.firstCall.args,["select type", arguments]);
        });
        it("should return the correct promise according to that was returned from _getROProperty",function(){
            listBoxTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = listBoxTOBehaviorUnderTest.isMultiple();
            assert.strictEqual(res, true);
        });
    });

    describe("selectedItems",function(){
        var promiseMock = {then: function(cb) {return cb(["1;3","item1;item2;item3"]);}};
        it("should query the properties 'selected item index', 'all items'",function(){
            listBoxTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            listBoxTOBehaviorUnderTest.selectedItems();
            assert(listBoxTOBehaviorUnderTest._getROProperties.calledOnce);
            assert.deepEqual(listBoxTOBehaviorUnderTest._getROProperties.firstCall.args,["selected item index","all items"]);
        });
        it("should split the string returned by the promise with delimiter: ';'",function(){
            listBoxTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            var res = listBoxTOBehaviorUnderTest.selectedItems();
            assert.deepEqual(res,["item1", "item3"]);
        });
        it("should return the only item when only one item selected",function(){
            var promiseMock = {then: function(cb) {return cb(["1","item1;item2;item3"]);}};
            listBoxTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            var res = listBoxTOBehaviorUnderTest.selectedItems();
            assert.deepEqual(res,["item1"]);
        });
        it("should return empty array [] instead undefined when no item selected",function(){
            var promiseMock = {then: function(cb) {return cb(["","item1;item2;item3"]);}};
            listBoxTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            var res = listBoxTOBehaviorUnderTest.selectedItems();
            assert.deepEqual(0, res.length);
        });
    });

    describe("deselect", function(){
        it("should call ExtendDeselect with string arg as is, when called with single string value", function() {
            listBoxTOBehaviorUnderTest.deselect("item1");
            assert(listBoxTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(listBoxTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,2), ["ExtendDeselect", "item1"]);
        });
        it("should add prefix of '#' to numeric arg", function() {
            listBoxTOBehaviorUnderTest.deselect(8);
            assert(listBoxTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(listBoxTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,2), ["ExtendDeselect", "#9"]);
        });
        it("should call ExtendDeselect with for all passed items", function() {
            var promiseMock = {then: function(cb) {return cb();}};
            listBoxTOBehaviorUnderTest._executeCommand.returns(promiseMock);
            listBoxTOBehaviorUnderTest.deselect("item1", 8);
            assert(listBoxTOBehaviorUnderTest._executeCommand.calledTwice);
            assert.deepEqual(listBoxTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0,2), ["ExtendDeselect", "item1"]);
            assert.deepEqual(listBoxTOBehaviorUnderTest._executeCommand.secondCall.args.splice(0,2), ["ExtendDeselect", "#9"]);
        });
    });

    describe("set", function(){
        it("should call Set with string arg as is, when called with single string value", function() {
            listBoxTOBehaviorUnderTest.set("value1");
            assert(listBoxTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(listBoxTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["Set", "value1"]);
        });
    });

    describe("setItemData", function(){
        it("should call SetItemData with string arg as is, when called with item name and value", function() {
            listBoxTOBehaviorUnderTest.setItemData("item1", "value1");
            assert(listBoxTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(listBoxTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 3), ["SetItemData", "item1", "value1"]);
        });
        it("should add prefix of '#' to numeric arg, when called with item index and value", function() {
            listBoxTOBehaviorUnderTest.setItemData(8, "value1");
            assert(listBoxTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(listBoxTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 3), ["SetItemData", "#9", "value1"]);
        });
    });

    describe("filterByDate",function(){
        it("should call the _executeCommand method and pass it the correct arguments format 'yyyyMMdd'",function(){
            listBoxTOBehaviorUnderTest.filterByDate(new Date("2016-02-01"));
            assert(listBoxTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(listBoxTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["FilterByDate","20160201"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            listBoxTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = listBoxTOBehaviorUnderTest.filterByDate(new Date("2016-02-01"));
            assert.strictEqual(res,getROPromise);
        });
        it("should throw exception if parameter is not Date object",function(){
            assert.throws(function() {
                listBoxTOBehaviorUnderTest.filterByDate("2016-02-01");
            });
        });
    });

    describe("singleSelect", function(){
        it("should call SingleSelect with string arg as is, when called with item name and value", function() {
            listBoxTOBehaviorUnderTest.singleSelect("item1");
            assert(listBoxTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(listBoxTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["SingleSelect", "item1"]);
        });
        it("should add prefix of '#' to numeric arg, when called with item index and value", function() {
            listBoxTOBehaviorUnderTest.singleSelect(8);
            assert(listBoxTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(listBoxTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0, 2), ["SingleSelect", "#9"]);
        });
    });
});