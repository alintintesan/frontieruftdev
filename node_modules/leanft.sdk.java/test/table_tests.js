// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/31/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var MouseButton = Core.MouseButton;

describe("Table Description", function () {
    var Table = require("../lib/table.js").Table;
    var tableDescriptionUnderTest;

    beforeEach(function () {
        tableDescriptionUnderTest = Table();
    });

    describe("Constructor", function () {
        it("should assign 'Java' and 'Table' LeanFT type", function () {
            tableDescriptionUnderTest = new Table();
            assert.deepEqual(tableDescriptionUnderTest.leanFTType, {
                technology: "Java",
                leanftType: "Table"
            });
        });
    });

    describe("columnsCount", function () {
        var columnsCount = 50;
        it("should add 'cols' to _properties when value is given", function () {
            tableDescriptionUnderTest.columnsCount(columnsCount);
            assert.strictEqual(tableDescriptionUnderTest._properties["cols"], columnsCount);
        });

        it("should add 'cols' to _properties when value is given in string", function () {
            tableDescriptionUnderTest.columnsCount(columnsCount.toString());
            assert.strictEqual(tableDescriptionUnderTest._properties["cols"], columnsCount);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tableDescriptionUnderTest.columnsCount(columnsCount);
            assert.strictEqual(result, tableDescriptionUnderTest);
        });

        it("should remove 'cols' from _properties when value is null", function () {
            tableDescriptionUnderTest._properties["cols"] = columnsCount;
            tableDescriptionUnderTest.columnsCount(null);
            assert(!("cols" in tableDescriptionUnderTest._properties));
        });

        it("should return the value of 'cols' from _properties when value is not given", function () {
            tableDescriptionUnderTest._properties["cols"] = columnsCount;
            var result = tableDescriptionUnderTest.columnsCount();
            assert.strictEqual(result, columnsCount);
        });
    });

    describe("rowsCount", function () {
        var rowsCount = 50;
        it("should add 'rows' to _properties when value is given", function () {
            tableDescriptionUnderTest.rowsCount(rowsCount);
            assert.strictEqual(tableDescriptionUnderTest._properties["rows"], rowsCount);
        });

        it("should add 'rows' to _properties when value is given in string", function () {
            tableDescriptionUnderTest.rowsCount(rowsCount.toString());
            assert.strictEqual(tableDescriptionUnderTest._properties["rows"], rowsCount);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tableDescriptionUnderTest.rowsCount(rowsCount);
            assert.strictEqual(result, tableDescriptionUnderTest);
        });

        it("should remove 'rows' from _properties when value is null", function () {
            tableDescriptionUnderTest._properties["rows"] = rowsCount;
            tableDescriptionUnderTest.rowsCount(null);
            assert(!("rows" in tableDescriptionUnderTest._properties));
        });

        it("should return the value of 'rows' from _properties when value is not given", function () {
            tableDescriptionUnderTest._properties["rows"] = rowsCount;
            var result = tableDescriptionUnderTest.rowsCount();
            assert.strictEqual(result, rowsCount);
        });
    });

    describe("columnHeaders", function () {
        var columnHeaders = ["colHeader1", "colHeader2"];
        it("should add 'column_names' to _properties when value is given", function () {
            tableDescriptionUnderTest.columnHeaders(columnHeaders);
            assert.strictEqual(tableDescriptionUnderTest._properties["column_names"], columnHeaders.join(";"));
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tableDescriptionUnderTest.columnHeaders(columnHeaders);
            assert.strictEqual(result, tableDescriptionUnderTest);
        });

        it("should remove 'column_names' from _properties when value is null", function () {
            tableDescriptionUnderTest._properties["column_names"] = columnHeaders;
            tableDescriptionUnderTest.columnHeaders(null);
            assert(!("column_names" in tableDescriptionUnderTest._properties));
        });

        it("should return the value of 'column_names' from _properties when value is not given", function () {
            tableDescriptionUnderTest._properties["column_names"] = columnHeaders.join(";");
            var result = tableDescriptionUnderTest.columnHeaders();
            assert.deepEqual(result, columnHeaders);
        });
    });
});

describe("Table Test Object", function () {
    var TableTO = require("../lib/table.js").TableTO;
    var TableKeyModifier = require("../lib/table.js").TableKeyModifier;
    var tableTestObjectUnderTest;

    beforeEach(function () {
        tableTestObjectUnderTest = new TableTO();
        sinon.stub(tableTestObjectUnderTest, "_getROProperty");
        sinon.stub(tableTestObjectUnderTest, "_executeNotWrapped");
        sinon.stub(tableTestObjectUnderTest, "_executeWithEvents");
        sinon.stub(tableTestObjectUnderTest, "_executeOnItemsCollection");
        sinon.stub(tableTestObjectUnderTest, "_executeSingleOpOnCollection");
    });

    describe("columnHeaders method", function () {
        var columnHeaders = "colHeader1;colHeader2";
        var promiseMock = {
            then: function (cb) {
                return cb(columnHeaders);
            }
        };
        it("should execute _getROProperty 'column_names'", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            tableTestObjectUnderTest.columnHeaders();
            sinon.assert.calledOnce(tableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tableTestObjectUnderTest._getROProperty, "column_names", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = tableTestObjectUnderTest.columnHeaders();
            assert.deepEqual(res, columnHeaders.split(";"));
        });
    });

    describe("activateCell method", function () {
        it("should execute command 'ActivateCell' if the 'row' parameter is an index", function () {
            tableTestObjectUnderTest.activateCell(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: 0
            }), "ActivateCell", 0, 0);
        });

        it("should execute command 'ActivateCell' if the 'row' parameter is an index string", function () {
            tableTestObjectUnderTest.activateCell("0", 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0",
                1: 0
            }), "ActivateCell", 0, 0);
        });

        it("should execute command 'ActivateCell' if the 'columnOrIndex' parameter is the header of a column", function () {
            tableTestObjectUnderTest.activateCell(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: "col header"
            }), "ActivateCell", 0, "col header");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.activateCell(0, 0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.activateCell(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.activateCell();
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.activateCell(0, null);
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.activateCell(0);
            });
        });
    });

    describe("activateColumn method", function () {
        it("should execute command 'ActivateColumn' if the 'columnOrIndex' parameter is an index", function () {
            tableTestObjectUnderTest.activateColumn(0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0
            }), "ActivateColumn", 0);
        });

        it("should execute command 'ActivateColumn' if the 'columnOrIndex' parameter is the header of a column", function () {
            tableTestObjectUnderTest.activateColumn("col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "col header"
            }), "ActivateColumn", "col header");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.activateColumn(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'columnOrIndex' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.activateColumn(null);
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.activateColumn();
            });
        });
    });

    describe("activateRow method", function () {
        it("should execute command 'ActivateRow' if the 'row' parameter is an index", function () {
            tableTestObjectUnderTest.activateRow(0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0
            }), "ActivateRow", 0);
        });

        it("should execute command 'ActivateRow' if the 'row' parameter is the header of a column", function () {
            tableTestObjectUnderTest.activateRow("0");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0"
            }), "ActivateRow", 0);
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.activateRow(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.activateRow(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.activateRow();
            });
        });
    });

    describe("deselectColumns method", function () {
        it("should execute command 'DeselectColumn' if the 'columnsOrIndices' parameter are indices", function () {
            tableTestObjectUnderTest.deselectColumns(0, 3, 7);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeSingleOpOnCollection, sinon.match({
                0: 0, 1: 3, 2: 7
            }), "DeselectColumn", [0, 3, 7]);
        });

        it("should execute command 'DeselectColumn' if the 'columnsOrIndices' parameter are the headers of the columns", function () {
            tableTestObjectUnderTest.deselectColumns("col header1", "col header2");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeSingleOpOnCollection, sinon.match({
                0: "col header1",
                1: "col header2"
            }), "DeselectColumn", ["col header1", "col header2"]);
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeSingleOpOnCollection.returns(promiseMock);
            var res = tableTestObjectUnderTest.deselectColumns(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.deselectColumns(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.deselectColumns();
            });
        });
    });

    describe("deselectColumnsRange method", function () {
        it("should execute command 'DeselectColumnsRange' if the parameters are indices", function () {
            tableTestObjectUnderTest.deselectColumnsRange(0, 3);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0, 1: 3
            }), "DeselectColumnsRange", 0, 3);
        });

        it("should execute command 'DeselectColumnsRange' if the parameters are the headers of the columns", function () {
            tableTestObjectUnderTest.deselectColumnsRange("col header1", "col header3");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "col header1",
                1: "col header3"
            }), "DeselectColumnsRange", "col header1", "col header3");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.deselectColumnsRange(0, 2);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'fromColumnOrIndex' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.deselectColumnsRange(null);
            });
        });

        it("should throw error if the 'fromColumnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.deselectColumnsRange();
            });
        });

        it("should throw error if the 'toColumnOrIndex' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.deselectColumnsRange(0, null);
            });
        });

        it("should throw error if the 'toColumnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.deselectColumnsRange(0);
            });
        });
    });

    describe("deselectRows method", function () {
        it("should execute command 'DeselectRow' if the 'rows' parameter are indices", function () {
            tableTestObjectUnderTest.deselectRows(0, 3, 7);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeSingleOpOnCollection, sinon.match({
                0: 0, 1: 3, 2: 7
            }), "DeselectRow", [0, 3, 7]);
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeSingleOpOnCollection.returns(promiseMock);
            var res = tableTestObjectUnderTest.deselectRows(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.deselectRows(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.deselectRows();
            });
        });
    });

    describe("deselectRowsRange method", function () {
        it("should execute command 'DeselectRowsRange' if the parameters are indices", function () {
            tableTestObjectUnderTest.deselectRowsRange(0, 3);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0, 1: 3
            }), "DeselectRowsRange", 0, 3);
        });

        it("should execute command 'DeselectRowsRange' if the parameters are index strings", function () {
            tableTestObjectUnderTest.deselectRowsRange("0", "3");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0",
                1: "3"
            }), "DeselectRowsRange", 0, 3);
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.deselectRowsRange(0, 2);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'fromRow' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.deselectRowsRange(null);
            });
        });

        it("should throw error if the 'fromRow' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.deselectRowsRange();
            });
        });

        it("should throw error if the 'toRow' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.deselectRowsRange(0, null);
            });
        });

        it("should throw error if the 'toRow' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.deselectRowsRange(0);
            });
        });
    });

    describe("selectCell method", function () {
        it("should execute command 'SelectCell' if the 'row' parameter is an index", function () {
            tableTestObjectUnderTest.selectCell(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: 0
            }), "SelectCell", 0, 0);
        });

        it("should execute command 'SelectCell' if the 'row' parameter is an index string", function () {
            tableTestObjectUnderTest.selectCell("0", 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0",
                1: 0
            }), "SelectCell", 0, 0);
        });

        it("should execute command 'SelectCell' if the 'columnOrIndex' parameter is the header of a column", function () {
            tableTestObjectUnderTest.selectCell(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: "col header"
            }), "SelectCell", 0, "col header");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.selectCell(0, 0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCell(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCell();
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCell(0, null);
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCell(0);
            });
        });
    });

    describe("selectCellRange method", function () {
        it("should execute command 'SelectCellsRange' if the parameters are indices", function () {
            tableTestObjectUnderTest.selectCellRange(0, 0, 2, 3);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: 0,
                2: 2,
                3: 3
            }), "SelectCellsRange", 0, 0, 2, 3);
        });

        it("should execute command 'SelectCellsRange' if the 'fromRow' and 'toRow' parameters are index strings", function () {
            tableTestObjectUnderTest.selectCellRange("0", 0, "2", 3);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0",
                1: 0,
                2: "2",
                3: 3
            }), "SelectCellsRange", 0, 0, 2, 3);
        });

        it("should execute command 'SelectCellsRange' if the 'fromColumnOrIndex' and toColumnOrIndex parameters are the headers of the columns", function () {
            tableTestObjectUnderTest.selectCellRange(0, "col header1", 2, "col header3");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: "col header1",
                2: 2,
                3: "col header3"
            }), "SelectCellsRange", 0, "col header1", 2, "col header3");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.selectCellRange(0, 0, 2, 3);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'fromRow' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCellRange(null, 0, 2, 3);
            });
        });

        it("should throw error if the 'fromRow' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCellRange(undefined, 0, 2, 3);
            });
        });

        it("should throw error if the 'fromColumnOrIndex' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCellRange(0, null, 2, 3);
            });
        });

        it("should throw error if the 'fromColumnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCellRange(0, undefined, 2, 3);
            });
        });

        it("should throw error if the 'toRow' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCellRange(0, 0, null, 3);
            });
        });

        it("should throw error if the 'toRow' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCellRange(0, 0, undefined, 3);
            });
        });

        it("should throw error if the 'toColumnOrIndex' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCellRange(0, 0, 2, null);
            });
        });

        it("should throw error if the 'toColumnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCellRange(0, 0, 2);
            });
        });
    });

    describe("selectColumns method", function () {
        it("should execute command 'SelectColumn' and 'ExtendColumn' if the 'columnsOrIndices' parameter are indices", function () {
            tableTestObjectUnderTest.selectColumns(0, 3, 7);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeOnItemsCollection, sinon.match({
                0: 0,
                1: 3,
                2: 7
            }), "SelectColumn", "ExtendColumn", [0, 3, 7]);
        });

        it("should execute command 'SelectColumn' and 'ExtendColumn'  if the 'columnsOrIndices' parameter are the headers of the columns", function () {
            tableTestObjectUnderTest.selectColumns("col header1", "col header2");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeOnItemsCollection, sinon.match({
                0: "col header1",
                1: "col header2"
            }), "SelectColumn", "ExtendColumn", ["col header1", "col header2"]);
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeOnItemsCollection.returns(promiseMock);
            var res = tableTestObjectUnderTest.selectColumns(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectColumns(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectColumns();
            });
        });
    });

    describe("selectColumnsRange method", function () {
        it("should execute command 'SelectColumnsRange' if the parameters are indices", function () {
            tableTestObjectUnderTest.selectColumnsRange(0, 3);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({}), "SelectColumnsRange", 0, 3);
        });

        it("should execute command 'SelectColumnsRange' if the parameters are the headers of the columns", function () {
            tableTestObjectUnderTest.selectColumnsRange("col header1", "col header3");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "col header1",
                1: "col header3"
            }), "SelectColumnsRange", "col header1", "col header3");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.selectColumnsRange(0, 2);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'fromColumnOrIndex' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectColumnsRange(null);
            });
        });

        it("should throw error if the 'fromColumnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectColumnsRange();
            });
        });

        it("should throw error if the 'toColumnOrIndex' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectColumnsRange(0, null);
            });
        });

        it("should throw error if the 'toColumnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectColumnsRange(0);
            });
        });
    });

    describe("selectColumnHeader method", function () {
        it("should execute command 'SelectColumnHeader' if the 'columnOrIndex' parameter is index", function () {
            tableTestObjectUnderTest.selectColumnHeader(0, MouseButton.left);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: MouseButton.left
            }), "SelectColumnHeader", 0, "LEFT");
        });

        it("should execute command 'SelectColumnHeader' if the 'columnOrIndex' parameter is the header of the column", function () {
            tableTestObjectUnderTest.selectColumnHeader("col header", MouseButton.left);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "col header",
                1: MouseButton.left
            }), "SelectColumnHeader", "col header", "LEFT");
        });

        it("should execute command 'SelectColumnHeader' with the LEFT mouse button if the 'button' parameter is not passed", function () {
            tableTestObjectUnderTest.selectColumnHeader(0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({0: 0}), "SelectColumnHeader", 0, "LEFT");
        });

        it("should execute command 'SelectColumnHeader' if the mouse button is the RIGHT button", function () {
            tableTestObjectUnderTest.selectColumnHeader(0, MouseButton.right);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: MouseButton.right
            }), "SelectColumnHeader", 0, "RIGHT");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.selectColumnHeader(0, MouseButton.left);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'columnOrIndex' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectColumnHeader(null);
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectColumnHeader();
            });
        });
    });

    describe("selectRows method", function () {
        it("should execute command 'SelectRow' and 'ExtendRow' if the 'columnsOrIndices' parameter are indices", function () {
            tableTestObjectUnderTest.selectRows(0, 3, 7);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeOnItemsCollection, sinon.match({
                0: 0,
                1: 3,
                2: 7
            }), "SelectRow", "ExtendRow", [0, 3, 7]);
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeOnItemsCollection.returns(promiseMock);
            var res = tableTestObjectUnderTest.selectRows(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectRows(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectRows();
            });
        });
    });

    describe("selectRowsRange method", function () {
        it("should execute command 'SelectRowsRange' if the parameters are indices", function () {
            tableTestObjectUnderTest.selectRowsRange(0, 3);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0, 1: 3
            }), "SelectRowsRange", 0, 3);
        });

        it("should execute command 'SelectRowsRange' if the parameters are index strings", function () {
            tableTestObjectUnderTest.selectRowsRange("0", "3");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0",
                1: "3"
            }), "SelectRowsRange", 0, 3);
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.selectRowsRange(0, 2);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'fromRow' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectRowsRange(null);
            });
        });

        it("should throw error if the 'fromRow' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectRowsRange();
            });
        });

        it("should throw error if the 'toRow' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectRowsRange(0, null);
            });
        });

        it("should throw error if the 'toRow' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectRowsRange(0);
            });
        });
    });

    describe("_getRowsCount method", function () {
        var rowsCount = 2;
        var promiseMock = {
            then: function (cb) {
                return cb(rowsCount.toString());
            }
        };
        it("should execute _getROProperty 'rows'", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            tableTestObjectUnderTest._getRowsCount();
            sinon.assert.calledOnce(tableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tableTestObjectUnderTest._getROProperty, "rows", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = tableTestObjectUnderTest._getRowsCount();
            assert.strictEqual(res, rowsCount);
        });
    });

    describe("_getCellValue method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._getCellValue(0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetCellData' if the parameters are indices", function () {
            tableTestObjectUnderTest._getCellValue(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "GetCellData", 0, 0);
        });

        it("should execute _executeNotWrapped 'GetCellData' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._getCellValue(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header"
            }), "GetCellData", 0, "col header");
        });
    });

    describe("_setCellValue method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._setCellValue(0, 0, "some value");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'SetCellData' if the parameters are indices", function () {
            tableTestObjectUnderTest._setCellValue(0, 0, "some value");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: "some value"
            }), "SetCellData", 0, 0, "some value");
        });

        it("should execute _executeNotWrapped 'SetCellData' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._setCellValue(0, "col header", "some value");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header",
                2: "some value"
            }), "SetCellData", 0, "col header", "some value");
        });
    });

    describe("_getColumnHeader method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._getColumnHeader(0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetColumnName' if the parameters are indices", function () {
            tableTestObjectUnderTest._getColumnHeader(0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0
            }), "GetColumnName", 0);
        });

        it("should execute _executeNotWrapped 'GetColumnName' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._getColumnHeader("col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: "col header"
            }), "GetColumnName", "col header");
        });
    });

    describe("_clickCell method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._clickCell(0, 0, MouseButton.left);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'ClickCell' if the parameters are indices", function () {
            tableTestObjectUnderTest._clickCell(0, 0, MouseButton.left);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: MouseButton.left
            }), "ClickCell", 0, 0, "LEFT");
        });

        it("should execute _executeNotWrapped 'ClickCell' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._clickCell(0, "col header", MouseButton.left);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header",
                2: MouseButton.left
            }), "ClickCell", 0, "col header", "LEFT");
        });

        it("should execute _executeNotWrapped 'ClickCell' with the LEFT mouse button if the 'button' parameter is not passed", function () {
            tableTestObjectUnderTest._clickCell(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
            }), "ClickCell", 0, 0, "LEFT");
        });

        it("should execute _executeNotWrapped 'ClickCell' with modifier if the 'modifier' parameter is passed", function () {
            tableTestObjectUnderTest._clickCell(0, 0, MouseButton.left, TableKeyModifier.control);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: MouseButton.left,
                3: TableKeyModifier.control
            }), "ClickCell", 0, 0, "LEFT", "CONTROL");
        });

        it("should throw error if the modifier is not supported", function () {
            assert.throws(function () {
                tableTestObjectUnderTest._clickCell(0, 0, MouseButton.left, "a modifier");
            });
        });
    });

    describe("_doubleClickCell method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._doubleClickCell(0, 0, MouseButton.left);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'DoubleClickCell' if the parameters are indices", function () {
            tableTestObjectUnderTest._doubleClickCell(0, 0, MouseButton.left);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: MouseButton.left
            }), "DoubleClickCell", 0, 0, "LEFT");
        });

        it("should execute _executeNotWrapped 'DoubleClickCell' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._doubleClickCell(0, "col header", MouseButton.left);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header",
                2: MouseButton.left
            }), "DoubleClickCell", 0, "col header", "LEFT");
        });

        it("should execute _executeNotWrapped 'DoubleClickCell' with the LEFT mouse button if the 'button' parameter is not passed", function () {
            tableTestObjectUnderTest._doubleClickCell(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
            }), "DoubleClickCell", 0, 0, "LEFT");
        });

        it("should execute _executeNotWrapped 'DoubleClickCell' with modifier if the 'modifier' parameter is passed", function () {
            tableTestObjectUnderTest._doubleClickCell(0, 0, MouseButton.left, TableKeyModifier.control);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: MouseButton.left,
                3: TableKeyModifier.control
            }), "DoubleClickCell", 0, 0, "LEFT", "CONTROL");
        });

        it("should throw error if the modifier is not supported", function () {
            assert.throws(function () {
                tableTestObjectUnderTest._doubleClickCell(0, 0, MouseButton.left, "a modifier");
            });
        });
    });

    describe("_dragAndDropOn method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._dragAndDropOn(0, 0, 1, 1, MouseButton.left);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Drag' if the parameters are indices", function () {
            tableTestObjectUnderTest._dragAndDropOn(0, 0, 1, 1, MouseButton.left);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: 1,
                3: 1,
                4: MouseButton.left
            }), "Drag", 0, 0, 1, 1, "LEFT");
        });

        it("should execute _executeNotWrapped 'Drag' if the column identifiers are the headers", function () {
            tableTestObjectUnderTest._dragAndDropOn(0, "col header", 1, "col header 1", MouseButton.left);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header",
                2: 1,
                3: "col header 1",
                4: MouseButton.left
            }), "Drag", 0, "col header", 1, "col header 1", "LEFT");
        });

        it("should execute _executeNotWrapped 'Drag' with the LEFT mouse button if the 'button' parameter is not passed", function () {
            tableTestObjectUnderTest._dragAndDropOn(0, 0, 1, 1);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: 1,
                3: 1
            }), "Drag", 0, 0, 1, 1, "LEFT");
        });

        it("should execute _executeNotWrapped 'Drag' with modifier if the 'modifier' parameter is passed", function () {
            tableTestObjectUnderTest._dragAndDropOn(0, 0, 1, 1, MouseButton.left, TableKeyModifier.control);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: 1,
                3: 1,
                4: MouseButton.left,
                5: TableKeyModifier.control
            }), "Drag", 0, 0, 1, 1, "LEFT", "CONTROL");
        });

        it("should throw error if the modifier is not supported", function () {
            assert.throws(function () {
                tableTestObjectUnderTest._dragAndDropOn(0, 0, 1, 1, MouseButton.left, "a modifier");
            });
        });
    });

    describe("_getRowAndColumnCount method", function () {
        beforeEach(function () {
            sinon.stub(tableTestObjectUnderTest, "_getROProperties");
            var executionPromise = {
                then: function (cb) {
                    return cb(["4", "6"]);
                }
            };
            tableTestObjectUnderTest._getROProperties.returns(executionPromise);
        });

        it("should exectute command '_getROProperties'", function () {
            tableTestObjectUnderTest._getRowAndColumnCount();
            sinon.assert.calledOnce(tableTestObjectUnderTest._getROProperties);
            sinon.assert.calledWith(tableTestObjectUnderTest._getROProperties, "rows", "cols");
        });

        it("should return rowCount and columnCount", function () {
            var res = tableTestObjectUnderTest._getRowAndColumnCount();
            assert.deepEqual(res, {rowCount: 4, columnCount: 6});
        });
    });

    describe("_getColumnCount method", function () {
        var columnCount = 6;
        var promiseMock = {
            then: function (cb) {
                return cb(columnCount.toString());
            }
        };
        it("should execute _getROProperty 'cols'", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            tableTestObjectUnderTest._getColumnCount();
            sinon.assert.calledOnce(tableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tableTestObjectUnderTest._getROProperty, "cols", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = tableTestObjectUnderTest._getColumnCount();
            assert.strictEqual(res, columnCount);
        });
    });

    describe("_createItem method", function () {
        it("should return the TableCell with correct values", function () {
            var res = tableTestObjectUnderTest._createCell(0, 0);
            assert.strictEqual(res._rowIdentifier, 0);
            assert.strictEqual(res._columnIdentifier, 0);
            assert.deepEqual(res._ownerTable, tableTestObjectUnderTest);
        });
    });

    describe("extendSelectColumns method", function () {
        it("should execute command 'ExtendColumn' if the 'columnsOrIndices' parameter are indices", function () {
            tableTestObjectUnderTest.extendSelectColumns(0, 3, 7);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeOnItemsCollection, sinon.match({
                0: 0,
                1: 3,
                2: 7
            }), "ExtendColumn", "ExtendColumn", [0, 3, 7]);
        });

        it("should execute command 'ExtendColumn'  if the 'columnsOrIndices' parameter are the headers of the columns", function () {
            tableTestObjectUnderTest.extendSelectColumns("col header1", "col header2");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeOnItemsCollection, sinon.match({
                0: "col header1",
                1: "col header2"
            }), "ExtendColumn", "ExtendColumn", ["col header1", "col header2"]);
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeOnItemsCollection.returns(promiseMock);
            var res = tableTestObjectUnderTest.extendSelectColumns(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.extendSelectColumns(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.extendSelectColumns();
            });
        });
    });

    describe("extendSelectColumnsRange method", function () {
        it("should execute command 'ExtendColumnsRange' if the parameters are indices", function () {
            tableTestObjectUnderTest.extendSelectColumnsRange(0, 3);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({}), "ExtendColumnsRange", 0, 3);
        });

        it("should execute command 'ExtendColumnsRange' if the parameters are the headers of the columns", function () {
            tableTestObjectUnderTest.extendSelectColumnsRange("col header1", "col header3");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "col header1",
                1: "col header3"
            }), "ExtendColumnsRange", "col header1", "col header3");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.extendSelectColumnsRange(0, 2);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'fromColumnOrIndex' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.extendSelectColumnsRange(null);
            });
        });

        it("should throw error if the 'fromColumnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.extendSelectColumnsRange();
            });
        });

        it("should throw error if the 'toColumnOrIndex' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.extendSelectColumnsRange(0, null);
            });
        });

        it("should throw error if the 'toColumnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.extendSelectColumnsRange(0);
            });
        });
    });

    describe("extendSelectRows method", function () {
        it("should execute command 'ExtendRow' if the 'columnsOrIndices' parameter are indices", function () {
            tableTestObjectUnderTest.extendSelectRows(0, 3, 7);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeOnItemsCollection, sinon.match({
                0: 0,
                1: 3,
                2: 7
            }), "ExtendRow", "ExtendRow", [0, 3, 7]);
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeOnItemsCollection.returns(promiseMock);
            var res = tableTestObjectUnderTest.extendSelectRows(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.extendSelectRows(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.extendSelectRows();
            });
        });
    });

    describe("extendSelectRowsRange method", function () {
        it("should execute command 'ExtendRowsRange' if the parameters are indices", function () {
            tableTestObjectUnderTest.extendSelectRowsRange(0, 3);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0, 1: 3
            }), "ExtendRowsRange", 0, 3);
        });

        it("should execute command 'ExtendRowsRange' if the parameters are index strings", function () {
            tableTestObjectUnderTest.extendSelectRowsRange("0", "3");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0",
                1: "3"
            }), "ExtendRowsRange", 0, 3);
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.extendSelectRowsRange(0, 2);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'fromRow' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.extendSelectRowsRange(null);
            });
        });

        it("should throw error if the 'fromRow' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.extendSelectRowsRange();
            });
        });

        it("should throw error if the 'toRow' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.extendSelectRowsRange(0, null);
            });
        });

        it("should throw error if the 'toRow' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.extendSelectRowsRange(0);
            });
        });
    });
});