// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/13/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Link Description", function () {
    var Link = require("../lib/link.js").Link;
    var linkDescriptionUnderTest;

    beforeEach(function () {
        linkDescriptionUnderTest = Link();
    });

    describe("Constructor", function () {
        it("should assign 'Java' and 'Link' LeanFT type", function () {
            linkDescriptionUnderTest = new Link();
            assert.deepEqual(linkDescriptionUnderTest.leanFTType, {
                technology: "Java",
                leanftType: "Link"
            });
        });
    });

    describe("text", function () {
        it("should add 'value' to _properties when value is given", function () {
            linkDescriptionUnderTest.text("text");
            assert.strictEqual(linkDescriptionUnderTest._properties["value"], "text");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = linkDescriptionUnderTest.text("text");
            assert.strictEqual(result, linkDescriptionUnderTest);
        });

        it("should remove 'value' from _properties when value is null", function () {
            linkDescriptionUnderTest._properties["value"] = "text";
            linkDescriptionUnderTest.text(null);
            assert(!("value" in linkDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            linkDescriptionUnderTest._properties["value"] = "text";
            var result = linkDescriptionUnderTest.text();
            assert.strictEqual(result, "text");
        });
    });
});

describe("Link Test Object", function () {
    var LinkTO = require("../lib/link.js").LinkTO;
    var linkTestObjectUnderTest;

    beforeEach(function () {
        linkTestObjectUnderTest = new LinkTO();
        sinon.stub(linkTestObjectUnderTest, "_getROProperty");
        sinon.stub(linkTestObjectUnderTest, "_executeWithEvents");
    });

    describe("text method", function () {
        it("should execute _getROProperty 'value'", function () {
            linkTestObjectUnderTest.text();
            sinon.assert.calledOnce(linkTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(linkTestObjectUnderTest._getROProperty, "value", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            linkTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = linkTestObjectUnderTest.text();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("clickLink method", function () {
        it("should execute command 'ClickLink'", function () {
            linkTestObjectUnderTest.clickLink("linkName");
            sinon.assert.calledOnce(linkTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(linkTestObjectUnderTest._executeWithEvents, sinon.match({0: "linkName"}), "ClickLink", "linkName");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            linkTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = linkTestObjectUnderTest.clickLink("linkName");
            assert.strictEqual(res, executionPromise);
        });

        it("should throw error if the 'linkName' parameter is null", function () {
            assert.throws(function () {
                linkTestObjectUnderTest.clickLink(null);
            });
        });

        it("should throw error if the 'linkName' parameter is undefined", function () {
            assert.throws(function () {
                linkTestObjectUnderTest.clickLink();
            });
        });
    });
});