// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/13/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var UiObject = require("../lib/ui_object.js").UiObject;

describe("UiObject Description", function () {
    var uiObjectDescriptionUnderTest;

    beforeEach(function () {
        uiObjectDescriptionUnderTest = UiObject();
    });

    describe("Constructor", function () {
        it("should assign 'Java' and 'UiObject' LeanFT type", function () {
            uiObjectDescriptionUnderTest = new UiObject();
            assert.deepEqual(uiObjectDescriptionUnderTest.leanFTType, {
                technology: "Java",
                leanftType: "UiObject"
            });
        });
    });

    describe("text", function () {
        it("should add 'text' to _properties when value is given", function () {
            uiObjectDescriptionUnderTest.text("text");
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["text"], "text");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectDescriptionUnderTest.text("text");
            assert.strictEqual(result, uiObjectDescriptionUnderTest);
        });

        it("should remove 'text' from _properties when value is null", function () {
            uiObjectDescriptionUnderTest._properties["text"] = "text";
            uiObjectDescriptionUnderTest.text(null);
            assert(!("text" in uiObjectDescriptionUnderTest._properties));
        });

        it("should return the value of 'text' from _properties when value is not given", function () {
            uiObjectDescriptionUnderTest._properties["text"] = "text";
            var result = uiObjectDescriptionUnderTest.text();
            assert.strictEqual(result, "text");
        });
    });
});

describe("UiObject Test Object", function () {
    var UiObjectTO = require("../lib/ui_object.js").UiObjectTO;
    var uiObjectTestObjectUnderTest;

    beforeEach(function () {
        uiObjectTestObjectUnderTest = new UiObjectTO();
        sinon.stub(uiObjectTestObjectUnderTest, "_getROProperty");
        sinon.stub(uiObjectTestObjectUnderTest, "_executeWithEvents");
    });



    describe("text method", function () {
        it("should execute _getROProperty 'text'", function () {
            uiObjectTestObjectUnderTest.text();
            sinon.assert.calledOnce(uiObjectTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectTestObjectUnderTest._getROProperty, "text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectTestObjectUnderTest.text();
            assert.strictEqual(res, promiseMock);
        });
    });
});