// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/24/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Menu Description", function () {
    var Menu = require("../lib/menu.js").Menu;
    var menuDescriptionUnderTest;

    beforeEach(function () {
        menuDescriptionUnderTest = Menu();
    });

    describe("Constructor", function () {
        it("should assign 'Java' and 'Menu' LeanFT type", function () {
            menuDescriptionUnderTest = new Menu();
            assert.deepEqual(menuDescriptionUnderTest.leanFTType, {
                technology: "Java",
                leanftType: "Menu"
            });
        });
    });

    describe("subMenusCount", function () {
        var subMenusCount = 2;
        it("should add 'items count' to _properties when value is given", function () {
            menuDescriptionUnderTest.subMenusCount(subMenusCount);
            assert.strictEqual(menuDescriptionUnderTest._properties["items count"], subMenusCount);
        });

        it("should add 'items count' to _properties when value is given in string", function () {
            menuDescriptionUnderTest.subMenusCount(subMenusCount.toString());
            assert.strictEqual(menuDescriptionUnderTest._properties["items count"], subMenusCount);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = menuDescriptionUnderTest.subMenusCount(subMenusCount);
            assert.strictEqual(result, menuDescriptionUnderTest);
        });

        it("should remove 'items count' from _properties when value is null", function () {
            menuDescriptionUnderTest._properties["items count"] = subMenusCount;
            menuDescriptionUnderTest.subMenusCount(null);
            assert(!("items count" in menuDescriptionUnderTest._properties));
        });

        it("should return the value of 'items count' from _properties when value is not given", function () {
            menuDescriptionUnderTest._properties["items count"] = subMenusCount;
            var result = menuDescriptionUnderTest.subMenusCount();
            assert.strictEqual(result, subMenusCount);
        });
    });

    describe("text", function () {
        var text = "some text";
        it("should add 'text' to _properties when value is given", function () {
            menuDescriptionUnderTest.text(text);
            assert.strictEqual(menuDescriptionUnderTest._properties["text"], text);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = menuDescriptionUnderTest.text(text);
            assert.strictEqual(result, menuDescriptionUnderTest);
        });

        it("should remove 'value' from _properties when value is null", function () {
            menuDescriptionUnderTest._properties["text"] = text;
            menuDescriptionUnderTest.text(null);
            assert(!("text" in menuDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            menuDescriptionUnderTest._properties["text"] = text;
            var result = menuDescriptionUnderTest.text();
            assert.strictEqual(result, text);
        });
    });
});

describe("Menu Test Object", function () {
    var MenuTO = require("../lib/menu.js").MenuTO;
    var Menu = require("../lib/menu.js").Menu;
    var menuTestObjectUnderTest;

    beforeEach(function () {
        menuTestObjectUnderTest = new MenuTO();
        sinon.stub(menuTestObjectUnderTest, "_getROProperty");
        sinon.stub(menuTestObjectUnderTest, "_executeWithEvents");
    });

    describe("_subMenusCount method", function () {
        var _subMenusCount = 2;
        var promiseMock = {
            then: function (cb) {
                return cb(_subMenusCount.toString());
            }
        };
        it("should execute _getROProperty 'items count'", function () {
            menuTestObjectUnderTest._getROProperty.returns(promiseMock);
            menuTestObjectUnderTest._subMenusCount();
            sinon.assert.calledOnce(menuTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(menuTestObjectUnderTest._getROProperty, "items count", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            menuTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = menuTestObjectUnderTest._subMenusCount();
            assert.strictEqual(res, _subMenusCount);
        });
    });

    describe("text method", function () {
        it("should execute _getROProperty 'text'", function () {
            menuTestObjectUnderTest.text();
            sinon.assert.calledOnce(menuTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(menuTestObjectUnderTest._getROProperty, "text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            menuTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = menuTestObjectUnderTest.text();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("select method", function () {
        it("should execute command 'Select'", function () {
            menuTestObjectUnderTest.select();
            sinon.assert.calledOnce(menuTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(menuTestObjectUnderTest._executeWithEvents, sinon.match({}), "Select");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            menuTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = menuTestObjectUnderTest.select();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("getSubMenu method", function () {
        var subMenuTO;
        beforeEach(function () {
            subMenuTO = new MenuTO();
            sinon.stub(subMenuTO, "$");
            sinon.stub(menuTestObjectUnderTest, "$");
        });

        it("should return submenu with correct path if single element path", function () {
            var subMenu = menuTestObjectUnderTest.getSubMenu("sub menu");
            sinon.assert.calledOnce(menuTestObjectUnderTest.$);
            sinon.assert.calledWith(menuTestObjectUnderTest.$, Menu({label: "sub menu"}));
        });

        it("should return submenu with correct path if multiple element path", function () {
            menuTestObjectUnderTest.$.returns(subMenuTO);
            var subMenu = menuTestObjectUnderTest.getSubMenu("sub menu 1;sub menu 2");
            sinon.assert.calledOnce(menuTestObjectUnderTest.$);
            sinon.assert.calledOnce(subMenuTO.$);
            sinon.assert.calledWith(menuTestObjectUnderTest.$, Menu({label: "sub menu 1"}));
            sinon.assert.calledWith(subMenuTO.$, Menu({label: "sub menu 2"}));
        });

        it("should throw error if the 'subMenuPath' parameter is null", function () {
            assert.throws(function () {
                menuTestObjectUnderTest.getSubMenu(null);
            });
        });

        it("should throw error if the 'subMenuPath' parameter is null", function () {
            assert.throws(function () {
                menuTestObjectUnderTest.getSubMenu();
            });
        });
    });

    describe("selectSubMenu method", function () {
        var subMenu;
        beforeEach(function () {
            subMenu = new MenuTO();
            sinon.stub(subMenu, "_executeWithEvents");
            sinon.stub(menuTestObjectUnderTest, "getSubMenu");
        });

        it("should execute command 'Select'", function () {
            menuTestObjectUnderTest.getSubMenu.returns(subMenu);
            menuTestObjectUnderTest.selectSubMenu("sub menu");
            sinon.assert.calledOnce(subMenu._executeWithEvents);
            sinon.assert.calledWith(subMenu._executeWithEvents, sinon.match({}), "Select");
        });
    });

    describe("subMenus method", function () {
        beforeEach(function () {
            sinon.stub(menuTestObjectUnderTest, "$");
            sinon.stub(menuTestObjectUnderTest, "_subMenusCount");
        });

        afterEach(function () {
            menuTestObjectUnderTest.$.restore();
            menuTestObjectUnderTest._subMenusCount.restore();
        });

        it("should return empty collection if zero submenu", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(0);
                }
            };
            menuTestObjectUnderTest._subMenusCount.returns(promiseMock);
            var subMenus = menuTestObjectUnderTest.subMenus();
            assert.strictEqual(subMenus.length, 0);
        });

        it("should return collection with items by index if multiple submenus", function () {
            var subMenusCount = 2;
            var promiseMock = {
                then: function (cb) {
                    return cb(subMenusCount.toString());
                }
            };
            menuTestObjectUnderTest._subMenusCount.returns(promiseMock);
            var subMenus = menuTestObjectUnderTest.subMenus();
            assert.strictEqual(subMenus.length, subMenusCount);
            sinon.assert.callCount(menuTestObjectUnderTest.$, subMenusCount);
            for (var i = 0; i < subMenusCount; i++) {
                sinon.assert.calledWith(menuTestObjectUnderTest.$, Menu({index: i}));
            }
        });
    });
});