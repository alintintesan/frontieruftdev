// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/21/2019.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var MouseButton = Core.MouseButton;

describe("TreeViewTable Description", function () {
    var TreeViewTable = require("../lib/tree_view_table.js").TreeViewTable;
    var treeViewTableDescriptionUnderTest;

    beforeEach(function () {
        treeViewTableDescriptionUnderTest = TreeViewTable();
    });

    describe("Constructor", function () {
        it("should assign 'Java' and 'TreeViewTable' LeanFT type", function () {
            treeViewTableDescriptionUnderTest = new TreeViewTable();
            assert.deepEqual(treeViewTableDescriptionUnderTest.leanFTType, {
                technology: "Java",
                leanftType: "TreeViewTable"
            });
        });
    });

    describe("columnsCount", function () {
        var columns_count = 50;
        it("should add 'columns_count' to _properties when value is given", function () {
            treeViewTableDescriptionUnderTest.columnsCount(columns_count);
            assert.strictEqual(treeViewTableDescriptionUnderTest._properties["columns_count"], columns_count);
        });

        it("should add 'columns_count' to _properties when value is given in string", function () {
            treeViewTableDescriptionUnderTest.columnsCount(columns_count.toString());
            assert.strictEqual(treeViewTableDescriptionUnderTest._properties["columns_count"], columns_count);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewTableDescriptionUnderTest.columnsCount(columns_count);
            assert.strictEqual(result, treeViewTableDescriptionUnderTest);
        });

        it("should remove 'columns_count' from _properties when value is null", function () {
            treeViewTableDescriptionUnderTest._properties["columns_count"] = columns_count;
            treeViewTableDescriptionUnderTest.columnsCount(null);
            assert(!("columns_count" in treeViewTableDescriptionUnderTest._properties));
        });

        it("should return the value of 'columns_count' from _properties when value is not given", function () {
            treeViewTableDescriptionUnderTest._properties["columns_count"] = columns_count;
            var result = treeViewTableDescriptionUnderTest.columnsCount();
            assert.strictEqual(result, columns_count);
        });
    });

    describe("rowsCount", function () {
        var rowsCount = 50;
        it("should add 'rows' to _properties when value is given", function () {
            treeViewTableDescriptionUnderTest.rowsCount(rowsCount);
            assert.strictEqual(treeViewTableDescriptionUnderTest._properties["rows"], rowsCount);
        });

        it("should add 'rows' to _properties when value is given in string", function () {
            treeViewTableDescriptionUnderTest.rowsCount(rowsCount.toString());
            assert.strictEqual(treeViewTableDescriptionUnderTest._properties["rows"], rowsCount);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewTableDescriptionUnderTest.rowsCount(rowsCount);
            assert.strictEqual(result, treeViewTableDescriptionUnderTest);
        });

        it("should remove 'rows' from _properties when value is null", function () {
            treeViewTableDescriptionUnderTest._properties["rows"] = rowsCount;
            treeViewTableDescriptionUnderTest.rowsCount(null);
            assert(!("rows" in treeViewTableDescriptionUnderTest._properties));
        });

        it("should return the value of 'rows' from _properties when value is not given", function () {
            treeViewTableDescriptionUnderTest._properties["rows"] = rowsCount;
            var result = treeViewTableDescriptionUnderTest.rowsCount();
            assert.strictEqual(result, rowsCount);
        });
    });

    describe("columnHeaders", function () {
        var columnHeaders = ["colHeader1", "colHeader2"];
        it("should add 'column_names' to _properties when value is given", function () {
            treeViewTableDescriptionUnderTest.columnHeaders(columnHeaders);
            assert.strictEqual(treeViewTableDescriptionUnderTest._properties["column_names"], columnHeaders.join(";"));
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewTableDescriptionUnderTest.columnHeaders(columnHeaders);
            assert.strictEqual(result, treeViewTableDescriptionUnderTest);
        });

        it("should remove 'column_names' from _properties when value is null", function () {
            treeViewTableDescriptionUnderTest._properties["column_names"] = columnHeaders;
            treeViewTableDescriptionUnderTest.columnHeaders(null);
            assert(!("column_names" in treeViewTableDescriptionUnderTest._properties));
        });

        it("should return the value of 'column_names' from _properties when value is not given", function () {
            treeViewTableDescriptionUnderTest._properties["column_names"] = columnHeaders.join(";");
            var result = treeViewTableDescriptionUnderTest.columnHeaders();
            assert.deepEqual(result, columnHeaders);
        });
    });

    describe("selectedNodes", function () {
        var selectedNodes = ["value1", "value2"];
        it("should add 'value' to _properties when value is given", function () {
            treeViewTableDescriptionUnderTest.selectedNodes(selectedNodes);
            assert.strictEqual(treeViewTableDescriptionUnderTest._properties["value"], selectedNodes.join("\u0018"));
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewTableDescriptionUnderTest.selectedNodes(selectedNodes);
            assert.strictEqual(result, treeViewTableDescriptionUnderTest);
        });

        it("should remove 'value' from _properties when value is null", function () {
            treeViewTableDescriptionUnderTest._properties["value"] = selectedNodes.join("\u0018");
            treeViewTableDescriptionUnderTest.selectedNodes(null);
            assert(!("value" in treeViewTableDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            treeViewTableDescriptionUnderTest._properties["value"] = selectedNodes.join("\u0018");
            var result = treeViewTableDescriptionUnderTest.selectedNodes();
            assert.deepEqual(result, selectedNodes);
        });
    });
});

describe("TreeViewTable Test Object", function () {
    var TreeViewTableTO = require("../lib/tree_view_table.js").TreeViewTableTO;
    var TableKeyModifier = require("../lib/table.js").TableKeyModifier;
    var treeViewTableTestObjectUnderTest;

    beforeEach(function () {
        treeViewTableTestObjectUnderTest = new TreeViewTableTO();
        sinon.stub(treeViewTableTestObjectUnderTest, "_getROProperty");
        sinon.stub(treeViewTableTestObjectUnderTest, "_executeNotWrapped");
        sinon.stub(treeViewTableTestObjectUnderTest, "_executeWithEvents");
        sinon.stub(treeViewTableTestObjectUnderTest, "_executeOnItemsCollection");
        sinon.stub(treeViewTableTestObjectUnderTest, "_executeSingleOpOnCollection");
    });

    describe("columnHeaders method", function () {
        var columnHeaders = "colHeader1;colHeader2";
        var promiseMock = {
            then: function (cb) {
                return cb(columnHeaders);
            }
        };
        it("should execute _getROProperty 'column_names'", function () {
            treeViewTableTestObjectUnderTest._getROProperty.returns(promiseMock);
            treeViewTableTestObjectUnderTest.columnHeaders();
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._getROProperty, "column_names", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            treeViewTableTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest.columnHeaders();
            assert.deepEqual(res, columnHeaders.split(";"));
        });
    });

    describe("rowsCount method", function () {
        var rowsCount = 2;
        var promiseMock = {
            then: function (cb) {
                return cb(rowsCount.toString());
            }
        };
        it("should execute _getROProperty 'items count'", function () {
            treeViewTableTestObjectUnderTest._getROProperty.returns(promiseMock);
            treeViewTableTestObjectUnderTest.rowsCount();
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._getROProperty, "rows", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            treeViewTableTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest.rowsCount();
            assert.strictEqual(res, rowsCount);
        });
    });

    describe("columnsCount method", function () {
        var columnsCount = 2;
        var promiseMock = {
            then: function (cb) {
                return cb(columnsCount.toString());
            }
        };
        it("should execute _getROProperty 'items count'", function () {
            treeViewTableTestObjectUnderTest._getROProperty.returns(promiseMock);
            treeViewTableTestObjectUnderTest.columnsCount();
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._getROProperty, "columns_count", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            treeViewTableTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest.columnsCount();
            assert.strictEqual(res, columnsCount);
        });
    });

    describe("selectedNodes method", function () {
        var nativeString = "";
        beforeEach(function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(nativeString);
                }
            };
            treeViewTableTestObjectUnderTest._getROProperty.returns(promiseMock);
        });
        it("should query the 'value' property", function () {
            treeViewTableTestObjectUnderTest.selectedNodes();
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._getROProperty, "value", sinon.match({}));
        });

        it("should return an empty list if no item is returned", function () {
            var selectedNodes = treeViewTableTestObjectUnderTest.selectedNodes();
            assert.deepEqual(selectedNodes, []);
        });

        it("should return a list if items are returned", function () {
            nativeString = "item1\u0018item2";
            var selectedNodes = treeViewTableTestObjectUnderTest.selectedNodes();
            assert.deepEqual(selectedNodes, ["item1", "item2"]);
        });
    });

    describe("buildNodePath method", function () {
        it("should return a correct path with node indices", function () {
            var res = treeViewTableTestObjectUnderTest.buildNodePath(1, 2, 3);
            assert.strictEqual(res, "#1;#2;#3");
        });

        it("should return a correct path with mixed nodes and indices", function () {
            var res = treeViewTableTestObjectUnderTest.buildNodePath(1, "node", 3);
            assert.strictEqual(res, "#1;node;#3");
        });

        it("should return a correct path with nodes", function () {
            var res = treeViewTableTestObjectUnderTest.buildNodePath("node1", "node2", "node3");
            assert.strictEqual(res, "node1;node2;node3");
        });

        it("should return an empty path if an empty list is passed", function () {
            var res = treeViewTableTestObjectUnderTest.buildNodePath();
            assert.strictEqual(res, "");
        });

        it("should throw error if one of indices is less than 0", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.buildNodePath(-1, 2, 4);
            });
        });

        it("should throw error if one of nodes isn't neither a string nor a number", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.buildNodePath(0, true, 4);
            });
        });
    });
    
    describe("activateCell method", function () {
        it("should execute command 'ActivateCell' if the 'row' parameter is an index", function () {
            treeViewTableTestObjectUnderTest.activateCell(0, 0);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: 0
            }), "ActivateCell", 0, 0);
        });

        it("should execute command 'ActivateCell' if the 'row' parameter is an index string", function () {
            treeViewTableTestObjectUnderTest.activateCell("0", 0);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0",
                1: 0
            }), "ActivateCell", 0, 0);
        });

        it("should execute command 'ActivateCell' if the 'columnOrIndex' parameter is the header of a column", function () {
            treeViewTableTestObjectUnderTest.activateCell(0, "col header");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: "col header"
            }), "ActivateCell", 0, "col header");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            treeViewTableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest.activateCell(0, 0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.activateCell(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.activateCell();
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.activateCell(0, null);
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.activateCell(0);
            });
        });
    });

    describe("activateColumn method", function () {
        it("should execute command 'ActivateColumn' if the 'columnOrIndex' parameter is an index", function () {
            treeViewTableTestObjectUnderTest.activateColumn(0);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0
            }), "ActivateColumn", 0);
        });

        it("should execute command 'ActivateColumn' if the 'columnOrIndex' parameter is the header of a column", function () {
            treeViewTableTestObjectUnderTest.activateColumn("col header");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "col header"
            }), "ActivateColumn", "col header");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            treeViewTableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest.activateColumn(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'columnOrIndex' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.activateColumn(null);
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.activateColumn();
            });
        });
    });

    describe("activate method", function () {
        it("should execute command 'Activate' if the 'nodePath' parameter is a node path", function () {
            var nodePath = "item1;item2;#1";
            treeViewTableTestObjectUnderTest.activate(nodePath);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({0: nodePath}), "Activate", nodePath);
        });

        it("should throw error if the 'nodePath' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.activate(null);
            });
        });

        it("should throw error if the 'nodePath' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.activate();
            });
        });
    });

    describe("getNode method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("item1");
            }
        };
        it("should execute command 'GetItem'", function () {
            treeViewTableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            treeViewTableTestObjectUnderTest.getNode(1);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({0: 1}), "GetItem", 1);
        });

        it("should return a number value when promise returns numeric string", function () {
            treeViewTableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest.getNode(1);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'index' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.getNode(null);
            });
        });

        it("should throw error if the 'index' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.getNode();
            });
        });
    });

    describe("deselectColumn method", function () {
        it("should execute command 'DeselectColumn' if the 'columnOrIndex' parameter is index", function () {
            treeViewTableTestObjectUnderTest.deselectColumn(0);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0
            }), "DeselectColumn", 0);
        });

        it("should execute command 'DeselectColumn' if the 'columnOrIndex' parameter is the header of the column", function () {
            treeViewTableTestObjectUnderTest.deselectColumn("col header1");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "col header1"
            }), "DeselectColumn", "col header1");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            treeViewTableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest.deselectColumn(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselectColumn(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselectColumn();
            });
        });
    });

    describe("deselectColumnsRange method", function () {
        it("should execute command 'DeselectColumnsRange' if the parameters are indices", function () {
            treeViewTableTestObjectUnderTest.deselectColumnsRange(0, 3);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0, 1: 3
            }), "DeselectColumnsRange", 0, 3);
        });

        it("should execute command 'DeselectColumnsRange' if the parameters are the headers of the columns", function () {
            treeViewTableTestObjectUnderTest.deselectColumnsRange("col header1", "col header3");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "col header1",
                1: "col header3"
            }), "DeselectColumnsRange", "col header1", "col header3");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            treeViewTableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest.deselectColumnsRange(0, 2);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'fromColumnOrIndex' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselectColumnsRange(null);
            });
        });

        it("should throw error if the 'fromColumnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselectColumnsRange();
            });
        });

        it("should throw error if the 'toColumnOrIndex' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselectColumnsRange(0, null);
            });
        });

        it("should throw error if the 'toColumnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselectColumnsRange(0);
            });
        });
    });

    describe("deselectRowsRange method", function () {
        it("should execute command 'DeselectRowsRange' if the parameters are indices", function () {
            treeViewTableTestObjectUnderTest.deselectRowsRange(0, 3);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0, 1: 3
            }), "DeselectRowsRange", 0, 3);
        });

        it("should execute command 'DeselectRowsRange' if the parameters are index strings", function () {
            treeViewTableTestObjectUnderTest.deselectRowsRange("0", "3");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0",
                1: "3"
            }), "DeselectRowsRange", 0, 3);
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            treeViewTableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest.deselectRowsRange(0, 2);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'fromRow' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselectRowsRange(null);
            });
        });

        it("should throw error if the 'fromRow' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselectRowsRange();
            });
        });

        it("should throw error if the 'toRow' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselectRowsRange(0, null);
            });
        });

        it("should throw error if the 'toRow' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselectRowsRange(0);
            });
        });
    });

    describe("selectCell method", function () {
        it("should execute command 'SelectCell' if the 'row' parameter is an index", function () {
            treeViewTableTestObjectUnderTest.selectCell(0, 0);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: 0
            }), "SelectCell", 0, 0);
        });

        it("should execute command 'SelectCell' if the 'row' parameter is an index string", function () {
            treeViewTableTestObjectUnderTest.selectCell("0", 0);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0",
                1: 0
            }), "SelectCell", 0, 0);
        });

        it("should execute command 'SelectCell' if the 'columnOrIndex' parameter is the header of a column", function () {
            treeViewTableTestObjectUnderTest.selectCell(0, "col header");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: "col header"
            }), "SelectCell", 0, "col header");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            treeViewTableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest.selectCell(0, 0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectCell(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectCell();
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectCell(0, null);
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectCell(0);
            });
        });
    });

    describe("selectCellRange method", function () {
        it("should execute command 'SelectCellsRange' if the parameters are indices", function () {
            treeViewTableTestObjectUnderTest.selectCellRange(0, 0, 2, 3);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: 0,
                2: 2,
                3: 3
            }), "SelectCellsRange", 0, 0, 2, 3);
        });

        it("should execute command 'SelectCellsRange' if the 'fromRow' and 'toRow' parameters are index strings", function () {
            treeViewTableTestObjectUnderTest.selectCellRange("0", 0, "2", 3);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0",
                1: 0,
                2: "2",
                3: 3
            }), "SelectCellsRange", 0, 0, 2, 3);
        });

        it("should execute command 'SelectCellsRange' if the 'fromColumnOrIndex' and toColumnOrIndex parameters are the headers of the columns", function () {
            treeViewTableTestObjectUnderTest.selectCellRange(0, "col header1", 2, "col header3");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: "col header1",
                2: 2,
                3: "col header3"
            }), "SelectCellsRange", 0, "col header1", 2, "col header3");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            treeViewTableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest.selectCellRange(0, 0, 2, 3);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'fromRow' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectCellRange(null, 0, 2, 3);
            });
        });

        it("should throw error if the 'fromRow' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectCellRange(undefined, 0, 2, 3);
            });
        });

        it("should throw error if the 'fromColumnOrIndex' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectCellRange(0, null, 2, 3);
            });
        });

        it("should throw error if the 'fromColumnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectCellRange(0, undefined, 2, 3);
            });
        });

        it("should throw error if the 'toRow' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectCellRange(0, 0, null, 3);
            });
        });

        it("should throw error if the 'toRow' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectCellRange(0, 0, undefined, 3);
            });
        });

        it("should throw error if the 'toColumnOrIndex' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectCellRange(0, 0, 2, null);
            });
        });

        it("should throw error if the 'toColumnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectCellRange(0, 0, 2);
            });
        });
    });

    describe("selectColumn method", function () {
        it("should execute command 'SelectColumn' if the 'columnOrIndex' parameter is index", function () {
            treeViewTableTestObjectUnderTest.selectColumn(0);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0
            }), "SelectColumn", 0);
        });

        it("should execute command 'SelectColumn' if the 'columnOrIndex' parameter is the header of the column", function () {
            treeViewTableTestObjectUnderTest.selectColumn("col header1");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "col header1",
            }), "SelectColumn", "col header1");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            treeViewTableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest.selectColumn(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectColumns(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectColumns();
            });
        });
    });

    describe("selectColumnsRange method", function () {
        it("should execute command 'SelectColumnsRange' if the parameters are indices", function () {
            treeViewTableTestObjectUnderTest.selectColumnsRange(0, 3);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({}), "SelectColumnsRange", 0, 3);
        });

        it("should execute command 'SelectColumnsRange' if the parameters are the headers of the columns", function () {
            treeViewTableTestObjectUnderTest.selectColumnsRange("col header1", "col header3");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "col header1",
                1: "col header3"
            }), "SelectColumnsRange", "col header1", "col header3");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            treeViewTableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest.selectColumnsRange(0, 2);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'fromColumnOrIndex' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectColumnsRange(null);
            });
        });

        it("should throw error if the 'fromColumnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectColumnsRange();
            });
        });

        it("should throw error if the 'toColumnOrIndex' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectColumnsRange(0, null);
            });
        });

        it("should throw error if the 'toColumnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectColumnsRange(0);
            });
        });
    });

    describe("deselect method", function () {

        it("should execute command 'Deselect' if the 'nodePaths' parameter is node paths", function () {
            treeViewTableTestObjectUnderTest.deselect("node1", "node2");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeSingleOpOnCollection, sinon.match({
                0: "node1",
                1: "node2"
            }), "Deselect", ["node1", "node2"]);
        });

        it("should throw error if the 'nodePaths' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselect(null);
            });
        });

        it("should throw error if the 'nodePaths' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselect();
            });
        });
    });

    describe("extendSelect method", function () {

        it("should execute command 'ExtendSelect' if the 'nodePaths' parameter is node paths", function () {
            treeViewTableTestObjectUnderTest.extendSelect("node1", "node2");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeSingleOpOnCollection, sinon.match({
                0: "node1",
                1: "node2"
            }), "ExtendSelect", ["node1", "node2"]);
        });

        it("should throw error if the 'nodePaths' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.extendSelect(null);
            });
        });

        it("should throw error if the 'nodePaths' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.extendSelect();
            });
        });
    });

    describe("deselectRange method", function () {
        it("should execute command 'DeselectRange'", function () {
            treeViewTableTestObjectUnderTest.deselectRange("2", "8");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "2",
                1: "8"
            }), "DeselectRange", "2", "8");
        });

        it("should throw error if the 'fromNodePath' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselectRange(null, "8");
            });
        });

        it("should throw error if the 'fromNodePath' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselectRange(undefined, "8");
            });
        });

        it("should throw error if the 'toNodePath' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselectRange("2", null);
            });
        });

        it("should throw error if the 'toNodePath' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.deselectRange("2");
            });
        });
    });

    describe("select method", function () {

        it("should execute command 'Select' if the 'nodePaths' parameter is node paths", function () {
            treeViewTableTestObjectUnderTest.select("node1", "node2");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeOnItemsCollection, sinon.match({
                0: "node1",
                1: "node2"
            }), "Select", "ExtendSelect", ["node1", "node2"]);
        });

        it("should throw error if the 'nodePaths' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.select(null);
            });
        });

        it("should throw error if the 'nodePaths' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.select();
            });
        });
    });

    describe("selectRange method", function () {
        it("should execute command 'SelectRange'", function () {
            treeViewTableTestObjectUnderTest.selectRange("2", "8");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "2",
                1: "8"
            }), "SelectRange", "2", "8");
        });

        it("should throw error if the 'fromNodePath' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectRange(null, "8");
            });
        });

        it("should throw error if the 'fromNodePath' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectRange(undefined, "8");
            });
        });

        it("should throw error if the 'toNodePath' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectRange("2", null);
            });
        });

        it("should throw error if the 'toNodePath' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectRange("2");
            });
        });
    });

    describe("collapse method", function () {
        it("should return the execution promise when argument is node path", function () {
            var executionPromise = {};
            treeViewTableTestObjectUnderTest._executeSingleOpOnCollection.returns(executionPromise);
            var res = treeViewTableTestObjectUnderTest.collapse("node1");
            assert.equal(res, executionPromise);
        });

        it("should return the execution promise when argument is index", function () {
            var executionPromise = {
                then: {}
            };
            treeViewTableTestObjectUnderTest._executeSingleOpOnCollection.returns(executionPromise);
            var promiseMock = {
                then: function (cb) {
                    return cb("node1;node2");
                }
            };
            treeViewTableTestObjectUnderTest._executeNotWrapped.returns(promiseMock);

            var res = treeViewTableTestObjectUnderTest.collapse(1);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Collapse' when argument is node path", function () {
            treeViewTableTestObjectUnderTest.collapse("node1", "node2");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeSingleOpOnCollection, sinon.match({0: "node1", 1: "node2"}), "Collapse", ["node1", "node2"]);
        });

        it("should execute _executeSingleOpOnCollection 'Collapse' when argument is index", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("node1;node2");
                }
            };
            treeViewTableTestObjectUnderTest._executeNotWrapped.returns(promiseMock);

            treeViewTableTestObjectUnderTest.collapse(1);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeSingleOpOnCollection, sinon.match("node1;node2"), "Collapse", ["node1;node2"]);
        });
    });

    describe("expand method", function () {
        it("should return the execution promise when argument is node path", function () {
            var executionPromise = {};
            treeViewTableTestObjectUnderTest._executeSingleOpOnCollection.returns(executionPromise);
            var res = treeViewTableTestObjectUnderTest.expand("node1");
            assert.equal(res, executionPromise);
        });

        it("should return the execution promise when argument is index", function () {
            var executionPromise = {
                then: {}
            };
            treeViewTableTestObjectUnderTest._executeSingleOpOnCollection.returns(executionPromise);
            var promiseMock = {
                then: function (cb) {
                    return cb("node1;node2");
                }
            };
            treeViewTableTestObjectUnderTest._executeNotWrapped.returns(promiseMock);

            var res = treeViewTableTestObjectUnderTest.expand(1);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeSingleOpOnCollection 'Expand' when argument is node path", function () {
            treeViewTableTestObjectUnderTest.expand("node1", "node2");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeSingleOpOnCollection, sinon.match({0: "node1", 1: "node2"}), "Expand", ["node1", "node2"]);
        });

        it("should execute _executeSingleOpOnCollection 'Expand' when argument is index", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("node1;node2");
                }
            };
            treeViewTableTestObjectUnderTest._executeNotWrapped.returns(promiseMock);

            treeViewTableTestObjectUnderTest.expand(1);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeSingleOpOnCollection, sinon.match("node1;node2"), "Expand", ["node1;node2"]);
        });
    });

    describe("selectRowsRange method", function () {
        it("should execute command 'SelectRowsRange' if the parameters are indices", function () {
            treeViewTableTestObjectUnderTest.selectRowsRange(0, 3);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0, 1: 3
            }), "SelectRowsRange", 0, 3);
        });

        it("should execute command 'SelectRowsRange' if the parameters are index strings", function () {
            treeViewTableTestObjectUnderTest.selectRowsRange("0", "3");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0",
                1: "3"
            }), "SelectRowsRange", 0, 3);
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            treeViewTableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest.selectRowsRange(0, 2);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'fromRow' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectRowsRange(null);
            });
        });

        it("should throw error if the 'fromRow' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectRowsRange();
            });
        });

        it("should throw error if the 'toRow' parameter is null", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectRowsRange(0, null);
            });
        });

        it("should throw error if the 'toRow' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest.selectRowsRange(0);
            });
        });
    });

    describe("_getRowsCount method", function () {
        var rowsCount = 2;
        var promiseMock = {
            then: function (cb) {
                return cb(rowsCount.toString());
            }
        };
        it("should execute _getROProperty 'rows'", function () {
            treeViewTableTestObjectUnderTest._getROProperty.returns(promiseMock);
            treeViewTableTestObjectUnderTest._getRowsCount();
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._getROProperty, "rows", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            treeViewTableTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest._getRowsCount();
            assert.strictEqual(res, rowsCount);
        });
    });

    describe("_getCellValue method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTableTestObjectUnderTest._getCellValue(0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetCellData' if the parameters are indices", function () {
            treeViewTableTestObjectUnderTest._getCellValue(0, 0);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "GetCellData", 0, 0);
        });

        it("should execute _executeNotWrapped 'GetCellData' if the 'columnIdentifier' parameter is the header of the column", function () {
            treeViewTableTestObjectUnderTest._getCellValue(0, "col header");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header"
            }), "GetCellData", 0, "col header");
        });
    });

    describe("_setCellValue method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTableTestObjectUnderTest._setCellValue(0, 0, "some value");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'SetCellData' if the parameters are indices", function () {
            treeViewTableTestObjectUnderTest._setCellValue(0, 0, "some value");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: "some value"
            }), "SetCellData", 0, 0, "some value");
        });

        it("should execute _executeNotWrapped 'SetCellData' if the 'columnIdentifier' parameter is the header of the column", function () {
            treeViewTableTestObjectUnderTest._setCellValue(0, "col header", "some value");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header",
                2: "some value"
            }), "SetCellData", 0, "col header", "some value");
        });
    });

    describe("_getColumnHeader method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTableTestObjectUnderTest._getColumnHeader(0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetColumnName' if the parameters are indices", function () {
            treeViewTableTestObjectUnderTest._getColumnHeader(0);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0
            }), "GetColumnName", 0);
        });

        it("should execute _executeNotWrapped 'GetColumnName' if the 'columnIdentifier' parameter is the header of the column", function () {
            treeViewTableTestObjectUnderTest._getColumnHeader("col header");
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: "col header"
            }), "GetColumnName", "col header");
        });
    });

    describe("_clickCell method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTableTestObjectUnderTest._clickCell(0, 0, MouseButton.left);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'ClickCell' if the parameters are indices", function () {
            treeViewTableTestObjectUnderTest._clickCell(0, 0, MouseButton.left);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: MouseButton.left
            }), "ClickCell", 0, 0, "LEFT");
        });

        it("should execute _executeNotWrapped 'ClickCell' if the 'columnIdentifier' parameter is the header of the column", function () {
            treeViewTableTestObjectUnderTest._clickCell(0, "col header", MouseButton.left);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header",
                2: MouseButton.left
            }), "ClickCell", 0, "col header", "LEFT");
        });

        it("should execute _executeNotWrapped 'ClickCell' with the LEFT mouse button if the 'button' parameter is not passed", function () {
            treeViewTableTestObjectUnderTest._clickCell(0, 0);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
            }), "ClickCell", 0, 0, "LEFT");
        });

        it("should execute _executeNotWrapped 'ClickCell' with modifier if the 'modifier' parameter is passed", function () {
            treeViewTableTestObjectUnderTest._clickCell(0, 0, MouseButton.left, TableKeyModifier.control);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: MouseButton.left,
                3: TableKeyModifier.control
            }), "ClickCell", 0, 0, "LEFT", "CONTROL");
        });

        it("should throw error if the modifier is not supported", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest._clickCell(0, 0, MouseButton.left, "a modifier");
            });
        });
    });

    describe("_doubleClickCell method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTableTestObjectUnderTest._doubleClickCell(0, 0, MouseButton.left);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'DoubleClickCell' if the parameters are indices", function () {
            treeViewTableTestObjectUnderTest._doubleClickCell(0, 0, MouseButton.left);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: MouseButton.left
            }), "DoubleClickCell", 0, 0, "LEFT");
        });

        it("should execute _executeNotWrapped 'DoubleClickCell' if the 'columnIdentifier' parameter is the header of the column", function () {
            treeViewTableTestObjectUnderTest._doubleClickCell(0, "col header", MouseButton.left);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header",
                2: MouseButton.left
            }), "DoubleClickCell", 0, "col header", "LEFT");
        });

        it("should execute _executeNotWrapped 'DoubleClickCell' with the LEFT mouse button if the 'button' parameter is not passed", function () {
            treeViewTableTestObjectUnderTest._doubleClickCell(0, 0);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
            }), "DoubleClickCell", 0, 0, "LEFT");
        });

        it("should execute _executeNotWrapped 'DoubleClickCell' with modifier if the 'modifier' parameter is passed", function () {
            treeViewTableTestObjectUnderTest._doubleClickCell(0, 0, MouseButton.left, TableKeyModifier.control);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: MouseButton.left,
                3: TableKeyModifier.control
            }), "DoubleClickCell", 0, 0, "LEFT", "CONTROL");
        });

        it("should throw error if the modifier is not supported", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest._doubleClickCell(0, 0, MouseButton.left, "a modifier");
            });
        });
    });

    describe("_dragAndDropOn method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTableTestObjectUnderTest._dragAndDropOn(0, 0, 1, 1, MouseButton.left);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Drag' if the parameters are indices", function () {
            treeViewTableTestObjectUnderTest._dragAndDropOn(0, 0, 1, 1, MouseButton.left);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: 1,
                3: 1,
                4: MouseButton.left
            }), "Drag", 0, 0, 1, 1, "LEFT");
        });

        it("should execute _executeNotWrapped 'Drag' if the column identifiers are the headers", function () {
            treeViewTableTestObjectUnderTest._dragAndDropOn(0, "col header", 1, "col header 1", MouseButton.left);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header",
                2: 1,
                3: "col header 1",
                4: MouseButton.left
            }), "Drag", 0, "col header", 1, "col header 1", "LEFT");
        });

        it("should execute _executeNotWrapped 'Drag' with the LEFT mouse button if the 'button' parameter is not passed", function () {
            treeViewTableTestObjectUnderTest._dragAndDropOn(0, 0, 1, 1);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: 1,
                3: 1
            }), "Drag", 0, 0, 1, 1, "LEFT");
        });

        it("should execute _executeNotWrapped 'Drag' with modifier if the 'modifier' parameter is passed", function () {
            treeViewTableTestObjectUnderTest._dragAndDropOn(0, 0, 1, 1, MouseButton.left, TableKeyModifier.control);
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: 1,
                3: 1,
                4: MouseButton.left,
                5: TableKeyModifier.control
            }), "Drag", 0, 0, 1, 1, "LEFT", "CONTROL");
        });

        it("should throw error if the modifier is not supported", function () {
            assert.throws(function () {
                treeViewTableTestObjectUnderTest._dragAndDropOn(0, 0, 1, 1, MouseButton.left, "a modifier");
            });
        });
    });

    describe("_getRowAndColumnCount method", function () {
        beforeEach(function () {
            sinon.stub(treeViewTableTestObjectUnderTest, "_getROProperties");
            var executionPromise = {
                then: function (cb) {
                    return cb(["4", "6"]);
                }
            };
            treeViewTableTestObjectUnderTest._getROProperties.returns(executionPromise);
        });

        it("should exectute command '_getROProperties'", function () {
            treeViewTableTestObjectUnderTest._getRowAndColumnCount();
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._getROProperties);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._getROProperties, "rows", "columns_count");
        });

        it("should return rowCount and columnCount", function () {
            var res = treeViewTableTestObjectUnderTest._getRowAndColumnCount();
            assert.deepEqual(res, {rowCount: 4, columnCount: 6});
        });
    });

    describe("_getColumnCount method", function () {
        var columnCount = 6;
        var promiseMock = {
            then: function (cb) {
                return cb(columnCount.toString());
            }
        };
        it("should execute _getROProperty 'cols'", function () {
            treeViewTableTestObjectUnderTest._getROProperty.returns(promiseMock);
            treeViewTableTestObjectUnderTest._getColumnCount();
            sinon.assert.calledOnce(treeViewTableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTableTestObjectUnderTest._getROProperty, "columns_count", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            treeViewTableTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTableTestObjectUnderTest._getColumnCount();
            assert.strictEqual(res, columnCount);
        });
    });

    describe("_createCell method", function () {
        it("should return the TableCell with correct values", function () {
            var res = treeViewTableTestObjectUnderTest._createCell(0, 0);
            assert.strictEqual(res._rowIdentifier, 0);
            assert.strictEqual(res._columnIdentifier, 0);
            assert.deepEqual(res._ownerTable, treeViewTableTestObjectUnderTest);
        });
    });
});
