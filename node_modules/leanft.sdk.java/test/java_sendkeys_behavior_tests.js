// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Java SendKeys Behaviour Tests", function() {
    var Core = require("leanft.sdk.core");
    var ObjUtils = Core.ObjectUtils;
    var SendKeysBehavior = Core.SendKeysBehavior;
    var SendKeysBehaviorJava = require("../lib/java_sendkeys_behavior.js").SendKeysBehaviorJava;
    var KeyModifier = Core.KeyModifier;
    var Keys = Core.Keys;
    var FunctionKeys = Core.FunctionKeys;
    var sendKeysBehaviorJavaUnderTest = null;

    beforeEach(function () {
        sendKeysBehaviorJavaUnderTest = Object.create(null);
        ObjUtils.combineBehaviors(sendKeysBehaviorJavaUnderTest, SendKeysBehavior);
        ObjUtils.combineBehaviors(sendKeysBehaviorJavaUnderTest, SendKeysBehaviorJava);
        sendKeysBehaviorJavaUnderTest = ObjUtils.mergeTestBehavior(sendKeysBehaviorJavaUnderTest);
        sendKeysBehaviorJavaUnderTest._executeWithEvents = sinon.stub();
    });
    
    afterEach(function() {
        delete sendKeysBehaviorJavaUnderTest._executeWithEvents;
    });

    describe("sendKeys", function () {
        it("should pass default parameters to _executeWithEvents if without args ", function () {
            sendKeysBehaviorJavaUnderTest.sendKeys();
            sinon.assert.calledOnce(sendKeysBehaviorJavaUnderTest._executeWithEvents);
            sinon.assert.calledWith(sendKeysBehaviorJavaUnderTest._executeWithEvents, sinon.match({}), "PressKey", "");
        });

        it("should pass default parameters to _executeWithEvents if input is null ", function () {
            sendKeysBehaviorJavaUnderTest.sendKeys(null);
            sinon.assert.calledOnce(sendKeysBehaviorJavaUnderTest._executeWithEvents);
            sinon.assert.calledWith(sendKeysBehaviorJavaUnderTest._executeWithEvents, sinon.match({}), "PressKey", "");
        });

        it("should pass default parameters to _executeWithEvents if without modifiers", function () {
            sendKeysBehaviorJavaUnderTest.sendKeys("The Sample Text");
            sinon.assert.calledOnce(sendKeysBehaviorJavaUnderTest._executeWithEvents);
            sinon.assert.calledWith(sendKeysBehaviorJavaUnderTest._executeWithEvents, sinon.match({ 0: "The Sample Text" }), "PressKey", "The Sample Text");
        });

        it("should pass default parameters to _executeWithEvents if modifiers is null", function () {
            sendKeysBehaviorJavaUnderTest.sendKeys("The Sample Text", null);
            sinon.assert.calledOnce(sendKeysBehaviorJavaUnderTest._executeWithEvents);
            sinon.assert.calledWith(sendKeysBehaviorJavaUnderTest._executeWithEvents, sinon.match({ 0: "The Sample Text" }), "PressKey", "The Sample Text");
        });

        it("should pass correct modifiers to _executeWithEvents with modifiers", function () {
            sendKeysBehaviorJavaUnderTest.sendKeys("F", KeyModifier.ctrl | KeyModifier.shift);
            sinon.assert.calledOnce(sendKeysBehaviorJavaUnderTest._executeWithEvents);
            sinon.assert.calledWith(sendKeysBehaviorJavaUnderTest._executeWithEvents, sinon.match({ 0: "F", 1: KeyModifier.ctrl | KeyModifier.shift }), "PressKey", "F", "<__MicCtrl><__MicShift>");
        });

        it("should pass correct string to _executeWithEvents with modifiers and FunctionKeys", function () {
            sendKeysBehaviorJavaUnderTest.sendKeys("The sample text" + FunctionKeys.f1, KeyModifier.ctrl | KeyModifier.shift);
            sinon.assert.calledOnce(sendKeysBehaviorJavaUnderTest._executeWithEvents);
            sinon.assert.calledWith(sendKeysBehaviorJavaUnderTest._executeWithEvents, sinon.match({ 0: "The sample text" + FunctionKeys.f1, 1: KeyModifier.ctrl | KeyModifier.shift }), "PressKey", "The sample text<__MicF1>", "<__MicCtrl><__MicShift>");
        });

        it("should keep output string the same as input if input contains only prefix", function () {
            sendKeysBehaviorJavaUnderTest.sendKeys("some <__ENTER text");
            sinon.assert.calledOnce(sendKeysBehaviorJavaUnderTest._executeWithEvents);
            sinon.assert.calledWith(sendKeysBehaviorJavaUnderTest._executeWithEvents, sinon.match({ 0: "some <__ENTER text" }), "PressKey", "some <__ENTER text");
        });

        it("should keep output string the same as input if input contains only suffix", function () {
            sendKeysBehaviorJavaUnderTest.sendKeys("some ENTER> text");
            sinon.assert.calledOnce(sendKeysBehaviorJavaUnderTest._executeWithEvents);
            sinon.assert.calledWith(sendKeysBehaviorJavaUnderTest._executeWithEvents, sinon.match({ 0: "some ENTER> text" }), "PressKey", "some ENTER> text");
        });

        it("should keep output string the same as input if input contains not legal key", function () {
            sendKeysBehaviorJavaUnderTest.sendKeys("some <__notlegalkey> text");
            sinon.assert.calledOnce(sendKeysBehaviorJavaUnderTest._executeWithEvents);
            sinon.assert.calledWith(sendKeysBehaviorJavaUnderTest._executeWithEvents, sinon.match({ 0: "some <__notlegalkey> text" }), "PressKey", "some <__notlegalkey> text");
        });

        it("should convert correctly if input with prefix without suffix", function () {
            var input = FunctionKeys.f2 + "some text" + "<__NotLegalKey" + "111";
            var expected = "<__MicF2>some text<__NotLegalKey111";
            sendKeysBehaviorJavaUnderTest.sendKeys(input);
            sinon.assert.calledOnce(sendKeysBehaviorJavaUnderTest._executeWithEvents);
            sinon.assert.calledWith(sendKeysBehaviorJavaUnderTest._executeWithEvents, sinon.match({ 0: input }), "PressKey", expected);
        });

        it("should convert correctly if input with suffix without prefix", function () {
            var input = "some text " + "NotLegalKey>" + "111";
            var expected = "some text NotLegalKey>111";
            sendKeysBehaviorJavaUnderTest.sendKeys(input);
            sinon.assert.calledOnce(sendKeysBehaviorJavaUnderTest._executeWithEvents);
            sinon.assert.calledWith(sendKeysBehaviorJavaUnderTest._executeWithEvents, sinon.match({ 0: input }), "PressKey", expected);
        });

        [[Keys.insert, "<__MicIns>"], [Keys.delete, "<__MicDel>"], [Keys.home, "<__MicHome>"], [Keys.end, "<__MicEnd>"],
            [Keys.pageUp, "<__MicPgUp>"], [Keys.pageDown, "<__MicPgDwn>"], [Keys.up, "<__MicUp>"], [Keys.down, "<__MicDwn>"],
            [Keys.left, "<__MicLeft>"], [Keys.right, "<__MicRight>"], [Keys.esc, "<__MicEsc>"], [Keys.backspace, "<__MicBack>"],
            [Keys.return, "<__MicReturn>"], [Keys.tab, "<__MicTab>"], [Keys.pause, "<__MicPause>"], [Keys.printScr,"<__MicPrintScr>"]].forEach(function(key) {
            it("should convert correctly if input string is " + key[0], function(){
                var input = key[0];
                var expected = key[1];
                sendKeysBehaviorJavaUnderTest.sendKeys(input);
                sinon.assert.calledOnce(sendKeysBehaviorJavaUnderTest._executeWithEvents);
                sinon.assert.calledWith(sendKeysBehaviorJavaUnderTest._executeWithEvents, sinon.match({ 0: input }), "PressKey", expected);
            });
        });

        it("should throw error if input contains keys", function() {
            assert.throws(function () {
                sendKeysBehaviorJavaUnderTest.sendKey(Keys.f1 + "some text");
            });
        });

        it("should throw error if modifiers is the WINDOW key", function () {
            assert.throws(function () {
                sendKeysBehaviorJavaUnderTest.sendKeys("some text", KeyModifier.windowsLogo);
            });
        });

        it("should throw error if modifiers is the LEFT WINDOW key", function () {
            assert.throws(function () {
                sendKeysBehaviorJavaUnderTest.sendKeys("some text", KeyModifier.leftWindowsLogo);
            });
        });

        it("should throw error if modifiers is the RIGHT WINDOW key", function () {
            assert.throws(function () {
                sendKeysBehaviorJavaUnderTest.sendKeys("some text", KeyModifier.rightWindowsLogo);
            });
        });
        
        it("should return true if modifiers contains the CTRL key", function() {
            var res = sendKeysBehaviorJavaUnderTest._containsCtrl(KeyModifier.ctrl);
            assert.strictEqual(res, true);
        });

        it("should return true if modifiers contains the LEFT CTRL key", function() {
            res = sendKeysBehaviorJavaUnderTest._containsCtrl(KeyModifier.leftCtrl);
            assert.strictEqual(res, true);
        });

        it("should return true if modifiers contains the RIGHT CTRL key", function() {
            res = sendKeysBehaviorJavaUnderTest._containsCtrl(KeyModifier.rightCtrl);
            assert.strictEqual(res, true);
        });

        it("should return true if modifiers contains the CTRL keys", function() {
            res = sendKeysBehaviorJavaUnderTest._containsCtrl(KeyModifier.ctrl | KeyModifier.leftCtrl | KeyModifier.rightCtrl);
            assert.strictEqual(res, true);
        });

        it("should return false if modifiers doesn't contain the CTRL key", function() {
            var res = sendKeysBehaviorJavaUnderTest._containsCtrl(KeyModifier.alt | KeyModifier.shift);
            assert.strictEqual(res, false);
        });

        it("should return true if modifiers contains the ALT key", function() {
            var res = sendKeysBehaviorJavaUnderTest._containsAlt(KeyModifier.alt);
            assert.strictEqual(res, true);
        });

        it("should return true if modifiers contains the LEFT ALT key", function() {
            res = sendKeysBehaviorJavaUnderTest._containsAlt(KeyModifier.leftAlt);
            assert.strictEqual(res, true);
        });

        it("should return true if modifiers contains the RIGHT ALT key", function() {
            res = sendKeysBehaviorJavaUnderTest._containsAlt(KeyModifier.rightAlt);
            assert.strictEqual(res, true);
        });

        it("should return true if modifiers contains the ALT keys", function() {
            res = sendKeysBehaviorJavaUnderTest._containsAlt(KeyModifier.alt | KeyModifier.leftAlt | KeyModifier.rightAlt);
            assert.strictEqual(res, true);
        });

        it("should return false if modifiers doesn't contain the ALT key", function() {
            var res = sendKeysBehaviorJavaUnderTest._containsAlt(KeyModifier.ctrl | KeyModifier.shift);
            assert.strictEqual(res, false);
        });

        it("should return true if modifiers contains the SHIFT key", function() {
            var res = sendKeysBehaviorJavaUnderTest._containsShift(KeyModifier.shift);
            assert.strictEqual(res, true);
        });

        it("should return true if modifiers contains the LEFT SHIFT key", function() {
            res = sendKeysBehaviorJavaUnderTest._containsShift(KeyModifier.leftShift);
            assert.strictEqual(res, true);
        });

        it("should return true if modifiers contains the RIGHT SHIFT key", function() {
            res = sendKeysBehaviorJavaUnderTest._containsShift(KeyModifier.rightShift);
            assert.strictEqual(res, true);
        });

        it("should return true if modifiers contains the SHIFT keys", function() {
            res = sendKeysBehaviorJavaUnderTest._containsShift(KeyModifier.shift | KeyModifier.leftShift | KeyModifier.rightShift);
            assert.strictEqual(res, true);
        });

        it("should return false if modifiers doesn't contain the SHIFT key", function() {
            var res = sendKeysBehaviorJavaUnderTest._containsShift(KeyModifier.ctrl | KeyModifier.alt);
            assert.strictEqual(res, false);
        });
    });
});