// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 9/8/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("TreeView Description", function () {
    var TreeView = require("../lib/tree_view.js").TreeView;
    var treeViewDescriptionUnderTest;

    beforeEach(function () {
        treeViewDescriptionUnderTest = TreeView();
    });

    describe("Constructor", function () {
        it("should assign 'Java' and 'TreeView' LeanFT type", function () {
            treeViewDescriptionUnderTest = new TreeView();
            assert.deepEqual(treeViewDescriptionUnderTest.leanFTType, {
                technology: "Java",
                leanftType: "TreeView"
            });
        });
    });

    describe("visibleNodesCount", function () {
        var visibleNodesCount = 50;
        it("should add 'items count' to _properties when value is given", function () {
            treeViewDescriptionUnderTest.visibleNodesCount(visibleNodesCount);
            assert.strictEqual(treeViewDescriptionUnderTest._properties["items count"], visibleNodesCount);
        });

        it("should add 'items count' to _properties when value is given in string", function () {
            treeViewDescriptionUnderTest.visibleNodesCount(visibleNodesCount.toString());
            assert.strictEqual(treeViewDescriptionUnderTest._properties["items count"], visibleNodesCount);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescriptionUnderTest.visibleNodesCount(visibleNodesCount);
            assert.strictEqual(result, treeViewDescriptionUnderTest);
        });

        it("should remove 'items count' from _properties when value is null", function () {
            treeViewDescriptionUnderTest._properties["items count"] = visibleNodesCount;
            treeViewDescriptionUnderTest.visibleNodesCount(null);
            assert(!("items count" in treeViewDescriptionUnderTest._properties));
        });

        it("should return the value of 'items count' from _properties when value is not given", function () {
            treeViewDescriptionUnderTest._properties["items count"] = visibleNodesCount;
            var result = treeViewDescriptionUnderTest.visibleNodesCount();
            assert.strictEqual(result, visibleNodesCount);
        });
    });

    describe("columnsCount", function () {
        var columns_count = 50;
        it("should add 'columns_count' to _properties when value is given", function () {
            treeViewDescriptionUnderTest.columnsCount(columns_count);
            assert.strictEqual(treeViewDescriptionUnderTest._properties["columns_count"], columns_count);
        });

        it("should add 'columns_count' to _properties when value is given in string", function () {
            treeViewDescriptionUnderTest.columnsCount(columns_count.toString());
            assert.strictEqual(treeViewDescriptionUnderTest._properties["columns_count"], columns_count);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescriptionUnderTest.columnsCount(columns_count);
            assert.strictEqual(result, treeViewDescriptionUnderTest);
        });

        it("should remove 'columns_count' from _properties when value is null", function () {
            treeViewDescriptionUnderTest._properties["columns_count"] = columns_count;
            treeViewDescriptionUnderTest.columnsCount(null);
            assert(!("columns_count" in treeViewDescriptionUnderTest._properties));
        });

        it("should return the value of 'columns_count' from _properties when value is not given", function () {
            treeViewDescriptionUnderTest._properties["columns_count"] = columns_count;
            var result = treeViewDescriptionUnderTest.columnsCount();
            assert.strictEqual(result, columns_count);
        });
    });

    describe("selectedNodes", function () {
        var selectedNodes = ["value1", "value2"];
        it("should add 'value' to _properties when value is given", function () {
            treeViewDescriptionUnderTest.selectedNodes(selectedNodes);
            assert.strictEqual(treeViewDescriptionUnderTest._properties["value"], selectedNodes.join("\u0018"));
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescriptionUnderTest.selectedNodes(selectedNodes);
            assert.strictEqual(result, treeViewDescriptionUnderTest);
        });

        it("should remove 'value' from _properties when value is null", function () {
            treeViewDescriptionUnderTest._properties["value"] = selectedNodes.join("\u0018");
            treeViewDescriptionUnderTest.selectedNodes(null);
            assert(!("value" in treeViewDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            treeViewDescriptionUnderTest._properties["value"] = selectedNodes.join("\u0018");
            var result = treeViewDescriptionUnderTest.selectedNodes();
            assert.deepEqual(result, selectedNodes);
        });
    });
});

describe("TreeView Test Object", function () {
    var TreeViewTO = require("../lib/tree_view.js").TreeViewTO;
    var TreeViewNode = require("../lib/treeview_node").TreeViewNode;
    var treeViewTestObjectUnderTest;
    var treeViewTestObjectMock;
    var removeExecutorMethods = function (array) {
        array.map(function (item) {
            delete item._executeWithEventsOnItem;
            delete item._executeWithEventsOnItemOnError;
        });
        return array;
    };

    beforeEach(function () {
        treeViewTestObjectUnderTest = new TreeViewTO();
        sinon.stub(treeViewTestObjectUnderTest, "_getROProperty");
        sinon.stub(treeViewTestObjectUnderTest, "_executeNotWrapped");
        sinon.stub(treeViewTestObjectUnderTest, "_executeWithEvents");
        sinon.stub(treeViewTestObjectUnderTest, "_executeWithEventsOnError");
        sinon.stub(treeViewTestObjectUnderTest, "_executeOnItemsCollection");
        sinon.stub(treeViewTestObjectUnderTest, "_executeSingleOpOnCollection");
        treeViewTestObjectMock = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
    });

    describe("visibleNodesCount method", function () {
        var visibleNodesCount = 2;
        var promiseMock = {
            then: function (cb) {
                return cb(visibleNodesCount.toString());
            }
        };
        it("should execute _getROProperty 'items count'", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            treeViewTestObjectUnderTest.visibleNodesCount();
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._getROProperty, "items count", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTestObjectUnderTest.visibleNodesCount();
            assert.strictEqual(res, visibleNodesCount);
        });
    });

    describe("columnsCount method", function () {
        var columnsCount = 2;
        var promiseMock = {
            then: function (cb) {
                return cb(columnsCount.toString());
            }
        };
        it("should execute _getROProperty 'items count'", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            treeViewTestObjectUnderTest.columnsCount();
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._getROProperty, "columns_count", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTestObjectUnderTest.columnsCount();
            assert.strictEqual(res, columnsCount);
        });
    });

    describe("selectedNodes method", function () {
        var nativeString = "";
        beforeEach(function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(nativeString);
                }
            };
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
        });
        it("should query the 'value' property", function () {
            treeViewTestObjectUnderTest.selectedNodes();
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._getROProperty, "value", sinon.match({}));
        });

        it("should return an empty list if no item is returned", function () {
            var selectedNodes = treeViewTestObjectUnderTest.selectedNodes();
            assert.deepEqual(selectedNodes, []);
        });

        it("should return a list if items are returned", function () {
            nativeString = "item1\u0018item2";
            var selectedNodes = removeExecutorMethods(treeViewTestObjectUnderTest.selectedNodes());
            assert.deepEqual(selectedNodes, removeExecutorMethods([new TreeViewNode(treeViewTestObjectUnderTest, "item1", "item1"), new TreeViewNode(treeViewTestObjectUnderTest, "item2", "item2")]));
        });
    });

    describe("buildNodePath method", function () {
        it("should return a correct path with node indices", function () {
            var res = treeViewTestObjectUnderTest.buildNodePath(1, 2, 3);
            assert.strictEqual(res, "#1;#2;#3");
        });

        it("should return a correct path with mixed nodes and indices", function () {
            var res = treeViewTestObjectUnderTest.buildNodePath(1, "node", 3);
            assert.strictEqual(res, "#1;node;#3");
        });

        it("should return a correct path with nodes", function () {
            var res = treeViewTestObjectUnderTest.buildNodePath("node1", "node2", "node3");
            assert.strictEqual(res, "node1;node2;node3");
        });

        it("should return an empty path if an empty list is passed", function () {
            var res = treeViewTestObjectUnderTest.buildNodePath();
            assert.strictEqual(res, "");
        });

        it("should throw error if one of indices is less than 0", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.buildNodePath(-1, 2, 4);
            });
        });

        it("should throw error if one of nodes isn't neither a string nor a number", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.buildNodePath(0, true, 4);
            });
        });
    });

    describe("activateNode method", function () {
        it("should execute command 'Activate' if the 'nodeOrPath' parameter is a TreeViewNode", function () {
            var node = new TreeViewNode(treeViewTestObjectMock, "nodeIdentifier", "nodeIdentifier");
            treeViewTestObjectUnderTest.activateNode(node);
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeWithEvents, sinon.match({0: node}), "Activate", node._getIdentifier());
        });

        it("should execute command 'Activate' if the 'nodeOrPath' parameter is node path", function () {
            treeViewTestObjectUnderTest.activateNode("node2");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeWithEvents, sinon.match({0: "node2"}), "Activate", "node2");
        });

        it("should throw error if the 'nodeOrPath' parameter is null", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.activateNode(null);
            });
        });

        it("should throw error if the 'nodeOrPath' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.activateNode();
            });
        });
    });

    describe("deselect method", function () {
        it("should execute command 'Deselect' if the 'nodesOrPaths' parameter is TreeViewNode nodes", function () {
            var node1 = new TreeViewNode(treeViewTestObjectMock, "node1", "node1");
            var node2 = new TreeViewNode(treeViewTestObjectMock, "node2", "node2");
            treeViewTestObjectUnderTest.deselect(node1, node2);
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeSingleOpOnCollection, sinon.match({
                0: node1,
                1: node2
            }), "Deselect", [node1, node2]);
        });

        it("should execute command 'Deselect' if the 'nodesOrPaths' parameter is node paths", function () {
            treeViewTestObjectUnderTest.deselect("node1", "node2");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeSingleOpOnCollection, sinon.match({
                0: "node1",
                1: "node2"
            }), "Deselect", ["node1", "node2"]);
        });

        it("should throw error if the 'nodesOrPaths' parameter is null", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.deselect(null);
            });
        });

        it("should throw error if the 'nodesOrPaths' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.deselect();
            });
        });
    });

    describe("extendSelect method", function () {
        it("should execute command 'ExtendSelect' if the 'nodesOrPaths' parameter is TreeViewNode nodes", function () {
            var node1 = new TreeViewNode(treeViewTestObjectMock, "node1", "node1");
            var node2 = new TreeViewNode(treeViewTestObjectMock, "node2", "node2");
            treeViewTestObjectUnderTest.extendSelect(node1, node2);
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeSingleOpOnCollection, sinon.match({
                0: node1,
                1: node2
            }), "ExtendSelect", [node1, node2]);
        });

        it("should execute command 'ExtendSelect' if the 'nodesOrPaths' parameter is node paths", function () {
            treeViewTestObjectUnderTest.extendSelect("node1", "node2");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeSingleOpOnCollection, sinon.match({
                0: "node1",
                1: "node2"
            }), "ExtendSelect", ["node1", "node2"]);
        });

        it("should throw error if the 'nodesOrPaths' parameter is null", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.extendSelect(null);
            });
        });

        it("should throw error if the 'nodesOrPaths' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.extendSelect();
            });
        });
    });

    describe("deselectRange method", function () {
        it("should execute command 'DeselectRange'", function () {
            treeViewTestObjectUnderTest.deselectRange("2", "8");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "2",
                1: "8"
            }), "DeselectRange", "2", "8");
        });

        it("should throw error if the 'fromNodePath' parameter is null", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.deselectRange(null, "8");
            });
        });

        it("should throw error if the 'fromNodePath' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.deselectRange(undefined, "8");
            });
        });

        it("should throw error if the 'toNodePath' parameter is null", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.deselectRange("2", null);
            });
        });

        it("should throw error if the 'toNodePath' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.deselectRange("2");
            });
        });
    });

    describe("getColumnHeader method", function () {
        it("should execute command 'GetColumnHeader' if the 'columnIndex' parameter is a number", function () {
            treeViewTestObjectUnderTest.getColumnHeader(2);
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeWithEventsOnError, sinon.match({0: 2}), "GetColumnHeader", 2);
        });

        it("should execute command 'GetColumnHeader' if the 'columnIndex' parameter is a numeric string", function () {
            treeViewTestObjectUnderTest.getColumnHeader("2");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeWithEventsOnError, sinon.match({0: "2"}), "GetColumnHeader", 2);
        });

        it("should throw error if the 'columnIndex' parameter is null", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.getColumnHeader(null);
            });
        });

        it("should throw error if the 'columnIndex' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.getColumnHeader();
            });
        });
    });

    describe("getNode method", function () {
        it("should return a TreeViewNode", function () {
            var node = treeViewTestObjectUnderTest.getNode("nodeIdentifier");
            assert.strictEqual(node._identifier, "nodeIdentifier");
            assert.strictEqual(node._textRepresentation, "nodeIdentifier");
            assert.deepEqual(node._ownerTreeView, treeViewTestObjectUnderTest);
        });

        it("should throw error if the 'nodePath' parameter is null", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.getNode(null);
            });
        });

        it("should throw error if the 'nodePath' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.getNode();
            });
        });
    });

    describe("select method", function () {
        it("should execute command 'Select' if the 'nodesOrPaths' parameter is TreeViewNode nodes", function () {
            var node1 = new TreeViewNode(treeViewTestObjectMock, "node1", "node1");
            var node2 = new TreeViewNode(treeViewTestObjectMock, "node2", "node2");
            treeViewTestObjectUnderTest.select(node1, node2);
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeOnItemsCollection, sinon.match({
                0: node1,
                1: node2
            }), "Select", "ExtendSelect", [node1, node2]);
        });

        it("should execute command 'Select' if the 'nodesOrPaths' parameter is node paths", function () {
            treeViewTestObjectUnderTest.select("node1", "node2");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeOnItemsCollection, sinon.match({
                0: "node1",
                1: "node2"
            }), "Select", "ExtendSelect", ["node1", "node2"]);
        });

        it("should throw error if the 'nodesOrPaths' parameter is null", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.select(null);
            });
        });

        it("should throw error if the 'nodesOrPaths' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.select();
            });
        });
    });

    describe("selectRange method", function () {
        it("should execute command 'SelectRange'", function () {
            treeViewTestObjectUnderTest.selectRange("2", "8");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "2",
                1: "8"
            }), "SelectRange", "2", "8");
        });

        it("should throw error if the 'fromNodePath' parameter is null", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.selectRange(null, "8");
            });
        });

        it("should throw error if the 'fromNodePath' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.selectRange(undefined, "8");
            });
        });

        it("should throw error if the 'toNodePath' parameter is null", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.selectRange("2", null);
            });
        });

        it("should throw error if the 'toNodePath' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.selectRange("2");
            });
        });
    });

    describe("_nodeCollapse method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTestObjectUnderTest._nodeCollapse("nodeIdentifier");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Collapse'", function () {
            treeViewTestObjectUnderTest._nodeCollapse("nodeIdentifier");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeNotWrapped, sinon.match({0: "nodeIdentifier"}), "Collapse", "nodeIdentifier");
        });
    });

    describe("_nodeExpand method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTestObjectUnderTest._nodeExpand("nodeIdentifier");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Expand'", function () {
            treeViewTestObjectUnderTest._nodeExpand("nodeIdentifier");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeNotWrapped, sinon.match({0: "nodeIdentifier"}), "Expand", "nodeIdentifier");
        });
    });

    describe("_nodeOpenContextMenu method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTestObjectUnderTest._nodeOpenContextMenu("nodeIdentifier");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'OpenContextMenu'", function () {
            treeViewTestObjectUnderTest._nodeOpenContextMenu("nodeIdentifier");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeNotWrapped, sinon.match({0: "nodeIdentifier"}), "OpenContextMenu", "nodeIdentifier");
        });
    });

    describe("_setNodeState method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTestObjectUnderTest._setNodeState("nodeIdentifier", 1);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'SetItemState'", function () {
            treeViewTestObjectUnderTest._setNodeState("nodeIdentifier", 1);
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeNotWrapped, sinon.match({0: "nodeIdentifier"}), "SetItemState", "nodeIdentifier", 1);
        });
    });

    describe("_setNodeChecked method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTestObjectUnderTest._setNodeChecked("nodeIdentifier", true);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'SetItemState'", function () {
            treeViewTestObjectUnderTest._setNodeChecked("nodeIdentifier", false);
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: "nodeIdentifier",
                1: false
            }), "SetItemState", "nodeIdentifier", 0);
        });
    });

    describe("_nodeClickState method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTestObjectUnderTest._nodeClickState("nodeIdentifier");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'SetItemState'", function () {
            treeViewTestObjectUnderTest._nodeClickState("nodeIdentifier");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeNotWrapped, sinon.match({0: "nodeIdentifier"}), "SetItemState", "nodeIdentifier", -1);
        });
    });

    describe("_nodeDoubleClickState method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTestObjectUnderTest._nodeDoubleClickState("nodeIdentifier");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'SetItemState'", function () {
            treeViewTestObjectUnderTest._nodeDoubleClickState("nodeIdentifier");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeNotWrapped, sinon.match({0: "nodeIdentifier"}), "SetItemState", "nodeIdentifier", -2);
        });
    });

    describe("_getNodeColumnValue method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTestObjectUnderTest._getNodeColumnValue("nodeIdentifier", 1);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetColumnValue' if the 'columnIndexOrName' parameter is a number", function () {
            treeViewTestObjectUnderTest._getNodeColumnValue("nodeIdentifier", 1);
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: "nodeIdentifier",
                1: 1
            }), "GetColumnValue", "nodeIdentifier", 1);
        });

        it("should execute _executeNotWrapped 'GetColumnValue' if the 'columnIndexOrName' parameter is a column name", function () {
            treeViewTestObjectUnderTest._getNodeColumnValue("nodeIdentifier", "some name");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: "nodeIdentifier",
                1: "some name"
            }), "GetColumnValue", "nodeIdentifier", "some name");
        });
    });

    describe("_createItem method", function () {
        it("should return the TreeViewNode with correct values", function () {
            var res = treeViewTestObjectUnderTest._createItem("some name", "some text");
            assert.strictEqual(res._identifier, "some name");
            assert.strictEqual(res._textRepresentation, "some text");
            assert.deepEqual(res._ownerTreeView, treeViewTestObjectUnderTest);
        });
    });
});