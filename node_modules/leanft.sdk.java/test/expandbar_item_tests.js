// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/26/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ExpandBarItem", function () {

    var ExpandBarItem = require("../lib/expandbar_item.js").ExpandBarItem;
    var expandBarItemUnderTest;
    var owner;
    beforeEach(function () {
        owner = {
            owner: "Owner",
            _executeWithEventsOnItem: sinon.stub(),
            _executeWithEventsOnItemOnError: sinon.stub()
        };
        expandBarItemUnderTest = new ExpandBarItem(owner, "identifier", "textRepresentation");
        expandBarItemUnderTest._executeWithEventsOnItem = sinon.stub();
        expandBarItemUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    afterEach(function () {
        delete expandBarItemUnderTest._executeWithEventsOnItem;
        delete expandBarItemUnderTest._executeWithEventsOnItemOnError;
    });

    describe("Constructor", function () {
        it("should assign correct values", function () {
            var parent = owner;
            expandBarItemUnderTest = new ExpandBarItem(owner, "identifier", "textRepresentation");
            assert.strictEqual(expandBarItemUnderTest._ownerExpandBar, parent);
            assert.strictEqual(expandBarItemUnderTest._identifier, "identifier");
            assert.strictEqual(expandBarItemUnderTest._textRepresentation, "textRepresentation");
        });
    });

    describe("label method", function () {
        it("should execute _getItemLabel with correct parameter", function () {
            expandBarItemUnderTest._ownerExpandBar._getItemLabel = sinon.stub();
            expandBarItemUnderTest.label();
            sinon.assert.calledOnce(expandBarItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(expandBarItemUnderTest._executeWithEventsOnItemOnError, expandBarItemUnderTest._ownerExpandBar._getItemLabel, "identifier");
        });

        it("should return what's returned from _getItemLabel as is", function () {
            expandBarItemUnderTest._executeWithEventsOnItemOnError.returns("identifier");
            var res = expandBarItemUnderTest.label();
            assert.strictEqual(res, "identifier");
        });
    });

    describe("collapse method", function () {
        it("should execute '_itemCollapse' with correct parameter", function () {
            expandBarItemUnderTest._ownerExpandBar._itemCollapse = sinon.stub();
            expandBarItemUnderTest.collapse();
            sinon.assert.calledOnce(expandBarItemUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(expandBarItemUnderTest._executeWithEventsOnItem, expandBarItemUnderTest._ownerExpandBar._itemCollapse, "identifier");
        });

        it("should return promise as is", function () {
            var executionPromise = {};
            expandBarItemUnderTest._executeWithEventsOnItem.returns(executionPromise);
            var res = expandBarItemUnderTest.collapse();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("expand method", function () {
        it("should execute '_itemExpand' with correct parameter", function () {
            expandBarItemUnderTest._ownerExpandBar._itemExpand = sinon.stub();
            expandBarItemUnderTest.expand();
            sinon.assert.calledOnce(expandBarItemUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(expandBarItemUnderTest._executeWithEventsOnItem, expandBarItemUnderTest._ownerExpandBar._itemExpand, "identifier");
        });

        it("should return promise as is", function () {
            var executionPromise = {};
            expandBarItemUnderTest._executeWithEventsOnItem.returns(executionPromise);
            var res = expandBarItemUnderTest.expand();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("_getIdentifier method", function () {
        it("should return correct values", function () {
            var res = expandBarItemUnderTest._getIdentifier();
            assert.strictEqual(res, "identifier");
        });
    });

    describe("_getTextRepresentation method", function () {
        it("should return correct values", function () {
            var res = expandBarItemUnderTest._getTextRepresentation();
            assert.strictEqual(res, "textRepresentation");
        });
    });
});
