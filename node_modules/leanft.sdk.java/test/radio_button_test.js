// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/17/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var Position = Core.Position;
var CheckedState = Core.CheckedState;
var JavaConvertHelper = require("../lib/ui_object_base.js").JavaConvertHelper;

describe("RadioButton Description", function () {

    var RadioButton = require("../lib/radio_button.js").RadioButton;
    var radiobuttonDescriptionUnderTest;

    beforeEach(function () {
        radiobuttonDescriptionUnderTest = RadioButton();
    });

    describe("isChecked method", function () {
        it("should add 'value' to _properties when value is given", function () {
            radiobuttonDescriptionUnderTest.isChecked(true);
            assert.strictEqual(radiobuttonDescriptionUnderTest._properties["value"], "1");
        });

        it("should add 'value' to _properties when value is given in string", function () {
            radiobuttonDescriptionUnderTest.isChecked("true");
            assert.strictEqual(radiobuttonDescriptionUnderTest._properties["value"], "1");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = radiobuttonDescriptionUnderTest.isChecked(true);
            assert.strictEqual(result, radiobuttonDescriptionUnderTest);
        });

        it("should remove 'value' from _properties when value is null", function () {
            radiobuttonDescriptionUnderTest._properties["value"] = "1";
            radiobuttonDescriptionUnderTest.isChecked(null);
            assert(!("value" in radiobuttonDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            radiobuttonDescriptionUnderTest._properties["value"] = "1";
            var result = radiobuttonDescriptionUnderTest.isChecked();
            assert.equal(result, true);
        });
    });
});

describe("RadioButton Test Object", function () {
    var Core = require("leanft.sdk.core");
    var RadioButtonTO = require("../lib/radio_button.js").RadioButtonTO;
    var radioTestObjectUnderTest;

    beforeEach(function () {
        radioTestObjectUnderTest = new RadioButtonTO();
        radioTestObjectUnderTest._getROProperty = sinon.stub();
        radioTestObjectUnderTest._executeWithEvents = sinon.stub();
    });

    describe("set method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            radioTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = radioTestObjectUnderTest.set();
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments", function () {
            radioTestObjectUnderTest.set();
            sinon.assert.calledOnce(radioTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(radioTestObjectUnderTest._executeWithEvents, sinon.match({}), "Set");
        });
    });

    describe("clear method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            radioTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = radioTestObjectUnderTest.clear();
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments", function () {
            radioTestObjectUnderTest.clear();
            sinon.assert.calledOnce(radioTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(radioTestObjectUnderTest._executeWithEvents, sinon.match({}), "Set", "OFF");
        });
    });

    describe("isChecked method", function () {
        ["1", "0"].forEach(function (isChecked) {
            var isCheckedAsBool = JavaConvertHelper.numericStringToBool(isChecked);
            describe("promise returns '" + isChecked + "'", function () {
                var promiseMock = {
                    then: function (cb) {
                        return cb(isChecked);
                    }
                };

                it("should execute _getROProperty 'isChecked'", function () {
                    radioTestObjectUnderTest._getROProperty.returns(promiseMock);
                    radioTestObjectUnderTest.isChecked();
                    sinon.assert.calledOnce(radioTestObjectUnderTest._getROProperty);
                    sinon.assert.calledWith(radioTestObjectUnderTest._getROProperty, "value", sinon.match({}));
                });

                it("should return " + isCheckedAsBool + " value", function () {
                    radioTestObjectUnderTest._getROProperty.returns(promiseMock);
                    var res = radioTestObjectUnderTest.isChecked();
                    assert.strictEqual(res, isCheckedAsBool);
                });
            });
        });
    });
});