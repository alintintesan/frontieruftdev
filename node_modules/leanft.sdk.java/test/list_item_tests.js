// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/19/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var Position = Core.Position;
var MouseButton = Core.MouseButton;

describe("List Item", function () {

    var ListItem = require("../lib/list_item.js").ListItem;
    var listItemUnderTest;
    var owner;

    beforeEach(function () {
        owner = { owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub() };
        listItemUnderTest = new ListItem(owner, 10, "TextRepresentation");
        listItemUnderTest._executeWithEventsOnItem = sinon.stub();
        listItemUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    afterEach(function () {
        delete listItemUnderTest._executeWithEventsOnItem;
        delete listItemUnderTest._executeWithEventsOnItemOnError;
        delete owner._executeWithEventsOnItem;
        delete owner._executeWithEventsOnItemOnError;
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            assert.strictEqual(listItemUnderTest._ownerList, owner);
            assert.strictEqual(listItemUnderTest._identifier, 10);
            assert.strictEqual(listItemUnderTest._textRepresentation, "TextRepresentation");
        });
    });

    describe("_getIdentifier method", function () {
        it("should return correct values", function () {
            var res = listItemUnderTest._getIdentifier();
            assert.strictEqual(res, 10);
        });
    });

    describe("index method", function () {
        it("should execute _getItemIndex with correct parameter", function () {
            listItemUnderTest._ownerList._getItemIndex = sinon.stub();
            listItemUnderTest.index();
            sinon.assert.calledOnce(listItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(listItemUnderTest._executeWithEventsOnItemOnError, listItemUnderTest._ownerList._getItemIndex, 10);
        });

        it("should return what's returned from _getItemIndex as is", function () {
            listItemUnderTest._executeWithEventsOnItemOnError.returns(0);
            var res = listItemUnderTest.index();
            assert.strictEqual(res, 0);
        });
    });
    
    describe("text method", function () {
        it("should execute _getItemText with correct parameter", function () {
            listItemUnderTest._ownerList._getItemText = sinon.stub();
            listItemUnderTest.text();
            sinon.assert.calledOnce(listItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(listItemUnderTest._executeWithEventsOnItemOnError, listItemUnderTest._ownerList._getItemText, 10);
        });

        it("should return string if _getItemText returns string", function () {
            listItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns("value");
            var res = listItemUnderTest.text();
            assert.strictEqual(res, "value");
        });
    });

    describe("_getTextRepresentation method", function () {
        it("should execute _getItemText with the correct parameter when _textRepresentation is null", function () {
            listItemUnderTest._ownerList._getItemText = sinon.stub().returns({then: sinon.stub()});
            listItemUnderTest._textRepresentation = null;
            listItemUnderTest._getTextRepresentation();
            sinon.assert.calledOnce(listItemUnderTest._ownerList._getItemText);
            sinon.assert.calledWith(listItemUnderTest._ownerList._getItemText, this._identifier);
        });
        it("should return correct values", function () {
            var res = listItemUnderTest._getTextRepresentation();
            assert.strictEqual(res, "TextRepresentation");
        });
    });


});
