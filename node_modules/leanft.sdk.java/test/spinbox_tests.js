// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 9/6/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("SpinBox Description", function () {
    var SpinBox = require("../lib/spin_box.js").SpinBox;
    var spinBoxDescriptionUnderTest;

    beforeEach(function () {
        spinBoxDescriptionUnderTest = SpinBox();
    });

    describe("Constructor", function () {
        it("should assign 'Java' and 'SpinBox' LeanFT type", function () {
            spinBoxDescriptionUnderTest = new SpinBox();
            assert.deepEqual(spinBoxDescriptionUnderTest.leanFTType, {
                technology: "Java",
                leanftType: "SpinBox"
            });
        });
    });

    describe("value", function () {
        var value = "50";
        it("should add 'value' to _properties when value is given", function () {
            spinBoxDescriptionUnderTest.value(value);
            assert.strictEqual(spinBoxDescriptionUnderTest._properties["value"], value);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = spinBoxDescriptionUnderTest.value(value);
            assert.strictEqual(result, spinBoxDescriptionUnderTest);
        });

        it("should remove 'value' from _properties when value is null", function () {
            spinBoxDescriptionUnderTest._properties["value"] = value;
            spinBoxDescriptionUnderTest.value(null);
            assert(!("value" in spinBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            spinBoxDescriptionUnderTest._properties["value"] = value;
            var result = spinBoxDescriptionUnderTest.value();
            assert.strictEqual(result, value);
        });
    });

    describe("maximum", function () {
        var maximum = "100";
        it("should add 'max' to _properties when value is given", function () {
            spinBoxDescriptionUnderTest.maximum(maximum);
            assert.strictEqual(spinBoxDescriptionUnderTest._properties["max"], maximum);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = spinBoxDescriptionUnderTest.maximum(maximum);
            assert.strictEqual(result, spinBoxDescriptionUnderTest);
        });

        it("should remove 'max' from _properties when value is null", function () {
            spinBoxDescriptionUnderTest._properties["max"] = maximum;
            spinBoxDescriptionUnderTest.maximum(null);
            assert(!("value" in spinBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            spinBoxDescriptionUnderTest._properties["max"] = maximum;
            var result = spinBoxDescriptionUnderTest.maximum();
            assert.strictEqual(result, maximum);
        });
    });

    describe("minimum", function () {
        var minimum = "1";
        it("should add 'min' to _properties when value is given", function () {
            spinBoxDescriptionUnderTest.minimum(minimum);
            assert.strictEqual(spinBoxDescriptionUnderTest._properties["min"], minimum);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = spinBoxDescriptionUnderTest.minimum(minimum);
            assert.strictEqual(result, spinBoxDescriptionUnderTest);
        });

        it("should remove 'min' from _properties when value is null", function () {
            spinBoxDescriptionUnderTest._properties["min"] = minimum;
            spinBoxDescriptionUnderTest.minimum(null);
            assert(!("value" in spinBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            spinBoxDescriptionUnderTest._properties["min"] = minimum;
            var result = spinBoxDescriptionUnderTest.minimum();
            assert.strictEqual(result, minimum);
        });
    });
});

describe("SpinBox Test Object", function () {
    var SpinBoxTO = require("../lib/spin_box.js").SpinBoxTO;
    var calendarTestObjectUnderTest;

    beforeEach(function () {
        calendarTestObjectUnderTest = new SpinBoxTO();
        sinon.stub(calendarTestObjectUnderTest, "_getROProperty");
        sinon.stub(calendarTestObjectUnderTest, "_executeWithEvents");
    });

    describe("value method", function () {
        it("should execute _getROProperty 'value'", function () {
            calendarTestObjectUnderTest.value();
            sinon.assert.calledOnce(calendarTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(calendarTestObjectUnderTest._getROProperty, "value", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            calendarTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = calendarTestObjectUnderTest.value();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("maximum method", function () {
        it("should execute _getROProperty 'max'", function () {
            calendarTestObjectUnderTest.maximum();
            sinon.assert.calledOnce(calendarTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(calendarTestObjectUnderTest._getROProperty, "max", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            calendarTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = calendarTestObjectUnderTest.maximum();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("minimum method", function () {
        it("should execute _getROProperty 'min'", function () {
            calendarTestObjectUnderTest.minimum();
            sinon.assert.calledOnce(calendarTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(calendarTestObjectUnderTest._getROProperty, "min", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            calendarTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = calendarTestObjectUnderTest.minimum();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("setValue method", function () {
        it("should execute _executeWithEvents 'Set'", function () {
            calendarTestObjectUnderTest.setValue("5");
            sinon.assert.calledOnce(calendarTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(calendarTestObjectUnderTest._executeWithEvents, sinon.match({0: "5"}), "Set", "5");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            calendarTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = calendarTestObjectUnderTest.setValue("5");
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'value' parameter is null", function () {
            assert.throws(function () {
                calendarTestObjectUnderTest.setValue(null);
            });
        });

        it("should throw error if the 'value' parameter is undefined", function () {
            assert.throws(function () {
                calendarTestObjectUnderTest.setValue();
            });
        });
    });

    describe("up method", function () {
        it("should execute _executeWithEvents 'Next'", function () {
            calendarTestObjectUnderTest.up();
            sinon.assert.calledOnce(calendarTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(calendarTestObjectUnderTest._executeWithEvents, sinon.match({}), "Next");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            calendarTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = calendarTestObjectUnderTest.up();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("down method", function () {
        it("should execute _executeWithEvents 'Next'", function () {
            calendarTestObjectUnderTest.down();
            sinon.assert.calledOnce(calendarTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(calendarTestObjectUnderTest._executeWithEvents, sinon.match({}), "Prev");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            calendarTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = calendarTestObjectUnderTest.down();
            assert.strictEqual(res, promiseMock);
        });
    });
});