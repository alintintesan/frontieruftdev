// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 9/8/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("TreeViewNode", function () {

    var TreeViewNode = require("../lib/treeview_node.js").TreeViewNode;
    var treeViewNodeUnderTest;
    var owner;
    beforeEach(function () {
        owner = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
        treeViewNodeUnderTest = new TreeViewNode(owner, "identifier", "textRepresentation");
        treeViewNodeUnderTest._executeWithEventsOnItem = sinon.stub();
        treeViewNodeUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    describe("Constructor", function () {
        it("should assign correct values", function () {
            var parent = owner;
            treeViewNodeUnderTest = new TreeViewNode(parent, "identifier", "textRepresentation");
            assert.strictEqual(treeViewNodeUnderTest._ownerTreeView, parent);
            assert.strictEqual(treeViewNodeUnderTest._identifier, "identifier");
            assert.strictEqual(treeViewNodeUnderTest._textRepresentation, "textRepresentation");
        });
    });

    describe("collapse method", function () {
        it("should execute _nodeCollapse with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._nodeCollapse = sinon.stub();
            treeViewNodeUnderTest.collapse();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._nodeCollapse, "identifier");
        });

        it("should return the promise as it is", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.collapse();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("expand method", function () {
        it("should execute _nodeExpand with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._nodeExpand = sinon.stub();
            treeViewNodeUnderTest.expand();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._nodeExpand, "identifier");
        });

        it("should return the promise as it is", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.expand();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("openContextMenu method", function () {
        it("should execute _nodeOpenContextMenu with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._nodeOpenContextMenu = sinon.stub();
            treeViewNodeUnderTest.openContextMenu();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._nodeOpenContextMenu, "identifier");
        });

        it("should return the promise as it is", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.openContextMenu();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("setNodeState method", function () {
        it("should execute _setNodeState with index as number", function () {
            treeViewNodeUnderTest._ownerTreeView._setNodeState = sinon.stub();
            treeViewNodeUnderTest.setNodeState(1);
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._setNodeState, "identifier", 1);
        });

        it("should execute _setNodeState with index as string", function () {
            treeViewNodeUnderTest._ownerTreeView._setNodeState = sinon.stub();
            treeViewNodeUnderTest.setNodeState("1");
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._setNodeState, "identifier", 1);
        });

        it("should return the promise as it is", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.setNodeState(1);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'index' parameter is null", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.setNodeState(null);
            });
        });

        it("should throw error if the 'index' parameter is undefined", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.setNodeState();
            });
        });

        it("should throw error if the 'index' parameter isn't a number", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.setNodeState("text");
            });
        });
    });

    describe("setChecked method", function () {
        it("should execute _setNodeChecked with state as bool", function () {
            treeViewNodeUnderTest._ownerTreeView._setNodeChecked = sinon.stub();
            treeViewNodeUnderTest.setChecked(true);
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._setNodeChecked, "identifier", true);
        });

        it("should execute _setNodeChecked with state as string", function () {
            treeViewNodeUnderTest._ownerTreeView._setNodeChecked = sinon.stub();
            treeViewNodeUnderTest.setChecked("true");
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._setNodeChecked, "identifier", true);
        });

        it("should return the promise as it is", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.setChecked(true);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'state' parameter is null", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.setChecked(null);
            });
        });

        it("should throw error if the 'state' parameter is undefined", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.setChecked();
            });
        });

        it("should throw error if the 'state' parameter is a bool", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.setChecked("text");
            });
        });
    });

    describe("clickState method", function () {
        it("should execute _nodeClickState with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._nodeClickState = sinon.stub();
            treeViewNodeUnderTest.clickState();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._nodeClickState, "identifier");
        });

        it("should return the promise as it is", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.clickState();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("doubleClickState method", function () {
        it("should execute _nodeDoubleClickState with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._nodeDoubleClickState = sinon.stub();
            treeViewNodeUnderTest.doubleClickState();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._nodeDoubleClickState, "identifier");
        });

        it("should return the promise as it is", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.doubleClickState();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("getColumnValue method", function () {
        it("should execute _getNodeColumnValue with columnIndexOrName as number", function () {
            treeViewNodeUnderTest._ownerTreeView._getNodeColumnValue = sinon.stub();
            treeViewNodeUnderTest.getColumnValue(1);
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItemOnError, treeViewNodeUnderTest._ownerTreeView._getNodeColumnValue, "identifier", 1);
        });

        it("should execute _getNodeColumnValue with columnIndexOrName as string", function () {
            treeViewNodeUnderTest._ownerTreeView._getNodeColumnValue = sinon.stub();
            treeViewNodeUnderTest.getColumnValue("column name");
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItemOnError, treeViewNodeUnderTest._ownerTreeView._getNodeColumnValue, "identifier", "column name");
        });

        it("should return the promise as it is", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItemOnError.returns(promiseMock);
            var res = treeViewNodeUnderTest.getColumnValue(1);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'columnIndexOrName' parameter is null", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.getColumnValue(null);
            });
        });

        it("should throw error if the 'columnIndexOrName' parameter is undefined", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.getColumnValue();
            });
        });
    });

    describe("_getIdentifier method", function () {
        it("should return correct values", function () {
            var res = treeViewNodeUnderTest._getIdentifier();
            assert.strictEqual(res, "identifier");
        });
    });

    describe("_getTextRepresentation method", function () {
        it("should return correct values", function () {
            var res = treeViewNodeUnderTest._getTextRepresentation();
            assert.strictEqual(res, "textRepresentation");
        });
    });
});
