// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/29/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ToolBar Description", function () {
    var ToolBar = require("../lib/tool_bar.js").ToolBar;
    var toolBarDescriptionUnderTest;

    beforeEach(function () {
        toolBarDescriptionUnderTest = ToolBar();
    });

    describe("Constructor", function () {
        it("should assign 'Java' and 'ToolBar' LeanFT type", function () {
            toolBarDescriptionUnderTest = new ToolBar();
            assert.deepEqual(toolBarDescriptionUnderTest.leanFTType, {
                technology: "Java",
                leanftType: "ToolBar"
            });
        });
    });
});

describe("ToolBar Test Object", function () {
    var ToolBarTO = require("../lib/tool_bar.js").ToolBarTO;
    var ToolBarButton = require("../lib/toolbar_button.js").ToolBarButton;
    var toolBarTestObjectUnderTest;

    var removeExecutorMethods = function (array) {
        array.map(function (item) {
            delete item._executeWithEventsOnItem;
            delete item._executeWithEventsOnItemOnError;
        });
        return array;
    };

    beforeEach(function () {
        toolBarTestObjectUnderTest = new ToolBarTO();
        sinon.stub(toolBarTestObjectUnderTest, "_executeCommand");
        sinon.stub(toolBarTestObjectUnderTest, "_executeNotWrapped");
    });

    describe("buttons method", function () {
        var itemsCount = 0;
        var content = "";
        beforeEach(function () {
            var getItemsCountPromise = {
                then: function (cb) {
                    return cb(itemsCount.toString());
                }
            };
            var getContentPromise = {
                then: function (cb) {
                    return cb(content);
                }
            };
            toolBarTestObjectUnderTest._executeCommand.withArgs("GetItemsCount").returns(getItemsCountPromise);
            toolBarTestObjectUnderTest._executeCommand.withArgs("GetContent").returns(getContentPromise);
        });

        it("should execute command 'GetItemsCount' and 'GetContent'", function () {
            toolBarTestObjectUnderTest.buttons();
            sinon.assert.calledTwice(toolBarTestObjectUnderTest._executeCommand);
            sinon.assert.calledWith(toolBarTestObjectUnderTest._executeCommand, "GetItemsCount");
            sinon.assert.calledWith(toolBarTestObjectUnderTest._executeCommand, "GetContent");
        });

        it("should return an empty list if no item is returned", function () {
            var buttons = toolBarTestObjectUnderTest.buttons();
            assert.deepEqual(buttons, []);
        });

        it("should return a list if items are returned", function () {
            itemsCount = 2;
            content = "item1;item2";
            var buttons = removeExecutorMethods(toolBarTestObjectUnderTest.buttons());
            assert.deepEqual(buttons, removeExecutorMethods([new ToolBarButton(toolBarTestObjectUnderTest, 1, "item1"), new ToolBarButton(toolBarTestObjectUnderTest, 2, "item2")]));
        });
    });

    describe("selectedButtons method", function () {
        var itemsString;
        beforeEach(function () {
            var getSelectionPromise = {
                then: function (cb) {
                    return cb(itemsString);
                }
            };
            toolBarTestObjectUnderTest._executeCommand.returns(getSelectionPromise);
        });

        it("should execute command 'GetSelection'", function () {
            itemsString = "";
            var selectedButtons = toolBarTestObjectUnderTest.selectedButtons();
            sinon.assert.calledOnce(toolBarTestObjectUnderTest._executeCommand);
            sinon.assert.calledWith(toolBarTestObjectUnderTest._executeCommand, "GetSelection");
        });

        it("should return an empty list if no item is returned", function () {
            itemsString = "";
            var selectedButtons = toolBarTestObjectUnderTest.selectedButtons();
            assert.deepEqual(selectedButtons, []);
        });

        it("should return a list if items are returned", function () {
            itemsString = "item1;item2";
            var selectedButtons = removeExecutorMethods(toolBarTestObjectUnderTest.selectedButtons());
            assert.deepEqual(selectedButtons, removeExecutorMethods([new ToolBarButton(toolBarTestObjectUnderTest, "item1", "item1"), new ToolBarButton(toolBarTestObjectUnderTest, "item2", "item2")]));
        });
    });

    describe("getButton method", function () {
        it("should return a ToolBarButton", function () {
            var button = toolBarTestObjectUnderTest.getButton("itemLabel");
            assert.strictEqual(button._identifier, "itemLabel");
            assert.strictEqual(button._textRepresentation, "itemLabel");
            assert.deepEqual(button._ownerToolBar, toolBarTestObjectUnderTest);
        });

        it("should throw error if the 'text' parameter is null", function () {
            assert.throws(function () {
                toolBarTestObjectUnderTest.getButton(null);
            });
        });

        it("should throw error if the 'text' parameter is undefined", function () {
            assert.throws(function () {
                toolBarTestObjectUnderTest.getButton();
            });
        });
    });

    describe("_pressItem method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTestObjectUnderTest._pressItem(0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Press' with correct parameters, if input is number", function () {
            toolBarTestObjectUnderTest._pressItem(0);
            sinon.assert.calledOnce(toolBarTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTestObjectUnderTest._executeNotWrapped, sinon.match({0: 0}), "Press", 0);
        });

        it("should execute _executeNotWrapped 'Press' with correct parameters, if input is string", function () {
            toolBarTestObjectUnderTest._pressItem("Item1");
            sinon.assert.calledOnce(toolBarTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTestObjectUnderTest._executeNotWrapped, sinon.match({0: "Item1"}), "Press", "Item1");
        });
    });

    describe("_showDropdown method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTestObjectUnderTest._showDropdown(0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Press' with correct parameters, if input is number", function () {
            toolBarTestObjectUnderTest._showDropdown(0);
            sinon.assert.calledOnce(toolBarTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTestObjectUnderTest._executeNotWrapped, sinon.match({0: 0}), "ShowDropdown", 0);
        });

        it("should execute _executeNotWrapped 'Press' with correct parameters, if input is string", function () {
            toolBarTestObjectUnderTest._showDropdown("Item1");
            sinon.assert.calledOnce(toolBarTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTestObjectUnderTest._executeNotWrapped, sinon.match({0: "Item1"}), "ShowDropdown", "Item1");
        });
    });

    describe("_isItemEnabled method", function () {
        var executionPromise;
        beforeEach(function () {
            executionPromise = {
                then: function (cb) {
                    return cb("1");
                }
            };
            toolBarTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
        });

        it("should return a bool if promise returns a numeric string", function () {
            var res = toolBarTestObjectUnderTest._isItemEnabled(0);
            assert.strictEqual(res, true);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTestObjectUnderTest._isItemEnabled(0);
            sinon.assert.calledOnce(toolBarTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTestObjectUnderTest._executeNotWrapped, sinon.match({0: 0}), "GetItemProperty", 0, "enabled");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTestObjectUnderTest._isItemEnabled("Item1");
            sinon.assert.calledOnce(toolBarTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTestObjectUnderTest._executeNotWrapped, sinon.match({0: "Item1"}), "GetItemProperty", "Item1", "enabled");
        });
    });

    describe("_getItemIndex method", function () {
        var executionPromise;
        beforeEach(function () {
            executionPromise = {
                then: function (cb) {
                    return cb("1");
                }
            };
            toolBarTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
        });

        it("should return a bool if promise returns a numeric string", function () {
            var res = toolBarTestObjectUnderTest._getItemIndex(0);
            assert.strictEqual(res, 0);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTestObjectUnderTest._getItemIndex(0);
            sinon.assert.calledOnce(toolBarTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTestObjectUnderTest._executeNotWrapped, sinon.match({0: 0}), "GetItemProperty", 0, "index");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTestObjectUnderTest._getItemIndex("Item1");
            sinon.assert.calledOnce(toolBarTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTestObjectUnderTest._executeNotWrapped, sinon.match({0: "Item1"}), "GetItemProperty", "Item1", "index");
        });
    });

    describe("_getItemName method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTestObjectUnderTest._getItemName(0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Press' with correct parameters, if input is number", function () {
            toolBarTestObjectUnderTest._getItemName(0);
            sinon.assert.calledOnce(toolBarTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTestObjectUnderTest._executeNotWrapped, sinon.match({0: 0}), "GetItemProperty", 0, "name");
        });

        it("should execute _executeNotWrapped 'Press' with correct parameters, if input is string", function () {
            toolBarTestObjectUnderTest._getItemName("Item1");
            sinon.assert.calledOnce(toolBarTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTestObjectUnderTest._executeNotWrapped, sinon.match({0: "Item1"}), "GetItemProperty", "Item1", "name");
        });
    });

    describe("_isItemSelected method", function () {
        var executionPromise;
        beforeEach(function () {
            executionPromise = {
                then: function (cb) {
                    return cb("1");
                }
            };
            toolBarTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
        });

        it("should return a bool if promise returns a numeric string", function () {
            var res = toolBarTestObjectUnderTest._isItemSelected(0);
            assert.strictEqual(res, true);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTestObjectUnderTest._isItemSelected(0);
            sinon.assert.calledOnce(toolBarTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTestObjectUnderTest._executeNotWrapped, sinon.match({0: 0}), "GetItemProperty", 0, "selected");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTestObjectUnderTest._isItemSelected("Item1");
            sinon.assert.calledOnce(toolBarTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTestObjectUnderTest._executeNotWrapped, sinon.match({0: "Item1"}), "GetItemProperty", "Item1", "selected");
        });
    });

    describe("_createItem method", function () {
        it("should return the ToolBarButton with correct values", function () {
            var res = toolBarTestObjectUnderTest._createItem(1, "Item1");
            assert.strictEqual(res._identifier, 1);
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerToolBar, toolBarTestObjectUnderTest);
        });
    });
});