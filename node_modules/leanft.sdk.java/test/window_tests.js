// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Window Description", function () {

    var Window = require("../lib/window.js").Window;
    var windowDescriptionUnderTest;

    beforeEach(function () {
        windowDescriptionUnderTest = Window();
    });

    describe("Constructor", function () {
        it("should assign 'Java' and 'Window' LeanFT type", function () {
            windowDescriptionUnderTest = new Window();
            assert.deepEqual(windowDescriptionUnderTest.leanFTType, {
                technology: "Java",
                leanftType: "Window"
            });
        });
    });

    describe("isJavaWindow method", function () {
        it("should add 'java window' to _properties when value is given", function () {
            windowDescriptionUnderTest.isJavaWindow(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["java window"], "1");
        });

        it("should add 'java window' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isJavaWindow("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["java window"], "1");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isJavaWindow(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'java window' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["java window"] = "1";
            windowDescriptionUnderTest.isJavaWindow(null);
            assert(!("java window" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'java window' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["java window"] = "1";
            var result = windowDescriptionUnderTest.isJavaWindow();
            assert.strictEqual(result, true);
        });
    });

    describe("isMaximizable method", function () {
        it("should add 'maximizable' to _properties when value is given", function () {
            windowDescriptionUnderTest.isMaximizable(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["maximizable"], "1");
        });

        it("should add 'maximizable' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isMaximizable("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["maximizable"], "1");
        });       

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isMaximizable(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'maximizable' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["maximizable"] = "1";
            windowDescriptionUnderTest.isMaximizable(null);
            assert(!("maximizable" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'maximizable' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["maximizable"] = "1";
            var result = windowDescriptionUnderTest.isMaximizable();
            assert.strictEqual(result, true);
        });
    });

    describe("isMinimizable method", function () {
        it("should add 'minimizable' to _properties when value is given", function () {
            windowDescriptionUnderTest.isMinimizable(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["minimizable"], "1");
        });

        it("should add 'minimizable' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isMinimizable("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["minimizable"], "1");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isMinimizable(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'minimizable' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["minimizable"] = "1";
            windowDescriptionUnderTest.isMinimizable(null);
            assert(!("minimizable" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'minimizable' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["minimizable"] = "1";
            var result = windowDescriptionUnderTest.isMinimizable();
            assert.strictEqual(result, true);
        });
    });

    describe("isResizable method", function () {
        it("should add 'resizable' to _properties when value is given", function () {
            windowDescriptionUnderTest.isResizable(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["resizable"], "1");
        });

        it("should add 'resizable' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isResizable("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["resizable"], "1");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isResizable(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'resizable' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["resizable"] = "1";
            windowDescriptionUnderTest.isResizable(null);
            assert(!("resizable" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'resizable' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["resizable"] = "1";
            var result = windowDescriptionUnderTest.isResizable();
            assert.strictEqual(result, true);
        });
    });

    describe("title method", function () {
        it("should add 'title' to _properties when value is given", function () {
            windowDescriptionUnderTest.title("title");
            assert.strictEqual(windowDescriptionUnderTest._properties["title"], "title");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.title(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'title' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["title"] = "title";
            windowDescriptionUnderTest.title(null);
            assert(!("title" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'title' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["title"] = "title";
            var result = windowDescriptionUnderTest.title();
            assert.equal(result, "title");
        });
    });
});

describe("Window Test Object", function () {
    var Core = require("leanft.sdk.core");
    var WindowState = Core.WindowState;
    var WindowTO = require("../lib/window.js").WindowTO;
    var windowTestObjectUnderTest;

    beforeEach(function () {
        windowTestObjectUnderTest = new WindowTO();
        sinon.stub(windowTestObjectUnderTest, "_getROProperty");
        sinon.stub(windowTestObjectUnderTest, "_executeWithEvents");
        sinon.stub(windowTestObjectUnderTest, "_getROProperties");
    });

    describe("isJavaWindow method", function () {
        var promiseMock = { then: function (cb) { return cb("1"); } };
        it("should execute _getROProperty 'java window'", function () {
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            windowTestObjectUnderTest.isJavaWindow();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "java window", sinon.match({}));
        });

        it("should return bool value when promise returns numeric string", function () {
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.isJavaWindow();
            assert.strictEqual(res, true);
        });
    });

    describe("isMaximizable method", function () {
        var promiseMock = { then: function (cb) { return cb("1"); } };
        it("should execute _getROProperty 'maximizable'", function () {
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            windowTestObjectUnderTest.isMaximizable();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "maximizable", sinon.match({}));
        });

        it("should return bool value when promise returns numeric string", function () {
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.isMaximizable();
            assert.strictEqual(res, true);
        });
    });

    describe("isMinimizable method", function () {
        var promiseMock = { then: function (cb) { return cb("1"); } };
        it("should execute _getROProperty 'minimizable'", function () {
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            windowTestObjectUnderTest.isMinimizable();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "minimizable", sinon.match({}));
        });

        it("should return bool value when promise returns numeric string", function () {
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.isMinimizable();
            assert.strictEqual(res, true);
        });
    });

    describe("isResizable method", function () {
        var promiseMock = { then: function (cb) { return cb("1"); } };
        it("should execute _getROProperty 'resizable'", function () {
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            windowTestObjectUnderTest.isResizable();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "resizable", sinon.match({}));
        });

        it("should return bool value when promise returns numeric string", function () {
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.isResizable();
            assert.strictEqual(res, true);
        });
    });

    describe("title method", function () {
        it("should execute _getROProperty 'title'", function () {
            windowTestObjectUnderTest.title();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "title", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.title();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("windowState method", function () {
        var promiseMock = { then: function (cb) { return cb(["1", "0"]); } };
        it("should query the properties 'maximized', 'minimized'", function () {
            windowTestObjectUnderTest._getROProperties.returns(promiseMock);
            windowTestObjectUnderTest.windowState();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperties);
            assert.deepEqual(windowTestObjectUnderTest._getROProperties.firstCall.args, ["maximized", "minimized"]);
        });

        it("should return WindowState value", function () {
            windowTestObjectUnderTest._getROProperties.returns(promiseMock);
            var res = windowTestObjectUnderTest.windowState();
            assert.strictEqual(res, WindowState.maximized);
        });
    });

    describe("activate method", function () {
        it("should execute command 'Activate'", function () {
            windowTestObjectUnderTest.activate();
            sinon.assert.calledOnce(windowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTestObjectUnderTest._executeWithEvents, sinon.match({}), "Activate");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            windowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = windowTestObjectUnderTest.activate();
            assert.equal(res, executionPromise);
        });
    });
});
