// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/31/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ToolBarButton", function () {

    var ToolBarButton = require("../lib/toolbar_button.js").ToolBarButton;
    var toolBarButtonUnderTest;
    var owner;
    beforeEach(function () {
        owner = { owner: "Owner", _executeWithEventsOnItem : sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub() };
        toolBarButtonUnderTest = new ToolBarButton(owner, 1, "textRepresentation");
        toolBarButtonUnderTest._executeWithEventsOnItem = sinon.stub();
        toolBarButtonUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    describe("Constructor", function () {
        it("should assign correct values", function () {
            var parent = owner;
            toolBarButtonUnderTest = new ToolBarButton(parent, 1, "textRepresentation");
            assert.strictEqual(toolBarButtonUnderTest._ownerToolBar, parent);
            assert.strictEqual(toolBarButtonUnderTest._identifier, 1);
            assert.strictEqual(toolBarButtonUnderTest._textRepresentation, "textRepresentation");
        });        
    });

    describe("isEnabled method", function () {
        it("should execute _isItemEnabled with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._isItemEnabled = sinon.stub();
            toolBarButtonUnderTest.isEnabled();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._isItemEnabled, 1);
        });

        it("should return what's returned from _isItemEnabled as is", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError.returns(true);
            var res = toolBarButtonUnderTest.isEnabled();
            assert.strictEqual(res, true);
        });
    });

    describe("index method", function () {
        it("should execute _getItemIndex with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._getItemIndex = sinon.stub();
            toolBarButtonUnderTest.index();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._getItemIndex, 1);
        });

        it("should return what's returned from _getItemIndex as is", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError.returns(0);
            var res = toolBarButtonUnderTest.index();
            assert.strictEqual(res, 0);
        });
    });

    describe("isSelected method", function () {
        it("should execute _isItemSelected with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._isItemSelected = sinon.stub();
            toolBarButtonUnderTest.isSelected();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._isItemSelected, 1);
        });

        it("should return what's returned from _isItemSelected as is", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError.returns(true);
            var res = toolBarButtonUnderTest.isSelected();
            assert.strictEqual(res, true);
        });
    });

    describe("name method", function () {
        it("should execute _getItemName with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._getItemName = sinon.stub();
            toolBarButtonUnderTest.name();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._getItemName, 1);
        });

        it("should return what's returned from _getItemName as is", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError.returns("The Name");;
            var res = toolBarButtonUnderTest.name();
            assert.strictEqual(res, "The Name");
        });
    });

    describe("showDropdown method", function () {
        it("should execute _showDropdown with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._showDropdown = sinon.stub();
            toolBarButtonUnderTest.showDropdown();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItem, toolBarButtonUnderTest._ownerToolBar._showDropdown, 1);
        });

        it("should return the promise as is", function () {
            var promiseMock = {};
            toolBarButtonUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = toolBarButtonUnderTest.showDropdown();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("press method", function () {
        it("should execute _pressItem with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._pressItem = sinon.stub();
            toolBarButtonUnderTest.press();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItem, toolBarButtonUnderTest._ownerToolBar._pressItem, 1);
        });

        it("should return the promise as is", function () {
            var promiseMock = {};
            toolBarButtonUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = toolBarButtonUnderTest.press();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("_getIdentifier method", function () {
        it("should return correct values", function () {
            var res = toolBarButtonUnderTest._getIdentifier();
            assert.strictEqual(res, 1);
        });
    });

    describe("_getTextRepresentation method", function () {
        it("should return correct values", function () {
            var res = toolBarButtonUnderTest._getTextRepresentation();
            assert.strictEqual(res, "textRepresentation");
        });
    });
});
