// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/23/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("TabControl Description", function () {
    var TabControl = require("../lib/tab_control.js").TabControl;
    var tabControlDescriptionUnderTest;

    beforeEach(function () {
        tabControlDescriptionUnderTest = TabControl();
    });

    describe("Constructor", function () {
        it("should assign 'Java' and 'TabControl' LeanFT type", function () {
            tabControlDescriptionUnderTest = new TabControl();
            assert.deepEqual(tabControlDescriptionUnderTest.leanFTType, {
                technology: "Java",
                leanftType: "TabControl"
            });
        });
    });

    describe("tabsCount", function () {
        var tabsCount = 2;
        it("should add 'items count' to _properties when value is given", function () {
            tabControlDescriptionUnderTest.tabsCount(tabsCount);
            assert.strictEqual(tabControlDescriptionUnderTest._properties["items count"], tabsCount);
        });

        it("should add 'items count' to _properties when value is given in string", function () {
            tabControlDescriptionUnderTest.tabsCount(tabsCount.toString());
            assert.strictEqual(tabControlDescriptionUnderTest._properties["items count"], tabsCount);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tabControlDescriptionUnderTest.tabsCount(tabsCount);
            assert.strictEqual(result, tabControlDescriptionUnderTest);
        });

        it("should return this - builder pattern when value is null", function () {
            var result = tabControlDescriptionUnderTest.tabsCount(null);
            assert.strictEqual(result, tabControlDescriptionUnderTest);
        });

        it("should remove 'items count' from _properties when value is null", function () {
            tabControlDescriptionUnderTest._properties["items count"] = tabsCount;
            tabControlDescriptionUnderTest.tabsCount(null);
            assert(!("items count" in tabControlDescriptionUnderTest._properties));
        });

        it("should return the value of 'items count' from _properties when value is not given", function () {
            tabControlDescriptionUnderTest._properties["items count"] = tabsCount;
            var result = tabControlDescriptionUnderTest.tabsCount();
            assert.strictEqual(result, tabsCount);
        });
    });

    describe("selectedTab", function () {
        var selectedTab = "selected tab";
        it("should add 'value' to _properties when value is given", function () {
            tabControlDescriptionUnderTest.selectedTab(selectedTab);
            assert.strictEqual(tabControlDescriptionUnderTest._properties["value"], selectedTab);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tabControlDescriptionUnderTest.selectedTab(selectedTab);
            assert.strictEqual(result, tabControlDescriptionUnderTest);
        });

        it("should remove 'value' from _properties when value is null", function () {
            tabControlDescriptionUnderTest._properties["value"] = selectedTab;
            tabControlDescriptionUnderTest.selectedTab(null);
            assert(!("value" in tabControlDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            tabControlDescriptionUnderTest._properties["value"] = selectedTab;
            var result = tabControlDescriptionUnderTest.selectedTab();
            assert.strictEqual(result, selectedTab);
        });
    });

    describe("origLogicalLocation", function () {
        var origLogicalLocation = "X_SMALL__Y_FULL";
        it("should add 'orig_logical_location' to _properties when value is given", function () {
            tabControlDescriptionUnderTest.origLogicalLocation(origLogicalLocation);
            assert.strictEqual(tabControlDescriptionUnderTest._properties["orig_logical_location"], origLogicalLocation);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tabControlDescriptionUnderTest.origLogicalLocation(origLogicalLocation);
            assert.strictEqual(result, tabControlDescriptionUnderTest);
        });

        it("should remove 'value' from _properties when value is null", function () {
            tabControlDescriptionUnderTest._properties["orig_logical_location"] = origLogicalLocation;
            tabControlDescriptionUnderTest.origLogicalLocation(null);
            assert(!("orig_logical_location" in tabControlDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            tabControlDescriptionUnderTest._properties["orig_logical_location"] = origLogicalLocation;
            var result = tabControlDescriptionUnderTest.origLogicalLocation();
            assert.strictEqual(result, origLogicalLocation);
        });
    });
});

describe("TabControl Test Object", function () {
    var TabControlTO = require("../lib/tab_control.js").TabControlTO;
    var tabControlTestObjectUnderTest;

    beforeEach(function () {
        tabControlTestObjectUnderTest = new TabControlTO();
        sinon.stub(tabControlTestObjectUnderTest, "_getROProperty");
        sinon.stub(tabControlTestObjectUnderTest, "_executeWithEvents");
    });

    describe("tabsCount method", function () {
        var tabsCount = 2;
        var promiseMock = {
            then: function (cb) {
                return cb(tabsCount.toString());
            }
        };
        it("should execute _getROProperty 'items count'", function () {
            tabControlTestObjectUnderTest._getROProperty.returns(promiseMock);
            tabControlTestObjectUnderTest.tabsCount();
            sinon.assert.calledOnce(tabControlTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tabControlTestObjectUnderTest._getROProperty, "items count", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            tabControlTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = tabControlTestObjectUnderTest.tabsCount();
            assert.strictEqual(res, tabsCount);
        });
    });

    describe("selectedTab method", function () {
        it("should execute _getROProperty 'value'", function () {
            tabControlTestObjectUnderTest.selectedTab();
            sinon.assert.calledOnce(tabControlTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tabControlTestObjectUnderTest._getROProperty, "value", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tabControlTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = tabControlTestObjectUnderTest.selectedTab();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("origLogicalLocation method", function () {
        it("should execute _getROProperty 'orig_logical_location'", function () {
            tabControlTestObjectUnderTest.origLogicalLocation();
            sinon.assert.calledOnce(tabControlTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tabControlTestObjectUnderTest._getROProperty, "orig_logical_location", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tabControlTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = tabControlTestObjectUnderTest.origLogicalLocation();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("close method", function () {
        var tabToClose = "tab1";
        it("should execute command 'Close' with string parameter", function () {
            tabControlTestObjectUnderTest.close(tabToClose);
            sinon.assert.calledOnce(tabControlTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTestObjectUnderTest._executeWithEvents, sinon.match({0: tabToClose}), "CloseTab", tabToClose);
        });

        it("should return the execution promise with string parameter", function () {
            var executionPromise = {};
            tabControlTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = tabControlTestObjectUnderTest.close(tabToClose);
            assert.strictEqual(res, executionPromise);
        });

        var tabIndexToClose = 1;
        it("should execute command 'Close' with number parameter", function () {
            tabControlTestObjectUnderTest.close(tabIndexToClose);
            sinon.assert.calledOnce(tabControlTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTestObjectUnderTest._executeWithEvents, sinon.match({0: tabIndexToClose}), "CloseTab", tabIndexToClose);
        });

        it("should return the execution promise with number parameter", function () {
            var executionPromise = {};
            tabControlTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = tabControlTestObjectUnderTest.close(tabIndexToClose);
            assert.strictEqual(res, executionPromise);
        });

        it("should throw error if the 'tabOrIndex' parameter is null", function () {
            assert.throws(function () {
                tabControlTestObjectUnderTest.close(null);
            });
        });

        it("should throw error if the 'tabOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tabControlTestObjectUnderTest.close();
            });
        });
    });

    describe("select method", function () {
        var tabToSelect = "tab1";
        it("should execute command 'Close' with string parameter", function () {
            tabControlTestObjectUnderTest.select(tabToSelect);
            sinon.assert.calledOnce(tabControlTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTestObjectUnderTest._executeWithEvents, sinon.match({0: tabToSelect}), "Select", tabToSelect);
        });

        it("should return the execution promise with string parameter", function () {
            var executionPromise = {};
            tabControlTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = tabControlTestObjectUnderTest.select(tabToSelect);
            assert.strictEqual(res, executionPromise);
        });

        var tabIndexToSelect = 1;
        it("should execute command 'Close' with number parameter", function () {
            tabControlTestObjectUnderTest.select(tabIndexToSelect);
            sinon.assert.calledOnce(tabControlTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTestObjectUnderTest._executeWithEvents, sinon.match({0: tabIndexToSelect}), "Select", tabIndexToSelect);
        });

        it("should return the execution promise with number parameter", function () {
            var executionPromise = {};
            tabControlTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = tabControlTestObjectUnderTest.select(tabIndexToSelect);
            assert.strictEqual(res, executionPromise);
        });

        it("should throw error if the 'tabOrIndex' parameter is null", function () {
            assert.throws(function () {
                tabControlTestObjectUnderTest.select(null);
            });
        });

        it("should throw error if the 'tabOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tabControlTestObjectUnderTest.select();
            });
        });
    });
});
