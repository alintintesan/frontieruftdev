// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 9/6/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Label Description", function () {
    var Label = require("../lib/label.js").Label;
    var labelDescriptionUnderTest;

    beforeEach(function () {
        labelDescriptionUnderTest = Label();
    });

    describe("Constructor", function () {
        it("should assign 'Java' and 'Label' LeanFT type", function () {
            labelDescriptionUnderTest = new Label();
            assert.deepEqual(labelDescriptionUnderTest.leanFTType, {
                technology: "Java",
                leanftType: "Label"
            });
        });
    });
    
    describe("text", function () {
        it("should add 'text' to _properties when value is given", function () {
            labelDescriptionUnderTest.text("text");
            assert.strictEqual(labelDescriptionUnderTest._properties["text"], "text");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = labelDescriptionUnderTest.text("text");
            assert.strictEqual(result, labelDescriptionUnderTest);
        });

        it("should remove 'text' from _properties when value is null", function () {
            labelDescriptionUnderTest._properties["text"] = "text";
            labelDescriptionUnderTest.text(null);
            assert(!("text" in labelDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            labelDescriptionUnderTest._properties["text"] = "text";
            var result = labelDescriptionUnderTest.text();
            assert.strictEqual(result, "text");
        });
    });
});

describe("Label Test Object", function () {
    var LabelTO = require("../lib/label.js").LabelTO;
    var labelTestObjectUnderTest;

    beforeEach(function () {
        labelTestObjectUnderTest = new LabelTO();
        sinon.stub(labelTestObjectUnderTest, "_getROProperty");
    });

    describe("text method", function () {
        it("should execute _getROProperty 'text'", function () {
            labelTestObjectUnderTest.text();
            sinon.assert.calledOnce(labelTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(labelTestObjectUnderTest._getROProperty, "text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            labelTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = labelTestObjectUnderTest.text();
            assert.strictEqual(res, promiseMock);
        });
    });
});