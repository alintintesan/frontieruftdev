// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 9/5/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("TableCell", function () {
    var TableCell = require("../lib/table_cell.js").TableCell;
    var tableCellUnderTest;
    var owner;
    beforeEach(function () {
        owner = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
        tableCellUnderTest = new TableCell(owner, 0, 0);
        tableCellUnderTest._executeWithEventsOnItem = sinon.stub();
        tableCellUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    describe("Constructor", function () {
        it("should assign correct values", function () {
            var parent = owner;
            tableCellUnderTest = new TableCell(parent, 0, 0);
            assert.strictEqual(tableCellUnderTest._ownerTable, parent);
            assert.strictEqual(tableCellUnderTest._rowIdentifier, 0);
            assert.strictEqual(tableCellUnderTest._columnIdentifier, 0);
        });
    });

    describe("value method", function () {
        it("should execute _getCellValue with correct parameter", function () {
            tableCellUnderTest._ownerTable._getCellValue = sinon.stub();
            tableCellUnderTest.value();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItemOnError, tableCellUnderTest._ownerTable._getCellValue, 0);
        });

        it("should return what's returned from _getCellValue as is", function () {
            tableCellUnderTest._executeWithEventsOnItemOnError.returns("some text");
            var res = tableCellUnderTest.value();
            assert.strictEqual(res, "some text");
        });
    });

    describe("columnHeader method", function () {
        it("should execute _getColumnHeader with correct parameter", function () {
            tableCellUnderTest._ownerTable._getColumnHeader = sinon.stub();
            tableCellUnderTest.columnHeader();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItemOnError, tableCellUnderTest._ownerTable._getColumnHeader, 0);
        });

        it("should return what's returned from _getColumnHeader as is", function () {
            tableCellUnderTest._executeWithEventsOnItemOnError.returns("col header");
            var res = tableCellUnderTest.columnHeader();
            assert.strictEqual(res, "col header");
        });
    });

    describe("setValue method", function () {
        it("should execute _setCellValue with correct parameter", function () {
            tableCellUnderTest._ownerTable._setCellValue = sinon.stub();
            tableCellUnderTest.setValue("some text");
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItem, tableCellUnderTest._ownerTable._setCellValue, 0, 0, "some text");
        });

        it("should return the promise as is", function () {
            var promiseMock = {};
            tableCellUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = tableCellUnderTest.setValue("some text");
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("click method", function () {
        it("should execute _clickCell with correct parameter", function () {
            tableCellUnderTest._ownerTable._clickCell = sinon.stub();
            tableCellUnderTest.click();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItem, tableCellUnderTest._ownerTable._clickCell, 0, 0);
        });

        it("should return the promise as is", function () {
            var promiseMock = {};
            tableCellUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = tableCellUnderTest.click();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("doubleClick method", function () {
        it("should execute _doubleClickCell with correct parameter", function () {
            tableCellUnderTest._ownerTable._doubleClickCell = sinon.stub();
            tableCellUnderTest.doubleClick();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItem, tableCellUnderTest._ownerTable._doubleClickCell, 0, 0);
        });

        it("should return the promise as is", function () {
            var promiseMock = {};
            tableCellUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = tableCellUnderTest.doubleClick();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("dragAndDropOn method", function () {
        it("should execute _dragAndDropOn with correct parameter", function () {
            tableCellUnderTest._ownerTable._dragAndDropOn = sinon.stub();
            tableCellUnderTest.dragAndDropOn(new TableCell(tableCellUnderTest, 2, 3));
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItem, tableCellUnderTest._ownerTable._dragAndDropOn, 0, 0, 2, 3);
        });

        it("should return the promise as is", function () {
            var promiseMock = {};
            tableCellUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = tableCellUnderTest.dragAndDropOn(new TableCell(tableCellUnderTest, 2, 3));
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'targetCell' parameter is null", function () {
            assert.throws(function () {
                tableCellUnderTest._dragAndDropOn(null);
            });
        });

        it("should throw error if the 'targetCell' parameter is undefined", function () {
            assert.throws(function () {
                tableCellUnderTest._dragAndDropOn();
            });
        });
    });
});