// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/13/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("List Description", function () {

    var List = require("../lib/list.js").List;
    var listDescUnderTest;

    beforeEach(function () {
        listDescUnderTest = List();
    });

    describe("selectedItems method", function () {
        it("should add 'selection' to _properties when value is given", function () {
            listDescUnderTest.selectedItems(["item1", "item2"]);
            assert.strictEqual(listDescUnderTest._properties["value"], "item1\u0018item2");
        });

        it("should add 'selection' to _properties when value is given using property bag", function () {
            listDescUnderTest = List({
                selectedItems: ["item1", "item2"]
            });
            assert.strictEqual(listDescUnderTest._properties["value"], "item1\u0018item2");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = listDescUnderTest.selectedItems(["item1", "item2"]);
            assert.strictEqual(result, listDescUnderTest);
        });

        it("should remove 'selection' from _properties when value is null", function () {
            listDescUnderTest._properties["value"] = "item1\u0018item2";
            listDescUnderTest.selectedItems(null);
            assert(!("value" in listDescUnderTest._properties));
        });
        it("should return the value of 'selection' from _properties when value is not given", function () {
            listDescUnderTest._properties["value"] = "item1\u0018item2";
            var value = listDescUnderTest.selectedItems();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'selection' in _properties when get is called", function () {
            listDescUnderTest._properties["value"] = "item1\u0018item2";
            listDescUnderTest.selectedItems();
            assert.strictEqual(listDescUnderTest._properties["value"], "item1\u0018item2");
        });
    });

    describe("itemsCount method", function () {
        it("should add 'items count' to _properties when value is given", function () {
            listDescUnderTest.itemsCount(100);
            assert.strictEqual(listDescUnderTest._properties["items count"], 100);
        });

        it("should add 'items count' to _properties when value is given in string", function () {
            listDescUnderTest.itemsCount('100');
            assert.strictEqual(listDescUnderTest._properties["items count"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listDescUnderTest.itemsCount(100);
            assert.strictEqual(result, listDescUnderTest);
        });

        it("should remove 'items count' from _properties when value is null", function () {
            listDescUnderTest._properties["items count"] = 100;
            listDescUnderTest.itemsCount(null);
            assert(!("items count" in listDescUnderTest._properties));
        });

        it("should return the value of 'items count' from _properties when value is not given", function () {
            listDescUnderTest._properties["items count"] = 100;
            var result = listDescUnderTest.itemsCount();
            assert.equal(result, 100);
        });
    });

});

describe("List Test Object", function () {

    var ListTO = require("../lib/list.js").ListTO;
    var ListItem = require("../lib/list_item.js").ListItem;
    var listTOUnderTest;

    var removeExecutorMethods = function (array) {
        array.map(function (item) {
            delete item._executeWithEventsOnItem;
            delete item._executeWithEventsOnItemOnError;
        });
        return array;
    };

    beforeEach(function () {
        listTOUnderTest = new ListTO();
        sinon.stub(listTOUnderTest, "_executeNotWrapped");
        sinon.stub(listTOUnderTest, "_getROProperty");
        sinon.stub(listTOUnderTest, "_getROProperties");
        sinon.stub(listTOUnderTest, "_executeWithEvents");
        sinon.stub(listTOUnderTest, "_executeSingleOpOnCollection");
        sinon.stub(listTOUnderTest, "_executeOnItemsCollection");
    });

    afterEach(function () {
        listTOUnderTest._executeNotWrapped.restore();
        listTOUnderTest._getROProperties.restore();
    });

    describe("itemCount method", function () {
        var itemsCount = 2;
        var promiseMock = {
            then: function (cb) {
                return cb(itemsCount.toString());
            }
        };
        it("should execute _getROProperty 'items count'", function () {
            listTOUnderTest._getROProperty.returns(promiseMock);
            listTOUnderTest._itemsCount();
            sinon.assert.calledOnce(listTOUnderTest._getROProperty);
            sinon.assert.calledWith(listTOUnderTest._getROProperty, "items count", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            listTOUnderTest._getROProperty.returns(promiseMock);
            var res = listTOUnderTest._itemsCount();
            assert.strictEqual(res, itemsCount);
        });
    });

    describe("items method", function () {
        var itemsCountStr;
        beforeEach(function () {
            sinon.stub(listTOUnderTest, "_itemsCount");
            var promiseMock = {
                then: function (cb) {
                    return cb(itemsCountStr);
                }
            };
            listTOUnderTest._itemsCount.returns(promiseMock);
        });

        afterEach(function () {
            listTOUnderTest._itemsCount.restore();
        });

        it("should execute command '_itemsCount'", function () {
            itemsCountStr = "";
            listTOUnderTest.items();
            sinon.assert.calledOnce(listTOUnderTest._itemsCount);
            sinon.assert.calledWith(listTOUnderTest._itemsCount);
        });

        it("should return an empty list if no item is in the ExpandBar", function () {
            itemsCountStr = "0";
            var allItems = listTOUnderTest.items();
            assert.deepEqual(allItems, []);
        });

        it("should return a list if items are in the ExpandBar", function () {
            itemsCountStr = "2";
            var allItems = removeExecutorMethods(listTOUnderTest.items());
            assert.deepEqual(allItems, removeExecutorMethods([new ListItem(listTOUnderTest, 0), new ListItem(listTOUnderTest, 1)]));
        });
    });

    
    describe("selectedItems method", function () {
        it("should query the property 'selection'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\u0018Item2");
                }
            };
            listTOUnderTest._getROProperty.returns(promiseMock);
            listTOUnderTest.selectedItems();
            sinon.assert.calledOnce(listTOUnderTest._getROProperty);
            sinon.assert.calledWith(listTOUnderTest._getROProperty, "value", sinon.match({}));
        });

        it("should return empty list if null returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb();
                }
            };

            listTOUnderTest._getROProperty.returns(promiseMock);
            var res = listTOUnderTest.selectedItems();
            assert.deepEqual(res, []);
        });

        it("should return empty list if no item returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            listTOUnderTest._getROProperty.returns(promiseMock);
            var res = listTOUnderTest.selectedItems();
            assert.deepEqual(res, []);
        });

        it("should return a list  with items if items returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\u0018Item2");
                }
            };

            listTOUnderTest._getROProperty.returns(promiseMock);
            var res = listTOUnderTest.selectedItems();
            assert.deepEqual(removeExecutorMethods(res), removeExecutorMethods([new ListItem(listTOUnderTest, "Item1", "Item1"), new ListItem(listTOUnderTest, "Item2", "Item2")]));
        });
    });

    describe("activateItem method", function () {
        beforeEach(function () {
            sinon.stub(listTOUnderTest, "_itemTransform");
        });

        it("should execute command 'activateItem' if the 'item' parameter is a ListItem", function () {
            listTOUnderTest._itemTransform.returns("listItem");
            var listTOMock = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
            var node = new ListItem(listTOMock, "listItem", "listItem");

            listTOUnderTest.activateItem(node);
            sinon.assert.calledOnce(listTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(listTOUnderTest._executeWithEvents, sinon.match({0: node}), "Activate", "listItem");
        });

        it("should execute command 'Activate' if the 'item' parameter is string", function () {
            listTOUnderTest._itemTransform.returns("listItem2");
            listTOUnderTest.activateItem("listItem2");
            sinon.assert.calledOnce(listTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(listTOUnderTest._executeWithEvents, sinon.match({0: "listItem2"}), "Activate", "listItem2");
        });

        it("should execute command 'Activate' if the 'item' parameter is number", function () {
            listTOUnderTest._itemTransform.returns(3);
            listTOUnderTest.activateItem(3);
            sinon.assert.calledOnce(listTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(listTOUnderTest._executeWithEvents, sinon.match({0: 3}), "Activate", 3);
        });
        
        it("should throw error if the 'item' parameter is null", function () {
            assert.throws(function () {
                listTOUnderTest.activateItem(null);
            });
        });

        it("should throw error if the 'item' parameter is undefined", function () {
            assert.throws(function () {
                listTOUnderTest.activateItem();
            });
        });
    });

    describe("deselect method", function () {
        beforeEach(function () {
            sinon.stub(listTOUnderTest, "_itemTransform");
        });

        it("should execute command 'Deselect' if the 'items' parameter is ListItem items", function () {
            var listTOMock = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
            var item1 = new ListItem(listTOMock, "item1", "item1");
            var item2 = new ListItem(listTOMock, "item2", "item2");
            listTOUnderTest.deselect(item1, item2);
            sinon.assert.calledOnce(listTOUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(listTOUnderTest._executeSingleOpOnCollection, sinon.match({
                0: item1,
                1: item2
            }), "Deselect", [item1, item2]);
        });

        it("should execute command 'Deselect' if the 'items' parameter is ListItem items", function () {
            listTOUnderTest.deselect("item1", "item2");
            sinon.assert.calledOnce(listTOUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(listTOUnderTest._executeSingleOpOnCollection, sinon.match({
                0: "item1",
                1: "item2"
            }), "Deselect", ["item1", "item2"]);
        });

        it("should throw error if the 'items' parameter is null", function () {
            assert.throws(function () {
                listTOUnderTest.deselect(null);
            });
        });

        it("should throw error if the 'items' parameter is undefined", function () {
            assert.throws(function () {
                listTOUnderTest.deselect();
            });
        });
    });

    describe("extendSelect method", function () {
        beforeEach(function () {
            sinon.stub(listTOUnderTest, "_itemTransform");
        });

        it("should execute command 'ExtendSelect' if the 'items' parameter is ListItem items", function () {
            var listTOMock = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
            var item1 = new ListItem(listTOMock, "item1", "item1");
            var item2 = new ListItem(listTOMock, "item2", "item2");
            listTOUnderTest.extendSelect(item1, item2);
            sinon.assert.calledOnce(listTOUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(listTOUnderTest._executeOnItemsCollection, sinon.match({
                0: item1,
                1: item2
            }), "ExtendSelect", "ExtendSelect", [item1, item2]);
        });

        it("should execute command 'ExtendSelect' if the 'items' parameter is ListItem items", function () {
            listTOUnderTest.extendSelect("item1", "item2");
            sinon.assert.calledOnce(listTOUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(listTOUnderTest._executeOnItemsCollection, sinon.match({
                0: "item1",
                1: "item2"
            }), "ExtendSelect", "ExtendSelect", ["item1", "item2"]);
        });

        it("should throw error if the 'items' parameter is null", function () {
            assert.throws(function () {
                listTOUnderTest.extendSelect(null);
            });
        });

        it("should throw error if the 'items' parameter is undefined", function () {
            assert.throws(function () {
                listTOUnderTest.extendSelect();
            });
        });
    });

    describe("select method", function () {
        beforeEach(function () {
            sinon.stub(listTOUnderTest, "_itemTransform");
        });

        it("should execute command 'Select' if the 'items' parameter is ListItem items", function () {
            var listTOMock = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
            var item1 = new ListItem(listTOMock, "item1", "item1");
            var item2 = new ListItem(listTOMock, "item2", "item2");
            listTOUnderTest.select(item1, item2);
            sinon.assert.calledOnce(listTOUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(listTOUnderTest._executeOnItemsCollection, sinon.match({
                0: item1,
                1: item2
            }), "Select", "ExtendSelect", [item1, item2]);
        });

        it("should execute command 'Select' if the 'items' parameter is ListItem items", function () {
            listTOUnderTest.select("item1", "item2");
            sinon.assert.calledOnce(listTOUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(listTOUnderTest._executeOnItemsCollection, sinon.match({
                0: "item1",
                1: "item2"
            }), "Select", "ExtendSelect", ["item1", "item2"]);
        });

        it("should throw error if the 'nodesOrPaths' parameter is null", function () {
            assert.throws(function () {
                listTOUnderTest.select(null);
            });
        });

        it("should throw error if the 'nodesOrPaths' parameter is undefined", function () {
            assert.throws(function () {
                listTOUnderTest.select();
            });
        });
    });

    describe("selectRange method", function () {
        it("should execute command 'SelectRange' with int params", function () {
            listTOUnderTest.selectRange(2, 8);
            sinon.assert.calledOnce(listTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(listTOUnderTest._executeWithEvents, sinon.match({
                0: 2,
                1: 8
            }), "SelectRange", "#2", "#8");
        });

        it("should execute command 'SelectRange' with string params", function () {
            listTOUnderTest.selectRange("2", "8");
            sinon.assert.calledOnce(listTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(listTOUnderTest._executeWithEvents, sinon.match({
                0: "2",
                1: "8"
            }), "SelectRange", "2", "8");
        });

        it("should throw error if the 'indexFrom' parameter is null", function () {
            assert.throws(function () {
                listTOUnderTest.selectRange(null, "8");
            });
        });

        it("should throw error if the 'indexTo' parameter is undefined", function () {
            assert.throws(function () {
                listTOUnderTest.selectRange(undefined, "8");
            });
        });

        it("should throw error if the 'indexTo' parameter is null", function () {
            assert.throws(function () {
                listTOUnderTest.selectRange("2", null);
            });
        });

        it("should throw error if the 'indexTo' parameter is undefined", function () {
            assert.throws(function () {
                listTOUnderTest.selectRange("2");
            });
        });
    });

    describe("deselectRange method", function () {
        it("should execute command 'DeselectRange'", function () {
            listTOUnderTest.deselectRange("2", "8");
            sinon.assert.calledOnce(listTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(listTOUnderTest._executeWithEvents, sinon.match({
                0: "2",
                1: "8"
            }), "DeselectRange", "#2", "#8");
        });

        it("should throw error if the 'indexFrom' parameter is null", function () {
            assert.throws(function () {
                listTOUnderTest.deselectRange(null, "8");
            });
        });

        it("should throw error if the 'indexFrom' parameter is undefined", function () {
            assert.throws(function () {
                listTOUnderTest.deselectRange(undefined, "8");
            });
        });

        it("should throw error if the 'indexTo' parameter is null", function () {
            assert.throws(function () {
                listTOUnderTest.deselectRange("2", null);
            });
        });

        it("should throw error if the 'indexTo' parameter is undefined", function () {
            assert.throws(function () {
                listTOUnderTest.deselectRange("2");
            });
        });
    });

    describe("_getItemText method", function () {
        var executionPromise;
        beforeEach(function () {
            executionPromise = {
                then: function (cb) {
                    return cb("0");
                }
            };
            listTOUnderTest._executeNotWrapped.returns(executionPromise);
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            listTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = listTOUnderTest._getItemText(0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItem' with correct parameters, if input is number", function () {
            listTOUnderTest._getItemText(0);
            sinon.assert.calledOnce(listTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listTOUnderTest._executeNotWrapped, sinon.match({0: 0}), "GetItem", 0);
        });

        it("should execute _executeNotWrapped 'GetItemIndex' with correct parameters, if input is string", function () {
            listTOUnderTest._getItemText("Item1");
            sinon.assert.calledOnce(listTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listTOUnderTest._executeNotWrapped, sinon.match({0: "Item1"}), "GetItemIndex", "Item1");
        });
    });
    
    describe("_getItemIndex method", function () {
        var executionPromise;
        beforeEach(function () {
            executionPromise = {
                then: function (cb) {
                    return cb("0");
                }
            };
            listTOUnderTest._executeNotWrapped.returns(executionPromise);
        });

        it("should return a bool if promise returns a numeric string", function () {
            var res = listTOUnderTest._getItemIndex(0);
            assert.strictEqual(res, 0);
        });

        it("should execute _executeNotWrapped 'GetItem' with correct parameters, if input is number", function () {
            listTOUnderTest._getItemIndex(0);
            sinon.assert.calledOnce(listTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listTOUnderTest._executeNotWrapped, sinon.match({0: 0}), "GetItem", 0);
        });

        it("should execute _executeNotWrapped 'GetItemIndex' with correct parameters, if input is string", function () {
            listTOUnderTest._getItemIndex("Item1");
            sinon.assert.calledOnce(listTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listTOUnderTest._executeNotWrapped, sinon.match({0: "Item1"}), "GetItemIndex", "Item1");
        });
    });

    
    describe("_createItem method", function () {
        it("should return the ListItem with correct values", function () {
            var res = listTOUnderTest._createItem(10, "Item1");
            assert.strictEqual(res._identifier, 10);
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerList, listTOUnderTest);
        });
    });
});
