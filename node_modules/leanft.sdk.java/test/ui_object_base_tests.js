// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var Location = Core.Location;
var Position = Core.Position;
var MouseButton = Core.MouseButton;

describe("UI Object Base Description", function () {

    var UiObjectBaseDescription = require("../lib/ui_object_base.js").UiObjectBaseDescription;
    var uiObjectBaseDescriptionUnderTest;

    beforeEach(function () {
        uiObjectBaseDescriptionUnderTest = new UiObjectBaseDescription();
    });

    describe("Constructor", function () {
        it("should assign 'Java' and LeanFT type", function () {
            uiObjectBaseDescriptionUnderTest = new UiObjectBaseDescription("Window");
            assert.deepEqual(uiObjectBaseDescriptionUnderTest.leanFTType, {
                technology: "Java",
                leanftType: "Window"
            });
        });
    });

    describe("nativeClass method", function () {
        it("should add 'toolkit class' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.nativeClass("NativeClass");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["toolkit class"], "NativeClass");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.nativeClass("NativeClass");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'toolkit class' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["toolkit class"] = "NativeClass";
            uiObjectBaseDescriptionUnderTest.nativeClass(null);
            assert(!("toolkit class" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'toolkit class' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["toolkit class"] = "NativeClass";
            var nativeClass = uiObjectBaseDescriptionUnderTest.nativeClass();
            assert.strictEqual(nativeClass, "NativeClass");
        });
    });

    describe("attachedText method", function () {
        it("should add 'attached text' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.attachedText("attachedText");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["attached text"], "attachedText");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.attachedText("attachedText");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'attached text' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["attached text"] = "attachedText";
            uiObjectBaseDescriptionUnderTest.attachedText(null);
            assert(!("attached text" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'attached text' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["attached text"] = "attachedText";
            var result = uiObjectBaseDescriptionUnderTest.attachedText();
            assert.strictEqual(result, "attachedText");
        });
    });

    describe("isVisible method", function () {
        it("should add 'displayed' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.isVisible(true);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["displayed"], "1");
        });

        it("should add 'displayed' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.isVisible("true");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["displayed"], "1");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.isVisible(true);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'displayed' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["displayed"] = "1";
            uiObjectBaseDescriptionUnderTest.isVisible(null);
            assert(!("displayed" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'displayed' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["displayed"] = "1";
            var result = uiObjectBaseDescriptionUnderTest.isVisible();
            assert.strictEqual(result, true);
        });
    });

    describe("isEnabled method", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["enabled"], "1");
        });

        it("should add 'enabled' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["enabled"], "1");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["enabled"] = "1";
            uiObjectBaseDescriptionUnderTest.isEnabled(null);
            assert(!("enabled" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["enabled"] = "1";
            var result = uiObjectBaseDescriptionUnderTest.isEnabled();
            assert.strictEqual(result, true);
        });
    });

    describe("isFocused method", function () {
        it("should add 'focused' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.isFocused(true);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["focused"], "1");
        });

        it("should add 'focused' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.isFocused("true");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["focused"], "1");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.isFocused(true);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'focused' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["focused"] = "1";
            uiObjectBaseDescriptionUnderTest.isFocused(null);
            assert(!("focused" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'focused' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["focused"] = "1";
            var result = uiObjectBaseDescriptionUnderTest.isFocused();
            assert.strictEqual(result, true);
        });
    });

    describe("tagName method", function () {
        it("should add 'tagname' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.tagName("tagName");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["tagname"], "tagName");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.tagName("tagName");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'tagname' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["tagname"] = "tagName";
            uiObjectBaseDescriptionUnderTest.tagName(null);
            assert(!("tagname" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'tagname' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["tagname"] = "tagName";
            var result = uiObjectBaseDescriptionUnderTest.tagName();
            assert.strictEqual(result, "tagName");
        });
    });

    describe("backgroundColor method", function () {
        it("should add 'background' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.backgroundColor("backgroundColor");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["background"], "backgroundColor");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.backgroundColor("backgroundColor");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'background' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["backgroundColor"] = "backgroundColor";
            uiObjectBaseDescriptionUnderTest.backgroundColor(null);
            assert(!("background" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'background' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["background"] = "backgroundColor";
            var result = uiObjectBaseDescriptionUnderTest.backgroundColor();
            assert.strictEqual(result, "backgroundColor");
        });
    });

    describe("foregroundColor method", function () {
        it("should add 'foreground' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.foregroundColor("foregroundColor");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["foreground"], "foregroundColor");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.foregroundColor("foregroundColor");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'foreground' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["foregroundColor"] = "foregroundColor";
            uiObjectBaseDescriptionUnderTest.foregroundColor(null);
            assert(!("foreground" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'foreground' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["foreground"] = "foregroundColor";
            var result = uiObjectBaseDescriptionUnderTest.foregroundColor();
            assert.strictEqual(result, "foregroundColor");
        });
    });

    describe("label method", function () {
        it("should add 'label' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.label("label");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["label"], "label");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.label("label");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'label' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["label"] = "label";
            uiObjectBaseDescriptionUnderTest.label(null);
            assert(!("label" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'label' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["label"] = "label";
            var result = uiObjectBaseDescriptionUnderTest.label();
            assert.strictEqual(result, "label");
        });
    });

    describe("objectName method", function () {
        it("should add 'developer name' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.objectName("developer name");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["developer name"], "developer name");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.objectName("developer name");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'developer name' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["developer name"] = "developer name";
            uiObjectBaseDescriptionUnderTest.objectName(null);
            assert(!("developer name" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'label' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["developer name"] = "developer name";
            var result = uiObjectBaseDescriptionUnderTest.objectName();
            assert.strictEqual(result, "developer name");
        });
    });

    describe("path method", function () {
        it("should add 'path' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.path("path");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["path"], "path");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.path("path");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'path' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["path"] = "path";
            uiObjectBaseDescriptionUnderTest.path(null);
            assert(!("path" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'label' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["path"] = "path";
            var result = uiObjectBaseDescriptionUnderTest.path();
            assert.strictEqual(result, "path");
        });
    });

    describe("objectProperties method", function () {
        it("should return this - builder", function () {
            var res = uiObjectBaseDescriptionUnderTest.objectProperties({});
            assert.strictEqual(res, uiObjectBaseDescriptionUnderTest);
        });

        it("should add someKey to flatter when only someKey given", function () {
            uiObjectBaseDescriptionUnderTest.objectProperties({
                someKey: "someValue"
            });
            
            assert.strictEqual(Object.keys(uiObjectBaseDescriptionUnderTest._properties["ObjectProperties"]._keysMap).length, 1);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["ObjectProperties"].someKey, "someValue");
        });

        it("should have correct values if get after set", function () {
            uiObjectBaseDescriptionUnderTest.objectProperties({
                someKey: "someValue"
            });

            var res = uiObjectBaseDescriptionUnderTest.objectProperties();
            assert.notStrictEqual(res,   {
                   _keysMap: {
                     someKey: 'someKey'
                   },
                    someKey: 'someValue'
                  });
        });

        it("should modify value as is modify after its set", function () {
            uiObjectBaseDescriptionUnderTest.objectProperties({
                someKey: "someValue"
            });

            uiObjectBaseDescriptionUnderTest.objectProperties().someKey = "modified";
            
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["ObjectProperties"].someKey, "modified");
        });
    });

    describe("isWrapped method", function () {
        it("should add 'description_flags' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.isWrapped(true);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["description_flags"], "1");
        });

        it("should add 'description_flags' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.isWrapped("true");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["description_flags"], "1");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.isWrapped(true);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'description_flags' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["description_flags"] = "1";
            uiObjectBaseDescriptionUnderTest.isWrapped(null);
            assert(!("description_flags" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'description_flags' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["description_flags"] = "1";
            var result = uiObjectBaseDescriptionUnderTest.isWrapped();
            assert.strictEqual(result, true);
        });
    });
});

describe("UI Object Base Test Object", function () {

    var UiObjectBaseTO = require("../lib/ui_object_base.js").UiObjectBaseTO;
    var EventInfo = require("../lib/event_info.js");
    var UiEvent = EventInfo.UiEvent;
    var KeyboardEvent = EventInfo.KeyboardEvent;
    var MouseEvent = EventInfo.MouseEvent;
    var UiEventInfo = EventInfo.UiEventInfo;
    var MouseEventInfo = EventInfo.MouseEventInfo;
    var KeyboardEventInfo = EventInfo.KeyboardEventInfo;
    var uiObjectBaseTOUnderTest;

    beforeEach(function () {
        uiObjectBaseTOUnderTest = new UiObjectBaseTO();
        sinon.stub(uiObjectBaseTOUnderTest, "_getROProperty");
        sinon.stub(uiObjectBaseTOUnderTest, "_executeWithEvents");
    });

    describe("attachedText method", function () {
        it("should execute _getROProperty 'attached text'", function () {
            uiObjectBaseTOUnderTest.attachedText();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "attached text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.attachedText();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("tagName method", function () {
        it("should execute _getROProperty 'tagname'", function () {
            uiObjectBaseTOUnderTest.tagName();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "tagname", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.tagName();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("backgroundColor method", function () {
        it("should execute _getROProperty 'background'", function () {
            uiObjectBaseTOUnderTest.backgroundColor();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "background", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.backgroundColor();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("foregroundColor method", function () {
        it("should execute _getROProperty 'foreground'", function () {
            uiObjectBaseTOUnderTest.foregroundColor();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "foreground", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.foregroundColor();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("label method", function () {
        it("should execute _getROProperty 'label'", function () {
            uiObjectBaseTOUnderTest.label();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "label", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.label();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("objectName method", function () {
        it("should execute _getROProperty 'developer name'", function () {
            uiObjectBaseTOUnderTest.objectName();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "developer name", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.objectName();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("path method", function () {
        it("should execute _getROProperty 'path'", function () {
            uiObjectBaseTOUnderTest.path();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "path", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.path();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("nativeClass method", function () {
        it("should execute _getROProperty 'toolkit class'", function () {
            uiObjectBaseTOUnderTest.nativeClass();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "toolkit class", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.nativeClass();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isVisible method", function () {
        var promiseMock = { then: function (cb) { return cb("1"); } };
        it("should execute _getROProperty 'displayed'", function () {
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            uiObjectBaseTOUnderTest.isVisible();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "displayed", sinon.match({}));
        });

        it("should return bool value when promise returns numeric string", function () {
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.isVisible();
            assert.strictEqual(res, true);
        });
    });

    describe("isEnabled method", function () {
        var promiseMock = { then: function (cb) { return cb("1"); } };
        it("should execute _getROProperty 'enabled'", function () {
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            uiObjectBaseTOUnderTest.isEnabled();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return bool value when promise returns numeric string", function () {
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.isEnabled();
            assert.strictEqual(res, true);
        });
    });

    describe("isFocused method", function () {
        var promiseMock = { then: function (cb) { return cb("1"); } };
        it("should execute _getROProperty 'focused'", function () {
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            uiObjectBaseTOUnderTest.isFocused();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "focused", sinon.match({}));
        });

        it("should return bool value when promise returns numeric string", function () {
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.isFocused();
            assert.strictEqual(res, true);
        });
    });

    describe("click",function() {
        it("should pass defaults when args is not given",function() {
            uiObjectBaseTOUnderTest.click();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({}),
                "Click",
                {
                    Type: "Location",
                    Offset: {
                        Type: "Point",
                        X: 0,
                        Y: 0
                    },
                    Anchor: Position._convert(Position.center)
                },
                "LEFT");
        });

        it("should pass defaults when args is null",function(){
            uiObjectBaseTOUnderTest.click(null);
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({}),
                "Click",
                {
                    Type: "Location",
                    Offset: {
                        Type: "Point",
                        X: 0,
                        Y: 0
                    },
                    Anchor: Position._convert(Position.center)
                },
                "LEFT");
        });

        it("should pass button arg and default location if only button arg is given",function() {
            uiObjectBaseTOUnderTest.click({button: MouseButton.right});
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({0: {button: MouseButton.right}}),
                "Click",
                {
                    Type: "Location",
                    Offset: {
                        Type: "Point",
                        X: 0,
                        Y: 0
                    },
                    Anchor: Position._convert(Position.center)
                },
                "RIGHT");
        });

        it("should pass all args that are given",function() {
            uiObjectBaseTOUnderTest.click({
                button: MouseButton.right,
                anchor: Position.bottomRight,
                offset: {x: 5, y: 8}
            });
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({
                    0: {
                        button: MouseButton.right,
                        anchor: Position.bottomRight,
                        offset: {x: 5, y: 8}
                    }
                }),
                "Click",
                {
                    Type: "Location",
                    Offset: {
                        Type: "Point",
                        X: 5,
                        Y: 8
                    },
                    Anchor: Position._convert(Position.bottomRight)
                },
                "RIGHT");
        });

        it("should throw error if the type of mouse button is middle", function() {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.click({button: MouseButton.middle});
            });
        });
    });

    describe("doubleClick",function() {
        it("should pass defaults when args is not given",function(){
            uiObjectBaseTOUnderTest.doubleClick();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({}),
                "DblClick",
                {
                    Type: "Location",
                    Offset: {
                        Type: "Point",
                        X: 0,
                        Y: 0
                    },
                    Anchor: Position._convert(Position.center)
                },
                "LEFT");
        });

        it("should pass defaults when args is null",function(){
            uiObjectBaseTOUnderTest.doubleClick(null);
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({}),
                "DblClick",
                {
                    Type: "Location",
                    Offset: {
                        Type: "Point",
                        X: 0,
                        Y: 0
                    },
                    Anchor: Position._convert(Position.center)
                },
                "LEFT");
        });

        it("should pass button arg and default location if only button arg is given",function() {
            uiObjectBaseTOUnderTest.doubleClick({button: MouseButton.right});
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({0: {button: MouseButton.right}}),
                "DblClick",
                {
                    Type: "Location",
                    Offset: {
                        Type: "Point",
                        X: 0,
                        Y: 0
                    },
                    Anchor: Position._convert(Position.center)
                },
                "RIGHT");
        });

        it("should pass all args that are given",function() {
            uiObjectBaseTOUnderTest.doubleClick({
                button: MouseButton.right,
                anchor: Position.bottomRight,
                offset: {x: 5, y: 8}
            });
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({
                    0: {
                        button: MouseButton.right,
                        anchor: Position.bottomRight,
                        offset: {x: 5, y: 8}
                    }
                }),
                "DblClick",
                {
                    Type: "Location",
                    Offset: {
                        Type: "Point",
                        X: 5,
                        Y: 8
                    },
                    Anchor: Position._convert(Position.bottomRight)
                },
                "RIGHT");
        });

        it("should throw error if the type of mouse button is middle", function() {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.doubleClick({button: MouseButton.middle});
            });
        });
    });

    describe("fireEvent", function () {
        describe("UiEvent enum", function () {
            Object.keys(UiEvent).filter(function (event) {
                return !event.startsWith('_');
            }).forEach(function (event) {
                it("should pass '" + event + "' to _executeWithEvents", function () {
                    var eventAfterConvert = UiEvent._convert(event);
                    uiObjectBaseTOUnderTest.fireEvent(UiEventInfo(event));
                    sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({
                            0: {
                                eventArgs: [eventAfterConvert]
                            }
                        }),
                        "FireEvent",
                        eventAfterConvert
                    )
                });
            });
        });

        describe("KeyboardEvent enum", function () {
            Object.keys(KeyboardEvent).filter(function (event) {
                return !event.startsWith('_');
            }).forEach(function (event) {
                it("should pass args without keyLocation to _executeWithEvents with '" + event + "'", function () {
                    var eventAfterConvert = KeyboardEvent._convert(event);
                    uiObjectBaseTOUnderTest.fireEvent(KeyboardEventInfo({
                        eventId: event,
                        when: 1,
                        modifiers: 1,
                        keyCode: 2,
                        keyChar: 'a'
                    }));
                    sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({
                        0: {
                            eventArgs: [eventAfterConvert, 1, 1, 2, 'a']
                        }
                    }), "FireEvent", eventAfterConvert, 1, 1, 2, 'a');
                });

                it("should pass args with keyLocation to _executeWithEvents with '" + event + "'", function () {
                    var eventAfterConvert = KeyboardEvent._convert(event);
                    uiObjectBaseTOUnderTest.fireEvent(KeyboardEventInfo({
                        eventId: event,
                        when: 0,
                        modifiers: 1,
                        keyCode: 2,
                        keyChar: 'a',
                        keyLocation: 15
                    }));
                    sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({
                        0: {
                            eventArgs: [eventAfterConvert, 0, 1, 2, 'a', 15]
                        }
                    }), "FireEvent", eventAfterConvert, 0, 1, 2, 'a', 15);
                });
            });
        });

        describe("MouseEvent enum", function () {
            Object.keys(MouseEvent).filter(function (event){
                return !event.startsWith('_');
            }).forEach(function (event) {
                it("should pass args without button, xAbs, yAbs to _executeWithEvents with '" + event + "'", function () {
                    var eventAfterConvert = MouseEvent._convert(event);
                    uiObjectBaseTOUnderTest.fireEvent(MouseEventInfo({
                        eventId: event,
                        when: 0,
                        modifiers: 1,
                        x: 2,
                        y: 3,
                        clickCount: 1,
                        popupTrigger: true
                    }));
                    sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({
                        0: {
                            eventArgs: [eventAfterConvert, 0, 1, 2, 3, 1, true]
                        }
                    }), "FireEvent", eventAfterConvert, 0, 1, 2, 3, 1, true);
                });

                it("should pass args with button to _executeWithEvents with '" + event + "'", function () {
                    var eventAfterConvert = MouseEvent._convert(event);
                    uiObjectBaseTOUnderTest.fireEvent(MouseEventInfo({
                        eventId: event,
                        when: 0,
                        modifiers: 1,
                        x: 2,
                        y: 3,
                        clickCount: 1,
                        popupTrigger: true,
                        button: 1
                    }));
                    sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({
                        0: {
                            eventArgs: [eventAfterConvert, 0, 1, 2, 3, 1, true, 1]
                        }
                    }), "FireEvent", eventAfterConvert, 0, 1, 2, 3, 1, true, 1);
                });

                it("should pass args with button to _executeWithEvents with '" + event + "'", function () {
                    var eventAfterConvert = MouseEvent._convert(event);
                    uiObjectBaseTOUnderTest.fireEvent(MouseEventInfo({
                        eventId: event,
                        when: 0,
                        modifiers: 1,
                        x: 2,
                        y: 3,
                        clickCount: 1,
                        popupTrigger: true,
                        button: 1
                    }));
                    sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({
                        0: {
                            eventArgs: [eventAfterConvert, 0, 1, 2, 3, 1, true, 1]
                        }
                    }), "FireEvent", eventAfterConvert, 0, 1, 2, 3, 1, true, 1);
                });

                it("should pass args with xAbs, yAbs to _executeWithEvents with '" + event + "'", function () {
                    var eventAfterConvert = MouseEvent._convert(event);
                    uiObjectBaseTOUnderTest.fireEvent(MouseEventInfo({
                        eventId: event,
                        when: 0,
                        modifiers: 1,
                        x: 2,
                        y: 3,
                        xAbs: 1,
                        yAbs: 2,
                        clickCount: 5,
                        popupTrigger: true,
                        button: 1
                    }));
                    sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({
                        0: {
                            eventArgs: [eventAfterConvert, 0, 1, 2, 3, 1, 2, 5, true, 1]
                        }
                    }), "FireEvent", eventAfterConvert, 0, 1, 2, 3, 1, 2, 5, true, 1);
                });
            });
        });

        it("should throw error if no argument is passed", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.fireEvent();
            });
        });

        it("should throw error if UiEvent Id is missed", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.fireEvent(UiEventInfo());
            });
        });

        it("should throw error if MouseEvent Id is missed", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.fireEvent(MouseEventInfo());
            });
        });

        it("should throw error if KeyboardEvent Id is missed", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.fireEvent(KeyboardEventInfo());
            });
        });

        it("should throw error if the passed event id is not an UiEvent", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.fireEvent(UiEventInfo("uievent"));
            });
        });

        it("should throw error if the passed event id is not an KeyboardEvent", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.fireEvent(KeyboardEventInfo("keyboardevent"));
            });
        });

        it("should throw error if the passed event id is not an MouseEvent", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.fireEvent(MouseEventInfo("mouseevent"));
            });
        });
    });

    describe("fireEventByClass method", function () {
        it("shoud pass the class name and event id to _executeWithEvents if without eventArgs", function () {
            uiObjectBaseTOUnderTest.fireEventByClass("some class", "some id");
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({
                    0: "some class",
                    1: "some id"
                }),
                "FireEventEx",
                "some class", "some id"
            )
        });

        it("should pass the class name and event id to _executeWithEvents if JavaEvent with eventArgs", function () {
            uiObjectBaseTOUnderTest.fireEventByClass("some class", "some id", 1, "aaaa", 50);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({
                    0: "some class",
                    1: "some id",
                    2: 1,
                    3: "aaaa",
                    4: 50
                }),
                "FireEventEx",
                "some class", "some id", 1, "aaaa", 50
            )
        });

        it("should throw error if no argument is passed", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.fireEventByClass();
            });
        });

        it("should throw error if className is null", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.fireEventByClass(null, "some id");
            });
        });

        it("should throw error if className is undefined", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.fireEventByClass(undefined, "some id");
            });
        });

        it("should throw error if eventId is null", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.fireEventByClass("some class", null);
            });
        });

        it("should throw error if eventId is undefined", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.fireEventByClass("some class");
            });
        });
    });

    describe("createObject method", function(){
        it("should execute command 'CreateObject' if the 'className' parameter is class name", function () {
            uiObjectBaseTOUnderTest.createObject("className");
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({0: "className"}), "CreateObject", "className");
        });

        it("should execute command 'CreateObject' if the className and args are passed", function () {
            uiObjectBaseTOUnderTest.createObject("className", 10, 20);
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({
                0: "className",
                1: 10,
                2: 20
            }), "CreateObject", "className", 10, 20);
        });

        it("should execute command 'CreateObject' if the args contain objects", function () {
            uiObjectBaseTOUnderTest.createObject("className", 10, {type:"ana"}, "hey");
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({
                0: "className",
                1: 10,
                2: {type:"ana"},
                3: "hey"
            }), "CreateObject", "className", 10, {type:"ana"}, "hey");
        });

        it("should execute command 'CreateObject' if the args is null", function () {
            uiObjectBaseTOUnderTest.createObject("className", null);
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({
                0: "className",
                1: null
            }), "CreateObject", "className", null);
        });
    });

    describe("getStatics method", function(){
        it("should execute command 'GetStatics' if the 'className' parameter is class name", function () {
            uiObjectBaseTOUnderTest.getStatics("className");
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({0: "className"}), "GetStatics", "className");
        });
    });

    describe("getObjectProperty method", function(){
        it("should call '_getROProperty'", function(){
            uiObjectBaseTOUnderTest.getObjectProperty("propName");
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "propName");
        })
    });

    describe("isWrapped method", function () {
        var promiseMock = { then: function (cb) { return cb("1"); } };
        it("should execute _getROProperty 'description_flags'", function () {
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            uiObjectBaseTOUnderTest.isWrapped();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "description_flags", sinon.match({}));
        });

        it("should return bool value when promise returns numeric string", function () {
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.isWrapped();
            assert.strictEqual(res, true);
        });
    });
});