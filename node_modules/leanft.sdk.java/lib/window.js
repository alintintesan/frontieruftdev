// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 05/24/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var WindowState = Core.WindowState;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var JavaConvertHelper = UiObjectBase.JavaConvertHelper;
var WindowObjectBaseBehavior = Core.WindowObjectBaseBehavior;
var WindowObjectBaseExtendedBehavior = Core.WindowObjectBaseExtendedBehavior;

/**
 * WindowDescriptionBehavior - the description for a Java Window object
 * @memberof Java
 * @ignore
 */
var WindowDescriptionBehavior = {
    /**
     * Indicates whether the object is a Java window.
     * @param {boolean} [isJavaWindow] When provided, this method acts as a setter and sets the isJavaWindow value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isJavaWindow value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isJavaWindow: function (isJavaWindow) {
        return this._propertyHandler("java window", isJavaWindow, JavaConvertHelper.boolToNumericString, JavaConvertHelper.numericStringToBool);
    },
	
	/**
     * The window title.
     * @param {boolean} [title] When provided, this method acts as a setter and sets the title value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored title value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    title: function (title) {
        return this._simplePropertyHandler("title", title);
    },

    /**
     * Indicates whether the window can be maximized.
     * @param {boolean} [isMaximizable] When provided, this method acts as a setter and sets the isMaximizable value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isMaximizable value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isMaximizable: function (isMaximizable) {
        return this._propertyHandler("maximizable", isMaximizable, JavaConvertHelper.boolToNumericString, JavaConvertHelper.numericStringToBool);
    },

    /**
     * Indicates whether the window can be minimized.
     * @param {boolean} [isMinimizable] When provided, this method acts as a setter and sets the isMinimizable value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isMinimizable value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isMinimizable: function (isMinimizable) {
        return this._propertyHandler("minimizable", isMinimizable, JavaConvertHelper.boolToNumericString, JavaConvertHelper.numericStringToBool);
    },
	
	/**
     * Indicates whether the window is resizable.
     * @param {boolean} [isResizable] When provided, this method acts as a setter and sets the isResizable value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isResizable value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isResizable: function (isResizable) {
        return this._propertyHandler("resizable", isResizable, JavaConvertHelper.boolToNumericString, JavaConvertHelper.numericStringToBool);
    }
};

/**
 * The description of a Java Window test object.
 * @param {Object} [props] Initializes a Java Window test object using the supplied property bag.
 * @returns {Window} the description object that was initialized.
 * @class Window 
 * @extends Java.UiObjectBaseDescription
 * @mixes Java.WindowDescriptionBehavior
 * @memberof Java
 */
function Window(props) {
    var windowDesc = new UiObjectBaseDescription("Window");
    ObjUtils.extend(windowDesc, WindowDescriptionBehavior);
    windowDesc._defineByPropertyBag(props);
    return windowDesc;    
}

/**
 * A Java Window test object
 * @constructor
 * @class WindowTO
 * @extends Java.UiObjectBaseTO
 * @mixes WindowObjectBaseBehavior._methods
 * @mixes WindowObjectBaseExtendedBehavior._methods
 * @mixes WindowObjectBaseExtendedBehavior._properties
 * @mixes Java.WindowTOBehavior._properties
 * @mixes Java.WindowTOBehavior._methods
 * @memberof Java
 */
function WindowTO(session, description) {
    description = description || Window();
    var windowTO = new UiObjectBaseTO("JavaWindow", session, description);
    windowTO._mergeBehavior(WindowObjectBaseBehavior);
    windowTO._mergeBehavior(WindowObjectBaseExtendedBehavior);
    windowTO._mergeBehavior(WindowTOBehavior);
    return windowTO;    
}

//Consts
var javaWindowWiredName = "java window";
var maximizableWiredName = "maximizable";
var minimizableWiredName = "minimizable";
var resizableWiredName = "resizable";

/**
 * The behaviors of Window/Dialog object
 * @memberof Java
 * @ignore
 */
var WindowTOBehavior = {
    /**
     * @ignore
     * @memberof Java.WindowTOBehavior
     */
    _properties: {
        /**
         * Check if a window/dialog is a Java Window.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean value indicating if the window/dialog is a Java window or not.
         */
        isJavaWindow: {
            wiredName: javaWindowWiredName,
            getter: function () {
                return this._getROProperty(javaWindowWiredName, arguments).then(JavaConvertHelper.numericStringToBool);
            }
        },

        /**
         * Check if the window/dialog is maximizable.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean value indicating if the window/dialog is maximizable or not.
         */
        isMaximizable: {
            wiredName: maximizableWiredName,
            getter: function () {
                return this._getROProperty(maximizableWiredName, arguments).then(JavaConvertHelper.numericStringToBool);
            }
        },

        /**
         * Check if the window/dialog is minimizable.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean value indicating if the window/dialog is minimizable or not.
         */
        isMinimizable: {
            wiredName: minimizableWiredName,
            getter: function () {
                return this._getROProperty(minimizableWiredName, arguments).then(JavaConvertHelper.numericStringToBool);
            }
        },

        /**
         * Check if the window/dialog is resizable.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean value indicating if the window/dialog is resizable or not.
         */
        isResizable: {
            wiredName: resizableWiredName,
            getter: function () {
                return this._getROProperty(resizableWiredName, arguments).then(JavaConvertHelper.numericStringToBool);
            }
        },

        /**
         * Get the window/dialog title.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the window/dialog title.
         */
        title: {

        },

        /**
         * Get the window/dialog state.
         * @function
         * @returns {Promise<WindowState>} a promise that is fulfilled with the window/dialog state. See {@link WindowState}
         */
        windowState: {
            nonTranslatable: true,
            getter: function () {
                return this._getROProperties("maximized", "minimized").then(function (state) {
                    if (JavaConvertHelper.numericStringToBool(state[0])) {
                        return WindowState.maximized;
                    }
                    else if (JavaConvertHelper.numericStringToBool(state[1])) {
                        return WindowState.minimized;
                    }
                    else {
                        return WindowState.normal;
                    }
                });
            }
        }
    },

    /**
     * @ignore
     * @memberof Java.WindowTOBehavior
     */
    _methods: {
        /**
         * Activate the Window/Dialog.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         */
        activate: function () {
            return this._executeWithEvents(arguments, "Activate");
        }
    }
};

module.exports.WindowDescriptionBehavior = WindowDescriptionBehavior;
module.exports.Window = Window;
module.exports.WindowTO = WindowTO;
module.exports.WindowTOBehavior = WindowTOBehavior;
