// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 9/6/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;

/**
 * SpinBoxDescriptionBehavior - the description for a Java SpinBox object
 * @memberof Java
 * @ignore
 */
var SpinBoxDescriptionBehavior = {
    /**
     * The spin box value.
     * @param {string} [value] When provided, this method acts as a setter and sets the value value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored value value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.SpinBox#
     */
    value: function (value) {
        return this._simplePropertyHandler("value", value);
    },

    /**
     * The maximum value of the spin box.
     * @param {string} [maximum] When provided, this method acts as a setter and sets the maximum value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored maximum value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.SpinBox#
     */
    maximum: function (maximum) {
        return this._simplePropertyHandler("max", maximum);
    },

    /**
     * The minimum value of the spin box.
     * @param {string} [maximum] When provided, this method acts as a setter and sets the minimum value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored minimum value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.SpinBox#
     */
    minimum: function (minimum) {
        return this._simplePropertyHandler("min", minimum);
    }
};

/**
 * The description of a Java SpinBox test object.
 * @param {Object} [props] Initializes a Java SpinBox test object using the supplied property bag.
 * @returns {SpinBox} the description object that was initialized.
 * @class SpinBox
 * @extends Java.UiObjectBaseDescription
 * @mixes Java.SpinBoxDescriptionBehavior
 * @memberof Java
 */
function SpinBox(props) {
    var spinBoxDesc = new UiObjectBaseDescription("SpinBox");
    ObjUtils.extend(spinBoxDesc, SpinBoxDescriptionBehavior);
    spinBoxDesc._defineByPropertyBag(props);
    return spinBoxDesc;
}

/**
 * The behaviors of SpinBox object
 * @memberof Java
 * @ignore
 */
var SpinBoxTOBehavior = {
    /**
     * @ignore
     * @memberof Java.SpinBoxTOBehavior
     */
    _properties: {
        /**
         * The spin box's value.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the spin box's value.
         * @memberof Java.SpinBoxTO#
         */
        value: {

        },

        /**
         * The maximum value of the spin box.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the maximum value of the spin box.
         * @memberof Java.SpinBoxTO#
         */
        maximum: {
            wiredName: "max",
        },

        /**
         * The minimum value of the spin box.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the minimum value of the spin box.
         * @memberof Java.SpinBoxTO#
         */
        minimum: {
            wiredName: "min"
        }
    },

    /**
     * @ignore
     * @memberof Java.SpinBoxTOBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Sets the spin box value.
         * @function
         * @param {string} value The new value.
         * Note: For SWT spinner objects, the parameter value must be an Integer (provided in String format, such as: "6", "7000", "34").
         * @returns {Promise<void>} a promise that is fulfilled when the setValue operation ends.
         * @memberof Java.SpinBoxTO#
         */
        setValue: function (value) {
            if (value == null)
                throw new Error("ArgumentException: value is required.");
            return this._executeWithEvents(arguments, "Set", value);
        },

        /**
         * Sets this spin box to the next higher value.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the up operation ends.
         * @memberof Java.SpinBoxTO#
         */
        up: function () {
            return this._executeWithEvents(arguments, "Next");
        },

        /**
         * Sets this spin box to the next lower value.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the down operation ends.
         * @memberof Java.SpinBoxTO#
         */
        down: function () {
            return this._executeWithEvents(arguments, "Prev");
        }
    }
};

/**
 * A Java SpinBox test object
 * @constructor
 * @class SpinBoxTO
 * @extends Java.UiObjectBaseTO
 * @mixes Java.SpinBoxTOBehavior._properties
 * @mixes Java.SpinBoxTOBehavior._methods
 * @memberof Java
 */
function SpinBoxTO(session, description) {
    description = description || SpinBox();
    var spinBoxTO = new UiObjectBaseTO("JavaSpin", session, description);
    spinBoxTO._mergeBehavior(SpinBoxTOBehavior);
    return spinBoxTO;
}

module.exports.SpinBox = SpinBox;
module.exports.SpinBoxTO = SpinBoxTO;
