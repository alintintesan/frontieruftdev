// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/29/2016.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var ArrayUtils = Core.ArrayUtils;
var ExecuteItemsWithEventsBehavior = Core.ExecuteItemsWithEventsBehavior;
var TableBaseOperationBehavior = Core.TableBaseOperationBehavior;
var MouseButton = Core.MouseButton;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var JavaConvertHelper = UiObjectBase.JavaConvertHelper;
var TableBaseDescriptionBehavior = require("./table_base.js").TableBaseDescriptionBehavior;
var TableBaseTOBehavior = require("./table_base.js").TableBaseTOBehavior;

/**
 * Keyboard keys that can be pressed and held down during the execution of a table method, such as the click method.
 * @typedef {Java.TableKeyModifier} TableKeyModifier
 * @property {string} shift Shift key.
 * @property {string} control Control key.
 * @property {string} alt Alt key.
 * @property {string} controlAndShift Control and Shift keys pressed at the same time.
 * @memberof Java
 */
var TableKeyModifier = {
    /**
     * @type {string}
     */
    shift: "shift",

    /**
     * @type {string}
     */
    control: "control",

    /**
     * @type {string}
     */
    alt: "alt",

    /**
     * @type {string}
     */
    controlAndShift: "controlandshift",

    /**
     * @ignore
     */
    _convertToNative: {
        "shift": "SHIFT",
        "control": "CONTROL",
        "alt": "ALT",
        "controlandshift": "CONTROL_SHIFT"
    },

    /**
     * @ignore
     */
    _convertToTableKeyModifier: {
        "shift": "shift",
        "control": "control",
        "alt": "alt",
        "control_shift": "controlandshift"
    },

    /**
     * @ignore
     */
    _tableKeyModifierToNative: function (key) {
        var value = TableKeyModifier._convertToNative[key.toLowerCase()];
        if (value === undefined)
            throw new Error("ArgumentException: unsupported key modifier.");
        return value;
    },

    /**
     * @ignore
     */
    _nativeToTableKeyModifier: function (key) {
        return TableKeyModifier._convertToTableKeyModifier[key.toLowerCase()];
    }
};

/**
 * TableDescriptionBehavior - the description for a Java Table test object
 * @memberof Java
 * @ignore
 */
var TableDescriptionBehavior = {
    /**
     * The number of columns in the table.
     * @param {number} [columnsCount] When provided, this method acts as a setter and sets the columnsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored columnsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.Table#
     */
    columnsCount: function (columnsCount) {
        return this._propertyHandler("cols", columnsCount, Convert.toNumber);
    }
};


/**
 * The description of a Java Table test object.
 * @param {Object} [props] Initializes a Java Table test object using the supplied property bag.
 * @returns {Table} the description object that was initialized.
 * @class Table
 * @extends Java.UiObjectBaseDescription
 * @mixes Java.TableDescriptionBehavior
 * @mixes Java.TableBaseDescriptionBehavior
 * @memberof Java
 */
function Table(props) {
    var tableDesc = new UiObjectBaseDescription("Table");
    ObjUtils.extend(tableDesc, TableBaseDescriptionBehavior);
    ObjUtils.extend(tableDesc, TableDescriptionBehavior);
    tableDesc._defineByPropertyBag(props);
    return tableDesc;
}

/**
 * The behaviors of Table object
 * @memberof Java
 * @ignore
 */
var TableTOBehavior = {
    /**
     * @ignore
     * @memberof Java.TableTOBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Double-clicks a row.
         * @function
         * @param {number} row 0-based row number.
         * @returns {Promise<void>} a promise that is fulfilled when the activateRow operation ends.
         * @memberof Java.TableTO#
         */
        activateRow: function (row) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            return this._executeWithEvents(arguments, "ActivateRow", Convert.toNumber(row));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Unselects columns by column indices or headers.
         * <br/><b>Important:</b> This method is not supported for SWT tables.
         * @function
         * @param {...(string|number)} columnsOrIndices The headers or 0-based indices of the columns.
         * @returns {Promise<void>} a promise that is fulfilled when the deselectColumns operation ends.
         */
        deselectColumns: function (columnsOrIndices) {
            if (columnsOrIndices == null)
                throw new Error("ArgumentException: columnsOrIndices is required.");
            return this._executeSingleOpOnCollection(arguments, "DeselectColumn", ArrayUtils.toArray(arguments));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Unselects rows by row indices.
         * @function
         * @param {...number} rows 0-based indices.
         * @returns {Promise<void>} a promise that is fulfilled when the deselectRows operation ends.
         * @memberof Java.TableTO#
         */
        deselectRows: function (rows) {
            if (rows == null)
                throw new Error("ArgumentException: rows is required.");
            return this._executeSingleOpOnCollection(arguments, "DeselectRow", ArrayUtils.toArray(arguments), Convert.toNumber);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects additional columns in the table by column indices or column headers.
         * @function
         * @param {...(string|number)} columnsOrIndices The headers or 0-based indices of the columns.
         * @returns {Promise<void>} a promise that is fulfilled when the extendSelectColumns operation ends.
         * @memberof Java.TableTO#
         */
        extendSelectColumns: function (columnsOrIndices) {
            if (columnsOrIndices == null)
                throw new Error("ArgumentException: columnsOrIndices is required.");
            return this._executeOnItemsCollection(arguments, "ExtendColumn", "ExtendColumn", ArrayUtils.toArray(arguments));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects columns by column indices or column headers.
         * @function
         * @param {...(string|number)} columnsOrIndices The headers or 0-based indices of the columns.
         * @returns {Promise<void>} a promise that is fulfilled when the selectColumns operation ends.
         */
        selectColumns: function (columnsOrIndices) {
            if (columnsOrIndices == null)
                throw new Error("ArgumentException: columnsOrIndices is required.");
            return this._executeOnItemsCollection(arguments, "SelectColumn", "ExtendColumn", ArrayUtils.toArray(arguments));
        },
        
        /*jshint unused:true, eqnull:true */
        /**
         * Selects the specified range of additional columns in the table by column headers or column indices.
         * @function
         * @param {string|number} fromColumnOrIndex The header or 0-based index of the first column.
         * @param {string|number} toColumnOrIndex The header or 0-based index of the last column.
         * @returns {Promise<void>} a promise that is fulfilled when the extendSelectColumnsRange operation ends.
         * @memberof Java.TableTO#
         */
        extendSelectColumnsRange: function (fromColumnOrIndex, toColumnOrIndex) {
            if (fromColumnOrIndex == null)
                throw new Error("ArgumentException: fromColumnOrIndex is required.");
            if (toColumnOrIndex == null)
                throw new Error("ArgumentException: toColumnOrIndex is required.");
            return this._executeWithEvents(arguments, "ExtendColumnsRange", fromColumnOrIndex, toColumnOrIndex);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects additional rows in the table by row indices.
         * @function
         * @param {...number} rows 0-based indices.
         * @returns {Promise<void>} a promise that is fulfilled when the extendSelectRows operation ends.
         * @memberof Java.TableTO#
         */
        extendSelectRows: function (rows) {
            if (rows == null)
                throw new Error("ArgumentException: rows is required.");
            return this._executeOnItemsCollection(arguments, "ExtendRow", "ExtendRow", ArrayUtils.toArray(arguments), Convert.toNumber);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects the specified range of additional rows in the table by row indices.
         * @function
         * @param {number} fromRow 0-based index of the first row.
         * @param {number} toRow 0-based index of the last row.
         * @returns {Promise<void>} a promise that is fulfilled when the extendSelectRowsRange operation ends.
         * @memberof Java.TableTO#
         */
        extendSelectRowsRange: function (fromRow, toRow) {
            if (fromRow == null)
                throw new Error("ArgumentException: fromRow is required.");
            if (toRow == null)
                throw new Error("ArgumentException: toRow is required.");
            return this._executeWithEvents(arguments, "ExtendRowsRange", Convert.toNumber(fromRow), Convert.toNumber(toRow));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Clicks on a column header of a table using the specified {@link MouseButton} by column header or index.
         * @function
         * @param {string|number} columnOrIndex The header or 0-based index of the column.
         * @param {MouseButton} [button = MouseButton.left] Either the Left or Right button value of {@link MouseButton}.
         * @returns {Promise<void>} a promise that is fulfilled when the selectColumnHeader operation ends.
         * @memberof Java.TableTO#
         */
        selectColumnHeader: function (columnOrIndex, button) {
            if (columnOrIndex == null)
                throw new Error("ArgumentException: columnOrIndex is required.");
            if (button == null)
                button = MouseButton.left;
            return this._executeWithEvents(arguments, "SelectColumnHeader", columnOrIndex, JavaConvertHelper.convertMouseButtonToString(button));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects rows by row indices.
         * @function
         * @param {...number} rows 0-based indices.
         * @returns {Promise<void>} a promise that is fulfilled when the selectRows operation ends.
         * @memberof Java.TableTO#
         */
        selectRows: function (rows) {
            if (rows == null)
                throw new Error("ArgumentException: rows is required.");
            return this._executeOnItemsCollection(arguments, "SelectRow", "ExtendRow", ArrayUtils.toArray(arguments), Convert.toNumber);
        }
    },

    _helpers: {

        /**
         * Get the number of rows and columns
         * @returns {Promise<Object>} a promise that is fulfilled with the number of rows and columns.
         * @ignore
         */
        _getRowAndColumnCount: function () {
            return this._getROProperties("rows", "cols").then(function (count) {
                return {
                    rowCount: Convert.toNumber(count[0]),
                    columnCount: Convert.toNumber(count[1])
                };
            });
        },

        /**
         * Get the number of columns in the table.
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns in the table.
         * @ignore
         */
        _getColumnCount: function () {
            return this._getROProperty("cols", arguments).then(Convert.toNumber);
        }
    },

    _additionalProperties: {
        rowsCount: {wiredName: "rows"},
        columnsCount: {wiredName: "cols"}
    }
};

/**
 * A Java Table test object
 * @constructor
 * @class TableTO
 * @extends Java.UiObjectBaseTO
 * @mixes TableBaseOperationBehavior._methods
 * @mixes TableBaseOperationBehavior._properties
 * @mixes ExecuteItemsWithEventsBehavior
 * @mixes Java.TableTOBehavior._properties
 * @mixes Java.TableTOBehavior._methods
 * @mixes Java.TableBaseTOBehavior._properties
 * @mixes Java.TableBaseTOBehavior._methods
 * @memberof Java
 */
function TableTO(session, description) {
    description = description || Table();
    var tableTO = new UiObjectBaseTO("JavaTable", session, description);
    tableTO._mergeBehavior(TableBaseOperationBehavior);
    tableTO._mergeBehavior(ExecuteItemsWithEventsBehavior);
    tableTO._mergeBehavior(TableBaseTOBehavior);
    tableTO._mergeBehavior(TableTOBehavior);
    return tableTO;
}

module.exports.Table = Table;
module.exports.TableTO = TableTO;
module.exports.TableKeyModifier = TableKeyModifier;
