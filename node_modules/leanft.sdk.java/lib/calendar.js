// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 9/6/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var CalendarTOBaseBehavior = Core.CalendarTOBaseBehavior;
var CalendarConverter = Core.CalendarConverter;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;

/**
 * Represents the style of a Java calendar.
 * @typedef {Java.CalendarStyle} CalendarStyle
 * @property {string} date Date style.
 * @property {string} time Time style.
 * @property {string} calendar Calendar style.
 * @memberof Java
 */
var CalendarStyle = {
    /**
     * @type {string}
     */
    date: "date",

    /**
     * @type {string}
     */
    time: "time",

    /**
     * @type {string}
     */
    calendar: "calendar",

    /**
     * @ignore
     */
    _convertToRuntime: {
        "date": "date",
        "time": "time",
        "calendar": "calendar"
    },

    /**
     * @ignore
     */
    _convert: function(style) {
        var value = CalendarStyle._convertToRuntime[style.toLowerCase()];
        if (value === undefined)
            throw new Error("ArgumentException: unsupported calendar style.");
        return value;
    }
};

/**
 * CalendarDescriptionBehavior - the description for a Java Calendar object
 * @memberof Java
 * @ignore
 */
var CalendarDescriptionBehavior = {
    /**
     * The Java Calendar style. Possible values: {@link Java.CalendarStyle}.
     * @param {Java.CalendarStyle} [style] When provided, this method acts as a setter and sets the style value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored style value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.Calendar#
     */
    style: function (style) {
        return this._propertyHandler("style", style, CalendarStyle._convert);
    }
};

/**
 * The description of a Java Calendar test object.
 * @param {Object} [props] Initializes a Java Calendar test object using the supplied property bag.
 * @returns {Calendar} the description object that was initialized.
 * @class Calendar
 * @extends Java.UiObjectBaseDescription
 * @mixes Java.CalendarDescriptionBehavior
 * @memberof Java
 */
function Calendar(props) {
    var calendarDesc = new UiObjectBaseDescription("Calendar");
    ObjUtils.extend(calendarDesc, CalendarDescriptionBehavior);
    calendarDesc._defineByPropertyBag(props);
    return calendarDesc;
}

/**
 * The behaviors of Calendar object
 * @memberof Java
 * @ignore
 */
var CalendarTOBehavior = {
    /**
     * @ignore
     * @memberOf Java.CalendarTOBehavior
     */
    _helpers: {
        /**
         * Converts a Date to a string in dd-MMM-yyy format.
         * @param {Date} date
         * @returns {string} a date in string format. Sample: 14-Apr-2017
         * @ignore
         */
        convertToNativeSingleDateFormat: function (date) {
            return "" + date.getDate().toString().padStart(2, '0') + "-" + CalendarConverter._getMonthName(date) + "-" + date.getFullYear();
        }
    },

    /**
     * @ignore
     * @memberof Java.CalendarTOBehavior
     */
    _properties: {
        /**
         * Returns the style of the calendar. Possible values: {@link Java.CalendarStyle}.
         * @function
         * @returns {Promise<CalendarStyle>} a promise that is fulfilled with the style of the calendar.
         * @memberof Java.CalendarTO#
         */
        style: {
            type: 'enum',
            enumType: CalendarStyle,
            enumName: 'CalendarStyle'
        },

        /**
         * Returns the value set in the calendar in string format.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the value set in the calendar in string format.
         * @memberof Java.CalendarTO#
         */
        value: {

        }
    }
};

/**
 * A Java Calendar test object
 * @constructor
 * @class CalendarTO
 * @extends Java.UiObjectBaseTO
 * @mixes CalendarTOBaseBehavior._properties
 * @mixes CalendarTOBaseBehavior._methods
 * @mixes Java.CalendarTOBehavior._properties
 * @mixes Java.CalendarTOBehavior._methods
 * @memberof Java
 */
function CalendarTO(session, description) {
    description = description || Calendar();
    var calendarTO = new UiObjectBaseTO("JavaCalendar", session, description);
    calendarTO._mergeBehavior(CalendarTOBaseBehavior);
    calendarTO._mergeBehavior(CalendarTOBehavior);
    return calendarTO;
}

module.exports.Calendar = Calendar;
module.exports.CalendarTO = CalendarTO;
module.exports.CalendarStyle = CalendarStyle;
