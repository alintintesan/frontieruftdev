// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 9/8/2016.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * A TreeViewNode object
 * @constructor
 * @class TreeViewNode
 * @mixes Java.TreeViewNodeBehavior._properties
 * @mixes Java.TreeViewNodeBehavior._methods
 * @memberof Java
 */
function TreeViewNode(ownerTreeView, identifier, textRepresentation) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(TreeViewNodeBehavior);
    this._ownerTreeView = ownerTreeView;
    this._identifier = identifier;
    this._textRepresentation = textRepresentation;
    this._executeWithEventsOnItem = this._ownerTreeView._executeWithEventsOnItem.bind(this._ownerTreeView, this);
    this._executeWithEventsOnItemOnError = this._ownerTreeView._executeWithEventsOnItemOnError.bind(this._ownerTreeView, this);
}

TreeViewNode.prototype = {
    _ownerTreeView: null,
    _identifier: null,
    _textRepresentation: null,
    _executeWithEventsOnItem: null,
    _executeWithEventsOnItemOnError: null
};

/**
 * The methods of TreeViewNode object
 * @memberof Java
 * @ignore
 */
var TreeViewNodeBehavior = {
    /**
     * @memberof Java.TreeViewNodeBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the path to the node in the tree.
         * @function
         * @returns {string} the path to the node in the tree
         * @memberof Java.TreeViewNode#
         */
        path: function () {
            return this._getTextRepresentation();
        }
    },

    /**
     * @memberof Java.TreeViewNodeBehavior
     * @ignore
     */
    _methods: {
        /**
         * Collapses an expandable node in a tree.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the collapse operation ends.
         * @memberof Java.TreeViewNode#
         */
        collapse: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._nodeCollapse, this._identifier);
        },

        /**
         * Expands an expandable node in a tree.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the expand operation ends.
         * @memberof Java.TreeViewNode#
         */
        expand: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._nodeExpand, this._identifier);
        },

        /**
         * Opens the context menu of a node in a tree.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the openContextMenu operation ends.
         * @memberof Java.TreeViewNode#
         */
        openContextMenu: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._nodeOpenContextMenu, this._identifier);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Sets the state of the node in the tree.
         * @function
         * @param {number} index The state index.
         * @returns {Promise<void>} a promise that is fulfilled when the setNodeState operation ends.
         * @memberof Java.TreeViewNode#
         */
        setNodeState: function (index) {
            if (index == null)
                throw new Error("ArgumentException: index is required");
            return this._executeWithEventsOnItem(this._ownerTreeView._setNodeState, this._identifier, Convert.toNumber(index));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Sets the state of the node in the tree.
         * @function
         * @param {boolean} state The new state of the check box: true - Checked, false - Unchecked.
         * @returns {Promise<void>} a promise that is fulfilled when the setChecked operation ends.
         * @memberof Java.TreeViewNode#
         */
        setChecked: function (state) {
            if (state == null)
                throw new Error("ArgumentException: state is required");
            return this._executeWithEventsOnItem(this._ownerTreeView._setNodeChecked, this._identifier, Convert.toBool(state));
        },

        /**
         * Clicks the state icon of a node in a tree.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the clickState operation ends.
         * @memberof Java.TreeViewNode#
         */
        clickState: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._nodeClickState, this._identifier);
        },

        /**
         * Double-clicks the state icon of a node in a tree.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the doubleClickState operation ends.
         * @memberof Java.TreeViewNode#
         */
        doubleClickState: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._nodeDoubleClickState, this._identifier);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Returns the text of a node in the tree from the specified column by index or name.
         * @function
         * @param {number|string} columnIndexOrName 0-based index or the name of the column from which to return the value.
         * @returns {Promise<void>} a promise that is fulfilled when the getColumnValue operation ends.
         * @memberof Java.TreeViewNode#
         */
        getColumnValue: function (columnIndexOrName) {
            if (columnIndexOrName == null)
                throw new Error("ArgumentException: columnIndexOrName is required");
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._getNodeColumnValue, this._identifier, columnIndexOrName);
        }
    },

    _helpers: {
        /**
         * Get the identifier of the node.
         * @returns {string} the identifier of the node.
         * @ignore
         */
        _getIdentifier: function () {
            return this._identifier;
        },

        /**
         * Get the text representation of the node.
         * @returns {string} the text representation of the node.
         * @ignore
         */
        _getTextRepresentation: function () {
            return this._textRepresentation;
        }
    }
};

module.exports.TreeViewNode = TreeViewNode;
