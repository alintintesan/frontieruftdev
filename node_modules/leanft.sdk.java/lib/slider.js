// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/13/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var Convert = Core.Convert;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var JavaConvertHelper = UiObjectBase.JavaConvertHelper;


/**
 * The horizontal or vertical orientation of the slider.
 * @typedef {Java.SliderOrientation} SliderOrientation
 * @property {string} horizontal The slider is horizontal.
 * @property {string} vertical The slider is vertical.
 * @memberof Java
 */
var SliderOrientation = {
    /**
     * @type {string}
     */
    horizontal: "horizontal",

    /**
     * @type {string}
     */
    vertical: "vertical",

    /**
     * @ignore
     */
    _convertToNative: {
        "horizontal": "HSCROLL",
        "vertical": "VSCROLL"
    },

    /**
     * @ignore
     */
    _convertToSliderOrientation: {
        "hscroll": "horizontal",
        "vscroll": "vertical"
    },

    /**
     * @ignore
     */
    _sliderOrientationToJavaNative: function (orientation) {
        var value = SliderOrientation._convertToNative[orientation.toLowerCase()];
        if (value === undefined)
            throw new Error("ArgumentException: unsupported slider type.");
        return value;
    },

    /**
     * @ignore
     */
    _javaNativeToSliderOrientation: function (orientation) {
        return SliderOrientation._convertToSliderOrientation[orientation.toLowerCase()];
    }
};

/**
 * SliderDescriptionBehavior - The description of a Java Slider test object.
 * @memberof Java
 * @ignore
 */
var SliderDescriptionBehavior = {
    /**
     * The text of the container of the slider.
     * @param {string} [containerAttachedText] When provided, this method acts as a setter and sets the containerAttachedText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored containerAttachedText value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.Slider#
     */
    containerAttachedText: function (containerAttachedText) {
        return this._simplePropertyHandler("container attached text", containerAttachedText);
    },

    /**
     * A value of the {@link Java.SliderOrientation} enum.
     * @param {Java.SliderOrientation} [orientation] When provided, this method acts as a setter and sets the orientation value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored orientation value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.Slider#
     */
    orientation: function (orientation) {
        return this._propertyHandler("orientation", orientation, SliderOrientation._sliderOrientationToJavaNative, SliderOrientation._javaNativeToSliderOrientation);
    },

    /**
     * The position of the slider.
     * @param {number} [position] When provided, this method acts as a setter and sets the position value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored position value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.Slider#
     */
    position: function (position) {
        return this._propertyHandler("value", position, Convert.toNumber);
    },

    /**
     * The maximum position of the slider.
     * @param {number} [maxPosition] When provided, this method acts as a setter and sets the maxPosition value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored maxPosition value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.Slider#
     */
    maxPosition: function (maxPosition) {
        return this._propertyHandler("max", maxPosition, Convert.toNumber);
    },

    /**
     * The minimum position of the slider.
     * @param {number} [minPosition] When provided, this method acts as a setter and sets the minPosition value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored minPosition value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.Slider#
     */
    minPosition: function (minPosition) {
        return this._propertyHandler("min", minPosition, Convert.toNumber);
    },

    /**
     * Indicates whether the slider is a scrollBar.
     * @param {boolean} [isScrollBar] When provided, this method acts as a setter and sets the isScrollBar value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isScrollBar value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.Slider#
     */
    isScrollBar: function (isScrollBar) {
        return this._propertyHandler("is_scrollbar", isScrollBar, JavaConvertHelper.boolToNumericString, JavaConvertHelper.numericStringToBool);
    }
};

/**
 * The description of a Java Slider test object.
 * @param {Object} [props] Initializes a Java Slider test object using the supplied property bag.
 * @returns {Slider} the description object that was initialized.
 * @class Slider
 * @extends Java.UiObjectBaseDescription
 * @mixes Java.SliderDescriptionBehavior
 * @memberof Java
 */
function Slider(props) {
    var sliderDesc = new UiObjectBaseDescription("Slider");
    ObjUtils.extend(sliderDesc, SliderDescriptionBehavior);
    sliderDesc._defineByPropertyBag(props);
    return sliderDesc;
}

//Consts
var positionWiredName = "value";
var maxPositionWiredName = "max";
var minPositionWiredName = "min";
var isScrollBarWiredName = "is_scrollbar";

/**
 * The behaviors of Slider object
 * @memberof Java
 * @ignore
 */
var SliderTOBehavior = {
    /**
     * @ignore
     * @memberof Java.SliderTOBehavior
     */
    _properties: {
        /**
         * The text of the slider object's container.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text of the slider object's container.
         * @memberof Java.SliderTO#
         */
        containerAttachedText: {
            wiredName: "container attached text"
        },

        /**
         * A value of the {@link Java.SliderOrientation} enum.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled with the slider orientation.
         * @memberof Java.SliderTO#
         */
        orientation: {
            type: 'enum',
            enumType: SliderOrientation,
            enumName: 'SliderOrientation',
            getter: function () {
                return this._getROProperty("orientation", arguments).then(SliderOrientation._javaNativeToSliderOrientation);
            }
        },

        /**
         * The position of the slider.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the position of the slider.
         * @memberof Java.SliderTO#
         */
        position: {
            wiredName: positionWiredName,
            getter: function () {
                return this._getROProperty(positionWiredName, arguments).then(Convert.toNumber);
            }
        },

        /**
         * The maximum position of the slider.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the maximum position of the slider.
         * @memberof Java.SliderTO#
         */
        maxPosition: {
            wiredName: maxPositionWiredName,
            getter: function () {
                return this._getROProperty(maxPositionWiredName, arguments).then(Convert.toNumber);
            }
        },

        /**
         * The minimum position of the slider.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the minimum position of the slider.
         * @memberof Java.SliderTO#
         */
        minPosition: {
            wiredName: minPositionWiredName,
            getter: function () {
                return this._getROProperty(minPositionWiredName, arguments).then(Convert.toNumber);
            }
        },

        /**
         * Indicates whether slider is a scrollBar.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with slider is a scrollBar.
         * @memberof Java.SliderTO#
         */
        isScrollBar: {
            wiredName: isScrollBarWiredName,
            getter: function () {
                return this._getROProperty(isScrollBarWiredName, arguments).then(JavaConvertHelper.numericStringToBool);
            }
        }
    },

    /**
     * @ignore
     * @memberof Java.SliderTOBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Sets the position of the slider.
         * @function
         * @param {number} position The position of the slider.
         * @returns {Promise<void>} a promise that is fulfilled when the setPosition operation ends.
         * @memberof Java.SliderTO#
         */
        setPosition: function (position) {
            if (position == null)
                throw new Error("ArgumentException: position is required.");
            return this._executeWithEvents(arguments, "Drag", Convert.toNumber(position));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Moves the slider downward, or to the right, the specified number of lines.
         * @function
         * @param {number} [numberOfLines = 1] The number of lines to move the slider.
         * @returns {Promise<void>} a promise that is fulfilled when the nextLine operation ends.
         * @memberof Java.SliderTO#
         */
        nextLine: function (numberOfLines) {
            var value = numberOfLines == null ? 1 : Convert.toNumber(numberOfLines);
            if (value <= 0)
                throw new Error("ArgumentOutOfRangeException: Illegal value (<=0)");
            return this._executeWithEvents(arguments, "DragLine", value);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Moves the slider upward, or to the left, the specified number of lines.
         * @function
         * @param {number} [numberOfLines = 1] The number of lines to move the slider.
         * @returns {Promise<void>} a promise that is fulfilled when the previousLine operation ends.
         * @memberof Java.SliderTO#
         */
        previousLine: function (numberOfLines) {
            var value = numberOfLines == null ? 1 : Convert.toNumber(numberOfLines);
            if (value <= 0)
                throw new Error("ArgumentOutOfRangeException: Illegal value (<=0)");
            return this._executeWithEvents(arguments, "DragLine", (-1) * value);
        }
    }
};

/**
 * A Java Slider test object
 * @constructor
 * @class SliderTO
 * @extends Java.UiObjectBaseTO
 * @mixes Java.SliderTOBehavior._methods
 * @mixes Java.SliderTOBehavior._properties
 * @memberof Java
 */
function SliderTO(session, description) {
    description = description || Slider();
    var sliderTO = new UiObjectBaseTO("JavaSlider", session, description);
    sliderTO._mergeBehavior(SliderTOBehavior);
    return sliderTO;
}

module.exports.Slider = Slider;
module.exports.SliderTO = SliderTO;
module.exports.SliderOrientation = SliderOrientation;