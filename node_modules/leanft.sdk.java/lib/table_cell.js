// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/30/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * A single cell in a Java Table.
 * @constructor
 * @class TableCell
 * @mixes Java.TableCellBehavior._properties
 * @mixes Java.TableCellBehavior._methods
 * @memberof Java
 */
function TableCell(ownerTable, rowIdentifier, columnIdentifier) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(TableCellBehavior);
    this._ownerTable = ownerTable;
    this._rowIdentifier = rowIdentifier;
    this._columnIdentifier = columnIdentifier;
    this._executeWithEventsOnItem = this._ownerTable._executeWithEventsOnItem.bind(this._ownerTable, this);
    this._executeWithEventsOnItemOnError = this._ownerTable._executeWithEventsOnItemOnError.bind(this._ownerTable, this);
}

TableCell.prototype = {
    _ownerTable: null,
    _rowIdentifier: null,
    _columnIdentifier: null,
    _executeWithEventsOnItem: null,
    _executeWithEventsOnItemOnError: null
};

/**
 * The methods of TableCell object
 * @memberof Java
 * @ignore
 */
var TableCellBehavior = {
    /**
     * @memberof Java.TableCellBehavior
     * @ignore
     */
    _properties: {
        /**
         * The content of this cell.
         * @function
         * @returns {Promise<Object>} a promise that is fulfilled with the content of this cell.
         * @memberof Java.TableCell#
         */
        value: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTable._getCellValue, this._rowIdentifier, this._columnIdentifier);
        },

        /**
         * The column header name of this cell.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the column header name of this cell.
         * @memberof Java.TableCell#
         */
        columnHeader: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTable._getColumnHeader, this._columnIdentifier);
        }
    },

    /**
     * @memberof Java.TableCellBehavior
     * @ignore
     */
    _methods: {
        /**
         * Sets the cell value.
         * @function
         * @param {Object} value The value to set.
         * @returns {Promise<void>} a promise that is fulfilled when the setValue operation ends.
         * @memberof Java.TableCell#
         */
        setValue: function (value) {
            return this._executeWithEventsOnItem(this._ownerTable._setCellValue, this._rowIdentifier, this._columnIdentifier, value);
        },

        /**
         * Clicks the cell using the specified MouseButton.
         * @function
         * @param {MouseButton} [button = MouseButton.left] Either the Left or Right value of {@link MouseButton}.
         * @param {Java.TableKeyModifier} [modifier] A {@link Java.TableKeyModifier} value indicating keys to be pressed and held while the operation is performed.
         * @returns {Promise<void>} a promise that is fulfilled when the click operation ends.
         * @memberof Java.TableCell#
         */
        click: function (button, modifier) {
            return this._executeWithEventsOnItem(this._ownerTable._clickCell, this._rowIdentifier, this._columnIdentifier, button, modifier);
        },

        /**
         * Double clicks the cell using the specified MouseButton.
         * @function
         * @param {MouseButton} [button = MouseButton.left] Either the Left or Right value of {@link MouseButton}.
         * @param {Java.TableKeyModifier} [modifier] A {@link Java.TableKeyModifier} value indicating keys to be pressed and held while the operation is performed.
         * @returns {Promise<void>} a promise that is fulfilled when the doubleClick operation ends.
         * @memberof Java.TableCell#
         */
        doubleClick: function (button, modifier) {
            return this._executeWithEventsOnItem(this._ownerTable._doubleClickCell, this._rowIdentifier, this._columnIdentifier, button, modifier);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Drags and drops this cell to the specified target {@link Java.TableCell}
         * @function
         * @param {Java.TableCell} targetCell The target {@link Java.TableCell} on which this {@link Java.TableCell} is dropped.
         * @param {MouseButton} [button = MouseButton.left] Either the Left or Right value of {@link MouseButton}.
         * @param {Java.TableKeyModifier} [modifier] A {@link Java.TableKeyModifier} value indicating keys to be pressed and held while the operation is performed.
         * @returns {Promise<void>} a promise that is fulfilled when the doubleClick operation ends.
         * @memberof Java.TableCell#
         */
        dragAndDropOn: function (targetCell, button, modifier) {
            if (targetCell == null)
                throw new Error("ArgumentException: null target cell is not supported.");
            return this._executeWithEventsOnItem(this._ownerTable._dragAndDropOn, this._rowIdentifier, this._columnIdentifier, targetCell._rowIdentifier, targetCell._columnIdentifier, button, modifier);
        }
    }
};

module.exports.TableCell = TableCell;