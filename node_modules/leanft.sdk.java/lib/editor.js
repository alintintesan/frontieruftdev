// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/12/2016.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var JavaConvertHelper = UiObjectBase.JavaConvertHelper;

/**
 * EditorDescriptionBehavior - the description for a Java Editor object
 * @memberof Java
 * @ignore
 */
var EditorDescriptionBehavior = {
    /**
     * Indicates whether the object is read only.
     * @param {boolean} [isReadOnly] When provided, this method acts as a setter and sets the isReadOnly value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isReadOnly value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.Editor#
     */
    isReadOnly: function (isReadOnly) {
        return this._propertyHandler("editable", isReadOnly, JavaConvertHelper.reverseBoolToNumericString , JavaConvertHelper.reverseNumericStringToBool);
    },

    /**
     * The text in the editor.
     * @param {string} [text] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.Editor#
     */
    text: function (text) {
        return this._simplePropertyHandler("value", text);
    }
};

/**
 * The description of a Java Editor test object.
 * @param {Object} [props] Initializes a Java Editor test object using the supplied property bag.
 * @returns {Editor} the description object that was initialized.
 * @class Editor
 * @extends Java.UiObjectBaseDescription
 * @mixes Java.EditorDescriptionBehavior
 * @memberof Java
 */
function Editor(props) {
    var editorDesc = new UiObjectBaseDescription("Editor");
    ObjUtils.extend(editorDesc, EditorDescriptionBehavior);
    editorDesc._defineByPropertyBag(props);
    return editorDesc;
}

//Consts
var readOnlyWiredName = "editable";

/**
 * The behaviors of Editor object
 * @memberof Java
 * @ignore
 */
var EditorTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.ButtonTOBehavior
     */
    _properties: {
        /**
         * Indicates whether the object is read only.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean indicating if the object is read-only.
         * @memberof Java.EditorTO#
         */
        isReadOnly: {
            wiredName: readOnlyWiredName,
            getter: function () {
                return this._getROProperty(readOnlyWiredName, arguments).then(JavaConvertHelper.reverseNumericStringToBool);
            }
        },

        /**
         * The text in the editor.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text in the editor.
         * @memberof Java.EditorTO#
         */
        text: {
            wiredName: "value"
        }
    },

    /**
     * @ignore
     * @memberof WPF.ButtonTOBehavior
     */
    _methods: {
        /**
         * Activates the edit box.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         * @memberof Java.EditorTO#
         */
        activate: function () {
            return this._executeWithEvents(arguments, "Activate");
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Clicks the specified link in the edit box.
         * @function
         * @param {string} linkName The name of the link to click.
         * @returns {Promise<void>} a promise that is fulfilled when the clickLink operation ends.
         * @memberof Java.EditorTO#
         */
        clickLink: function (linkName) {
            if (linkName == null)
                throw new Error("ArgumentException: linkName is required.");
            return this._executeWithEvents(arguments, "ClickLink", linkName);
        },

        /**
         * Sets the focus on the edit box.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the setFocus operation ends.
         * @memberof Java.EditorTO#
         */
        setFocus: function () {
            return this._executeWithEvents(arguments, "SetFocus");
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Deletes the specified text.
         * All positions are 0-based.
         * @function
         * @param {number} fromLine The line in which the deletion starts.
         * @param {number} fromCharPos The character position at which the deletion starts in the first line, inclusive.
         * @param {number} toLine The line in which the deletion ends.
         * @param {number} toCharPos The character position at which the deletion ends in the last line, inclusive.
         * @returns {Promise<void>} a promise that is fulfilled when the delete operation ends.
         * @memberof Java.EditorTO#
         */
        delete: function (fromLine, fromCharPos, toLine, toCharPos) {
            if (fromLine == null)
                throw new Error("ArgumentException: fromLine is required.");
            if (fromCharPos == null)
                throw new Error("ArgumentException: fromCharPos is required.");
            if (toLine == null)
                throw new Error("ArgumentException: toLine is required.");
            if (toCharPos == null)
                throw new Error("ArgumentException: toCharPos is required.");
            return this._executeWithEvents(arguments, "Delete", Convert.toNumber(fromLine), Convert.toNumber(fromCharPos), Convert.toNumber(toLine), Convert.toNumber(toCharPos) + 1);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Inserts a text string into the specified location in the edit box.
         * All positions are 0-based.
         * @function
         * @param {string} text The text string to insert.
         * @param {number} line The line in which to insert the text.
         * @param {number} charPos The character position at which to insert the text.
         * @returns {Promise<void>} a promise that is fulfilled when the insert operation ends.
         * @memberof Java.EditorTO#
         */
        insert: function (text, line, charPos) {
            if (text == null)
                throw new Error("ArgumentException: text is required.");
            if (line == null)
                throw new Error("ArgumentException: line is required.");
            if (charPos == null)
                throw new Error("ArgumentException: charPos is required.");
            return this._executeWithEvents(arguments, "Insert", text, Convert.toNumber(line), Convert.toNumber(charPos));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Replaces text.
         * All positions are 0-based.
         * @function
         * @param {string} text The text that replaces the existing text.
         * @param {number} fromLine The line in which the replacement starts.
         * @param {number} fromCharPos The character position at which the replacement starts in the first line, inclusive.
         * @param {number} toLine The line in which the replacement ends.
         * @param {number} toCharPos The character position at which the replacement ends in the last line, inclusive.
         * @returns {Promise<void>} a promise that is fulfilled when the replace operation ends.
         * @memberof Java.EditorTO#
         */
        replace: function (text, fromLine, fromCharPos, toLine, toCharPos) {
            if (text == null)
                throw new Error("ArgumentException: text is required.");
            if (fromLine == null)
                throw new Error("ArgumentException: fromLine is required.");
            if (fromCharPos == null)
                throw new Error("ArgumentException: fromCharPos is required.");
            if (toLine == null)
                throw new Error("ArgumentException: toLine is required.");
            if (toCharPos == null)
                throw new Error("ArgumentException: toCharPos is required.");
            return this._executeWithEvents(arguments, "Replace", Convert.toNumber(fromLine), Convert.toNumber(fromCharPos), Convert.toNumber(toLine), Convert.toNumber(toCharPos) + 1, text);
        },

        /**
         * Selects text in the edit box.
         * All positions are 0-based.
         * @function
         * @param {number} fromLine The line in which the selection starts
         * @param {number} fromCharPos The character position at which the deletion starts in the first line, inclusive.
         * @param {number} toLine The line in which the deletion ends.
         * @param {number} toCharPos The character position at which the deletion ends in the last line, inclusive.
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         * @memberof Java.EditorTO#
         */
        select: function (fromLine, fromCharPos, toLine, toCharPos) {
            if (fromLine == null)
                throw new Error("ArgumentException: fromLine is required.");
            if (fromCharPos == null)
                throw new Error("ArgumentException: fromCharPos is required.");
            if (toLine == null)
                throw new Error("ArgumentException: toLine is required.");
            if (toCharPos == null)
                throw new Error("ArgumentException: toCharPos is required.");
            return this._executeWithEvents(arguments, "SetSelection", Convert.toNumber(fromLine), Convert.toNumber(fromCharPos), Convert.toNumber(toLine), Convert.toNumber(toCharPos) + 1);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Sets the text of the edit box.
         * @function
         * @param {string} text The text.
         * @returns {Promise<void>} a promise that is fulfilled when the setText operation ends.
         * @memberof Java.EditorTO#
         */
        setText: function (text) {
            if (text == null)
                throw new Error("ArgumentException: text is required.");
            return this._executeWithEvents(arguments, "Set", text);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Sets the encoded value of this edit box.
         * Generates the encoded value using the Password Encoder utility, available from the LeanFT > Tools menu in your IDE or from the Windows Start menu.
         * Note: The SetSecure method enables you to hide passwords displayed on the screen while running or editing a LeanFT test, but it is not intended to be a secure way to protect password information.
         * @function
         * @param {string} encodedText The encoded text to enter in this edit box.
         * @returns {Promise<void>} a promise that is fulfilled when the setSecure operation ends.
         * @memberof Java.EditorTO#
         */
        setSecure: function (encodedText) {
            if (encodedText == null)
                throw new Error("ArgumentException: encodedText is required.");
            return this._executeWithEvents(arguments, "SetSecure", encodedText);
        },

        /**
         * Places the cursor at the specified position in the edit box.
         * All positions are 0-based.
         * @function
         * @param {number} line The line in which the cursor is placed.
         * @param {number} charPos The character position at which the cursor is placed.
         * @returns {Promise<void>} a promise that is fulfilled when the setCursorPosition operation ends.
         * @memberof Java.EditorTO#
         */
        setCursorPosition: function (line, charPos) {
            if (line == null)
                throw new Error("ArgumentException: line is required.");
            if (charPos == null)
                throw new Error("ArgumentException: charPos is required.");
            return this._executeWithEvents(arguments, "SetCaretPos", Convert.toNumber(line), Convert.toNumber(charPos));
        }
    }
};

/**
 * A Java Editor test object
 * @constructor
 * @class EditorTO
 * @extends Java.UiObjectBaseTO
 * @mixes Java.EditorTOBehavior._properties
 * @mixes Java.EditorTOBehavior._methods
 * @memberof Java
 */
function EditorTO(session, description) {
    description = description || Editor();
    var editorTO = new UiObjectBaseTO("JavaEdit", session, description);
    editorTO._mergeBehavior(EditorTOBehavior);
    return editorTO;
}

module.exports.Editor = Editor;
module.exports.EditorTO = EditorTO;