// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/19/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;

var StringUtils = Core.StringUtils;
var ListItem = require("./list_item.js").ListItem;
var ContainerBehavior = Core.ContainerBehavior;
var Convert = Core.Convert;
var ArrayUtils = Core.ArrayUtils;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;


/**
 * ListDescriptionBehavior - the description for a List object
 * @memberof Java
 * @ignore
 */
var ListDescriptionBehavior = {
    /**
     * The selected items in the list.
     * @param {string[]} [selectedItem] When provided, this method acts as a setter and sets the selectedItems value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedItems value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedItems: function (selectedItems) {
        return this._propertyHandler("value", selectedItems, StringUtils.joinFunc("\u0018"), StringUtils.splitFunc("\u0018"));
    },

    /**
     * The number of items in the list.
     * @param {number} [itemsCount] When provided, this method acts as a setter and sets the itemsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored itemsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    itemsCount: function (itemsCount) {
        return this._propertyHandler("items count", itemsCount, Convert.toNumber);
    }
};

/**
 * The description of a List test object.
 * @param {Object} [props] Initializes a List test object using the supplied property bag.
 * @returns {List} the description object that was initialized.
 * @class List
 * @extends Java.UiObjectBaseDescription
 * @mixes Java.ListDescriptionBehavior
 * @memberof Java
 */
function List(props) {
    var listDesc = new UiObjectBaseDescription("List");
    Utils.extend(listDesc, ListDescriptionBehavior);
    listDesc._defineByPropertyBag(props);
    return listDesc;
}

/**
 * A List object,
 * @constructor
 * @class ListTO
 * @extends Java.UiObjectBaseTO
 * @mixes Java.ListTOBehavior._properties
 * @mixes Java.ListTOBehavior._methods
 * @memberof Java
 */
function ListTO(session, description) {
    description = description || List();
    var listTO = new UiObjectBaseTO("JavaList", session, description);
    listTO._mergeBehavior(ContainerBehavior);
    listTO._mergeBehavior(WrappedItemExecutorBehavior);
    listTO._mergeBehavior(ListTOBehavior);
    return listTO;
}

//Consts
var selectedItemWiredName = "value";
var itemsCountWiredName = "items count";

/**
 * The behaviors of the List object
 * @memberof Java
 * @ignore
 */
var ListTOBehavior = {

    _helpers: {
        /**
         * The number of list items in the List.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of List items in the List.
         * @memberof Java.ListTO#
         * @ignore
         */
        _itemsCount: function () {
            return this._getROProperty(itemsCountWiredName, arguments).then(Convert.toNumber);
        },

        _itemToStringRepresentation: function (item) {
            if (typeof item === 'number')
                return "#" + item;

            return item;
        },

        _itemTransform: function (item) {
            if (typeof item === 'number')
                return "#" + item;

            if (typeof item === 'string')
                return item;

            if (typeof item === 'object')
                return this._itemToStringRepresentation(item._getIdentifier());

            throw new Error("ArgumentException: unsupported identifier type");
        },

        /**
         * Select the text of the item.
         * @function
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * If it is a string, it is the name of the item.
         * @returns {Promise<string>} a promise that is fulfilled with the item's text when the _getItemText operation ends.
         * @ignore
         */
        _getItemText: function (identifier) {
            if (typeof identifier === 'string') {
                return this._executeNotWrapped(arguments, "GetItemIndex", identifier).then(function () {
                    return identifier;
                });
            }
            if (typeof identifier === 'number') {
                return this._executeNotWrapped(arguments, "GetItem", identifier);
            }
            throw new Error("unsupported identifier type");
        },

        /**
         * Get the item index.
         * @function
         * @param {number|string} identifier The identifier of the item. If it's a number, it's the 0-based index of the item.
         * If it's a string, it's the name of the item.
         * @returns {Promise<number>} a promise that is fulfilled with teh item's index when the _getItemIndex operation ends.
         * @ignore
         */
        _getItemIndex: function (identifier) {
            if (typeof identifier === 'string') {
                return this._executeNotWrapped(arguments, "GetItemIndex", identifier);
            }
            if (typeof identifier === 'number') {
                return this._executeNotWrapped(arguments, "GetItem", identifier).then(function (itemIndex) {
                    return identifier;
                });
            }
            throw new Error("unsupported identifier type");
        },

        /**
         * Create an item from the identifier and textRepresentation
         * @function
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * @param {string} textRepresentation The text representation if the item.
         * @returns {ListItem} The ListItem object
         * @ignore
         */
        _createItem: function (identifier, textRepresentation) {
            return new ListItem(this, identifier, textRepresentation);
        }
    },

    _additionalProperties: {
        itemsCount: {wiredName: itemsCountWiredName}
    },

    /**
     * @ignore
     * @memberof Java.LinkTOBehavior
     */
    _properties: {
        /**
         * Returns the collection of items in the list.
         * @function
         * @returns {Promise<Java.ListItem[]>} a promise that is fulfilled with the collection of items in the List.
         * @memberof Java.ListTO#
         */
        items: {
            wiredName: itemsCountWiredName,
            getter: function () {
                return this._itemsCount().then((function (itemsCount) {
                    var allItems = [];
                    for (var i = 0; i < itemsCount; i++) {
                        allItems[i] = this._createItem(i);
                    }
                    return allItems;
                }).bind(this));
            }
        },

        /**
         * Returns the collection of items that are selected in the list.
         * @function
         * @returns {Promise<Java.ListItem[]>} a promise that is fulfilled with an array of all selected items in the List. See {@link Java.ListItem}
         * @memberof Java.ListTO#
         */
        selectedItems: {
            wiredName: selectedItemWiredName,
            getter: function () {
                return this._nativePropertyToItems("\u0018", selectedItemWiredName);
            }
        }
    },

    /**
     * @ignore
     * @memberof Java.LinkTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Returns the item with the specified text.
         * @function
         * @param {string} text The text of the item.
         * @returns {Java.ListItem} Get the List item with the specified text.
         * @memberof Java.ListTO#
         */
        getItem: function (text) {
            if (text == null)
                throw new Error("ArgumentException: text is required.");
            return this._createItem(text, text);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Activate a list item.
         * @function
         * @param {ListItem|number|string} item The item to be activated.
         * The input can be the list item, the 0-based index of the item or the name/text of the item
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         */
        activateItem: function (item) {
            if (item == null)
                throw new Error("ArgumentException: item is required.");
            return this._executeWithEvents(arguments, "Activate", this._itemTransform(item));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Deselects items in the list.
         * @function
         * @param {...(ListItem | number | string)} items You can pass as many items as you like, each item can be either the {@link Java.ListItem}, name of the item you wish to select,
         * or the numeric index of the item in the list.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        deselect: function (items) {
            if (items == null)
                throw new Error("ArgumentException: items is required.");
            return this._executeSingleOpOnCollection(arguments, "Deselect", ArrayUtils.toArray(arguments), this._itemTransform.bind(this));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects additional items from the multi-selection list.
         * @function
         * @param {...(ListItem | number | string)} items Each item can be either the {@link Java.ListItem}, the name of the item you wish to select,
         * or the numeric index of the item in the list.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        extendSelect: function (items) {
            if (items == null)
                throw new Error("ArgumentException: items is required.");
            return this._executeOnItemsCollection(arguments, "ExtendSelect", "ExtendSelect", ArrayUtils.toArray(arguments), this._itemTransform.bind(this));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects multiple items by ListItems collection or string values or indices.
         * @function
         * @param {...(ListItem | number | string)} items You can pass as many items as you like, each item can be either the {@link Java.ListItem}, name of the item you wish to select,
         * or the numeric index of the item in the list.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        select: function (items) {
            if (items == null)
                throw new Error("ArgumentException: items is required.");
            return this._executeOnItemsCollection(arguments, "Select", "ExtendSelect", ArrayUtils.toArray(arguments), this._itemTransform.bind(this));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects list items between (and including) the two specified items.
         * @function
         * @param {number | string} itemOrIndexFirst 0-based index or the name of the first item to select.
         * @param {number | string} itemOrIndexLast 0-based index or the name of the last item to select.
         * @returns {Promise<void>} a promise that is fulfilled when the selectRange operation ends.
         * @memberof Java.ListTO#
         */
        selectRange: function (itemOrIndexFirst, itemOrIndexLast) {
            if (itemOrIndexFirst == null)
                throw new Error("ArgumentException: itemOrIndexFirst is required.");
            if (itemOrIndexLast == null)
                throw new Error("ArgumentException: itemOrIndexLast is required.");

            var itemFrom = (typeof itemOrIndexFirst === "number") ? "#" + Convert.toNumber(itemOrIndexFirst) : itemOrIndexFirst;
            var itemTo = (typeof itemOrIndexLast === "number") ? "#" + Convert.toNumber(itemOrIndexLast) : itemOrIndexLast;
            
            return this._executeWithEvents(arguments, "SelectRange", itemFrom, itemTo);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Deselects list items between (and including) the two specified items.
         * @function
         * @param {number} indexFrom 0-based index of the first item.
         * @param {number} indexTo 0-based index of the last item.
         * @returns {Promise<void>} a promise that is fulfilled when the deselectRange operation ends.
         * @memberof Java.ListTO#
         */
        deselectRange: function (indexFrom, indexTo) {
            if (indexFrom == null)
                throw new Error("ArgumentException: indexFrom is required.");
            if (indexTo == null)
                throw new Error("ArgumentException: indexTo is required.");
            return this._executeWithEvents(arguments, "DeselectRange", "#" + Convert.toNumber(indexFrom), "#" + Convert.toNumber(indexTo));
        }
    }
};

module.exports.List = List;
module.exports.ListTO = ListTO;
module.exports.ListDescriptionBehavior = ListDescriptionBehavior;
