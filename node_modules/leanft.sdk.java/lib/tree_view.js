// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 9/8/2016.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var ArrayUtils = Core.ArrayUtils;
var ContainerBehavior = Core.ContainerBehavior;
var ExecuteItemsWithEventsBehavior = Core.ExecuteItemsWithEventsBehavior;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var TreeViewNode = require("./treeview_node.js").TreeViewNode;
var TreeViewBaseDescriptionBehavior = require("./tree_view_base.js").TreeViewBaseDescriptionBehavior;

/**
 * TreeViewDescriptionBehavior - the description for a Java Tree test object
 * @memberof Java
 * @ignore
 */
var TreeViewDescriptionBehavior = {
    /**
     * The number of visible nodes.
     * @param {number} [visibleNodesCount] When provided, this method acts as a setter and sets the visibleNodesCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored visibleNodesCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.TreeView#
     */
    visibleNodesCount: function (visibleNodesCount) {
        return this._propertyHandler("items count", visibleNodesCount, Convert.toNumber);
    }
};

/**
 * The description of a Java Tree test object.
 * @param {Object} [props] Initializes a Java Tree test object using the supplied property bag.
 * @returns {TreeView} the description object that was initialized.
 * @class TreeView
 * @extends Java.UiObjectBaseDescription
 * @mixes Java.TreeViewBaseDescriptionBehavior
 * @mixes Java.TreeViewDescriptionBehavior
 * @memberof Java
 */
function TreeView(props) {
    var treeViewDesc = new UiObjectBaseDescription("TreeView");
    ObjUtils.extend(treeViewDesc, TreeViewBaseDescriptionBehavior);
    ObjUtils.extend(treeViewDesc, TreeViewDescriptionBehavior);
    treeViewDesc._defineByPropertyBag(props);
    return treeViewDesc;
}

//Consts
var itemsCountWiredName = "items count";
var columnCountWiredName = "columns_count";
var selectedNodesWiredName = "value";

/**
 * The behaviors of Tree object
 * @memberof Java
 * @ignore
 */
var TreeViewTOBehavior = {
    /**
     * @ignore
     * @memberof Java.TreeViewTOBehavior
     */
    _properties: {
        /**
         * Returns the number of visible nodes in the tree.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of visible nodes in the tree.
         * @memberof Java.TreeViewTO#
         */
        visibleNodesCount: {
            wiredName: itemsCountWiredName,
            getter: function () {
                return this._getROProperty(itemsCountWiredName, arguments).then(Convert.toNumber);
            }
        },

        /**
         * Returns the number of columns in the tree.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns in the tree.
         * @memberof Java.TreeViewTO#
         */
        columnsCount: {
            wiredName: columnCountWiredName,
            getter: function () {
                return this._getROProperty(columnCountWiredName, arguments).then(function(_columnsCount) {
                    return _columnsCount != null ? Convert.toNumber(_columnsCount) : 0;
                });
            }
        },

        /**
         * Returns the selected nodes in the tree.
         * @function
         * @returns {Promise<Java.TreeViewNode>} a promise that is fulfilled with the selected nodes in the tree.
         * @memberof Java.TreeViewTO#
         */
        selectedNodes: {
            wiredName: selectedNodesWiredName,
            getter: function () {
                return this._nativePropertyToItems("\u0018", selectedNodesWiredName);
            }
        }
    },

    /**
     * @ignore
     * @memberof Java.TreeViewTOBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Returns the path of a node in the tree.
         * @function
         * @param {...(string|number)} nodePathParts The tree node path parts can be: text or 0-based numeric index. For a full path, separate items with commas.
         * @returns {string} The path of a node in the tree.
         * @memberof Java.TreeViewTO#
         */
        buildNodePath: function (nodePathParts) {
            nodePathParts = ArrayUtils.toArray(arguments);
            if (nodePathParts.length === 0)
                return "";
            return nodePathParts.map(this._handlePathPart).join(";");
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Activates a node in the tree by the nodes or node path.
         * @function
         * @param {Java.TreeViewNode|string} nodeOrPath The specified node to activate in the tree or the full path of the node to activate within the tree.
         * Tip: Use the {@link Java.TreeViewTO#buildNodePath} method to build the node path string to be used as the nodeOrPath argument for this method.
         * @returns {Promise<void>} a promise that is fulfilled when the activateNode operation ends.
         * @memberof Java.TreeViewTO#
         */
        activateNode: function (nodeOrPath) {
            if (nodeOrPath == null)
                throw new Error("ArgumentException: nodeOrPath is required.");
            return this._executeWithEvents(arguments, "Activate", this._nodeTransform(nodeOrPath));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Clears the selection of nodes in the tree by the nodes or nodes paths.
         * @function
         * @param {...(Java.TreeViewNode|string)} nodesOrPaths The nodes to deselect or the paths of the nodes to deselect.
         * Tip: Use the {@link Java.TreeViewTO#buildNodePath} method to build the node path strings to be used as arguments for this method.
         * @returns {Promise<void>} a promise that is fulfilled when the deselect operation ends.
         * @memberof Java.TreeViewTO#
         */
        deselect: function (nodesOrPaths) {
            if (nodesOrPaths == null)
                throw new Error("ArgumentException: nodesOrPaths is required.");
            return this._executeSingleOpOnCollection(arguments, "Deselect", ArrayUtils.toArray(arguments), this._nodeTransform);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Clears the selection of the specified range of nodes in a tree.
         * Tip: Use the {@link Java.TreeViewTO#buildNodePath} method to build the node path strings to be used as the fromNodePath and toNodePath arguments for this method.
         * @function
         * @param {string} fromNodePath 0-based index or the full path of the first node in the range.
         * @param {string} toNodePath 0-based index or the full path of the last node in the range.
         * @returns {Promise<void>} a promise that is fulfilled when the deselectRange operation ends.
         * @memberof Java.TreeViewTO#
         */
        deselectRange: function (fromNodePath, toNodePath) {
            if (fromNodePath == null)
                throw new Error("ArgumentException: fromNodePath is required.");
            if (toNodePath == null)
                throw new Error("ArgumentException: toNodePath is required.");
            return this._executeWithEvents(arguments, "DeselectRange", fromNodePath, toNodePath);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects additional nodes in the tree.
         * @function
         * @param {...(Java.TreeViewNode|string)} nodesOrPaths The nodes or the paths of the nodes to add to the selection.
         * Tip: Use the {@link Java.TreeViewTO#buildNodePath} method to build the node path strings.
         * @returns {Promise<void>} a promise that is fulfilled when the extendSelect operation ends.
         * @memberof Java.TreeViewTO#
         */
        extendSelect: function (nodesOrPaths) {
            if (nodesOrPaths == null)
                throw new Error("ArgumentException: nodesOrPaths is required.");
            return this._executeSingleOpOnCollection(arguments, "ExtendSelect", ArrayUtils.toArray(arguments), this._nodeTransform);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Returns the header of the specified column in the tree.
         * @function
         * @param {number} columnIndex 0-based index of the column from which to return the value.
         * @returns {Promise<string>} a promise that is fulfilled with the header of the column in the tree.
         * @memberof Java.TreeViewTO#
         */
        getColumnHeader: function (columnIndex) {
            if (columnIndex == null)
                throw new Error("ArgumentException: columnIndex is required.");
            return this._executeWithEventsOnError(arguments, "GetColumnHeader", Convert.toNumber(columnIndex));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Returns the specified node.
         * Tip: Use the {@link Java.TreeViewTO#buildNodePath} method to build the node path strings to be used as the nodePath argument for this method.
         * @function
         * @param {string} nodePath The full path of the node to return within the tree.
         * @returns {Java.TreeViewNode} The specified node
         * @memberof Java.TreeViewTO#
         */
        getNode: function (nodePath) {
            if (nodePath == null)
                throw new Error("ArgumentException: nodePath is required.");
            return this._createItem(nodePath, nodePath);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects the specified nodes in the tree by the nodes or nodes paths.
         * @function
         * @param {...(Java.TreeViewNode|string)} nodesOrPaths The nodes or the full path of the nodes to select in the tree.
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         * @memberof Java.TreeViewTO#
         */
        select: function (nodesOrPaths) {
            if (nodesOrPaths == null)
                throw new Error("ArgumentException: nodesOrPaths is required.");
            return this._executeOnItemsCollection(arguments, "Select", "ExtendSelect", ArrayUtils.toArray(arguments), this._nodeTransform);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects the specified range of nodes in the tree.
         * Tip: Use the {@link Java.TreeViewTO#buildNodePath} method to build the node path strings to be used as the fromNodePath and toNodePath arguments for this method.
         * @function
         * @param {Java.TreeViewNode|string} fromNodeOrPath The node or the full path of the first node in the range.
         * @param {Java.TreeViewNode|string} toNodeOrPath The node or the full path of the last node in the range.
         * @returns {Promise<void>} a promise that is fulfilled when the selectRange operation ends.
         * @memberof Java.TreeViewTO#
         */
        selectRange: function (fromNodeOrPath, toNodeOrPath) {
            if (fromNodeOrPath == null)
                throw new Error("ArgumentException: fromNodeOrPath is required.");
            if (toNodeOrPath == null)
                throw new Error("ArgumentException: toNodePath is required.");
            return this._executeWithEvents(arguments, "SelectRange", this._nodeTransform(fromNodeOrPath), this._nodeTransform(toNodeOrPath));
        }
    },

    _helpers: {
        /**
         * Collapses an expandable node in a tree.
         * @param {string} identifier The identifier of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the _nodeCollapse operation ends.
         * @ignore
         */
        _nodeCollapse: function (identifier) {
            return this._executeNotWrapped(arguments, "Collapse", identifier);
        },

        /**
         * Expands an expandable node in a tree.
         * @param {string} identifier The identifier of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the _nodeExpand operation ends.
         * @ignore
         */
        _nodeExpand: function (identifier) {
            return this._executeNotWrapped(arguments, "Expand", identifier);
        },

        /**
         * Opens the context menu of a node in a tree.
         * @param {string} identifier The identifier of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the _nodeOpenContextMenu operation ends.
         * @ignore
         */
        _nodeOpenContextMenu: function (identifier) {
            return this._executeNotWrapped(arguments, "OpenContextMenu", identifier);
        },

        /**
         * Sets the state of the node in the tree.
         * @param {string} identifier The identifier of the node.
         * @param {number} index The state index.
         * @returns {Promise<void>} a promise that is fulfilled when the _setNodeState operation ends.
         * @ignore
         */
        _setNodeState: function (identifier, index) {
            return this._executeNotWrapped(arguments, "SetItemState", identifier, index);
        },

        /**
         * Sets the state of the node in the tree.
         * @param {string} identifier The identifier of the node.
         * @param {boolean} state The new state of the check box: true - Checked, false - Unchecked.
         * @returns {Promise<void>} a promise that is fulfilled when the _setNodeChecked operation ends.
         * @ignore
         */
        _setNodeChecked: function (identifier, state) {
            return this._executeNotWrapped(arguments, "SetItemState", identifier, state ? 1 : 0);
        },

        /**
         * Clicks the state icon of a node in a tree.
         * @param {string} identifier The identifier of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the _nodeClickState operation ends.
         * @ignore
         */
        _nodeClickState: function (identifier) {
            return this._executeNotWrapped(arguments, "SetItemState", identifier, -1);
        },

        /**
         * Double-clicks the state icon of a node in a tree.
         * @param {string} identifier The identifier of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the _nodeDoubleClickState operation ends.
         * @ignore
         */
        _nodeDoubleClickState: function (identifier) {
            return this._executeNotWrapped(arguments, "SetItemState", identifier, -2);
        },

        /**
         * Returns the text of a node in the tree from the specified column by index.
         * @param {string} identifier The identifier of the node.
         * @param {number|string} columnIndexOrName 0-based index or the name of the column from which to return the value.
         * @returns {Promise<string>} a promise that is fulfilled when the _getNodeColumnValue operation ends.
         * @ignore
         */
        _getNodeColumnValue: function (identifier, columnIndexOrName) {
            return this._executeNotWrapped(arguments, "GetColumnValue", identifier, columnIndexOrName);
        },

        /**
         * Returns the tree node identifier or node path string.
         * @param nodeOrPath The tree node path.
         * @returns {string} The identifier of the tree node or node path string.
         * @ignore
         */
        _nodeTransform: function (nodeOrPath) {
            return nodeOrPath instanceof TreeViewNode ? nodeOrPath._getIdentifier() : nodeOrPath;
        },

        /**
         * Create an TreeViewNode from the identifier and textRepresentation
         * @param {number|string} identifier The identifier of the tree node.
         * @param {string} textRepresentation The text representation of the tree node.
         * @returns {Java.TreeViewNode} The TreeViewNode object
         * @ignore
         */
        _createItem: function (identifier, textRepresentation) {
            return new TreeViewNode(this, identifier, textRepresentation);
        },

        /**
         * Handle each node path
         * @param {string|number} pathPart The tree node path part can be: text or 0-based numeric index.
         * @returns {string} The node path part that is handled.
         * @ignore
         */
        _handlePathPart: function (pathPart) {
            var pathPartType = typeof pathPart;

            switch (pathPartType) {
                case "number":
                    if (pathPart > 0)
                        return "#" + pathPart;
                    throw new Error("ArgumentException: Illegal node path number value (value must be >= 0)");
                case "string":
                    return pathPart;
                default:
                    //not string nor number
                    throw new Error("ArgumentException: the type of the parameter isn't neither a string nor a number");
            }
        }
    }
};

/**
 * A Java Tree test object
 * @constructor
 * @class TreeViewTO
 * @extends Java.UiObjectBaseTO
 * @mixes ContainerBehavior
 * @mixes ExecuteItemsWithEventsBehavior
 * @mixes Java.TreeViewTOBehavior._properties
 * @mixes Java.TreeViewTOBehavior._methods
 * @memberof Java
 */
function TreeViewTO(session, description) {
    description = description || TreeView();
    var treeViewTO = new UiObjectBaseTO("JavaTree", session, description);
    treeViewTO._mergeBehavior(ContainerBehavior);
    treeViewTO._mergeBehavior(ExecuteItemsWithEventsBehavior);
    treeViewTO._mergeBehavior(TreeViewTOBehavior);
    return treeViewTO;
}

module.exports.TreeView = TreeView;
module.exports.TreeViewTO = TreeViewTO;
