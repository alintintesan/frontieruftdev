// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/01/2016.
 */

var Core = require("leanft.sdk.core");
var TestObjectBase = Core.TestObjectBase;
var DescriptionBase = Core.DescriptionBase;
var NativeObjectBehavior = Core.NativeObjectBehavior;
var LocationInfoProvider = Core.LocationInfoProvider;
var LocationDescriptionBehavior = Core.LocationDescriptionBehavior;
var SendKeysBehavior = Core.SendKeysBehavior;
var ObjUtils = Core.ObjectUtils;
var ArrayUtils = Core.ArrayUtils;
var MouseButton = Core.MouseButton;
var Location = Core.Location;
var Convert = Core.Convert;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;
var WaitUntilVisibleBehavior = Core.WaitUntilVisibleBehavior;
var SendKeysBehaviorJava = require("./java_sendkeys_behavior.js").SendKeysBehaviorJava;
var PropertyFlatter = Core.PropertyFlatter;

/**
 * Java namespace
 * @namespace Java
 */

/**
 * UiObjectBaseDescription - the base description for all Java elements
 * @class UiObjectBaseDescription
 * @extends DescriptionBase
 * @mixes LocationDescriptionBehavior
 * @memberof Java
 * @ignore
 */
function UiObjectBaseDescription(leanFTType) {
    this._init({
        technology: "Java",
        leanftType: leanFTType
    });

    ObjUtils.extend(this, LocationDescriptionBehavior);

    //init grouped properties
    this.location({});
    this.absoluteLocation({});
    this.size({});
    this.objectProperties({});
}

/**
 * @ignore
 */
ObjUtils.inherit(UiObjectBaseDescription, DescriptionBase, {
    /**
     * The object's attached text.
     * @param {string} [attachedText] When provided, this method acts as a setter and sets the attachedText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored attachedText value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.UiObjectBaseDescription#
     */
    attachedText: function (attachedText) {
        return this._simplePropertyHandler("attached text", attachedText);
    },

    /**
     * The object's background color.
     * @param {string} [backgroundColor] When provided, this method acts as a setter and sets the backgroundColor value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored backgroundColor value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.UiObjectBaseDescription#
     */
    backgroundColor: function (backgroundColor) {
        return this._simplePropertyHandler("background", backgroundColor);
    },

    /**
     * The object's foreground color.
     * @param {string} [foregroundColor] When provided, this method acts as a setter and sets the foreground value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored foreground value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.UiObjectBaseDescription#
     */
    foregroundColor: function (foregroundColor) {
        return this._simplePropertyHandler("foreground", foregroundColor);
    },

    /**
     * The object's object name.
     * @param {string} [objectName] When provided, this method acts as a setter and sets the objectName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored objectName value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.UiObjectBaseDescription#
     */
    objectName: function (objectName) {
        return this._simplePropertyHandler("developer name", objectName);
    },

    /**
     * The object's label.
     * @param {string} [label] When provided, this method acts as a setter and sets the label value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored label value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.UiObjectBaseDescription#
     */
    label: function (label) {
        return this._simplePropertyHandler("label", label);
    },

    /**
     * The object's hierarchy (object ancestors).
     * @param {string} [path] When provided, this method acts as a setter and sets the path value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored path value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.UiObjectBaseDescription#
     */
    path: function (path) {
        return this._simplePropertyHandler("path", path);
    },

    /**
     * The tag name associated with the object.
     * @param {string} [tag name] When provided, this method acts as a setter and sets the tag name value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored tagName value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.UiObjectBaseDescription#
     */
    tagName: function (tagName) {
        return this._simplePropertyHandler("tagname", tagName);
    },

    /**
     * The object's class name.
     * @param {string} [nativeClass] When provided, this method acts as a setter and sets the nativeClass value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored nativeClass value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.UiObjectBaseDescription#
     */
    nativeClass: function (nativeClass) {
        return this._simplePropertyHandler("toolkit class", nativeClass);
    },

    /**
     * Indicates whether the object is enabled.
     * @param {boolean} [isEnabled] When provided, this method acts as a setter and sets the isEnabled value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.UiObjectBaseDescription#
     */
    isEnabled: function (isEnabled) {
        return this._propertyHandler("enabled", isEnabled, JavaConvertHelper.boolToNumericString, JavaConvertHelper.numericStringToBool);
    },

    /**
     * Indicates whether the object is focused.
     * @param {boolean} [isFocused] When provided, this method acts as a setter and sets the isFocused value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isFocused value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.UiObjectBaseDescription#
     */
    isFocused: function (isFocused) {
        return this._propertyHandler("focused", isFocused, JavaConvertHelper.boolToNumericString, JavaConvertHelper.numericStringToBool);
    },

    /**
     * Indicates whether the object is visible.
     * @param {boolean} [isVisible] When provided, this method acts as a setter and sets the isVisible value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isVisible value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.UiObjectBaseDescription#
     */
    isVisible: function (isVisible) {
        return this._propertyHandler("displayed", isVisible, JavaConvertHelper.boolToNumericString, JavaConvertHelper.numericStringToBool);
    },
    /**
     * The concrete test object properties including custom properties.
     * @param {object} [objectProperties] When provided, this method acts as a setter and sets the objectProperties value.
     * @returns {object | Description} If no parameter is provided, the method acts as a getter and returns the current stored objectProperties value;
     * otherwise it returns 'this' for use with the builder pattern.     
     * @memberof Java.UiObjectBaseDescription#
     */
    objectProperties: function(objectProperties) {
        return this._propertyFlatterHandler("ObjectProperties", PropertyFlatter, objectProperties, this._createUserKeysMapping(objectProperties));
    },

    /**
     * Indicates whether the object is wrapped inside another object.
     * E.g.: If an edit field is part of an editable combobox, then the edit field is wrapped inside the combobox.
     * @param {boolean} [isWrapped] When provided, this method acts as a setter and sets the isWrapped value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isWrapped value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.UiObjectBaseDescription#
     */
    isWrapped: function(isWrapped){
        return this._propertyHandler("description_flags", isWrapped, JavaConvertHelper.boolToNumericString, JavaConvertHelper.numericStringToBool);
    },

    /**
     * @ignore 
     */
    _createUserKeysMapping: function (objectProperties) {
        var retObject = {};
        
        if(objectProperties){
            Object.keys(objectProperties).forEach(function (userKey) {
                retObject[userKey] = userKey;
            }, this);
        }
        
        return retObject;
    }
});

/**
 * @class UiObjectBaseTO
 * @param nativeClass
 * @param session
 * @param description
 * @constructor
 * @extends TestObjectBase
 * @mixes NativeObjectBehavior._methods
 * @mixes LocationInfoProvider._properties
 * @mixes SendKeysBehavior._methods
 * @mixes Java.SendKeysBehaviorJava._methods
 * @mixes Java.UiObjectBaseTOBehavior._methods
 * @mixes Java.UiObjectBaseTOBehavior._properties
 * @mixes WaitUntilVisibleBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @abstract
 * @memberof Java
 * @ignore
 */
function UiObjectBaseTO(nativeclass, session, description) {
    this._init(nativeclass, session, description);
    this._nativeTypeFieldName = "to_class";

    this._mergeBehavior(NativeObjectBehavior);
    this._mergeBehavior(LocationInfoProvider);
    this._mergeBehavior(SendKeysBehavior);
    this._mergeBehavior(SendKeysBehaviorJava);
    this._mergeBehavior(WaitUntilEnabledBehavior);
    this._mergeBehavior(WaitUntilVisibleBehavior);
    this._mergeBehavior(UiObjectBaseTOBehavior);
}

/**
 * @ignore
 */
ObjUtils.inherit(UiObjectBaseTO, TestObjectBase, {
});

//Consts
var isEnabledWiredName = "enabled";
var isFocusedWiredName = "focused";
var isVisibleWiredName = "displayed";



/**
 * @memberof Java
 * @ignore
 */
var UiObjectBaseTOBehavior = {
    /**
     * @ignore
     * @memberof Java.UiObjectBaseTOBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Clicks on this object using the definitions from the supplied args object.
         * If you do not provide the args object, the click is performed in the center of the object using the left mouse button.
         * @function
         * @param {Object} [args] The arguments for the click operation.
         * @param {MouseButton} [args.button = MouseButton.left] The mouse button to use for the click.
         * @param {Position} [args.anchor = Position.center] The position within the object from which the offset is taken.
         * @param {Object} [args.offset] The offset from the anchor position.
         * @param {number} [args.offset.x = 0] The x-coordinate of the offset.
         * @param {number} [args.offset.y = 0] The y-coordinate of the offset.
         * @returns {Promise<void>} a promise that is fulfilled when the click operation ends.
         * @memberof Java.UiObjectBaseTO#
         */
        click: function (args) {
            if (args == null) {
                return this._executeWithEvents(arguments, "Click", Location(), JavaConvertHelper.convertMouseButtonToString(MouseButton.left));
            } else {
                var button = args.button;
                if (button == null)
                    button = MouseButton.left;
                return this._executeWithEvents(arguments, "Click", Location(args), JavaConvertHelper.convertMouseButtonToString(button));
            }
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Clicks on this object using the definitions from the supplied args object.
         * If you do not provide the args object, the double-click is performed in the center of the object using the left mouse button.
         * @function
         * @param {Object} [args] The arguments for the double-click operation.
         * @param {MouseButton} [args.button = MouseButton.left] The mouse button to use for the double-click.
         * @param {Position} [args.anchor = Position.center] The anchor location within the object.
         * @param {Object} [args.offset] The offset from the anchor position.
         * @param {number} [args.offset.x = 0] The x-coordinate of the offset.
         * @param {number} [args.offset.y = 0] The y-coordinate of the offset.
         * @returns {Promise<void>} a promise that is fulfilled when the double-click operation ends.
         * @memberof Java.UiObjectBaseTO#
         */
        doubleClick: function (args) {
            if (args == null) {
                return this._executeWithEvents(arguments, "DblClick", Location(), MouseButton.left.toUpperCase());
            } else {
                var button = args.button || MouseButton.left;

                if (button === MouseButton.middle)
                    throw new Error("ArgumentException: Only Left or Right mouse buttons are supported for Java test objects");

                return this._executeWithEvents(arguments, "DblClick", Location(args), button.toUpperCase());
            }
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Triggers an event on the test object.
         * <br/><b>Important:</b> This method is not supported for SWT controls.
         * @function
         * @param {(Java.UiEventInfo | Java.MouseEventInfo | Java.KeyboardEventInfo)} eventInfo The event info describing the event to trigger.
         * @returns {Promise<void>} a promise that is fulfilled when the fireEvent operation ends.
         * @memberof Java.UiObjectBaseTO#
         */
        fireEvent: function (eventInfo) {
            if(eventInfo == null || eventInfo.eventArgs == null)
                throw new Error("ArgumentException: an event info is required.");

            var argArr = [arguments, "FireEvent"].concat(eventInfo.eventArgs);
            return this._executeWithEvents.apply(this, argArr);
        },

        /*jshint unused:vars, eqnull:true */
        /**
         * Triggers an event by class on the test object.
         * <br/><b>Important:</b> This method is not supported for SWT controls.
         * @function
         * @param {string} className The name of the Java class representing the event to be activated.
         * @param {string} eventId The event ID number or the final field string that represents the event ID.
         * @param {...(string | boolean | number)} [eventArgs] Any parameters of the event's constructor except the source and EventID.
         * @returns {Promise<void>} a promise that is fulfilled when the fireEventByClass operation ends.
         * @memberof Java.UiObjectBaseTO#
         */
        fireEventByClass: function (className, eventId, eventArgs) {
            if (className == null)
                throw new Error("ArgumentException: className is required.");

            if (eventId == null)
                throw new Error("ArgumentException: eventId is required.");

            var args = [arguments, "FireEventEx"].concat(ArrayUtils.toArray(arguments));

            return this._executeWithEvents.apply(this, args);
        },

        /**
         * Creates a native object wrapping an instance of a Java object within your application.
         * @function
         * @param {string} className The java class name.
         * @param {...(Object)} [args] Any arguments required for the object's constructor.
         * @returns {Promise<Object>} a promise that is fulfilled with a native object wrapping an instance of a Java object within your application.
         */
        createObject: function (className, args) {
            var allArgs = [arguments, "CreateObject"].concat(ArrayUtils.toArray(arguments));
            return this._executeWithEvents.apply(this, allArgs);
        },

        /**
         * Get a native object wrapping a Java class capable of accessing static members (methods and fields) of the specified Java class.
         * @function
         * @param {string} className The java class name whose static members you want to access.
         * @returns {Promise<Object>} a promise that is fulfilled with a native object wrapping a Java class capable of accessing static members within your application.
         */
        getStatics: function (className) {
            return this._executeWithEvents(arguments, "GetStatics", className);
        },

        /**
         * Returns the value of a test object property.
         * @function
         * @returns Promise<string> | Promise<number> a promise that is fulfilled with the value of a test object property. This can be any property of this control, including custom properties declared in a custom control.
         * @param propName The name of the test object property.
         * @memberof Java.UiObjectBaseTO#
         */
        getObjectProperty: function (propName) {
            if (propName == null)
                throw new Error("The propName cannot be null.");
            return this._getROProperty(propName);
        }
    },
    /**
     * @ignore
     * @memberof Java.UiObjectBaseTOBehavior
     */
    _properties: {
        /**
         * Checks if the object is enabled.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean value indicating if the object is enabled or not.
         * @memberof Java.UiObjectBaseTO#
         */
        isEnabled: {
            wiredName: isEnabledWiredName,
            getter: function () {
                return this._getROProperty(isEnabledWiredName, arguments).then(JavaConvertHelper.numericStringToBool);
            }
        },

        /**
         * Checks if the object is focused.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean value indicating if the object is focused or not.
         * @memberof Java.UiObjectBaseTO#
         */
        isFocused: {
            wiredName: isFocusedWiredName,
            getter: function () {
                return this._getROProperty(isFocusedWiredName, arguments).then(JavaConvertHelper.numericStringToBool);
            }
        },

        /**
         * Checks if the object is visible.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean value indicating if the object is visible or not.
         * @memberof Java.UiObjectBaseTO#
         */
        isVisible: {
            wiredName: isVisibleWiredName,
            getter: function () {
                return this._getROProperty(isVisibleWiredName, arguments).then(JavaConvertHelper.numericStringToBool);
            }
        },

        /**
         * Returns the object's attached text.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's attached text.
         * @memberof Java.UiObjectBaseTO#
         */
        attachedText: {
            wiredName: "attached text"
        },

        /**
         * Returns the object's background color.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's background color.
         * @memberof Java.UiObjectBaseTO#
         */
        backgroundColor: {
            wiredName: "background"
        },

        /**
         * Returns the object's foreground color.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's foreground color.
         * @memberof Java.UiObjectBaseTO#
         */
        foregroundColor: {
            wiredName: "foreground"
        },

        /**
         * Returns the object's object name.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's object name.
         * @memberof Java.UiObjectBaseTO#
         */
        objectName: {
            wiredName: "developer name"
        },

        /**
         * Returns the object's label.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's label.
         * @memberof Java.UiObjectBaseTO#
         */
        label: {

        },

        /**
         * Returns the object's hierarchy (object ancestors).
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's hierarchy (object ancestors).
         * @memberof Java.UiObjectBaseTO#
         */
        path: {

        },

        /**
         * Returns the object's tag name.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's tag name.
         * @memberof Java.UiObjectBaseTO#
         */
        tagName: {
            wiredName: "tagname"
        },

        /**
         * Returns the object's class name.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's class name.
         * @memberof Java.UiObjectBaseTO#
         */
        nativeClass: {
            wiredName: "toolkit class"
        },

        /**
         * Checks if the object is wrapped.
         * E.g.: If an edit field is part of an editable combobox, then the edit field is wrapped inside the combobox.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean value indicating if the object is wrapped or not.
         * @memberof Java.UiObjectBaseTO#
         */
        isWrapped: {
            wiredName: "description_flags",
            getter: function () {
                return this._getROProperty("description_flags", arguments).then(JavaConvertHelper.numericStringToBool);
            }
        },
    }
};

/**
 * Java convert helper
 * @ignore
 */
var JavaConvertHelper = {
    /**
     * Convert a boolean to numeric string
     * @ignore
     */
    boolToNumericString: function (value) {
        var valueAfterConvert = Convert.toBool(value);
        return valueAfterConvert ? "1" : "0";
    },

    /**
     * Reverse a numeric string from a boolean
     * @ignore
     */
    reverseBoolToNumericString: function (value) {
        var valueAfterConvert = Convert.toBool(value);
        return valueAfterConvert ? "0" : "1";
    },

    /**
     * Convert a numeric string to a boolean
     * @ignore
     */
    numericStringToBool: function (value) {
        return value === "1";
    },

    /**
     * Reverse a boolean from a numeric string
     * @ignore
     */
    reverseNumericStringToBool: function (value) {
        return value === "0";
    },

    /**
     * Convert mouse button to string
     * @ignore
     */
    convertMouseButtonToString: function (button) {
        switch (button)
        {
            case MouseButton.left:
                return "LEFT";
            case MouseButton.right:
                return "RIGHT";
            default:
                throw new Error("ArgumentException: Unsupported MouseButton value.");
        }
    }
};

module.exports.UiObjectBaseDescription = UiObjectBaseDescription;
module.exports.UiObjectBaseTO = UiObjectBaseTO;
module.exports.JavaConvertHelper = JavaConvertHelper;