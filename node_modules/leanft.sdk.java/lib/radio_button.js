// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/29/2016.
 */


var Core = require("leanft.sdk.core");
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var ObjUtils = Core.ObjectUtils;
var JavaConvertHelper = UiObjectBase.JavaConvertHelper;
var Convert = Core.Convert;

/**
 * RadioButtonDescriptionBehavior - the description for a Java RadioButton object
 * @memberof Java
 * @ignore
 */
var RadioButtonDescriptionBehavior = {
    /**
     * Indicates whether the radio button is selected.
     * @returns {Promise<boolean>} a promise that is fulfilled with a boolean value indicating if the object is selected.
     */
    isChecked: function (isChecked) {
        return this._propertyHandler("value", isChecked, JavaConvertHelper.boolToNumericString, JavaConvertHelper.numericStringToBool);
    }
};

/**
 * The description of a RadioButton test object.
 * @param {Object} [props] Initializes a RadioButton test object using the supplied property bag.
 * @returns {RadioButton} the description object that was initialized.
 * @class RadioButton
 * @extends Java.UiObjectBaseDescription
 * @mixes Java.RadioButtonDescriptionBehavior
 * @memberof Java
 */
function RadioButton(props) {
    var radioButtonDesc = new UiObjectBaseDescription("RadioButton");
    ObjUtils.extend(radioButtonDesc, RadioButtonDescriptionBehavior);
    radioButtonDesc._defineByPropertyBag(props);
    return radioButtonDesc;
}

//Consts
var isCheckedWiredName = "value";

/**
 * The behaviors of the RadioButton object
 * @memberof Java
 * @ignore
 */
var RadioButtonTOBehavior = {
    /**
     * @ignore
     * @memberof Java.RadioButtonTOBehavior
     */
    _properties: {
        /**
         * Check if the radio button is checkable.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean value indicating if the radio button is checked or not.
         */
        isChecked: {
            wiredName: isCheckedWiredName,
            getter: function () {
                return this._getROProperty(isCheckedWiredName, arguments).then(JavaConvertHelper.numericStringToBool);
            }
        }
    },

    /**
     * @ignore
     * @memberof Java.RadioButtonTOBehavior
     */
    _methods: {
        /**
         * Selects the radio button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the set operation ends.
         */
        set: function () {
            return this._executeWithEvents(arguments, "Set");
        },
        /**
         * Clears (deselects) the radio button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the clear operation ends.
         */
        clear: function () {
            return this._executeWithEvents(arguments, "Set", "OFF");
        }
    }
};

/**
 * A RadioButton object,
 * @constructor
 * @class RadioButtonTO
 * @extends Java.UiObjectBaseTO
 * @mixes Java.RadioButtonTOBehavior._properties
 * @mixes Java.RadioButtonTOBehavior._methods
 * @memberof Java
 */
function RadioButtonTO(session, description) {
    description = description || RadioButton();
    var radioButtonTO = new UiObjectBaseTO("JavaRadioButton", session, description);
    radioButtonTO._mergeBehavior(RadioButtonTOBehavior);
    return radioButtonTO;
}

module.exports.RadioButton = RadioButton;
module.exports.RadioButtonTO = RadioButtonTO;
