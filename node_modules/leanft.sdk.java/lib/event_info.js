// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/9/2016.
 */

/**
 * Constants for UI events.
 * @typedef {Java.UiEvent} UiEvent
 * @property {string} focusGained The test object gained focus.
 * @property {string} focusLost The test object lost focus.
 * @memberof Java
 */
var UiEvent = {
    /**
     * @type {string}
     */
    focusGained: "focusgained",

    /**
     * @type {string}
     */
    focusLost: "focuslost",

    /**
     * @ignore
     */
    _convertToRuntime: {
        focusgained: 1024,
        focuslost: 2048
    },

    /**
     * @ignore
     */
    _convert: function (event) {
        var eventAfterConvert = UiEvent._convertToRuntime[event.toLowerCase()];
        if (eventAfterConvert === undefined)
            throw new Error("ArgumentException: unsupported event type.");
        return eventAfterConvert;
    }
};

/**
 * Constants for Keyboard events.
 * @typedef {Java.KeyboardEvent} KeyboardEvent
 * @property {string} keyPressed A key is pushed down.
 * @property {string} keyReleased A key is let up.
 * @property {string} keyTyped A character is entered. A single key press or a character produced by series of key presses. If a series of keys, the mapping from key pressed events to key typed events can be many-to-one or many-to-many.
 * @memberof Java#
 */
var KeyboardEvent = {
    /**
     * @type {string}
     */
    keyPressed: "keypressed",

    /**
     * @type {string}
     */
    keyReleased: "keyreleased",

    /**
     * @type {string}
     */
    keyTyped: "keytyped",

    /**
     * @ignore
     */
    _convertToRuntime: {
        keypressed: 128,
        keyreleased: 256,
        keytyped: 512
    },

    /**
     * @ignore
     */
    _convert: function (event) {
        var eventAfterConvert = KeyboardEvent._convertToRuntime[event.toLowerCase()];
        if (eventAfterConvert === undefined)
            throw new Error("ArgumentException: unsupported event type.");
        return eventAfterConvert;
    }
};

/**
 * Constants for Mouse events.
 * @typedef {Java.MouseEvent} MouseEvent
 * @property {string} mouseClicked A mouse button is pressed and released.
 * @property {string} mouseDragged The mouse position changes while a mouse button is pressed.
 * @property {string} mouseEntered The mouse cursor enters the unobscured part of the component.
 * @property {string} mouseExited The mouse cursor exits the unobscured part of the component.
 * @property {string} mouseMoved The mouse position changes.
 * @property {string} mousePressed A mouse button is pushed down.
 * @property {string} mouseReleased A mouse button is let up.
 * @memberof Java
 */
var MouseEvent = {
    /**
     * @type {string}
     */
    mouseClicked: "mouseclicked",

    /**
     * @type {string}
     */
    mouseDragged: "mousedragged",

    /**
     * @type {string}
     */
    mouseEntered: "mouseentered",

    /**
     * @type {string}
     */
    mouseExited: "mouseexited",

    /**
     * @type {string}
     */
    mouseMoved: "mousemoved",

    /**
     * @type {string}
     */
    mousePressed: "mousepressed",

    /**
     * @type {string}
     */
    mouseReleased: "mousereleased",

    /**
     * @ignore
     */
    _convertToRuntime: {
        mouseclicked: 4,
        mousedragged: 32,
        mouseentered: 1,
        mouseexited: 2,
        mousemoved: 64,
        mousepressed: 8,
        mousereleased: 16
    },

    /**
     * @ignore
     */
    _convert: function (event) {
        var eventAfterConvert = MouseEvent._convertToRuntime[event.toLowerCase()];
        if (eventAfterConvert === undefined)
            throw new Error("ArgumentException: unsupported event type.");
        return eventAfterConvert;
    }
};

/*jshint unused:true, eqnull:true */
/**
 * A Java technology UI event info for fireEvent methods.
 * @param {Java.UiEvent} eventId The event id.
 * @constructor
 * @memberof Java
 */
function UiEventInfo(eventId) {
    if (eventId == null)
        throw new Error("ArgumentException: eventId is required.");

    var eventIdAfterConvert = UiEvent._convert(eventId);

    return {
        eventArgs: [eventIdAfterConvert]
    };
}

/*jshint unused:true, eqnull:true */
/**
 * A Java technology Mouse event info to be used by fireEvent methods.
 * @param {Object} [propBag] The arguments for the event info.
 * @param {Java.MouseEvent} propBag.eventId The event ID.
 * @param {number} propBag.when The time the event occurred. Passing negative or zero value is not recommended
 * @param {number} propBag.modifiers The modifier keys down during event.
 * @param {number} propBag.x The horizontal x-coordinate in pixels relative to the containing object.
 * @param {number} propBag.y The vertical y-coordinate in pixels relative to the containing object.
 * @param {number} [propBag.xAbs] The absolute horizontal x-coordinate in pixels relative to the screen. This value is ignored if button is not set.
 * @param {number} [propBag.yAbs] The absolute vertical y-coordinate in pixels relative to the screen. This value is ignored if button is not set.
 * @param {number} propBag.clickCount The number of mouse clicks associated with event.
 * @param {boolean} propBag.popupTrigger Indicates whether this event is a trigger for a popup menu.
 * @param {number} [propBag.button] Indicates which of the mouse buttons has changed state.
 * @constructor
 * @memberof Java
 */
function MouseEventInfo(propBag) {
    propBag = propBag || {};

    if (propBag.eventId == null)
        throw new Error("ArgumentException: eventId is required.");

    var eventId = MouseEvent._convert(propBag.eventId);
    var button = propBag.button;
    if (button != null) {
        if (propBag.xAbs != null && propBag.yAbs != null)
            return {
                eventArgs: [eventId, propBag.when, propBag.modifiers, propBag.x, propBag.y,
                    propBag.xAbs, propBag.yAbs, propBag.clickCount, propBag.popupTrigger, button]
            };

        return {
            eventArgs: [eventId, propBag.when, propBag.modifiers, propBag.x, propBag.y,
                propBag.clickCount, propBag.popupTrigger, button]
        };
    }
    return {
        eventArgs: [eventId, propBag.when, propBag.modifiers, propBag.x, propBag.y,
            propBag.clickCount, propBag.popupTrigger]
    };
}

/*jshint unused:true, eqnull:true */
/**
 * A Java technology Keyboard event info to be used by fireEvent methods.
 * @param {Object} [propBag] The arguments for the event info.
 * @param {Java.KeyboardEvent} propBag.eventId The event ID.
 * @param {number} propBag.when The time the event occurred.
 * @param {number} propBag.modifiers The modifier keys down during event.
 * @param {number} propBag.keyCode The physical key pressed, independent of the character created.
 * </br><b>Remarks:</b> For example, the A Key is returned whether the character produced is "A" or "a".
 * @param {string} propBag.keyChar The Unicode character generated by this event.
 * @param {number} [propBag.keyLocation] The location of the key that originated this key event.
 * @constructor
 * @memberof Java
 */
function KeyboardEventInfo(propBag) {
    propBag = propBag || {};

    if (propBag.eventId == null)
        throw new Error("ArgumentException: eventId is required.");

    var eventId = KeyboardEvent._convert(propBag.eventId);
    var eventArgs = [eventId, propBag.when, propBag.modifiers, propBag.keyCode, propBag.keyChar];

    if (propBag.keyLocation != null) {
        eventArgs.push(propBag.keyLocation);
    }

    return {
        eventArgs: eventArgs
    };
}

module.exports.UiEvent = UiEvent;
module.exports.KeyboardEvent = KeyboardEvent;
module.exports.MouseEvent = MouseEvent;
module.exports.UiEventInfo = UiEventInfo;
module.exports.MouseEventInfo = MouseEventInfo;
module.exports.KeyboardEventInfo = KeyboardEventInfo;
