// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/25/2016.
 */
var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * The ExpandBarItem object
 * @constructor
 * @class ExpandBarItem
 * @mixes Java.ExpandBarItemBehavior._properties
 * @mixes Java.ExpandBarItemBehavior._methods
 * @memberof Java
 */
function ExpandBarItem(ownerExpandBar, identifier, textRepresentation) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(ExpandBarItemBehavior);
    this._ownerExpandBar = ownerExpandBar;
    this._identifier = identifier;
    this._textRepresentation = textRepresentation;
    this._executeWithEventsOnItem = this._ownerExpandBar._executeWithEventsOnItem.bind(this._ownerExpandBar, this);
    this._executeWithEventsOnItemOnError = this._ownerExpandBar._executeWithEventsOnItemOnError.bind(this._ownerExpandBar, this);
}

ExpandBarItem.prototype = {
    _ownerExpandBar: null,
    _identifier: null,
    _textRepresentation: null,
    _executeWithEventsOnItem: null,
    _executeWithEventsOnItemOnError: null,
};

/**
 * The methods of ExpandBarItem object
 * @memberof Java
 * @ignore
 */
var ExpandBarItemBehavior = {
    /**
     * @memberof Java.ExpandBarItemBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the specified ExpandBar item label.
         * @returns {Promise<string>} a promise that is fulfilled with the label of the ExpandBarItem.
         * @memberof Java.ExpandBarItem#
         */
        label: function () {
            return this._executeWithEventsOnItemOnError(this._ownerExpandBar._getItemLabel, this._identifier);
        }
    },

    /**
     * @memberof Java.ExpandBarItemBehavior
     * @ignore
     */
    _methods: {
        /**
         * Collapses the item in the ExpandBar.
         * @returns {Promise<void>} a promise that is fulfilled when the collapse operation ends.
         * @memberof Java.ExpandBarItem#
         */
        collapse: function () {
            return this._executeWithEventsOnItem(this._ownerExpandBar._itemCollapse, this._identifier);
        },

        /**
         * Expands the item in the ExpandBar.
         * @returns {Promise<void>} a promise that is fulfilled when the expand operation ends.
         * @memberof Java.ExpandBarItem#
         */
        expand: function () {
            return this._executeWithEventsOnItem(this._ownerExpandBar._itemExpand, this._identifier);
        }
    },

    _helpers: {
        /**
         * Get the identifier of the item.
         * @returns {number|string} the identifier of the item.
         * @ignore
         */
        _getIdentifier: function () {
            return this._identifier;
        },

        /**
         * Get the text representation of the item.
         * @returns {string} the text representation of the item.
         * @ignore
         */
        _getTextRepresentation: function () {
            return this._textRepresentation;
        }
    }
};

module.exports.ExpandBarItem = ExpandBarItem;

