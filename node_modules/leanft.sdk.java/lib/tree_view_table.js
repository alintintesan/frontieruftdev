// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/20/2019.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var StringUtils = Core.StringUtils;
var ArrayUtils = Core.ArrayUtils;
var ExecuteItemsWithEventsBehavior = Core.ExecuteItemsWithEventsBehavior;
var TableBaseOperationBehavior = Core.TableBaseOperationBehavior;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var TableCell = require("./table_cell.js").TableCell;
var TableBaseDescriptionBehavior = require("./table_base.js").TableBaseDescriptionBehavior;
var TableBaseTOBehavior = require("./table_base.js").TableBaseTOBehavior;
var TreeViewBaseDescriptionBehavior = require("./tree_view_base.js").TreeViewBaseDescriptionBehavior;

/**
 * The description of a Java TreeViewTable test object (for JavaFX only).
 * @param {Object} [props] Initializes a Java TreeViewTable test object using the supplied property bag.
 * @returns {TreeViewTable} the description object that was initialized.
 * @class TreeViewTable
 * @extends Java.UiObjectBaseDescription
 * @mixes Java.TableBaseDescriptionBehavior
 * @mixes Java.TreeViewBaseDescriptionBehavior
 * @memberof Java
 */
function TreeViewTable(props) {
    var treeTableDesc = new UiObjectBaseDescription("TreeViewTable");
    ObjUtils.extend(treeTableDesc, TableBaseDescriptionBehavior);
    ObjUtils.extend(treeTableDesc, TreeViewBaseDescriptionBehavior);
    treeTableDesc._defineByPropertyBag(props);
    return treeTableDesc;
}

//Consts
var columnCountWiredName = "columns_count";
var selectedRowsWiredName = "value";
var rowsWiredName = "rows";

/**
 * The behaviors of TreeViewTable object
 * @memberof Java
 * @ignore
 */
var TreeViewTableTOBehavior = {
    /**
     * @ignore
     * @memberof Java.TreeViewTableTOBehavior
     */
    _properties: {
        /**
         * Returns the number of rows in the table.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of rowsCount in the table.
         * @memberof Java.TreeViewTableTO#
         */
        rowsCount: {
            wiredName: rowsWiredName,
            getter: function () {
                return this._getROProperty(rowsWiredName, arguments).then(Convert.toNumber);
            }
        },

        /**
         * Returns the number of columns in the table.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns in the table.
         * @memberof Java.TreeViewTableTO#
         */
        columnsCount: {
            wiredName: columnCountWiredName,
            getter: function () {
                return this._getROProperty(columnCountWiredName, arguments).then(Convert.toNumber);
            }
        },

        /**
         * Returns the selected nodes or rows in the tree table.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the selected nodes or rows in the tree table.
         * @memberof Java.TreeViewTableTO#
         */
        selectedNodes: {
            wiredName: selectedRowsWiredName,
            getter: function () {
                return this._getROProperty(selectedRowsWiredName, arguments).then(function (res) {
                    return StringUtils.isNullOrEmpty(res) ? [] : res.split("\u0018");
                });
            }
        }
    },

    /**
     * @ignore
     * @memberof Java.TreeViewTableTOBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Activates a node or row in the tree view table.
         * @function
         * @param {string} nodePath The full path of the node to activate within the tree.
         * Tip: Use the {@link Java.TreeViewTableTO#buildNodePath} method to build the node path string to be used as the nodeOrPath argument for this method.
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         * @memberof Java.TreeViewTableTO#
         */
        activate: function (nodePath) {
            if (nodePath == null)
                throw new Error("ArgumentException: nodePath is required.");
            return this._executeWithEvents(arguments, "Activate", nodePath);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Returns the value of the specified node.
         * @function
         * @param {number} index The 0-based index of the node or row you want to retrieve.
         * @returns {string} The value of the specified node.
         * @memberof Java.TreeViewTableTO#
         */
        getNode: function (index) {
            if (index == null)
                throw new Error("ArgumentException: index is required.");
            return this._executeWithEvents(arguments, "GetItem", Convert.toNumber(index));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Clears the selection of nodes in the tree by node paths.
         * @function
         * @param {...(string)} nodePaths The paths of the nodes to deselect.
         * Tip: Use the {@link Java.TreeViewTableTO#buildNodePath} method to build the node path strings to be used as arguments for this method.
         * @returns {Promise<void>} a promise that is fulfilled when the deselect operation ends.
         * @memberof Java.TreeViewTableTO#
         */
        deselect: function (nodePaths) {
            if (nodePaths == null)
                throw new Error("ArgumentException: paths is required.");
            return this._executeSingleOpOnCollection(arguments, "Deselect", ArrayUtils.toArray(arguments));
        },

                /*jshint unused:true, eqnull:true */
        /**
         * Unselects column by column index or header.
         * <br/><b>Important:</b> This method is not supported for SWT tables.
         * @function
         * @param {string|number} columnOrIndex The header or 0-based index of the column.
         * @returns {Promise<void>} a promise that is fulfilled when the deselectColumn operation ends.
         */
        deselectColumn: function (columnOrIndex) {
            if (columnOrIndex == null)
                throw new Error("ArgumentException: columnOrIndex is required.");
            return this._executeWithEvents(arguments, "DeselectColumn", columnOrIndex);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Returns the path of a node in the tree.
         * @function
         * @param {...(string|number)} nodePathParts The tree node path parts can be: text or 0-based numeric index. For a full path, separate items with commas.
         * @returns {string} The path of a node in the tree.
         * @memberof Java.TreeViewTableTO#
         */
        buildNodePath: function (nodePathParts) {
            nodePathParts = ArrayUtils.toArray(arguments);
            if (nodePathParts.length === 0)
                return "";
            return nodePathParts.map(this._handlePathPart).join(";");
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Clears the selection of the specified range of nodes in a tree.
         * Tip: Use the {@link Java.TreeViewTableTO#buildNodePath} method to build the node path strings to be used as the fromNodePath and toNodePath arguments for this method.
         * @function
         * @param {string} fromNodePath 0-based index or the full path of the first node in the range.
         * @param {string} toNodePath 0-based index or the full path of the last node in the range.
         * @returns {Promise<void>} a promise that is fulfilled when the deselectRange operation ends.
         * @memberof Java.TreeViewTableTO#
         */
        deselectRange: function (fromNodePath, toNodePath) {
            if (fromNodePath == null)
                throw new Error("ArgumentException: fromNodePath is required.");
            if (toNodePath == null)
                throw new Error("ArgumentException: toNodePath is required.");
            return this._executeWithEvents(arguments, "DeselectRange", fromNodePath, toNodePath);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects additional nodes in the tree.
         * @function
         * @param {...(string)} nodePaths The paths of the nodes to add to the selection.
         * Tip: Use the {@link Java.TreeViewTableTO#buildNodePath} method to build the node path strings.
         * @returns {Promise<void>} a promise that is fulfilled when the extendSelect operation ends.
         * @memberof Java.TreeViewTableTO#
         */
        extendSelect: function (nodePaths) {
            if (nodePaths == null)
                throw new Error("ArgumentException: nodePaths is required.");
            return this._executeSingleOpOnCollection(arguments, "ExtendSelect", ArrayUtils.toArray(arguments));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects the specified nodes in the tree by node paths.
         * @function
         * @param {...(string)} nodePaths The full path of the nodes to select in the tree.
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         * @memberof Java.TreeViewTableTO#
         */
        select: function (nodePaths) {
            if (nodePaths == null)
                throw new Error("ArgumentException: nodePaths is required.");
            return this._executeOnItemsCollection(arguments, "Select", "ExtendSelect", ArrayUtils.toArray(arguments));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects column by column index or column header.
         * @function
         * @param {string|number} columnOrIndex The header or 0-based index of the column.
         * @returns {Promise<void>} a promise that is fulfilled when the selectColumn operation ends.
         */
        selectColumn: function (columnOrIndex) {
            if (columnOrIndex == null)
                throw new Error("ArgumentException: columnOrIndex is required.");
            return this._executeWithEvents(arguments, "SelectColumn", columnOrIndex);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects the specified range of nodes in the tree.
         * Tip: Use the {@link Java.TreeViewTableTO#buildNodePath} method to build the node path strings to be used as the fromNodePath and toNodePath arguments for this method.
         * @function
         * @param {string} fromNodePath 0-based index or the full path of the first node in the range.
         * @param {string} toNodePath 0-based index or the full path of the last node in the range.
         * @returns {Promise<void>} a promise that is fulfilled when the selectRange operation ends.
         * @memberof Java.TreeViewTableTO#
         */
        selectRange: function (fromNodePath, toNodePath) {
            if (fromNodePath == null)
                throw new Error("ArgumentException: fromNodePath is required.");
            if (toNodePath == null)
                throw new Error("ArgumentException: toNodePath is required.");
            return this._executeWithEvents(arguments, "SelectRange", fromNodePath, toNodePath);
        },

        /**
         * Collapses expandable nodes in the tree by node paths.
         * @function
         * @param {string | number} arg Can be the full path of the node to activate within the tree or a 0-based index of the node or row.
         * Tip: Use the {@link Java.TreeViewTableTO#buildNodePath} method to build the node path strings to be used as the argument for this method.
         * @returns {Promise<void>} a promise that is fulfilled when the collapse operation ends.
         * @memberof Java.TreeViewTableTO#
         */
        collapse: function (arg) {
            if (arg == null){
                throw new Error("ArgumentException: nodePath or index is required.");
            }

            if(typeof(arg) === 'string'){
                return this._executeSingleOpOnCollection(arguments, "Collapse", ArrayUtils.toArray(arguments));
            }

            else if(typeof(arg) === 'number'){
                return this._executeNotWrapped(arg, "GetItem", arg).then((function(nodePath){
                    return this._executeSingleOpOnCollection(nodePath, "Collapse", [nodePath]);
                }).bind(this));
            }
            else {
                throw new Error("ArgumentException: incorrect type of argument. Must be string or number.");
            }
        },

        /**
         * Expands expandable nodes in the tree by node paths.
         * @function
         * @param {string | number} arg Can be the full path of the node to activate within the tree or a 0-based index of the node or row.
         * Tip: Use the {@link Java.TreeViewTableTO#buildNodePath} method to build the node path strings to be used as the nodePaths argument for this method.
         * @returns {Promise<void>} a promise that is fulfilled when the expand operation ends.
         * @memberof Java.TreeViewTableTO#
         */
        expand: function (arg) {
            if (arg == null){
                throw new Error("ArgumentException: nodePath or index is required.");
            }

            if(typeof(arg) === 'string'){
                return this._executeSingleOpOnCollection(arguments, "Expand", ArrayUtils.toArray(arguments));
            }

            else if(typeof(arg) === 'number'){
                return this._executeNotWrapped(arg, "GetItem", arg).then((function(nodePath){
                    return this._executeSingleOpOnCollection(nodePath, "Expand", [nodePath]);

                }).bind(this));
            }
            else {
                throw new Error("ArgumentException: incorrect type of argument. Must be string or number.");
            }
        }
    },

    _helpers: {

        /**
         * Handle each node path
         * @param {string|number} pathPart The tree node path part can be: text or 0-based numeric index.
         * @returns {string} The node path part that is handled.
         * @ignore
         */
        _handlePathPart: function (pathPart) {
            var pathPartType = typeof pathPart;

            switch (pathPartType) {
                case "number":
                    if (pathPart > 0)
                        return "#" + pathPart;
                    throw new Error("ArgumentException: Illegal node path number value (value must be >= 0)");
                case "string":
                    return pathPart;
                default:
                    //not string nor number
                    throw new Error("ArgumentException: the type of the parameter isn't neither a string nor a number");
            }
        },

        /**
         * Get the number of rows and columns
         * @returns {Promise<Object>} a promise that is fulfilled with the number of rows and columns.
         * @ignore
         */
        _getRowAndColumnCount: function () {
            return this._getROProperties("rows", "columns_count").then(function (count) {
                return {
                    rowCount: Convert.toNumber(count[0]),
                    columnCount: Convert.toNumber(count[1])
                };
            });
        },

        /**
         * Get the number of columns in the table.
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns in the table.
         * @ignore
         */
        _getColumnCount: function () {
            return this._getROProperty("columns_count", arguments).then(Convert.toNumber);
        },

        /**
         * Create TableCell object.
         * @param {number} rowIndex 0-based index.
         * @param {string|number} columnOrIndex The column header or 0-based column index in the row, specified by the row parameter.
         * @returns {Java.TableCell} A TableCell object.
         * @ignore
         */
        _createCell: function (rowIndex, columnOrIndex) {
            return new TableCell(this, rowIndex, columnOrIndex);
        }
    }
};

/**
 * A Java TreeViewTable test object (for JavaFX only).
 * @constructor
 * @class TreeViewTableTO
 * @extends Java.UiObjectBaseTO
 * @mixes TableBaseOperationBehavior._methods
 * @mixes TableBaseOperationBehavior._properties
 * @mixes ExecuteItemsWithEventsBehavior
 * @mixes Java.TableBaseTOBehavior._properties
 * @mixes Java.TableBaseTOBehavior._methods
 * @mixes Java.TreeViewTableTOBehavior._methods
 * @mixes Java.TreeViewTableTOBehavior._properties
 * @memberof Java
 */
function TreeViewTableTO(session, description) {
    description = description || TreeViewTable();
    var treeTableTO = new UiObjectBaseTO("JavaTreeTable", session, description);
    treeTableTO._mergeBehavior(TableBaseOperationBehavior);
    treeTableTO._mergeBehavior(ExecuteItemsWithEventsBehavior);
    treeTableTO._mergeBehavior(TableBaseTOBehavior);
    treeTableTO._mergeBehavior(TreeViewTableTOBehavior);

    return treeTableTO;
}

module.exports.TreeViewTable = TreeViewTable;
module.exports.TreeViewTableTO = TreeViewTableTO;
