// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var Core = require("leanft.sdk.core");
var StringUtils = Core.StringUtils;
var KeyModifier = Core.KeyModifier;
var SendKeysHelper = Core.SendKeysHelper;
var Keys = Core.Keys;

/**
 * The class to implement sendkey action.
 * @memberof Java
 * @ignore
 */
var SendKeysBehaviorJava = {
	/**
	 * @memberof Java.SendKeysBehaviorJava
	 * @ignore
	 */
	_methods: {
		/*jshint unused:true, eqnull:true */
		/**
		 * Send keyboard keys to an object.
		 * @function
		 * @param {string} [input] The string to send to the object. Use {@link Keys} for special keys.
		 * @param {KeyModifier} [modifiers = KeyModifier.none] The modifier keys. Use {@link KeyModifier} for this parameter.
		 * @returns {Promise<void>} a promise that is fulfilled when the sendKeys operation ends.
		 */
		sendKeys: function (input, modifiers) {
			if (input == null)
				input = "";
			if (modifiers == null)
				modifiers = KeyModifier.none;

			var nativeInput = this._convertLeanFtKeysConstsToNativeConsts(input);
			var nativeModifiers = this._convertModifiersToNativeInputForPressKey(modifiers);

			if (StringUtils.isNullOrEmpty(nativeModifiers)) {
				return this._executeWithEvents(arguments, "PressKey", nativeInput);
			}
			return this._executeWithEvents(arguments, "PressKey", nativeInput, nativeModifiers);
		}
	},

	_helpers: {
         _keysSupportedInJava: [Keys.insert, Keys.delete, Keys.home, Keys.end,
              Keys.pageUp, Keys.pageDown, Keys.up, Keys.down, Keys.left, Keys.right, Keys.esc, Keys.backspace,
              Keys.return, Keys.tab, Keys.pause, Keys.printScr],
		/**
		 * Convert the modifier keys to native input for PressKey
		 * @param {KeyModifier} [modifiers] The modifier keys. Use {@link KeyModifier} for this parameter.
		 * @returns {string} a promise that is fulfilled when the _convertModifiersToNativeInputForPressKey operation ends.
		 * @private
		 * @ignore
		 */
		_convertModifiersToNativeInputForPressKey: function (modifiers) {
			if (modifiers === KeyModifier.none)
				return "";

			if (this._containsWindowLogo(modifiers)) {
				throw new Error("ArgumentException: windowsLogo modifiers are not supported for Java technology");
			}

			var result = "";
			if (this._containsCtrl(modifiers)) {
				result += SendKeysHelper.modifierToNativeConsts[KeyModifier.ctrl];
			}

			if (this._containsShift(modifiers)) {
				result += SendKeysHelper.modifierToNativeConsts[KeyModifier.shift];
			}

			if (this._containsAlt(modifiers)) {
				result += SendKeysHelper.modifierToNativeConsts[KeyModifier.alt];
			}

			return result;
		},

		/**
		 * Check if an input is a FunctionKeys or Keys.
		 * @param {string} [suspectString] The {@link FunctionKeys} or {@link Keys}.
		 * @returns {boolean}
		 * @private
		 * @ignore
		 */
		_isContainSuspectStringInConverter: function (suspectString) {
			if (suspectString in SendKeysHelper.functionKeysToNativeConsts) {
				return true;
			}

            if (this._keysSupportedInJava.indexOf(suspectString) !== -1) {
                return true;
            }

            if (suspectString in SendKeysHelper.keysToNativeConsts) {
                throw new Error("ArgumentException: usage of key: " + suspectString + " is not supported in Java technology");
            }

			return false;
		},

		/**
		 * Check if a modifier key contains the WINDOW key
		 * @param {KeyModifier} [modifiers] The modifier keys. Use {@link KeyModifier} for this parameter.
		 * @returns {boolean}
		 * @private
		 * @ignore
		 */
		_containsWindowLogo: function (modifiers) {
			return (modifiers & KeyModifier.windowsLogo) === KeyModifier.windowsLogo ||
				(modifiers & KeyModifier.leftWindowsLogo) === KeyModifier.leftWindowsLogo ||
				(modifiers & KeyModifier.rightWindowsLogo) === KeyModifier.rightWindowsLogo;
		},

		/**
		 * Check if a modifier key contains the CTRL key
		 * @param {KeyModifier} [modifiers] The modifier keys. Use {@link KeyModifier} for this parameter.
		 * @returns {boolean}
		 * @private
		 * @ignore
		 */
		_containsCtrl: function (modifiers) {
			return (modifiers & KeyModifier.ctrl) === KeyModifier.ctrl ||
				(modifiers & KeyModifier.leftCtrl) === KeyModifier.leftCtrl ||
				(modifiers & KeyModifier.rightCtrl) === KeyModifier.rightCtrl;
		},

		/**
		 * Check if a modifier key contains the ALT key
		 * @param {KeyModifier} [modifiers] The modifier keys. Use {@link KeyModifier} for this parameter.
		 * @returns {boolean}
		 * @private
		 * @ignore
		 */
		_containsAlt: function (modifiers) {
			return (modifiers & KeyModifier.alt) === KeyModifier.alt ||
				(modifiers & KeyModifier.leftAlt) === KeyModifier.leftAlt ||
				(modifiers & KeyModifier.rightAlt) === KeyModifier.rightAlt;
		},

		/**
		 * Check if a modifier key contains the SHIFT key
		 * @param {KeyModifier} [modifiers] The modifier keys. Use {@link KeyModifier} for this parameter.
		 * @returns {boolean}
		 * @private
		 * @ignore
		 */
		_containsShift: function (modifiers) {
			return (modifiers & KeyModifier.shift) === KeyModifier.shift ||
				(modifiers & KeyModifier.leftShift) === KeyModifier.leftShift ||
				(modifiers & KeyModifier.rightShift) === KeyModifier.rightShift;
		}
	}
};

module.exports.SendKeysBehaviorJava = SendKeysBehaviorJava;