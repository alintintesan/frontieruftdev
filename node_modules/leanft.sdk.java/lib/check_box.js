// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/16/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;


var JavaCheckedStateConverter = {
    /**
     * @ignore
     */
    _convertToJavaNative: {
        unchecked: "0",
        checked: "1",
        indeterminate: "2"
    },

    /**
     * @ignore
     */
    _convertToCheckedState: {
        1: "checked",
        0: "unchecked",
        2: "indeterminate"
    },

    /**
     * @ignore
     */
    _javaNativeToCheckedState: function (state) {
        return JavaCheckedStateConverter._convertToCheckedState[state];
    },

    /**
     * @ignore
     */
    _checkedStateToJavaNative: function (state) {
        return JavaCheckedStateConverter._convertToJavaNative[state.toLowerCase()];
    }
};

/**
 * CheckBoxDescriptionBehavior - the description for a Checkbox object
 * @memberof Java
 * @ignore
 */
var CheckBoxDescriptionBehavior = {
    /**
     * The state of the checkbox.
     * @param {CheckedState} [state] When provided, this method acts as a setter and sets the state value.
     * @returns {CheckedState | Description} If no parameter is provided, the method acts as a getter and returns the current stored state value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    state: function (state) {
        return this._propertyHandler("value", state, JavaCheckedStateConverter._checkedStateToJavaNative, JavaCheckedStateConverter._javaNativeToCheckedState);
    }
};

/**
 * The description of a CheckBox test object.
 * @param {Object} [props] Initializes a CheckBox test object using the supplied property bag.
 * @returns {CheckBox} the description object that was initialized.
 * @class CheckBox
 * @extends Java.UiObjectBaseDescription
 * @mixes Java.CheckBoxDescriptionBehavior
 * @memberof Java
 */
function CheckBox(props) {
    var checkBoxDesc = new UiObjectBaseDescription("CheckBox");
    Utils.extend(checkBoxDesc, CheckBoxDescriptionBehavior);
    checkBoxDesc._defineByPropertyBag(props);
    return checkBoxDesc;
}

/**
 * A CheckBox object,
 * @constructor
 * @class CheckBoxTO
 * @extends Java.UiObjectBaseTO
 * @mixes Java.CheckBoxTOBehavior._properties
 * @mixes Java.CheckBoxTOBehavior._methods
 * @memberof Java
 */
function CheckBoxTO(session, description){
    description = description || CheckBox();
    var checkBoxTO = new UiObjectBaseTO("JavaCheckBox", session, description);
    checkBoxTO._mergeBehavior(CheckBoxTOBehavior);
    return checkBoxTO;
}

//Consts
var stateWiredName = "value";

/**
 * The behaviors of the CheckBox object
 * @memberof Java
 * @ignore
 */
var CheckBoxTOBehavior = {
    /**
     * @ignore
     * @memberof Java.CheckBoxTOBehavior
     */
    _properties: {
        /**
         * Get the state of the checkbox.
         * @function
         * @returns {Promise<CheckedState>} a promise that is fulfilled with the state of the checkbox.
         */
        state: {
            type: 'enum',
            enumType: Core.CheckedState,
            enumName: 'CheckedState',
            wiredName: stateWiredName,
            getter: function () {
                return this._getROProperty(stateWiredName, arguments).then(JavaCheckedStateConverter._javaNativeToCheckedState);
            }
        }
    },

    /**
     * @ignore
     * @memberof Java.CheckBoxTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Set the state of checkbox.
         * @function
         * @param {CheckedState} state The status to be assigned to the check box
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setState: function (state) {
            if (state == null)
                throw new Error("The parameter state cannot be null.");
            return this._executeWithEvents(arguments, "Set", JavaCheckedStateConverter._checkedStateToJavaNative(state));
        }
    }
};

module.exports.CheckBox = CheckBox;
module.exports.CheckBoxTO = CheckBoxTO;