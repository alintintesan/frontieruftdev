// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/26/2016.
 */
var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;
/**
 * A ToolBarButton object
 * @constructor
 * @class ToolBarButton
 * @mixes Java.ToolBarButtonBehavior._properties
 * @mixes Java.ToolBarButtonBehavior._methods
 * @memberof Java
 */
function ToolBarButton(ownerToolBar, identifier, textRepresentation) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(ToolBarButtonBehavior);
    this._ownerToolBar = ownerToolBar;
    this._identifier = identifier;
    this._textRepresentation = textRepresentation;
    this._executeWithEventsOnItem = this._ownerToolBar._executeWithEventsOnItem.bind(this._ownerToolBar, this);
    this._executeWithEventsOnItemOnError = this._ownerToolBar._executeWithEventsOnItemOnError.bind(this._ownerToolBar, this);
}

ToolBarButton.prototype = {
    _ownerToolBar: null,
    _identifier: null,
    _textRepresentation: null,
    _executeWithEventsOnItem: null,
    _executeWithEventsOnItemOnError: null
};

/**
 * The methods of ToolBarButton object
 * @memberof Java
 * @ignore
 */
var ToolBarButtonBehavior = {
    /**
     * @memberof Java.ToolBarButtonBehavior
     * @ignore
     */
    _properties: {
        /**
         * Indicates whether the toolbar button accepts user input.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean value indicating if the toolbar button is enabled.
         * @memberof Java.ToolBarButton#
         */
        isEnabled: function () {
            return this._executeWithEventsOnItemOnError(this._ownerToolBar._isItemEnabled, this._identifier);
        },

        /**
         * The 1-based index number of the toolbar button. The index does not include hidden and separator buttons.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the index value of the toolbar button.
         * @memberof Java.ToolBarButton#
         */
        index: function () {
            return this._executeWithEventsOnItemOnError(this._ownerToolBar._getItemIndex, this._identifier);
        },

        /**
         * Indicates whether the toolbar button is either pressed or checked.
         * </br><b>Remarks:</b> A button is pressed if it is being clicked; checked if it is a toggle button that is selected.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean value indicating if the toolbar button is selected.
         * @memberof Java.ToolBarButton#
         */
        isSelected: function () {
            return this._executeWithEventsOnItemOnError(this._ownerToolBar._isItemSelected, this._identifier);
        },

        /**
         * The name of the toolbar button.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the toolbar button.
         * @memberof Java.ToolBarButton#
         */
        name: function () {
            return this._executeWithEventsOnItemOnError(this._ownerToolBar._getItemName, this._identifier);
        }
    },

    /**
     * @memberof Java.ToolBarButtonBehavior
     * @ignore
     */
    _methods: {
        /**
         * Opens the dropdown menu associated with this toolbar button by clicking the arrow part of the button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the showDropdown operation ends.
         * @memberof Java.ToolBarButton#
         */
        showDropdown: function () {
            return this._executeWithEventsOnItem(this._ownerToolBar._showDropdown, this._identifier);
        },

        /**
         * Presses this toolbar button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the press operation ends.
         * @memberof Java.ToolBarButton#
         */
        press: function () {
            return this._executeWithEventsOnItem(this._ownerToolBar._pressItem, this._identifier);
        }
    },

    _helpers: {
        /**
         * Get the identifier of the button.
         * @returns {number|string} the identifier of the button.
         * @ignore
         */
        _getIdentifier: function () {
            return this._identifier;
        },

        /**
         * Get the text representation of the button.
         * @returns {string} the text representation of the button.
         * @ignore
         */
        _getTextRepresentation: function () {
            return this._textRepresentation;
        }
    }
};

module.exports.ToolBarButton = ToolBarButton;
