// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/25/2016.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var StringUtils = Core.StringUtils;
var ContainerBehavior = Core.ContainerBehavior;
var ExecuteItemsWithEventsBehavior = Core.ExecuteItemsWithEventsBehavior;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var ExpandBarItem = require("./expandbar_item").ExpandBarItem;

/**
 * ExpandBarDescriptionBehavior - the description for a Java ExpandBar object
 * @memberof Java
 * @ignore
 */
var ExpandBarDescriptionBehavior = {
    /**
     * The number of ExpandBar items in the ExpandBar.
     * @param {number} [itemsCount] When provided, this method acts as a setter and sets the itemsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored itemsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.ExpandBar#
     */
    itemsCount: function (itemsCount) {
        return this._propertyHandler("count", itemsCount, Convert.toNumber);
    },

    /**
     * The expanded items in the ExpandBar.
     * @param {string[]} [expandedItems] When provided, this method acts as a setter and sets the expandedItems value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored expandedItems value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.ExpandBar#
     */
    expandedItems: function (expandedItems) {
        return this._propertyHandler("value", expandedItems, StringUtils.joinFunc("\u0018"), StringUtils.splitFunc("\u0018"));
    }
};

/**
 * The description of a Java ExpandBar test object.
 * @param {Object} [props] Initializes a Java ExpandBar test object using the supplied property bag.
 * @returns {ExpandBar} the description object that was initialized.
 * @class ExpandBar
 * @extends Java.UiObjectBaseDescription
 * @mixes Java.ExpandBarDescriptionBehavior
 * @memberof Java
 */
function ExpandBar(props) {
    var expandBarDesc = new UiObjectBaseDescription("ExpandBar");
    ObjUtils.extend(expandBarDesc, ExpandBarDescriptionBehavior);
    expandBarDesc._defineByPropertyBag(props);
    return expandBarDesc;
}

//Consts
var itemsCountWiredName = "count";

/**
 * The behaviors of ExpandBar object
 * @memberof Java
 * @ignore
 */
var ExpandBarTOBehavior = {
    _helpers: {
        /**
         * The number of ExpandBar items in the ExpandBar.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of ExpandBar items in the ExpandBar.
         * @memberof Java.ExpandBarTO#
         * @ignore
         */
        _itemsCount: function () {
            return this._getROProperty(itemsCountWiredName, arguments).then(Convert.toNumber);
        },

        /*jshint eqnull:true */
        /**
         * Gets the ExpandBar item's label.
         * @function
         * @param {number|string} identifier The identifier of the ExpandBar item. If it is a number, it is the 0-based index of the ExpandBar item. If it is a string, it is the name of the ExpandBar item.
         * @returns {Promise<string>} a promise that is fulfilled with the item's label when the _getItemLabel operation ends.
         * @memberof Java.ExpandBarTO#
         * @ignore
         */
        _getItemLabel: function (identifier) {
            if (typeof identifier === 'number') {
                return this._executeNotWrapped(arguments, "GetItem", identifier);
            }
            if (typeof identifier === 'string') {
                return this.items().then(function (allItems) {
                    if (allItems.length === 0)
                        throw new Error("ItemNotFoundException: Cannot identify the specified item of the expand bar test object. Confirm that the specified item is included in the object's item collection.");

                    var retVal = null;
                    var checkItemLabelFunc = function (itemLabel) {
                        if (itemLabel === identifier)
                            retVal = identifier;
                    };
                    var lastPromise = allItems[0].label().then(checkItemLabelFunc);
                    allItems.splice(0, 1);
                    allItems.forEach(function (item) {
                        lastPromise = lastPromise.then(function () {
                            if (retVal != null) //value was already found
                                return;
                            return item.label().then(checkItemLabelFunc);
                        });
                    });
                    return lastPromise.then(function () {
                        if (retVal == null)
                            throw new Error("ItemNotFoundException: Cannot identify the specified item of the expand bar test object. Confirm that the specified item is included in the object's item collection.");
                        return retVal;
                    });
                });
            }
            throw new Error("ArgumentException: unsupported identifier type.");
        },

        /**
         * Collapses the ExpandBar item.
         * @function
         * @param {number|string} identifier The identifier of the ExpandBar item. If it is a number, it is the 0-based index of the ExpandBar item. If it is a string, it is the name of the ExpandBar item.
         * @returns {Promise<void>} a promise that is fulfilled when the _itemCollapse operation ends.
         * @memberof Java.ExpandBarTO#
         * @ignore
         */
        _itemCollapse: function (identifier) {
            if (typeof identifier === 'number') {
                return this._executeNotWrapped(arguments, "GetItem", identifier).then((function (itemLabel) {
                    return this._executeCommand("Collapse", itemLabel);
                }).bind(this));
            }
            if (typeof identifier === 'string') {
                return this._executeNotWrapped(arguments, "Collapse", identifier);
            }
            throw new Error("ArgumentException: unsupported identifier type.");
        },

        /**
         * Expands the ExpandBar item.
         * @function
         * @param {number|string} identifier The identifier of the ExpandBar item. If it is a number, it is the 0-based index of the ExpandBar item. If it is a string, it is the name of the ExpandBar item.
         * @returns {Promise<void>} a promise that is fulfilled when the _itemExpand operation ends.
         * @memberof Java.ExpandBarTO#
         * @ignore
         */
        _itemExpand: function (identifier) {
            if (typeof identifier === 'number') {
                return this._executeNotWrapped(arguments, "GetItem", identifier).then((function (itemLabel) {
                    return this._executeCommand("Expand", itemLabel);
                }).bind(this));
            }
            if (typeof identifier === 'string') {
                return this._executeNotWrapped(arguments, "Expand", identifier);
            }
            throw new Error("ArgumentException: unsupported identifier type.");
        },

        /**
         * Creates an ExpandBar item from the identifier and text representation.
         * @function
         * @param {number|string} identifier The identifier of the ExpandBar item. If it is a number, it is the 0-based index of the ExpandBar item. If it is a string, it is the name of the ExpandBar item.
         * @param {string} textRepresentation The text representation of the ExpandBar item.
         * @returns {Java.ExpandBarItem} the ExpandBarItem object.
         * @memberof Java.ExpandBarTO#
         * @ignore
         */
        _createItem: function (identifier, textRepresentation) {
            return new ExpandBarItem(this, identifier, textRepresentation);
        }
    },

    _properties: {
        /**
         * Returns the expanded items in the ExpandBar.
         * @function
         * @returns {Promise<Java.ExpandBarItem[]>} a promise that is fulfilled with the expanded items in the ExpandBar.
         * @memberof Java.ExpandBarTO#
         */
        expandedItems: function () {
            return this._nativePropertyToItems("\u0018", "value");
        },

        /**
         * Returns the collection of items in the ExpandBar.
         * @function
         * @returns {Promise<Java.ExpandBarItem[]>} a promise that is fulfilled with the collection of items in the ExpandBar.
         * @memberof Java.ExpandBarTO#
         */
        items: function () {
            return this._itemsCount().then((function (itemsCount) {
                var allItems = [];
                for (var i = 0; i < itemsCount; i++) {
                    allItems[i] = this._createItem(i);
                }
                return allItems;
            }).bind(this));
        }
    },

    /**
     * @ignore
     * @memberof WPF.ButtonTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Returns the ExpandBar item with the specified text.
         * @function
         * @param text The text of the item.
         * @returns {Java.ExpandBarItem} the ExpandBar item with the specified text.
         * @memberof Java.ExpandBarTO#
         */
        getItem: function (text) {
            if (text == null)
                throw new Error("ArgumentException: text is required.");
            return this._createItem(text, text);
        }
    },

    _additionalProperties: {
        itemsCount: {wiredName: itemsCountWiredName}
    }
};

/**
 * A Java ExpandBar test object
 * @constructor
 * @class ExpandBarTO
 * @extends Java.UiObjectBaseTO
 * @mixes ContainerBehavior
 * @mixes ExecuteItemsWithEventsBehavior
 * @mixes Java.ExpandBarTOBehavior._methods
 * @memberof Java
 */
function ExpandBarTO(session, description) {
    description = description || ExpandBar();
    var buttonTO = new UiObjectBaseTO("JavaExpandBar", session, description);
    buttonTO._mergeBehavior(ContainerBehavior);
    buttonTO._mergeBehavior(ExecuteItemsWithEventsBehavior);
    buttonTO._mergeBehavior(ExpandBarTOBehavior);
    return buttonTO;
}

module.exports.ExpandBar = ExpandBar;
module.exports.ExpandBarTO = ExpandBarTO;
