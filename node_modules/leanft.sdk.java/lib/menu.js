// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/23/2016.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;

/**
 * MenuDescriptionBehavior - the description for a Java Menu object
 * @memberof Java
 * @ignore
 */
var MenuDescriptionBehavior = {
    /**
     * The number of menu items that are direct children of this menu.
     * @param {number} [subMenusCount] When provided, this method acts as a setter and sets the subMenusCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored subMenusCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.Menu#
     */
    subMenusCount: function (subMenusCount) {
        return this._propertyHandler("items count", subMenusCount, Convert.toNumber);
    },

    /**
     * The menu text.
     * @param {string} [text] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.Menu#
     */
    text: function (text) {
        return this._simplePropertyHandler("text", text);
    }
};

/**
 * The description of a Java Menu test object.
 * @param {Object} [props] Initializes a Java Menu test object using the supplied property bag.
 * @returns {Menu} the description object that was initialized.
 * @class Menu
 * @extends Java.UiObjectBaseDescription
 * @mixes Java.MenuDescriptionBehavior
 * @memberof Java
 */
function Menu(props) {
    var menuDesc = new UiObjectBaseDescription("Menu");
    ObjUtils.extend(menuDesc, MenuDescriptionBehavior);
    menuDesc._defineByPropertyBag(props);
    return menuDesc;
}

//Consts
var itemsCountWiredName = "items count";

/**
 * The behaviors of Menu object
 * @memberof Java
 * @ignore
 */
var MenuTOBehavior = {
    _helpers: {
        _textRepresentation: null,

        /**
         * The number of menu items that are direct children of this menu.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of menu items that are direct children of this menu.
         * @memberof Java.MenuTO#
         * @ignore
         */
        _subMenusCount: function () {
            return this._getROProperty(itemsCountWiredName, arguments).then(Convert.toNumber);
        },

        /**
         * Returns the text representation of the item.
         * @returns {string|Promise<string>} (a promise that is fulfilled with) the text representation of the item.
         * @ignore
         */
        _getTextRepresentation: function () {
            if (this._textRepresentation != null) {
                return this._textRepresentation;
            }


            return this.label().then(function(label) {
                this._textRepresentation = label;
                return this._textRepresentation;
            }.bind(this));
        }
    },

    _additionalProperties: {
        subMenusCount: {wiredName: itemsCountWiredName}
    },

    /**
     * @ignore
     * @memberof Java.MenuTOBehavior
     */
    _properties: {
        /**
         * The menu text.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the menu text.
         * @memberof Java.MenuTO#
         */
        text: {},

        /**
         * A collection of all sub menus of this menu.
         * @function
         * @returns {Promise<Java.MenuTO[]>} a promise that is fulfilled with the number of sub menu items.
         * @memberof Java.MenuTO#
         */
        subMenus: {
            wiredName: itemsCountWiredName,
            getter: function () {
                return this._subMenusCount().then((function (subMenusCount) {
                    var subMenus = [];
                    for (var i = 0; i < subMenusCount; i++) {
                        subMenus[i] = this.$(Menu({index: i}));
                    }

                    return subMenus;
                }).bind(this));
            }
        },

        /**
         * The menu text representation.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the menu text representation.
         * @memberof Java.MenuTO#
         */
        textRepresentation: function () {
            return this.label();
        }
    },

    /**
     * @ignore
     * @memberof Java.MenuTOBehavior
     */
    _methods: {
        /**
         * Selects this Java menu item.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         * @memberof Java.MenuTO#
         */
        select: function () {
            return this._executeWithEvents(arguments, "Select");
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Returns a sub menu of this menu.
         * @function
         * @param {string} subMenuPath the path of the sub menu (separated by ';' char).
         * @returns {Java.MenuTO} A sub menu of this menu.
         * @memberof Java.MenuTO#
         */
        getSubMenu: function (subMenuPath) {
            if (subMenuPath == null)
                throw new Error("ArgumentException: subMenuPath is required.");

            var subMenuParts = subMenuPath.split(';');
            var parent = this;
            var subMenu = null;

            subMenuParts.forEach(function (subMenuPart) {
                subMenu = parent.$(Menu({label: subMenuPart}));
                parent = subMenu;
            });
            return subMenu;
        },

        /**
         * Selects the specified sub menu.
         * @function
         * @param {string} subMenuPath the path of the sub menu (separated by ';' char).
         * @returns {Promise<void>} a promise that is fulfilled when the selectSubMenu operation ends.
         * @memberof Java.MenuTO#
         */
        selectSubMenu: function (subMenuPath) {
            return this.getSubMenu(subMenuPath).select();
        }
    }
};

/**
 * A Java Menu test object
 * @constructor
 * @class MenuTO
 * @extends Java.UiObjectBaseTO
 * @mixes Java.MenuTOBehavior._properties
 * @mixes Java.MenuTOBehavior._methods
 * @memberof Java
 */
function MenuTO(session, description) {
    description = description || Menu();
    var menuTO = new UiObjectBaseTO("JavaMenu", session, description);
    menuTO._mergeBehavior(MenuTOBehavior);
    return menuTO;
}

module.exports.Menu = Menu;
module.exports.MenuTO = MenuTO;
