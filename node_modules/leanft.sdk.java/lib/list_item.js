// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/13/2016.
 */
var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * A List Item object
 * @constructor
 * @class ListItem
 * @mixes Java.ListItemBehavior._properties
 * @mixes Java.ListItemBehavior._methods
 * @memberof Java
 */
function ListItem(ownerList, identifier, textRepresentation) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(ListItemBehavior);
    this._ownerList = ownerList;
    this._identifier = identifier;
    this._textRepresentation = textRepresentation;
    this._executeWithEventsOnItem = this._ownerList._executeWithEventsOnItem.bind(this._ownerList, this);
    this._executeWithEventsOnItemOnError = this._ownerList._executeWithEventsOnItemOnError.bind(this._ownerList, this);
}

ListItem.prototype = {
    _ownerList: null,
    _identifier: null,
    _textRepresentation: null,
    _executeWithEventsOnItem: null,
    _executeWithEventsOnItemOnError: null
};

/**
 * The methods of ListItem object
 * @memberof Java
 * @ignore
 */
var ListItemBehavior = {
    _helpers: {
        /**
         * Returns the identifier of the item.
         * @returns {number|string} the identifier of the item.
         * @ignore
         */
        _getIdentifier: function () {
            return this._identifier;
        },

        /**
         * Returns the text representation of the item.
         * @returns {string|Promise<string>} (a promise that is fulfilled with) the text representation of the item.
         * @ignore
         */
        _getTextRepresentation: function () {
            if (this._textRepresentation != null) {
                return this._textRepresentation;
            }


            return this._ownerList._getItemText(this.identifier).then(function(text) {
                this._textRepresentation = text;
                return this._textRepresentation;
            }.bind(this));
        }
    },

    /**
     * @memberof Java.ListItemBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the index property of the item.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the 0-based index of the list item.
         */
        index: function () {
            return this._executeWithEventsOnItemOnError(this._ownerList._getItemIndex, this._identifier);
        },

        /**
         * Returns the text property of the item.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text value of the list item.
         */
        text: function () {
            return this._executeWithEventsOnItemOnError(this._ownerList._getItemText, this._identifier);
        }
    }
};

module.exports.ListItem = ListItem;
