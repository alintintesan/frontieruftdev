// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/25/2016.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var StringUtils = Core.StringUtils;
var ExecuteItemsWithEventsBehavior = Core.ExecuteItemsWithEventsBehavior;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var JavaConvertHelper = UiObjectBase.JavaConvertHelper;
var ToolBarButton = require("./toolbar_button.js").ToolBarButton;

/**
 * The description of a Java ToolBar test object.
 * @param {Object} [props] Initializes a Java ToolBar test object using the supplied property bag.
 * @returns {ToolBar} the description object that was initialized.
 * @class ToolBar
 * @extends Java.UiObjectBaseDescription
 * @memberof Java
 */
function ToolBar(props) {
    var toolBarDesc = new UiObjectBaseDescription("ToolBar");
    toolBarDesc._defineByPropertyBag(props);
    return toolBarDesc;
}

/**
 * The behaviors of ToolBar object
 * @memberof Java
 * @ignore
 */
var ToolBarTOBehavior = {
    /**
     * @ignore
     * @memberof Java.ToolBarTOBehavior
     */
    _properties: {
        /**
         * The toolbar buttons in this toolbar.
         * @function
         * @returns {Promise<Java.ToolBarButton[]>} a promise that is fulfilled with the toolbar buttons in this toolbar.
         * @memberof Java.ToolBarTO#
         */
        buttons: function () {
            return this._executeWithEventsOnError(arguments, "GetItemsCount").then((function (itemsCountStr) {
                return this._executeWithEventsOnError(arguments, "GetContent").then((function (nativeString) {
                    var allItemsString = nativeString.split(";");
                    var toolBarButtons = [];
                    var itemsCount = Convert.toNumber(itemsCountStr);
                    for (var i = 0; i < itemsCount; i++) {
                        toolBarButtons[i] = this._createItem(i + 1, allItemsString[i]);
                    }
                    return toolBarButtons;
                }).bind(this));
            }).bind(this));
        },

        /**
         * The selected buttons in this toolbar.
         * @function
         * @returns {Promise<Java.ToolBarButton[]>} a promise that is fulfilled with the selected buttons in this toolbar.
         * @memberof Java.ToolBarTO#
         */
        selectedButtons: function () {
            return this._executeWithEventsOnError(arguments, "GetSelection").then((function (nativeString) {
                if (StringUtils.isNullOrEmpty(nativeString))
                    return [];
                var selectedButtons = [];
                nativeString.split(";").forEach((function (buttonText, i) {
                    selectedButtons[i] = this._createItem(buttonText, buttonText);
                }).bind(this));
                return selectedButtons;
            }).bind(this));
        }
    },

    _methods: {        
        /*jshint eqnull:true */
        /**
         * Returns the button with the specified text.
         * @function
         * @param text The text of the button.
         * @returns {Java.ToolBarButton} Get the ToolBar button with the specified text.
         * @memberof Java.ToolBarTO#
         */
        getButton: function (text) {
            if (text == null)
                throw new Error("ArgumentException: text is required.");
            return this._createItem(text, text);
        }
    },

    _helpers: {
        /**
         * Press a toolbar button.
         * @param {number|string} identifier The identifier of the button. If it's a number, it's the 0-based index of the button. If it's a string, it's the name of the button.
         * @returns {Promise<void>} a promise that is fulfilled when the _pressItem operation ends.
         * @ignore
         */
        _pressItem: function (identifier) {
            return this._executeNotWrapped(arguments, "Press", identifier);
        },

        /**
         * Opens the dropdown menu associated with this toolbar button by clicking the arrow part of the button.
         * @param {number|string} identifier The identifier of the button. If it's a number, it's the 0-based index of the button. If it's a string, it's the name of the button.
         * @returns {Promise<void>} a promise that is fulfilled when the _showDropdown operation ends.
         * @ignore
         */
        _showDropdown: function (identifier) {
            return this._executeNotWrapped(arguments, "ShowDropdown", identifier);
        },

        /**
         * Check if the button is enabled or not.
         * @param {number|string} identifier The identifier of the button. If it's a number, it's the 0-based index of the button. If it's a string, it's the name of the button.
         * @returns {Promise<boolean>} a promise that is fulfilled when the _isItemEnabled operation ends.
         * @ignore
         */
        _isItemEnabled: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "enabled").then(JavaConvertHelper.numericStringToBool);
        },

        /**
         * Get the button index.
         * @param {number|string} identifier The identifier of the button. If it's a number, it's the 0-based index of the button. If it's a string, it's the name of the button.
         * @returns {Promise<number>} a promise that is fulfilled when the _getItemIndex operation ends.
         * @ignore
         */
        _getItemIndex: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "index").then(function (itemIndex) {
                return Convert.toNumber(itemIndex) - 1; // to zero based
            });
        },

        /**
         * Get the button name.
         * @param {number|string} identifier The identifier of the button. If it's a number, it's the 0-based index of the button. If it's a string, it's the name of the button.
         * @returns {Promise<string>} a promise that is fulfilled when the _getItemName operation ends.
         * @ignore
         */
        _getItemName: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "name");
        },

        /**
         * Check if the button is selected
         * @param {number|string} identifier The identifier of the button. If it's a number, it's the 0-based index of the button. If it's a string, it's the name of the button.
         * @returns {Promise<boolean>} a promise that is fulfilled when the _isItemSelected operation ends.
         * @ignore
         */
        _isItemSelected: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "selected").then(JavaConvertHelper.numericStringToBool);
        },

        /**
         * Create an ToolBarButton from the identifier and textRepresentation
         * @param {number|string} identifier The identifier of the ToolBarButton. If it's a number, it's the 0-based index of the item. If it's a string, it's the name of the button.
         * @param {string} textRepresentation The text representation if the ToolBarButton.
         * @returns {Java.ToolBarButton} The ToolBarButton object
         * @memberof Java.ToolBarTO#
         * @ignore
         */
        _createItem: function (identifier, textRepresentation) {
            return new ToolBarButton(this, identifier, textRepresentation);
        }
    }
};

/**
 * A Java ToolBar test object
 * @constructor
 * @class ToolBarTO
 * @extends Java.UiObjectBaseTO
 * @mixes ExecuteItemsWithEventsBehavior
 * @mixes Java.ToolBarTOBehavior._properties
 * @memberof Java
 */
function ToolBarTO(session, description) {
    description = description || ToolBar();
    var toolBarTO = new UiObjectBaseTO("JavaToolbar", session, description);
    toolBarTO._mergeBehavior(ExecuteItemsWithEventsBehavior);
    toolBarTO._mergeBehavior(ToolBarTOBehavior);
    return toolBarTO;
}

module.exports.ToolBar = ToolBar;
module.exports.ToolBarTO = ToolBarTO;
