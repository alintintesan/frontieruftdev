// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/22/2016.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;

/**
 * TabControlDescriptionBehavior - the description for a Java Tab object
 * @memberof Java
 * @ignore
 */
var TabControlDescriptionBehavior = {
    /**
     * The number of tabbed panels contained in this tab control.
     * @param {number} [tabsCount] When provided, this method acts as a setter and sets the tabsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored tabsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.TabControl#
     */
    tabsCount: function (tabsCount) {
        return this._propertyHandler("items count", tabsCount, Convert.toNumber);
    },

    /**
     * The tabbed panel selected in this tab control.
     * @param {string} [selectedTab] When provided, this method acts as a setter and sets the selectedTab value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedTab value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.TabControl#
     */
    selectedTab: function (selectedTab) {
        return this._simplePropertyHandler("value", selectedTab);
    },

    /**
     * The original logical location of the tab control.
     * @param {string} [origLogicalLocation] When provided, this method acts as a setter and sets the origLogicalLocation value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored origLogicalLocation value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Java.TabControl#
     */
    origLogicalLocation: function (origLogicalLocation) {
        return this._simplePropertyHandler("orig_logical_location", origLogicalLocation);
    }
};

/**
 * The description of a Java Tab test object.
 * @param {Object} [props] Initializes a Java Tab test object using the supplied property bag.
 * @returns {TabControl} the description object that was initialized.
 * @class TabControl
 * @extends Java.UiObjectBaseDescription
 * @mixes Java.TabControlDescriptionBehavior
 * @memberof Java
 */
function TabControl(props) {
    var tabControlDesc = new UiObjectBaseDescription("TabControl");
    ObjUtils.extend(tabControlDesc, TabControlDescriptionBehavior);
    tabControlDesc._defineByPropertyBag(props);
    return tabControlDesc;
}

//Consts
var itemsCountWiredName = "items count";

/**
 * The behaviors of TabControl object
 * @memberof Java
 * @ignore
 */
var TabControlTOBehavior = {
    /**
     * @ignore
     * @memberof Java.TabControlTOBehavior
     */
    _properties: {
        /**
         * The number of tabbed panels contained in the tab object.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of tabbed panels contained in the tab object.
         * @memberof Java.TabControlTO#
         */
        tabsCount: {
            wiredName: itemsCountWiredName,
            getter: function () {
                return this._getROProperty(itemsCountWiredName, arguments).then(Convert.toNumber);
            }
        },

        /**
         * The selected tabbed panel.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the selected tabbed panel.
         * @memberof Java.TabControlTO#
         */
        selectedTab: {
            wiredName: "value"
        },

        /**
         * The original logical location of the tab object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the original logical location of the tab object.
         * @memberof Java.TabControlTO#
         */
        origLogicalLocation: {
            wiredName: "orig_logical_location"
        }
    },

    /**
     * @ignore
     * @memberof Java.TabControlTOBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Closes the specified tab panel.
         * @function
         * @param {(string|number)} tabOrIndex The tab or tab index to close.
         * @returns {Promise<void>} a promise that is fulfilled when the close operation ends.
         * @memberof Java.TabControlTO#
         */
        close: function (tabOrIndex) {
            if (tabOrIndex == null)
                throw new Error("ArgumentException: tabOrIndex is required.");
            return this._executeWithEvents(arguments, "CloseTab", tabOrIndex);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects the specified tab panel.
         * @function
         * @param {(string|number)} tabOrIndex The tab or tab index to select.
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         * @memberof Java.TabControlTO#
         */
        select: function (tabOrIndex) {
            if (tabOrIndex == null)
                throw new Error("ArgumentException: tabOrIndex is required.");
            return this._executeWithEvents(arguments, "Select", tabOrIndex);
        }
    }
};

/**
 * A Java Tab test object
 * @constructor
 * @class TabControlTO
 * @extends Java.UiObjectBaseTO
 * @mixes Java.TabControlTOBehavior._methods
 * @mixes Java.TabControlTOBehavior._properties
 * @memberof Java
 */
function TabControlTO(session, description) {
    description = description || TabControl();
    var tabControlTO = new UiObjectBaseTO("JavaTab", session, description);
    tabControlTO._mergeBehavior(TabControlTOBehavior);
    return tabControlTO;
}

module.exports.TabControl = TabControl;
module.exports.TabControlTO = TabControlTO;
