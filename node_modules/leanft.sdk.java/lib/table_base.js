// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/20/2019.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var TableCell = require("./table_cell.js").TableCell;
var UiObjectBase = require("./ui_object_base.js");
var JavaConvertHelper = UiObjectBase.JavaConvertHelper;
var Table = require("./table.js");
var StringUtils = Core.StringUtils;
var MouseButton = Core.MouseButton;

/**
 * The base description for Java Table
 * @memberof Java
 */
var TableBaseDescriptionBehavior = {
    /**
     * The number of rows in the table.
     * @param {number} [rowsCount] When provided, this method acts as a setter and sets the rowsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored rowsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    rowsCount: function (rowsCount) {
        return this._propertyHandler("rows", rowsCount, Convert.toNumber);
    },
    /**
     * The number of rows in the table.
     * @param {string[]} [columnHeaders] When provided, this method acts as a setter and sets the columnHeaders value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored columnHeaders value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    columnHeaders: function (columnHeaders) {
        return this._propertyHandler("column_names", columnHeaders, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    }
};

//Consts
var columnsWiredName = "column_names";

/**
 * The base methods for Java Table
 * @memberof Java
 */
var TableBaseTOBehavior = {
    /**
     * @ignore
     * @memberof Java.TableBaseTOBehavior
     */
    _properties: {
        /**
         * Returns a promise for all the cells in a table (when called without arguments), all the cells in a row (when called with row only), or a specified cell.
         * @function
         * @param {number} [rowIndex] The row index of the specific cell.
         * @param {string|number} [columnOrIndex] The column header or 0-based column index in the row.
         * @returns {Promise<TableCell[][] | TableCell[] | TableCell>} a promise that is fulfilled with all the cells in the table (when called without arguments), all the cells in the row (when called with row only), or the specified cell.
         */
        cells: function (rowIndex, columnOrIndex) {
            return this._cells(rowIndex, columnOrIndex);
        },

        /**
         * Returns the column headers.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the column headers.
         */
        columnHeaders: {
            wiredName: columnsWiredName,
            getter: function () {
                return this._getROProperty(columnsWiredName, arguments).then(StringUtils.splitFunc(";"));
            }
        }
    },

    /**
     * @ignore
     * @memberof Java.TableBaseTOBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Double-clicks a cell by row and column indices or column header.
         * @function
         * @param {number} row 0-based row number.
         * @param {string|number} columnOrIndex The column header or 0-based column index.
         * @returns {Promise<void>} a promise that is fulfilled when the activateCell operation ends.
         */
        activateCell: function (row, columnOrIndex) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnOrIndex == null)
                throw new Error("ArgumentException: columnOrIndex is required.");
            return this._executeWithEvents(arguments, "ActivateCell", Convert.toNumber(row), columnOrIndex);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Double-clicks a column by column indices or header.
         * @function
         * @param {string|number} columnOrIndex The column header or 0-based column index.
         * @returns {Promise<void>} a promise that is fulfilled when the activateColumn operation ends.
         */
        activateColumn: function (columnOrIndex) {
            if (columnOrIndex == null)
                throw new Error("ArgumentException: columnOrIndex is required.");
            return this._executeWithEvents(arguments, "ActivateColumn", columnOrIndex);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Unselects a range of columns by column indices or headers.
         * <br/><b>Important:</b> This method is not supported for SWT tables.
         * @function
         * @param {string|number} fromColumnOrIndex The header or 0-based index of the first column.
         * @param {string|number} toColumnOrIndex The header or 0-based index of the last column.
         * @returns {Promise<void>} a promise that is fulfilled when the deselectColumnsRange operation ends.
         */
        deselectColumnsRange: function (fromColumnOrIndex, toColumnOrIndex) {
            if (fromColumnOrIndex == null)
                throw new Error("ArgumentException: fromColumnOrIndex is required.");
            if (toColumnOrIndex == null)
                throw new Error("ArgumentException: toColumnOrIndex is required.");
            return this._executeWithEvents(arguments, "DeselectColumnsRange", fromColumnOrIndex, toColumnOrIndex);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Unselects a range of rows by row indices.
         * @function
         * @param {number} fromRow 0-based index of the first row.
         * @param {number} toRow 0-based index of the last row.
         * @returns {Promise<void>} a promise that is fulfilled when the deselectRowsRange operation ends.
         */
        deselectRowsRange: function (fromRow, toRow) {
            if (fromRow == null)
                throw new Error("ArgumentException: fromRow is required.");
            if (toRow == null)
                throw new Error("ArgumentException: toRow is required.");
            return this._executeWithEvents(arguments, "DeselectRowsRange", Convert.toNumber(fromRow), Convert.toNumber(toRow));
        },

        /**
         * Clicks a cell by row and column indices or column header.
         * @function
         * @param {number} row 0-based row number.
         * @param {string|number} columnOrIndex The column header or 0-based column index.
         * @returns {Promise<void>} a promise that is fulfilled when the selectCell operation ends.
         */
        selectCell: function (row, columnOrIndex) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnOrIndex == null)
                throw new Error("ArgumentException: columnOrIndex is required.");
            return this._executeWithEvents(arguments, "SelectCell", Convert.toNumber(row), columnOrIndex);
        },

        /**
         * Selects a range of cells in a table by rows and column indices or column headers.
         * Important: This method is not supported for SWT tables.
         * @function
         * @param {number} fromRow 0-based index of the first row.
         * @param {string|number} fromColumnOrIndex The header or 0-based index of the first column.
         * @param {number} toRow 0-based index of the last row.
         * @param {string|number} toColumnOrIndex The header or 0-based index of the last column.
         * @returns {Promise<void>} a promise that is fulfilled when the selectCellRange operation ends.
         */
        selectCellRange: function (fromRow, fromColumnOrIndex, toRow, toColumnOrIndex) {
            if (fromRow == null)
                throw new Error("ArgumentException: fromRow is required.");
            if (fromColumnOrIndex == null)
                throw new Error("ArgumentException: fromColumnOrIndex is required.");
            if (toRow == null)
                throw new Error("ArgumentException: toRow is required.");
            if (toColumnOrIndex == null)
                throw new Error("ArgumentException: toColumnOrIndex is required.");
            return this._executeWithEvents(arguments, "SelectCellsRange", Convert.toNumber(fromRow), fromColumnOrIndex, Convert.toNumber(toRow), toColumnOrIndex);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects a range of columns by column headers or column indices.
         * @function
         * @param {string|number} fromColumnOrIndex The header or 0-based index of the first column.
         * @param {string|number} toColumnOrIndex The header or 0-based index of the last column.
         * @returns {Promise<void>} a promise that is fulfilled when the selectColumnsRange operation ends.
         */
        selectColumnsRange: function (fromColumnOrIndex, toColumnOrIndex) {
            if (fromColumnOrIndex == null)
                throw new Error("ArgumentException: fromColumnOrIndex is required.");
            if (toColumnOrIndex == null)
                throw new Error("ArgumentException: toColumnOrIndex is required.");
            return this._executeWithEvents(arguments, "SelectColumnsRange", fromColumnOrIndex, toColumnOrIndex);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects a range of rows by row indices.
         * @function
         * @param {number} fromRow 0-based index of the first row.
         * @param {number} toRow 0-based index of the last row.
         * @returns {Promise<void>} a promise that is fulfilled when the selectRowsRange operation ends.
         */
        selectRowsRange: function (fromRow, toRow) {
            if (fromRow == null)
                throw new Error("ArgumentException: fromRow is required.");
            if (toRow == null)
                throw new Error("ArgumentException: toRow is required.");
            return this._executeWithEvents(arguments, "SelectRowsRange", Convert.toNumber(fromRow), Convert.toNumber(toRow));
        }
    },

    _helpers: {
        /**
         * Get the number of rows in the table.
         * @returns {Promise<number>} a promise that is fulfilled when the _getRowsCount operation ends.
         * @ignore
         */
        _getRowsCount: function () {
            return this._getROProperty("rows", arguments).then(Convert.toNumber);
        },

        /**
         * Get cell value.
         * @param {number} rowIdentifier 0-based index.
         * @param {string|number} columnIdentifier The header or 0-based index of the column.
         * @returns {Promise<Object>} a promise that is fulfilled when the _getCellValue operation ends.
         * @ignore
         */
        _getCellValue: function (rowIdentifier, columnIdentifier) {
            return this._executeNotWrapped(arguments, "GetCellData", rowIdentifier, columnIdentifier);
        },

        /**
         * Set cell value.
         * @param {number} rowIdentifier 0-based index.
         * @param {number} columnIdentifier 0-based index.
         * @param {Object} value The cell value to be set.
         * @returns {Promise<void>} a promise that is fulfilled when the _setCellValue operation ends.
         * @ignore
         */
        _setCellValue: function (rowIdentifier, columnIdentifier, value) {
            return this._executeNotWrapped(arguments, "SetCellData", rowIdentifier, columnIdentifier, value);
        },

        /**
         * Get column header.
         * @param {number} columnIdentifier 0-based index.
         * @returns {Promise<Object>} a promise that is fulfilled when the _getColumnHeader operation ends.
         * @ignore
         */
        _getColumnHeader: function (columnIdentifier) {
            return this._executeNotWrapped(arguments, "GetColumnName", columnIdentifier);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Click on a cell.
         * @param {number} rowIdentifier 0-based index.
         * @param {number} columnIdentifier 0-based index.
         * @param {MouseButton} [button = MouseButton.left] Either the Left or Right button value of {@link MouseButton}.
         * @param {Java.TableKeyModifier} [modifier] A {@link Java.TableKeyModifier} value indicating keys to be pressed and held while the operation is performed.
         * @returns {Promise<void>} a promise that is fulfilled when the _clickCell operation ends.
         * @ignore
         */
        _clickCell: function (rowIdentifier, columnIdentifier, button, modifier) {
            if (button == null)
                button = MouseButton.left;
            if (modifier != null)
                return this._executeNotWrapped(arguments, "ClickCell", rowIdentifier, columnIdentifier, JavaConvertHelper.convertMouseButtonToString(button), Table.TableKeyModifier._tableKeyModifierToNative(modifier));
            return this._executeNotWrapped(arguments, "ClickCell", rowIdentifier, columnIdentifier, JavaConvertHelper.convertMouseButtonToString(button));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Double click on a cell.
         * @param {number} rowIdentifier 0-based index.
         * @param {number} columnIdentifier 0-based index.
         * @param {MouseButton} [button = MouseButton.left] Either the Left or Right button value of {@link MouseButton}.
         * @param {Java.TableKeyModifier} [modifier] A {@link Java.TableKeyModifier} value indicating keys to be pressed and held while the operation is performed.
         * @returns {Promise<void>} a promise that is fulfilled when the _doubleClickCell operation ends.
         * @ignore
         */
        _doubleClickCell: function (rowIdentifier, columnIdentifier, button, modifier) {
            if (button == null)
                button = MouseButton.left;
            if (modifier != null)
                return this._executeNotWrapped(arguments, "DoubleClickCell", rowIdentifier, columnIdentifier, JavaConvertHelper.convertMouseButtonToString(button), Table.TableKeyModifier._tableKeyModifierToNative(modifier));
            return this._executeNotWrapped(arguments, "DoubleClickCell", rowIdentifier, columnIdentifier, JavaConvertHelper.convertMouseButtonToString(button));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Drag and drop on cells.
         * @param {number} fromRow 0-based index.
         * @param {number} fromColumn 0-based index.
         * @param {number} toRow 0-based index.
         * @param {number} toColumn 0-based index.
         * @param {MouseButton} [button = MouseButton.left] Either the Left or Right button value of {@link MouseButton}.
         * @param {Java.TableKeyModifier} [modifier] A {@link Java.TableKeyModifier} value indicating keys to be pressed and held while the operation is performed.
         * @returns {Promise<void>} a promise that is fulfilled when the _dragAndDropOn operation ends.
         * @ignore
         */
        _dragAndDropOn: function (fromRow, fromColumn, toRow, toColumn, button, modifier) {
            if (button == null)
                button = MouseButton.left;
            if (modifier != null)
                return this._executeNotWrapped(arguments, "Drag", fromRow, fromColumn, toRow, toColumn, JavaConvertHelper.convertMouseButtonToString(button), Table.TableKeyModifier._tableKeyModifierToNative(modifier));
            return this._executeNotWrapped(arguments, "Drag", fromRow, fromColumn, toRow, toColumn, JavaConvertHelper.convertMouseButtonToString(button));
        },

        /**
         * Create TableCell object.
         * @param {number} rowIndex 0-based index.
         * @param {string|number} columnOrIndex The column header or 0-based column index in the row, specified by the row parameter.
         * @returns {Java.TableCell} A TableCell object.
         * @ignore
         */
        _createCell: function (rowIndex, columnOrIndex) {
            return new TableCell(this, rowIndex, columnOrIndex);
        }
    }
};

module.exports.TableBaseDescriptionBehavior = TableBaseDescriptionBehavior;
module.exports.TableBaseTOBehavior = TableBaseTOBehavior;


