// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var Position = Core.Position;
var ObjectUtils = Core.ObjectUtils;

describe("UI Object Base With Layout Info Description", function () {

    var UiObjectWithLayoutInfoDescription = require("../lib/ui_object_base_with_layout_info.js").UiObjectWithLayoutInfoDescription;
    var UiObjectBaseDescription = require("../lib/ui_object_base.js").UiObjectBaseDescription;
    var uiObjectWithLayoutInfoDescriptionUnderTest;
    
    beforeEach(function () {
        uiObjectWithLayoutInfoDescriptionUnderTest = new UiObjectBaseDescription();
        Core.ObjectUtils.extend(uiObjectWithLayoutInfoDescriptionUnderTest, UiObjectWithLayoutInfoDescription);
    });

    describe("isRightAligned method", function () {
        it("should add 'RightAligned' to _properties when value is given", function () {
            uiObjectWithLayoutInfoDescriptionUnderTest.isRightAligned(true);
            assert.strictEqual(uiObjectWithLayoutInfoDescriptionUnderTest._properties["RightAligned"], true);
        });

        it("should add 'RightAligned' to _properties when value is given in string", function () {
            uiObjectWithLayoutInfoDescriptionUnderTest.isRightAligned("true");
            assert.strictEqual(uiObjectWithLayoutInfoDescriptionUnderTest._properties["RightAligned"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectWithLayoutInfoDescriptionUnderTest.isRightAligned(true);
            assert.strictEqual(result, uiObjectWithLayoutInfoDescriptionUnderTest);
        });

        it("should remove 'RightAligned' from _properties when value is null", function () {
            uiObjectWithLayoutInfoDescriptionUnderTest._properties["RightAligned"] = true;
            uiObjectWithLayoutInfoDescriptionUnderTest.isRightAligned(null);
            assert(!("RightAligned" in uiObjectWithLayoutInfoDescriptionUnderTest._properties));
        });

        it("should return the value of 'RightAligned' from _properties when value is not given", function () {
            uiObjectWithLayoutInfoDescriptionUnderTest._properties["RightAligned"] = true;
            var result = uiObjectWithLayoutInfoDescriptionUnderTest.isRightAligned();
            assert.equal(result, true);
        });
    });

    describe("isRightToLeftLayout method", function () {
        it("should add 'RightToLeftLayout' to _properties when value is given", function () {
            uiObjectWithLayoutInfoDescriptionUnderTest.isRightToLeftLayout(true);
            assert.strictEqual(uiObjectWithLayoutInfoDescriptionUnderTest._properties["RightToLeftLayout"], true);
        });

        it("should add 'RightToLeftLayout' to _properties when value is given in string", function () {
            uiObjectWithLayoutInfoDescriptionUnderTest.isRightToLeftLayout("true");
            assert.strictEqual(uiObjectWithLayoutInfoDescriptionUnderTest._properties["RightToLeftLayout"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectWithLayoutInfoDescriptionUnderTest.isRightToLeftLayout(true);
            assert.strictEqual(result, uiObjectWithLayoutInfoDescriptionUnderTest);
        });

        it("should remove 'RightToLeftLayout' from _properties when value is null", function () {
            uiObjectWithLayoutInfoDescriptionUnderTest._properties["RightToLeftLayout"] = true;
            uiObjectWithLayoutInfoDescriptionUnderTest.isRightToLeftLayout(null);
            assert(!("RightToLeftLayout" in uiObjectWithLayoutInfoDescriptionUnderTest._properties));
        });

        it("should return the value of 'RightToLeftLayout' from _properties when value is not given", function () {
            uiObjectWithLayoutInfoDescriptionUnderTest._properties["RightToLeftLayout"] = true;
            var result = uiObjectWithLayoutInfoDescriptionUnderTest.isRightToLeftLayout();
            assert.equal(result, true);
        });
    });

    describe("isRightToLeftReading method", function () {
        it("should add 'RightToLeftReading' to _properties when value is given", function () {
            uiObjectWithLayoutInfoDescriptionUnderTest.isRightToLeftReading(true);
            assert.strictEqual(uiObjectWithLayoutInfoDescriptionUnderTest._properties["RightToLeftReading"], true);
        });

        it("should add 'RightToLeftReading' to _properties when value is given in string", function () {
            uiObjectWithLayoutInfoDescriptionUnderTest.isRightToLeftReading("true");
            assert.strictEqual(uiObjectWithLayoutInfoDescriptionUnderTest._properties["RightToLeftReading"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectWithLayoutInfoDescriptionUnderTest.isRightToLeftReading(true);
            assert.strictEqual(result, uiObjectWithLayoutInfoDescriptionUnderTest);
        });

        it("should remove 'RightToLeftReading' from _properties when value is null", function () {
            uiObjectWithLayoutInfoDescriptionUnderTest._properties["RightToLeftReading"] = true;
            uiObjectWithLayoutInfoDescriptionUnderTest.isRightToLeftReading(null);
            assert(!("RightToLeftReading" in uiObjectWithLayoutInfoDescriptionUnderTest._properties));
        });

        it("should return the value of 'RightToLeftReading' from _properties when value is not given", function () {
            uiObjectWithLayoutInfoDescriptionUnderTest._properties["RightToLeftReading"] = true;
            var result = uiObjectWithLayoutInfoDescriptionUnderTest.isRightToLeftReading();
            assert.equal(result, true);
        });
    });
});

describe("UI Object Base With Layout Info Behavior", function () {

    var UiObjectWithLayoutInfoBehaviour = require("../lib/ui_object_base_with_layout_info.js").UiObjectWithLayoutInfoBehaviour;
    var uiObjectWithLayoutInfoBehaviourUnderTest;

    beforeEach(function () {
        uiObjectWithLayoutInfoBehaviourUnderTest = ObjectUtils.mergeTestBehavior(UiObjectWithLayoutInfoBehaviour);
        uiObjectWithLayoutInfoBehaviourUnderTest._getROProperty = sinon.stub();        
    });

    describe("isRightAligned method", function () {
        it("should execute _getROProperty 'RightAligned'", function () {
            uiObjectWithLayoutInfoBehaviourUnderTest.isRightAligned();
            sinon.assert.calledOnce(uiObjectWithLayoutInfoBehaviourUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectWithLayoutInfoBehaviourUnderTest._getROProperty, "RightAligned", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectWithLayoutInfoBehaviourUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectWithLayoutInfoBehaviourUnderTest.isRightAligned();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isRightToLeftLayout method", function () {
        it("should execute _getROProperty 'RightToLeftLayout'", function () {
            uiObjectWithLayoutInfoBehaviourUnderTest.isRightToLeftLayout();
            sinon.assert.calledOnce(uiObjectWithLayoutInfoBehaviourUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectWithLayoutInfoBehaviourUnderTest._getROProperty, "RightToLeftLayout", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectWithLayoutInfoBehaviourUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectWithLayoutInfoBehaviourUnderTest.isRightToLeftLayout();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isRightToLeftReading method", function () {
        it("should execute _getROProperty 'RightToLeftReading'", function () {
            uiObjectWithLayoutInfoBehaviourUnderTest.isRightToLeftReading();
            sinon.assert.calledOnce(uiObjectWithLayoutInfoBehaviourUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectWithLayoutInfoBehaviourUnderTest._getROProperty, "RightToLeftReading", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectWithLayoutInfoBehaviourUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectWithLayoutInfoBehaviourUnderTest.isRightToLeftReading();
            assert.strictEqual(res, promiseMock);
        });
    });
});
