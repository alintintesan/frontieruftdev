// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/16/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var MouseButton = Core.MouseButton;

describe("TabControl Description", function () {

    var TabControl = require("../lib/tab_control.js").TabControl;
    var tabControlDescUnderTest;

    beforeEach(function () {
        tabControlDescUnderTest = TabControl();
    });

    describe("tabs method", function () {
        it("should add 'all items' to _properties when value is given", function () {
            tabControlDescUnderTest.tabs(["item1", "item2"]);
            assert.strictEqual(tabControlDescUnderTest._properties["all items"], "item1\nitem2");
        });

        it("should add 'all items' to _properties when value is given using property bag", function () {
            tabControlDescUnderTest = TabControl({
                tabs: ["item1", "item2"]
            });
            assert.strictEqual(tabControlDescUnderTest._properties["all items"], "item1\nitem2");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = tabControlDescUnderTest.tabs(["item1", "item2"]);
            assert.strictEqual(result, tabControlDescUnderTest);
        });

        it("should remove 'all items' from _properties when value is null", function () {
            tabControlDescUnderTest._properties["all items"] = "item1\nitem2";
            tabControlDescUnderTest.tabs(null);
            assert(!("all items" in tabControlDescUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties when value is not given", function () {
            tabControlDescUnderTest._properties["all items"] = "item1\nitem2";
            var value = tabControlDescUnderTest.tabs();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'all items' in _properties when get is called", function () {
            tabControlDescUnderTest._properties["all items"] = "item1\nitem2";
            tabControlDescUnderTest.tabs();
            assert.strictEqual(tabControlDescUnderTest._properties["all items"], "item1\nitem2");
        });
    });

    describe("selectedTab method", function () {
        it("should add 'selection' to _properties when value is given", function () {
            tabControlDescUnderTest.selectedTab("selected");
            assert.strictEqual(tabControlDescUnderTest._properties["selection"], "selected");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tabControlDescUnderTest.selectedTab("selected");
            assert.strictEqual(result, tabControlDescUnderTest);
        });

        it("should remove 'selection' from _properties when value is null", function () {
            tabControlDescUnderTest._properties["selection"] = "selected";
            tabControlDescUnderTest.selectedTab(null);
            assert(!("selection" in tabControlDescUnderTest._properties));
        });

        it("should return the value of 'selection' from _properties when value is not given", function () {
            tabControlDescUnderTest._properties["selection"] = "selected";
            var selected = tabControlDescUnderTest.selectedTab();
            assert.equal(selected, "selected");
        });
    });    

    describe("tabsCount method", function () {
        it("should add 'items count' to _properties when value is given", function () {
            tabControlDescUnderTest.tabsCount(100);
            assert.strictEqual(tabControlDescUnderTest._properties["items count"], 100);
        });

        it("should add 'items count' to _properties when value is given in string", function () {
            tabControlDescUnderTest.tabsCount('100');
            assert.strictEqual(tabControlDescUnderTest._properties["items count"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tabControlDescUnderTest.tabsCount(100);
            assert.strictEqual(result, tabControlDescUnderTest);
        });

        it("should remove 'items count' from _properties when value is null", function () {
            tabControlDescUnderTest._properties["items count"] = 100;
            tabControlDescUnderTest.tabsCount(null);
            assert(!("items count" in tabControlDescUnderTest._properties));
        });

        it("should return the value of 'items count' from _properties when value is not given", function () {
            tabControlDescUnderTest._properties["items count"] = 100;
            var result = tabControlDescUnderTest.tabsCount();
            assert.equal(result, 100);
        });
    });
    
});

describe("TabControl Test Object", function () {

    var TabControlTO = require("../lib/tab_control.js").TabControlTO;
    var Tab = require("../lib/tab.js").Tab;
    var tabControlTOUnderTest;

    var removeExecutorMethods = function (array) {
        array.map(function (item) {
            delete item._executeWithEventsOnItem;
            delete item._executeWithEventsOnItemOnError;
        });
        return array;
    };

    var removeExecutorMethodsOfAnItem = function (item) {
        delete item._executeWithEventsOnItem;
        delete item._executeWithEventsOnItemOnError;
        return item;
    };

    beforeEach(function () {
        tabControlTOUnderTest = new TabControlTO();
        sinon.stub(tabControlTOUnderTest, "_executeWithEvents");
        sinon.stub(tabControlTOUnderTest, "_getROPropertiesWithoutEvents");
        sinon.stub(tabControlTOUnderTest, "_getROProperty");
        sinon.stub(tabControlTOUnderTest, "_executeNotWrapped");
    });

    afterEach(function () {
        tabControlTOUnderTest._executeWithEvents.restore();
        tabControlTOUnderTest._getROPropertiesWithoutEvents.restore();
        tabControlTOUnderTest._getROProperty.restore();
        tabControlTOUnderTest._executeNotWrapped.restore();
    });

    describe("tabs method", function () {
        it("should query the properties 'all items', 'items count'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2", 2]);
                }
            };
            tabControlTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            tabControlTOUnderTest.tabs();
            sinon.assert.calledOnce(tabControlTOUnderTest._getROPropertiesWithoutEvents);
            sinon.assert.calledWith(tabControlTOUnderTest._getROPropertiesWithoutEvents, "all items", "items count");
        });

        it("should return empty list if no tab returns from _getROPropertiesWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["", 0]);
                }
            };

            tabControlTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            var res = tabControlTOUnderTest.tabs();
            assert.deepEqual(res, []);
        });

        it("should return a list  with tabs if tabs returns from _getROPropertiesWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2", 2]);
                }
            };

            tabControlTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            var res = tabControlTOUnderTest.tabs();
            assert.deepEqual(removeExecutorMethods(res), removeExecutorMethods([new Tab(tabControlTOUnderTest, 0, "Item1"), new Tab(tabControlTOUnderTest, 1, "Item2")]));
        });
    });

    describe("selectedTab method", function () {
        it("should query the properties 'selection'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1");
                }
            };
            tabControlTOUnderTest._getROProperty.returns(promiseMock);
            tabControlTOUnderTest.selectedTab();
            sinon.assert.calledOnce(tabControlTOUnderTest._getROProperty);
            sinon.assert.calledWith(tabControlTOUnderTest._getROProperty, "selection", sinon.match({}));
        });

        it("should return a Tab  if tab returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1");
                }
            };

            tabControlTOUnderTest._getROProperty.returns(promiseMock);
            var res = tabControlTOUnderTest.selectedTab();
            assert.deepEqual(removeExecutorMethodsOfAnItem(res), removeExecutorMethodsOfAnItem(new Tab(tabControlTOUnderTest, "Item1", "Item1")));
        });
    });

    describe("select method", function () {
        it("should throw error if tab is undefined", function () {
            assert.throws(function () {
                tabControlTOUnderTest.select();
            });
        });

        it("should throw error if tab is null", function () {
            assert.throws(function () {
                tabControlTOUnderTest.select(null);
            });
        });

        it("should throw error if tab has no identifier", function () {
            assert.throws(function () {
                tabControlTOUnderTest.select({});
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tabControlTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = tabControlTOUnderTest.select(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Select' if item is a number", function () {
            tabControlTOUnderTest.select(10);
            sinon.assert.calledOnce(tabControlTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Select", 10, 0);
        });

        it("should execute _executeWithEvents 'Select' if item is a string", function () {
            tabControlTOUnderTest.select("identifier");
            sinon.assert.calledOnce(tabControlTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTOUnderTest._executeWithEvents, sinon.match({ 0: "identifier" }), "Select", "identifier", 0);
        });

        it("should execute _executeWithEvents 'Select' if item is an object", function () {
            var item = {}; item._identifier = 10;
            tabControlTOUnderTest.select(item);
            sinon.assert.calledOnce(tabControlTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTOUnderTest._executeWithEvents, sinon.match({ 0: { _identifier: 10 } }), "Select", 10, 0);
        });

        it("should execute _executeWithEvents 'Select' with Mouse Button Left if null", function () {
            var item = {}; item._identifier = 10;
            tabControlTOUnderTest.select(item, null);
            sinon.assert.calledOnce(tabControlTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTOUnderTest._executeWithEvents, sinon.match({ 0: { _identifier: 10 } }), "Select", 10, 0);
        });

        it("should execute _executeWithEvents 'Select' with correct Mouse Button", function () {
            var item = {}; item._identifier = 10;
            tabControlTOUnderTest.select(item, MouseButton.right);
            sinon.assert.calledOnce(tabControlTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTOUnderTest._executeWithEvents, sinon.match({ 0: { _identifier: 10 }, 1: "right" }), "Select", 10, 1);
        });
    });

    describe("getTab method", function () {
        it("should throw error if name is undefined", function () {
            assert.throws(function () {
                tabControlTOUnderTest.getTab();
            });
        });

        it("should throw error if name is null", function () {
            assert.throws(function () {
                tabControlTOUnderTest.getTab(null);
            });
        });

        it("should return the Tab", function () {
            var res = tabControlTOUnderTest.getTab("Item1");
            assert.strictEqual(res._identifier, "Item1");
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerTabControl, tabControlTOUnderTest);
        });
    });


    describe("_getTabText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tabControlTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tabControlTOUnderTest._getTabText(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            tabControlTOUnderTest._getTabText(10);
            sinon.assert.calledOnce(tabControlTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tabControlTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "text");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            tabControlTOUnderTest._getTabText("Item1");
            sinon.assert.calledOnce(tabControlTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tabControlTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "text");
        });
    });

    describe("_isTabSelected method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tabControlTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tabControlTOUnderTest._isTabSelected(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            tabControlTOUnderTest._isTabSelected(10);
            sinon.assert.calledOnce(tabControlTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tabControlTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "selected");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            tabControlTOUnderTest._isTabSelected("Item1");
            sinon.assert.calledOnce(tabControlTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tabControlTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "selected");
        });
    });

    describe("_createItem method", function () {
        it("should return the Tab with correct values", function () {
            var res = tabControlTOUnderTest._createItem(10, "Item1");
            assert.strictEqual(res._identifier, 10);
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerTabControl, tabControlTOUnderTest);
        });
    });
});
