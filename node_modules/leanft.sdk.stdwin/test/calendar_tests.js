// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/20/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");


describe("CalendarDescriptionBehavior", function () {

    var Calendar = require("../lib/calendar.js").Calendar;
    var calendarUnderTest;

    beforeEach(function () {
        calendarUnderTest = new Calendar();
    });

    describe("date method", function () {
        it("should add 'date' to _properties when value is given", function () {
            calendarUnderTest.date(new Date(2016, 5, 20));
            assert.strictEqual(calendarUnderTest._properties["date"], "20-Jun-2016");
        });

        it("should add 'date' to _properties when value is given in string format 'd-MMM-yyyy'", function () {
            calendarUnderTest.date("20-Jun-2016");
            assert.strictEqual(calendarUnderTest._properties["date"], "20-Jun-2016");
        });

        it("should add 'date' to _properties when value is given in string format 'MM/dd/yyyy'", function () {
            calendarUnderTest.date("6/20/2016");
            assert.strictEqual(calendarUnderTest._properties["date"], "20-Jun-2016");
        });

        it("should add 'date' to _properties when value is given in full string", function () {
            calendarUnderTest.date("June 20, 2016");
            assert.strictEqual(calendarUnderTest._properties["date"], "20-Jun-2016");
        });

        it("should add 'date' to _properties when value is given in string format 'yyyy-MM-dd'", function () {
            calendarUnderTest.date("2016-6-20");
            assert.strictEqual(calendarUnderTest._properties["date"], "20-Jun-2016");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = calendarUnderTest.date(new Date(2016, 5, 20));
            assert.strictEqual(result, calendarUnderTest);
        });

        it("should remove 'date' from _properties when value is null", function () {
            calendarUnderTest._properties["date"] = "20-Jun-2016";
            calendarUnderTest.date(null);
            assert(!("date" in calendarUnderTest._properties));
        });

        it("should return the value of 'date' from _properties when value is not given", function () {
            calendarUnderTest._properties["date"] = "20-Jun-2016";
            var result = calendarUnderTest.date();
            assert.deepEqual(result, new Date(2016, 5, 20));
        });
    });
});