// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/17/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("SpinBox Description", function () {

    var SpinBox = require("../lib/spin_box.js").SpinBox;
    var spinBoxDescUnderTest;

    beforeEach(function () {
        spinBoxDescUnderTest = SpinBox();
    });

    describe("value method", function () {
        it("should add 'Position' to _properties when value is given", function () {
            spinBoxDescUnderTest.value(100);
            assert.strictEqual(spinBoxDescUnderTest._properties["position"], 100);
        });

        it("should add 'Position' to _properties when value is given in string", function () {
            spinBoxDescUnderTest.value('100');
            assert.strictEqual(spinBoxDescUnderTest._properties["position"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = spinBoxDescUnderTest.value(100);
            assert.strictEqual(result, spinBoxDescUnderTest);
        });

        it("should remove 'Position' from _properties when value is null", function () {
            spinBoxDescUnderTest._properties["position"] = 100;
            spinBoxDescUnderTest.value(null);
            assert(!("position" in spinBoxDescUnderTest._properties));
        });

        it("should return the value of 'Position' from _properties when value is not given", function () {
            spinBoxDescUnderTest._properties["position"] = 100;
            var result = spinBoxDescUnderTest.value();
            assert.equal(result, 100);
        });
    });
    
});

describe("SpinBox Test Object", function () {

    var SpinBoxTO = require("../lib/spin_box.js").SpinBoxTO;
    var spinBoxTOUnderTest;

    beforeEach(function () {
        spinBoxTOUnderTest = new SpinBoxTO();
        sinon.stub(spinBoxTOUnderTest, "_executeWithEvents");
        sinon.stub(spinBoxTOUnderTest, "_getROProperty");        
    });

    afterEach(function () {
        spinBoxTOUnderTest._executeWithEvents.restore();
        spinBoxTOUnderTest._getROProperty.restore();
    });

    describe("value method", function () {
        
        it("should return the execution promise", function () {
            var executionPromise = {};
            spinBoxTOUnderTest._getROProperty.returns(executionPromise);
            var res = spinBoxTOUnderTest.value();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'position' with correct parameters", function () {
            spinBoxTOUnderTest.value();
            sinon.assert.calledOnce(spinBoxTOUnderTest._getROProperty);
            sinon.assert.calledWith(spinBoxTOUnderTest._getROProperty, "position", sinon.match({}));
        });        
    });

    describe("setValue method", function () {
        it("should throw error if value is undefined", function () {
            assert.throws(function () {
                spinBoxTOUnderTest.setValue();
            });
        });

        it("should throw error if value is null", function () {
            assert.throws(function () {
                spinBoxTOUnderTest.setValue(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            spinBoxTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = spinBoxTOUnderTest.setValue(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Set' if value is a number", function () {
            spinBoxTOUnderTest.setValue(10);
            sinon.assert.calledOnce(spinBoxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(spinBoxTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Set", 10);
        });

        it("should execute _executeWithEvents 'Set' if value is a string", function () {
            spinBoxTOUnderTest.setValue("10");
            sinon.assert.calledOnce(spinBoxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(spinBoxTOUnderTest._executeWithEvents, sinon.match({ 0: "10" }), "Set", 10);
        });        
    });

    describe("up method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            spinBoxTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = spinBoxTOUnderTest.up();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Next' with correct parameters", function () {
            spinBoxTOUnderTest.up();
            sinon.assert.calledOnce(spinBoxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(spinBoxTOUnderTest._executeWithEvents, sinon.match({ }), "Next");
        });
    });

    describe("down method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            spinBoxTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = spinBoxTOUnderTest.down();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Prev' with correct parameters", function () {
            spinBoxTOUnderTest.down();
            sinon.assert.calledOnce(spinBoxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(spinBoxTOUnderTest._executeWithEvents, sinon.match({}), "Prev");
        });
    });
});
