// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var VerticalScrollPosition = Core.VerticalScrollPosition;
var ScrollType = Core.ScrollType;
var ScrollOrientation = Core.ScrollOrientation;

describe("UI Object Description", function () {

    var UiObject = require("../lib/ui_object.js").UiObject;
    var UiObjectBaseDescription = require("../lib/ui_object_base.js").UiObjectBaseDescription;
    var uiObjectDescriptionUnderTest;
    
    beforeEach(function () {
        uiObjectDescriptionUnderTest = new UiObject({});
    });

    describe("horizontalScroll method", function () {

        it("setter should return this - builder", function () {
            var res = uiObjectDescriptionUnderTest.horizontalScroll({});
            assert.strictEqual(res, uiObjectDescriptionUnderTest);
        });

        it("should add 1 item to flatter when only 1 item given", function () {
            uiObjectDescriptionUnderTest.horizontalScroll({
                exists: true
            });

            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].exists, true);
            assert(!("pageSize" in uiObjectDescriptionUnderTest._properties["HorizontalScroll"]));
            assert(!("position" in uiObjectDescriptionUnderTest._properties["HorizontalScroll"]));
            assert(!("maximum" in uiObjectDescriptionUnderTest._properties["HorizontalScroll"]));
            assert(!("minimum" in uiObjectDescriptionUnderTest._properties["HorizontalScroll"]));
        });

        it("should add 2 item to flatter when only 2 items given", function () {
            uiObjectDescriptionUnderTest.horizontalScroll({
                exists: true,
                pageSize: 100
            });

            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].exists, true);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].pageSize, 100);
            assert(!("position" in uiObjectDescriptionUnderTest._properties["HorizontalScroll"]));
            assert(!("maximum" in uiObjectDescriptionUnderTest._properties["HorizontalScroll"]));
            assert(!("minimum" in uiObjectDescriptionUnderTest._properties["HorizontalScroll"]));
        });

        it("should add 3 item to flatter when only 3 items given", function () {
            uiObjectDescriptionUnderTest.horizontalScroll({
                exists: true,
                pageSize: 100,
                position: 50
            });

            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].exists, true);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].pageSize, 100);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].position, 50);
            assert(!("maximum" in uiObjectDescriptionUnderTest._properties["HorizontalScroll"]));
            assert(!("minimum" in uiObjectDescriptionUnderTest._properties["HorizontalScroll"]));
        });

        it("should add 4 item to flatter when only 4 items given", function () {
            uiObjectDescriptionUnderTest.horizontalScroll({
                exists: true,
                pageSize: 100,
                position: 50,
                maximum: 500
            });

            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].exists, true);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].pageSize, 100);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].position, 50);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].maximum, 500);
            assert(!("minimum" in uiObjectDescriptionUnderTest._properties["HorizontalScroll"]));
        });

        it("should add all items to flatter when all items given", function () {
            uiObjectDescriptionUnderTest.horizontalScroll({
                exists: true,
                pageSize: 100,
                position: 50,
                maximum: 500,
                minimum: 1
            });

            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].exists, true);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].pageSize, 100);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].position, 50);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].maximum, 500);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].minimum, 1);
        });


        it("should have correct values if get after set", function () {
            uiObjectDescriptionUnderTest.horizontalScroll({
                exists: true,
                pageSize: 100,
                position: 50,
                maximum: 500,
                minimum: 1
            });

            var res = uiObjectDescriptionUnderTest.horizontalScroll();

            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].exists, true);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].pageSize, 100);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].position, 50);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].maximum, 500);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].minimum, 1);
        });

        it("should modify value of 1 item and leave others as is, if modify value of 1 item after its set", function () {
            uiObjectDescriptionUnderTest.horizontalScroll({
                exists: true,
                pageSize: 100,
                position: 50,
                maximum: 500,
                minimum: 1
            });

            uiObjectDescriptionUnderTest.horizontalScroll().maximum = 500;

            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].exists, true);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].pageSize, 100);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].position, 50);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].maximum, 500);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["HorizontalScroll"].minimum, 1);
        });

        it("should set 1 item on the flatter, if setting 1 item without setting scroll info value", function () {
            uiObjectDescriptionUnderTest.horizontalScroll().pageSize = 100;

            var res = uiObjectDescriptionUnderTest.horizontalScroll();

            assert.notStrictEqual(res, null);
            assert.strictEqual(res.pageSize, 100);
        });

        it("should not delete it but reset its value, if setting scroll info to null", function () {
            uiObjectDescriptionUnderTest.horizontalScroll(null);

            var res = uiObjectDescriptionUnderTest.horizontalScroll();

            assert.notStrictEqual(res, null);
            assert(!("exists" in res));
            assert(!("pageSize" in res));
            assert(!("position" in res));
            assert(!("maximum" in res));
            assert(!("minimum" in res));
        });

        it("should have correct keys map", function () {
            var res = uiObjectDescriptionUnderTest.horizontalScroll();

            assert.deepEqual(res._keysMap, {
                exists: "HasHScroll",
                pageSize: "HScrollPageSize",
                position: "HScrollPosition",
                maximum: "MaxHScrollPos",
                minimum: "MinHScrollPos",
            });
        });
    });

    describe("verticalScroll method", function () {

        it("setter should return this - builder", function () {
            var res = uiObjectDescriptionUnderTest.verticalScroll({});
            assert.strictEqual(res, uiObjectDescriptionUnderTest);
        });

        it("should add 1 item to flatter when only 1 item given", function () {
            uiObjectDescriptionUnderTest.verticalScroll({
                exists: true
            });

            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].exists, true);
            assert(!("pageSize" in uiObjectDescriptionUnderTest._properties["VerticalScroll"]));
            assert(!("position" in uiObjectDescriptionUnderTest._properties["VerticalScroll"]));
            assert(!("maximum" in uiObjectDescriptionUnderTest._properties["VerticalScroll"]));
            assert(!("minimum" in uiObjectDescriptionUnderTest._properties["VerticalScroll"]));
        });

        it("should add 2 item to flatter when only 2 items given", function () {
            uiObjectDescriptionUnderTest.verticalScroll({
                exists: true,
                pageSize: 100
            });

            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].exists, true);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].pageSize, 100);
            assert(!("position" in uiObjectDescriptionUnderTest._properties["VerticalScroll"]));
            assert(!("maximum" in uiObjectDescriptionUnderTest._properties["VerticalScroll"]));
            assert(!("minimum" in uiObjectDescriptionUnderTest._properties["VerticalScroll"]));
        });

        it("should add 3 item to flatter when only 3 items given", function () {
            uiObjectDescriptionUnderTest.verticalScroll({
                exists: true,
                pageSize: 100,
                position: 50
            });

            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].exists, true);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].pageSize, 100);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].position, 50);
            assert(!("maximum" in uiObjectDescriptionUnderTest._properties["VerticalScroll"]));
            assert(!("minimum" in uiObjectDescriptionUnderTest._properties["VerticalScroll"]));
        });

        it("should add 4 item to flatter when only 4 items given", function () {
            uiObjectDescriptionUnderTest.verticalScroll({
                exists: true,
                pageSize: 100,
                position: 50,
                maximum: 500
            });

            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].exists, true);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].pageSize, 100);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].position, 50);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].maximum, 500);
            assert(!("minimum" in uiObjectDescriptionUnderTest._properties["VerticalScroll"]));
        });

        it("should add all items to flatter when all items given", function () {
            uiObjectDescriptionUnderTest.verticalScroll({
                exists: true,
                pageSize: 100,
                position: 50,
                maximum: 500,
                minimum: 1
            });

            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].exists, true);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].pageSize, 100);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].position, 50);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].maximum, 500);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].minimum, 1);
        });


        it("should have correct values if get after set", function () {
            uiObjectDescriptionUnderTest.verticalScroll({
                exists: true,
                pageSize: 100,
                position: 50,
                maximum: 500,
                minimum: 1
            });

            var res = uiObjectDescriptionUnderTest.verticalScroll();

            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].exists, true);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].pageSize, 100);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].position, 50);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].maximum, 500);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].minimum, 1);
        });

        it("should modify value of 1 item and leave others as is, if modify value of 1 item after its set", function () {
            uiObjectDescriptionUnderTest.verticalScroll({
                exists: true,
                pageSize: 100,
                position: 50,
                maximum: 500,
                minimum: 1
            });

            uiObjectDescriptionUnderTest.verticalScroll().maximum = 500;

            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].exists, true);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].pageSize, 100);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].position, 50);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].maximum, 500);
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["VerticalScroll"].minimum, 1);
        });

        it("should return an object without items but not null, if get without set ", function () {
            var res = uiObjectDescriptionUnderTest.verticalScroll();

            assert.notStrictEqual(res, null);
            assert(!("exists" in res));
            assert(!("pageSize" in res));
            assert(!("position" in res));
            assert(!("maximum" in res));
            assert(!("minimum" in res));
        });

        it("should set 1 item on the flatter, if setting 1 item without setting scroll info value", function () {
            uiObjectDescriptionUnderTest.verticalScroll().pageSize = 100;

            var res = uiObjectDescriptionUnderTest.verticalScroll();

            assert.notStrictEqual(res, null);
            assert.strictEqual(res.pageSize, 100);
        });

        it("should not delete it but reset its value, if setting scroll info to null", function () {
            uiObjectDescriptionUnderTest.verticalScroll(null);

            var res = uiObjectDescriptionUnderTest.verticalScroll();

            assert.notStrictEqual(res, null);
            assert(!("exists" in res));
            assert(!("pageSize" in res));
            assert(!("position" in res));
            assert(!("maximum" in res));
            assert(!("minimum" in res));
        });

        it("should have correct keys map", function () {
            var res = uiObjectDescriptionUnderTest.verticalScroll();

            assert.deepEqual(res._keysMap, {
                exists: "HasVScroll",
                pageSize: "VScrollPageSize",
                position: "VScrollPosition",
                maximum: "MaxVScrollPos",
                minimum: "MinVScrollPos",
            });
        });
    });
});

describe("UI Object TO", function () {

    var UIObjectTO = require("../lib/ui_object.js").UIObjectTO;
    var uiObjectTOUnderTest;

    beforeEach(function () {
        uiObjectTOUnderTest = new UIObjectTO();
        sinon.stub(uiObjectTOUnderTest, "_executeWithEvents");
        sinon.stub(uiObjectTOUnderTest, "_getROProperties");
    });

    afterEach(function () {
        uiObjectTOUnderTest._executeWithEvents.restore();
        uiObjectTOUnderTest._getROProperties.restore();
    });

    describe("horizontalScroll method", function () {
        it("should query the properties 'HasHScroll', 'HScrollPageSize', 'HScrollPosition', 'MaxHScrollPos', 'MinHScrollPos'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([true, 500, 1, 100, 50]);
                }
            };
            uiObjectTOUnderTest._getROProperties.returns(promiseMock);
            uiObjectTOUnderTest.horizontalScroll();
            sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperties);
            sinon.assert.calledWith(uiObjectTOUnderTest._getROProperties, "HasHScroll", "MaxHScrollPos", "MinHScrollPos", "HScrollPageSize", "HScrollPosition");            
        });
        it("should return full scroll info object if exists == true", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([true, 500, 1, 100, 50]);
                }
            };
            uiObjectTOUnderTest._getROProperties.returns(promiseMock);
            var res = uiObjectTOUnderTest.horizontalScroll();
            assert.deepEqual(res, {
                exists: true,
                pageSize: 100,
                position: 50,
                maximum: 500,
                minimum: 1
            });
        });
        it("should return scroll info object with default values if exists == false", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([false, null, null, null, null]);
                }
            };
            uiObjectTOUnderTest._getROProperties.returns(promiseMock);
            var res = uiObjectTOUnderTest.horizontalScroll();
            assert.strictEqual(res.exists, false);
            assert.strictEqual(res.pageSize, 0);
            assert.strictEqual(res.position, 0);
            assert.strictEqual(res.maximum, 0);
            assert.strictEqual(res.minimum, 0);
        });
    });

    describe("verticalScroll method", function () {
        it("should query the properties 'HasVScroll', 'VScrollPageSize', 'VScrollPosition', 'MaxVScrollPos', 'MinVScrollPos'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([true, 500, 1, 100, 50]);
                }
            };
            uiObjectTOUnderTest._getROProperties.returns(promiseMock);
            uiObjectTOUnderTest.verticalScroll();
            sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperties);
            sinon.assert.calledWith(uiObjectTOUnderTest._getROProperties, "HasVScroll", "MaxVScrollPos", "MinVScrollPos", "VScrollPageSize", "VScrollPosition");            
        });
        it("should return full  scroll info object if exists == true", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([true, 500, 1, 100, 50]);
                }
            };
            uiObjectTOUnderTest._getROProperties.returns(promiseMock);
            var res = uiObjectTOUnderTest.verticalScroll();
            assert.deepEqual(res, {
                exists: true,
                pageSize: 100,
                position: 50,
                maximum: 500,
                minimum: 1
            });
        });
        it("should return scroll info object with default values is exists == false", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([false, null, null, null, null]);
                }
            };
            uiObjectTOUnderTest._getROProperties.returns(promiseMock);
            var res = uiObjectTOUnderTest.verticalScroll();
            assert.strictEqual(res.exists, false);
            assert.strictEqual(res.pageSize, 0);
            assert.strictEqual(res.position, 0);
            assert.strictEqual(res.maximum, 0);
            assert.strictEqual(res.minimum, 0);
        });
    });

    describe("verticalScrollPosition method", function () {

        it("should query the properties 'HasVScroll', 'leftscrollbar'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([true, true]);
                }
            };
            uiObjectTOUnderTest._getROProperties.returns(promiseMock);
            uiObjectTOUnderTest.verticalScrollPosition();
            sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperties);
            sinon.assert.calledWith(uiObjectTOUnderTest._getROProperties, "HasVScroll", "leftscrollbar");
        });

        it("should return VerticalScrollPosition.none value if exists is false", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([false, false]);
                }
            };
            uiObjectTOUnderTest._getROProperties.returns(promiseMock);            
            var res = uiObjectTOUnderTest.verticalScrollPosition();
            assert.strictEqual(res, VerticalScrollPosition.none);            
        });

        it("should return VerticalScrollPosition.left value if exists is true and leftscrollbar is true", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([true, true]);
                }
            };
            uiObjectTOUnderTest._getROProperties.returns(promiseMock);
            var res = uiObjectTOUnderTest.verticalScrollPosition();
            assert.strictEqual(res, VerticalScrollPosition.left);
        });

        it("should return VerticalScrollPosition.right if exists is true and leftscrollbar is false", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([true, false]);
                }
            };
            uiObjectTOUnderTest._getROProperties.returns(promiseMock);
            var res = uiObjectTOUnderTest.verticalScrollPosition();
            assert.strictEqual(res, VerticalScrollPosition.right);
        });
    });

    describe("scroll method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            uiObjectTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = uiObjectTOUnderTest.scroll(ScrollOrientation.horizontalScroll, ScrollType.pageIncrement, 50);
            assert.equal(res, executionPromise);
        });

        it("should throw error if orientation is undefined", function () {
            assert.throws(function () {
                uiObjectTOUnderTest.scroll();
            });
        });

        it("should throw error if orientation is null", function () {
            assert.throws(function () {
                uiObjectTOUnderTest.scroll(null);
            });
        });

        it("should throw error if type is undefined", function () {
            assert.throws(function () {
                uiObjectTOUnderTest.scroll(ScrollOrientation.verticalScroll);
            });
        });

        it("should throw error if type is null", function () {
            assert.throws(function () {
                uiObjectTOUnderTest.scroll(ScrollOrientation.verticalScroll, null);
            });
        });

        it("should execute command 'VScroll' if orientation is ScrollOrientation.verticalScroll", function () {
            uiObjectTOUnderTest.scroll(ScrollOrientation.verticalScroll, ScrollType.lineIncrement, 10);
            sinon.assert.calledOnce(uiObjectTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectTOUnderTest._executeWithEvents, sinon.match({ 0: ScrollOrientation.verticalScroll, 1: ScrollType.lineIncrement, 2: 10 }), "VScroll", 1, 10);
        });

        it("should execute command 'HScroll' if orientation is ScrollOrientation.horizontalScroll", function () {
            uiObjectTOUnderTest.scroll(ScrollOrientation.horizontalScroll, ScrollType.lineIncrement, 10);
            sinon.assert.calledOnce(uiObjectTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectTOUnderTest._executeWithEvents, sinon.match({ 0: ScrollOrientation.horizontalScroll, 1: ScrollType.lineIncrement, 2: 10 }), "HScroll", 1, 10);
        });

        it("should execute command with value 1 if value is null", function () {
            uiObjectTOUnderTest.scroll(ScrollOrientation.verticalScroll, ScrollType.lineIncrement, null);
            sinon.assert.calledOnce(uiObjectTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectTOUnderTest._executeWithEvents, sinon.match({ 0: ScrollOrientation.verticalScroll, 1: ScrollType.lineIncrement }), "VScroll", 1, 1);
        });

        it("should execute command with value 1 if value is undefined", function () {
            uiObjectTOUnderTest.scroll(ScrollOrientation.verticalScroll, ScrollType.lineIncrement);
            sinon.assert.calledOnce(uiObjectTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectTOUnderTest._executeWithEvents, sinon.match({ 0: ScrollOrientation.verticalScroll, 1: ScrollType.lineIncrement }), "VScroll", 1, 1);
        });        
    });
});
