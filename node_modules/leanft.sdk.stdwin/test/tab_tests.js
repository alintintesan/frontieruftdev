// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/1562016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("Tab", function () {

    var Tab = require("../lib/tab.js").Tab;
    var tabUnderTest;
    var owner;

    beforeEach(function () {
        owner = { owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub() };
        tabUnderTest = new Tab(owner, 10, "TextRepresentation");
        tabUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    afterEach(function () {
        delete tabUnderTest._executeWithEventsOnItemOnError;
        delete owner._executeWithEventsOnItem;
        delete owner._executeWithEventsOnItemOnError;
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            assert.strictEqual(tabUnderTest._ownerTabControl, owner);
            assert.strictEqual(tabUnderTest._identifier, 10);
            assert.strictEqual(tabUnderTest._textRepresentation, "TextRepresentation");
        });        
    });

    describe("_getIdentifier method", function () {
        it("should return correct values", function () {
            var res = tabUnderTest._getIdentifier();
            assert.strictEqual(res, 10);            
        });
    });

    describe("_getTextRepresentation method", function () {
        it("should return correct values", function () {
            var res = tabUnderTest._getTextRepresentation();
            assert.strictEqual(res, "TextRepresentation");
        });
    });

    describe("text method", function () {
        it("should execute _getTabText with correct parameter", function () {
            tabUnderTest._ownerTabControl._getTabText = sinon.stub();
            tabUnderTest.text();
            sinon.assert.calledOnce(tabUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tabUnderTest._executeWithEventsOnItemOnError, tabUnderTest._ownerTabControl._getTabText, 10);
        });

        it("should return string if _getTabText returns string", function () {
            tabUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns("Tab");;
            var res = tabUnderTest.text();
            assert.strictEqual(res, "Tab");
        });
    });

    describe("isSelected method", function () {
        it("should execute _isTabSelected with correct parameter", function () {
            tabUnderTest._ownerTabControl._isTabSelected = sinon.stub();
            tabUnderTest.isSelected();
            sinon.assert.calledOnce(tabUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tabUnderTest._executeWithEventsOnItemOnError, tabUnderTest._ownerTabControl._isTabSelected, 10);
        });

        it("should return bool if _isTabSelected returns bool", function () {
            tabUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = tabUnderTest.isSelected();
            assert.strictEqual(res, true);
        });
    });    
});
