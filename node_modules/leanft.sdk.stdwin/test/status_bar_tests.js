// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/22/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("Status Bar Description", function () {

    var StatusBar = require("../lib/status_bar.js").StatusBar;
    var statusBarDescUnderTest;

    beforeEach(function () {
        statusBarDescUnderTest = StatusBar();
    });

    describe("items method", function () {
        it("should add 'all items' to _properties when value is given", function () {
            statusBarDescUnderTest.items(["item1", "item2"]);
            assert.strictEqual(statusBarDescUnderTest._properties["all items"], "item1\nitem2");
        });

        it("should add 'all items' to _properties when value is given using property bag", function () {
            statusBarDescUnderTest = StatusBar({
                items: ["item1", "item2"]
            });
            assert.strictEqual(statusBarDescUnderTest._properties["all items"], "item1\nitem2");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = statusBarDescUnderTest.items(["item1", "item2"]);
            assert.strictEqual(result, statusBarDescUnderTest);
        });

        it("should remove 'all items' from _properties when value is null", function () {
            statusBarDescUnderTest._properties["all items"] = "item1\nitem2";
            statusBarDescUnderTest.items(null);
            assert(!("all items" in statusBarDescUnderTest._properties));
        });

        it("should return the value of 'all items' from _properties when value is not given", function () {
            statusBarDescUnderTest._properties["all items"] = "item1\nitem2";
            var value = statusBarDescUnderTest.items();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'all items' in _properties when get is called", function () {
            statusBarDescUnderTest._properties["all items"] = "item1\nitem2";
            statusBarDescUnderTest.items();
            assert.strictEqual(statusBarDescUnderTest._properties["all items"], "item1\nitem2");
        });
    });

    describe("itemsCount method", function () {
        it("should add 'items count' to _properties when value is given", function () {
            statusBarDescUnderTest.itemsCount(100);
            assert.strictEqual(statusBarDescUnderTest._properties["items count"], 100);
        });

        it("should add 'items count' to _properties when value is given in string", function () {
            statusBarDescUnderTest.itemsCount('100');
            assert.strictEqual(statusBarDescUnderTest._properties["items count"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = statusBarDescUnderTest.itemsCount(100);
            assert.strictEqual(result, statusBarDescUnderTest);
        });

        it("should remove 'items count' from _properties when value is null", function () {
            statusBarDescUnderTest._properties["items count"] = 100;
            statusBarDescUnderTest.itemsCount(null);
            assert(!("items count" in statusBarDescUnderTest._properties));
        });

        it("should return the value of 'items count' from _properties when value is not given", function () {
            statusBarDescUnderTest._properties["items count"] = 100;
            var result = statusBarDescUnderTest.itemsCount();
            assert.equal(result, 100);
        });
    });
});

describe("StatusBar Test Object", function () {

    var StatusBarTO = require("../lib/status_bar.js").StatusBarTO;
    var StatusBarItem = require("../lib/statusbar_item.js").StatusBarItem;
    var statusBarTOUnderTest;

    var removeExecutorMethods = function (array) {
        array.map(function (item) {
            delete item._executeWithEventsOnItem;
            delete item._executeWithEventsOnItemOnError;
        });
        return array;
    };

    beforeEach(function () {
        statusBarTOUnderTest = new StatusBarTO();
        sinon.stub(statusBarTOUnderTest, "_getROPropertiesWithoutEvents");
        sinon.stub(statusBarTOUnderTest, "_executeNotWrapped");
    });

    afterEach(function () {
        statusBarTOUnderTest._getROPropertiesWithoutEvents.restore();
        statusBarTOUnderTest._executeNotWrapped.restore();
    });

    describe("items method", function () {
        it("should query the properties 'all items', 'items count'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2", 2]);
                }
            };
            statusBarTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            statusBarTOUnderTest.items();
            sinon.assert.calledOnce(statusBarTOUnderTest._getROPropertiesWithoutEvents);
            sinon.assert.calledWith(statusBarTOUnderTest._getROPropertiesWithoutEvents, "all items", "items count");
        });

        it("should return empty list if no item returns from _getROPropertiesWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["", 0]);
                }
            };

            statusBarTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            var res = statusBarTOUnderTest.items();
            assert.deepEqual(res, []);
        });

        it("should return a list  with items if items returns from _getROPropertiesWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2", 2]);
                }
            };

            statusBarTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            var res = statusBarTOUnderTest.items();
            assert.deepEqual(removeExecutorMethods(res), removeExecutorMethods([new StatusBarItem(statusBarTOUnderTest, 0, "Item1"), new StatusBarItem(statusBarTOUnderTest, 1, "Item2")]));
        });
    });

    describe("_getItemText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            statusBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = statusBarTOUnderTest._getItemText(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            statusBarTOUnderTest._getItemText(10);
            sinon.assert.calledOnce(statusBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(statusBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "text");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            statusBarTOUnderTest._getItemText("Item1");
            sinon.assert.calledOnce(statusBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(statusBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "text");
        });
    });

    describe("_getItemHeight method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            statusBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = statusBarTOUnderTest._getItemHeight(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            statusBarTOUnderTest._getItemHeight(10);
            sinon.assert.calledOnce(statusBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(statusBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "height");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            statusBarTOUnderTest._getItemHeight("Item1");
            sinon.assert.calledOnce(statusBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(statusBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "height");
        });
    });

    describe("_getItemWidth method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            statusBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = statusBarTOUnderTest._getItemWidth(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            statusBarTOUnderTest._getItemWidth(10);
            sinon.assert.calledOnce(statusBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(statusBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "width");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            statusBarTOUnderTest._getItemWidth("Item1");
            sinon.assert.calledOnce(statusBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(statusBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "width");
        });
    });

    describe("_getItemX method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            statusBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = statusBarTOUnderTest._getItemX(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            statusBarTOUnderTest._getItemX(10);
            sinon.assert.calledOnce(statusBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(statusBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "x");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            statusBarTOUnderTest._getItemX("Item1");
            sinon.assert.calledOnce(statusBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(statusBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "x");
        });
    });

    describe("_getItemY method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            statusBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = statusBarTOUnderTest._getItemY(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            statusBarTOUnderTest._getItemY(10);
            sinon.assert.calledOnce(statusBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(statusBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "y");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            statusBarTOUnderTest._getItemY("Item1");
            sinon.assert.calledOnce(statusBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(statusBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "y");
        });
    });

    describe("_createItem method", function () {
        it("should return the StatusBarItem with correct values", function () {
            var res = statusBarTOUnderTest._createItem(10, "Item1");
            assert.strictEqual(res._identifier, 10);
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerStatusBar, statusBarTOUnderTest);
        });
    });
    
});
