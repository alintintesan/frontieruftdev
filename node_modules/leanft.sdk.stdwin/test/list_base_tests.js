// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var Position = Core.Position;
var MouseButton = Core.MouseButton;
var ObjectUtils = Core.ObjectUtils;

describe("List Base Behavior", function () {

    var ListBaseBehavior = require("../lib/list_base.js").ListBaseBehavior;
    var listBaseBehaviorUnderTest;

    beforeEach(function () {
        listBaseBehaviorUnderTest = ObjectUtils.mergeTestBehavior(ListBaseBehavior);;
        listBaseBehaviorUnderTest._executeWithEvents = sinon.stub();
        listBaseBehaviorUnderTest._executeOnItemsCollection = sinon.stub();
        listBaseBehaviorUnderTest._executeSingleOpOnCollection = sinon.stub();
        listBaseBehaviorUnderTest._executeWithEventsOnError = sinon.stub();
        listBaseBehaviorUnderTest._executeNotWrapped = sinon.stub();
    });

    afterEach(function () {
        delete listBaseBehaviorUnderTest._executeWithEvents;
        delete listBaseBehaviorUnderTest._executeOnItemsCollection;
        delete listBaseBehaviorUnderTest._executeSingleOpOnCollection;
        delete listBaseBehaviorUnderTest._executeWithEventsOnError;
        delete listBaseBehaviorUnderTest._executeNotWrapped;
    });


    describe("_activateItem method", function () {
        it("should throw error if item is undefined", function () {
            assert.throws(function () {
                listBaseBehaviorUnderTest._activateItem();
            });
        });

        it("should throw error if item is null", function () {
            assert.throws(function () {
                listBaseBehaviorUnderTest._activateItem(null);
            });
        });

        it("should throw error if item has no identifier", function () {
            assert.throws(function () {
                listBaseBehaviorUnderTest._activateItem({});
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            listBaseBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = listBaseBehaviorUnderTest._activateItem(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Activate' if item is a number", function () {
            listBaseBehaviorUnderTest._activateItem(10);
            sinon.assert.calledOnce(listBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(listBaseBehaviorUnderTest._executeWithEvents, sinon.match({}), "Activate", 10, 0);
        });

        it("should execute _executeWithEvents 'Activate' if item is a string", function () {
            listBaseBehaviorUnderTest._activateItem("identifier");
            sinon.assert.calledOnce(listBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(listBaseBehaviorUnderTest._executeWithEvents, sinon.match({}), "Activate", "identifier", 0);
        });

        it("should execute _executeWithEvents 'Activate' if item is an object", function () {
            var item = {}; item._identifier = 10;
            listBaseBehaviorUnderTest._activateItem(item);
            sinon.assert.calledOnce(listBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(listBaseBehaviorUnderTest._executeWithEvents, sinon.match({}), "Activate", 10, 0);
        });

        it("should execute _executeWithEvents 'Activate' with Mouse Button Left if null", function () {
            var item = {}; item._identifier = 10;
            listBaseBehaviorUnderTest._activateItem(item, null);
            sinon.assert.calledOnce(listBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(listBaseBehaviorUnderTest._executeWithEvents, sinon.match({}), "Activate", 10, 0);
        });

        it("should execute _executeWithEvents 'Activate' with correct Mouse Button", function () {
            var item = {}; item._identifier = 10;
            listBaseBehaviorUnderTest._activateItem(item, MouseButton.right);
            sinon.assert.calledOnce(listBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(listBaseBehaviorUnderTest._executeWithEvents, sinon.match({}), "Activate", 10, 1);
        });
    });

    describe("_deselect method", function () {
        it("should throw error if items is undefined", function () {
            assert.throws(function () {
                listBaseBehaviorUnderTest._deselect();
            });
        });

        it("should throw error if items is null", function () {
            assert.throws(function () {
                listBaseBehaviorUnderTest._deselect(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            listBaseBehaviorUnderTest._executeSingleOpOnCollection.returns(executionPromise);

            var item = {}; item._identifier = 10;
            var res = listBaseBehaviorUnderTest._deselect(item);
            assert.equal(res, executionPromise);
        });

        it("should call the _executeSingleOpOnCollection method once and pass it the correct arguments", function () {
            var item = {}; item._identifier = 10;
            listBaseBehaviorUnderTest._deselect(item);
            sinon.assert.calledOnce(listBaseBehaviorUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(listBaseBehaviorUnderTest._executeSingleOpOnCollection, sinon.match({}), "Deselect", [item], listBaseBehaviorUnderTest._itemTransform);
        });

        it("should call _executeSingleOpOnCollection method with Deselect and the parameters are item, string and number", function () {
            var item1 = {}; item1._identifier = 10;            
            listBaseBehaviorUnderTest._deselect(item1, "item2", 20);
            sinon.assert.calledOnce(listBaseBehaviorUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(listBaseBehaviorUnderTest._executeSingleOpOnCollection, sinon.match({}), "Deselect", [item1, "item2", 20], listBaseBehaviorUnderTest._itemTransform);
        });
    });

    describe("_select method", function () {
        it("should throw error if items is undefined", function () {
            assert.throws(function () {
                listBaseBehaviorUnderTest._select();
            });
        });

        it("should throw error if items is null", function () {
            assert.throws(function () {
                listBaseBehaviorUnderTest._select(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            listBaseBehaviorUnderTest._executeOnItemsCollection.returns(executionPromise);

            var item = {}; item._identifier = 10;
            var res = listBaseBehaviorUnderTest._select(item);
            assert.equal(res, executionPromise);
        });

        it("should call the _executeOnItemsCollection method once and pass it the correct arguments", function () {
            var item = {}; item._identifier = 10;
            listBaseBehaviorUnderTest._select(item);
            sinon.assert.calledOnce(listBaseBehaviorUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(listBaseBehaviorUnderTest._executeOnItemsCollection, sinon.match({}), "Select", "ExtendSelect", [item], listBaseBehaviorUnderTest._itemTransform);
        });

        it("should call _executeOnItemsCollection method with Select for first args and ExtendSelect for other args and the parameters are item, string and number", function () {
            var item1 = {}; item1._identifier = 10;
            listBaseBehaviorUnderTest._select(item1, "item2", 20);
            sinon.assert.calledOnce(listBaseBehaviorUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(listBaseBehaviorUnderTest._executeOnItemsCollection, sinon.match({}), "Select", "ExtendSelect", [item1, "item2", 20], listBaseBehaviorUnderTest._itemTransform);
        });
    });

    describe("_getItemText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            listBaseBehaviorUnderTest._executeNotWrapped.returns(executionPromise);
            var res = listBaseBehaviorUnderTest._getItemText(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            listBaseBehaviorUnderTest._getItemText(10);
            sinon.assert.calledOnce(listBaseBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listBaseBehaviorUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "text");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            listBaseBehaviorUnderTest._getItemText("Item1");
            sinon.assert.calledOnce(listBaseBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listBaseBehaviorUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "text");
        });
    });

    describe("_isItemFocused method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            listBaseBehaviorUnderTest._executeNotWrapped.returns(executionPromise);
            var res = listBaseBehaviorUnderTest._isItemFocused(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            listBaseBehaviorUnderTest._isItemFocused(10);
            sinon.assert.calledOnce(listBaseBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listBaseBehaviorUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "focused");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            listBaseBehaviorUnderTest._isItemFocused("Item1");
            sinon.assert.calledOnce(listBaseBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listBaseBehaviorUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "focused");
        });
    });

    describe("_isItemSelected method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            listBaseBehaviorUnderTest._executeNotWrapped.returns(executionPromise);
            var res = listBaseBehaviorUnderTest._isItemSelected(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            listBaseBehaviorUnderTest._isItemSelected(10);
            sinon.assert.calledOnce(listBaseBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listBaseBehaviorUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "selected");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            listBaseBehaviorUnderTest._isItemSelected("Item1");
            sinon.assert.calledOnce(listBaseBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listBaseBehaviorUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "selected");
        });
    });

    describe("_itemTransform method", function () {
        it("should return the item as it is if the item is number", function () {
            var res = listBaseBehaviorUnderTest._itemTransform(10);
            assert.strictEqual(res, 10);
        });

        it("should return the item as it is if the item is string", function () {
            var res = listBaseBehaviorUnderTest._itemTransform("Item");
            assert.strictEqual(res, "Item");
        });

        it("should return the item's identifier if the item is object", function () {
            var item = {_identifier: 10};
            var res = listBaseBehaviorUnderTest._itemTransform(item);
            assert.strictEqual(res, 10);
        });
    });
});
