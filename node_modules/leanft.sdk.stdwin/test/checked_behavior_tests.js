// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/17/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var Position = Core.Position;
var CheckedState = Core.CheckedState;
var ObjectUtils = Core.ObjectUtils;

describe("Checked Description", function () {

    var CheckedStateDescriptionBehavior = require("../lib/checked_behavior.js").CheckedStateDescriptionBehavior;
    var UiObjectBaseDescription = require("../lib/ui_object_base.js").UiObjectBaseDescription;
    var checkedDescriptionUnderTest;

    beforeEach(function () {
        checkedDescriptionUnderTest = new UiObjectBaseDescription();
        Core.ObjectUtils.extend(checkedDescriptionUnderTest, CheckedStateDescriptionBehavior);
    });

    describe("_state method", function () {
        it("should add 'checked' to _properties when value is given", function () {
            checkedDescriptionUnderTest._state(CheckedState.checked);
            assert.strictEqual(checkedDescriptionUnderTest._properties["checked"], "ON");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkedDescriptionUnderTest._state(CheckedState.checked);
            assert.strictEqual(result, checkedDescriptionUnderTest);
        });

        it("should remove 'state' from _properties when value is null", function () {
            checkedDescriptionUnderTest._properties["checked"] = "ON";
            checkedDescriptionUnderTest._state(null);
            assert(!("checked" in checkedDescriptionUnderTest._properties));
        });

        it("should return the value of 'checked' from _properties when value is not given", function () {
            checkedDescriptionUnderTest._properties["checked"] = "ON";
            var result = checkedDescriptionUnderTest._state();
            assert.equal(result, CheckedState.checked);
        });
    });
});

describe("Checked Test Object", function () {
    var Core = require("leanft.sdk.core");
    var CheckedStateTOBehavior = require("../lib/checked_behavior.js").CheckedStateTOBehavior;
    var checkedTestObjectUnderTest;

    beforeEach(function () {
        checkedTestObjectUnderTest = ObjectUtils.mergeTestBehavior(CheckedStateTOBehavior);
        checkedTestObjectUnderTest._getROProperty = sinon.stub();        
    });

    afterEach(function () {
        delete checkedTestObjectUnderTest._getROProperty;
    });

    describe("_state method", function () {
        it("should execute _getROProperty 'checked'", function () {
            var promiseMock = { then: function (cb) { return cb("DIMMED"); } };
            checkedTestObjectUnderTest._getROProperty.returns(promiseMock);
            checkedTestObjectUnderTest._state();
            sinon.assert.calledOnce(checkedTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkedTestObjectUnderTest._getROProperty, "checked", sinon.match({}));
        });

        it("should return promise as CheckedState", function () {
            var promiseMock = { then: function (cb) { return cb("DIMMED"); } };
            checkedTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = checkedTestObjectUnderTest._state();
            assert.strictEqual(res, CheckedState.indeterminate);
        });
    });
});
