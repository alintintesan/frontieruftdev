// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/16/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var MouseButton = Core.MouseButton;

describe("Menu Item Tests", function () {

    var MenuItem = require("../lib/menu_item.js").MenuItem;
    var menuItemUnderTest;
    var owner;

    beforeEach(function () {
        owner = { owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub() };
        menuItemUnderTest = new MenuItem(owner, "ItemPath");
        menuItemUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    afterEach(function () {
        delete menuItemUnderTest._executeWithEventsOnItemOnError;
        delete owner._executeWithEventsOnItem;
        delete owner._executeWithEventsOnItemOnError;
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            assert.strictEqual(menuItemUnderTest._ownerMenu, owner);
            assert.strictEqual(menuItemUnderTest._path, "ItemPath");
        });        
    });

    describe("path method", function () {
        it("should return the path of the menu", function () {
            var res = menuItemUnderTest.path();
            assert.strictEqual(res, "ItemPath");
        });
    });

    describe("isChecked method", function () {
        it("should execute _isItemChecked with correct parameter", function () {
            menuItemUnderTest._ownerMenu._isItemChecked = sinon.stub();
            menuItemUnderTest.isChecked();
            sinon.assert.calledOnce(menuItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(menuItemUnderTest._executeWithEventsOnItemOnError, menuItemUnderTest._ownerMenu._isItemChecked, "ItemPath");
        });

        it("should return boolean if _isItemChecked returns boolean", function () {
            menuItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = menuItemUnderTest.isChecked();
            assert.strictEqual(res, true);
        });
    });

    describe("isEnabled method", function () {
        it("should execute _isItemEnabled with correct parameter", function () {
            menuItemUnderTest._ownerMenu._isItemEnabled = sinon.stub();
            menuItemUnderTest.isEnabled();
            sinon.assert.calledOnce(menuItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(menuItemUnderTest._executeWithEventsOnItemOnError, menuItemUnderTest._ownerMenu._isItemEnabled, "ItemPath");
        });

        it("should return boolean if _isItemEnabled returns boolean", function () {
            menuItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = menuItemUnderTest.isEnabled();
            assert.strictEqual(res, true);
        });
    });

    describe("exists method", function () {
        it("should execute _isItemExists with correct parameter", function () {
            menuItemUnderTest._ownerMenu._isItemExists = sinon.stub();
            menuItemUnderTest.exists();
            sinon.assert.calledOnce(menuItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(menuItemUnderTest._executeWithEventsOnItemOnError, menuItemUnderTest._ownerMenu._isItemExists, "ItemPath");
        });

        it("should return boolean if _isItemExists returns boolean", function () {
            menuItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = menuItemUnderTest.exists();
            assert.strictEqual(res, true);
        });
    });

    describe("hasSubMenu method", function () {
        it("should execute _itemHasSubMenu with correct parameter", function () {
            menuItemUnderTest._ownerMenu._itemHasSubMenu = sinon.stub();
            menuItemUnderTest.hasSubMenu();
            sinon.assert.calledOnce(menuItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(menuItemUnderTest._executeWithEventsOnItemOnError, menuItemUnderTest._ownerMenu._itemHasSubMenu, "ItemPath");
        });

        it("should return boolean if _itemHasSubMenu returns boolean", function () {
            menuItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = menuItemUnderTest.hasSubMenu();
            assert.strictEqual(res, true);
        });
    });

    describe("index method", function () {
        it("should execute _getItemIndex with correct parameter", function () {
            menuItemUnderTest._ownerMenu._getItemIndex = sinon.stub();
            menuItemUnderTest.index();
            sinon.assert.calledOnce(menuItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(menuItemUnderTest._executeWithEventsOnItemOnError, menuItemUnderTest._ownerMenu._getItemIndex, "ItemPath");
        });

        it("should return number if _getItemIndex returns number", function () {
            menuItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(10);;
            var res = menuItemUnderTest.index();
            assert.strictEqual(res, 10);
        });
    });

    describe("label method", function () {
        it("should execute _getItemLabel with correct parameter", function () {
            menuItemUnderTest._ownerMenu._getItemLabel = sinon.stub();
            menuItemUnderTest.label();
            sinon.assert.calledOnce(menuItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(menuItemUnderTest._executeWithEventsOnItemOnError, menuItemUnderTest._ownerMenu._getItemLabel, "ItemPath");
        });

        it("should return string if _getItemLabel returns string", function () {
            menuItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns("The Label");;
            var res = menuItemUnderTest.label();
            assert.strictEqual(res, "The Label");
        });
    });

    describe("subMenuCount method", function () {
        it("should execute _getItemSubMenuCount with correct parameter", function () {
            menuItemUnderTest._ownerMenu._getItemSubMenuCount = sinon.stub();
            menuItemUnderTest.subMenuCount();
            sinon.assert.calledOnce(menuItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(menuItemUnderTest._executeWithEventsOnItemOnError, menuItemUnderTest._ownerMenu._getItemSubMenuCount, "ItemPath");
        });

        it("should return number if _getItemSubMenuCount returns number", function () {
            menuItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(10);;
            var res = menuItemUnderTest.subMenuCount();
            assert.strictEqual(res, 10);
        });
    });    
});
