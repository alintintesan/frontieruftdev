// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/17/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var Position = Core.Position;
var CheckedState = Core.CheckedState;

describe("CheckBox Description", function () {

    var CheckBox = require("../lib/check_box.js").CheckBox;
    var checkboxDescriptionUnderTest;

    beforeEach(function () {
        checkboxDescriptionUnderTest = CheckBox();
    });

    describe("state method", function () {
        it("should add 'checked' to _properties when value is given", function () {
            checkboxDescriptionUnderTest.state(CheckedState.checked);
            assert.strictEqual(checkboxDescriptionUnderTest._properties["checked"], "ON");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkboxDescriptionUnderTest.state(CheckedState.checked);
            assert.strictEqual(result, checkboxDescriptionUnderTest);
        });

        it("should remove 'state' from _properties when value is null", function () {
            checkboxDescriptionUnderTest._properties["checked"] = "ON";
            checkboxDescriptionUnderTest.state(null);
            assert(!("checked" in checkboxDescriptionUnderTest._properties));
        });

        it("should return the value of 'checked' from _properties when value is not given", function () {
            checkboxDescriptionUnderTest._properties["checked"] = "ON";
            var result = checkboxDescriptionUnderTest.state();
            assert.equal(result, CheckedState.checked);
        });
    });
});

describe("Check Box Object", function () {
    var Core = require("leanft.sdk.core");
    var CheckBoxTO = require("../lib/check_box.js").CheckBoxTO;
    var checkboxTestObjectUnderTest;

    beforeEach(function () {
        checkboxTestObjectUnderTest = new CheckBoxTO();
        sinon.stub(checkboxTestObjectUnderTest, "_getROProperty");
        sinon.stub(checkboxTestObjectUnderTest, "_executeWithEvents");
    });

    afterEach(function () {
        checkboxTestObjectUnderTest._getROProperty.restore();
        checkboxTestObjectUnderTest._executeWithEvents.restore();
    });

    describe("state method", function () {
        it("should execute _getROProperty 'checked'", function () {
            var promiseMock = { then: function (cb) { return cb("DIMMED"); } };
            checkboxTestObjectUnderTest._getROProperty.returns(promiseMock);
            checkboxTestObjectUnderTest.state();
            sinon.assert.calledOnce(checkboxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkboxTestObjectUnderTest._getROProperty, "checked", sinon.match({}));
        });

        it("should return promise as CheckedState", function () {
            var promiseMock = { then: function (cb) { return cb("DIMMED"); } };
            checkboxTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = checkboxTestObjectUnderTest.state();
            assert.strictEqual(res, CheckedState.indeterminate);
        });
    });

    describe("setState method", function () {
        it("should throw error if undefined is passed", function () {
            assert.throws(function () {
                checkboxTestObjectUnderTest.setState();
            });
        });

        it("should throw error if null passed", function () {
            assert.throws(function () {
                checkboxTestObjectUnderTest.setState(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            checkboxTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = checkboxTestObjectUnderTest.setState(CheckedState.checked);
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments if the input is CheckedState", function () {
            checkboxTestObjectUnderTest.setState(CheckedState.checked);
            sinon.assert.calledOnce(checkboxTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(checkboxTestObjectUnderTest._executeWithEvents, sinon.match({ 0: CheckedState.checked }), "Set", "ON");
        });

        it("should call _executeWithEvents and pass it the correct arguments if the input is string", function () {
            checkboxTestObjectUnderTest.setState("checked");
            sinon.assert.calledOnce(checkboxTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(checkboxTestObjectUnderTest._executeWithEvents, sinon.match({ 0: "checked" }), "Set", "ON");
        });
    });    
});
