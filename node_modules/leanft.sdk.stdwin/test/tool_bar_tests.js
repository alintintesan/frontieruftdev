// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/16/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("ToolBar Test Object", function () {

    var ToolBarTO = require("../lib/tool_bar.js").ToolBarTO;
    var ToolBarButton = require("../lib/toolbar_button.js").ToolBarButton;
    var toolBarTOUnderTest;

    var removeExecutorMethods = function(array){
        array.map(function(item){
            delete item._executeWithEventsOnItem;
            delete item._executeWithEventsOnItemOnError;
        });
        return array;
    };

    beforeEach(function () {
        toolBarTOUnderTest = new ToolBarTO();
        sinon.stub(toolBarTOUnderTest, "_executeWithEvents");
        sinon.stub(toolBarTOUnderTest, "_getROPropertiesWithoutEvents");
        sinon.stub(toolBarTOUnderTest, "_getROProperty");
        sinon.stub(toolBarTOUnderTest, "_executeWithEventsOnError");
        sinon.stub(toolBarTOUnderTest, "_executeNotWrapped");
    });

    afterEach(function () {
        
    });

    describe("buttons method", function () {
        it("should query the properties 'all items', 'items count'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2", 2]);
                }
            };
            toolBarTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            toolBarTOUnderTest.buttons();
            sinon.assert.calledOnce(toolBarTOUnderTest._getROPropertiesWithoutEvents);
            sinon.assert.calledWith(toolBarTOUnderTest._getROPropertiesWithoutEvents, "all items", "items count");
        });

        it("should return empty list if no item returns from _getROPropertiesWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["", 0]);
                }
            };

            toolBarTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            var res = toolBarTOUnderTest.buttons();
            assert.deepEqual(res, []);
        });

        it("should return a list  with buttons if buttons returns from _getROPropertiesWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2", 2]);
                }
            };

            toolBarTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            var res = removeExecutorMethods(toolBarTOUnderTest.buttons());
            assert.deepEqual(res, removeExecutorMethods([new ToolBarButton(toolBarTOUnderTest, 1, "Item1"), new ToolBarButton(toolBarTOUnderTest, 2, "Item2")]));
        });
    });

    describe("selectedButtons method", function () {
        it("should query the property 'selection'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };
            toolBarTOUnderTest._getROProperty.returns(promiseMock);
            toolBarTOUnderTest.selectedButtons();
            sinon.assert.calledOnce(toolBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(toolBarTOUnderTest._getROProperty, "selection", sinon.match({}));
        });

        it("should return empty list if null returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb();
                }
            };

            toolBarTOUnderTest._getROProperty.returns(promiseMock);
            var res = toolBarTOUnderTest.selectedButtons();
            assert.deepEqual(res, []);
        });

        it("should return empty list if no item returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            toolBarTOUnderTest._getROProperty.returns(promiseMock);
            var res = toolBarTOUnderTest.selectedButtons();
            assert.deepEqual(res, []);
        });

        it("should return a list  with buttons if buttons returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            toolBarTOUnderTest._getROProperty.returns(promiseMock);
            var res = removeExecutorMethods(toolBarTOUnderTest.selectedButtons());
            assert.deepEqual(res, removeExecutorMethods([new ToolBarButton(toolBarTOUnderTest, "Item1", "Item1"), new ToolBarButton(toolBarTOUnderTest, "Item2", "Item2")]));
        });
    });

    describe("getButton method", function () {
        it("should throw error if text is undefined", function () {
            assert.throws(function () {
                toolBarTOUnderTest.getButton();
            });
        });

        it("should throw error if text is null", function () {
            assert.throws(function () {
                toolBarTOUnderTest.getButton(null);
            });
        });

        it("should return the ToolBarButton", function () {
            var res = toolBarTOUnderTest.getButton("Item1");
            assert.strictEqual(res._identifier, "Item1");
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerToolBar, toolBarTOUnderTest);
        });
    });

    describe("_pressItem method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._pressItem(10, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Press' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._pressItem(10, 1);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10, 1: 1 }), "Press", 10, 1);
        });

        it("should execute _executeNotWrapped 'Press' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._pressItem("Item1", 2);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1", 1: 2 }), "Press", "Item1", 2);
        });
    });

    describe("_isItemChecked method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._isItemChecked(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._isItemChecked(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "checked");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._isItemChecked("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "checked");
        });
    });

    describe("_hasItemEllipses method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._hasItemEllipses(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._hasItemEllipses(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "ellipses");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._hasItemEllipses("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "ellipses");
        });
    });

    describe("_isItemEnabled method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._isItemEnabled(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._isItemEnabled(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "enabled");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._isItemEnabled("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "enabled");
        });
    });

    describe("_isItemHighlighted method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._isItemHighlighted(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._isItemHighlighted(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "highlighted");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._isItemHighlighted("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "highlighted");
        });
    });

    describe("_isItemHot method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._isItemHot(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._isItemHot(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "hot");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._isItemHot("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "hot");
        });
    });

    describe("_isItemIndeterminate method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._isItemIndeterminate(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._isItemIndeterminate(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "indeterminate");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._isItemIndeterminate("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "indeterminate");
        });
    });

    describe("_getItemIndex method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._getItemIndex(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._getItemIndex(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "index");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._getItemIndex("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "index");
        });
    });

    describe("_getItemName method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._getItemName(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._getItemName(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "name");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._getItemName("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "name");
        });
    });

    describe("_isItemMarked method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._isItemMarked(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._isItemMarked(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "marked");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._isItemMarked("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "marked");
        });
    });

    describe("_isItemPressed method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._isItemPressed(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._isItemPressed(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "pressed");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._isItemPressed("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "pressed");
        });
    });

    describe("_isItemSelected method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._isItemSelected(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._isItemSelected(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "selected");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._isItemSelected("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "selected");
        });
    });

    describe("_isItemSelected method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._isItemSelected(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._isItemSelected(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "selected");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._isItemSelected("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "selected");
        });
    });

    describe("_isItemWrap method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._isItemWrap(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._isItemWrap(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "wrap");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._isItemWrap("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "wrap");
        });
    });

    describe("_showDropDown method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._showDropDown(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'ShowDropdown' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._showDropDown(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "ShowDropdown", 10);
        });

        it("should execute _executeNotWrapped 'ShowDropdown' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._showDropDown("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "ShowDropdown", "Item1");
        });
    });

    describe("_createItem method", function () {
        it("should return the ToolBarButton with correct values", function () {
            var res = toolBarTOUnderTest._createItem(10, "Item1");
            assert.strictEqual(res._identifier, 10);
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerToolBar, toolBarTOUnderTest);
        });
    });
});
