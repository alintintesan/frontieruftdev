// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/15/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("List View Item", function () {

    var ListViewItem = require("../lib/listview_item.js").ListViewItem;
    var listViewItemUnderTest;
    var owner;

    beforeEach(function () {
        owner = { owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub() };
        listViewItemUnderTest = new ListViewItem(owner, 10, "TextRepresentation");
        listViewItemUnderTest._executeWithEventsOnItem = sinon.stub();
        listViewItemUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    afterEach(function () {
        delete listViewItemUnderTest._executeWithEventsOnItem;
        delete listViewItemUnderTest._executeWithEventsOnItemOnError;
        delete owner._executeWithEventsOnItem;
        delete owner._executeWithEventsOnItemOnError;
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            assert.strictEqual(listViewItemUnderTest._ownerListViewBox, owner);
            assert.strictEqual(listViewItemUnderTest._identifier, 10);
            assert.strictEqual(listViewItemUnderTest._textRepresentation, "TextRepresentation");
        });        
    });

    describe("_getIdentifier method", function () {
        it("should return correct values", function () {
            var res = listViewItemUnderTest._getIdentifier();
            assert.strictEqual(res, 10);            
        });
    });

    describe("_getTextRepresentation method", function () {
        it("should return correct values", function () {
            var res = listViewItemUnderTest._getTextRepresentation();
            assert.strictEqual(res, "TextRepresentation");
        });
    });

    describe("text method", function () {
        it("should execute _getItemText with correct parameter", function () {
            listViewItemUnderTest._ownerListViewBox._getItemText = sinon.stub();
            listViewItemUnderTest.text();
            sinon.assert.calledOnce(listViewItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(listViewItemUnderTest._executeWithEventsOnItemOnError, listViewItemUnderTest._ownerListViewBox._getItemText, 10);
        });

        it("should return string if _getItemText returns string", function () {
            listViewItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns("value");;
            var res = listViewItemUnderTest.text();
            assert.strictEqual(res, "value");
        });
    });

    describe("isFocused method", function () {
        it("should execute _isItemFocused with correct parameter", function () {
            listViewItemUnderTest._ownerListViewBox._isItemFocused = sinon.stub();
            listViewItemUnderTest.isFocused();
            sinon.assert.calledOnce(listViewItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(listViewItemUnderTest._executeWithEventsOnItemOnError, listViewItemUnderTest._ownerListViewBox._isItemFocused, 10);
        });

        it("should return boolean if _isItemFocused returns boolean", function () {
            listViewItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = listViewItemUnderTest.isFocused();
            assert.strictEqual(res, true);
        });
    });

    describe("isSelected method", function () {
        it("should execute isItemSelected with correct parameter", function () {
            listViewItemUnderTest._ownerListViewBox._isItemSelected = sinon.stub();
            listViewItemUnderTest.isSelected();
            sinon.assert.calledOnce(listViewItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(listViewItemUnderTest._executeWithEventsOnItemOnError, listViewItemUnderTest._ownerListViewBox._isItemSelected, 10);
        });

        it("should return boolean if _isItemSelected returns boolean", function () {
            listViewItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = listViewItemUnderTest.isSelected();
            assert.strictEqual(res, true);
        });
    });

    describe("state method", function () {
        it("should execute _getItemState with correct parameter", function () {
            listViewItemUnderTest._ownerListViewBox._getItemState = sinon.stub();
            listViewItemUnderTest.state();
            sinon.assert.calledOnce(listViewItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(listViewItemUnderTest._executeWithEventsOnItemOnError, listViewItemUnderTest._ownerListViewBox._getItemState, 10);
        });

        it("should return number if _isItemSelected returns number", function () {
            listViewItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(2);;
            var res = listViewItemUnderTest.state();
            assert.strictEqual(res, 2);
        });
    });

    describe("getSubItemText method", function () {
        it("should throw error if indexOrName is undefined", function () {
            assert.throws(function () {
                listViewItemUnderTest.getSubItemText();
            });
        });

        it("should throw error if indexOrName is null", function () {
            assert.throws(function () {
                listViewItemUnderTest.getSubItemText(null);
            });
        });

        it("should execute _getSubItemText with correct parameter if indexOrName type is number", function () {
            listViewItemUnderTest._ownerListViewBox._getSubItemText = sinon.stub();
            listViewItemUnderTest.getSubItemText(10);
            sinon.assert.calledOnce(listViewItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(listViewItemUnderTest._executeWithEventsOnItemOnError, listViewItemUnderTest._ownerListViewBox._getSubItemText, 10, 10);
        });

        it("should execute _getSubItemText with correct parameter if indexOrName type is string", function () {
            listViewItemUnderTest._ownerListViewBox._getSubItemText = sinon.stub();
            listViewItemUnderTest.getSubItemText("column");
            sinon.assert.calledOnce(listViewItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(listViewItemUnderTest._executeWithEventsOnItemOnError, listViewItemUnderTest._ownerListViewBox._getSubItemText, 10, "column");
        });
    });

    describe("setItemState method", function () {
        it("should throw error if state is undefined", function () {
            assert.throws(function () {
                listViewItemUnderTest.setItemState();
            });
        });

        it("should throw error if state is null", function () {
            assert.throws(function () {
                listViewItemUnderTest.setItemState(null);
            });
        });

        it("should execute _setItemState with correct parameter if state type is number", function () {
            listViewItemUnderTest._ownerListViewBox._setItemState = sinon.stub();
            listViewItemUnderTest.setItemState(2);
            sinon.assert.calledOnce(listViewItemUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(listViewItemUnderTest._executeWithEventsOnItem, listViewItemUnderTest._ownerListViewBox._setItemState, 10, 2);
        });

        it("should execute _setItemState with correct parameter if state type is string", function () {
            listViewItemUnderTest._ownerListViewBox._setItemState = sinon.stub();
            listViewItemUnderTest.setItemState("2");
            sinon.assert.calledOnce(listViewItemUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(listViewItemUnderTest._executeWithEventsOnItem, listViewItemUnderTest._ownerListViewBox._setItemState, 10, 2);
        });
    });

    describe("clickState method", function () {
        it("should execute _setItemState with correct parameter", function () {
            listViewItemUnderTest._ownerListViewBox._setItemState = sinon.stub();
            listViewItemUnderTest.clickState();
            sinon.assert.calledOnce(listViewItemUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(listViewItemUnderTest._executeWithEventsOnItem, listViewItemUnderTest._ownerListViewBox._setItemState, 10, -1);
        });
    });

    describe("doubleClickState method", function () {
        it("should execute _setItemState with correct parameter", function () {
            listViewItemUnderTest._ownerListViewBox._setItemState = sinon.stub();
            listViewItemUnderTest.doubleClickState();
            sinon.assert.calledOnce(listViewItemUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(listViewItemUnderTest._executeWithEventsOnItem, listViewItemUnderTest._ownerListViewBox._setItemState, 10, -2);
        });
    });

    describe("enableLabelEditing method", function () {
        it("should execute _enableLabelEditingItem with correct parameter", function () {
            listViewItemUnderTest._ownerListViewBox._enableLabelEditingItem = sinon.stub();
            listViewItemUnderTest.enableLabelEditing();
            sinon.assert.calledOnce(listViewItemUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(listViewItemUnderTest._executeWithEventsOnItem, listViewItemUnderTest._ownerListViewBox._enableLabelEditingItem, 10);
        });
    });

    describe("_getOwnerTO method", function () {
        it("should return the ListView object", function () {
            var res = listViewItemUnderTest._getOwnerTO();
            assert.deepEqual(res, owner);            
        });
    });
});
