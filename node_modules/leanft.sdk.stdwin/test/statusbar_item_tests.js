// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/22/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("Status Bar Item", function () {

    var StatusBarItem = require("../lib/statusbar_item.js").StatusBarItem;
    var statusBarItemUnderTest;
    var owner;

    beforeEach(function () {
        owner = { owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub() };
        statusBarItemUnderTest = new StatusBarItem(owner, 10, "TextRepresentation");
        statusBarItemUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    afterEach(function () {
        delete statusBarItemUnderTest._executeWithEventsOnItemOnError;
        delete owner._executeWithEventsOnItem;
        delete owner._executeWithEventsOnItemOnError;
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            assert.strictEqual(statusBarItemUnderTest._ownerStatusBar, owner);
            assert.strictEqual(statusBarItemUnderTest._identifier, 10);
            assert.strictEqual(statusBarItemUnderTest._textRepresentation, "TextRepresentation");
        });
    });

    describe("_getIdentifier method", function () {
        it("should return correct values", function () {
            var res = statusBarItemUnderTest._getIdentifier();
            assert.strictEqual(res, 10);
        });
    });

    describe("_getTextRepresentation method", function () {
        it("should return correct values", function () {
            var res = statusBarItemUnderTest._getTextRepresentation();
            assert.strictEqual(res, "TextRepresentation");
        });
    });

    describe("text method", function () {
        it("should execute _getItemText with correct parameter", function () {
            statusBarItemUnderTest._ownerStatusBar._getItemText = sinon.stub();
            statusBarItemUnderTest.text();
            sinon.assert.calledOnce(statusBarItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(statusBarItemUnderTest._executeWithEventsOnItemOnError, statusBarItemUnderTest._ownerStatusBar._getItemText, 10);
        });

        it("should return string if _getItemText returns string", function () {
            statusBarItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns("Status");;
            var res = statusBarItemUnderTest.text();
            assert.strictEqual(res, "Status");
        });
    });

    describe("width method", function () {
        it("should execute _getItemWidth with correct parameter", function () {
            statusBarItemUnderTest._ownerStatusBar._getItemWidth = sinon.stub();
            statusBarItemUnderTest.width();
            sinon.assert.calledOnce(statusBarItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(statusBarItemUnderTest._executeWithEventsOnItemOnError, statusBarItemUnderTest._ownerStatusBar._getItemWidth, 10);
        });

        it("should return number if _getItemWidth returns number", function () {
            statusBarItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(10);;
            var res = statusBarItemUnderTest.width();
            assert.strictEqual(res, 10);
        });
    });

    describe("height method", function () {
        it("should execute _getItemHeight with correct parameter", function () {
            statusBarItemUnderTest._ownerStatusBar._getItemHeight = sinon.stub();
            statusBarItemUnderTest.height();
            sinon.assert.calledOnce(statusBarItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(statusBarItemUnderTest._executeWithEventsOnItemOnError, statusBarItemUnderTest._ownerStatusBar._getItemHeight, 10);
        });

        it("should return number if _getItemHeight returns number", function () {
            statusBarItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(10);;
            var res = statusBarItemUnderTest.height();
            assert.strictEqual(res, 10);
        });
    });

    describe("x method", function () {
        it("should execute _getItemX with correct parameter", function () {
            statusBarItemUnderTest._ownerStatusBar._getItemX = sinon.stub();
            statusBarItemUnderTest.x();
            sinon.assert.calledOnce(statusBarItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(statusBarItemUnderTest._executeWithEventsOnItemOnError, statusBarItemUnderTest._ownerStatusBar._getItemX, 10);
        });

        it("should return number if _getItemX returns number", function () {
            statusBarItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(10);;
            var res = statusBarItemUnderTest.x();
            assert.strictEqual(res, 10);
        });
    });

    describe("y method", function () {
        it("should execute _getItemY with correct parameter", function () {
            statusBarItemUnderTest._ownerStatusBar._getItemY = sinon.stub();
            statusBarItemUnderTest.y();
            sinon.assert.calledOnce(statusBarItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(statusBarItemUnderTest._executeWithEventsOnItemOnError, statusBarItemUnderTest._ownerStatusBar._getItemY, 10);
        });

        it("should return number if _getItemY returns number", function () {
            statusBarItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(10);;
            var res = statusBarItemUnderTest.y();
            assert.strictEqual(res, 10);
        });
    });
});