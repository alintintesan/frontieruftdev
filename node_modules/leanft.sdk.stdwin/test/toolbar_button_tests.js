// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/16/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var MouseButton = Core.MouseButton;

describe("ToolBarButton", function () {

    var ToolBarButton = require("../lib/toolbar_button.js").ToolBarButton;
    var toolBarButtonUnderTest;

    beforeEach(function () {
        var owner = { owner: "Owner", _executeWithEventsOnItem : sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub() };
        toolBarButtonUnderTest = new ToolBarButton(owner, 10, "TextRepresentation");
        toolBarButtonUnderTest._executeWithEventsOnItem = sinon.stub();
        toolBarButtonUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    afterEach(function () {        
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            var owner = { owner: "Owner", _executeWithEventsOnItem : sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub() };
            var parent = owner;
            toolBarButtonUnderTest = new ToolBarButton(parent, 10, "TextRepresentation");
            assert.strictEqual(toolBarButtonUnderTest._ownerToolBar, parent);
            assert.strictEqual(toolBarButtonUnderTest._identifier, 10);
            assert.strictEqual(toolBarButtonUnderTest._textRepresentation, "TextRepresentation");
        });        
    });

    describe("_getIdentifier method", function () {
        it("should return correct values", function () {
            var res = toolBarButtonUnderTest._getIdentifier();
            assert.strictEqual(res, 10);            
        });
    });

    describe("_getTextRepresentation method", function () {
        it("should return correct values", function () {
            var res = toolBarButtonUnderTest._getTextRepresentation();
            assert.strictEqual(res, "TextRepresentation");
        });
    });

    describe("isChecked method", function () {
        it("should execute _isItemChecked with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._isItemChecked = sinon.stub();
            toolBarButtonUnderTest.isChecked();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._isItemChecked, 10);
        });

        it("should return boolean if _isItemChecked returns boolean", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = toolBarButtonUnderTest.isChecked();
            assert.strictEqual(res, true);
        });
    });

    describe("hasEllipses method", function () {
        it("should execute _hasItemEllipses with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._hasItemEllipses = sinon.stub();
            toolBarButtonUnderTest.hasEllipses();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._hasItemEllipses, 10);
        });

        it("should return boolean if _hasItemEllipses returns boolean", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = toolBarButtonUnderTest.hasEllipses();
            assert.strictEqual(res, true);
        });
    });

    describe("isEnabled method", function () {
        it("should execute _isItemEnabled with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._isItemEnabled = sinon.stub();
            toolBarButtonUnderTest.isEnabled();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._isItemEnabled, 10);
        });

        it("should return boolean if _isItemEnabled returns boolean", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = toolBarButtonUnderTest.isEnabled();
            assert.strictEqual(res, true);
        });
    });

    describe("isHighlighted method", function () {
        it("should execute _isItemHighlighted with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._isItemHighlighted = sinon.stub();
            toolBarButtonUnderTest.isHighlighted();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._isItemHighlighted, 10);
        });

        it("should return boolean if _isItemHighlighted returns boolean", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = toolBarButtonUnderTest.isHighlighted();
            assert.strictEqual(res, true);
        });
    });

    describe("isHot method", function () {
        it("should execute _isItemHot with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._isItemHot = sinon.stub();
            toolBarButtonUnderTest.isHot();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._isItemHot, 10);
        });

        it("should return boolean if _isItemHot returns boolean", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = toolBarButtonUnderTest.isHot();
            assert.strictEqual(res, true);
        });
    });

    describe("isIndeterminate method", function () {
        it("should execute _isItemIndeterminate with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._isItemIndeterminate = sinon.stub();
            toolBarButtonUnderTest.isIndeterminate();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._isItemIndeterminate, 10);
        });

        it("should return boolean if _isItemIndeterminate returns boolean", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = toolBarButtonUnderTest.isIndeterminate();
            assert.strictEqual(res, true);
        });
    });

    describe("index method", function () {
        it("should execute _getItemIndex with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._getItemIndex = sinon.stub();
            toolBarButtonUnderTest.index();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._getItemIndex, 10);
        });

        it("should return number if _getItemIndex returns number", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(10);;
            var res = toolBarButtonUnderTest.index();
            assert.strictEqual(res, 10);
        });
    });

    describe("isMarked method", function () {
        it("should execute _isItemMarked with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._isItemMarked = sinon.stub();
            toolBarButtonUnderTest.isMarked();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._isItemMarked, 10);
        });

        it("should return boolean if _isItemMarked returns boolean", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = toolBarButtonUnderTest.isMarked();
            assert.strictEqual(res, true);
        });
    });

    describe("name method", function () {
        it("should execute _getItemName with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._getItemName = sinon.stub();
            toolBarButtonUnderTest.name();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._getItemName, 10);
        });

        it("should return string if _getItemName returns string", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns("The Name");;
            var res = toolBarButtonUnderTest.name();
            assert.strictEqual(res, "The Name");
        });
    });

    describe("isPressed method", function () {
        it("should execute _isItemPressed with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._isItemPressed = sinon.stub();
            toolBarButtonUnderTest.isPressed();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._isItemPressed, 10);
        });

        it("should return boolean if _isItemPressed returns boolean", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = toolBarButtonUnderTest.isPressed();
            assert.strictEqual(res, true);
        });
    });

    describe("isSelected method", function () {
        it("should execute _isItemSelected with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._isItemSelected = sinon.stub();
            toolBarButtonUnderTest.isSelected();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._isItemSelected, 10);
        });

        it("should return boolean if _isItemSelected returns boolean", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = toolBarButtonUnderTest.isSelected();
            assert.strictEqual(res, true);
        });
    });

    describe("isWrap method", function () {
        it("should execute _isItemWrap with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._isItemWrap = sinon.stub();
            toolBarButtonUnderTest.isWrap();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItemOnError, toolBarButtonUnderTest._ownerToolBar._isItemWrap, 10);
        });

        it("should return boolean if _isItemWrap returns boolean", function () {
            toolBarButtonUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = toolBarButtonUnderTest.isWrap();
            assert.strictEqual(res, true);
        });
    });

    describe("showDropdown method", function () {
        it("should execute _showDropdown with correct parameter", function () {
            toolBarButtonUnderTest._ownerToolBar._showDropdown = sinon.stub();
            toolBarButtonUnderTest.showDropdown();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItem, toolBarButtonUnderTest._ownerToolBar._showDropdown, 10);
        });

        it("should return the promise as it is", function () {
            var promiseMock = {};
            toolBarButtonUnderTest._executeWithEventsOnItem = sinon.stub().returns(promiseMock);
            var res = toolBarButtonUnderTest.showDropdown();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("press method", function () {
        it("should execute _pressItem with MouseButton.left if button is empty", function () {
            toolBarButtonUnderTest._ownerToolBar._pressItem = sinon.stub();
            toolBarButtonUnderTest.press();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItem, toolBarButtonUnderTest._ownerToolBar._pressItem, 10, MouseButton._convert(MouseButton.left));
        });

        it("should execute _pressItem with MouseButton.left if button is null", function () {
            toolBarButtonUnderTest._ownerToolBar._pressItem = sinon.stub();
            toolBarButtonUnderTest.press(null);
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItem, toolBarButtonUnderTest._ownerToolBar._pressItem, 10, MouseButton._convert(MouseButton.left));
        });

        it("should execute _pressItem with MouseButton.left if button is empty", function () {
            toolBarButtonUnderTest._ownerToolBar._pressItem = sinon.stub();
            toolBarButtonUnderTest.press();
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItem, toolBarButtonUnderTest._ownerToolBar._pressItem, 10, MouseButton._convert(MouseButton.left));
        });

        it("should execute _pressItem with correct mouse button if button is defined", function () {
            toolBarButtonUnderTest._ownerToolBar._pressItem = sinon.stub();
            toolBarButtonUnderTest.press(MouseButton.right);
            sinon.assert.calledOnce(toolBarButtonUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(toolBarButtonUnderTest._executeWithEventsOnItem, toolBarButtonUnderTest._ownerToolBar._pressItem, 10, MouseButton._convert(MouseButton.right));
        });

        it("should return the promise as it is", function () {
            var promiseMock = {};
            toolBarButtonUnderTest._executeWithEventsOnItem = sinon.stub().returns(promiseMock);
            var res = toolBarButtonUnderTest.press();
            assert.strictEqual(res, promiseMock);
        });
    });
});
