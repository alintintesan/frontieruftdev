// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/07/2016.
 */

var Core = require("leanft.sdk.core");
var TestObjectBase = Core.TestObjectBase;
var Utils = require("leanft.sdk.core").ObjectUtils;
var DescriptionBase = Core.DescriptionBase;
var Convert = Core.Convert;
var UIObjectBaseBehavior = Core.UIObjectBaseBehavior;
var LocationDescriptionBehavior = Core.LocationDescriptionBehavior;
var UIObjectDescriptionBaseBehavior = Core.UIObjectDescriptionBaseBehavior;

/**
 * StdWin namespace
 * @namespace StdWin
 */

/**
 * UiObjectBaseDescriptionBehavior - the description for a UiObjectBase object
 * @memberof StdWin
 * @ignore
 */
var UiObjectBaseDescriptionBehavior = {
    /**
     * The object's native class.
     * @param {string} [nativeClass] When provided, this method acts as a setter and sets the nativeClass value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored nativeClass value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof StdWin.UiObjectBaseDescription#
     */
    nativeClass: function (nativeClass) {
        return this._simplePropertyHandler("nativeclass", nativeClass);
    },

    /**
     * The object's window ID.
     * @param {number} [windowId] When provided, this method acts as a setter and sets the windowId value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored windowId value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof StdWin.UiObjectBaseDescription#
     */
    windowId: function (windowId) {
        return this._propertyHandler("window id", windowId, Convert.toNumber);
    },

    /**
     * The object's attached text.
     * @param {string} [attachedText] When provided, this method acts as a setter and sets the attachedText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored attachedText value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof StdWin.UiObjectBaseDescription#
     */
    attachedText: function (attachedText) {
        return this._simplePropertyHandler("Attached text", attachedText);
    },

    /**
     * The permanent part of the MFC window class.
     * @param {string} [windowClassRegExp] When provided, this method acts as a setter and sets the windowClassRegExp value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored windowClassRegExp value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof StdWin.UiObjectBaseDescription#
     */
    windowClassRegExp: function (windowClassRegExp) {
        return this._simplePropertyHandler("regexpwndclass", windowClassRegExp);
    },

    /**
     * The extended window style of the object. The possible value is in the enum {@link WindowExtendedStyles}
     * @param {WindowExtendedStyles} [windowExtendedStyle] When provided, this method acts as a setter and sets the windowExtendedStyle value.
     * @returns {WindowExtendedStyles | Description} If no parameter is provided, the method acts as a getter and returns the current stored windowExtendedStyle value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof StdWin.UiObjectBaseDescription#
     */
    windowExtendedStyle: function (windowExtendedStyle) {
        return this._propertyHandler("WindowExtendedStyle", windowExtendedStyle, Convert.toNumber);
    },

    /**
     * The window style of the object. The possible value is in the enum {@link WindowStyles}
     * @param {WindowStyles} [windowStyle] When provided, this method acts as a setter and sets the windowStyle value.
     * @returns {WindowStyles | Description} If no parameter is provided, the method acts as a getter and returns the current stored windowStyle value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof StdWin.UiObjectBaseDescription#
     */
    windowStyle: function (windowStyle) {
        return this._propertyHandler("WindowStyle", windowStyle, Convert.toNumber);
    }
};

/**
 * UiObjectBaseDescription - the base description for all StdWin elements
 * @class UiObjectBaseDescription
 * @extends DescriptionBase
 * @mixes LocationDescriptionBehavior
 * @mixes UIObjectDescriptionBaseBehavior
 * @memberof StdWin
 * @ignore
 */
function UiObjectBaseDescription(leanFTType) {
    this._init({
        technology: "Standard Windows",
        leanftType: leanFTType
    });
    Utils.extend(this, LocationDescriptionBehavior);
    Utils.extend(this, UIObjectDescriptionBaseBehavior);
    Utils.extend(this, UiObjectBaseDescriptionBehavior);

    //init grouped properties
    this.location({});
    this.absoluteLocation({});
    this.size({});

    //TODO: add the _indexType key to DescriptionBase and handle it correctly in the _toJSON function.
    this._indexType = "location";
}



/**
 * @ignore
 */
Utils.inherit(UiObjectBaseDescription, DescriptionBase, {
    /**
     * The object's accessible name.
     * @param {string} [accessibleName] When provided, this method acts as a setter and sets the accessibleName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored accessibleName value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof StdWin.UiObjectBaseDescription#
     */
    accessibleName: function (accessibleName) {
        return this._simplePropertyHandler("acc_name", accessibleName);
    }
});

/**
 * @class UiObjectBaseTO
 * @param nativeClass
 * @param session
 * @param description
 * @constructor
 * @extends TestObjectBase
 * @mixes LocationInfoProvider._properties
 * @mixes ClickBehavior._methods
 * @mixes DoubleClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes SendKeysBehavior._methods
 * @mixes UiObjectBaseTOBehavior._properties
 * @mixes UiObjectAccessibleNameTOBehavior._properties
 * @mixes WaitUntilVisibleBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @abstract
 * @memberof StdWin
 * @ignore
 */
function UiObjectBaseTO(nativeclass, session, description) {
    this._init(nativeclass, session, description);
    this._mergeBehavior(UIObjectBaseBehavior);
    this._mergeBehavior(UiObjectBaseTOBehavior);
    this._mergeBehavior(UiObjectAccessibleNameTOBehavior);
}

var UiObjectAccessibleNameTOBehavior = {
    /**
     * @ignore
     * @memberof StdWin.UiObjectBaseTOBehavior
     */
    _properties: {
        /**
         * Returns the object's accessible name.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's accessible name.
         * @memberof StdWin.UIBaseTestObject#
         */
        accessibleName: {
            wiredName: "acc_name"
        }
    }
};

var UiObjectBaseTOBehavior = {
    /**
     * @ignore
     * @memberof StdWin.UiObjectBaseTOBehavior
     */
    _properties: {
        /**
         * Returns the object's attached text.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's attached text.
         * @memberof StdWin.UIBaseTestObject#
         */
        attachedText: {
            wiredName: "attached text"
        },

        /**
         * Returns the object's text.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's text.
         * @memberof StdWin.UIBaseTestObject#
         */
        text: {

        },

        /**
         * Returns the object's window extended style.
         * @function
         * @returns {Promise<WindowExtendedStyle>} a promise that is fulfilled with the object's window extended style. The possible value is in the enum {@link WindowExtendedStyles}
         * @memberof StdWin.UIBaseTestObject#
         */
        windowExtendedStyle: {
            wiredName: "WindowExtendedStyle"
        },

        /**
         * Returns the object's window style.
         * @function
         * @returns {Promise<WindowStyles>} a promise that is fulfilled with the object's window style. The possible value is in the enum {@link WindowStyles}
         * @memberof StdWin.UIBaseTestObject#
         */
        windowStyle: {
            wiredName: "WindowStyle"
        },

        /**
         * Returns the object's permanent part of the MFC window class.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's permanent part.
         * @memberof StdWin.UIBaseTestObject#
         */
        windowClassRegExp: {
            wiredName: "RegExpWndClass"
        },

        /**
         * Returns the object's ID.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's ID.
         * @memberof StdWin.UIBaseTestObject#
         */
        windowId: {
            wiredName: "window id"
        }
    }
};

/**
 * @ignore
 */
Utils.inherit(UiObjectBaseTO, TestObjectBase, {
});

module.exports.UiObjectBaseDescription = UiObjectBaseDescription;
module.exports.UiObjectBaseTO = UiObjectBaseTO;
module.exports.UiObjectBaseDescriptionBehavior = UiObjectBaseDescriptionBehavior;
module.exports.UiObjectBaseTOBehavior = UiObjectBaseTOBehavior;