// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 05/24/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var Convert = Core.Convert;
var SpinBoxTOBaseBehavior = Core.SpinBoxTOBaseBehavior;

/**
 * SpinBoxDescriptionBehavior - the description for a SpinBox object
 * @memberof StdWin
 * @ignore
 */
var SpinBoxDescriptionBehavior = {
    /**
     * The value of the spin box.
     * @param {number} [value] When provided, this method acts as a setter and sets the value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    value: function (value) {
        return this._propertyHandler("position", value, Convert.toNumber);
    }
};

/**
 * The description of a SpinBox test object.
 * @param {Object} [props] Initializes a SpinBox test object using the supplied property bag.
 * @returns {SpinBox} the description object that was initialized.
 * @class SpinBox
 * @memberof StdWin
 * @extends StdWin.UiObjectBaseDescription
 * @mixes StdWin.SpinBoxDescriptionBehavior
 */
function SpinBox(props) {
    var spinBoxDesc = new UiObjectBaseDescription("SpinBox");
    Utils.extend(spinBoxDesc, SpinBoxDescriptionBehavior);
    spinBoxDesc._defineByPropertyBag(props);
    return spinBoxDesc;
}

/**
 * A SpinBox object
 * @constructor
 * @class SpinBoxTO
 * @extends StdWin.UiObjectBaseTO
 * @mixes SpinBoxTOBaseBehavior._methods
 * @mixes StdWin.SpinBoxTOBehavior._properties
 * @memberof StdWin
 */
function SpinBoxTO(session, description) {
    description = description || SpinBox();
    var spinBoxTO = new UiObjectBaseTO("WinSpin", session, description);
    spinBoxTO._mergeBehavior(SpinBoxTOBaseBehavior);
    spinBoxTO._mergeBehavior(SpinBoxTOBehavior);
    return spinBoxTO;
}

/**
 * The behavior of the SpinBox object
 * @memberof StdWin
 * @ignore
 */
var SpinBoxTOBehavior = {
    /**
     * @ignore
     * @memberof StdWin.SpinBoxTOBehavior
     */
    _properties: {
        /**
         * Gets the spin object value.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the spin object value.
         */
        value: {
            wiredName: "position"
        }
    }
};

module.exports.SpinBoxTO = SpinBoxTO;
module.exports.SpinBox = SpinBox;