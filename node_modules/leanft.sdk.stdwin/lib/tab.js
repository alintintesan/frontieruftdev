// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/16/2016.
 */
var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * A Tab object
 * @constructor
 * @class Tab
 * @mixes StdWin.TabTOBehavior._properties
 * @memberof StdWin
*/
function Tab(ownerTabControl, identifier, textRepresentation) {
    ObjectUtils.extend(this, MergeBehavior);
    this._mergeBehavior(TabTOBehavior);

    this._ownerTabControl = ownerTabControl;
    this._identifier = identifier;
    this._textRepresentation = textRepresentation;
    this._executeWithEventsOnItemOnError = this._ownerTabControl._executeWithEventsOnItemOnError.bind(this._ownerTabControl, this);
}

/**
 * The behavior of the Tab object.
 * @memberof StdWin
 * @ignore
 */
var TabTOBehavior = {

    /**
     * @ignore
     * @memberof StdWin.TabTOBehavior
     */
    _properties: {
        /**
         * Gets the text of the tab.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text of the tab.
         */
        text: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTabControl._getTabText, this._identifier);
        },

        /**
         * Checks if the tab is selected.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the tab is selected or not.
         */
        isSelected: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTabControl._isTabSelected, this._identifier);
        }
    },

    /**
     * The methods of Tab object
     * @memberof StdWin
     * @ignore
     */
    _helpers: {
        _textRepresentation: null,
        _ownerTabControl: null,
        _identifier: null,
        _executeWithEventsOnItemOnError: null,

        /**
         * Gets the identifier of the tab.
         * @returns {number|string} the identifier of the tab.
         * @ignore
         */
        _getIdentifier: function () {
            return this._identifier;
        },

        /**
         * Gets the text representation of the tab.
         * @returns {string} the text representation of the tab.
         * @ignore
         */
        _getTextRepresentation: function () {
            return this._textRepresentation;
        }
    }
};

module.exports.Tab = Tab;
