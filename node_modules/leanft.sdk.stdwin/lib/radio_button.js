// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/17/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiWithLayoutInfo = require("./ui_object_base_with_layout_info.js");
var UiObjectWithLayoutInfoBehaviour = UiWithLayoutInfo.UiObjectWithLayoutInfoBehaviour;
var UiObjectWithLayoutInfoDescription = UiWithLayoutInfo.UiObjectWithLayoutInfoDescription;
var CheckedState = Core.CheckedState;
var CheckedStateDescriptionBehavior = require("./checked_behavior.js").CheckedStateDescriptionBehavior;
var CheckedStateTOBehavior = require("./checked_behavior.js").CheckedStateTOBehavior;

/**
 * RadioButtonDescriptionBehavior - the description for a RadioButton object
 * @memberof StdWin
 * @ignore
 */
var RadioButtonDescriptionBehavior = {
    /**
     * The radio button's state.
     * @param {CheckedState} [state] When provided, this method acts as a setter and sets the state value.
     * @returns {CheckedState | Description} If no parameter is provided, the method acts as a getter and returns the current stored state value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    state: function (state) {
        return this._state(state);
    }
};

/**
 * The description of a RadioButton test object.
 * @param {Object} [props] Initializes a RadioButton test object using the supplied property bag.
 * @returns {RadioButton} the description object that was initialized.
 * @class RadioButton
 * @memberof StdWin
 * @extends StdWin.UiObjectBaseDescription
 * @mixes StdWin.UiObjectWithLayoutInfoDescription
 * @mixes StdWin.RadioButtonDescriptionBehavior
 */
function RadioButton(props) {
    var radioButtonDesc = new UiObjectBaseDescription("RadioButton");
    Utils.extend(radioButtonDesc, UiObjectWithLayoutInfoDescription);
    Utils.extend(radioButtonDesc, CheckedStateDescriptionBehavior);
    Utils.extend(radioButtonDesc, RadioButtonDescriptionBehavior);
    radioButtonDesc._defineByPropertyBag(props);
    return radioButtonDesc;
}

/**
 * A RadioButton object
 * @constructor
 * @class RadioButtonTO
 * @extends StdWin.UiObjectBaseTO
 * @mixes StdWin.UiObjectWithLayoutInfoBehaviour._properties
 * @mixes StdWin.RadioButtonTOBehavior._properties
 * @mixes StdWin.RadioButtonTOBehavior._methods
 * @memberof StdWin
 */
function RadioButtonTO(session, description) {
    description = description || RadioButton();
    var radioButtonTO = new UiObjectBaseTO("WinRadioButton", session, description);
    radioButtonTO._mergeBehavior(UiObjectWithLayoutInfoBehaviour);
    radioButtonTO._mergeBehavior(CheckedStateTOBehavior);
    radioButtonTO._mergeBehavior(RadioButtonTOBehavior);
    return radioButtonTO;
}

/**
 * The behavior of the RadioButton object
 * @memberof StdWin
 * @ignore
 */
var RadioButtonTOBehavior = {
    /**
     * @ignore
     * @memberof StdWin.RadioButtonTOBehavior
     */
    _properties: {
        /**
         * Gets the state of the radio button.
         * @function
         * @returns {Promise<CheckedState>} a promise that is fulfilled with the state of the radio button.
         */
        state: {
            type: 'enum',
            enumType: Core.CheckedState,
            enumName: 'CheckedState',
            wiredName: CheckedStateTOBehavior._checkedWiredName,
            getter: function () {
                return this._state();
            }
        }
    },

    /**
     * @ignore
     * @memberof StdWin.RadioButtonTOBehavior
     */
    _methods: {
        /**
         * Sets the radio button to a checked state.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        set: function (args) {
            return this._executeWithEvents(arguments, "Set");
        }
    }
};

module.exports.RadioButton = RadioButton;
module.exports.RadioButtonTO = RadioButtonTO;
module.exports.RadioButtonDescriptionBehavior = RadioButtonDescriptionBehavior;
module.exports.RadioButtonTOBehavior = RadioButtonTOBehavior;