// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/17/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiWithLayoutInfo = require("./ui_object_base_with_layout_info.js");
var UiObjectWithLayoutInfoBehaviour = UiWithLayoutInfo.UiObjectWithLayoutInfoBehaviour;
var UiObjectWithLayoutInfoDescription = UiWithLayoutInfo.UiObjectWithLayoutInfoDescription;
var CheckedStateDescriptionBehavior = require("./checked_behavior.js").CheckedStateDescriptionBehavior;
var CheckedStateTOBehavior = require("./checked_behavior.js").CheckedStateTOBehavior;
var CalendarConverter = Core.CalendarConverter;
var CalendarTOBaseBehavior = Core.CalendarTOBaseBehavior;
var CalendarTOBaseExtendedBehavior = Core.CalendarTOBaseExtendedBehavior;
var Convert = Core.Convert;

/**
 * CalendarDescriptionBehavior - the description for a Calendar object
 * @memberof StdWin
 * @ignore
 */
var CalendarDescriptionBehavior = {
    /**
     * The check box status of the Calendar test object.
     * @param {CheckedState} [state] When provided, this method acts as a setter and sets the state value.
     * @returns {CheckedState | Description} If no parameter is provided, the method acts as a getter and returns the current stored state value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    state: function (state) {
        return this._state(state);
    },

    /**
     * The date of the Calendar test object.
     * @param {Date | string} [date] When provided, this method acts as a setter and sets the date value. If it is a string, the format must be must be conformed with the Date object of JavaScript.
     * @returns {Date | Description} If no parameter is provided, the method acts as a getter and returns the current stored date value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    date: function (date) {
        return this._propertyHandler("date", date, CalendarConverter.convertToNativeSingleDateFormat, CalendarConverter.convertStringToDate, Convert.toDate);
    }
};

/**
 * The description of a Calendar test object.
 * @param {Object} [props] Initializes a Calendar test object using the supplied property bag.
 * @returns {Calendar} the description object that was initialized.
 * @class Calendar
 * @memberof StdWin
 * @extends StdWin.UiObjectBaseDescription
 * @mixes StdWin.UiObjectWithLayoutInfoDescription
 * @mixes StdWin.CalendarDescriptionBehavior
 */
function Calendar(props) {
    var calendarDesc = new UiObjectBaseDescription("Calendar");
    Utils.extend(calendarDesc, UiObjectWithLayoutInfoDescription);
    Utils.extend(calendarDesc, CheckedStateDescriptionBehavior);
    Utils.extend(calendarDesc, CalendarDescriptionBehavior);
    calendarDesc._defineByPropertyBag(props);
    return calendarDesc;
}

/**
 * A Calendar object
 * @constructor
 * @class CalendarTO
 * @extends StdWin.UiObjectBaseTO
 * @mixes StdWin.UiObjectWithLayoutInfoBehaviour._properties
 * @mixes CalendarTOBehavior._properties
 * @mixes CalendarTOBehavior._methods
 * @mixes CalendarTOBaseExtendedBehavior._properties
 * @mixes CalendarTOBaseExtendedBehavior._methods
 * @memberof StdWin
 */
function CalendarTO(session, description) {
    description = description || Calendar();
    var calendarTO = new UiObjectBaseTO("WinCalendar", session, description);
    calendarTO._mergeBehavior(UiObjectWithLayoutInfoBehaviour);
    calendarTO._mergeBehavior(CheckedStateTOBehavior);
    calendarTO._mergeBehavior(CalendarTOBaseBehavior);
    calendarTO._mergeBehavior(CalendarTOBaseExtendedBehavior);
    calendarTO._mergeBehavior(CalendarTOBehavior);
    return calendarTO;
}

/**
 * The behaviors of the Calendar object
 * @memberof StdWin
 * @ignore
 */
var CalendarTOBehavior = {
    /**
     * @ignore
     * @memberof StdWin.CalendarTOBehavior
     */
    _properties: {
        /**
         * Gets the calendar check box state.
         * @function
         * @returns {Promise<CheckedState>} a promise that is fulfilled with the calendar's check box state.
         */
        state: {
            type: 'enum',
            enumType: Core.CheckedState,
            enumName: 'CheckedState',
            wiredName: CheckedStateTOBehavior._checkedWiredName,
            getter: function () {
                return this._state();
            }
        }
    }
};

module.exports.Calendar = Calendar;
module.exports.CalendarTO = CalendarTO;