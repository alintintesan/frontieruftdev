// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/09/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiWithLayoutInfo = require("./ui_object_base_with_layout_info.js");
var UiObjectWithLayoutInfoBehaviour = UiWithLayoutInfo.UiObjectWithLayoutInfoBehaviour;
var UiObjectWithLayoutInfoDescription = UiWithLayoutInfo.UiObjectWithLayoutInfoDescription;
var Convert = Core.Convert;

/**
 * The description of an EditField test object.
 * @param {Object} [props] Initializes a EditField test object using the supplied property bag.
 * @returns {Edit} the description object that was initialized.
 * @class Edit
 * @memberof StdWin
 * @extends StdWin.UiObjectBaseDescription
 * @mixes StdWin.UiObjectWithLayoutInfoDescription 
 */
function Edit(props) {
    var editDesc = new UiObjectBaseDescription("EditField");
    Utils.extend(editDesc, UiObjectWithLayoutInfoDescription);
    editDesc._defineByPropertyBag(props);
    return editDesc;
}

/**
 * An EditField object
 * @constructor
 * @class EditTO
 * @extends StdWin.UiObjectBaseTO
 * @mixes StdWin.UiObjectWithLayoutInfoBehaviour._properties
 * @mixes StdWin.EditTOBehavior._methods
 * @memberof StdWin
 */
function EditTO(session, description) {
    description = description || Edit();
    var editTO = new UiObjectBaseTO("WinEdit", session, description);
    editTO._mergeBehavior(UiObjectWithLayoutInfoBehaviour);
    editTO._mergeBehavior(EditTOBehavior);
    return editTO;
}

/**
 * The behavior of an EditField object.
 * @memberof StdWin
 * @ignore
 */
var EditTOBehavior = {
    /**
     * @ignore
     * @memberof StdWin.EditTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets text for the edit field.
         * @function
         * @param {string} text The text to set to the edit field
         * @returns {Promise<void>} a promise that is fulfilled when the setText operation ends.
         */
        setText: function (text) {
            if (text == null)
                throw new Error("You must pass parameter text");
            return this._executeWithEvents(arguments, "Set", text);
        },

        /*jshint eqnull:true */
        /**
         * Selects a block of text in the edit field.
         * @function
         * @param {number} fromCharPos The start position of selection.
         * @param {number} toCharPos The end position of selection.
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         */
        select: function (fromCharPos, toCharPos) {
            if (fromCharPos == null)
                throw new Error("You must pass start position");
            if (toCharPos == null)
                throw new Error("You must pass end position");
            return this._executeWithEvents(arguments, "SetSelection", Convert.toNumber(fromCharPos), Convert.toNumber(toCharPos) + 1);
        },

        /*jshint eqnull:true */
        /**
         * Sets secure text for the edit field.
         * @function
         * @param {string} encodedText The encoded text to set to the edit field.
         * @returns {Promise<void>} a promise that is fulfilled when the setSecure operation ends.
         */
        setSecure: function (encodedText) {
            if (encodedText == null)
                throw new Error("You must pass parameter encodedText");
            return this._executeWithEvents(arguments, "SetSecure", encodedText);
        }
    }
};

module.exports.Edit = Edit;
module.exports.EditTO = EditTO;
module.exports.EditTOBehavior = EditTOBehavior;