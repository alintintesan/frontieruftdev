// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/13/2016.
 */

var Core = require("leanft.sdk.core");
var MouseButton = Core.MouseButton;
var ArrayUtils = Core.ArrayUtils;
var Convert = Core.Convert;

/**
 * The behaviors of ListBase, base class for List controls.
 * @memberof StdWin
 * @ignore
 */
var ListBaseBehavior = {
    /**
     * @ignore
     * @memberof StdWin.ListBaseBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Selects the items by range.
         * @function
         * @param {number} indexFrom The beginning of the range.
         * @param {number} indexTo The end of the range.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        selectRange: function (indexFrom, indexTo) {
            if (indexFrom == null)
                throw new Error("The parameter indexFrom cannot be null.");
            if (indexTo == null)
                throw new Error("The parameter indexTo cannot be null.");
            return this._executeWithEvents(arguments, "SelectRange", Convert.toNumber(indexFrom), Convert.toNumber(indexTo));
        }
    },

    _helpers: {
        /*jshint eqnull:true */
        /**
         * Activates a list item.
         * @param {ListItem|number|string} item The item to be activated.
         * The input can be the list item, the 0-based index of the item or the name/text of the item.
         * @param {MouseButton} [button] The button to activate. Default: the left button.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @ignore
         */
        _activateItem: function (item, button) {
            if (item == null)
                throw new Error("The item cannot be null.");

            value = item;
            if (typeof item === 'object') {
                if (item._identifier == null) {
                    throw new Error("The identifier of the item cannot be null.");
                }
                value = item._identifier;
            }

            var mouse_button = button || MouseButton.left;
            return this._executeWithEvents(arguments.callee.caller.arguments, "Activate", value, MouseButton._convert(mouse_button));
        },

        /*jshint eqnull:true */
        /**
         * Deselects a list of items.
         * @param {...(ListItem | ListViewItem | number | string)} item You can pass as many items as you like. Each item can be either the name of the item you wish to select,
         * or the numeric index of the item in the list.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        _deselect: function (items) {
            if (items == null)
                throw new Error("The parameter items cannot be null.");
            return this._executeSingleOpOnCollection(arguments.callee.caller.arguments, "Deselect", ArrayUtils.toArray(arguments), this._itemTransform);
        },

        /*jshint eqnull:true */
        /**
         * Selects a list of items.
         * @param {...(ListItem | ListViewItem | number | string)} item You can pass as many items as you like. Each item can be either the name of the item you wish to select,
         * or the numeric index of the item in the list.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        _select: function (items) {
            if (items == null)
                throw new Error("The parameter items cannot be null.");
            return this._executeOnItemsCollection(arguments.callee.caller.arguments, "Select", "ExtendSelect", ArrayUtils.toArray(arguments), this._itemTransform);
        },


        /*jshint eqnull:true */
        /**
         * Creates a ListItem/ListViewItem from its text representation.
         * @param {string} text The text representation of the item.
         * @returns {ListItem} the ListItem object. See {@link StdWin.ListItem}
         * @ignore
         */
        _getItem: function (text) {
            if (text == null)
                throw new Error("The parameter text cannot be null.");
            return this._createItem(text, text);
        },

        /**
         * Selects the text of the item.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * If it is a string, it is the name of the item.
         * @returns {Promise<string>} a promise that is fulfilled with the text of the item.
         * @ignore
         */

        _getItemText: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "text");
        },

        /**
         * Checks if the item is focused.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the item is focused or not.
         * @ignore
         */

        _isItemFocused: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "focused");
        },

        /**
         * Checks if the item is selected.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the item is selected or not
         * @ignore
         */
        _isItemSelected: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "selected");
        },

        /**
         * @ignore
         */
        _itemTransform: function (item) {
            if (typeof item === 'object') {
                return item._identifier;
            }
            return item;
        }
    }
};

module.exports.ListBaseBehavior = ListBaseBehavior;