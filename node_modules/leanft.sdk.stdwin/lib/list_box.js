// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/13/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiWithLayoutInfo = require("./ui_object_base_with_layout_info.js");
var UiObjectWithLayoutInfoBehaviour = UiWithLayoutInfo.UiObjectWithLayoutInfoBehaviour;
var UiObjectWithLayoutInfoDescription = UiWithLayoutInfo.UiObjectWithLayoutInfoDescription;
var ListBaseBehavior = Core.ListBaseBehavior;
var ListItem = require("./list_item.js").ListItem;
var ListBoxDescriptionBaseBehavior = Core.ListBoxDescriptionBaseBehavior;
var ContainerBehavior = Core.ContainerBehavior;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;

/**
 * The description of a ListBox test object.
 * @param {Object} [props] Initializes a ListBox test object using the supplied property bag.
 * @returns {ListBox} the description object that was initialized.
 * @class ListBox
 * @memberof StdWin
 * @extends StdWin.UiObjectBaseDescription
 * @mixes StdWin.UiObjectWithLayoutInfoDescription
 * @mixes Core.ListBoxDescriptionBaseBehavior
 */
function ListBox(props) {
    var listBoxDesc = new UiObjectBaseDescription("ListBox");
    Utils.extend(listBoxDesc, UiObjectWithLayoutInfoDescription);
    Utils.extend(listBoxDesc, ListBoxDescriptionBaseBehavior);
    listBoxDesc._defineByPropertyBag(props);
    return listBoxDesc;
}

/**
 * A ListBox object
 * @constructor
 * @class ListBoxTO
 * @extends StdWin.UiObjectBaseTO
 * @mixes StdWin.UiObjectWithLayoutInfoBehaviour._properties
 * @mixes ContainerBehavior
 * @mixes ListBaseBehavior._methods
 * @mixes WrappedItemExecutorBehavior
 * @mixes StdWin.ListBoxTOBehavior._properties
 * @mixes StdWin.ListBoxTOBehavior._methods
 * @memberof StdWin
 */
function ListBoxTO(session, description) {
    description = description || ListBox();
    var listBoxTO = new UiObjectBaseTO("WinList", session, description);
    listBoxTO._mergeBehavior(UiObjectWithLayoutInfoBehaviour);
    listBoxTO._mergeBehavior(ContainerBehavior);
    listBoxTO._mergeBehavior(ListBaseBehavior);
    listBoxTO._mergeBehavior(WrappedItemExecutorBehavior);
    listBoxTO._mergeBehavior(ListBoxTOBehavior);

    return listBoxTO;
}

/**
 * The behavior of the ListBox object
 * @memberof StdWin
 * @ignore
 */
var ListBoxTOBehavior = {
    /**
     * @ignore
     * @memberof StdWin.ListBoxTOBehavior
     */
    _properties: {
        /**
         * Returns an array of all items in the list box.
         * @function
         * @returns {Promise<ListItem[]>} a promise that is fulfilled with an array of all list items in the list box. See {@link StdWin.ListItem}
         */
        items: {
            wiredName: ContainerBehavior._allItemsDefaultWiredName,
            getter: function () {
                return this._items("\n");
            }
        },

        /**
         * Returns an array of all selected items in the list box.
         * @function
         * @returns {Promise<ListItem[]>} a promise that is fulfilled with an array of all selected items in the list box. See {@link StdWin.ListItem}
         */
        selectedItems: {
            wiredName: ContainerBehavior._selectedItemsDefaultWiredName,
            getter: function () {
                return this._selectedItems("\n");
            }
        }
    },

    /**
     * @ignore
     * @memberof StdWin.ListBoxTOBehavior
     */
    _methods: {
        /**
         * Activates a list item.
         * @function
         * @param {ListItem|number|string} item The item to be activated.
         * The input can be the list item, the 0-based index of the item, or the name/text of the item.
         * @param {MouseButton} [button = MouseButton.left] The button to activate. Default: the left button.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        activateItem: function (item, button) {
            return this._activateItem(item, button);
        },

        /**
         * Deselects a list of items.
         * @function
         * @param {...(ListItem | number | string)} items You can pass as many items as you like. Each item can be either the {@link StdWin.ListItem}, name of the item you wish to select,
         * or the numeric index of the item in the list.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        deselect: function (items) {
            return this._deselect.apply(this, arguments);
        },

        /**
         * Selects a list of items.
         * @function
         * @param {...(ListItem | number | string)} items You can pass as many items as you like. Each item can be either the {@link StdWin.ListItem}, name of the item you wish to select,
         * or the numeric index of the item in the list.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        select: function (items) {
            return this._select.apply(this, arguments);
        },

        /**
         * Selects additional items from the multi-selection list.
         * <BR>Remark: This method is applicable only to lists that allow multiple selection.
         * @function
         * @param {...(ListItem | string | number)} items One or more items to add to the selection. Each item can be either a {@link StdWin.ListItem}, the item's name,
         * or the item's numeric index in the list.
         * @returns {Promise<void>} A promise that is fulfilled when the operation is performed.
         */
        extendSelect: function (items) {
            return this._extendSelect.apply(this, arguments);
        },

        /**
         * Creates a list item from its text representation.
         * @function
         * @param {string} text The text representation of the item.
         * @returns {ListItem} The ListItem object. See {@link StdWin.ListItem}
         */
        getItem: function (text) {
            return this._getItem(text);
        }
    },

    _helpers: {
        /**
         * @ignore
         */
        _getItemHeight: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "height");
        },

        /**
         * @ignore
         */
        //Does not work in UFT, so commented out in the interface
        //TODO: uncomment in the IListItem interface once the UFT defect is solved. Defect# 14058
        //_isItemAnchor: function (identifier) {
        //    return this._executeWithEvents(arguments, "GetItemProperty", identifier, "IsAnchor");
        //},


        /**
         * Creates an item from the identifier and text representation.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * @param {string} textRepresentation The text representation of the item.
         * @returns {ListItem} The ListItem object.
         * @ignore
         */
        _createItem: function (identifier, textRepresentation) {
            return new ListItem(this, identifier, textRepresentation);
        }
    },

    _additionalProperties: {
        itemsCount: {wiredName: ContainerBehavior._itemsCountDefaultWiredName}
    }
};

module.exports.ListBox = ListBox;
module.exports.ListBoxTO = ListBoxTO;
module.exports.ListBoxTOBehavior = ListBoxTOBehavior;
module.exports.ListItem = ListItem;
