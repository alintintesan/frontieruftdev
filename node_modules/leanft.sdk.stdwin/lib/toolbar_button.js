// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/16/2016.
 */
var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var ToolBarItemBase = Core.ToolBarItemBase;
var MouseButton = Core.MouseButton;
var MergeBehavior = Core.MergeBehavior;

/**
 * The methods of ToolBarButton object
 * @memberof StdWin
 * @ignore
 */
var ToolBarButtonBehavior = {
    /**
     * @memberof StdWin.ToolBarButtonBehavior
     * @ignore
     */
    _properties: {
        /**
         * Indicates whether the toolbar button is currently pressed (currently being clicked) or checked (a dual-state push button that is currently selected).
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the item is selected or not.
         */
        isSelected: function () {
            return this._executeWithEventsOnItemOnError(this._ownerToolBar._isItemSelected, this._identifier);
        }
    },

    /**
     * @memberof StdWin.ToolBarButtonBehavior
     * @ignore
     */
    _methods: {
        /**
         * Opens the dropdown menu associated with this toolbar button by clicking the arrow part of the button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        showDropdown: function () {
            return this._executeWithEventsOnItem(this._ownerToolBar._showDropdown, this._identifier);
        },

        /**
         * Presses the specified toolbar button.
         * @function
         * @param {MouseButton} [button = MouseButton.left] The mouse button used to press on the toolbar button.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        press: function (button) {
            var mouseButton = button || MouseButton.left;
            return this._executeWithEventsOnItem(this._ownerToolBar._pressItem, this._identifier, MouseButton._convert(mouseButton));
        }
    }
};

/**
 * A ToolBarButton object
 * @constructor
 * @class ToolBarButton
 * @extends ToolBarItemBase
 * @mixes StdWin.ToolBarButtonBehavior._properties
 * @mixes StdWin.ToolBarButtonBehavior._methods
 * @memberof StdWin
 */
function ToolBarButton(ownerToolBar, identifier, textRepresentation) {
    var buttonItem = new ToolBarItemBase(ownerToolBar, identifier, textRepresentation);
    Utils.extend(buttonItem, MergeBehavior);
    buttonItem._mergeBehavior(ToolBarButtonBehavior);
    return buttonItem;
}

module.exports.ToolBarButton = ToolBarButton;
