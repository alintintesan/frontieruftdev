// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/21/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var ScrollBarTOBaseBehavior = Core.ScrollBarTOBaseBehavior;
var Convert = Core.Convert;

/**
 * ScrollBarDescriptionBehavior - the description for a ScrollBar object
 * @memberof StdWin
 * @ignore
 */
var ScrollBarDescriptionBehavior = {
    /**
     * The position of the scroll bar.
     * @param {number} [position] When provided, this method acts as a setter and sets the position value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored position value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    position: function (position) {
        return this._propertyHandler("ScrollPosition", position, Convert.toNumber);
    },

    /**
     * The maximum position of the scroll bar.
     * @param {number} [maxPosition] When provided, this method acts as a setter and sets the maxPosition value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored maxPosition value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    maxPosition: function (maxPosition) {
        return this._propertyHandler("MaxScrollPos", maxPosition, Convert.toNumber);
    },

    /**
     * The minimum position of the scroll bar.
     * @param {number} [minPosition] When provided, this method acts as a setter and sets the minPosition value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored minPosition value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    minPosition: function (minPosition) {
        return this._propertyHandler("MinScrollPos", minPosition, Convert.toNumber);
    }
};

/**
 * The description of a ScrollBar test object.
 * @param {Object} [props] Initializes a ScrollBar test object using the supplied property bag.
 * @returns {ScrollBar} the description object that was initialized.
 * @class ScrollBar
 * @memberof StdWin
 * @extends StdWin.UiObjectBaseDescription
 * @mixes StdWin.ScrollBarDescriptionBehavior
 */
function ScrollBar(props) {
    var scrollBarDesc = new UiObjectBaseDescription("ScrollBar");
    Utils.extend(scrollBarDesc, ScrollBarDescriptionBehavior);
    scrollBarDesc._defineByPropertyBag(props);
    return scrollBarDesc;
}

/**
 * A ScrollBar object
 * @constructor
 * @class ScrollBarTO
 * @extends StdWin.UiObjectBaseTO
 * @mixes Core.ScrollBarTOBaseBehavior._methods
 * @mixes StdWin.ScrollBarTOBehavior._properties
 * @memberof StdWin
 */
function ScrollBarTO(session, description) {
    description = description || ScrollBar();
    var scrollBarTO = new UiObjectBaseTO("WinScrollBar", session, description);
    scrollBarTO._mergeBehavior(ScrollBarTOBaseBehavior);
    scrollBarTO._mergeBehavior(ScrollBarTOBehavior);
    return scrollBarTO;
}

/**
 * The behavior of the ScrollBar object
 * @memberof StdWin
 * @ignore
 */
var ScrollBarTOBehavior = {
    /**
     * @ignore
     * @memberof StdWin.ScrollBarTOBehavior
     */
    _properties: {
        /**
         * Gets the position of the scrollbar.
         * @function
         * @returns {Promise<number>} a promise fulfilled with the position of the scrollbar.
		 */
        position: {
            wiredName: "ScrollPosition"
        },

        /**
         * Gets the maximum position of the scrollbar.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the maximum position of the scrollbar.
         */
        maxPosition: {
            wiredName: "MaxScrollPos"
        },

        /**
         * Gets the minimum position of the ScrollBar.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the minimum position of the scrollbar.
         */
        minPosition: {
            wiredName: "MinScrollPos"
        }
    }
};

module.exports.ScrollBarTO = ScrollBarTO;
module.exports.ScrollBar = ScrollBar;
module.exports.ScrollBarDescriptionBehavior = ScrollBarDescriptionBehavior;
module.exports.ScrollBarTOBehavior = ScrollBarTOBehavior;