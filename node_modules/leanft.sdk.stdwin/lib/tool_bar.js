// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/16/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiWithLayoutInfo = require("./ui_object_base_with_layout_info.js");
var UiObjectWithLayoutInfoBehaviour = UiWithLayoutInfo.UiObjectWithLayoutInfoBehaviour;
var UiObjectWithLayoutInfoDescription = UiWithLayoutInfo.UiObjectWithLayoutInfoDescription;
var ToolBarButton = require("./toolbar_button.js").ToolBarButton;
var MouseButton = Core.MouseButton;
var ContainerBehavior = Core.ContainerBehavior;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;
var ToolBarTOBaseBehavior = Core.ToolBarTOBaseBehavior;

/**
 * The description of a ToolBar test object.
 * @param {Object} [props] Initializes a ToolBar test object using the supplied property bag.
 * @returns {ToolBar} the description object that was initialized.
 * @class ToolBar
 * @memberof StdWin
 * @extends StdWin.UiObjectBaseDescription
 * @mixes StdWin.UiObjectWithLayoutInfoDescription
 */
function ToolBar(props) {
    var toolBarDesc = new UiObjectBaseDescription("ToolBar");
    Utils.extend(toolBarDesc, UiObjectWithLayoutInfoDescription);
    toolBarDesc._defineByPropertyBag(props);
    return toolBarDesc;
}

/**
 * A ToolBar object
 * @constructor
 * @class ToolBarTO
 * @extends StdWin.UiObjectBaseTO
 * @mixes StdWin.UiObjectWithLayoutInfoBehaviour._properties
 * @mixes ToolBarTOBaseBehavior
 * @mixes StdWin.ToolBarTOBehavior._methods
 * @mixes StdWin.ToolBarTOBehavior._properties
 * @memberof StdWin
 */
function ToolBarTO(session, description) {
    description = description || ToolBar();
    var toolBarTO = new UiObjectBaseTO("WinToolbar", session, description);
    toolBarTO._mergeBehavior(UiObjectWithLayoutInfoBehaviour);
    toolBarTO._mergeBehavior(ContainerBehavior);
    toolBarTO._mergeBehavior(WrappedItemExecutorBehavior);
    toolBarTO._mergeBehavior(ToolBarTOBaseBehavior);
    toolBarTO._mergeBehavior(ToolBarTOBehavior);
    toolBarTO._minimumItemIndex = 1;
    return toolBarTO;
}

/**
 * The behavior of the ToolBar object
 * @memberof StdWin
 * @ignore
 */
var ToolBarTOBehavior = {
    /**
     * @ignore
     * @memberof StdWin.ToolBarTOBehavior
     */
    _properties: {
        /**
         * Returns an array of all buttons in the toolbar.
         * @function
         * @returns {Promise<ToolBarButton[]>} a promise that is fulfilled with an array of all list items in the toolbar. See {@link StdWin.ToolBarButton}
         */
        buttons: {
            wiredName: ContainerBehavior._allItemsDefaultWiredName,
            getter: function () {
                return this._items("\n");
            }
        },

        /**
         * Returns an array of all selected buttons in the toolbar.
         * @function
         * @returns {Promise<ToolBarButton[]>} a promise that is fulfilled with an array of all selected buttons in the toolbar. See {@link StdWin.ToolBarButton}
         */
        selectedButtons: {
            wiredName: ContainerBehavior._selectedItemsDefaultWiredName,
            getter: function () {
                return this._selectedItems("\n");
            }
        }
    },

    /**
     * @ignore
     * @memberof StdWin.ToolBarTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Creates a toolbar button from its text representation.
         * @function
         * @param {string} text The text representation of the toolbar button.
         * @returns {ToolBarButton} the ToolBarButton object. See {@link StdWin.ToolBarButton}
         */
        getButton: function (text) {
            if (text == null)
                throw new Error("The parameter text cannot be null.");
            return this._createItem(text, text);
        }
    },

    _helpers: {
        /**
         * Presses a button.
         * @param {number|string} identifier The identifier of the button. If it is a number, it is the 0-based index of the button. If it is a string, it is the name of the button.
         * @param {MouseButton} [button = MouseButton.left] The mouse button to press.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @ignore
         */
        _pressItem: function (identifier, button) {
            return this._executeNotWrapped(arguments, "Press", identifier, button);
        },

        /**
         * Opens the dropdown menu associated with this toolbar button by clicking the arrow part of the button.
         * @param {number|string} identifier The identifier of the button. If it is a number, it is the 0-based index of the button. If it is a string, it is the name of the button.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @ignore
         */
        _showDropDown: function (identifier) {
            return this._executeNotWrapped(arguments, "ShowDropdown", identifier);
        },

        /**
         * Creates a toolbar button from the identifier and text representation.
         * @param {number|string} identifier The identifier of the toolbar button. If it is a number, it is the 0-based index of the item.
         * @param {string} textRepresentation The text representation of the toolbar button.
         * @returns {ToolBarButton} the ToolBarButton object.
         * @ignore
         */
        _createItem: function (identifier, textRepresentation) {
            return new ToolBarButton(this, identifier, textRepresentation);
        }
    }
};

module.exports.ToolBarTO = ToolBarTO;
module.exports.ToolBar = ToolBar;
module.exports.ToolBarTOBehavior = ToolBarTOBehavior;
module.exports.ToolBarButton = ToolBarButton;
