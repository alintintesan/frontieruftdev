// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/16/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var DescriptionBase = Core.DescriptionBase;
var TestObjectBase = Core.TestObjectBase;
var MenuItem = require("./menu_item.js").MenuItem;
var Convert = Core.Convert;
var MenuHelperBehavior = Core.MenuHelperBehavior;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;

/**
 * The supported menu types used by the Menu Description class.
 * @typedef {MenuType} MenuType
 * @property {string} unknown Unknown menu type.
 * @property {string} item Regular menu item type.
 * @property {string} menu Menu type.
 * @property {string} contextMenu Context menu type.
 * @property {string} systemMenu System menu type.
 * @memberof StdWin
 */
var MenuType = {
    /**
    * @type {string}
    */
    unknown: "unknown",
    /**
    * @type {string}
    */
    item: "item",
    /**
    * @type {string}
    */
    menu: "menu",
    /**
    * @type {string}
    */
    contextMenu: "contextmenu",
    /**
    * @type {string}
    */
    systemMenu: "systemmenu",

    /**
     * @ignore
     */
    _convertToNumber: {
        unknown: 0,
        item: 1,
        menu: 2,
        contextmenu: 3,
        systemmenu: 4
    },

    /**
     * @ignore
     */
    _menuTypeToNumber: function (type) {
        return MenuType._convertToNumber[type.toLowerCase()];
    },

    /**
     * @ignore
     */
    _convertToMenuType: {
        0: "unknown",
        1: "item",
        2: "menu",
        3: "contextMenu",
        4: "systemMenu"
    },

    /**
     * @ignore
     */
    _numberToMenuType: function (value) {
        return MenuType._convertToMenuType[value];
    }
};

/**
 * MenuDescriptionBehavior - the description of a Menu object
 * @memberof StdWin
 * @ignore
 */
var MenuDescriptionBehavior = {
    /**
     * The menu type. The possible value is in the enum {@link StdWin.MenuType}
     * @param {StdWin.MenuType} [type] When provided, this method acts as a setter and sets the type value.
     * @returns {StdWin.MenuType | Description} If no parameter is provided, the method acts as a getter and returns the current stored type value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    type: function (type) {
        return this._propertyHandler("menuobjtype", type, MenuType._menuTypeToNumber, MenuType._numberToMenuType);
    }
};

/**
 * The description of a Menu test object.
 * @param {Object} [props] Initializes a Menu test object using the supplied property bag.
 * @returns {Menu} the description object that was initialized.
 * @class Menu
 * @memberof StdWin
 * @extends DescriptionBase
 * @mixes StdWin.MenuDescriptionBehavior
 */
function Menu(props) {
    var menuDesc = new DescriptionBase();
    menuDesc._init({
        technology: "Standard Windows",
        leanftType: "Menu"
    });
    Utils.extend(menuDesc, MenuDescriptionBehavior);
    menuDesc._defineByPropertyBag(props);
    return menuDesc;
}

/**
 * A Menu object
 * @constructor
 * @class MenuTO
 * @extends TestObjectBase
 * @mixes MenuHelperBehavior
 * @mixes StdWin.MenuTOBehavior._methods
 * @mixes StdWin.MenuTOBehavior._properties
 * @memberof StdWin
 */
function MenuTO(session, description) {
    description = description || Menu();
    var menuTO = new TestObjectBase();
    menuTO._init("WinMenu", session, description);
    menuTO._mergeBehavior(MenuHelperBehavior);
    menuTO._mergeBehavior(WrappedItemExecutorBehavior);
    menuTO._mergeBehavior(MenuTOBehavior);
    return menuTO;
}

//Consts
var menuTypeWiredName = "menuobjtype";

/**
 * The behavior of the Menu object
 * @memberof StdWin
 * @ignore
 */
var MenuTOBehavior = {
    /**
     * @ignore
     * @memberof StdWin.MenuTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Creates a menu item from its given path.
         * @function
         * @param {string} path The path of the menu item.
         * @returns {MenuItem} the MenuItem object. See {@link StdWin.MenuItem}
         */
        getItem: function (path) {
            if (path == null)
                throw new Error("The parameter path cannot be null.");
            return new MenuItem(this, path);
        },

        /**
         * Creates the path of the specified menu item.
         * @function
         * @param {...(number|string)} menuPathParts The menu path can comprise: logical name(string), full path(string), or numeric 1-based index(int).
         * @returns {string} the path of the specified menu item.
         */
        buildMenuPath: function (menuPathParts) {
            return this._buildMenuPath.apply(this, arguments);
        },

        /*jshint eqnull:true */
        /**
         * Selects a menu item.
         * @function
         * @param {MenuItem|string} menuItem The item to be selected.
         * The input can be the menu item, or the menu path.
         * Use the getItem method to get MenuItem to be used as the argument for this method.
         * Use the buildMenuPath method to build the item path string to be used as the argument for this method.
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         */
        select: function (menuItem) {
            if (menuItem == null)
                throw new Error("The menuItem cannot be null.");

            value = menuItem;
            if (typeof menuItem === 'object') {
                if (menuItem._path == null) {
                    throw new Error("The path of the menu item cannot be null.");
                }
                value = menuItem._path;
            }

            return this._executeWithEvents(arguments, "Select", value);
        },

        //overrides for not supported functions
        /**
         * @ignore
         */
        highlight: function () {
            throw new Error("highlight function is not supported for the menu test object.");
        },

        /**
         * @ignore
         */
        getVisibleText: function () {
            throw new Error("getVisibleText function is not supported for the menu test object.");
        },

        /**
         * @ignore
         */
        getTextLocations: function () {
            throw new Error("getTextLocations function is not supported for the menu test object.");
        },

        /**
         * @ignore
         */
        snapshot: function () {
            throw new Error("snapshot function is not supported for the menu test object.");
        }
    },

    /**
     * @ignore
     * @memberof StdWin.MenuTOBehavior
     */
    _properties: {
        /**
         * Gets the type of menu.
         * @function
         * @returns {Promise<StdWin.MenuType>} a promise that is fulfilled with the type of the menu.
         */
        type: {
            type: 'enum',
            enumType: MenuType,
            enumName: 'MenuType',
            wiredName: menuTypeWiredName,
            getter: function () {
                return this._getROProperty(menuTypeWiredName, arguments).then(MenuType._numberToMenuType);
            }
        }
    },

    _helpers: {

        /**
         * Get the label of the menu item.
         * @param {string} path The path of the menu item.
         * @returns {Promise<string>} a promise that is fulfilled with the label of the menu item.
         * @ignore
         */
        _getItemLabel: function (path) {
            return this._executeNotWrapped(arguments, "GetItemProperty", path, "Label");
        },

        /**
         * Checks if the menu item is checked(selected).
         * @param {string} path The path of the menu item.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the menu item is checked or not.
         * @ignore
         */
        _isItemChecked: function (path) {
            return this._executeNotWrapped(arguments, "GetItemProperty", path, "Checked");
        },

        /**
         * Checks if the menu item is enabled.
         * @param {string} path The path of the menu item.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the menu item is enabled or not.
         * @ignore
         */
        _isItemEnabled: function (path) {
            return this._executeNotWrapped(arguments, "GetItemProperty", path, "Enabled");
        },

        /**
         * Checks if the menu item exists.
         * @param {string} path The path of the menu item.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the menu item exists or not.
         * @ignore
         */
        _isItemExists: function (path) {
            return this._executeNotWrapped(arguments, "GetItemProperty", path, "Exists");
        },

        /**
         * Checks if the menu item has sub-menus.
         * @param {string} path The path of the menu item.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the menu item has sub-menus or not.
         * @ignore
         */
        _itemHasSubMenu: function (path) {
            return this._executeNotWrapped(arguments, "GetItemProperty", path, "HasSubMenu");
        },

        /**
         * Gets the index of the menu item.
         * @param {string} path The path of the menu item.
         * @returns {Promise<number>} a promise that is fulfilled with the index of the menu item.
         * @ignore
         */
        _getItemIndex: function (path) {
            return this._executeNotWrapped(arguments, "GetItemProperty", path, "Index");
        },

        /**
         * Gets the number of sub-menus of the menu item.
         * @param {string} path The path of the menu item.
         * @returns {Promise<number>} a promise that is fulfilled with the number of sub-menus of the menu item.
         * @ignore
         */
        _getItemSubMenuCount: function (path) {
            return this._executeNotWrapped(arguments, "GetItemProperty", path, "SubMenuCount");
        }
    }
};

module.exports.Menu = Menu;
module.exports.MenuTO = MenuTO;
module.exports.MenuType = MenuType;
