// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 05/24/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var WindowObjectBaseBehavior = Core.WindowObjectBaseBehavior;
var WindowObjectBaseExtendedBehavior = Core.WindowObjectBaseExtendedBehavior;
var WindowBasePropsBehavior = Core.WindowBasePropsBehavior;

var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiWithLayoutInfo = require("./ui_object_base_with_layout_info.js");
var UiObjectWithLayoutInfoBehaviour = UiWithLayoutInfo.UiObjectWithLayoutInfoBehaviour;
var UiObjectWithLayoutInfoDescription = UiWithLayoutInfo.UiObjectWithLayoutInfoDescription;
var Convert = Core.Convert;
var WindowObjectDescriptionBaseBehavior = Core.WindowObjectDescriptionBaseBehavior;

/**
 * WindowDescriptionBehavior - the description for a Window or a Dialog object
 * @memberof StdWin
 * @ignore
 */
var WindowDescriptionBehavior = {
    /**
     * Indicates whether the window or the dialog is a child window/dialog.
     * @param {boolean} [isChildWindow] When provided, this method acts as a setter and sets the isChildWindow value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isChildWindow value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isChildWindow: function (isChildWindow) {
        return this._propertyHandler("is child window", isChildWindow, Convert.toBool);
    },

    /**
     * Indicates whether the window or the dialog is an owned window/dialog.
     * @param {boolean} [isOwnedWindow] When provided, this method acts as a setter and sets the isOwnedWindow value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isOwnedWindow value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isOwnedWindow: function (isOwnedWindow) {
        return this._propertyHandler("is owned window", isOwnedWindow, Convert.toBool);
    }    
};

/**
 * The description of a Window test object.
 * @param {Object} [props] Initializes a Window test object using the supplied property bag.
 * @returns {Window} the description object that was initialized.
 * @class Window
 * @memberof StdWin
 * @extends StdWin.UiObjectBaseDescription
 * @mixes WindowObjectDescriptionBaseBehavior
 * @mixes StdWin.UiObjectWithLayoutInfoDescription
 * @mixes StdWin.WindowDescriptionBehavior
 */
function Window(props) {
    var windowDesc = new UiObjectBaseDescription("Window");
    Utils.extend(windowDesc, WindowObjectDescriptionBaseBehavior);
    Utils.extend(windowDesc, UiObjectWithLayoutInfoDescription);
    Utils.extend(windowDesc, WindowDescriptionBehavior);
    windowDesc._defineByPropertyBag(props);
    return windowDesc;    
}

/**
 * A Window object
 * @constructor
 * @class WindowTO
 * @extends StdWin.UiObjectBaseTO
 * @mixes StdWin.UiObjectWithLayoutInfoBehaviour._properties
 * @mixes WindowObjectBaseBehavior._methods
 * @mixes WindowObjectBaseExtendedBehavior._methods
 * @mixes WindowObjectBaseExtendedBehavior._properties
 * @mixes WindowBasePropsBehavior._properties
 * @mixes StdWin.WindowTOBehavior._properties
 * @memberof StdWin
 */
function WindowTO(session, description) {
    description = description || Window();
    var windowTO = new UiObjectBaseTO("Window", session, description);
    windowTO._mergeBehavior(UiObjectWithLayoutInfoBehaviour);
    windowTO._mergeBehavior(WindowObjectBaseBehavior);
    windowTO._mergeBehavior(WindowObjectBaseExtendedBehavior);
    windowTO._mergeBehavior(WindowBasePropsBehavior);
    windowTO._mergeBehavior(WindowTOBehavior);
    return windowTO;
}

/**
 * The behavior of Window/Dialog object
 * @memberof StdWin
 * @ignore
 */
var WindowTOBehavior = {
    /**
     * @ignore
     * @memberof StdWin.WindowTOBehavior
     */
    _properties: {
        /**
         * Checks if the window/dialog is an owned window.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the window/dialog is owned or not.
         */
        isOwnedWindow: {
            wiredName: "is owned window"
        },

        /**
         * Checks if the window/dialog is a child window.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the window/dialog is a child window or not.
         */
        isChildWindow: {
            wiredName: "is child window"
        }
    }
};

module.exports.Window = Window;
module.exports.WindowTO = WindowTO;
module.exports.WindowDescriptionBehavior = WindowDescriptionBehavior;
module.exports.WindowTOBehavior = WindowTOBehavior;

