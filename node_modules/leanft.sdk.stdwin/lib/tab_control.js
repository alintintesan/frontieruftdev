// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 05/25/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiWithLayoutInfo = require("./ui_object_base_with_layout_info.js");
var UiObjectWithLayoutInfoBehaviour = UiWithLayoutInfo.UiObjectWithLayoutInfoBehaviour;
var UiObjectWithLayoutInfoDescription = UiWithLayoutInfo.UiObjectWithLayoutInfoDescription;
var Tab = require("./tab.js").Tab;
var MouseButton = Core.MouseButton;
var ContainerBehavior = Core.ContainerBehavior;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;
var TabControlDescriptionBehavior = Core.TabControlDescriptionBehavior;

/**
 * The description of a TabControl test object.
 * @param {Object} [props] Initializes a TabControl test object using the supplied property bag.
 * @returns {TabControl} the description object that was initialized.
 * @class TabControl
 * @memberof StdWin
 * @extends StdWin.UiObjectBaseDescription
 * @mixes StdWin.UiObjectWithLayoutInfoDescription
 * @mixes TabControlDescriptionBehavior
 */
function TabControl(props) {
    var tabControlDesc = new UiObjectBaseDescription("TabControl");
    Utils.extend(tabControlDesc, UiObjectWithLayoutInfoDescription);
    Utils.extend(tabControlDesc, TabControlDescriptionBehavior);
    tabControlDesc._defineByPropertyBag(props);
    return tabControlDesc;
}

/**
 * A TabControl object
 * @constructor
 * @class TabControlTO
 * @extends StdWin.UiObjectBaseTO
 * @mixes StdWin.UiObjectWithLayoutInfoBehaviour._properties
 * @mixes StdWin.TabControlTOBehavior._methods
 * @mixes StdWin.TabControlTOBehavior._properties
 * @memberof StdWin
 */
function TabControlTO(session, description) {
    description = description || TabControl();
    var tabControlTO = new UiObjectBaseTO("WinTab", session, description);
    tabControlTO._mergeBehavior(UiObjectWithLayoutInfoBehaviour);
    tabControlTO._mergeBehavior(ContainerBehavior);
    tabControlTO._mergeBehavior(TabControlTOBehavior);
    tabControlTO._mergeBehavior(WrappedItemExecutorBehavior);
    return tabControlTO;
}

/**
 * The behavior of the TabControl object
 * @memberof StdWin
 * @ignore
 */
var TabControlTOBehavior = {
    /**
     * @ignore
     * @memberof StdWin.TabControlTOBehavior
     */
    _properties: {
        /**
         * Returns an array of all tabs in the TabControl.
         * @function
         * @returns {Promise<Tab[]>} a promise that is fulfilled with an array of all tabs in the TabControl. See {@link StdWin.Tab}
         */
        tabs: {
            wiredName: ContainerBehavior._allItemsDefaultWiredName,
            getter: function () {
                return this._items("\n");
            }
        },

        /**
         * Returns the selected tab in the TabControl.
         * @function
         * @returns {Promise<Tab>} a promise that is fulfilled with the selected tab. See {@link StdWin.Tab}
         */
        selectedTab: {
            wiredName: ContainerBehavior._selectedItemsDefaultWiredName,
            getter: function () {
                return this._getROProperty(ContainerBehavior._selectedItemsDefaultWiredName, arguments).then(this.getTab.bind(this));
            }
        }
    },

    /**
     * @ignore
     * @memberof StdWin.TabControlTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Selects a tab.
         * @function
         * @param {Tab|number|string} tab The tab to be selected.
         * The input can be the tab, the 0-based index of the tab, or the name/text of the tab.
         * @param {MouseButton} [button = MouseButton.left] The button to activate. Default: the left button.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        select: function (tab, button) {
            if (tab == null)
                throw new Error("The tab cannot be null.");

            value = tab;
            if (typeof tab === 'object') {
                if (tab._identifier == null) {
                    throw new Error("The identifier of the tab cannot be null.");
                }
                value = tab._identifier;
            }

            var mouse_button = button || MouseButton.left;
            return this._executeWithEvents(arguments, "Select", value, MouseButton._convert(mouse_button));
        },

        /*jshint eqnull:true */
        /**
         * Creates a tab from its text representation.
         * @function
         * @param {string} name The text representation of the tab.
         * @returns {Tab} the Tab object. See {@link StdWin.Tab}
         */
        getTab: function (name) {
            if (name == null)
                throw new Error("The parameter name cannot be null.");
            return this._createItem(name, name);
        }
    },

    _helpers: {
        /**
         * Gets the text of the tab.
         * @param {number|string} identifier The identifier of the tab. If it is a number, it is the 0-based index of the tab.
         * If it is a string, it is the name of the tab.
         * @returns {Promise<number>} a promise that is fulfilled with the text of the tab.
         * @ignore
         */
        _getTabText: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "text");
        },

        /**
         * Checks if the tab is selected.
         * @param {number|string} identifier The identifier of the tab. If it is a number, it is the 0-based index of the tab.
         * If it is a string, it is the name of the tab.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the tab is selected or not.
         * @ignore
         */
        _isTabSelected: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "selected");
        },

        /**
         * Creates an item from the identifier and text representation.
         * @param {number|string} identifier The identifier of the tab. If it is a number, it is the 0-based index of the tab.
         * @param {string} textRepresentation The text representation of the tab.
         * @returns {Tab} the Tab object.
         * @ignore
         */
        _createItem: function (identifier, textRepresentation) {
            return new Tab(this, identifier, textRepresentation);
        }
    },

    _additionalProperties: {
        tabsCount: {wiredName: ContainerBehavior._itemsCountDefaultWiredName}
    }
};

module.exports.TabControl = TabControl;
module.exports.TabControlTO = TabControlTO;
module.exports.TabControlTOBehavior = TabControlTOBehavior;
module.exports.Tab = Tab;
