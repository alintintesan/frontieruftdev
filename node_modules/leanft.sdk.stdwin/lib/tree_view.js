// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/30/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiWithLayoutInfo = require("./ui_object_base_with_layout_info.js");
var UiObjectWithLayoutInfoBehaviour = UiWithLayoutInfo.UiObjectWithLayoutInfoBehaviour;
var UiObjectWithLayoutInfoDescription = UiWithLayoutInfo.UiObjectWithLayoutInfoDescription;
var TreeViewDescriptionBaseBehavior = Core.TreeViewDescriptionBaseBehavior;
var TreeViewTOBaseBehavior = Core.TreeViewTOBaseBehavior;
var TreeViewNode = require("./treeview_node.js").TreeViewNode;
var ContainerBehavior = Core.ContainerBehavior;
var MouseButton = Core.MouseButton;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;

/**
 * The description of a TreeView test object.
 * @param {Object} [props] Initializes a TreeView test object using the supplied property bag.
 * @returns {TreeView} the description object that was initialized.
 * @class TreeView
 * @memberof StdWin
 * @extends StdWin.UiObjectBaseDescription
 * @mixes StdWin.UiObjectWithLayoutInfoDescription
 * @mixes Core.TreeViewDescriptionBaseBehavior
 */
function TreeView(props) {
    var treeViewDesc = new UiObjectBaseDescription("TreeView");
    Utils.extend(treeViewDesc, UiObjectWithLayoutInfoDescription);
    Utils.extend(treeViewDesc, TreeViewDescriptionBaseBehavior);
    treeViewDesc._defineByPropertyBag(props);
    return treeViewDesc;
}

/**
 * A TreeView object
 * @constructor
 * @class TreeViewTO
 * @extends StdWin.UiObjectBaseTO
 * @mixes StdWin.UiObjectWithLayoutInfoBehaviour._properties
 * @mixes Core.ContainerBehavior
 * @mixes Core.WrappedItemExecutorBehavior
 * @mixes Core.TreeViewTOBaseBehavior
 * @mixes StdWin.TreeViewTOBehavior._properties
 * @mixes StdWin.TreeViewTOBehavior._methods
 * @memberof StdWin
 */
function TreeViewTO(session, description) {
    description = description || TreeView();
    var treeViewTO = new UiObjectBaseTO("WinTreeView", session, description);
    treeViewTO._mergeBehavior(UiObjectWithLayoutInfoBehaviour);
    treeViewTO._mergeBehavior(ContainerBehavior);
    treeViewTO._mergeBehavior(WrappedItemExecutorBehavior);
    treeViewTO._mergeBehavior(TreeViewTOBaseBehavior);
    treeViewTO._mergeBehavior(TreeViewTOBehavior);
    return treeViewTO;
}

/**
 * The behavior of the TreeView object
 * @memberof StdWin
 * @ignore
 */
var TreeViewTOBehavior = {
    /**
     * @ignore
     * @memberof StdWin.TreeViewTOBehavior
     */
    _properties: {
        /**
         * Returns an array of all visible nodes in the tree view.
         * @function
         * @returns {Promise<TreeViewNode[]>} a promise that is fulfilled with an array of all visible nodes in the tree view.
         */
        visibleNodes: {
            wiredName: ContainerBehavior._allItemsDefaultWiredName,
            getter: function () {
                return this._items("\n");
            }
        },

        /**
         * Returns an array of all selected nodes in the tree view.
         * @function
         * @returns {Promise<TreeViewNode[]>} a promise that is fulfilled with an array of all selected nodes in the tree view.
         */
        selectedNodes: {
            wiredName: ContainerBehavior._selectedItemsDefaultWiredName,
            getter: function () {
                return this._selectedItems("\n");
            }
        },

        /**
         * Returns an array of all checked nodes in the tree view.
         * @function
         * @returns {Promise<TreeViewNode[]>} a promise that is fulfilled with an array of all checked nodes in the tree view.
         */
        checkedVisibleNodes: function () {
            return this._checkedItems(";", "\n");
        }
    },

    /**
     * @ignore
     * @memberof StdWin.TreeViewTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Activates a node.
         * @function
         * @param {TreeViewNode|number|string} node The item to be activated.
         * The input can be the TreeViewNode, the 0-based index of the node, or the name/text of the node.
         * @param {MouseButton} [button = MouseButton.left] The button to activate. Default: the left button.
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         */
        activateNode: function (node, button) {
            return this._activateWithButton(node, button);
        },


        /*jshint eqnull:true */
        /**
         * Selects a node.
         * @function
         * @param {TreeViewNode|number|string} node The item to be selected.
         * The input can be the TreeViewNode, the 0-based index of the node, or the name/text of the node.
         * @param {MouseButton} [button = MouseButton.left] The button to activate. Default: the left button.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        select: function (node, button) {
            return this._selectWithButton(node, button);
        },

        /*jshint eqnull:true */
        /**
         * Creates a tree view node from its given path. When the path is not unique, returns the first matching node.
         * @function
         * @param {string} nodePath The path of the node.
         * @returns {TreeViewNode} the TreeViewNode object.
         */
        getNode: function (nodePath) {
            if (nodePath == null)
                throw new Error("The parameter text cannot be null.");
            return this._createItem(nodePath, nodePath);
        }
    },

    _helpers: {
        /**
         * Creates a node from the identifier and text representation.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * @param {string} textRepresentation The text representation of the node.
         * @returns {TreeViewNode} the TreeViewNode object.
         * @ignore
         */
        _createItem: function (identifier, textRepresentation) {
            return new TreeViewNode(this, identifier, textRepresentation);
        }
    },

    _additionalProperties: {
        nodesCount: {wiredName: ContainerBehavior._itemsCountDefaultWiredName}
    }
};

module.exports.TreeView = TreeView;
module.exports.TreeViewTO = TreeViewTO;
module.exports.TreeViewTOBehavior = TreeViewTOBehavior;
module.exports.TreeViewNode = TreeViewNode;