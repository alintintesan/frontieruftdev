// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 05/24/2016. 
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiWithLayoutInfo = require("./ui_object_base_with_layout_info.js");
var UiObjectWithLayoutInfoBehaviour = UiWithLayoutInfo.UiObjectWithLayoutInfoBehaviour;
var UiObjectWithLayoutInfoDescription = UiWithLayoutInfo.UiObjectWithLayoutInfoDescription;
var PropertyFlatter = Core.PropertyFlatter;
var VerticalScrollPosition = Core.VerticalScrollPosition;
var ScrollBehaviour = Core.ScrollBehaviour;
var groupedPropertyWiredNamesToSimple = Core.groupedPropertyWiredNamesToSimple;

var HScrollPropertiesToNativeKeysProps = {
    exists: {wiredName: "HasHScroll"},
    pageSize: {wiredName: "HScrollPageSize"},
    position: {wiredName: "HScrollPosition"},
    maximum: {wiredName: "MaxHScrollPos"},
    minimum: {wiredName: "MinHScrollPos"}
};

var HScrollPropertiesToNativeKeys = groupedPropertyWiredNamesToSimple(HScrollPropertiesToNativeKeysProps);

var VScrollPropertiesToNativeKeysProps = {
    exists: {wiredName: "HasVScroll"},
    pageSize: {wiredName: "VScrollPageSize"},
    position: {wiredName: "VScrollPosition"},
    maximum: {wiredName: "MaxVScrollPos"},
    minimum: {wiredName: "MinVScrollPos"}
};

var VScrollPropertiesToNativeKeys = groupedPropertyWiredNamesToSimple(VScrollPropertiesToNativeKeysProps);

/**
 * UIObjectDescriptionBehavior - the description for a standard Windows object
 * @memberof StdWin
 * @ignore
 */
var UIObjectDescriptionBehavior = {
    /**
     * The object's horizontal scroll information.
     * @param {Object} [horizontalScroll] When provided, this method acts as a setter and sets the horizontalScroll value.
     * @returns {Object | Description} If no parameter is provided, the method acts as a getter and returns the current stored horizontalScroll value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    horizontalScroll: function(horizontalScroll) {
        return this._propertyFlatterHandler("HorizontalScroll", PropertyFlatter, horizontalScroll, HScrollPropertiesToNativeKeys);
    },

    /**
     * The object's vertical scroll information.
     * @param {Object} [verticalScroll] When provided, this method acts as a setter and sets the verticalScroll value.
     * @returns {Object | Description} If no parameter is provided, the method acts as a getter and returns the current stored verticalScroll value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    verticalScroll: function(verticalScroll) {
        return this._propertyFlatterHandler("VerticalScroll", PropertyFlatter, verticalScroll, VScrollPropertiesToNativeKeys);
    }
};

/**
 * The description of a standard Windows UiObject test object.
 * @param {Object} [props] Initializes a standard Windows test object using the supplied property bag.
 * @returns {UiObject} the description object that was initialized.
 * @class UiObject
 * @memberof StdWin
 * @extends StdWin.UiObjectBaseDescription
 * @mixes StdWin.UiObjectWithLayoutInfoDescription
 * @mixes StdWin.UIObjectDescriptionBehavior
 */
function UiObject(props) {
    var uiObjectDesc = new UiObjectBaseDescription("UiObject");
    Utils.extend(uiObjectDesc, UiObjectWithLayoutInfoDescription);
    Utils.extend(uiObjectDesc, UIObjectDescriptionBehavior);
    uiObjectDesc.horizontalScroll({});
    uiObjectDesc.verticalScroll({});
    uiObjectDesc._defineByPropertyBag(props);
    return uiObjectDesc;
}

/**
 * A standard Windows object
 * @constructor
 * @class UIObjectTO
 * @extends StdWin.UiObjectBaseTO
 * @mixes StdWin.UiObjectWithLayoutInfoBehaviour._properties
 * @mixes StdWin.ScrollInfoProviderBehavior._properties
 * @mixes ScrollBehaviour._methods
 * @memberof StdWin
 */
function UIObjectTO(session, description) {
    description = description || UiObject();
    var uiObjectTO = new UiObjectBaseTO("WinObject", session, description);
    uiObjectTO._mergeBehavior(UiObjectWithLayoutInfoBehaviour);
    uiObjectTO._mergeBehavior(ScrollInfoProviderBehavior);
    uiObjectTO._mergeBehavior(ScrollBehaviour);
    return uiObjectTO;
}

/**
 * The behavior of a standard Windows object
 * @memberof StdWin
 * @ignore
 */
var ScrollInfoProviderBehavior = {
    /**
     * @ignore
     * @memberof StdWin.ScrollInfoProviderBehavior
     */
    _properties: {
        /**
         * Gets the horizontal scroll information of a standard Windows object.
         * @function
         * @returns {Promise<Object>} a promise that is fulfilled with the horizontal scroll information of standard Windows object. The format is {exists, maximum, minimum, pageSize, position}
         */
        horizontalScroll: {
            type: 'grouped',
            properties: HScrollPropertiesToNativeKeysProps,
            getter: function () {
                return this._getROProperties(HScrollPropertiesToNativeKeys.exists, HScrollPropertiesToNativeKeys.maximum, HScrollPropertiesToNativeKeys.minimum, HScrollPropertiesToNativeKeys.pageSize, HScrollPropertiesToNativeKeys.position).then(this._createScrollInfo);
            }
        },

        /**
         * Gets the vertical scroll information of a standard Windows object.
         * @function
         * @returns {Promise<Object>} a promise that is fulfilled with the vertical scroll information of a standard Windows object. The format is {exists, maximum, minimum, pageSize, position}
         */
        verticalScroll: {
            type: 'grouped',
            properties: VScrollPropertiesToNativeKeysProps,
            getter: function () {
                return this._getROProperties(VScrollPropertiesToNativeKeys.exists, VScrollPropertiesToNativeKeys.maximum, VScrollPropertiesToNativeKeys.minimum, VScrollPropertiesToNativeKeys.pageSize, VScrollPropertiesToNativeKeys.position).then(this._createScrollInfo);
            }
        },

        /**
         * Gets the vertical scroll position of a standard Windows object.
         * @function
         * @returns {Promise<VerticalScrollPosition>} a promise that is fulfilled with the vertical scroll position of standard Windows object. See {@link VerticalScrollPosition}
         */
        verticalScrollPosition: {
            type: 'enum',
            enumType: VerticalScrollPosition,
            enumName: 'VerticalScrollPosition',
            nonTranslatable: true,
            getter: function () {
                return this._getROProperties(VScrollPropertiesToNativeKeys.exists, "leftscrollbar").then(function (res) {
                    var exists = res[0];
                    if (!exists)
                        return VerticalScrollPosition.none;
                    if (res[1])
                        return VerticalScrollPosition.left;
                    return VerticalScrollPosition.right;
                });
            }
        }
    },

    _helpers: {
        /**
         * @ignore
         */
        _createScrollInfo: function (res) {
            var exists = res[0];
            if (exists === true) {
                return {
                    exists: res[0],
                    maximum: res[1],
                    minimum: res[2],
                    pageSize: res[3],
                    position: res[4]
                };
            }
            return {
                exists: false,
                maximum: 0,
                minimum: 0,
                pageSize: 0,
                position: 0
            };
        }
    }
};

module.exports.UiObject = UiObject;
module.exports.UIObjectTO = UIObjectTO;
