// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/07/2016. 
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;

/**
 * UiObjectWithLayoutInfoDescription - the base description for all stdwin elements which have layout information
 * @memberof StdWin
 * @ignore
 */
var UiObjectWithLayoutInfoDescription = {
    /**
     * Indicates whether the object is right aligned.
     * @param {boolean} [isRightAligned] When provided, this method acts as a setter and sets the isRightAligned value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isRightAligned value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isRightAligned: function (isRightAligned) {
        return this._propertyHandler("RightAligned", isRightAligned, Convert.toBool);
    },

    /**
     * Indicates whether the object is Right to Left layout.
     * @param {boolean} [isRightToLeftLayout] When provided, this method acts as a setter and sets the isRightToLeftLayout value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isRightToLeftLayout value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isRightToLeftLayout: function (isRightToLeftLayout) {
        return this._propertyHandler("RightToLeftLayout", isRightToLeftLayout, Convert.toBool);
    },

    /**
     * Indicates whether the object is Right to Left reading.
     * @param {boolean} [isRightToLeftReading] When provided, this method acts as a setter and sets the isRightToLeftReading value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isRightToLeftReading value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isRightToLeftReading: function (isRightToLeftReading) {
        return this._propertyHandler("RightToLeftReading", isRightToLeftReading, Convert.toBool);
    }
};

/**
 * @memberof StdWin
 * @ignore
 */
var UiObjectWithLayoutInfoBehaviour = {
    /**
     * @ignore
     * @memberof StdWin.UiObjectWithLayoutInfoBehaviour
     */
    _properties: {
        /**
         * Checks if the object is right aligned.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object is right aligned or not.
         */
        isRightAligned: {
            wiredName: "RightAligned"
        },

        /**
         * Checks if the object is right to left layout.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object is right to left layout or not.
         */
        isRightToLeftLayout: {
            wiredName: "RightToLeftLayout"
        },

        /**
         * Checks if the object is right to left reading.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object is right to left reading or not.
         */
        isRightToLeftReading: {
            wiredName: "RightToLeftReading"
        }
    }
};

module.exports.UiObjectWithLayoutInfoBehaviour = UiObjectWithLayoutInfoBehaviour;
module.exports.UiObjectWithLayoutInfoDescription = UiObjectWithLayoutInfoDescription;