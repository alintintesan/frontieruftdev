// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/22/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiWithLayoutInfo = require("./ui_object_base_with_layout_info.js");
var UiObjectWithLayoutInfoBehaviour = UiWithLayoutInfo.UiObjectWithLayoutInfoBehaviour;
var UiObjectWithLayoutInfoDescription = UiWithLayoutInfo.UiObjectWithLayoutInfoDescription;
var StringUtils = Core.StringUtils;
var StatusBarItem = require("./statusbar_item.js").StatusBarItem;
var StatusBarDescriptionBaseBehavior = Core.StatusBarDescriptionBaseBehavior;
var Convert = Core.Convert;
var ContainerBehavior = Core.ContainerBehavior;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;

/**
 * StatusBarDescriptionBehavior - the description for a StatusBar object
 * @memberof StdWin
 * @ignore
 */
var StatusBarDescriptionBehavior = {
    /**
     * An array of items in the status bar.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the items value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored items value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    items: function (items) {
        return this._propertyHandler("all items", items, StringUtils.joinFunc("\n"), StringUtils.splitFunc("\n"));
    },

    /**
     * The number of status bar items in the status bar.
     * @param {number} [itemsCount] When provided, this method acts as a setter and sets the itemsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored itemsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    itemsCount: function (itemsCount) {
        return this._propertyHandler("items count", itemsCount, Convert.toNumber);
    }
};

/**
 * The description of a StatusBar test object.
 * @param {Object} [props] Initializes a StatusBar test object using the supplied property bag.
 * @returns {StatusBar} the description object that was initialized.
 * @class StatusBar
 * @memberof StdWin
 * @extends StdWin.UiObjectBaseDescription
 * @mixes StdWin.UiObjectWithLayoutInfoDescription
 * @mixes Core.StatusBarDescriptionBaseBehavior
 * @mixes StdWin.StatusBarDescriptionBehavior
 */
function StatusBar(props) {
    var statusBarDesc = new UiObjectBaseDescription("StatusBar");
    Utils.extend(statusBarDesc, UiObjectWithLayoutInfoDescription);
    Utils.extend(statusBarDesc, StatusBarDescriptionBaseBehavior);
    Utils.extend(statusBarDesc, StatusBarDescriptionBehavior);
    statusBarDesc._defineByPropertyBag(props);
    return statusBarDesc;
}

/**
 * A StatusBar object
 * @constructor
 * @class StatusBarTO
 * @extends StdWin.UiObjectBaseTO
 * @mixes StdWin.UiObjectWithLayoutInfoBehaviour._properties
 * @mixes Core.ContainerBehavior
 * @mixes Core.WrappedItemExecutorBehavior
 * @mixes StdWin.StatusBarTOBehavior._properties
 * @memberof StdWin
 */
function StatusBarTO(session, description) {
    description = description || StatusBar();
    var statusBarTO = new UiObjectBaseTO("WinStatusBar", session, description);
    statusBarTO._mergeBehavior(UiObjectWithLayoutInfoBehaviour);
    statusBarTO._mergeBehavior(ContainerBehavior);
    statusBarTO._mergeBehavior(WrappedItemExecutorBehavior);
    statusBarTO._mergeBehavior(StatusBarTOBehavior);
    return statusBarTO;
}

/**
 * The behavior of the StatusBar object
 * @memberof StdWin
 * @ignore
 */
var StatusBarTOBehavior = {
    /**
     * @ignore
     * @memberof StdWin.StatusBarTOBehavior
     */
    _properties: {
        /**
         * Returns an array of all status bar items in the status bar.
         * @function
         * @returns {Promise<StatusBarItem[]>} a promise that is fulfilled with an array of all items in the status bar.
         */
        items: {
            wiredName: ContainerBehavior._allItemsDefaultWiredName,
            getter: function () {
                return this._items("\n");
            }
        }
    },

    _helpers: {
        /**
         * Gets the text of the status bar item.
         * @param {number} identifier The identifier of the status bar item.
         * @returns {Promise<string>} a promise that is fulfilled with the text of the status bar item.
         * @ignore
         */
        _getItemText: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "text");
        },

        /**
         * Gets the height of the status bar item.
         * @param {number} identifier The identifier of the status bar item.
         * @returns {Promise<number>} a promise that is fulfilled with the height of the status bar item.
         * @ignore
         */
        _getItemHeight: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "height");
        },

        /**
         * Gets the width of the status bar item.
         * @param {number} identifier The identifier of the status bar item.
         * @returns {Promise<number>} a promise that is fulfilled with the width of the status bar item.
         * @ignore
         */
        _getItemWidth: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "width");
        },

        /**
         * Get the x-coordinate of the status bar item.
         * @param {number} identifier The identifier of the status bar item.
         * @returns {Promise<number>} a promise that is fulfilled with the x-coordinate of the status bar item.
         * @ignore
         */
        _getItemX: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "x");
        },

        /**
         * Get the y-coordinate of the status bar item.
         * @param {number} identifier The identifier of the status bar item.
         * @returns {Promise<number>} a promise that is fulfilled with the y-coordinate of the status bar item.
         * @ignore
         */
        _getItemY: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "y");
        },

        /**
         * Creates a status bar item from the identifier and text representation.
         * @param {number} identifier The identifier of the status bar item.
         * @param {string} textRepresentation The text representation of the status bar item.
         * @returns {StatusBarItem} the StatusBarItem object.
         * @ignore
         */
        _createItem: function (identifier, textRepresentation) {
            return new StatusBarItem(this, identifier, textRepresentation);
        }
    },

    _additionalProperties: {
        itemsCount: {wiredName: ContainerBehavior._itemsCountDefaultWiredName}
    }
};

module.exports.StatusBar = StatusBar;
module.exports.StatusBarTO = StatusBarTO;
