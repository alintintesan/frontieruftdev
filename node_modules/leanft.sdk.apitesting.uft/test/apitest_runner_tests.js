// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/15/2016.
 */


var sinon = require("sinon");
var assert = require("assert");
var APITestRunner = require("../lib/apitest_runner.js").APITestRunner;

describe("APITestRunner tests",function(){
    var apiTestRunnerUnderTest;
    var sessionMock;
    beforeEach(function(){

        sessionMock = {
            _communication: {
                send: sinon.stub()
            },
            fireEvent: sinon.stub(),
            _promiseManager: {wrapPromiseFunctionWithNotifyEvents: function () {} }
        };

        sinon.stub(sessionMock._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
        apiTestRunnerUnderTest = new APITestRunner(sessionMock);
    });

    afterEach(function(){

    });

    describe("run method",function(){
        var runPromise;
        var funcPromise;
        beforeEach(function(){
            runPromise = {
                then: sinon.stub()
            };
            funcPromise = {
                then: sinon.stub()
            };
            sessionMock._communication.send.returns(runPromise);
            runPromise.then.returns(funcPromise);
        });

        it("should throw error if testPath is undefined", function () {
            assert.throws(function () {
                apiTestRunnerUnderTest.run();
            });
        });

        it("should throw error if testPath is null", function () {
            assert.throws(function () {
                apiTestRunnerUnderTest.run(null);
            });
        });

        it("should throw error if the input param is not a object", function () {
            assert.throws(function () {
                apiTestRunnerUnderTest.run("TestPath", "InputParam", "ActiveProfile");
            });
        });

        it("should send the run message if only testPath is defined",function(){
            apiTestRunnerUnderTest.run("TestPath");
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "RunApiTest", {
                "TestPath": "TestPath",
                "InParams": null,
                "ProfileName": null
            });

        });

        it("should send the run message if testPath and inParams are defined",function(){
            apiTestRunnerUnderTest.run("TestPath", {inParam1: "string1", inParam2: "string2"});
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "RunApiTest", {
                "TestPath": "TestPath",
                "InParams": {
                    inParam1: "string1",
                    inParam2: "string2"
                },
                "ProfileName": null
            });
        });

        it("should send the run message if testPath and profileName are defined",function(){
            apiTestRunnerUnderTest.run("TestPath", "ProfileName");
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "RunApiTest", {
                "TestPath": "TestPath",
                "InParams": null,
                "ProfileName": "ProfileName"
            });
        });

        it("should send the run message if testPath, inParams and profileName are null",function(){
            apiTestRunnerUnderTest.run("TestPath", null, null);
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "RunApiTest", {
                "TestPath": "TestPath",
                "InParams": null,
                "ProfileName": null
            });
        });

        it("should send the run message if testPath, inParams is null and profileName is undefined ",function(){
            apiTestRunnerUnderTest.run("TestPath", null);
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "RunApiTest", {
                "TestPath": "TestPath",
                "InParams": null,
                "ProfileName": null
            });
        });

        it("should send the run message if testPath, inParams is null and profileName is defined ",function(){
            apiTestRunnerUnderTest.run("TestPath", null, "ProfileName");
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "RunApiTest", {
                "TestPath": "TestPath",
                "InParams": null,
                "ProfileName": "ProfileName"
            });
        });


        it("should send the run message if testPath, inParams and profileName are defined",function(){
            apiTestRunnerUnderTest.run("TestPath", {inParam1: "string1", inParam2: "string2"}, "ProfileName");
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "RunApiTest", {
                "TestPath": "TestPath",
                "InParams": {
                    inParam1: "string1",
                    inParam2: "string2"
                },
                "ProfileName": "ProfileName"
            });
        });

        it("should throw error if the run result is null",function(){
            runPromise.then = function(result) {
                return result(null);
            };
            assert.throws(function(){
                apiTestRunnerUnderTest.run("TestPath");
            });
        });

        it("should throw error if the 'Result' is null in result",function(){
            runPromise.then = function(result) {
                return result({
                    "Result": null
                });
            };
            assert.throws(function(){
                apiTestRunnerUnderTest.run("TestPath");
            });
        });

        it("should throw error if the 'ReportZip' is null in result",function(){
            runPromise.then = function(result) {
                return result({
                    "Result": true,
                    "ReportZip": null
                });
            };
            assert.throws(function(){
                apiTestRunnerUnderTest.run("TestPath");
            });
        });

        it("should throw the given exception in case the error is returned",function(){
            var error = new Error("SomeError");
            error.statusCode = -100;
            runPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                apiTestRunnerUnderTest.run("TestPath");
            },/SomeError/);
        });

        describe("run API test with returned result",function(){
            beforeEach(function(){
                sinon.stub(apiTestRunnerUnderTest, "notifyWithEvents");
            });

            afterEach(function(){
                apiTestRunnerUnderTest.notifyWithEvents.restore();
            });

            it("should run API test with a result is returned",function(){
                var promiseMock = {
                    then: function (cb) {
                        return cb({
                            status: true,
                            outParams: {},
                            report: [1,2,3,4]
                        });
                    }
                };
                apiTestRunnerUnderTest.notifyWithEvents.returns(promiseMock);
                var res = apiTestRunnerUnderTest.run("TestPath");
                assert.deepEqual(res, {
                    status: true,
                    outParams: {}
                });
            });
        });
    });

    describe("_handleError method",function(){
        it("should throw the given exception if the error code is -300",function(){
            var error = new Error();
            error.statusCode = -300;

            assert.throws(function(){
                apiTestRunnerUnderTest._handleError(error);
            },/The specified test path was not found./);
        });

        it("should throw the given exception if the error code is -301",function(){
            var error = new Error();
            error.statusCode = -301;

            assert.throws(function(){
                apiTestRunnerUnderTest._handleError(error);
            },/The API test run failed. Make sure the APITestRunner.Run arguments contain the correct values for your API test./);
        });

        it("should throw the given exception in case the error code are not -300 and -301",function(){
            var error = new Error("SomeError");
            error.statusCode = -100;

            assert.throws(function(){
                apiTestRunnerUnderTest._handleError(error);
            },/SomeError/);
        });
    });
});
