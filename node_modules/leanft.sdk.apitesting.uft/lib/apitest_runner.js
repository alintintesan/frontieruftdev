// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/15/2016.
 */


var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var Logger = Core.Logger;

var ReplayErrorsBehavior = Core.ReplayErrorsBehavior;
var NotifyEventsBehavior = Core.NotifyEventsBehavior;

/**
 * APITesting namespace
 * @namespace APITesting
 */
/**
 * A class for creating an APITestRunner.
 * @constructor APITestRunner
 * @memberof APITesting
 * @class APITestRunner
 */
function APITestRunner(session) {
    this._logger = new Logger("APITestRunner");
    if(session === null){
        throw new Error("The communication channel is mandatory for creating APITestRunner");
    }

    this._session = session;

    //extends other behaviors
    ObjUtils.extend(this,ReplayErrorsBehavior);
    ObjUtils.extend(this,NotifyEventsBehavior);
}

/**
 * @memberof APITesting
 * @ignore
 */
APITestRunner.prototype = {
    _logger: null,
    _session: null,

    /*jshint eqnull:true */
    /**
     * Runs the API test.
     * @param {string} testPath The folder path of API test.
     * @param {Object} [inParams] The list of input parameters to run the API test.
     * @param {string} [profileName] The active profile.
     * @returns {Promise<Object>} a promise that is fulfilled with the results of the API test that ran. <br/>
     * The returned object contains two keys: <br/>
     * status - the result of the API test: true = passed;  false = failed <br/>
     * outParams - the list of returned output parameters from the API test with the key and value
     */
    run: function(testPath, inParams, profileName) {
        var func = function() {
            this._logger.trace("run: Called for test path: " + testPath);

            if (testPath == null) {
                throw new Error("The test path cannot be null.");
            }
            if (inParams == null) {
                inParams = null;
            }
            if (profileName == null) {
                profileName = null;
            }

            if (inParams != null && profileName != null) {
                if (typeof inParams !== "object") {
                    throw new Error("The data type of input parameters must be object.");
                }
            }

            if (inParams != null && profileName == null) {
                if (typeof inParams !== "object") {
                    profileName = inParams;
                    inParams = null;
                }
            }

            var runApiTestData = {
                TestPath: testPath,
                InParams: inParams,
                ProfileName: profileName
            };

            return this._session._communication.send("RunApiTest", runApiTestData).then(function (runResult) {
                this._logger.trace("run: The result of the run is \n" + JSON.stringify(runResult));
                if (runResult === null) {
                    throw new Error("The run result cannot be null");
                }

                if(runResult.Result == null){
                    throw new Error("InvalidFormatException: Format not supported.");
                }
                if(runResult.ReportZip == null){
                    throw new Error("InvalidFormatException: Format not supported.");
                }

                return {
                    status: runResult.Result,
                    outParams: runResult.OutParams,
                    report: runResult.ReportZip
                };

            }.bind(this),  this._handleError.bind(this));
        };
        var options = { sender: this, onError:false, calleeArguments: arguments, type: "APITestRunner"};
        return this.notifyWithEvents(func, arguments, options).then(function (res) {
            return {
                status: res.status,
                outParams: res.outParams
            };
        });
    },

    /**
     * Handles the errors that are returned from the runtime engine. The method should be used in the rejection of the promise.
     * @param error The exception object. If an error is returned from the runtime engine, a field of statusCode should be included.
     * @private
     */
    _handleError: function(error){
        if(error.statusCode === -300 ){
            throw new Error("The specified test path was not found.");
        }
        if(error.statusCode === -301){
            throw new Error("The API test run failed. Make sure the APITestRunner.Run arguments contain the correct values for your API test.");
        }
        return this.handleReplayError(error);
    }
};

module.exports.APITestRunner = APITestRunner;