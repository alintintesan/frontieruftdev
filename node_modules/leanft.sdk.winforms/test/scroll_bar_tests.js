// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/21/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("ScrollBar Description", function () {

    var ScrollBar = require("../lib/scroll_bar.js").ScrollBar;
    var scrollBarDescUnderTest;

    beforeEach(function () {
        scrollBarDescUnderTest = ScrollBar();
    });

    describe("position method", function () {
        it("should add 'Value' to _properties when value is given", function () {
            scrollBarDescUnderTest.position(100);
            assert.strictEqual(scrollBarDescUnderTest._properties["Value"], 100);
        });

        it("should add 'Value' to _properties when value is given in string", function () {
            scrollBarDescUnderTest.position('100');
            assert.strictEqual(scrollBarDescUnderTest._properties["Value"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = scrollBarDescUnderTest.position(100);
            assert.strictEqual(result, scrollBarDescUnderTest);
        });

        it("should remove 'Value' from _properties when value is null", function () {
            scrollBarDescUnderTest._properties["Value"] = 100;
            scrollBarDescUnderTest.position(null);
            assert(!("Position" in scrollBarDescUnderTest._properties));
        });

        it("should return the value of 'Value' from _properties when value is not given", function () {
            scrollBarDescUnderTest._properties["Value"] = 100;
            var result = scrollBarDescUnderTest.position();
            assert.equal(result, 100);
        });
    });
});



describe("ScrollBar Test Object", function () {

    var ScrollBarTO = require("../lib/scroll_bar.js").ScrollBarTO;
    var scrollBarTOUnderTest;

    beforeEach(function () {
        scrollBarTOUnderTest = new ScrollBarTO();
        sinon.stub(scrollBarTOUnderTest, "_executeWithEventsOnError");
        sinon.stub(scrollBarTOUnderTest, "_getROProperty");
    });

    afterEach(function () {
        scrollBarTOUnderTest._executeWithEventsOnError.restore();
        scrollBarTOUnderTest._getROProperty.restore();
    });

    describe("position method", function () {

        it("should return the execution promise", function () {
            var executionPromise = {};
            scrollBarTOUnderTest._getROProperty.returns(executionPromise);
            var res = scrollBarTOUnderTest.position();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Value' with correct parameters", function () {
            scrollBarTOUnderTest.position();
            sinon.assert.calledOnce(scrollBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(scrollBarTOUnderTest._getROProperty, "Value", sinon.match({}));
        });
    });

    describe("errorText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            scrollBarTOUnderTest._executeWithEventsOnError.returns(executionPromise);
            var res = scrollBarTOUnderTest.errorText();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'GetErrorProviderText'", function () {
            scrollBarTOUnderTest.errorText();
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEventsOnError, sinon.match({}), "GetErrorProviderText");
        });
    });
});
