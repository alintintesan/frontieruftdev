// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/23/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ComboBox Description", function () {
    var ComboBox = require("../lib/combo_box.js").ComboBox;
    var comboBoxDescriptionUnderTest;

    beforeEach(function () {
        comboBoxDescriptionUnderTest = ComboBox();
    });

    describe("Constructor", function () {
        it("should assign 'WinForms' and 'ComboBox' LeanFT type", function () {
            comboBoxDescriptionUnderTest = new ComboBox();
            assert.deepEqual(comboBoxDescriptionUnderTest.leanFTType, {
                technology: "WinForms",
                leanftType: "ComboBox"
            });
        });
    });

    describe("items method", function () {
        it("should add 'all items' to _properties when value is given", function () {
            comboBoxDescriptionUnderTest.items(["item1", "item2"]);
            assert.strictEqual(comboBoxDescriptionUnderTest._properties["all items"], "item1\nitem2");
        });

        it("should add 'all items' to _properties when value is given using property bag", function () {
            comboBoxDescriptionUnderTest = ComboBox({
                items: ["item1", "item2"]
            });
            assert.strictEqual(comboBoxDescriptionUnderTest._properties["all items"], "item1\nitem2");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = comboBoxDescriptionUnderTest.items(["item1", "item2"]);
            assert.strictEqual(result, comboBoxDescriptionUnderTest);
        });

        it("should remove 'all items' from _properties when value is null", function () {
            comboBoxDescriptionUnderTest._properties["all items"] = "item1\nitem2";
            comboBoxDescriptionUnderTest.items(null);
            assert(!("all items" in comboBoxDescriptionUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties when value is not given", function () {
            comboBoxDescriptionUnderTest._properties["all items"] = "item1\nitem2";
            var value = comboBoxDescriptionUnderTest.items();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'all items' in _properties when get is called", function () {
            comboBoxDescriptionUnderTest._properties["all items"] = "item1\nitem2";
            comboBoxDescriptionUnderTest.items();
            assert.strictEqual(comboBoxDescriptionUnderTest._properties["all items"], "item1\nitem2");
        });
    });

    describe("selectedItem method", function () {
        it("should add 'SelectedItem' to _properties when value is given", function () {
            comboBoxDescriptionUnderTest.selectedItem("selected");
            assert.strictEqual(comboBoxDescriptionUnderTest._properties["selection"], "selected");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = comboBoxDescriptionUnderTest.selectedItem("selected");
            assert.strictEqual(result, comboBoxDescriptionUnderTest);
        });

        it("should remove 'SelectedItem' from _properties when value is null", function () {
            comboBoxDescriptionUnderTest._properties["selection"] = "selected";
            comboBoxDescriptionUnderTest.selectedItem(null);
            assert(!("selection" in comboBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'SelectedItem' from _properties when value is not given", function () {
            comboBoxDescriptionUnderTest._properties["selection"] = "selected";
            var selected = comboBoxDescriptionUnderTest.selectedItem();
            assert.equal(selected, "selected");
        });
    });

    describe("items count method", function () {
        it("should add 'items count' to _properties when value is given", function () {
            comboBoxDescriptionUnderTest.itemsCount(100);
            assert.strictEqual(comboBoxDescriptionUnderTest._properties["items count"], 100);
        });

        it("should add 'items count' to _properties when value is given in string", function () {
            comboBoxDescriptionUnderTest.itemsCount('100');
            assert.strictEqual(comboBoxDescriptionUnderTest._properties["items count"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = comboBoxDescriptionUnderTest.itemsCount(100);
            assert.strictEqual(result, comboBoxDescriptionUnderTest);
        });

        it("should remove 'items count' from _properties when value is null", function () {
            comboBoxDescriptionUnderTest._properties["items count"] = 100;
            comboBoxDescriptionUnderTest.itemsCount(null);
            assert(!("items count" in comboBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'items count' from _properties when value is not given", function () {
            comboBoxDescriptionUnderTest._properties["items count"] = 100;
            var result = comboBoxDescriptionUnderTest.itemsCount();
            assert.equal(result, 100);
        });
    });
});

describe("ComboBox Test Object", function () {
    var ComboBoxTO = require("../lib/combo_box.js").ComboBoxTO;
    var comboBoxTestObjectUnderTest;

    beforeEach(function () {
        comboBoxTestObjectUnderTest = new ComboBoxTO();
        sinon.stub(comboBoxTestObjectUnderTest, "_getROProperty");
        sinon.stub(comboBoxTestObjectUnderTest, "_executeWithEvents");
        sinon.stub(comboBoxTestObjectUnderTest, "_executeWithEventsOnError");
    });

    describe("selectedItem method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            comboBoxTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = comboBoxTestObjectUnderTest.selectedItem();
            assert.equal(res, executionPromise);
        });

        it("should execute selectedItem with correct parameters", function () {
            comboBoxTestObjectUnderTest.selectedItem();
            sinon.assert.calledOnce(comboBoxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(comboBoxTestObjectUnderTest._getROProperty,"selection", sinon.match({}));
        });
    });

    describe("items method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("Item1\nItem2");
            }
        };
        it("should query the property 'all items'", function () {
            comboBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            comboBoxTestObjectUnderTest.items();
            sinon.assert.calledOnce(comboBoxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(comboBoxTestObjectUnderTest._getROProperty, "all items");
        });

        it("should return a list  with items if items returns from _getROProperty", function () {
            comboBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = comboBoxTestObjectUnderTest.items();
            assert.deepEqual(res, ["Item1", "Item2"]);
        });
    });



    describe("select method", function () {
        it("should throw error if indexOrItem is undefined", function () {
            assert.throws(function () {
                comboBoxTestObjectUnderTest.select();
            });
        });

        it("should throw error if indexOrItem is null", function () {
            assert.throws(function () {
                comboBoxTestObjectUnderTest.select(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            comboBoxTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = comboBoxTestObjectUnderTest.select(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Select' if indexOrItem is a number", function () {
            comboBoxTestObjectUnderTest.select(10);
            sinon.assert.calledOnce(comboBoxTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(comboBoxTestObjectUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Select", 10);
        });
        
        it("should execute _executeWithEvents 'Select' if indexOrItem is a string", function () {
            comboBoxTestObjectUnderTest.select("item1");
            sinon.assert.calledOnce(comboBoxTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(comboBoxTestObjectUnderTest._executeWithEvents, sinon.match({ 0: "item1" }), "Select", "item1");
        });
    });

    describe("errorText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            comboBoxTestObjectUnderTest._executeWithEventsOnError.returns(executionPromise);
            var res = comboBoxTestObjectUnderTest.errorText();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'GetErrorProviderText'", function () {
            comboBoxTestObjectUnderTest.errorText();
            sinon.assert.calledOnce(comboBoxTestObjectUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(comboBoxTestObjectUnderTest._executeWithEventsOnError, sinon.match({}), "GetErrorProviderText");
        });
    });

 
});

