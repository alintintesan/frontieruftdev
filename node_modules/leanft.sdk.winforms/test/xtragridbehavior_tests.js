// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("XtraGrid Test", function () {
    var XtraGrid = require("../lib/xtragridbehavior.js").XtraGrid;
    var xtraGridUnderTest;
    var ownerTableMock;

    beforeEach(function () {
        ownerTableMock = {
            _executeWithEvents: sinon.stub(),
            _executeNotWrapped: sinon.stub(),
            _executeCommand: sinon.stub()
        };
        xtraGridUnderTest = new XtraGrid(ownerTableMock);
    });

    describe("setView method", function () {

        it("should return the execution promise", function () {
            var executionPromise = {};
            ownerTableMock._executeWithEvents.returns(executionPromise);
            var res = xtraGridUnderTest.setView();
            assert.equal(res, executionPromise);
        });

        it("should correctly process top-level view", function () {
            xtraGridUnderTest.setView();
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({}), "SetView", "");
        });

        it("should correctly process one-level view", function () {
            var expected = "0 CustOrders;";
            var params = [0, "CustOrders"];
            xtraGridUnderTest.setView(params);

            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({0: params}), "SetView", expected);
        });

        it("should correctly process two-level view", function () {
            var expected = "0 CustOrders; 3 OrderDetails;";
            var param1 = [0, "CustOrders"], param2 = [3, "OrderDetails"];
            xtraGridUnderTest.setView(param1, param2);

            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({0: param1, 1: param2}), "SetView", expected);
        });
    });

});