// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/12/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var Position = Core.Position;

describe("UI Object Base Description", function () {

    var UiObjectBaseDescription = require("../lib/ui_object_base.js").UiObjectBaseDescription;
    var uiObjectBaseDescriptionUnderTest;

    beforeEach(function () {
        uiObjectBaseDescriptionUnderTest = new UiObjectBaseDescription();
    });

    describe("Constructor", function () {
        it("should assign 'WinForms' and LeanFT type", function () {
            uiObjectBaseDescriptionUnderTest = new UiObjectBaseDescription("Window");
            assert.deepEqual(uiObjectBaseDescriptionUnderTest.leanFTType, {
                technology: "WinForms",
                leanftType: "Window"
            });
        });
    });

    describe("windowClassRegExp method", function () {
        it("should add 'regexpwndclass' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.windowClassRegExp("windowClassRegExp");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["regexpwndclass"], "windowClassRegExp");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.windowClassRegExp("windowClassRegExp");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'regexpwndclass' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["regexpwndclass"] = "windowClassRegExp";
            uiObjectBaseDescriptionUnderTest.windowClassRegExp(null);
            assert(!("regexpwndclass" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'regexpwndclass' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["regexpwndclass"] = "windowClassRegExp";
            var result = uiObjectBaseDescriptionUnderTest.windowClassRegExp();
            assert.equal(result, "windowClassRegExp");
        });
    });

    describe("nativeClass method", function () {
        it("should add 'nativeclass' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.nativeClass("native");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["nativeclass"], "native");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.nativeClass("native");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'nativeClass' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["nativeclass"] = "native";
            uiObjectBaseDescriptionUnderTest.nativeClass(null);
            assert(!("nativeClass" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'nativeclass' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["nativeclass"] = "native";
            var native = uiObjectBaseDescriptionUnderTest.nativeClass();
            assert.equal(native, "native");
        });
    });

    describe("windowId method", function () {
        it("should add 'window id' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.windowId(100);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["window id"], 100);
        });

        it("should add 'window id' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.windowId('100');
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["window id"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.windowId(100);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'window id' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["window id"] = 100;
            uiObjectBaseDescriptionUnderTest.windowId(null);
            assert(!("window id" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'window id' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["window id"] = 100;
            var result = uiObjectBaseDescriptionUnderTest.windowId();
            assert.equal(result, 100);
        });
    });

    describe("isChildWindow method", function () {
        it("should add 'is child window' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.isChildWindow(true);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["is child window"], true);
        });

        it("should add 'is child window' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.isChildWindow("true");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["is child window"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.isChildWindow(true);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'is child window' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["is child window"] = true;
            uiObjectBaseDescriptionUnderTest.isChildWindow(null);
            assert(!("is child window" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'is child window' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["is child window"] = true;
            var result = uiObjectBaseDescriptionUnderTest.isChildWindow();
            assert.equal(result, true);
        });
    });

    describe("isOwnedWindow method", function () {
        it("should add 'is owned window' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.isOwnedWindow(true);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["is owned window"], true);
        });

        it("should add 'is owned window' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.isOwnedWindow("true");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["is owned window"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.isOwnedWindow(true);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'is owned window' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["is owned window"] = true;
            uiObjectBaseDescriptionUnderTest.isOwnedWindow(null);
            assert(!("is owned window" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'is owned window' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["is owned window"] = true;
            var result = uiObjectBaseDescriptionUnderTest.isOwnedWindow();
            assert.equal(result, true);
        });
    });

    describe("objectName method", function () {
        it("should add 'swfname' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.objectName("objectName");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["swfname"], "objectName");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.objectName("objectName");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'swfname' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["swfname"] = "objectName";
            uiObjectBaseDescriptionUnderTest.objectName(null);
            assert(!("swfname" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'swfname' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["swfname"] = "objectName";
            var result = uiObjectBaseDescriptionUnderTest.objectName();
            assert.equal(result, "objectName");
        });
    });

    describe("fullNamePath method", function () {
        it("should add 'swfname path' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.fullNamePath("fullNamePath");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["swfname path"], "fullNamePath");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.fullNamePath("fullNamePath");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'swfname path' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["swfname path"] = "fullNamePath";
            uiObjectBaseDescriptionUnderTest.fullNamePath(null);
            assert(!("swfname path" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'swfname path' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["swfname path"] = "fullNamePath";
            var result = uiObjectBaseDescriptionUnderTest.fullNamePath();
            assert.equal(result, "fullNamePath");
        });
    });

    describe("fullType method", function () {
        it("should add 'swftypename' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.fullType("fullType");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["swftypename"], "fullType");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.fullType("fullType");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'swftypename' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["swftypename"] = "fullType";
            uiObjectBaseDescriptionUnderTest.fullType(null);
            assert(!("swftypename" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'swftypename' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["swftypename"] = "fullType";
            var result = uiObjectBaseDescriptionUnderTest.fullType();
            assert.equal(result, "fullType");
        });
    });

    describe("objectProperties method", function () {

    });
});

describe("UI Object Base Test Object", function () {

    var UiObjectBaseTO = require("../lib/ui_object_base.js").UiObjectBaseTO;
    var uiObjectBaseTOUnderTest;

    beforeEach(function () {
        uiObjectBaseTOUnderTest = new UiObjectBaseTO();
        sinon.stub(uiObjectBaseTOUnderTest, "_getROProperty");
        sinon.stub(uiObjectBaseTOUnderTest, "_executeWithEvents");
    });

    afterEach(function () {
        uiObjectBaseTOUnderTest._getROProperty.restore();
        uiObjectBaseTOUnderTest._executeWithEvents.restore();
    });

    describe("isChildWindow method", function () {
        it("should execute _getROProperty 'is child window'", function () {
            uiObjectBaseTOUnderTest.isChildWindow();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "is child window", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.isChildWindow();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isOwnedWindow method", function () {
        it("should execute _getROProperty 'is owned window'", function () {
            uiObjectBaseTOUnderTest.isOwnedWindow();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "is owned window", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.isOwnedWindow();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("objectName method", function () {
        it("should execute _getROProperty 'swfname'", function () {
            uiObjectBaseTOUnderTest.objectName();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "swfname", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.objectName();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("fullNamePath method", function () {
        it("should execute _getROProperty 'swfname path'", function () {
            uiObjectBaseTOUnderTest.fullNamePath();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "swfname path", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.fullNamePath();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("fullType method", function () {
        it("should execute _getROProperty 'swftypename'", function () {
            uiObjectBaseTOUnderTest.fullType();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "swftypename", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.fullType();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("text method", function () {
        it("should execute _getROProperty 'text'", function () {
            uiObjectBaseTOUnderTest.text();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.text();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("windowClassRegExp method", function () {
        it("should execute _getROProperty 'RegExpWndClass'", function () {
            uiObjectBaseTOUnderTest.windowClassRegExp();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "RegExpWndClass", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.windowClassRegExp();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("windowId method", function () {
        it("should execute _getROProperty 'window id'", function () {
            uiObjectBaseTOUnderTest.windowId();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "window id", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.windowId();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("getObjectProperty method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(executionPromise);
            var res = uiObjectBaseTOUnderTest.getObjectProperty('propName');
            assert.equal(res, executionPromise);
        });

        it("should throw error if propName is undefined", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.getObjectProperty();
            });
        });

        it("should throw error if propName is null", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.getObjectProperty(null);
            });
        });
    });

    describe("fireEvent method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            uiObjectBaseTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = uiObjectBaseTOUnderTest.fireEvent('eventType', ['a', 'b']);
            assert.equal(res, executionPromise);
        });

        it("should throw error if type is undefined", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.fireEvent();
            });
        });

        it("should throw error if type is null", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.fireEvent(null);
            });
        });
    });
});
