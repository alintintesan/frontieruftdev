// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;

describe("DataGridBehaviorBase Test", function () {

    var DataGridBehaviorBase = require("../lib/datagridbehaviorbase.js").DataGridBehaviorBase;
    var dataGridBehaviorBaseUnderTest;
    var ownerTableMock;

    beforeEach(function () {
        ownerTableMock = {
            _executeWithEvents: sinon.stub(),
            _executeNotWrapped: sinon.stub(),
            _executeCommand: sinon.stub()
        };
        dataGridBehaviorBaseUnderTest = ObjectUtils.mergeTestBehavior(DataGridBehaviorBase);
        dataGridBehaviorBaseUnderTest._ownerTable = ownerTableMock;
    });

    //describe("cells method", function () {
    //    it("should execute _cells with correct parameter", function () {
    //        dataGridBehaviorBaseUnderTest._cells = sinon.stub();
    //        dataGridBehaviorBaseUnderTest.cells(10, 20);
    //        sinon.assert.calledOnce(dataGridBehaviorBaseUnderTest._cells);
    //        sinon.assert.calledWith(dataGridBehaviorBaseUnderTest._cells, 10, 20);
    //    });
//
    //    it("should execute _cells with correct parameter", function () {
    //        dataGridBehaviorBaseUnderTest._cells = sinon.stub();
    //        dataGridBehaviorBaseUnderTest.cells(10);
    //        sinon.assert.calledOnce(dataGridBehaviorBaseUnderTest._cells);
    //        sinon.assert.calledWith(dataGridBehaviorBaseUnderTest._cells, 10);
    //    });
//
    //    it("should execute _cells with correct parameter", function () {
    //        dataGridBehaviorBaseUnderTest._cells = sinon.stub();
    //        dataGridBehaviorBaseUnderTest.cells();
    //        sinon.assert.calledOnce(dataGridBehaviorBaseUnderTest._cells);
    //        sinon.assert.calledWith(dataGridBehaviorBaseUnderTest._cells);
    //    });
//
    //    it("should call _createCell if row is not null and column is not null", function () {
    //        dataGridBehaviorBaseUnderTest._createCell = sinon.stub();
    //        dataGridBehaviorBaseUnderTest.cells(2, 3);
    //        sinon.assert.calledOnce(dataGridBehaviorBaseUnderTest._createCell);
    //        sinon.assert.calledWith(dataGridBehaviorBaseUnderTest._createCell, 2, 3);
    //    });
    //});

    describe("activateColumn method", function () {
        it("should execute command 'ActivateColumn' if the 'column' parameter is an valid number", function () {
            dataGridBehaviorBaseUnderTest.activateColumn(0);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: 0
            }), "ActivateColumn", 0);
        });

        it("should throw error if the 'column' parameter is null", function () {
            assert.throws(function () {
                dataGridBehaviorBaseUnderTest.activateColumn(null);
            });
        });

        it("should throw error if the 'column' parameter is undefined", function () {
            assert.throws(function () {
                dataGridBehaviorBaseUnderTest.activateColumn();
            });
        });
    });

    describe("selectColumn method", function () {
        it("should execute command 'SelectColumn' if the 'column' parameter is an valid number", function () {
            dataGridBehaviorBaseUnderTest.selectColumn(0);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: 0
            }), "SelectColumn", 0);
        });

        it("should throw error if the 'column' parameter is null", function () {
            assert.throws(function () {
                dataGridBehaviorBaseUnderTest.selectColumn(null);
            });
        });

        it("should throw error if the 'column' parameter is undefined", function () {
            assert.throws(function () {
                dataGridBehaviorBaseUnderTest.selectColumn();
            });
        });
    });
});