// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;

describe("ComponentOneGridBehavior Test", function () {
    var ComponentOneGridBehavior = require("../lib/componentonegridbehavior.js").ComponentOneGridBehavior;
    var componentOneGridBehaviorUnderTest;
    var ownerTableMock;

    beforeEach(function () {
        ownerTableMock = {
            _executeWithEvents: sinon.stub(),
            _executeNotWrapped: sinon.stub(),
            _executeCommand: sinon.stub(),
            _executeWithEventsOnItem: sinon.stub(),
            _executeWithEventsOnItemOnError: sinon.stub()
        };
        componentOneGridBehaviorUnderTest = ObjectUtils.mergeTestBehavior(ComponentOneGridBehavior);
        componentOneGridBehaviorUnderTest._ownerTable = ownerTableMock;
    });

    describe("activateCell method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.activateCell();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.activateCell(null);
            });
        });

        it("should throw error if col is undefined", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.activateCell(1);
            });
        });

        it("should throw error if col is null", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.activateCell(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            ownerTableMock._executeWithEvents.returns(executionPromise);
            var res = componentOneGridBehaviorUnderTest.activateCell(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEventsOnItem 'ActivateCell' if row is a number and col is a number", function () {
            componentOneGridBehaviorUnderTest.activateCell(10, 10);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "ActivateCell", 10, 10);
        });
    });

    describe("makeCellVisible method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.makeCellVisible();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.makeCellVisible(null);
            });
        });

        it("should throw error if col is undefined", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.makeCellVisible(1);
            });
        });

        it("should throw error if col is null", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.makeCellVisible(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            ownerTableMock._executeWithEvents.returns(executionPromise);
            var res = componentOneGridBehaviorUnderTest.makeCellVisible(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEventsOnItem 'MakeCellVisible' if row is a number and col is a number", function () {
            componentOneGridBehaviorUnderTest.makeCellVisible(10, 10);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "MakeCellVisible", 10, 10);
        });
    });

    describe("collapseRow method", function () {
        it("should execute command 'CollapseRow' if the 'column' parameter is an valid number", function () {
            componentOneGridBehaviorUnderTest.collapseRow(0);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: 0
            }), "CollapseRow", 0);
        });

        it("should throw error if the 'column' parameter is null", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.collapseRow(null);
            });
        });

        it("should throw error if the 'column' parameter is undefined", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.collapseRow();
            });
        });
    });

    describe("expandRow method", function () {
        it("should execute command 'ExpandRow' if the 'column' parameter is an valid number", function () {
            componentOneGridBehaviorUnderTest.expandRow(0);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: 0
            }), "ExpandRow", 0);
        });

        it("should throw error if the 'column' parameter is null", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.expandRow(null);
            });
        });

        it("should throw error if the 'column' parameter is undefined", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.expandRow();
            });
        });
    });

    describe("openCellElement method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.openCellElement();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.openCellElement(null);
            });
        });

        it("should throw error if col is undefined", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.openCellElement(1);
            });
        });

        it("should throw error if col is null", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.openCellElement(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            ownerTableMock._executeWithEvents.returns(executionPromise);
            var res = componentOneGridBehaviorUnderTest.openCellElement(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEventsOnItem 'OpenCellElement' if row is a number and col is a number", function () {
            componentOneGridBehaviorUnderTest.openCellElement(10, 10);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "OpenCellElement", 10, 10);
        });
    });

    describe("selectCell method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.selectCell();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.selectCell(null);
            });
        });

        it("should throw error if col is undefined", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.selectCell(1);
            });
        });

        it("should throw error if col is null", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.selectCell(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            ownerTableMock._executeWithEvents.returns(executionPromise);
            var res = componentOneGridBehaviorUnderTest.selectCell(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEventsOnItem 'SelectCell' if row is a number and col is a number", function () {
            componentOneGridBehaviorUnderTest.selectCell(10, 10);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "SelectCell", 10, 10);
        });
    });

    describe("selectColumn method", function () {
        it("should execute command 'SelectColumn' if the 'columnsOrIndices' parameter are indices", function () {
            componentOneGridBehaviorUnderTest.selectColumn(3);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: 3
            }), "SelectColumn", 3);
        });

        it("should execute command 'SelectColumn' and 'ExtendColumn'  if the 'columnsOrIndices' parameter are the headers of the columns", function () {
            componentOneGridBehaviorUnderTest.selectColumn("col header1");
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: "col header1"
            }), "SelectColumn", "col header1");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            ownerTableMock._executeWithEvents.returns(promiseMock);
            var res = componentOneGridBehaviorUnderTest.selectColumn(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.selectColumn(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.selectColumn();
            });
        });
    });

    describe("setFilter method", function () {
        it("should throw error if column is undefined", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.setFilter();
            });
        });

        it("should throw error if column is null", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.setFilter(null);
            });
        });

        it("should throw error if filter is undefined", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.setFilter(1);
            });
        });

        it("should throw error if filter is null", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.setFilter(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            ownerTableMock._executeWithEvents.returns(executionPromise);
            var res = componentOneGridBehaviorUnderTest.setFilter(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEventsOnItem 'SelectCell' if row is a number and col is a number", function () {
            componentOneGridBehaviorUnderTest.setFilter(10, 10);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "SetFilter", 10, 10);
        });
    });

    describe("sort method", function () {
        it("should execute command 'Sort' if the 'columnsOrIndices' parameter are indices", function () {
            componentOneGridBehaviorUnderTest.sort(3);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: 3
            }), "Sort", 3);
        });

        it("should execute command 'Sort' and 'ExtendColumn'  if the 'columnsOrIndices' parameter are the headers of the columns", function () {
            componentOneGridBehaviorUnderTest.sort("col header1");
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: "col header1"
            }), "Sort", "col header1");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            ownerTableMock._executeWithEvents.returns(promiseMock);
            var res = componentOneGridBehaviorUnderTest.sort(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.sort(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.sort();
            });
        });
    });

    describe("sortDescending method", function () {
        it("should execute command 'Sort' if the 'columnsOrIndices' parameter are indices", function () {
            componentOneGridBehaviorUnderTest.sortDescending(3);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: 3
            }), "Sort", 3);
        });

        it("should execute command 'Sort' and 'ExtendColumn'  if the 'columnsOrIndices' parameter are the headers of the columns", function () {
            componentOneGridBehaviorUnderTest.sortDescending("col header1");
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: "col header1"
            }), "Sort", "col header1");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            ownerTableMock._executeWithEvents.returns(promiseMock);
            var res = componentOneGridBehaviorUnderTest.sortDescending(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.sortDescending(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                componentOneGridBehaviorUnderTest.sortDescending();
            });
        });
    });

    describe("cells method", function () {
        it("should execute _cells with correct parameter", function () {
            componentOneGridBehaviorUnderTest._cells = sinon.stub();
            componentOneGridBehaviorUnderTest.cells(10, 20);
            sinon.assert.calledOnce(componentOneGridBehaviorUnderTest._cells);
            sinon.assert.calledWith(componentOneGridBehaviorUnderTest._cells, 10, 20);
        });

        it("should execute _cells with correct parameter", function () {
            componentOneGridBehaviorUnderTest._cells = sinon.stub();
            componentOneGridBehaviorUnderTest.cells(10);
            sinon.assert.calledOnce(componentOneGridBehaviorUnderTest._cells);
            sinon.assert.calledWith(componentOneGridBehaviorUnderTest._cells, 10);
        });

        it("should execute _cells with correct parameter", function () {
            componentOneGridBehaviorUnderTest._cells = sinon.stub();
            componentOneGridBehaviorUnderTest.cells();
            sinon.assert.calledOnce(componentOneGridBehaviorUnderTest._cells);
            sinon.assert.calledWith(componentOneGridBehaviorUnderTest._cells);
        });
    });

    describe("getCell method", function () {

        it("should return cell with correct parameters", function () {
            var cell = componentOneGridBehaviorUnderTest.getCell(10, "column6");
            cell.setValue("something");

            sinon.assert.calledOnce(ownerTableMock._executeWithEventsOnItem);
            sinon.assert.calledWith(ownerTableMock._executeWithEventsOnItem, cell, cell._ownerTable._setCellValue, 10, "column6", "something");
        });
    });
});