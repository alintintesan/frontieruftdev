// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/16/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var MouseButton = Core.MouseButton;

describe("TabControl Test Object", function () {

    var TabControlTO = require("../lib/tab_control.js").TabControlTO;
    var tabControlTOUnderTest;

    beforeEach(function () {
        tabControlTOUnderTest = new TabControlTO();
        sinon.stub(tabControlTOUnderTest, "_executeWithEvents");
        sinon.stub(tabControlTOUnderTest, "_getROProperty");
    });

    afterEach(function () {
        tabControlTOUnderTest._executeWithEvents.restore();
        tabControlTOUnderTest._getROProperty.restore();
    });

    describe("tabs method", function () {
        it("should query the properties 'all items'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };
            tabControlTOUnderTest._getROProperty.returns(promiseMock);
            tabControlTOUnderTest.tabs();
            sinon.assert.calledOnce(tabControlTOUnderTest._getROProperty);
            sinon.assert.calledWith(tabControlTOUnderTest._getROProperty, "all items");
        });

        it("should return empty list from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            tabControlTOUnderTest._getROProperty.returns(promiseMock);
            var res = tabControlTOUnderTest.tabs();
            assert.deepEqual(res, []);
        });

        it("should return a list with tab names from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            tabControlTOUnderTest._getROProperty.returns(promiseMock);
            var res = tabControlTOUnderTest.tabs();
            assert.deepEqual(res, ["Item1", "Item2"]);
        });
    });

    describe("selectedTab method", function () {
         it("should return the execution promise", function () {
            var executionPromise = {};
            tabControlTOUnderTest._getROProperty.returns(executionPromise);
            var res = tabControlTOUnderTest.selectedTab();
            assert.equal(res, executionPromise);
        });

        it("should execute selectedTab with correct parameters", function () {
            tabControlTOUnderTest.selectedTab();
            sinon.assert.calledOnce(tabControlTOUnderTest._getROProperty);
            sinon.assert.calledWith(tabControlTOUnderTest._getROProperty,"selection", sinon.match({}));
        });
    });

    describe("select method", function () {
        it("should throw error if tab is undefined", function () {
            assert.throws(function () {
                tabControlTOUnderTest.select();
            });
        });

        it("should throw error if tab is null", function () {
            assert.throws(function () {
                tabControlTOUnderTest.select(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tabControlTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = tabControlTOUnderTest.select(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Select' if item is a number", function () {
            tabControlTOUnderTest.select(10);
            sinon.assert.calledOnce(tabControlTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Select", 10, 0);
        });

        it("should execute _executeWithEvents 'Select' if item is a string", function () {
            tabControlTOUnderTest.select("identifier");
            sinon.assert.calledOnce(tabControlTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTOUnderTest._executeWithEvents, sinon.match({ 0: "identifier" }), "Select", "identifier", 0);
        });

        it("should execute _executeWithEvents 'Select' with Mouse Button Left if null", function () {
            tabControlTOUnderTest.select(10, null);
            sinon.assert.calledOnce(tabControlTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Select", 10, 0);
        });

        it("should execute _executeWithEvents 'Select' with correct Mouse Button", function () {
            tabControlTOUnderTest.select(10, MouseButton.right);
            sinon.assert.calledOnce(tabControlTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTOUnderTest._executeWithEvents, sinon.match({ 0: 10, 1: "right" }), "Select", 10, 1);
        });
    });
});
