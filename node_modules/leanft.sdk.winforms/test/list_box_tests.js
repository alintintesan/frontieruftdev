// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/25/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("ListBox Description", function () {

    var ListBox = require("../lib/list_box.js").ListBox;
    var listBoxDescUnderTest;

    beforeEach(function () {
        listBoxDescUnderTest = ListBox();
    });

    describe("items method", function () {
        it("should add 'all items' to _properties when value is given using property bag", function () {
            listBoxDescUnderTest = ListBox({
                items: ["item1", "item2"]
            });
            assert.strictEqual(listBoxDescUnderTest._properties["all items"], "item1\nitem2");
        });
    });

    describe("selectedItems method", function () {
        it("should add 'selection' to _properties when value is given using property bag", function () {
            listBoxDescUnderTest = ListBox({
                selectedItems: ["item1", "item2"]
            });
            assert.strictEqual(listBoxDescUnderTest._properties["selection"], "item1\nitem2");
        });
    });
});

describe("List Box Test Object", function () {

    var ListBoxTO = require("../lib/list_box.js").ListBoxTO;
    var ListItem = require("../lib/list_item.js").ListItem;
    var listBoxTOUnderTest;

    var removeExecutorMethods = function (array) {
        array.map(function (item) {
            delete item._executeWithEventsOnItem;
            delete item._executeWithEventsOnItemOnError;
        });
        return array;
    };

    beforeEach(function () {
        listBoxTOUnderTest = new ListBoxTO();
        sinon.stub(listBoxTOUnderTest, "_executeWithEventsOnError");
        sinon.stub(listBoxTOUnderTest, "_executeNotWrapped");
        sinon.stub(listBoxTOUnderTest, "_getROPropertiesWithoutEvents");
        sinon.stub(listBoxTOUnderTest, "_getROProperty");
        sinon.stub(listBoxTOUnderTest, "_getROProperties");
    });

    afterEach(function () {
        listBoxTOUnderTest._executeWithEventsOnError.restore();
        listBoxTOUnderTest._executeNotWrapped.restore();
        listBoxTOUnderTest._getROPropertiesWithoutEvents.restore();
        listBoxTOUnderTest._getROProperty.restore();
        listBoxTOUnderTest._getROProperties.restore();
    });


    describe("_getItemHeight method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            listBoxTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = listBoxTOUnderTest._getItemHeight(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            listBoxTOUnderTest._getItemHeight(10);
            sinon.assert.calledOnce(listBoxTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listBoxTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "height");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            listBoxTOUnderTest._getItemHeight("Item1");
            sinon.assert.calledOnce(listBoxTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listBoxTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "height");
        });
    });

    describe("getItem method", function () {
        it("should throw error if text is undefined", function () {
            assert.throws(function () {
                listBoxTOUnderTest.getItem();
            });
        });

        it("should throw error if text is null", function () {
            assert.throws(function () {
                listBoxTOUnderTest.getItem(null);
            });
        });

        it("should return the ListItem", function () {
            var res = listBoxTOUnderTest.getItem("Item1");
            assert.strictEqual(res._identifier, "Item1");
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerListBox, listBoxTOUnderTest);
        });        
    });

    describe("items method", function () {
        it("should query the properties 'all items', 'items count'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2", 2]);
                }
            };
            listBoxTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            listBoxTOUnderTest.items();
            sinon.assert.calledOnce(listBoxTOUnderTest._getROPropertiesWithoutEvents);
            sinon.assert.calledWith(listBoxTOUnderTest._getROPropertiesWithoutEvents, "all items", "items count");
        });

        it("should return empty list if no item returns from _getROPropertiesWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["", 0]);
                }
            };
            
            listBoxTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            var res = listBoxTOUnderTest.items();
            assert.deepEqual(res, []);
        });
        
        it("should return a list  with items if items returns from _getROPropertiesWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2", 2]);
                }
            };

            listBoxTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            var res = listBoxTOUnderTest.items();
            assert.deepEqual(removeExecutorMethods(res), removeExecutorMethods([new ListItem(listBoxTOUnderTest, 0, "Item1"), new ListItem(listBoxTOUnderTest, 1, "Item2")]));
        });        
    });

    describe("selectedItems method", function () {
        it("should query the property 'selection'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };
            listBoxTOUnderTest._getROProperty.returns(promiseMock);
            listBoxTOUnderTest.selectedItems();
            sinon.assert.calledOnce(listBoxTOUnderTest._getROProperty);
            sinon.assert.calledWith(listBoxTOUnderTest._getROProperty, "selection", sinon.match({}));
        });

        it("should return empty list if null returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb();
                }
            };

            listBoxTOUnderTest._getROProperty.returns(promiseMock);
            var res = listBoxTOUnderTest.selectedItems();
            assert.deepEqual(res, []);
        });

        it("should return empty list if no item returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            listBoxTOUnderTest._getROProperty.returns(promiseMock);
            var res = listBoxTOUnderTest.selectedItems();
            assert.deepEqual(res, []);
        });

        it("should return a list  with items if items returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            listBoxTOUnderTest._getROProperty.returns(promiseMock);
            var res = listBoxTOUnderTest.selectedItems();
            assert.deepEqual(removeExecutorMethods(res), removeExecutorMethods([new ListItem(listBoxTOUnderTest, "Item1", "Item1"), new ListItem(listBoxTOUnderTest, "Item2", "Item2")]));
        });
    });

    describe("_createItem method", function () {
        it("should return the ListItem with correct values", function () {
            var res = listBoxTOUnderTest._createItem(10, "Item1");
            assert.strictEqual(res._identifier, 10);
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerListBox, listBoxTOUnderTest);
        });
    });

    describe("errorText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            listBoxTOUnderTest._executeWithEventsOnError.returns(executionPromise);
            var res = listBoxTOUnderTest.errorText();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'GetErrorProviderText'", function () {
            listBoxTOUnderTest.errorText();
            sinon.assert.calledOnce(listBoxTOUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(listBoxTOUnderTest._executeWithEventsOnError, sinon.match({}), "GetErrorProviderText");
        });
    });
});
