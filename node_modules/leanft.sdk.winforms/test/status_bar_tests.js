// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/21/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("Status Bar Description", function () {

    var StatusBar = require("../lib/status_bar.js").StatusBar;
    var statusBarDescUnderTest;

    beforeEach(function () {
        statusBarDescUnderTest = StatusBar();
    });

    describe("items method", function () {
        it("should add 'all items' to _properties when value is given using property bag", function () {
            statusBarDescUnderTest = StatusBar({
                items: ["item1", "item2"]
            });
            assert.strictEqual(statusBarDescUnderTest._properties["all items"], "item1\nitem2");
        });

        it("should add 'all items' to _properties when value is given using property bag", function () {
            statusBarDescUnderTest = StatusBar({
                items: ["item1", "item2"]
            });
            assert.strictEqual(statusBarDescUnderTest._properties["all items"], "item1\nitem2");
        });
    });

    describe("count method", function () {
        it("should add 'items count' to _properties when value is given", function () {
            statusBarDescUnderTest.count (100);
            assert.strictEqual(statusBarDescUnderTest._properties["items count"], 100);
        });

        it("should add 'items count' to _properties when value is given in string", function () {
            statusBarDescUnderTest.count ('100');
            assert.strictEqual(statusBarDescUnderTest._properties["items count"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = statusBarDescUnderTest.count (100);
            assert.strictEqual(result, statusBarDescUnderTest);
        });

        it("should remove 'items count' from _properties when value is null", function () {
            statusBarDescUnderTest._properties["items count"] = 100;
            statusBarDescUnderTest.count (null);
            assert(!("items count" in statusBarDescUnderTest._properties));
        });

        it("should return the value of 'items count' from _properties when value is not given", function () {
            statusBarDescUnderTest._properties["items count"] = 100;
            var result = statusBarDescUnderTest.count ();
            assert.equal(result, 100);
        });
    });

    describe("isRightAligned method", function () {
        it("should add 'RightAligned' to _properties when value is given", function () {
            statusBarDescUnderTest.isRightAligned(true);
            assert.strictEqual(statusBarDescUnderTest._properties["RightAligned"], true);
        });

        it("should add 'RightAligned' to _properties when value is given in string", function () {
            statusBarDescUnderTest.isRightAligned("true");
            assert.strictEqual(statusBarDescUnderTest._properties["RightAligned"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = statusBarDescUnderTest.isRightAligned(true);
            assert.strictEqual(result, statusBarDescUnderTest);
        });

        it("should remove 'RightAligned' from _properties when value is null", function () {
            statusBarDescUnderTest._properties["RightAligned"] = true;
            statusBarDescUnderTest.isRightAligned(null);
            assert(!("RightAligned" in statusBarDescUnderTest._properties));
        });

        it("should return the value of 'RightAligned' from _properties when value is not given", function () {
            statusBarDescUnderTest._properties["RightAligned"] = true;
            var result = statusBarDescUnderTest.isRightAligned();
            assert.equal(result, true);
        });
    });

    describe("isRightToLeftLayout method", function () {
        it("should add 'RightToLeftLayout' to _properties when value is given", function () {
            statusBarDescUnderTest.isRightToLeftLayout(true);
            assert.strictEqual(statusBarDescUnderTest._properties["RightToLeftLayout"], true);
        });

        it("should add 'RightToLeftLayout' to _properties when value is given in string", function () {
            statusBarDescUnderTest.isRightToLeftLayout("true");
            assert.strictEqual(statusBarDescUnderTest._properties["RightToLeftLayout"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = statusBarDescUnderTest.isRightToLeftLayout(true);
            assert.strictEqual(result, statusBarDescUnderTest);
        });

        it("should remove 'RightToLeftLayout' from _properties when value is null", function () {
            statusBarDescUnderTest._properties["RightToLeftLayout"] = true;
            statusBarDescUnderTest.isRightToLeftLayout(null);
            assert(!("RightToLeftLayout" in statusBarDescUnderTest._properties));
        });

        it("should return the value of 'RightToLeftLayout' from _properties when value is not given", function () {
            statusBarDescUnderTest._properties["RightToLeftLayout"] = true;
            var result = statusBarDescUnderTest.isRightToLeftLayout();
            assert.equal(result, true);
        });
    });

    describe("isRightToLeftReading method", function () {
        it("should add 'RightToLeftReading' to _properties when value is given", function () {
            statusBarDescUnderTest.isRightToLeftReading(true);
            assert.strictEqual(statusBarDescUnderTest._properties["RightToLeftReading"], true);
        });

        it("should add 'RightToLeftReading' to _properties when value is given in string", function () {
            statusBarDescUnderTest.isRightToLeftReading("true");
            assert.strictEqual(statusBarDescUnderTest._properties["RightToLeftReading"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = statusBarDescUnderTest.isRightToLeftReading(true);
            assert.strictEqual(result, statusBarDescUnderTest);
        });

        it("should remove 'RightToLeftReading' from _properties when value is null", function () {
            statusBarDescUnderTest._properties["RightToLeftReading"] = true;
            statusBarDescUnderTest.isRightToLeftReading(null);
            assert(!("RightToLeftReading" in statusBarDescUnderTest._properties));
        });

        it("should return the value of 'RightToLeftReading' from _properties when value is not given", function () {
            statusBarDescUnderTest._properties["RightToLeftReading"] = true;
            var result = statusBarDescUnderTest.isRightToLeftReading();
            assert.equal(result, true);
        });
    });

    describe("windowExtendedStyle method", function () {
        it("should add 'WindowExtendedStyle' to _properties when value is given", function () {
            statusBarDescUnderTest.windowExtendedStyle(100);
            assert.strictEqual(statusBarDescUnderTest._properties["WindowExtendedStyle"], 100);
        });

        it("should add 'WindowExtendedStyle' to _properties when value is given in string", function () {
            statusBarDescUnderTest.windowExtendedStyle("100");
            assert.strictEqual(statusBarDescUnderTest._properties["WindowExtendedStyle"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = statusBarDescUnderTest.windowExtendedStyle(100);
            assert.strictEqual(result, statusBarDescUnderTest);
        });

        it("should remove 'WindowExtendedStyle' from _properties when value is null", function () {
            statusBarDescUnderTest._properties["WindowExtendedStyle"] = 100;
            statusBarDescUnderTest.windowExtendedStyle(null);
            assert(!("WindowExtendedStyle" in statusBarDescUnderTest._properties));
        });

        it("should return the value of 'WindowExtendedStyle' from _properties when value is not given", function () {
            statusBarDescUnderTest._properties["WindowExtendedStyle"] = 100;
            var result = statusBarDescUnderTest.windowExtendedStyle();
            assert.equal(result, 100);
        });
    });

    describe("windowStyle method", function () {
        it("should add 'WindowStyle' to _properties when value is given", function () {
            statusBarDescUnderTest.windowStyle(100);
            assert.strictEqual(statusBarDescUnderTest._properties["WindowStyle"], 100);
        });

        it("should add 'WindowStyle' to _properties when value is given in string", function () {
            statusBarDescUnderTest.windowStyle("100");
            assert.strictEqual(statusBarDescUnderTest._properties["WindowStyle"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = statusBarDescUnderTest.windowStyle(100);
            assert.strictEqual(result, statusBarDescUnderTest);
        });

        it("should remove 'WindowStyle' from _properties when value is null", function () {
            statusBarDescUnderTest._properties["WindowStyle"] = 100;
            statusBarDescUnderTest.windowStyle(null);
            assert(!("WindowStyle" in statusBarDescUnderTest._properties));
        });

        it("should return the value of 'WindowStyle' from _properties when value is not given", function () {
            statusBarDescUnderTest._properties["WindowStyle"] = 100;
            var result = statusBarDescUnderTest.windowStyle();
            assert.equal(result, 100);
        });
    });

    describe("attachedText method", function () {
        it("should add 'AttachedText' to _properties when value is given", function () {
            statusBarDescUnderTest.attachedText("Text");
            assert.strictEqual(statusBarDescUnderTest._properties["AttachedText"], "Text");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = statusBarDescUnderTest.attachedText("Text");
            assert.strictEqual(result, statusBarDescUnderTest);
        });

        it("should remove 'AttachedText' from _properties when value is null", function () {
            statusBarDescUnderTest._properties["AttachedText"] = "Text";
            statusBarDescUnderTest.attachedText(null);
            assert(!("AttachedText" in statusBarDescUnderTest._properties));
        });

        it("should return the value of 'AttachedText' from _properties when value is not given", function () {
            statusBarDescUnderTest._properties["AttachedText"] = "Text";
            var value = statusBarDescUnderTest.attachedText();
            assert.strictEqual(value, "Text");
        });
    });
});

describe("StatusBar Test Object", function () {

    var StatusBarTO = require("../lib/status_bar.js").StatusBarTO;
    var statusBarTOUnderTest;

    var removeExecutorMethods = function (array) {
        array.map(function (item) {
            delete item._executeWithEventsOnItem;
            delete item._executeWithEventsOnItemOnError;
        });
        return array;
    };

    beforeEach(function () {
        statusBarTOUnderTest = new StatusBarTO();
        sinon.stub(statusBarTOUnderTest, "_getROProperty");
        sinon.stub(statusBarTOUnderTest, "_executeWithEventsOnError");
        sinon.stub(statusBarTOUnderTest, "_getROPropertiesWithoutEvents");
        sinon.stub(statusBarTOUnderTest, "_executeNotWrapped");
    });

    afterEach(function () {
        statusBarTOUnderTest._getROProperty.restore();
        statusBarTOUnderTest._executeWithEventsOnError.restore();
        statusBarTOUnderTest._getROPropertiesWithoutEvents.restore();
        statusBarTOUnderTest._executeNotWrapped.restore();
    });

    describe("items method", function () {
        it("should query the property 'all items'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };
            statusBarTOUnderTest._getROProperty.returns(promiseMock);
            statusBarTOUnderTest.items();
            sinon.assert.calledOnce(statusBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTOUnderTest._getROProperty, "all items");
        });

        it("should return empty list if no item returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            statusBarTOUnderTest._getROProperty.returns(promiseMock);
            var res = statusBarTOUnderTest.items();
            assert.deepEqual(res, [""]);
        });

        it("should return a list  with items if items returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            statusBarTOUnderTest._getROProperty.returns(promiseMock);
            var res = statusBarTOUnderTest.items();
            assert.deepEqual(res, ["Item1", "Item2"]);
        });
    });

    describe("isRightAligned method", function () {
        it("should execute _getROProperty 'RightAligned'", function () {
            statusBarTOUnderTest.isRightAligned();
            sinon.assert.calledOnce(statusBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTOUnderTest._getROProperty, "RightAligned", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            statusBarTOUnderTest._getROProperty.returns(promiseMock);
            var res = statusBarTOUnderTest.isRightAligned();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isRightToLeftLayout method", function () {
        it("should execute _getROProperty 'RightToLeftLayout'", function () {
            statusBarTOUnderTest.isRightToLeftLayout();
            sinon.assert.calledOnce(statusBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTOUnderTest._getROProperty, "RightToLeftLayout", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            statusBarTOUnderTest._getROProperty.returns(promiseMock);
            var res = statusBarTOUnderTest.isRightToLeftLayout();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isRightToLeftReading method", function () {
        it("should execute _getROProperty 'RightToLeftReading'", function () {
            statusBarTOUnderTest.isRightToLeftReading();
            sinon.assert.calledOnce(statusBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTOUnderTest._getROProperty, "RightToLeftReading", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            statusBarTOUnderTest._getROProperty.returns(promiseMock);
            var res = statusBarTOUnderTest.isRightToLeftReading();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("windowExtendedStyle method", function () {
        it("should execute _getROProperty 'WindowExtendedStyle'", function () {
            statusBarTOUnderTest.windowExtendedStyle();
            sinon.assert.calledOnce(statusBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTOUnderTest._getROProperty, "WindowExtendedStyle", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            statusBarTOUnderTest._getROProperty.returns(promiseMock);
            var res = statusBarTOUnderTest.windowExtendedStyle();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("windowStyle method", function () {
        it("should execute _getROProperty 'WindowStyle'", function () {
            statusBarTOUnderTest.windowStyle();
            sinon.assert.calledOnce(statusBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTOUnderTest._getROProperty, "WindowStyle", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            statusBarTOUnderTest._getROProperty.returns(promiseMock);
            var res = statusBarTOUnderTest.windowStyle();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("attachedText method", function () {
        it("should execute _getROProperty 'attached text'", function () {
            statusBarTOUnderTest.attachedText();
            sinon.assert.calledOnce(statusBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTOUnderTest._getROProperty, "attached text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            statusBarTOUnderTest._getROProperty.returns(promiseMock);
            var res = statusBarTOUnderTest.attachedText();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("errorText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            statusBarTOUnderTest._executeWithEventsOnError.returns(executionPromise);
            var res = statusBarTOUnderTest.errorText();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'GetErrorProviderText'", function () {
            statusBarTOUnderTest.errorText();
            sinon.assert.calledOnce(statusBarTOUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(statusBarTOUnderTest._executeWithEventsOnError, sinon.match({}), "GetErrorProviderText");
        });
    });
});
