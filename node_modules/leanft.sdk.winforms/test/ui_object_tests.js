// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var VerticalScrollPosition = Core.VerticalScrollPosition;
var ScrollType = Core.ScrollType;
var ScrollOrientation = Core.ScrollOrientation;

describe("UI Object Description", function () {

    var UiObject = require("../lib/ui_object.js").UiObject;
    var UiObjectBaseDescription = require("../lib/ui_object_base.js").UiObjectBaseDescription;
    var uiObjectDescriptionUnderTest;
    
    beforeEach(function () {
        uiObjectDescriptionUnderTest = new UiObject({});
    });

    describe("attachedText method", function () {
        it("should add 'Attached text' to _properties when value is given", function () {
            uiObjectDescriptionUnderTest.attachedText("attachedText");
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["Attached text"], "attachedText");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectDescriptionUnderTest.attachedText("attachedText");
            assert.strictEqual(result, uiObjectDescriptionUnderTest);
        });

        it("should remove 'Attached text' from _properties when value is null", function () {
            uiObjectDescriptionUnderTest._properties["Attached text"] = "attachedText";
            uiObjectDescriptionUnderTest.attachedText(null);
            assert(!("Attached text" in uiObjectDescriptionUnderTest._properties));
        });

        it("should return the value of 'Attached text' from _properties when value is not given", function () {
            uiObjectDescriptionUnderTest._properties["Attached text"] = "attachedText";
            var result = uiObjectDescriptionUnderTest.attachedText();
            assert.equal(result, "attachedText");
        });
    });
});

describe("UI Object TO", function () {

    var UIObjectTO = require("../lib/ui_object.js").UIObjectTO;
    var uiObjectTOUnderTest;

    beforeEach(function () {
        uiObjectTOUnderTest = new UIObjectTO();
        sinon.stub(uiObjectTOUnderTest, "_executeWithEvents");
        sinon.stub(uiObjectTOUnderTest, "_executeWithEventsOnError");
        sinon.stub(uiObjectTOUnderTest, "_getROProperty");
    });

    afterEach(function () {
        uiObjectTOUnderTest._executeWithEvents.restore();
        uiObjectTOUnderTest._executeWithEventsOnError.restore();
        uiObjectTOUnderTest._getROProperty.restore();
    });

    describe("attachedText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            uiObjectTOUnderTest._getROProperty.returns(executionPromise);
            var res = uiObjectTOUnderTest.attachedText();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'attached text' with correct parameters", function () {
            uiObjectTOUnderTest.attachedText();
            sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "attached text", sinon.match({}));
        });
    });

    describe("errorText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            uiObjectTOUnderTest._executeWithEventsOnError.returns(executionPromise);
            var res = uiObjectTOUnderTest.errorText();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEventsOnError 'GetErrorProviderText' with correct parameters", function () {
            uiObjectTOUnderTest.errorText();
            sinon.assert.calledOnce(uiObjectTOUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(uiObjectTOUnderTest._executeWithEventsOnError, sinon.match({}), "GetErrorProviderText");
        });
    });

    describe("scroll method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            uiObjectTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = uiObjectTOUnderTest.scroll(ScrollOrientation.horizontalScroll, ScrollType.pageIncrement, 50);
            assert.equal(res, executionPromise);
        });

        it("should throw error if orientation is undefined", function () {
            assert.throws(function () {
                uiObjectTOUnderTest.scroll();
            });
        });

        it("should throw error if orientation is null", function () {
            assert.throws(function () {
                uiObjectTOUnderTest.scroll(null);
            });
        });

        it("should throw error if type is undefined", function () {
            assert.throws(function () {
                uiObjectTOUnderTest.scroll(ScrollOrientation.verticalScroll);
            });
        });

        it("should throw error if type is null", function () {
            assert.throws(function () {
                uiObjectTOUnderTest.scroll(ScrollOrientation.verticalScroll, null);
            });
        });

        it("should execute command 'VScroll' if orientation is ScrollOrientation.verticalScroll", function () {
            uiObjectTOUnderTest.scroll(ScrollOrientation.verticalScroll, ScrollType.lineIncrement, 10);
            sinon.assert.calledOnce(uiObjectTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectTOUnderTest._executeWithEvents, sinon.match({ 0: ScrollOrientation.verticalScroll, 1: ScrollType.lineIncrement, 2: 10 }), "VScroll", 1, 10);
        });

        it("should execute command 'HScroll' if orientation is ScrollOrientation.horizontalScroll", function () {
            uiObjectTOUnderTest.scroll(ScrollOrientation.horizontalScroll, ScrollType.lineIncrement, 10);
            sinon.assert.calledOnce(uiObjectTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectTOUnderTest._executeWithEvents, sinon.match({ 0: ScrollOrientation.horizontalScroll, 1: ScrollType.lineIncrement, 2: 10 }), "HScroll", 1, 10);
        });

        it("should execute command with value 1 if value is null", function () {
            uiObjectTOUnderTest.scroll(ScrollOrientation.verticalScroll, ScrollType.lineIncrement, null);
            sinon.assert.calledOnce(uiObjectTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectTOUnderTest._executeWithEvents, sinon.match({ 0: ScrollOrientation.verticalScroll, 1: ScrollType.lineIncrement }), "VScroll", 1, 1);
        });

        it("should execute command with value 1 if value is undefined", function () {
            uiObjectTOUnderTest.scroll(ScrollOrientation.verticalScroll, ScrollType.lineIncrement);
            sinon.assert.calledOnce(uiObjectTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectTOUnderTest._executeWithEvents, sinon.match({ 0: ScrollOrientation.verticalScroll, 1: ScrollType.lineIncrement }), "VScroll", 1, 1);
        });        
    });
});
