// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("C1FlexDbGridBehavior Test", function () {

    var C1FlexGrid = require("../lib/c1flexgridbehavior.js").C1FlexGrid;
    var TableTO = require("../lib/table.js").TableTO;
    var c1FlexDBGridUnderTest;
    var ownerTableMock;

    beforeEach(function () {
        ownerTableMock = new TableTO();
        ownerTableMock._executeWithEvents = sinon.stub();
        ownerTableMock._executeNotWrapped = sinon.stub();
        ownerTableMock._executeCommand = sinon.stub();

        c1FlexDBGridUnderTest = new C1FlexGrid(ownerTableMock);

        ownerTableMock.customGrid = sinon.stub().returns({
            c1FlexGrid: sinon.stub().returns(c1FlexDBGridUnderTest)
        });
    });

    describe("Constructor", function () {
        it("should assign correct values", function () {
            owner = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
            c1FlexDBGridUnderTest = new C1FlexGrid(owner);
            assert.strictEqual(c1FlexDBGridUnderTest._ownerTable, owner);
        });
    });

    
    describe("C1 Table Cell", function () {

        var C1TableCell = require("../lib/tablecell.js").C1TableCell;
        var c1TableCellUnderTest;
    
        beforeEach(function () {
            c1TableCellUnderTest = new C1TableCell(ownerTableMock, 0, 0);
        });
    
        describe("sendChars method", function () {

            it("should throw error if newValue is undefined", function () {
                assert.throws(function () {
                    c1TableCellUnderTest.sendChars();
                });
            });
    
            it("should throw error if newValue is null", function () {
                assert.throws(function () {
                    c1TableCellUnderTest.sendChars(null);
                });
            });
    
            it("should return the execution promise", function () {
                var executionPromise = {};
                ownerTableMock._executeWithEvents.returns(executionPromise);
                var res = c1TableCellUnderTest.sendChars(10, 10, "abc");
                assert.equal(res, executionPromise);
            });
    
            it("should execute sendChars with correct parameter", function () {
                c1TableCellUnderTest.sendChars("value");

                sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
                sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({ 0: 0, 1: 0, 2: "value"}), "SetCellData", 0, 0, "value");
            });
        });
    });
});