// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("DataGridViewBehavior Test", function () {

    var DataGridView = require("../lib/datagridviewbehavior.js").DataGridView;
    var dataGridViewUnderTest;
    var ownerTableMock;

    beforeEach(function () {
        ownerTableMock = {
            _executeWithEvents: sinon.stub(),
            _executeNotWrapped: sinon.stub(),
            _executeCommand: sinon.stub(),
            _executeWithEventsOnItem: sinon.stub(),
            _executeWithEventsOnItemOnError: sinon.stub()
        };
        dataGridViewUnderTest = new DataGridView(ownerTableMock);
    });

    describe("selectCell method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                dataGridViewUnderTest.selectCell();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                dataGridViewUnderTest.selectCell(null);
            });
        });

        it("should throw error if col is undefined", function () {
            assert.throws(function () {
                dataGridViewUnderTest.selectCell(1);
            });
        });

        it("should throw error if col is null", function () {
            assert.throws(function () {
                dataGridViewUnderTest.selectCell(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            ownerTableMock._executeWithEvents.returns(executionPromise);
            var res = dataGridViewUnderTest.selectCell(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SelectCell' if row is a number and col is a number", function () {
            dataGridViewUnderTest.selectCell(10, 10);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "SelectCell", 10, 10);
        });
    });

    describe("activateCell method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                dataGridViewUnderTest.activateCell();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                dataGridViewUnderTest.activateCell(null);
            });
        });

        it("should throw error if col is undefined", function () {
            assert.throws(function () {
                dataGridViewUnderTest.activateCell(1);
            });
        });

        it("should throw error if col is null", function () {
            assert.throws(function () {
                dataGridViewUnderTest.activateCell(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            ownerTableMock._executeWithEvents.returns(executionPromise);
            var res = dataGridViewUnderTest.activateCell(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEventsOnItem 'ActivateCell' if row is a number and col is a number", function () {
            dataGridViewUnderTest.activateCell(10, 10);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "ActivateCell", 10, 10);
        });
    });

    describe("makeCellVisible method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                dataGridViewUnderTest.makeCellVisible();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                dataGridViewUnderTest.makeCellVisible(null);
            });
        });

        it("should throw error if col is undefined", function () {
            assert.throws(function () {
                dataGridViewUnderTest.makeCellVisible(1);
            });
        });

        it("should throw error if col is null", function () {
            assert.throws(function () {
                dataGridViewUnderTest.makeCellVisible(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            ownerTableMock._executeWithEvents.returns(executionPromise);
            var res = dataGridViewUnderTest.makeCellVisible(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEventsOnItem 'MakeCellVisible' if row is a number and col is a number", function () {
            dataGridViewUnderTest.makeCellVisible(10, 10);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "MakeCellVisible", 10, 10);
        });
    });

    describe("getCell method", function () {

        it("should return cell with correct parameters", function () {
            var cell = dataGridViewUnderTest.getCell(10, "column6");
            cell.setValue("something");

            sinon.assert.calledOnce(ownerTableMock._executeWithEventsOnItem);
            sinon.assert.calledWith(ownerTableMock._executeWithEventsOnItem, cell, cell._ownerTable._setCellValue, 10, "column6", "something");
        });
    });

    describe("selectColumn method", function () {
        it("should execute command 'SelectColumn' if column number passed", function () {
            dataGridViewUnderTest.selectColumn(3);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: 3
            }), "SelectColumn", 3);
        });

        it("should execute command 'SelectColumn' if column header passed", function () {
            dataGridViewUnderTest.selectColumn("col header1");
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: "col header1"
            }), "SelectColumn", "col header1");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            ownerTableMock._executeWithEvents.returns(promiseMock);
            var res = dataGridViewUnderTest.selectColumn(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if null passed", function () {
            assert.throws(function () {
                dataGridViewUnderTest.selectColumn(null);
            });
        });

        it("should throw error if undefined passed", function () {
            assert.throws(function () {
                dataGridViewUnderTest.selectColumn();
            });
        });
    });

    describe("activateColumn method", function () {
        it("should execute command 'ActivateColumn' if column number passed", function () {
            dataGridViewUnderTest.activateColumn(3);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: 3
            }), "ActivateColumn", 3);
        });

        it("should execute command 'ActivateColumn' if column header passed", function () {
            dataGridViewUnderTest.activateColumn("col header1");
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: "col header1"
            }), "ActivateColumn", "col header1");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            ownerTableMock._executeWithEvents.returns(promiseMock);
            var res = dataGridViewUnderTest.activateColumn(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if null passed", function () {
            assert.throws(function () {
                dataGridViewUnderTest.activateColumn(null);
            });
        });

        it("should throw error if undefined passed", function () {
            assert.throws(function () {
                dataGridViewUnderTest.activateColumn();
            });
        });
    });
});