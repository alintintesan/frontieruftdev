// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/05/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Editor Description", function () {
    var Editor = require("../lib/editor.js").Editor;
    var EditorDescriptionUnderTest;

    beforeEach(function () {
        EditorDescriptionUnderTest = Editor();
    });

    describe("Constructor", function () {
        it("should assign 'WinForms' and 'Editor' LeanFT type", function () {
            EditorDescriptionUnderTest = new Editor();
            assert.deepEqual(EditorDescriptionUnderTest.leanFTType, {
                technology: "WinForms",
                leanftType: "Editor"
            });
        });
    });

    describe("selectedText method", function () {
        it("should add 'selectedText' to _properties when value is given", function () {
            EditorDescriptionUnderTest.selectedText("selected");
            assert.strictEqual(EditorDescriptionUnderTest._properties["selection"], "selected");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = EditorDescriptionUnderTest.selectedText("selected");
            assert.strictEqual(result, EditorDescriptionUnderTest);
        });

        it("should remove 'selectedText' from _properties when value is null", function () {
            EditorDescriptionUnderTest._properties["selection"] = "selected";
            EditorDescriptionUnderTest.selectedText(null);
            assert(!("selection" in EditorDescriptionUnderTest._properties));
        });

        it("should return the value of 'selectedText' from _properties when value is not given", function () {
            EditorDescriptionUnderTest._properties["selection"] = "selected";
            var selected = EditorDescriptionUnderTest.selectedText();
            assert.equal(selected, "selected");
        });
    })
});

describe("Editor Test Object", function () {
    var EditorTO = require("../lib/editor.js").EditorTO;
    var editorTestObjectUnderTest;

    beforeEach(function () {
        editorTestObjectUnderTest = new EditorTO();
        sinon.stub(editorTestObjectUnderTest, "_getROProperty");
        sinon.stub(editorTestObjectUnderTest, "_executeWithEventsOnError");
    });

    describe("selectedText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            editorTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = editorTestObjectUnderTest.selectedText();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'selection' with correct parameters", function () {
            editorTestObjectUnderTest.selectedText();
            sinon.assert.calledOnce(editorTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(editorTestObjectUnderTest._getROProperty, "selection", sinon.match({}));
        });
    });

    describe("errorText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            editorTestObjectUnderTest._executeWithEventsOnError.returns(executionPromise);
            var res = editorTestObjectUnderTest.errorText();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'GetErrorProviderText'", function () {
            editorTestObjectUnderTest.errorText();
            sinon.assert.calledOnce(editorTestObjectUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(editorTestObjectUnderTest._executeWithEventsOnError, sinon.match({}), "GetErrorProviderText");
        });
    })
});
