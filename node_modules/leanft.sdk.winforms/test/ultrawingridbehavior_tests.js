// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("UltraWinGridBehavior Test", function () {

    var UltraWinGrid = require("../lib/ultrawingridbehavior.js").UltraWinGrid;
    var ultraWinGridUnderTest;
    var ownerTableMock;

    beforeEach(function () {
        ownerTableMock = {
            _executeWithEvents: sinon.stub(),
            _executeNotWrapped: sinon.stub(),
            _executeCommand: sinon.stub()
        };
        ultraWinGridUnderTest = new UltraWinGrid(ownerTableMock);
    });

    describe("Constructor", function () {
        it("should assign correct values", function () {
            assert.strictEqual(ultraWinGridUnderTest._ownerTable, ownerTableMock);
        });
    });

    describe("activateCell method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                ultraWinGridUnderTest.activateCell();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                ultraWinGridUnderTest.activateCell(null);
            });
        });

        it("should throw error if col is undefined", function () {
            assert.throws(function () {
                ultraWinGridUnderTest.activateCell(1);
            });
        });

        it("should throw error if col is null", function () {
            assert.throws(function () {
                ultraWinGridUnderTest.activateCell(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            ownerTableMock._executeWithEvents.returns(executionPromise);
            var res = ultraWinGridUnderTest.activateCell(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEventsOnItem 'ActivateCell' if row is a number and col is a number", function () {
            ultraWinGridUnderTest.activateCell(10, 10);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "ActivateCell", 10, 10);
        });
    });

    describe("makeCellVisible method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                ultraWinGridUnderTest.makeCellVisible();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                ultraWinGridUnderTest.makeCellVisible(null);
            });
        });

        it("should throw error if col is undefined", function () {
            assert.throws(function () {
                ultraWinGridUnderTest.makeCellVisible(1);
            });
        });

        it("should throw error if col is null", function () {
            assert.throws(function () {
                ultraWinGridUnderTest.makeCellVisible(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            ownerTableMock._executeWithEvents.returns(executionPromise);
            var res = ultraWinGridUnderTest.makeCellVisible(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEventsOnItem 'MakeCellVisible' if row is a number and col is a number", function () {
            ultraWinGridUnderTest.makeCellVisible(10, 10);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "MakeCellVisible", 10, 10);
        });
    });

    describe("activateColumn method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                ultraWinGridUnderTest.activateColumn();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                ultraWinGridUnderTest.activateColumn(null);
            });
        });

        //it("should execute _executeWithEventsOnItem 'activateColumn' if row is a number and col is a number", function () {
        //    ultraWinGridBehaviorUnderTest.activateColumn(10, 10);
        //    sinon.assert.calledOnce(ultraWinGridBehaviorUnderTest._executeWithEventsOnItem);
        //    sinon.assert.calledWith(ultraWinGridBehaviorUnderTest._executeWithEventsOnItem, sinon.match({ 0: 10, 1: 10 }), "ActivateColumn", "10,10");
        //});
    });

    describe("activateRow method", function () {
        it("should execute command 'ActivateRow' if the 'row' parameter is an index", function () {
            ultraWinGridUnderTest.activateRow(0);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: 0
            }), "ActivateRow", 0);
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            ownerTableMock._executeWithEvents.returns(promiseMock);
            var res = ultraWinGridUnderTest.activateRow(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                ultraWinGridUnderTest.activateRow(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                ultraWinGridUnderTest.activateRow();
            });
        });
    });

    describe("addRow method", function () {
        it("should throw error if addButtonName is null", function () {
            assert.throws(function () {
                ultraWinGridUnderTest.addRow(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            ownerTableMock._executeWithEvents.returns(executionPromise);
            var res = ultraWinGridUnderTest.addRow(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEventsOnItem 'AddRow' if row is a number and col is a number", function () {
            ultraWinGridUnderTest.addRow(10, 20);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({ 0: 10, 1: 20 }), "AddRow", 10, 20);
        });
    });
});