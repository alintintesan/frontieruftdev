// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("C1TrueDbGridBehavior Test", function () {

    var C1TrueDBGrid = require("../lib/c1truedbgridbehavior.js").C1TrueDBGrid;
    var TableTO = require("../lib/table.js").TableTO;
    var c1TrueDBGridUnderTest;
    var ownerTableMock;

    beforeEach(function () {
        ownerTableMock = new TableTO();
        ownerTableMock._executeWithEvents = sinon.stub();
        ownerTableMock._executeNotWrapped = sinon.stub();
        ownerTableMock._executeCommand = sinon.stub();

        c1TrueDBGridUnderTest = new C1TrueDBGrid(ownerTableMock);

        ownerTableMock.customGrid = sinon.stub().returns({
            c1FlexGrid: sinon.stub().returns(c1TrueDBGridUnderTest)
        });
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            c1TrueDBGridUnderTest = new C1TrueDBGrid(ownerTableMock);
            assert.strictEqual(c1TrueDBGridUnderTest._ownerTable, ownerTableMock);
        });
    });

    describe("activateColumn method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                c1TrueDBGridUnderTest.activateColumn();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                c1TrueDBGridUnderTest.activateColumn(null);
            });
        });

        it("should execute _executeWithEventsOnItem 'activateColumn' if row is a number and col is a number", function () {
            c1TrueDBGridUnderTest.activateColumn(10, 10);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({ 0: 10 }), "ActivateColumn", 10);
        });
    });

    describe("C1 Table Cell", function () {

        var C1TableCell = require("../lib/tablecell.js").C1TableCell;
        var c1TableCellUnderTest;
    
        beforeEach(function () {
            c1TableCellUnderTest = new C1TableCell(ownerTableMock, 0, 0);
        });
    
        describe("sendChars method", function () {

            it("should throw error if newValue is undefined", function () {
                assert.throws(function () {
                    c1TableCellUnderTest.sendChars();
                });
            });
    
            it("should throw error if newValue is null", function () {
                assert.throws(function () {
                    c1TableCellUnderTest.sendChars(null);
                });
            });
    
            it("should return the execution promise", function () {
                var executionPromise = {};
                ownerTableMock._executeWithEvents.returns(executionPromise);
                var res = c1TableCellUnderTest.sendChars(10, 10, "abc");
                assert.equal(res, executionPromise);
            });
    
            it("should execute sendChars with correct parameter", function () {
                c1TableCellUnderTest.sendChars("value");

                sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
                sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({ 0: 0, 1: 0, 2: "value"}), "SetCellData", 0, 0, "value");
            });
        });
    });
});