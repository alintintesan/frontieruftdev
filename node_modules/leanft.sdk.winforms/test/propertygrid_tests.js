// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/23/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("PropertyGrid Description", function () {
    var PropertyGrid = require("../lib/propertygrid.js").PropertyGrid;
    var PropertyGridDescriptionUnderTest;

    beforeEach(function () {
        PropertyGridDescriptionUnderTest = PropertyGrid();
    });

    describe("Constructor", function () {
        it("should assign 'WinForms' and 'PropertyGrid' LeanFT type", function () {
            PropertyGridDescriptionUnderTest = new PropertyGrid();
            assert.deepEqual(PropertyGridDescriptionUnderTest.leanFTType, {
                technology: "WinForms",
                leanftType: "PropertyGrid"
            });
        });
    });

    describe("attachedText method", function () {
        it("should add 'attachedText' to _properties when value is given", function () {
            PropertyGridDescriptionUnderTest.attachedText("attachedText");
            assert.strictEqual(PropertyGridDescriptionUnderTest._properties["Attached text"], "attachedText");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = PropertyGridDescriptionUnderTest.attachedText("attachedText");
            assert.strictEqual(result, PropertyGridDescriptionUnderTest);
        });

        it("should remove 'attachedText' from _properties when value is null", function () {
            PropertyGridDescriptionUnderTest._properties["Attached text"] = "attachedText";
            PropertyGridDescriptionUnderTest.attachedText(null);
            assert(!("Attached text" in PropertyGridDescriptionUnderTest._properties));
        });

        it("should return the value of 'Attached text' from _properties when value is not given", function () {
            PropertyGridDescriptionUnderTest._properties["Attached text"] = "attachedText";
            var attachedText = PropertyGridDescriptionUnderTest.attachedText();
            assert.equal(attachedText, "attachedText");
        });
    })
});

describe("PropertyGrid Test Object", function () {
    var PropertyGridTO = require("../lib/propertygrid.js").PropertyGridTO;
    var propertyGridTestObjectUnderTest;

    beforeEach(function () {
        propertyGridTestObjectUnderTest = new PropertyGridTO();
        sinon.stub(propertyGridTestObjectUnderTest, "_getROProperty");
        sinon.stub(propertyGridTestObjectUnderTest, "_executeWithEvents");
        sinon.stub(propertyGridTestObjectUnderTest, "_executeWithEventsOnError");
    });

    describe("attachedText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            propertyGridTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = propertyGridTestObjectUnderTest.attachedText();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'selection' with correct parameters", function () {
            propertyGridTestObjectUnderTest.attachedText();
            sinon.assert.calledOnce(propertyGridTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(propertyGridTestObjectUnderTest._getROProperty, "attached text", sinon.match({}));
        });
    });

    describe("errorText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            propertyGridTestObjectUnderTest._executeWithEventsOnError.returns(executionPromise);
            var res = propertyGridTestObjectUnderTest.errorText();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'GetErrorProviderText'", function () {
            propertyGridTestObjectUnderTest.errorText();
            sinon.assert.calledOnce(propertyGridTestObjectUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(propertyGridTestObjectUnderTest._executeWithEventsOnError, sinon.match({}), "GetErrorProviderText");
        });
    });

    describe("getPropertyValue method", function () {
        it("should throw error if the propertyPath is undefined", function () {
            assert.throws(function () {
                propertyGridTestObjectUnderTest.getPropertyValue();
            });
        });

        it("should throw error if the propertyPath is null", function () {
            assert.throws(function () {
                propertyGridTestObjectUnderTest.getPropertyValue(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            propertyGridTestObjectUnderTest._executeWithEventsOnError.returns(executionPromise);
            var res = propertyGridTestObjectUnderTest.getPropertyValue("item1");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'GetValue' if propertyPath is a string", function () {
            propertyGridTestObjectUnderTest.getPropertyValue("item1");
            sinon.assert.calledOnce(propertyGridTestObjectUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(propertyGridTestObjectUnderTest._executeWithEventsOnError, sinon.match({ 0: "item1" }), "GetValue", "item1");
        });
    });

    describe("selectProperty method", function () {
        it("should throw error if the propertyPath is undefined", function () {
            assert.throws(function () {
                propertyGridTestObjectUnderTest.selectProperty();
            });
        });

        it("should throw error if the propertyPath is null", function () {
            assert.throws(function () {
                propertyGridTestObjectUnderTest.selectProperty(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            propertyGridTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = propertyGridTestObjectUnderTest.selectProperty("item1");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SelectProperty' if propertyPath is a string", function () {
            propertyGridTestObjectUnderTest.selectProperty("item1");
            sinon.assert.calledOnce(propertyGridTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(propertyGridTestObjectUnderTest._executeWithEvents, sinon.match({ 0: "item1" }), "SelectProperty", "item1");
        });
    });

    describe("setPropertyValue method", function () {
        it("should throw error if the propertyPath is undefined", function () {
            assert.throws(function () {
                propertyGridTestObjectUnderTest.setPropertyValue();
            });
        });

        it("should throw error if the propertyPath is null", function () {
            assert.throws(function () {
                propertyGridTestObjectUnderTest.setPropertyValue(null);
            });
        });

        it("should throw error if the newPropertyValue is undefined", function () {
            assert.throws(function () {
                propertyGridTestObjectUnderTest.setPropertyValue("item1");
            });
        });

        it("should throw error if the newPropertyValue is null", function () {
            assert.throws(function () {
                propertyGridTestObjectUnderTest.setPropertyValue("item1",null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            propertyGridTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = propertyGridTestObjectUnderTest.setPropertyValue("item1", "value1");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SetValue' if propertyPath and newPropertyValue are valid values", function () {
            propertyGridTestObjectUnderTest.setPropertyValue("item1", "value1");
            sinon.assert.calledOnce(propertyGridTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(propertyGridTestObjectUnderTest._executeWithEvents, sinon.match({ 0: "item1", 1: "value1" }), "SetValue", "item1","value1");
        });
    });
});