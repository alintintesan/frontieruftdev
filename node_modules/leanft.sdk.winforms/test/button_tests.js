// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/19/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Button Description", function () {
    var Button = require("../lib/button.js").Button;
    var ButtonDescriptionUnderTest;

    beforeEach(function () {
        ButtonDescriptionUnderTest = Button();
    });

    describe("Constructor", function () {
        it("should assign 'WinForms' and 'Button' LeanFT type", function () {
            ButtonDescriptionUnderTest = new Button();
            assert.deepEqual(ButtonDescriptionUnderTest.leanFTType, {
                technology: "WinForms",
                leanftType: "Button"
            });
        });
    });
});

describe("Button Test Object", function () {
    var ButtonTO = require("../lib/button.js").ButtonTO;
    var ButtonTestObjectUnderTest;

    beforeEach(function () {
        ButtonTestObjectUnderTest = new ButtonTO();
        sinon.stub(ButtonTestObjectUnderTest, "_executeWithEventsOnError");
    });

    describe("errorText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            ButtonTestObjectUnderTest._executeWithEventsOnError.returns(executionPromise);
            var res = ButtonTestObjectUnderTest.errorText();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'GetErrorProviderText'", function () {
            ButtonTestObjectUnderTest.errorText();
            sinon.assert.calledOnce(ButtonTestObjectUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(ButtonTestObjectUnderTest._executeWithEventsOnError, sinon.match({}), "GetErrorProviderText");
        });
    })
});
