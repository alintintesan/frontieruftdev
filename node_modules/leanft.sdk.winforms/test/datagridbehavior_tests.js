// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Table Behavior Test", function () {

    var DataGrid = require("../lib/datagridbehavior.js").DataGrid;
    var dataGridUnderTest;
    var ownerTableMock;

    beforeEach(function () {
        ownerTableMock = {
            _executeWithEvents: sinon.stub(),
            _executeNotWrapped: sinon.stub(),
            _executeCommand: sinon.stub()
        };
        dataGridUnderTest = new DataGrid(ownerTableMock);
    });

    describe("back method",function(){
        it("should execute command 'back'",function(){
            dataGridUnderTest.back();
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({}), "Back");
        });

        it("should return the execution promise",function(){
            var executionPromise = {};
            ownerTableMock._executeWithEvents.returns(executionPromise);
            var res = dataGridUnderTest.back();

            assert.equal(res,executionPromise);
        });
    });

    describe("collapseRow method", function () {
        it("should execute command 'CollapseRow' if the 'column' parameter is an valid number", function () {
            dataGridUnderTest.collapseRow(0);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: 0
            }), "CollapseRow", 0);
        });

        it("should throw error if the 'column' parameter is null", function () {
            assert.throws(function () {
                dataGridUnderTest.collapseRow(null);
            });
        });

        it("should throw error if the 'column' parameter is undefined", function () {
            assert.throws(function () {
                dataGridUnderTest.collapseRow();
            });
        });
    });

    describe("expandRow method", function () {
        it("should execute command 'ExpandRow' if the 'column' parameter is an valid number", function () {
            dataGridUnderTest.expandRow(0);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: 0
            }), "ExpandRow", 0);
        });

        it("should throw error if the 'column' parameter is null", function () {
            assert.throws(function () {
                dataGridUnderTest.expandRow(null);
            });
        });

        it("should throw error if the 'column' parameter is undefined", function () {
            assert.throws(function () {
                dataGridUnderTest.expandRow();
            });
        });
    });

    describe("hideParentRow method", function () {
        it("should execute command 'HideParentRow'", function () {
            dataGridUnderTest.hideParentRow();
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({}), "HideParentRow");
        });
    });

    describe("openCellRelation method", function () {
        it("should execute command 'OpenCellRelation' if the 'column' parameter is an valid number", function () {
            dataGridUnderTest.openCellRelation(0, 0);
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({
                0: 0
            }), "OpenCellRelation", 0);
        });

        it("should throw error if the 'column' parameter is null", function () {
            assert.throws(function () {
                dataGridUnderTest.openCellRelation(null, null);
            });
        });

        it("should throw error if the 'column' parameter is undefined", function () {
            assert.throws(function () {
                dataGridUnderTest.openCellRelation();
            });
        });
    });

    describe("showParentRow method", function () {
        it("should execute command 'ShowParentRow'", function () {
            dataGridUnderTest.showParentRow();
            sinon.assert.calledOnce(ownerTableMock._executeWithEvents);
            sinon.assert.calledWith(ownerTableMock._executeWithEvents, sinon.match({}), "ShowParentRow");
        });
    });
});