// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Table Behavior Test", function () {

    var TableTO = require("../lib/table.js").TableTO;
    var GridType = require("../lib/table.js").GridType;
    var GridTypeString = require("../lib/table.js").GridTypeString;
    var tableBehaviorUnderTest;

    beforeEach(function () {
        tableBehaviorUnderTest = new TableTO();
        sinon.stub(tableBehaviorUnderTest, "_executeWithEvents");
        sinon.stub(tableBehaviorUnderTest, "_executeNotWrapped");
        sinon.stub(tableBehaviorUnderTest, "_executeWithEventsOnError");
    });

    describe("activateCell method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.activateCell();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.activateCell(null);
            });
        });

        it("should throw error if col is undefined", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.activateCell(1);
            });
        });

        it("should throw error if col is null", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.activateCell(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = tableBehaviorUnderTest.activateCell(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'ActivateCell' if row is a number and col is a number", function () {
            tableBehaviorUnderTest.activateCell(10, 10);
            sinon.assert.calledOnce(tableBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBehaviorUnderTest._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "ActivateCell", 10, 10);
        });
    });

    describe("activateRow method", function () {
        it("should execute command 'ActivateRow' if the 'row' parameter is an index", function () {
            tableBehaviorUnderTest.activateRow(0);
            sinon.assert.calledOnce(tableBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBehaviorUnderTest._executeWithEvents, sinon.match({
                0: 0
            }), "ActivateRow", 0);
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableBehaviorUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableBehaviorUnderTest.activateRow(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.activateRow(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.activateRow();
            });
        });
    });

    describe("_getCell method", function () {
        it("should throw error if row is null", function () {
            assert.throws(function () {
                tableBehaviorUnderTest._getCell (null, 0);
            });
        });
        it("should throw error if col is null", function () {
            assert.throws(function () {
                tableBehaviorUnderTest._getCell (0, null);
            });
        });
        it("should return the TableCell with correct values", function () {
            var res = tableBehaviorUnderTest._getCell (0, 0);
            assert.strictEqual(res._rowIdentifier, 0);
            assert.strictEqual(res._columnIdentifier, 0);
            assert.deepEqual(res._ownerTable, tableBehaviorUnderTest);
        });
    });

    describe("makeCellVisible method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.makeCellVisible();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.makeCellVisible(null);
            });
        });

        it("should throw error if col is undefined", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.makeCellVisible(1);
            });
        });

        it("should throw error if col is null", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.makeCellVisible(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = tableBehaviorUnderTest.makeCellVisible(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'MakeCellVisible' if row is a number and col is a number", function () {
            tableBehaviorUnderTest.makeCellVisible(10, 10);
            sinon.assert.calledOnce(tableBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBehaviorUnderTest._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "MakeCellVisible", 10, 10);
        });
    });

    describe("selectCell method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.selectCell();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.selectCell(null);
            });
        });

        it("should throw error if col is undefined", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.selectCell(1);
            });
        });

        it("should throw error if col is null", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.selectCell(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = tableBehaviorUnderTest.selectCell(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SelectCell' if row is a number and col is a number", function () {
            tableBehaviorUnderTest.selectCell(10, 10);
            sinon.assert.calledOnce(tableBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBehaviorUnderTest._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "SelectCell", 10, 10);
        });
    });

    describe("selectRow method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.selectRow();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                tableBehaviorUnderTest.selectRow(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = tableBehaviorUnderTest.selectRow(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SelectRow' if row is a number and col is a number", function () {
            tableBehaviorUnderTest.selectRow(10);
            sinon.assert.calledOnce(tableBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBehaviorUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "SelectRow", 10);
        });
    });

    describe("_rowCount method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBehaviorUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableBehaviorUnderTest._rowCount();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'RowCount'", function () {
            tableBehaviorUnderTest._rowCount();
            sinon.assert.calledOnce(tableBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableBehaviorUnderTest._executeNotWrapped, sinon.match({}), "RowCount");
        });
    });

    describe("_columnCount method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBehaviorUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableBehaviorUnderTest._columnCount();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'ColumnCount'", function () {
            tableBehaviorUnderTest._columnCount();
            sinon.assert.calledOnce(tableBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableBehaviorUnderTest._executeNotWrapped, sinon.match({}), "ColumnCount");
        });
    });

    describe("errorText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBehaviorUnderTest._executeWithEventsOnError.returns(executionPromise);
            var res = tableBehaviorUnderTest.errorText();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'GetErrorProviderText'", function () {
            tableBehaviorUnderTest.errorText();
            sinon.assert.calledOnce(tableBehaviorUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(tableBehaviorUnderTest._executeWithEventsOnError, sinon.match({}), "GetErrorProviderText");
        });
    });

    describe("customGrid method", function () {
        it("should be defined", function () {
            assert.notStrictEqual(tableBehaviorUnderTest.customGrid(), undefined);
        });

    });

    describe("gridType method", function () {
        it("should return correct value", function () {
            var res = tableBehaviorUnderTest.gridType();
            assert.strictEqual(res, GridType.unknown);
        });
    });

    describe("_getSubTypeInfo method", function () {
        it("should return correct value", function () {
            var res = tableBehaviorUnderTest._getSubTypeInfo();
            assert.strictEqual(res, GridType.unknown);
        });
    });

    describe("_convertStringToGridType method", function () {
        it("should return correct value of GridTypeString.DataGridType", function () {
            var res = tableBehaviorUnderTest._convertStringToGridType(GridTypeString.dataGridType);
            assert.strictEqual(res, GridType.dataGrid);
        });

        it("should return correct value of GridTypeString.DataGridViewType", function () {
            var res = tableBehaviorUnderTest._convertStringToGridType(GridTypeString.dataGridViewType);
            assert.strictEqual(res, GridType.dataGridView);
        });

        it("should return correct value of GridTypeString.UltraWinGridType", function () {
            var res = tableBehaviorUnderTest._convertStringToGridType(GridTypeString.ultraWinGridType);
            assert.strictEqual(res, GridType.ultraWinGrid);
        });

        it("should return correct value of GridTypeString.ComponentOneFlexGridType", function () {
            var res = tableBehaviorUnderTest._convertStringToGridType(GridTypeString.componentOneFlexGridType);
            assert.strictEqual(res, GridType.c1FlexGrid);
        });

        it("should return correct value of GridTypeString.ComponentOneTrueDbGridType", function () {
            var res = tableBehaviorUnderTest._convertStringToGridType(GridTypeString.componentOneTrueDbGridType);
            assert.strictEqual(res, GridType.c1TrueDbGrid);
        });

        it("should return correct value of GridTypeString.XtraGridType", function () {
            var res = tableBehaviorUnderTest._convertStringToGridType(GridTypeString.xtraGridType);
            assert.strictEqual(res, GridType.xtraGrid);
        });

        it("should return correct value of unknow", function () {
            var res = tableBehaviorUnderTest._convertStringToGridType("abc");
            assert.strictEqual(res, GridType.unknown);
        });
    });

    describe("_setSubTypeInfoFromString method", function () {
        it("should return correct value of GridTypeString.DataGridType", function () {
            tableBehaviorUnderTest._setSubTypeInfoFromString(GridTypeString.dataGridType);
            assert.strictEqual(tableBehaviorUnderTest._gridType, GridType.dataGrid);
        });

        it("should return correct value of GridTypeString.DataGridViewType", function () {
            tableBehaviorUnderTest._setSubTypeInfoFromString(GridTypeString.dataGridViewType);
            assert.strictEqual(tableBehaviorUnderTest._gridType, GridType.dataGridView);
        });

        it("should return correct value of GridTypeString.UltraWinGridType", function () {
            tableBehaviorUnderTest._setSubTypeInfoFromString(GridTypeString.ultraWinGridType);
            assert.strictEqual(tableBehaviorUnderTest._gridType, GridType.ultraWinGrid);
        });

        it("should return correct value of GridTypeString.ComponentOneFlexGridType", function () {
            tableBehaviorUnderTest._setSubTypeInfoFromString(GridTypeString.componentOneFlexGridType);
            assert.strictEqual(tableBehaviorUnderTest._gridType, GridType.c1FlexGrid);
        });

        it("should return correct value of GridTypeString.ComponentOneTrueDbGridType", function () {
            tableBehaviorUnderTest._setSubTypeInfoFromString(GridTypeString.componentOneTrueDbGridType);
            assert.strictEqual(tableBehaviorUnderTest._gridType, GridType.c1TrueDbGrid);
        });

        it("should return correct value of GridTypeString.XtraGridType", function () {
            tableBehaviorUnderTest._setSubTypeInfoFromString(GridTypeString.xtraGridType);
            assert.strictEqual(tableBehaviorUnderTest._gridType, GridType.xtraGrid);
        });

        it("should return correct value of unknow", function () {
            tableBehaviorUnderTest._setSubTypeInfoFromString("abc");
            assert.strictEqual(tableBehaviorUnderTest._gridType, GridType.unknown);
        });
    });

    describe("_getCellX method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBehaviorUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableBehaviorUnderTest._getCellX(0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the parameters are indices", function () {
            tableBehaviorUnderTest._getCellX(0, 0);
            sinon.assert.calledOnce(tableBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableBehaviorUnderTest._executeNotWrapped, sinon.match({0:0, 1:0}), "GetCellProperty", 0, 0, "x");
        });
    });

    describe("_getCellY method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBehaviorUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableBehaviorUnderTest._getCellY(0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the parameters are indices", function () {
            tableBehaviorUnderTest._getCellY(0, 0);
            sinon.assert.calledOnce(tableBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableBehaviorUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "GetCellProperty", 0, 0, "y");
        });
    });

    describe("_getCellHeight method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBehaviorUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableBehaviorUnderTest._getCellHeight(0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the parameters are indices", function () {
            tableBehaviorUnderTest._getCellHeight(0, 0);
            sinon.assert.calledOnce(tableBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableBehaviorUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "GetCellProperty", 0, 0, "height");
        });
    });

    describe("_getCellWidth method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBehaviorUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableBehaviorUnderTest._getCellWidth(0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the parameters are indices", function () {
            tableBehaviorUnderTest._getCellWidth(0, 0);
            sinon.assert.calledOnce(tableBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableBehaviorUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "GetCellProperty", 0, 0, "width");
        });
    });

    describe("_getCellValue method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBehaviorUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableBehaviorUnderTest._getCellValue(0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the parameters are indices", function () {
            tableBehaviorUnderTest._getCellValue(0, 0);
            sinon.assert.calledOnce(tableBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableBehaviorUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "GetCellProperty", 0, 0, "value");
        });
    });

    describe("_getCellColumnName method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBehaviorUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableBehaviorUnderTest._getCellColumnName(0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the parameters are indices", function () {
            tableBehaviorUnderTest._getCellColumnName(0, 0);
            sinon.assert.calledOnce(tableBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableBehaviorUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "GetCellProperty", 0, 0, "colname");
        });
    });

    describe("_setCellValue method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBehaviorUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableBehaviorUnderTest._setCellValue(0, 0, "abc");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'SetCellData' if the parameters are indices", function () {
            tableBehaviorUnderTest._setCellValue(0, 0, "abc");
            sinon.assert.calledOnce(tableBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableBehaviorUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "SetCellData", 0, 0, "abc");
        });
    });

    describe("sendChars method", function () {
        it("should throw error if rowIdentifier is undefined", function () {
            assert.throws(function () {
                tableBehaviorUnderTest._sendChars();
            });
        });

        it("should throw error if rowIdentifier is null", function () {
            assert.throws(function () {
                tableBehaviorUnderTest._sendChars(null);
            });
        });

        it("should throw error if columnIdentifier is undefined", function () {
            assert.throws(function () {
                tableBehaviorUnderTest._sendChars(1);
            });
        });

        it("should throw error if columnIdentifier is null", function () {
            assert.throws(function () {
                tableBehaviorUnderTest._sendChars(1, null);
            });
        });

        it("should throw error if newValue is undefined", function () {
            assert.throws(function () {
                tableBehaviorUnderTest._sendChars(1, 1);
            });
        });
    });
});