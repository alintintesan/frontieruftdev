// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/28/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Radio Button Description", function () {
    var RadioButton = require("../lib/radio_button.js").RadioButton;
    var radioButtonDescriptionUnderTest;

    beforeEach(function () {
        radioButtonDescriptionUnderTest = RadioButton();
    });

    describe("Constructor", function () {
        it("should assign 'WinForms' and 'RadioButton' LeanFT type", function () {
            radioButtonDescriptionUnderTest = new RadioButton();
            assert.deepEqual(radioButtonDescriptionUnderTest.leanFTType, {
                technology: "WinForms",
                leanftType: "RadioButton"
            });
        });
    });

    describe("isChecked method", function () {
        it("should add 'checked' to _properties when value is given", function () {
            radioButtonDescriptionUnderTest.isChecked(true);
            assert.strictEqual(radioButtonDescriptionUnderTest._properties["checked"], true);
        });

        it("should add 'checked' to _properties when value is given in string", function () {
            radioButtonDescriptionUnderTest.isChecked("true");
            assert.strictEqual(radioButtonDescriptionUnderTest._properties["checked"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = radioButtonDescriptionUnderTest.isChecked(true);
            assert.strictEqual(result, radioButtonDescriptionUnderTest);
        });

        it("should remove 'checked' from _properties when value is null", function () {
            radioButtonDescriptionUnderTest._properties["checked"] = true;
            radioButtonDescriptionUnderTest.isChecked(null);
            assert(!("checked" in radioButtonDescriptionUnderTest._properties));
        });

        it("should return the value of 'checked' from _properties when value is not given", function () {
            radioButtonDescriptionUnderTest._properties["checked"] = true;
            var result = radioButtonDescriptionUnderTest.isChecked();
            assert.equal(result, true);
        });
    });
});

describe("Radio Button Test Object", function () {
    var RadioButtonTO = require("../lib/radio_button.js").RadioButtonTO;
    var radioButtonTOUnderTest;

    beforeEach(function () {
        radioButtonTOUnderTest = new RadioButtonTO();
        sinon.stub(radioButtonTOUnderTest, "_getROProperty");
        sinon.stub(radioButtonTOUnderTest, "_executeWithEvents");
        sinon.stub(radioButtonTOUnderTest, "_executeWithEventsOnError");
    });

    describe("isChecked method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            radioButtonTOUnderTest._getROProperty.returns(promiseMock);
            var res = radioButtonTOUnderTest.isChecked();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _getROProperty 'checked'", function () {
            radioButtonTOUnderTest.isChecked();
            sinon.assert.calledOnce(radioButtonTOUnderTest._getROProperty);
            sinon.assert.calledWith(radioButtonTOUnderTest._getROProperty, "checked", sinon.match({}));
        });
    });

    describe("set method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            radioButtonTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = radioButtonTOUnderTest.set();
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments", function () {
            radioButtonTOUnderTest.set();
            sinon.assert.calledOnce(radioButtonTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(radioButtonTOUnderTest._executeWithEvents, sinon.match({ }), "Set");
        });
    });

    describe("errorText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            radioButtonTOUnderTest._executeWithEventsOnError.returns(executionPromise);
            var res = radioButtonTOUnderTest.errorText();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'GetErrorProviderText'", function () {
            radioButtonTOUnderTest.errorText();
            sinon.assert.calledOnce(radioButtonTOUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(radioButtonTOUnderTest._executeWithEventsOnError, sinon.match({}), "GetErrorProviderText");
        });
    })
});
