// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/16/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("ToolBarItem", function () {

    var ToolBarItem = require("../lib/toolbar_item.js").ToolBarItem;
    var ToolBarItemUnderTest;

    beforeEach(function () {
        var owner = { owner: "Owner", _executeWithEventsOnItem : sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub() };
        ToolBarItemUnderTest = new ToolBarItem(owner, 10, "TextRepresentation");
        ToolBarItemUnderTest._executeWithEventsOnItem = sinon.stub();
        ToolBarItemUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    afterEach(function () {        
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            var owner = { owner: "Owner", _executeWithEventsOnItem : sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub() };
            var parent = owner;
            ToolBarItemUnderTest = new ToolBarItem(parent, 10, "TextRepresentation");
            assert.strictEqual(ToolBarItemUnderTest._ownerToolBar, parent);
            assert.strictEqual(ToolBarItemUnderTest._identifier, 10);
            assert.strictEqual(ToolBarItemUnderTest._textRepresentation, "TextRepresentation");
        });        
    });

    describe("isHidden method", function () {
        it("should execute _isItemHidden with correct parameter", function () {
            ToolBarItemUnderTest._ownerToolBar._isItemHidden = sinon.stub();
            ToolBarItemUnderTest.isHidden();
            sinon.assert.calledOnce(ToolBarItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(ToolBarItemUnderTest._executeWithEventsOnItemOnError, ToolBarItemUnderTest._ownerToolBar._isItemHidden, 10);
        });

        it("should return boolean if _isItemHidden returns boolean", function () {
            ToolBarItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = ToolBarItemUnderTest.isHidden();
            assert.strictEqual(res, true);
        });
    });

    describe("press method", function () {
        it("should return the promise as it is", function () {
            var promiseMock = {};
            ToolBarItemUnderTest._executeWithEventsOnItem = sinon.stub().returns(promiseMock);
            var res = ToolBarItemUnderTest.press();
            assert.strictEqual(res, promiseMock);
        });
    });
});
