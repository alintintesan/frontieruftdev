// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/09/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var CheckedState = Core.CheckedState;

describe("Checkbox Description", function () {
    var CheckBox = require("../lib/check_box.js").CheckBox;
    var checkboxDescriptionUnderTest;

    beforeEach(function () {
        checkboxDescriptionUnderTest = CheckBox();
    });

    describe("Constructor", function () {
        it("should assign 'WinForms' and 'CheckBox' LeanFT type", function () {
            checkboxDescriptionUnderTest = new CheckBox();
            assert.deepEqual(checkboxDescriptionUnderTest.leanFTType, {
                technology: "WinForms",
                leanftType: "CheckBox"
            });
        });
    });

    describe("isChecked method", function () {
        it("should add 'checked' to _properties when value is given", function () {
            checkboxDescriptionUnderTest.isChecked(true);
            assert.strictEqual(checkboxDescriptionUnderTest._properties["checked"], true);
        });

        it("should add 'checked' to _properties when value is given in string", function () {
            checkboxDescriptionUnderTest.isChecked("true");
            assert.strictEqual(checkboxDescriptionUnderTest._properties["checked"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkboxDescriptionUnderTest.isChecked(true);
            assert.strictEqual(result, checkboxDescriptionUnderTest);
        });

        it("should remove 'checked' from _properties when value is null", function () {
            checkboxDescriptionUnderTest._properties["checked"] = true;
            checkboxDescriptionUnderTest.isChecked(null);
            assert(!("checked" in checkboxDescriptionUnderTest._properties));
        });

        it("should return the value of 'checked' from _properties when value is not given", function () {
            checkboxDescriptionUnderTest._properties["checked"] = true;
            var result = checkboxDescriptionUnderTest.isChecked();
            assert.equal(result, true);
        });
    });

    describe("isThreeState method", function () {
        it("should add 'ThreeState' to _properties when value is given", function () {
            checkboxDescriptionUnderTest.isThreeState(true);
            assert.strictEqual(checkboxDescriptionUnderTest._properties["ThreeState"], true);
        });

        it("should add 'ThreeState' to _properties when value is given in string", function () {
            checkboxDescriptionUnderTest.isThreeState("true");
            assert.strictEqual(checkboxDescriptionUnderTest._properties["ThreeState"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkboxDescriptionUnderTest.isThreeState(true);
            assert.strictEqual(result, checkboxDescriptionUnderTest);
        });

        it("should remove 'ThreeState' from _properties when value is null", function () {
            checkboxDescriptionUnderTest._properties["ThreeState"] = true;
            checkboxDescriptionUnderTest.isThreeState(null);
            assert(!("ThreeState" in checkboxDescriptionUnderTest._properties));
        });

        it("should return the value of 'ThreeState' from _properties when value is not given", function () {
            checkboxDescriptionUnderTest._properties["ThreeState"] = true;
            var result = checkboxDescriptionUnderTest.isThreeState();
            assert.equal(result, true);
        });
    });

    describe("state method", function () {
        it("should add 'CheckState' to _properties when value is given", function () {
            checkboxDescriptionUnderTest.state(CheckedState.checked);
            assert.strictEqual(checkboxDescriptionUnderTest._properties["CheckState"], 1);
        });

        it("should add 'CheckState' to _properties when string input value is given", function () {
            checkboxDescriptionUnderTest.state("checked");
            assert.strictEqual(checkboxDescriptionUnderTest._properties["CheckState"], 1);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkboxDescriptionUnderTest.state(CheckedState.checked);
            assert.strictEqual(result, checkboxDescriptionUnderTest);
        });

        it("should remove 'CheckState' from _properties when value is null", function () {
            checkboxDescriptionUnderTest._properties["CheckState"] = 1;
            checkboxDescriptionUnderTest.state(null);
            assert(!("CheckState" in checkboxDescriptionUnderTest._properties));
        });

        it("should return the value of 'CheckState' from _properties when value is not given", function () {
            checkboxDescriptionUnderTest._properties["CheckState"] = 1;
            var result = checkboxDescriptionUnderTest.state();
            assert.equal(result, CheckedState.checked);
        });
    });
});

describe("Checkbox Test Object", function () {
    var CheckBoxTO = require("../lib/check_box.js").CheckBoxTO;
    var checkBoxTOUnderTest;

    beforeEach(function () {
        checkBoxTOUnderTest = new CheckBoxTO();
        sinon.stub(checkBoxTOUnderTest, "_getROProperty");
        sinon.stub(checkBoxTOUnderTest, "_executeWithEvents");
        sinon.stub(checkBoxTOUnderTest, "_executeWithEventsOnError");
    });

    describe("isChecked method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            checkBoxTOUnderTest._getROProperty.returns(promiseMock);
            var res = checkBoxTOUnderTest.isChecked();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _getROProperty 'checked'", function () {
            checkBoxTOUnderTest.isChecked();
            sinon.assert.calledOnce(checkBoxTOUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTOUnderTest._getROProperty, "checked", sinon.match({}));
        });
    });

    describe("isThreeState method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            checkBoxTOUnderTest._getROProperty.returns(promiseMock);
            var res = checkBoxTOUnderTest.isThreeState();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _getROProperty 'ThreeState'", function () {
            checkBoxTOUnderTest.isThreeState();
            sinon.assert.calledOnce(checkBoxTOUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTOUnderTest._getROProperty, "ThreeState", sinon.match({}));
        });
    });

    describe("state method", function () {
        var promiseMock = {then:function (cb) {
            return cb(1);
        }};

        it("should return correct CheckedState", function () {
            checkBoxTOUnderTest._getROProperty.returns(promiseMock);
            var res = checkBoxTOUnderTest.state();
            assert.strictEqual(res, "checked");
        });

        it("should execute _getROProperty 'CheckState'", function () {
            checkBoxTOUnderTest._getROProperty.returns(promiseMock);
            checkBoxTOUnderTest.state();
            sinon.assert.calledOnce(checkBoxTOUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTOUnderTest._getROProperty, "CheckState", sinon.match({}));
        });
    });

    describe("errorText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            checkBoxTOUnderTest._executeWithEventsOnError.returns(executionPromise);
            var res = checkBoxTOUnderTest.errorText();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'GetErrorProviderText'", function () {
            checkBoxTOUnderTest.errorText();
            sinon.assert.calledOnce(checkBoxTOUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(checkBoxTOUnderTest._executeWithEventsOnError, sinon.match({}), "GetErrorProviderText");
        });
    });

    describe("set method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            checkBoxTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = checkBoxTOUnderTest.set("checked");
            assert.equal(res, executionPromise);
        });

        it("should throw error if the state is undefined", function () {
            assert.throws(function () {
                checkBoxTOUnderTest.set();
            });
        });

        it("should throw error if the state is null", function () {
            assert.throws(function () {
                checkBoxTOUnderTest.set(null);
            });
        });

        it("should execute _executeWithEvents 'Set' if the state is defined as 'checked'", function () {
            checkBoxTOUnderTest.set("checked");
            sinon.assert.calledOnce(checkBoxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(checkBoxTOUnderTest._executeWithEvents, sinon.match({ 0: "checked" }), "Set", "ON");
        });

        it("should execute _executeWithEvents 'Set' if the state is defined as 'unchecked'", function () {
            checkBoxTOUnderTest.set("unchecked");
            sinon.assert.calledOnce(checkBoxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(checkBoxTOUnderTest._executeWithEvents, sinon.match({ 0: "unchecked" }), "Set", "OFF");
        });
    });
});