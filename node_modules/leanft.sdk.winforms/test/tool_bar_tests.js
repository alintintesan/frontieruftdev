// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/16/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("ToolBar Test Object", function () {

    var ToolBarTO = require("../lib/tool_bar.js").ToolBarTO;
    var ToolBarItem = require("../lib/toolbar_item.js").ToolBarItem;
    var toolBarTOUnderTest;

    var removeExecutorMethods = function(array){
        array.map(function(item){
            delete item._executeWithEventsOnItem;
            delete item._executeWithEventsOnItemOnError;
        });
        return array;
    };

    beforeEach(function () {
        toolBarTOUnderTest = new ToolBarTO();
        sinon.stub(toolBarTOUnderTest, "_executeWithEventsOnError");
        sinon.stub(toolBarTOUnderTest, "_executeWithEvents");
        sinon.stub(toolBarTOUnderTest, "_getROPropertiesWithoutEvents");
        sinon.stub(toolBarTOUnderTest, "_getROProperty");
        sinon.stub(toolBarTOUnderTest, "_executeNotWrapped");
    });

    afterEach(function () {
        
    });

 describe("_nativeStringToMenuItems method", function () {
        
        it("should return empty list if no item returns from _nativeStringToMenuItems", function () {
            var res = toolBarTOUnderTest._nativeStringToMenuItems("");
            assert.deepEqual(res, []);
        });

        it("should return empty list if no item returns from _nativeStringToMenuItems", function () {
            var res = toolBarTOUnderTest._nativeStringToMenuItems();
            assert.deepEqual(res, []);
        });

         it("should return a list  with items if items returns from _executeWithEventsOnError", function () {
            var items = toolBarTOUnderTest._nativeStringToMenuItems("Item1\nItem2");
            var res = removeExecutorMethods(items);
            assert.deepEqual(res, removeExecutorMethods([new ToolBarItem(toolBarTOUnderTest, "Item1", "Item1"), new ToolBarItem(toolBarTOUnderTest, "Item2", "Item2")]));
        });
    });

    describe("topMenuItems method", function () {
       it("should call the method _executeWithEventsOnError", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            toolBarTOUnderTest._executeWithEventsOnError.returns(promiseMock);
            var res = toolBarTOUnderTest.topMenuItems();
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEventsOnError, sinon.match({ }), "GetContent");
        });

         it("should return empty list if no item returns from _executeWithEventsOnError", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            toolBarTOUnderTest._executeWithEventsOnError.returns(promiseMock);
            var res = toolBarTOUnderTest.topMenuItems();
            assert.deepEqual(res, []);
        });

         it("should return a list  with items if items returns from _executeWithEventsOnError", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            toolBarTOUnderTest._executeWithEventsOnError.returns(promiseMock);
            var items = toolBarTOUnderTest.topMenuItems();
            assert.deepEqual(items, (["Item1", "Item2"]));
        });
    });

    describe("items method", function () {
        // beforeEach(function () {
        //     sinon.stub(toolBarTOUnderTest, "_nativeStringToMenuItems");
        // });
        // afterEach(function () {
        //     toolBarTOUnderTest._nativeStringToMenuItems.restore();
        // });

        it("should call the method _executeWithEventsOnError", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            toolBarTOUnderTest._executeWithEventsOnError.returns(promiseMock);
            toolBarTOUnderTest.items();
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEventsOnError, sinon.match({}), "GetContent");
        });

         it("should return the promise as it is", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };
            toolBarTOUnderTest._executeWithEventsOnError.returns(promiseMock);
            var items = toolBarTOUnderTest.items();
            var res = removeExecutorMethods(items);
            assert.deepEqual(res, removeExecutorMethods([new ToolBarItem(toolBarTOUnderTest, "Item1", "Item1"), new ToolBarItem(toolBarTOUnderTest, "Item2", "Item2")]));
        });
    });

    describe("selectedItems method", function () {
        it("should call the method _executeWithEventsOnError", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            toolBarTOUnderTest._executeWithEventsOnError.returns(promiseMock);
            toolBarTOUnderTest.selectedItems();
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEventsOnError, sinon.match({}), "GetSelection");
        });
    });

    describe("_pressItem method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._pressItem(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Press' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._pressItem(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10}), "Press", 10);
        });

        it("should execute _executeNotWrapped 'Press' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._pressItem("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1"}), "Press", "Item1");
        });
    });

    describe("select method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = toolBarTOUnderTest.select("Parent;Child");
            assert.equal(res, executionPromise);
        });

        it("should execute select 'Select' with correct parameters", function () {
            toolBarTOUnderTest.select("Parent;Child");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEvents, sinon.match({ 0: "Parent;Child"}), "Select", "Parent;Child");
        });
    });

    describe("showDropdown method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = toolBarTOUnderTest.showDropdown(10);
            assert.equal(res, executionPromise);
        });

        it("should execute showDropdown 'ShowDropdown' with correct parameters, if input is number", function () {
            toolBarTOUnderTest.showDropdown(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEvents, sinon.match({ 0: 10}), "ShowDropdown", 10);
        });

        it("should execute showDropdown 'ShowDropdown' with correct parameters, if input is string", function () {
            toolBarTOUnderTest.showDropdown("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEvents, sinon.match({ 0: "Item1"}), "ShowDropdown", "Item1");
        });
    });

    describe("isItemExists method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest.isItemExists("Parent;Child");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters", function () {
            toolBarTOUnderTest.isItemExists("Parent;Child");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Parent;Child" }), "ItemExists", "Parent;Child");
        });
    });

   describe("getItem method", function () {
        it("should throw error if text is undefined", function () {
            assert.throws(function () {
                toolBarTOUnderTest.getItem();
            });
        });

        it("should throw error if text is null", function () {
            assert.throws(function () {
                toolBarTOUnderTest.getItem(null);
            });
        });

        it("should return the ToolBarItem with correct values", function () {
            var res = toolBarTOUnderTest.getItem("Item1");
            assert.strictEqual(res._identifier, "Item1");
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerToolBar, toolBarTOUnderTest);
        });
    });

    describe("_isItemHidden method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._isItemHidden(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._isItemHidden(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "hidden");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._isItemHidden("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "hidden");
        });
    });

    describe("_createItem method", function () {
        it("should return the ToolBarItem with correct values", function () {
            var res = toolBarTOUnderTest._createItem("Item1", 1);
            assert.strictEqual(res._identifier, "Item1");
            assert.strictEqual(res._textRepresentation, 1);
            assert.deepEqual(res._ownerToolBar, toolBarTOUnderTest);
        });
    });

     describe("errorText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeWithEventsOnError.returns(executionPromise);
            var res = toolBarTOUnderTest.errorText();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEventsOnError 'GetErrorProviderText' with correct parameters", function () {
            toolBarTOUnderTest.errorText();
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEventsOnError, sinon.match({}), "GetErrorProviderText");
        });
    });
});
