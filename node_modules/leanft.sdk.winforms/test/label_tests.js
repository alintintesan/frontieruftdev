// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/05/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Label Description", function () {
    var Label = require("../lib/label.js").Label;
    var LabelDescriptionUnderTest;

    beforeEach(function () {
        LabelDescriptionUnderTest = Label();
    });

    describe("Constructor", function () {
        it("should assign 'WinForms' and 'Label' LeanFT type", function () {
            LabelDescriptionUnderTest = new Label();
            assert.deepEqual(LabelDescriptionUnderTest.leanFTType, {
                technology: "WinForms",
                leanftType: "Label"
            });
        });
    });
});

describe("Label Test Object", function () {
    var LabelTO = require("../lib/label.js").LabelTO;
    var LabelTestObjectUnderTest;

    beforeEach(function () {
        LabelTestObjectUnderTest = new LabelTO();
        sinon.stub(LabelTestObjectUnderTest, "_executeWithEventsOnError");
    });

    describe("errorText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            LabelTestObjectUnderTest._executeWithEventsOnError.returns(executionPromise);
            var res = LabelTestObjectUnderTest.errorText();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'GetErrorProviderText'", function () {
            LabelTestObjectUnderTest.errorText();
            sinon.assert.calledOnce(LabelTestObjectUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(LabelTestObjectUnderTest._executeWithEventsOnError, sinon.match({}), "GetErrorProviderText");
        });
    })
});
