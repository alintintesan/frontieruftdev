// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/30/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("Tree View Node", function () {

    var TreeViewNode = require("../lib/treeview_node.js").TreeViewNode;
    var treeViewNodeUnderTest;
    var owner;

    beforeEach(function () {
        owner = { owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub() };
        treeViewNodeUnderTest = new TreeViewNode(owner, 10, "TextRepresentation");
        treeViewNodeUnderTest._executeWithEventsOnItem = sinon.stub();
        treeViewNodeUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    afterEach(function () {
        delete treeViewNodeUnderTest._executeWithEventsOnItem;
        delete treeViewNodeUnderTest._executeWithEventsOnItemOnError;
        delete owner._executeWithEventsOnItem;
        delete owner._executeWithEventsOnItemOnError;
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            assert.deepEqual(treeViewNodeUnderTest._ownerTreeView, owner);
            assert.strictEqual(treeViewNodeUnderTest._identifier, 10);
            assert.strictEqual(treeViewNodeUnderTest._textRepresentation, "TextRepresentation");
        });        
    });
});
