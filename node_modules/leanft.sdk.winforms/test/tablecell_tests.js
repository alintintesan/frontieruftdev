// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Table Cell Description", function () {

    var TableCell = require("../lib/tablecell.js").TableCell;
    var tableCellUnderTest;
    var owner;

    beforeEach(function () {
        owner = { _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
        tableCellUnderTest = new TableCell(owner, 0, 0);
        tableCellUnderTest._executeWithEventsOnItem = sinon.stub();
        tableCellUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    describe("Constructor", function () {
        it("should assign correct values", function () {
            var parent = owner;
            tableCellUnderTest = new TableCell(parent, 0, 0);
            assert.strictEqual(tableCellUnderTest._ownerTable, parent);
            assert.strictEqual(tableCellUnderTest._rowIdentifier, 0);
            assert.strictEqual(tableCellUnderTest._columnIdentifier, 0);
        });
    });

    describe("x method", function () {
        it("should execute getCellX with correct parameter", function () {
            tableCellUnderTest._ownerTable._getCellX = sinon.stub();
            tableCellUnderTest.x();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItemOnError, tableCellUnderTest._ownerTable._getCellX, 0);
        });

        it("should return what's returned from getCellX as is", function () {
            tableCellUnderTest._executeWithEventsOnItemOnError.returns(0);
            var res = tableCellUnderTest.x();
            assert.strictEqual(res, 0);
        });
    });

    describe("y method", function () {
        it("should execute getCellY with correct parameter", function () {
            tableCellUnderTest._ownerTable._getCellY = sinon.stub();
            tableCellUnderTest.y();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItemOnError, tableCellUnderTest._ownerTable._getCellY, 0);
        });

        it("should return what's returned from getCellY as is", function () {
            tableCellUnderTest._executeWithEventsOnItemOnError.returns(0);
            var res = tableCellUnderTest.y();
            assert.strictEqual(res, 0);
        });
    });

    describe("height method", function () {
        it("should execute getCellHeight with correct parameter", function () {
            tableCellUnderTest._ownerTable._getCellHeight = sinon.stub();
            tableCellUnderTest.height();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItemOnError, tableCellUnderTest._ownerTable._getCellHeight, 0);
        });

        it("should return what's returned from getCellHeight as is", function () {
            tableCellUnderTest._executeWithEventsOnItemOnError.returns(0);
            var res = tableCellUnderTest.height();
            assert.strictEqual(res, 0);
        });
    });

    describe("width method", function () {
        it("should execute getCellWidth with correct parameter", function () {
            tableCellUnderTest._ownerTable._getCellWidth = sinon.stub();
            tableCellUnderTest.width();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItemOnError, tableCellUnderTest._ownerTable._getCellWidth, 0);
        });

        it("should return what's returned from getCellWidth as is", function () {
            tableCellUnderTest._executeWithEventsOnItemOnError.returns(0);
            var res = tableCellUnderTest.width();
            assert.strictEqual(res, 0);
        });
    });

    describe("value method", function () {
        it("should execute getCellValue with correct parameter", function () {
            tableCellUnderTest._ownerTable._getCellValue = sinon.stub();
            tableCellUnderTest.value();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItemOnError, tableCellUnderTest._ownerTable._getCellValue, 0);
        });

        it("should return what's returned from getCellValue as is", function () {
            tableCellUnderTest._executeWithEventsOnItemOnError.returns(0);
            var res = tableCellUnderTest.value();
            assert.strictEqual(res, 0);
        });
    });

    describe("columnName method", function () {
        it("should execute getCellColumnName with correct parameter", function () {
            tableCellUnderTest._ownerTable._getCellColumnName = sinon.stub();
            tableCellUnderTest.columnName();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItemOnError, tableCellUnderTest._ownerTable._getCellColumnName, 0);
        });

        it("should return what's returned from getCellColumnName as is", function () {
            tableCellUnderTest._executeWithEventsOnItemOnError.returns(0);
            var res = tableCellUnderTest.columnName();
            assert.strictEqual(res, 0);
        });
    });

    describe("setValue method", function () {
        it("should throw error if value is undefined", function () {
            assert.throws(function () {
                tableCellUnderTest.setValue();
            });
        });

        it("should throw error if value is null", function () {
            assert.throws(function () {
                tableCellUnderTest.setValue(null);
            });
        });

        it("should execute _openPossibleEntries with correct parameter", function () {
            tableCellUnderTest._ownerTable._setCellValue = sinon.stub();
            tableCellUnderTest.setValue("value");
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItem, tableCellUnderTest._ownerTable._setCellValue, 0, 0, "value");
        });
    });
});

describe("C1 Table Cell", function () {

    var C1TableCell = require("../lib/tablecell.js").C1TableCell;
    var c1TableCellUnderTest;
    var owner;

    beforeEach(function () {
        owner = {_executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
        c1TableCellUnderTest = new C1TableCell(owner, 0, 0);
        c1TableCellUnderTest._executeWithEventsOnItem = sinon.stub();
        c1TableCellUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    describe("Constructor", function () {
        it("should assign correct values", function () {
            var parent = owner;
            c1TableCellUnderTest = new C1TableCell(parent, 0, 0);
            assert.strictEqual(c1TableCellUnderTest._ownerTable, parent);
            assert.strictEqual(c1TableCellUnderTest._rowIdentifier, 0);
            assert.strictEqual(c1TableCellUnderTest._columnIdentifier, 0);
        });
    });

    describe("sendChars method", function () {

    });
});