// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/16/2016.
 */
var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var ToolBarItemBase = Core.ToolBarItemBase;
var MergeBehavior = Core.MergeBehavior;

/**
 * @ignore
 */
var ToolBarItemBehavior = {
    /**
     * @ignore
     * @memberof WinForms.ToolBarItemBehavior
     */
    _methods: {
        /**
         * Presses this toolbar item.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        press: function () {
            return this._executeWithEventsOnItem(this._ownerToolBar._pressItem, this._identifier);
        }
    },

    /**
     * @ignore
     * @memberof WinForms.ToolBarItemBehavior
     */
    _properties:{
        /**
         * Indicates whether this item is not visible and therefore cannot accept user input.
         * Remarks: an item can be visible and disabled for other reasons
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the item is hidden or not.
         */
        isHidden: function () {
            return this._executeWithEventsOnItemOnError(this._ownerToolBar._isItemHidden, this._identifier);
        }
    }
};

/**
 * A ToolBarItem object
 * @constructor
 * @class ToolBarItem
 * @extends ToolBarItemBase
 * @mixes WinForms.ToolBarItemBehavior._methods
 * @mixes WinForms.ToolBarItemBehavior._properties
 * @memberof WinForms
 */
function ToolBarItem(ownerToolBar, identifier, textRepresentation) {
    var toolbarItem = new ToolBarItemBase(ownerToolBar, identifier, textRepresentation);
    Utils.extend(toolbarItem, MergeBehavior);
    toolbarItem._mergeBehavior(ToolBarItemBehavior);
    return toolbarItem;
}

module.exports.ToolBarItem = ToolBarItem;
