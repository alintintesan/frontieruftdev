// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/10/2016.
 */

var Core = require("leanft.sdk.core");
var TestObjectBase = Core.TestObjectBase;
var NativeObjectBehavior = Core.NativeObjectBehavior;
var Utils = Core.ObjectUtils;
var DescriptionBase = Core.DescriptionBase;
var PropertyFlatter = Core.PropertyFlatter;
var NativeObjectBehavior = Core.NativeObjectBehavior;
var Convert = Core.Convert;
var UIObjectBaseBehavior = Core.UIObjectBaseBehavior;
var LocationDescriptionBehavior = Core.LocationDescriptionBehavior;
var UIObjectDescriptionBaseBehavior = Core.UIObjectDescriptionBaseBehavior;
var ArrayUtils = Core.ArrayUtils;
var DragAndDropBehavior = Core.DragAndDropBehavior;
var ClickBehavior = Core.ClickBehavior;
var DoubleClickBehavior = Core.DoubleClickBehavior;
var SendKeysBehavior = Core.SendKeysBehavior;

/**
 * WinForms namespace
 * @namespace WinForms
 */

/**
 * UiObjectBaseDescription - the base description for all WinForms elements
 * @class UiObjectBaseDescription
 * @extends DescriptionBase
 * @mixes LocationDescriptionBehavior
 * @mixes UIObjectDescriptionBaseBehavior
 * @memberof WinForms
 * @ignore
 */
function UiObjectBaseDescription(leanFTType) {
    this._init({
        technology: "WinForms",
        leanftType: leanFTType
    });
    Utils.extend(this, LocationDescriptionBehavior);
    Utils.extend(this, UIObjectDescriptionBaseBehavior);

    //init grouped properties
    this.location({});
    this.absoluteLocation({});
    this.size({});
    this.objectProperties({});

    this._indexType = "location";
}

/**
 * @ignore
 */
Utils.inherit(UiObjectBaseDescription, DescriptionBase, {
    /**
    * The permanent part of the MFC window class.
    * @param {string} [windowClassRegExp] When provided, this method acts as a setter and sets the windowClassRegExp value.
    * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored windowClassRegExp value;
    * otherwise it returns 'this' for use with the builder pattern.
    * @memberof WinForms.UiObjectBaseDescription#
    */
    windowClassRegExp: function (windowClassRegExp) {
        return this._simplePropertyHandler("regexpwndclass", windowClassRegExp);
    },

    /**
     * The object's native class.
     * @param {string} [nativeClass] When provided, this method acts as a setter and sets the nativeClass value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored nativeClass value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WinForms.UiObjectBaseDescription#
     */
    nativeClass: function (nativeClass) {
        return this._simplePropertyHandler("nativeclass", nativeClass);
    },

    /**
     * The object's window ID.
     * @param {number} [windowId] When provided, this method acts as a setter and sets the windowId value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored windowId value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WinForms.UiObjectBaseDescription#
     */
    windowId: function (windowId) {
        return this._propertyHandler("window id", windowId, Convert.toNumber);
    },

    /**
     * Indicates whether the object is a child window.
     * @param {boolean} [isChildWindow] When provided, this method acts as a setter and sets the isChildWindow value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isChildWindow value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WinForms.UiObjectBaseDescription#
     */
    isChildWindow: function (isChildWindow) {
        return this._propertyHandler("is child window", isChildWindow, Convert.toBool);
    },

    /**
      * Indicates whether the object is an owned window.
      * @param {boolean} [isOwnedWindow] When provided, this method acts as a setter and sets the isOwnedWindow value.
      * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isOwnedWindow value;
      * otherwise it returns 'this' for use with the builder pattern.
      * @memberof WinForms.UiObjectBaseDescription#
      */
    isOwnedWindow: function (isOwnedWindow) {
        return this._propertyHandler("is owned window", isOwnedWindow, Convert.toBool);
    },

    /**
     * The object's name.
     * @param {string} [objectName] When provided, this method acts as a setter and sets the objectName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored objectName value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WinForms.UiObjectBaseDescription#
     */
    objectName: function (objectName) {
        return this._simplePropertyHandler("swfname", objectName);
    },

    /**
     * The full hierarchy of swfname with all parent objects.
     * @param {string} [fullNamePath] When provided, this method acts as a setter and sets the fullNamePath value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored fullNamePath value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WinForms.UiObjectBaseDescription#
     */
    fullNamePath: function (fullNamePath) {
        return this._simplePropertyHandler("swfname path", fullNamePath);
    },

    /**
     * The object's full type name.
     * @param {string} [fullType] When provided, this method acts as a setter and sets the fullType value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored fullType value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WinForms.UiObjectBaseDescription#
     */
    fullType: function (fullType) {
        return this._simplePropertyHandler("swftypename", fullType);
    },

    /**
     * The concrete test object properties including custom properties.
     * @param {Dictionary} [objectProperties] When provided, this method acts as a setter and sets the objectProperties value.
     * @returns {Dictionary | Description} If no parameter is provided, the method acts as a getter and returns the current stored objectProperties value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WinForms.UiObjectBaseDescription#
     */
    objectProperties: function (objectProperties) {
        return this._propertyFlatterHandler("ObjectProperties", PropertyFlatter, objectProperties, this._createUserKeysMapping(objectProperties));
    }
});

/**
 * @class UiObjectBaseTO
 * @param nativeClass
 * @param session
 * @param description
 * @constructor
 * @extends TestObjectBase
 * @mixes UIObjectBaseBehavior._properties
 * @mixes NativeObjectBehavior._methods
 * @mixes ClickBehavior._methods
 * @mixes DoubleClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes SendKeysBehavior._methods
 * @mixes UIObjectBaseTOBehavior._methods
 * @mixes UIObjectBaseTOBehavior._properties
 * @mixes WaitUntilVisibleBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @abstract
 * @memberof WinForms
 * @ignore
 */
function UiObjectBaseTO(nativeclass, session, description) {
    this._init(nativeclass, session, description);
    this._mergeBehavior(UIObjectBaseBehavior);
    this._mergeBehavior(NativeObjectBehavior);
    this._mergeBehavior(UIObjectBaseTOBehavior);
}

var UIObjectBaseTOBehavior = {
    /**
     * @ignore
     * @memberof UIObjectBaseTOBehavior
     */
    _properties: {
        /**
         * Indicates whether the object is a child window.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the object's isChildWindow.
         * @memberof WinForms.UiObjectBaseTO#
         */
        isChildWindow: {
            wiredName:  "is child window"
        },

        /**
         * Indicates whether the object is an owned window.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the object's isOwnedWindow.
         * @memberof WinForms.UiObjectBaseTO#
         */
        isOwnedWindow: {
            wiredName: "is owned window"
        },

        /**
         * Returns the object's name.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's name.
         * @memberof WinForms.UiObjectBaseTO#
         */
        objectName: {
            wiredName: "swfname"
        },

        /**
         * The full hierarchy of this object with all parent objects.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the full hierarchy of this object with all parent objects.
         * @memberof WinForms.UiObjectBaseTO#
         */
        fullNamePath: {
            wiredName: "swfname path"
        },

        /**
         * Returns the object's full type name.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's full type name.
         * @memberof WinForms.UiObjectBaseTO#
         */
        fullType: {
            wiredName: "swftypename"
        },

        /**
         * Returns the object's text.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's text.
         * @memberof WinForms.UiObjectBaseTO#
         */
        text: {
        },

        /**
         * Returns the permanent part of the MFC window class.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the permanent part of the MFC window class.
         * @memberof WinForms.UiObjectBaseTO#
         */
        windowClassRegExp: {
            wiredName: "RegExpWndClass"
        },

        /**
         * Returns the object's window identifier
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's window identifier.
         * @memberof WinForms.UiObjectBaseTO#
         */
        windowId: {
            wiredName: "window id"
        }
    },

    /**
     * @ignore
     * @memberof UIObjectBaseTOBehavior
     */
    _methods: {
        /**
         *
         * Triggers the specified event on this object.
         * @function
         * @param {string} [type] the name of the event to simulate. The list of possible events depends on the object.
         * @param {...string | number} [args] the args describing the data required by the event.
         * @returns {Promise<void>} a promise that is fulfilled with the triggered event.
         * @memberof WinForms.UiObjectBaseTO#
         */
        /*jshint eqnull:true */
        fireEvent: function (type) {
            if (type == null)
                throw new Error("The type cannot be null.");
            var args = ArrayUtils.toArray(arguments);
            args.splice(0, 1);
            return this._executeWithEvents(arguments, "FireEvent", type, args);
        },

        /**
         * Returns the value of a test object property.
         * @function
         * @returns Promise<string> | Promise<number> a promise that is fulfilled with the value of a test object property.
         * @memberof WinForms.UiObjectBaseTO#
         */
        /*jshint eqnull:true */
        getObjectProperty: function (propName) {
            if (propName == null)
                throw new Error("The propName cannot be null.");
            return this._getROProperty(propName, arguments);
        }
    }
};
/**
 * @ignore
 */
Utils.inherit(UiObjectBaseTO, TestObjectBase, {
});

module.exports.UiObjectBaseDescription = UiObjectBaseDescription;
module.exports.UiObjectBaseTO = UiObjectBaseTO;