// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var TableCell = require("./tablecell.js").TableCell;
/**
 * The behaviors of the DataGridBehaviorBase object
 * @memberof WinForms
 * @ignore
 */
var DataGridBehaviorBase = {
    /**
     * @memberof WinForms.DataGridBehaviorBase
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Double-clicks a column by column index.
         * @function
         * @param {number} column The 0-based column index.
         * @returns {Promise<void>} a promise that is fulfilled when the activateColumn operation ends.
         * @memberof WinForms.DataGridBehaviorBase#
         */
        activateColumn: function (column) {
            if (column == null)
                throw new Error("ArgumentException: column is required.");
            return this._ownerTable._executeWithEvents(arguments, "ActivateColumn", Convert.toNumber(column));
        },

        /**
         * Selects column by column by column index.
         * @function
         * @param {number} column The column 0-based index.
         * @returns {Promise<void>} a promise that is fulfilled when the selectColumn operation ends.
         * @memberof WinForms.DataGridBehaviorBase#
         */
        selectColumn: function (column) {
            if (column == null)
                throw new Error("ArgumentException: column is required.");
            return this._ownerTable._executeWithEvents(arguments, "SelectColumn", Convert.toNumber(column));
        }
    },

    /**
     * @memberof WinForms.DataGridBehaviorBase
     * @ignore
     */
    _properties: {
        /**
         * Returns the Table test object this custom grid was accessed from.
         * @function
         * @returns {WinForms.Table} the tableTestObject.
         */
        tableTestObject: function () {
            return this._ownerTable;
        },

        /**
         * Returns either a promise for all the cells in the table (when called without arguments), or all the cells in a row (when called with row only), or for the specified cell.
         * @function
         * @param {number} [rowIndex] The row index of the specific cell.
         * @param {number} [columnIndex] The column index in the row, specified by the row parameter.
         * @returns {Promise<WinForms.TableCell[][] | WinForms.TableCell[]> | WinForms.TableCell} either a promise for all the cells in the table (when called without arguments), or all the cells in a row (when called with row only), or for the specified cell.
         */
        cells: function (rowIndex, columnIndex) {
            return this._cells(rowIndex, columnIndex);
        }
    },

    _helpers: {
         /**
         * Get the number of rows and columns
         * @returns {Promise<Object>} a promise that is fulfilled with the number of rows and columns.
         * @ignore
         */
        _getRowAndColumnCount: function () {
            return this._ownerTable._executeNotWrapped(arguments, "RowCount").then(function(rowCount) {
                return this._ownerTable._executeCommand("ColumnCount").then(function(colCount) {
                    return {
                        rowCount: rowCount,
                        columnCount: colCount
                    };
                });
            }.bind(this));
        },

        /**
         * Get the number of columns in the table.
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns in the table.
         * @ignore
         */
        _getColumnCount: function () {
            return this._ownerTable._executeNotWrapped(arguments, "ColumnCount");
        },

        /**
         * Create TableCell object.
         * @param rowIndex 0-based index.
         * @param columnIndex 0-based index.
         * @returns {WinForms.TableCell} A TableCell object.
         * @ignore
         */
        _createCell: function (rowIndex, columnIndex) {
            return new TableCell(this._ownerTable, rowIndex, columnIndex);
        }
    }
};

module.exports.DataGridBehaviorBase = DataGridBehaviorBase;
