// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/21/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var StringUtils = Core.StringUtils;
var StatusBarDescriptionBaseBehavior = Core.StatusBarDescriptionBaseBehavior;
var Convert = Core.Convert;
var ContainerBehavior = Core.ContainerBehavior;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;

/**
 * StatusBarDescriptionBehavior - the description for a StatusBar object
 * @memberof WinForms
 * @ignore
 */
var StatusBarDescriptionBehavior = {
    /**
     * An array of items in the status bar.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the items value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored items value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    items: function (items) {
        return this._propertyHandler("all items", items, StringUtils.joinFunc("\n"), StringUtils.splitFunc("\n"));
    },

    /**
     * The number of status bar items in the StatusBar.
     * @param {number} [itemsCount] When provided, this method acts as a setter and sets the itemsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored itemsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    count: function (itemsCount) {
        return this._propertyHandler("items count", itemsCount, Convert.toNumber);
    },

    /**
     * Indicates whether the object is right aligned.
     * @param {boolean} [isRightAligned] When provided, this method acts as a setter and sets the isRightAligned value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isRightAligned value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isRightAligned: function (isRightAligned) {
        return this._propertyHandler("RightAligned", isRightAligned, Convert.toBool);
    },

    /**
     * Indicates whether the object is Right to Left layout.
     * @param {boolean} [isRightToLeftLayout] When provided, this method acts as a setter and sets the isRightToLeftLayout value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isRightToLeftLayout value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isRightToLeftLayout: function (isRightToLeftLayout) {
        return this._propertyHandler("RightToLeftLayout", isRightToLeftLayout, Convert.toBool);
    },

    /**
     * Indicates whether the object is Right to Left reading.
     * @param {boolean} [isRightToLeftReading] When provided, this method acts as a setter and sets the isRightToLeftReading value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isRightToLeftReading value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isRightToLeftReading: function (isRightToLeftReading) {
        return this._propertyHandler("RightToLeftReading", isRightToLeftReading, Convert.toBool);
    },

    /**
     * The extended window style of the object. The possible value is in the enum {@link WindowExtendedStyles}
     * @param {WindowExtendedStyles} [windowExtendedStyle] When provided, this method acts as a setter and sets the windowExtendedStyle value.
     * @returns {WindowExtendedStyles | Description} If no parameter is provided, the method acts as a getter and returns the current stored windowExtendedStyle value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WinForms.UiObjectBaseDescription#
     */
    windowExtendedStyle: function (windowExtendedStyle) {
        return this._propertyHandler("WindowExtendedStyle", windowExtendedStyle, Convert.toNumber);
    },


    /**
     * The window style of the object. The possible value is in the enum {@link WindowStyles}
     * @param {WindowStyles} [windowStyle] When provided, this method acts as a setter and sets the windowStyle value.
     * @returns {WindowStyles | Description} If no parameter is provided, the method acts as a getter and returns the current stored windowStyle value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WinForms.UiObjectBaseDescription#
     */
    windowStyle: function (windowStyle) {
        return this._propertyHandler("WindowStyle", windowStyle, Convert.toNumber);
    },

    /**
     * The static text attached to the calendar.
     * @param {string} [attachedText] When provided, this method acts as a setter and sets the attachedText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored attachedText value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    attachedText: function (attachedText) {
        return this._simplePropertyHandler("AttachedText", attachedText);
    }
};

/**
 * The description of a StatusBar test object.
 * @param {Object} [props] Initializes a StatusBar test object using the supplied property bag.
 * @returns {StatusBar} the description object that was initialized.
 * @class StatusBar
 * @memberof WinForms
 * @extends WinForms.UiObjectBaseDescription
 * @mixes Core.StatusBarDescriptionBaseBehavior
 * @mixes WinForms.StatusBarDescriptionBehavior
 */
function StatusBar(props) {
    var statusBarDesc = new UiObjectBaseDescription("StatusBar");
    Utils.extend(statusBarDesc, StatusBarDescriptionBaseBehavior);
    Utils.extend(statusBarDesc, StatusBarDescriptionBehavior);
    statusBarDesc._defineByPropertyBag(props);
    return statusBarDesc;
}

/**
 * A StatusBar object,
 * @constructor
 * @class StatusBarTO
 * @extends WinForms.UiObjectBaseTO
 * @mixes Core.ContainerBehavior
 * @mixes Core.WrappedItemExecutorBehavior
 * @mixes WinForms.StatusBarTOBehavior._properties
 * @memberof WinForms
 */
function StatusBarTO(session, description) {
    description = description || StatusBar();
    var statusBarTO = new UiObjectBaseTO("SwfStatusBar", session, description);
    statusBarTO._mergeBehavior(ContainerBehavior);
    statusBarTO._mergeBehavior(WrappedItemExecutorBehavior);
    statusBarTO._mergeBehavior(StatusBarTOBehavior);
    return statusBarTO;
}

//Consts
var allItemsWiredName = "all items";

/**
 * The behaviors of the StatusBar object
 * @memberof WinForms
 * @ignore
 */
var StatusBarTOBehavior = {
    /**
     * @ignore
     * @memberof WinForms.StatusBarTOBehavior
     */
    _properties: {
        /**
         * Returns the items (parts) in this status bar.
         * @function
         * @returns {Promise<string[]>} a promise fulfilled with the items (parts) in this status bar.
         */
        items: {
            wiredName: allItemsWiredName,
            getter: function () {
                return this._getROProperty(allItemsWiredName, arguments).then(
                    StringUtils.splitFunc("\n")
                );
            }
        },

        /**
         * Indicates whether this status bar has generic "right-aligned" properties.
         * @function
         * @returns {Promise<boolean>} a promise fulfilled with indication whether this status bar has generic "right-aligned" properties.
         */
        isRightAligned: {
            wiredName: "RightAligned"
        },

        /**
         * Indicates whether this status bar's horizontal origin is on the right edge.
         * @function
         * @returns {Promise<boolean>} a promise fulfilled with indication whether this status bar's horizontal origin is on the right edge.
         */
        isRightToLeftLayout: {
            wiredName: "RightToLeftLayout"
        },

        /**
         * Indicates whether this status bar's text is displayed right-to-left.
         * @function
         * @returns {Promise<boolean>} a promise fulfilled with the indication whether this status bar's text is displayed right-to-left.
         */
        isRightToLeftReading: {
            wiredName: "RightToLeftReading"
        },

        /**
         * Returns the extended window style of this status bar. Possible values: <see cref="WindowExtendedStyles"/>
         * @function
         * @returns {Promise<WindowExtendedStyle>} a promise fulfilled with the extended window style of this status bar. The possible value is in the enum {@link WindowExtendedStyles}
         * @memberof WinForms.UIBaseTestObject#
         */
        windowExtendedStyle: {
            wiredName: "WindowExtendedStyle"
        },

        /**
         * Returns the window style of this status bar.
         * @function
         * @returns {Promise<WindowStyle>} a promise fulfilled with the object's window style. The possible value is in the enum {@link WindowStyles}
         * @memberof WinForms.UIBaseTestObject#
         */
        windowStyle: {
            wiredName: "WindowStyle"
        },

        /**
         * Returns the static text attached to a control.
         * @function
         * @returns {Promise<string>} a promise fulfilled with the object's attached text.
         * @memberof WinForms.UIBaseTestObject#
         */
        attachedText: {
            wiredName: "attached text"
        },

        /**
         * Returns the tooltip text of the error icon associated with this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the error text of StatusBar.
         */
        errorText: function () {
            return this._executeWithEventsOnError(arguments, "GetErrorProviderText");
        }
    },

    _additionalProperties: {
        count: {wiredName: "items count"}
    }
};

module.exports.StatusBar = StatusBar;
module.exports.StatusBarTO = StatusBarTO;
