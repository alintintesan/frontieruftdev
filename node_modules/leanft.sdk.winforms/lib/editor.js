// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/26/2016.
 */

var Core = require("leanft.sdk.core");
var EditorBaseTOBehavior = Core.EditorBaseTOBehavior;
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var Convert = Core.Convert;

/**
 * The description of an Editor test object.
 * @param {Object} [props] Initializes an Editor test object using the supplied property bag.
 * @returns {Editor} the description object that was initialized.
 * @class Editor
 * @extends WinForms.UiObjectBaseDescription
 * @mixes WinForms.EditorDescriptionBehavior
 * @memberof WinForms
 */
function Editor(props) {
    var editorDesc = new UiObjectBaseDescription("Editor");
    Utils.extend(editorDesc, EditorDescriptionBehavior);
    editorDesc._defineByPropertyBag(props);
    return editorDesc;
}

/**
 * EditorDescriptionBehavior - the description for a Editor object
 * @memberof WinForms
 * @ignore
 */
var EditorDescriptionBehavior = {
    /**
     * The selected text in the editor.
     * @param {string} [selectedText] When provided, this method acts as a setter and sets the selectedText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedText value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedText: function (selectedText) {
        return this._simplePropertyHandler("selection", selectedText);
    }
};
/**
 * An Editor object,
 * @constructor
 * @class EditorTO
 * @extends WinForms.UiObjectBaseTO
 * @mixes EditorBaseTOBehavior._properties
 * @mixes EditorBaseTOBehavior._methods
 * @mixes WinForms.EditorTOBehavior._properties
 * @memberof WinForms
 */
function EditorTO(session, description) {
    description = description || Editor();
    var editorTO = new UiObjectBaseTO("SwfEditor", session, description);
    editorTO._mergeBehavior(EditorBaseTOBehavior);
    editorTO._mergeBehavior(EditorTOBehavior);
    return editorTO;
}

/**
 * The behaviors of the Editor object
 * @memberof WinForms
 * @ignore
 */
var EditorTOBehavior = {
    /**
     * @ignore
     * @memberof WinForms.EditorTOBehavior
     */
    _properties: {
        /**
         * Returns the selected text in this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled when the selectedText operation ends.
         */
        selectedText: {
            wiredName: "selection"
        },

        /**
         * Returns the tooltip text of the error icon associated with this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled when the errorText operation ends.
         */
        errorText: function () {
            return this._executeWithEventsOnError(arguments, "GetErrorProviderText");
        }
    }
};

module.exports.Editor = Editor;
module.exports.EditorTO = EditorTO;

