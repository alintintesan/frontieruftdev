// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var Convert = Core.Convert;
var MergeBehavior = Core.MergeBehavior;
var TableCell = require("./tablecell.js").TableCell;

/**
 * A DevExpress XtraGrid object.
 * @constructor
 * @class XtraGrid
 * @mixes WinForms.XtraGridBehavior._properties
 * @mixes WinForms.XtraGridBehavior._methods
 * @memberof WinForms
 */
function XtraGrid(ownerTable) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(XtraGridBehavior);
    this._ownerTable = ownerTable;
}

XtraGrid.prototype = {
    _ownerTable: null
};

/**
 * The behaviors of the XtraGridBehavior object
 * @memberof WinForms
 * @ignore
 */
var XtraGridBehavior = {
    /**
     * @memberof WinForms.XtraGridBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Double-clicks the specified cell in this grid.
         * @function
         * @param {number} row 0-based row number.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the activateCell operation ends.
         */
        activateCell: function (row, columnHeader) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "ActivateCell", Convert.toNumber(row), columnHeader);
        },

        /**
         * Scrolls the specified cell into view.
         * @function
         * @param {number} row The 0-based row number.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the makeCellVisible operation ends.
         */
        makeCellVisible: function (row, columnHeader) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "MakeCellVisible", Convert.toNumber(row), columnHeader);
        },

        /**
         * Double-clicks the specified column header in this grid.
         * @function
         * @param {string} columnOrColumnHeader The 0-based column number or column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the activateColumn operation ends.
         */
        activateColumn: function ( columnOrColumnHeader) {
            if (columnOrColumnHeader == null)
                throw new Error("ArgumentException: columnOrColumnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "ActivateColumn", columnOrColumnHeader);
        },

        /**
         * Returns the specified cell.
         * @function
         * @param {number} row 0-based row number.
         * @param {string|number} columnOrColumnHeader 0-based column index or column caption.
         * @returns {WinForms.TableCell} the TableCell.
         */
        getCell: function (row, columnOrColumnHeader) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnOrColumnHeader == null)
                throw new Error("ArgumentException: columnOrColumnHeader is required.");

            return new TableCell(this._ownerTable, Convert.toNumber(row), columnOrColumnHeader);
        },

        /**
         * Groups table rows according to the specified column.
         * @function
         * @param {string|number} columnOrColumnHeader The 0-based column index or column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the groupRows operation ends.
         */
        groupRows: function (columnOrColumnHeader) {
            if (columnOrColumnHeader == null)
                throw new Error("ArgumentException: columnOrColumnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "GroupBy", columnOrColumnHeader, 1);
        },

        /**
         * Ungroups table rows according to the specified column.
         * @function
         * @param {string|number} columnOrColumnHeader 0-based column index or column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the ungroupRows operation ends.
         */
        ungroupRows: function (columnOrColumnHeader) {
            if (columnOrColumnHeader == null)
                throw new Error("ArgumentException: columnOrColumnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "GroupBy", columnOrColumnHeader, 0);
        },

        /**
         * Selects the specified cell in this grid.
         * @function
         * @param {number} row 0-based row number.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the selectCell operation ends.
         */
        selectCell: function (row, columnHeader) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "SelectCell", Convert.toNumber(row), columnHeader);
        },

        /**
         * Selects column by column index or column caption.
         * @function
         * @param {string} columnOrColumnHeader The 0-based column index or column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the selectColumn operation ends.
         */
        selectColumn: function (columnOrColumnHeader) {
            if (columnOrColumnHeader == null)
                throw new Error("ArgumentException: columnOrColumnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "SelectColumn", columnOrColumnHeader);
        },

        /**
         * Applies the specified filter string to the specified column.
         * @function
         * @param {string|number} columnOrColumnHeader The 0-based column index or column caption.
         * @param {string} filter A value in the column to be used as the filter
         * @returns {Promise<void>} a promise that is fulfilled when the setFilter operation ends.
         */
        setFilter: function (columnOrColumnHeader, filter) {
            if (columnOrColumnHeader == null)
                throw new Error("ArgumentException: columnOrColumnHeader is required.");
            if (filter == null)
                throw new Error("ArgumentException: filter is required.");
            return this._ownerTable._executeWithEvents(arguments, "SetFilter", columnOrColumnHeader, filter);
        },

        /**
         * Expands the parent rows of the specified view and makes it the current view.
         * @function
         * @param {...Array<number, string>} [viewPath] The hierarchical path of the view to display, expressed using Tuples in the format: [0-based row number, relation name].<br/>
         * If called without parameters, the main (top-level) view is used.<br/>
         * Example: <br/>
         * gridcontrol1.customGrid().xtraGrid().setView([0, "CustOrders"], [3, "OrderDetails"]);
         * @returns {Promise<void>} a promise that is fulfilled when the setView operation ends.
         */
        setView: function (viewPath) {
            if (!viewPath) {
                return this._ownerTable._executeWithEvents(arguments, "SetView", "");
            }

            var levels = [];
            for (var i = 0; i < arguments.length; i++) {
                levels.push(arguments[i][0] + " " + arguments[i][1] + ";");
            }
            return this._ownerTable._executeWithEvents(arguments, "SetView", levels.join(" "));
        },

        /**
         * Sorts this table by the specified column (ascending).
         * @function
         * @param {string|number} columnOrColumnHeader The 0-based column index or column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the sort operation ends.
         */
        sort: function (columnOrColumnHeader) {
            if (columnOrColumnHeader == null)
                throw new Error("ArgumentException: columnOrColumnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "Sort", columnOrColumnHeader, "Ascending");
        },

        /**
         * Sorts this table by the specified column (descending).
         * @function
         * @param {string|number} columnOrColumnHeader The 0-based column index or column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the sort operation ends.
         */
        sortDescending: function (columnOrColumnHeader) {
            if (columnOrColumnHeader == null)
                throw new Error("ArgumentException: columnOrColumnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "Sort", columnOrColumnHeader, "Descending");
        }
    },

    /**
     * @memberof WinForms.XtraGridBehavior
     * @ignore
     */
    _properties: {
        /**
         * Get the number of rows
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of rows
         */
        rowCount: function () {
            return this._ownerTable._executeWithEventsOnError(arguments, "RowCount");
        },

        /**
         * Get the number of columns
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns
         */
        columnCount: function () {
            return this._ownerTable._executeWithEventsOnError(arguments, "ColumnCount");
        },

        /**
         * Returns the Table test object this custom grid was accessed from.
         * @function
         * @returns {WinForms.Table} the tableTestObject.
         */
        tableTestObject: function () {
            return this._ownerTable;
        }
    }
};

module.exports.XtraGrid = XtraGrid;
