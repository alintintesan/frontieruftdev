// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/22/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;

var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;

/**
 * @param {Object} [props] Initializes a PropertyGrid test object using the supplied property bag.
 * @returns {PropertyGrid} the description object that was initialized.
 * @constructor
 * @extends WinForms.UiObjectBaseDescription
 * @mixes WinForms.PropertyGridDescriptionBehavior
 * @memberof WinForms
 */
function PropertyGrid(props){
    var propertyGridDesc = new UiObjectBaseDescription("PropertyGrid");
    Utils.extend(propertyGridDesc, PropertyGridDescriptionBehavior);
    propertyGridDesc._defineByPropertyBag(props);
    return propertyGridDesc;
}

/**
 * PropertyGridDescriptionBehavior - the description for a PropertyGrid object
 * @memberof WinForms
 * @ignore
 */
var PropertyGridDescriptionBehavior = {
    /**
     * The static text attached to the object.
     * @param {string} [attachedText] When provided, this method acts as a setter and sets the attachedText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored attachedText value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    attachedText: function (attachedText) {
        return this._simplePropertyHandler("Attached text", attachedText);
    }
};

/**
 * An PropertyGrid object,
 * @constructor
 * @class PropertyGridTO
 * @extends WinForms.UiObjectBaseTO
 * @mixes WinForms.PropertyGridTOBehavior._properties
 * @mixes WinForms.PropertyGridTOBehavior._methods
 * @memberof WinForms
 */
function PropertyGridTO(session, description) {
    description = description || PropertyGrid();
    var propertyGridTO = new UiObjectBaseTO("SwfPropertyGrid", session, description);
    propertyGridTO._mergeBehavior(PropertyGridTOBehavior);
    return propertyGridTO;
}

/**
 * The behaviors of the PropertyGrid object
 * @memberof WinForms
 * @ignore
 */
var PropertyGridTOBehavior = {
    /**
     * @ignore
     * @memberof WinForms.PropertyGridTOBehavior
     */
    _properties: {
        /**
         * Returns the tooltip text of the error icon associated with this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the tooltip text of the error icon associated with this object.
         */
        errorText: function () {
            return this._executeWithEventsOnError(arguments, "GetErrorProviderText");
        },

        /**
         * The static text attached to this control.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the static text attached to this control.
         */
        attachedText: {
            wiredName: "attached text"
        }
    },

    /**
     * @ignore
     * @memberof WinForms.PropertyGridTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * The value of the specified property in this property grid control. If the value is a combo box or custom control, returns
         * a string representation of the selected value.
         * @function
         * @param {string} propertyPath The path of the property.
         * @returns {Promise<string>} a promise that is fulfilled with the value of the specified property in this property grid control.
         */
        getPropertyValue: function (propertyPath) {
            if (propertyPath == null)
                throw new Error("You must pass parameter propertyPath");
            return this._executeWithEventsOnError(arguments, "GetValue", propertyPath);
        },

        /*jshint eqnull:true */
        /**
         * Selects the specified property in this property grid control.
         * @function
         * @param {string} propertyPath The path of the property.
         * @returns {Promise<void>} a promise fulfilled when the operation is performed.
         */
        selectProperty: function (propertyPath) {
            if (propertyPath == null)
                throw new Error("You must pass parameter propertyPath");
            return this._executeWithEvents(arguments, "SelectProperty", propertyPath);
        },

        /*jshint eqnull:true */
        /**
         * Sets the value of the specified property in this property grid control.
         * Applicable only to a simple value. To change a value of a custom control value in a property grid,
         * try to create a test object for the custom control and use it to change the value.
         * @function
         * @param {string} propertyPath The path of the property.
         * @param {string} newPropertyValue The new value of the property.
         * @returns {Promise<void>} a promise fulfilled when the operation is performed.
         */
        setPropertyValue: function (propertyPath, newPropertyValue) {
            if (propertyPath == null)
                throw new Error("You must pass parameter propertyPath");
            if (newPropertyValue == null)
                throw new Error("You must pass parameter newPropertyValue");
            return this._executeWithEvents(arguments, "SetValue", propertyPath, newPropertyValue);
        }
    }
};

module.exports.PropertyGrid = PropertyGrid;
module.exports.PropertyGridTO = PropertyGridTO;

