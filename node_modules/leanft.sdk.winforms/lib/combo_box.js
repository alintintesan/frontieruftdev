// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/23/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var StringUtils = Core.StringUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var Convert = Core.Convert;
var StringUtils = Core.StringUtils;

/**
 * ComboBoxDescriptionBehavior - the description for a ComboBox object
 * @memberof WinForms
 * @ignore
 */
var ComboBoxDescriptionBehavior = {
    /**
     * An array of all items in the comboBox.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the items value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored items value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    items: function (items) {
        return this._propertyHandler("all items", items, StringUtils.joinFunc("\n"), StringUtils.splitFunc("\n"));
    },

    /**
     * The selected items in the comboBox.
     * @param {string} [selectedItem] When provided, this method acts as a setter and sets the selectedItems value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedItems value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedItem: function (selectedItem) {
        return this._simplePropertyHandler("selection", selectedItem);
    },

    /**
     * The number of items in the comboBox.
     * @param {number} [itemsCount] When provided, this method acts as a setter and sets the itemsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored itemsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    itemsCount: function (itemsCount) {
        return this._propertyHandler("items count", itemsCount, Convert.toNumber);
    }
};

/**
 * The description of a comboBox test object.
 * @param {Object} [props] Initializes a comboBox test object using the supplied property bag.
 * @returns {comboBox} the description object that was initialized.
 * @class ComboBox
 * @extends WinForms.UiObjectBaseDescription
 * @mixes ComboBoxDescriptionBehavior
 * @memberof WinForms
 */
function ComboBox(props) {
    var comboBoxDesc = new UiObjectBaseDescription("ComboBox");
    Utils.extend(comboBoxDesc, ComboBoxDescriptionBehavior);
    comboBoxDesc._defineByPropertyBag(props);
    return comboBoxDesc;
}

/**
 * A ComboBox object,
 * @constructor
 * @class ComboBoxTO
 * @extends WinForms.UiObjectBaseTO
 * @mixes WinForms.ComboBoxTOBehavior._methods
 * @mixes WinForms.ComboBoxTOBehavior._properties
 * @memberof WinForms
 */
function ComboBoxTO(session, description) {
    description = description || ComboBox();
    var comboBoxTO = new UiObjectBaseTO("SwfComboBox", session, description);
    comboBoxTO._mergeBehavior(ComboBoxTOBehavior);
    return comboBoxTO;
}

//Consts
var allItemsWiredName = "all items";

/**
 * The behaviors of the ComboBox object
 * @memberof WinForms
 * @ignore
 */
var ComboBoxTOBehavior = {
    /**
     * @ignore
     * @memberof WinForms.ComboBoxTOBehavior
     */
    _properties: {
        /**
         * Get the selected item of the comboBox.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the selected item of the comboBox
         */
        selectedItem: {
            wiredName: "selection"
        },

        /*jshint eqnull:true */
        /**
         * Returns an array of all items in the combobox.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the list of all items in the control.
         */
        items: {
            wiredName: allItemsWiredName,
            getter: function () {
                return this._getROProperty(allItemsWiredName, arguments).then(StringUtils.splitFunc("\n"));
            }
        },

        /**
         * Returns the tooltip text of the error icon associated with this object.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the errorText operation ends.
         */
        errorText: function () {
            return this._executeWithEventsOnError(arguments, "GetErrorProviderText");
        }
    },

    /**
     * @ignore
     * @memberof WinForms.ComboBoxTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Select an item in the comboBox.
         * @function
         * @param {number|string} indexOrItem The item to be selected.
         * The input can be the 0-based index of the item or the text of the item
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         */
        select: function (indexOrItem) {
            if (indexOrItem == null)
                throw new Error("The parameter indexOrItem cannot be null.");
            return this._executeWithEvents(arguments, "Select", indexOrItem);
        }
    },

    _additionalProperties: {
        itemsCount: {wiredName: "items count"}
    }
};

module.exports.ComboBox = ComboBox;
module.exports.ComboBoxTO = ComboBoxTO;