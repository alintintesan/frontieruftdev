// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/11/2016. 
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var ScrollBehaviour = Core.ScrollBehaviour;

/**
 * UIObjectDescription - the description of a .NET Windows Forms UiObject test object.
 * @memberof WinForms
 * @ignore
 */
var UIObjectDescription = {
    /**
     * The object's attached text.
     * @param {string} [attachedText] When provided, this method acts as a setter and sets the attachedText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored attachedText value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WinForms.UiObjectBaseDescription#
     */
    attachedText: function (attachedText) {
        return this._simplePropertyHandler("Attached text", attachedText);
    } 
};

/**
 * The description of a standard .NET Windows Forms test object.
 * @param {Object} [props] Initializes a standard .NET Windows Forms test object using the supplied property bag.
 * @returns {UiObject} the description object that was initialized.
 * @class UiObject
 * @memberof WinForms
 * @extends WinForms.UiObjectBaseDescription
 * @mixes WinForms.UIObjectDescription
 */
function UiObject(props) {
    var uiObjectDesc = new UiObjectBaseDescription("UiObject");
    Utils.extend(uiObjectDesc, UIObjectDescription);
    uiObjectDesc._defineByPropertyBag(props);
    return uiObjectDesc;
}

/**
 * @memberof WinForms
 * @ignore
 */
var UiObjectBehaviour = {
    /**
     * @ignore
     * @memberof WinForms.UiObjectBehaviour
     */
    _properties: {
        /**
         * The static text attached to this control.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the static text attached to this control.
         */
        attachedText: {
            wiredName:  "attached text"
        },

        /**
         * The tooltip text of the error icon associated with this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the tooltip text of the error icon associated with this object.
         */
        errorText: function () {
            return this._executeWithEventsOnError(arguments, "GetErrorProviderText");
        }
    }
};

/**
 * A standard .NET Windows Forms test object
 * @constructor
 * @class UIObjectTO
 * @extends WinForms.UiObjectBaseTO
 * @mixes WinForms.UiObjectBehaviour._properties
 * @mixes ScrollBehaviour._methods
 * @memberof WinForms
 */
function UIObjectTO(session, description) {
    description = description || UiObject();
    var uiObjectTO = new UiObjectBaseTO("SwfObject", session, description);
    uiObjectTO._mergeBehavior(ScrollBehaviour);
    uiObjectTO._mergeBehavior(UiObjectBehaviour);
    return uiObjectTO;
}

module.exports.UIObjectDescription = UIObjectDescription;
module.exports.UiObjectBehaviour = UiObjectBehaviour;
module.exports.UiObject = UiObject;
module.exports.UIObjectTO = UIObjectTO;