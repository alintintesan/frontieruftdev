// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var Convert = Core.Convert;
var MergeBehavior = Core.MergeBehavior;
var DataGridBehaviorBase = require("./datagridbehaviorbase.js").DataGridBehaviorBase;
var TableBaseOperationBehavior = Core.TableBaseOperationBehavior;
var TableCell = require("./tablecell.js").TableCell;

/**
 * A DataGridViewBehavior object,
 * @constructor
 * @class DataGridView
 * @mixes TableBaseOperationBehavior._properties
 * @mixes TableBaseOperationBehavior._methods
 * @mixes WinForms.DataGridBehaviorBase._properties
 * @mixes WinForms.DataGridBehaviorBase._methods
 * @mixes WinForms.DataGridViewBehavior._properties
 * @mixes WinForms.DataGridViewBehavior._methods
 * @memberof WinForms
 */
function DataGridView(ownerTable) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(TableBaseOperationBehavior);
    this._mergeBehavior(DataGridBehaviorBase);
    this._mergeBehavior(DataGridViewBehavior);
    this._ownerTable = ownerTable;
}

DataGridView.prototype = {
    _ownerTable: null
};

/**
 * The behaviors of the DataGridViewBehavior object
 * @memberof WinForms
 * @ignore
 */
var DataGridViewBehavior = {
    /**
     * @memberof WinForms.DataGridViewBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Selects the specified cell in this grid.
         * @function
         * @param {number} row The 0-based row index.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the selectCell operation ends.
         */
        selectCell: function (row, columnHeader) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "SelectCell", Convert.toNumber(row), columnHeader);
        },

        /**
         * Selects column by column index or column caption.
         * @function
         * @param {string} columnOrColumnHeader The 0-based column index or column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the selectColumn operation ends.
         */
        selectColumn: function (columnOrColumnHeader) {
            if (columnOrColumnHeader == null)
                throw new Error("ArgumentException: columnOrColumnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "SelectColumn", columnOrColumnHeader);
        },

        /**
         * Double-clicks the specified cell in this grid.
         * @function
         * @param {number} row The 0-based row index.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the activateCell operation ends.
         */
        activateCell: function (row, columnHeader) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "ActivateCell", Convert.toNumber(row), columnHeader);
        },

        /**
         * Double-clicks the specified column header in this grid.
         * @function
         * @param {string} columnOrColumnHeader The 0-based column number or column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the activateColumn operation ends.
         */
        activateColumn: function ( columnOrColumnHeader) {
            if (columnOrColumnHeader == null)
                throw new Error("ArgumentException: columnOrColumnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "ActivateColumn", columnOrColumnHeader);
        },

        /**
         * Scrolls the specified cell into view.
         * @function
         * @param {number} row The 0-based row index.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the makeCellVisible operation ends.
         */
        makeCellVisible: function (row, columnHeader) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "MakeCellVisible", Convert.toNumber(row), columnHeader);
        },

        /**
         * Returns the specified cell.
         * @function
         * @param {number} row 0-based row number.
         * @param {string|number} columnOrColumnHeader 0-based column index or column caption.
         * @returns {WinForms.TableCell} the TableCell.
         */
        getCell: function (row, columnOrColumnHeader) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnOrColumnHeader == null)
                throw new Error("ArgumentException: columnOrColumnHeader is required.");

            return new TableCell(this._ownerTable, Convert.toNumber(row), columnOrColumnHeader);
        }
    }

};

module.exports.DataGridView = DataGridView;
