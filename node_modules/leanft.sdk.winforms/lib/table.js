// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;
var MergeBehavior = Core.MergeBehavior;
var UiObjectBase = require("./ui_object_base.js");
var TableCell = require("./tablecell.js").TableCell;
var C1FlexGrid = require("./c1flexgridbehavior.js").C1FlexGrid;
var C1TrueDbGrid = require("./c1truedbgridbehavior.js").C1TrueDBGrid;
var DataGrid = require("./datagridbehavior.js").DataGrid;
var DataGridView = require("./datagridviewbehavior.js").DataGridView;
var UltraWinGrid = require("./ultrawingridbehavior.js").UltraWinGrid;
var XtraGrid = require("./xtragridbehavior.js").XtraGrid;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;



/**
 * The description of a Table (data grid) test object.
 * @param {Object} [props] Initializes a Table test object using the supplied property bag.
 * @returns {Table} the description object that was initialized.
 * @class Table
 * @memberof WinForms
 * @extends WinForms.UiObjectBaseDescription
 */
function Table(props) {
    var tableDesc = new UiObjectBaseDescription("Table");
    tableDesc._defineByPropertyBag(props);
    return tableDesc;
}


/**
 * @typedef {Object} GridType - Custom grid types supported by the Table test object.
 * @property {string} dataGrid  A Microsoft DataGrid.
 * @property {string} dataGridView  A Microsoft DataGridView.
 * @property {string} c1FlexGrid  A ComponentOne C1FlexGrid.
 * @property {string} c1TrueDbGrid  A ComponentOne C1TrueDBGrid.
 * @property {string} ultraWinGrid  An Infragistics UltraWinGrid.
 * @property {string} xtraGrid  A DevExpress XtraGrid.
 * @property {string} unknown  Unknown grid type.
 * @memberof WinForms
 */

var GridType = {
    /*
     * Unknown grid type.
     * @type {string}
     */
    unknown : "Unknown",

    /*
     * A Microsoft DataGrid.
     * @type {string}
     */
    dataGrid : "DataGrid",

    /*
     * A Microsoft DataGridView.
     * @type {string}
     */
    dataGridView : "DataGridView",

    /*
     * A ComponentOne C1FlexGrid.
     * @type {string}
     */
    c1FlexGrid : "C1FlexGrid",

    /*
     * A ComponentOne C1TrueDBGrid.
     * @type {string}
     */
    c1TrueDbGrid : "C1TrueDbGrid",

    /*
     * An Infragistics UltraWinGrid.
     * @type {string}
     */
    ultraWinGrid : "UltraWinGrid",

    /*
     * A DevExpress XtraGrid.
     * @type {string}
     */
    xtraGrid : "XtraGrid"
};

var GridTypeString = {
    dataGridType: "System.Windows.Forms.DataGrid",
    dataGridViewType: "System.Windows.Forms.DataGridView",
    xtraGridType: "DevExpress.XtraGrid.GridControl",
    ultraWinGridType: "Infragistics.Win.UltraWinGrid.UltraGrid",
    componentOneFlexGridType: "C1.Win.C1FlexGrid.C1FlexGrid",
    componentOneTrueDbGridType: "C1.Win.C1TrueDBGrid.C1TrueDBGrid"
};

/**
 * A CustomGrid object,
 * @constructor
 * @class CustomGrid
 * @mixes WinForms.CustomGridBehavior._properties
 * @memberof WinForms
 */
function CustomGrid(ownerTable) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(CustomGridBehavior);
    this._dataGrid = new DataGrid(ownerTable);
    this._dataGridView = new DataGridView(ownerTable);
    this._c1FlexGrid = new C1FlexGrid(ownerTable);
    this._c1TrueDbGrid = new C1TrueDbGrid(ownerTable);
    this._ultraWinGrid = new UltraWinGrid(ownerTable);
    this._xtraGrid = new XtraGrid(ownerTable);
    return this;
}

/**
 * The behaviors of the Table object
 * @memberof WinForms
 * @ignore
 */
var CustomGridBehavior = {
    /**
     * @memberof WinForms.CustomGridBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns a Microsoft DataGrid object.
         * @function
         * @returns {WinForms.DataGrid} a Microsoft DataGrid object.
         */
        dataGrid: function () {
            return this._dataGrid;
        },

        /**
         * Returns a Microsoft DataGrid object.
         * @function
         * @returns {WinForms.DataGrid} a Microsoft DataGrid object.
         */
        dataGridView: function () {
            return this._dataGridView;
        },

        /**
         * Returns a ComponentOne C1FlexGrid object.
         * @function
         * @returns {WinForms.C1FlexGrid} a ComponentOne C1FlexGrid object.
         */
        c1FlexGrid: function () {
            return this._c1FlexGrid;
        },

        /**
         * Returns a ComponentOne C1TrueDBGrid object.
         * @function
         * @returns {WinForms.C1TrueDbGrid} a ComponentOne C1TrueDBGrid object.
         */
        c1TrueDbGrid: function () {
            return this._c1TrueDbGrid;
        },

        /**
         * Returns an Infragistics UltraWinGrid object.
         * @function
         * @returns {WinForms.UltraWinGrid} an Infragistics UltraWinGrid object.
         */
        ultraWinGrid: function () {
            return this._ultraWinGrid;
        },

        /**
         * Returns a DevExpress XtraGrid object.
         * @function
         * @returns {WinForms.XtraGrid} a DevExpress XtraGrid object.
         */
        xtraGrid: function () {
            return this._xtraGrid;
        }
    }

};

/**
 * A Table object,
 * @constructorC1TableCellBehavior
 * @class TableTO
 * @extends WinForms.UiObjectBaseTO
 * @mixes WrappedItemExecutorBehavior
 * @mixes WinForms.TableTOBehavior._properties
 * @mixes WinForms.TableTOBehavior._methods
 * @mixes WinForms.TableTOBehavior._helpers
 * @memberof WinForms
 */
function TableTO(session, description) {
    description = description || Table();
    var tableTO = new UiObjectBaseTO("SwfTable", session, description);
    tableTO._mergeBehavior(WrappedItemExecutorBehavior);
    tableTO._mergeBehavior(TableTOBehavior);

    tableTO._gridType = GridType.unknown;
    tableTO._customGrid = new CustomGrid(tableTO);

    return tableTO;
}

/**
 * The behaviors of the Table object
 * @memberof WinForms
 * @ignore
 */
var TableTOBehavior = {
    _gridType: null,
    _customGrid: null,

    /**
     * @ignore
     * @memberof WinForms.TableTOBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Double-clicks the specified cell in this grid..
         * @function
         * @param {number} row 0-based row number.
         * @param {number} column 0-based column index.
         * @returns {Promise<void>} a promise that is fulfilled when the activateCell operation ends.
         */
        activateCell: function (row, column) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (column == null)
                throw new Error("ArgumentException: column is required.");
            return this._executeWithEvents(arguments, "ActivateCell", row, column);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Double-clicks the specified row header in this grid.
         * @function
         * @param {number} row 0-based row number.
         * @returns {Promise<void>} a promise that is fulfilled when the activateRow operation ends.
         */
        activateRow: function (row) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            return this._executeWithEvents(arguments, "ActivateRow", row);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Scrolls the specified cell into view.
         * @function
         * @param {number} row 0-based row number.
         * @param {number} column 0-based column index.
         * @returns {Promise<void>} a promise that is fulfilled when the activateCell operation ends.
         */
        makeCellVisible: function (row, column) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (column == null)
                throw new Error("ArgumentException: column is required.");
            return this._executeWithEvents(arguments, "MakeCellVisible", row, column);
        },

        /**
         * Selects the specified cell in this grid.
         * @function
         * @param {number} row 0-based row number.
         * @param {number} column 0-based column index.
         * @returns {Promise<void>} a promise that is fulfilled when the selectCell operation ends.
         */
        selectCell: function (row, column) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (column == null)
                throw new Error("ArgumentException: column is required.");
            return this._executeWithEvents(arguments, "SelectCell", row, column);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects the specified row header in this grid.
         * @function
         * @param {number} row 0-based row number.
         * @returns {Promise<void>} a promise that is fulfilled when the selectRows operation ends.
         */
        selectRow: function (row) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");

            return this._executeWithEvents(arguments, "SelectRow", row);
        }
    },

    /**
     * @ignore
     * @memberof WinForms.TableTOBehavior
     */
    _properties:{
        /**
         * Returns the tooltip text of the error icon associated with this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the error text of Table.
         */
        errorText: function () {
            return this._executeWithEventsOnError(arguments, "GetErrorProviderText");
        },

        /**
         * Returns the grid type of the test object. Returns Unknown if the grid type cannot be determined.
         * @function
         * @returns {WinForms.GridType} the type of the grid.
         */
        gridType: function () {
            return this._gridType;
        }

    },

    /**
     * @ignore
     * @memberof WinForms.TableTOBehavior
     */
    _helpers: {

        // @@@@ ToDO - move back to properties and add a flag not to process this from the UI of the spy
        // @@@@ - And also remove the line @mixes WinForms.TableTOBehavior._helpers from the TableTO constructor

        /**
         * The returned object enables access to supported custom grids.
         * @function
         * @returns {WinForms.CustomGrid} the custom grid.
         */
        customGrid: function () {
            return this._customGrid;
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Get cell.
         * @param {number} row 0-based row number.
         * @param {number} column 0-based column index.
         * @returns {Promise<void>} a promise that is fulfilled when the activateCell operation ends.
         * @ignore
         */
        _getCell: function (row, column) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (column == null)
                throw new Error("ArgumentException: column is required.");
            return new TableCell(this, row, column);
        },

        /**
         * Get the number of rows
         * @returns {Promise<number>} a promise that is fulfilled with the number of rows
         * @ignore
         */
        _rowCount: function () {
            return this._executeNotWrapped(arguments, "RowCount");
        },

        /**
         * Get the number of columns
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns
         * @ignore
         */
        _columnCount: function () {
            return this._executeNotWrapped(arguments, "ColumnCount");
        },

        /**
         * Returns the grid sub type of the test object.
         * @returns {WinForms.GridType} the type of the grid.
         * @ignore
         */
        _getSubTypeInfo: function () {
            return this._gridType;
        },

        /**
         * Returns the gridType of the test object.
         * @param {string} subType the name of grid type.
         * @returns {WinForms.GridType} the type of the grid.
         * @ignore
         */
        _convertStringToGridType: function (subType) {
            switch (subType)
            {
                case GridTypeString.dataGridType:
                    return GridType.dataGrid;

                case GridTypeString.dataGridViewType:
                    return GridType.dataGridView;

                case GridTypeString.ultraWinGridType:
                    return GridType.ultraWinGrid;

                case GridTypeString.componentOneFlexGridType:
                    return GridType.c1FlexGrid;

                case GridTypeString.componentOneTrueDbGridType:
                    return GridType.c1TrueDbGrid;

                case GridTypeString.xtraGridType:
                    return GridType.xtraGrid;

                default:
                    return GridType.unknown;
            }
        },

        /**
         * Set the gridType of the test object.
         * @param {string} subType the type of the grid.
         * @ignore
         */
        _setSubTypeInfoFromString: function (subType) {
            this._gridType = this._convertStringToGridType(subType);
        },
        /**
         * The X-coordinate in pixels of the cell relative to the table.
         * @param {Object} rowIdentifier 0-based index.
         * @param {Object} columnIdentifier 0-based index.
         * @returns {Promise<number>} a promise that is fulfilled with the X-coordinate in pixels of the cell relative to the table.
         * @ignore
         */
        _getCellX: function (rowIdentifier, columnIdentifier) {
            if (rowIdentifier == null)
                throw new Error("ArgumentException: rowIdentifier is required.");
            if (columnIdentifier == null)
                throw new Error("ArgumentException: columnIdentifier is required.");

            return this._executeNotWrapped(arguments, "GetCellProperty", rowIdentifier, columnIdentifier, "x");
        },

        /**
         * The Y-coordinate in pixels of the cell relative to the table.
         * @param {Object} rowIdentifier 0-based index.
         * @param {Object} columnIdentifier 0-based index.
         * @returns {Promise<number>} a promise that is fulfilled with the Y-coordinate in pixels of the cell relative to the table.
         * @ignore
         */
        _getCellY: function (rowIdentifier, columnIdentifier) {
            if (rowIdentifier == null)
                throw new Error("ArgumentException: rowIdentifier is required.");
            if (columnIdentifier == null)
                throw new Error("ArgumentException: columnIdentifier is required.");

            return this._executeNotWrapped(arguments,"GetCellProperty", rowIdentifier, columnIdentifier, "y");
        },

        /**
         * The height of the cell in pixels.
         * @param {Object} rowIdentifier 0-based index.
         * @param {Object} columnIdentifier 0-based index.
         * @returns {Promise<number>} a promise that is fulfilled with the height of the cell in pixels.
         * @ignore
         */
        _getCellHeight: function (rowIdentifier, columnIdentifier) {
            if (rowIdentifier == null)
                throw new Error("ArgumentException: rowIdentifier is required.");
            if (columnIdentifier == null)
                throw new Error("ArgumentException: columnIdentifier is required.");

            return this._executeNotWrapped(arguments,"GetCellProperty", rowIdentifier, columnIdentifier, "height");
        },

        /**
         * The width of the cell in pixels.
         * @param {Object} rowIdentifier 0-based index.
         * @param {Object} columnIdentifier 0-based index.
         * @returns {Promise<number>} a promise that is fulfilled with the width of the cell in pixels.
         * @ignore
         */
        _getCellWidth: function (rowIdentifier, columnIdentifier) {
            if (rowIdentifier == null)
                throw new Error("ArgumentException: rowIdentifier is required.");
            if (columnIdentifier == null)
                throw new Error("ArgumentException: columnIdentifier is required.");

            return this._executeNotWrapped(arguments,"GetCellProperty", rowIdentifier, columnIdentifier, "width");
        },

        /**
         * The content of the cell.
         * @param {Object} rowIdentifier 0-based index.
         * @param {Object} columnIdentifier 0-based index.
         * @returns {Promise<Object>} a promise that is fulfilled with the content of the cell.
         * @ignore
         */
        _getCellValue: function (rowIdentifier, columnIdentifier) {
            if (rowIdentifier == null)
                throw new Error("ArgumentException: rowIdentifier is required.");
            if (columnIdentifier == null)
                throw new Error("ArgumentException: columnIdentifier is required.");

            return this._executeNotWrapped(arguments,"GetCellProperty", rowIdentifier, columnIdentifier, "value");
        },

        /**
         * The column header name of the cell.
         * @param {Object} rowIdentifier 0-based index.
         * @param {Object} columnIdentifier 0-based index.
         * @returns {Promise<string>} a promise that is fulfilled with the column header name of the cell.
         * @ignore
         */
        _getCellColumnName: function (rowIdentifier, columnIdentifier) {
            if (rowIdentifier == null)
                throw new Error("ArgumentException: rowIdentifier is required.");
            if (columnIdentifier == null)
                throw new Error("ArgumentException: columnIdentifier is required.");

            return this._executeNotWrapped(arguments,"GetCellProperty", rowIdentifier, columnIdentifier, "colname");
        },

        /**
         * Sets the cell to a new value.
         * @param {Object} rowIdentifier 0-based index.
         * @param {Object} columnIdentifier 0-based index.
         * @param {Object} value new value to be set.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        _setCellValue: function (rowIdentifier, columnIdentifier, value) {
            if (rowIdentifier == null)
                throw new Error("ArgumentException: rowIdentifier is required.");
            if (columnIdentifier == null)
                throw new Error("ArgumentException: columnIdentifier is required.");
            if (value == null)
                throw new Error("ArgumentException: value is required.");

            return this._executeNotWrapped(arguments, "SetCellData", rowIdentifier, columnIdentifier, value);
        },

        /**
         * Send Chars (applicable for ComponentOne grids only)
         * @param {Object} rowIdentifier row identifier object.
         * @param {Object} columnIdentifier column identifier object.
         * @param {Object} newValue new value object.
         * @returns {Promise<void>} a promise that is fulfilled when the sendChars operation ends.
         * @ignore
         */
        _sendChars: function (rowIdentifier, columnIdentifier, newValue) {
            if (rowIdentifier == null)
                throw new Error("ArgumentException: rowIdentifier is required.");
            if (columnIdentifier == null)
                throw new Error("ArgumentException: columnIdentifier is required.");
            if (newValue == null)
                throw new Error("ArgumentException: newValue is required.");
            return this._executeWithEvents(arguments, "SetCellData", rowIdentifier, columnIdentifier, newValue, true);
        }
    }
};

module.exports.GridTypeString = GridTypeString;
module.exports.GridType = GridType;
module.exports.TableTO = TableTO;
module.exports.Table = Table;