// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var Convert = Core.Convert;
var MergeBehavior = Core.MergeBehavior;
var DataGridBehaviorBase = require("./datagridbehaviorbase.js").DataGridBehaviorBase;
var TableBaseOperationBehavior = Core.TableBaseOperationBehavior;

/**
 * A DataGridBehavior object,
 * @constructor
 * @class DataGrid
 * @mixes TableBaseOperationBehavior._properties
 * @mixes TableBaseOperationBehavior._methods
 * @mixes WinForms.DataGridBehaviorBase._properties
 * @mixes WinForms.DataGridBehaviorBase._methods
 * @mixes WinForms.DataGridBehavior._properties
 * @mixes WinForms.DataGridBehavior._methods
 * @memberof WinForms
 */
function DataGrid(ownerTable) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(TableBaseOperationBehavior);
    this._mergeBehavior(DataGridBehaviorBase);
    this._mergeBehavior(DataGridBehavior);
    this._ownerTable = ownerTable;
}

DataGrid.prototype = {
    _ownerTable: null
};

/**
 * The behaviors of the DataGridBehavior object
 * @memberof WinForms
 * @ignore
 */
var DataGridBehavior = {
    /**
     * @memberof WinForms.DataGridBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Navigates back to parent table.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the back operation ends.
         */
        back: function () {
            return this._ownerTable._executeWithEvents(arguments, "Back");
        },

        /**
         * Collapses the specified row.
         * @function
         * @param {number} row The 0-based row index.
         * @returns {Promise<void>} a promise that is fulfilled when the collapseRow operation ends.
         */
        collapseRow: function (row) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            return this._ownerTable._executeWithEvents(arguments, "CollapseRow", Convert.toNumber(row));
        },

        /**
         * Expands the specified row.
         * @function
         * @param {number} row The 0-based row index.
         * @returns {Promise<void>} a promise that is fulfilled when the expandRow operation ends.
         */
        expandRow: function (row) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            return this._ownerTable._executeWithEvents(arguments, "ExpandRow", Convert.toNumber(row));
        },

        /**
         * Hides the parent row when the child grid is displayed.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the hideParentRow operation ends.
         */
        hideParentRow: function () {
            return this._ownerTable._executeWithEvents(arguments, "HideParentRow");
        },

        /**
         * Expands the specified row.
         * @function
         * @param {number} row The 0-based row index.
         * @param {number} column The 0-based column index.
         * @returns {Promise<void>} a promise that is fulfilled when the openCellRelation operation ends.
         */
        openCellRelation: function (row, column) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (column == null)
                throw new Error("ArgumentException: column is required.");
            return this._ownerTable._executeWithEvents(arguments, "OpenCellRelation", Convert.toNumber(row), column);
        },

        /**
         * Displays the parent row when the child grid is displayed.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the showParentRow operation ends.
         */
        showParentRow: function () {
            return this._ownerTable._executeWithEvents(arguments, "ShowParentRow");
        }
    }

};

module.exports.DataGrid = DataGrid;
