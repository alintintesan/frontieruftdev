// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/22/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var CalendarTOBaseBehavior = Core.CalendarTOBaseBehavior;
var CalendarTOBaseExtendedBehavior = Core.CalendarTOBaseExtendedBehavior;

/**
 * The description of a Calendar test object.
 * @param {Object} [props] Initializes a Calendar test object using the supplied property bag.
 * @returns {Calendar} the description object that was initialized.
 * @class Calendar
 * @extends WinForms.UiObjectBaseDescription
 * @memberof WinForms
 */
function Calendar(props) {
    var calendarDesc = new UiObjectBaseDescription("Calendar");
    calendarDesc._defineByPropertyBag(props);
    return calendarDesc;
}

/**
 * A Calendar object,
 * @constructor
 * @class CalendarTO
 * @extends WinForms.UiObjectBaseTO
 * @mixes CalendarTOBaseBehavior._properties
 * @mixes CalendarTOBaseBehavior._methods
 * @mixes CalendarTOBaseExtendedBehavior._properties
 * @mixes CalendarTOBaseExtendedBehavior._methods
 * @mixes WinForms.CalendarTOBehavior._properties
 * @memberof WinForms
 */
function CalendarTO(session, description) {
    description = description || Calendar();
    var calendarTO = new UiObjectBaseTO("SwfCalendar", session, description);
    calendarTO._mergeBehavior(CalendarTOBaseBehavior);
    calendarTO._mergeBehavior(CalendarTOBaseExtendedBehavior);
    calendarTO._mergeBehavior(CalendarTOBehavior);
    return calendarTO;
}

/**
 * The behaviors of the Calendar object
 * @memberof WinForms
 * @ignore
 */
var CalendarTOBehavior = {
    /**
     * @ignore
     * @memberof WinForms.CalendarTOBehavior
     */
    _properties: {
        /**
         * Returns the tooltip text of the error icon associated with this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the error text of Calendar.
         */
        errorText: function () {
            return this._executeWithEventsOnError(arguments, "GetErrorProviderText");
        }
    }
};

module.exports.Calendar = Calendar;
module.exports.CalendarTO = CalendarTO;
