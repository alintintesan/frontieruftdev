// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/26/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var Convert = Core.Convert;

/**
 * The description of an EditField test object.
 * @param {Object} [props] Initializes a EditField test object using the supplied property bag.
 * @returns {Edit} the description object that was initialized.
 * @class Edit
 * @extends WinForms.UiObjectBaseDescription
 * @memberof WinForms
 */
function Edit(props) {
    var editDesc = new UiObjectBaseDescription("EditField");
    editDesc._defineByPropertyBag(props);
    return editDesc;
}

/**
* An EditField object
* @constructor
* @class EditTO
* @extends WinForms.UiObjectBaseTO
* @mixes WinForms.EditTOBehavior._methods
* @mixes WinForms.EditTOBehavior._properties
* @memberof WinForms
*/
function EditTO(session, description) {
    description = description || Edit();
    var editTO = new UiObjectBaseTO("SwfEdit", session, description);
    editTO._mergeBehavior(EditTOBehavior);
    return editTO;
}

/**
 * The behaviors of an EditField object
 * @memberof WinForms
 * @ignore
 */
var EditTOBehavior = {
    /**
     * @ignore
     * @memberof WinForms.EditTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Set text for the edit field.
         * @function
         * @param {string} text The text to set to the edit field
         * @returns {Promise<void>} a promise that is fulfilled when the setText operation ends.
         */
        setText: function (text) {
            if (text == null)
                throw new Error("You must pass parameter text");
            return this._executeWithEvents(arguments, "Set", text);
        },

        /*jshint eqnull:true */
        /**
         * Select a block of text in the edit field.
         * All positions are 0-based.
         * @function
         * @param {number} fromCharPos Character position from which selection starts, inclusive.
         * @param {number} toCharPos Character position at which selection ends, inclusive.
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         */
        select: function (fromCharPos, toCharPos) {
            if (fromCharPos == null)
                throw new Error("You must pass start position");
            if (toCharPos == null)
                throw new Error("You must pass end position");
            return this._executeWithEvents(arguments, "SetSelection", Convert.toNumber(fromCharPos), Convert.toNumber(toCharPos) + 1);
        },

        /*jshint eqnull:true */
        /**
         * Set secure text for the edit field.
         * @function
         * @param {string} encodedText The encoded text to set to the edit field
         * @returns {Promise<void>} a promise that is fulfilled when the setSecure operation ends.
         */
        setSecure: function (encodedText) {
            if (encodedText == null)
                throw new Error("You must pass parameter encodedText");
            return this._executeWithEvents(arguments, "SetSecure", encodedText);
        }
    },
    /**
     * @ignore
     * @memberof WinForms.EditTOBehavior
     */
    _properties:{
        /**
         * Returns the tooltip text of the error icon associated with this object.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the errorText operation ends.
         */
        errorText: function () {
            return this._executeWithEventsOnError(arguments, "GetErrorProviderText");
        },
    }
};

module.exports.Edit = Edit;
module.exports.EditTO = EditTO;
