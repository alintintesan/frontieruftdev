// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */
var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * A TableCell object
 * @constructor
 * @class TableCell
 * @mixes WinForms.TableCellBehavior._properties
 * @mixes WinForms.TableCellBehavior._methods
 * @memberof WinForms
 */
function TableCell(owner, rowIdentifier, columnIdentifier) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(TableCellBehavior);
    this._ownerTable = owner;
    this._rowIdentifier = rowIdentifier;
    this._columnIdentifier = columnIdentifier;

    this._executeWithEventsOnItem = this._ownerTable._executeWithEventsOnItem.bind(this._ownerTable, this);
    this._executeWithEventsOnItemOnError = this._ownerTable._executeWithEventsOnItemOnError.bind(this._ownerTable, this);
}

TableCell.prototype = {
    _rowIdentifier: null,
    _columnIdentifier: null,
    _ownerTable: null,
    _executeWithEventsOnItem: null,
    _executeWithEventsOnItemOnError: null
};

/**
 * A C1TableCell object
 * @constructor
 * @class C1TableCell
 * @extends WinForms.TableCell
 * @mixes WinForms.C1TableCellBehavior._properties
 * @mixes WinForms.C1TableCellBehavior._methods
 * @memberof WinForms
 */
function C1TableCell(owner, rowIdentifier, columnIdentifier) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(TableCellBehavior);
    this._mergeBehavior(C1TableCellBehavior);
    this._ownerTable = owner;
    this._rowIdentifier = rowIdentifier;
    this._columnIdentifier = columnIdentifier;

    this._executeWithEventsOnItem = this._ownerTable._executeWithEventsOnItem.bind(this._ownerTable, this);
    this._executeWithEventsOnItemOnError = this._ownerTable._executeWithEventsOnItemOnError.bind(this._ownerTable, this);
}

/**
 * The methods of TableCell object
 * @memberof WinForms
 * @ignore
 */
var TableCellBehavior = {
    /**
     * @memberof WinForms.TableCellBehavior
     * @ignore
     */
    _properties: {
        /**
         * The X-coordinate in pixels of the cell relative to the table.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the X-coordinate in pixels of the cell relative to the table.
         */
        x: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTable._getCellX, this._rowIdentifier, this._columnIdentifier);
        },

        /**
         * The Y-coordinate in pixels of the cell relative to the table.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the Y-coordinate in pixels of the cell relative to the table.
         */
        y: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTable._getCellY, this._rowIdentifier, this._columnIdentifier);
        },

        /**
         * The height of the cell in pixels.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the height of the cell in pixels.
         */
        height: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTable._getCellHeight, this._rowIdentifier, this._columnIdentifier);
        },

        /**
         * The width of the cell in pixels.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the width of the cell in pixels.
         */
        width: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTable._getCellWidth, this._rowIdentifier, this._columnIdentifier);
        },

        /**
         * The content of the cell.
         * @function
         * @returns {Promise<Object>} a promise that is fulfilled with the content of the cell.
         */
        value: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTable._getCellValue, this._rowIdentifier, this._columnIdentifier);
        },

        /**
         * The column header name of the cell.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the column header name of the cell.
         */
        columnName: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTable._getCellColumnName, this._rowIdentifier, this._columnIdentifier);
        }
    },

    /**
     * @memberof WinForms.TableCellBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the cell to a new value.
         * @function
         * @param {string|number} value The new value to be set.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setValue: function (value) {
            if (value == null)
                throw new Error("The parameter value cannot be null.");
            return this._executeWithEventsOnItem(this._ownerTable._setCellValue, this._rowIdentifier, this._columnIdentifier, value);
        }
    }
};

/**
 * The behaviors of the C1TableCell object
 * @memberof WinForms
 * @ignore
 */
var C1TableCellBehavior = {
    /**
     * @memberof WinForms.C1TableCellBehavior
     * @ignore
     */
    _methods: {
        /**
         * Types the data into this cell one character at a time.
         * @function
         * @param {Object} value the value to enter.
         * @returns {Promise<void>} a promise that is fulfilled when the sendChars operation ends.
         */
        sendChars: function (value) {
            {
                if (value == null)
                    throw new Error("The parameter newValue cannot be null.");

                return this._executeWithEventsOnItem(this._ownerTable._sendChars, this._rowIdentifier, this._columnIdentifier, value);
            }
        }
    }

};

module.exports.TableCell = TableCell;
module.exports.C1TableCell = C1TableCell;