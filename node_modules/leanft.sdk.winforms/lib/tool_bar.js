// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/16/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var StringUtils = Core.StringUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;
var ToolBarItem = require("./toolbar_item.js").ToolBarItem;
var ToolBarTOBaseBehavior = Core.ToolBarTOBaseBehavior;

/**
 * The description of a ToolBar test object.
 * @param {Object} [props] Initializes a ToolBar test object using the supplied property bag.
 * @returns {ToolBar} the description object that was initialized.
 * @class ToolBar
 * @memberof WinForms
 * @extends WinForms.UiObjectBaseDescription
 */
function ToolBar(props) {
    var toolBarDesc = new UiObjectBaseDescription("ToolBar");
    toolBarDesc._defineByPropertyBag(props);
    return toolBarDesc;
}

/**
 * A ToolBar object,
 * @constructor
 * @class ToolBarTO
 * @extends WinForms.UiObjectBaseTO
 * @mixes WinForms.ToolBarTOBehavior._methods
 * @mixes WinForms.ToolBarTOBehavior._properties
 * @memberof WinForms
 */
function ToolBarTO(session, description) {
    description = description || ToolBar();
    var toolBarTO = new UiObjectBaseTO("SwfToolBar", session, description);
    toolBarTO._mergeBehavior(WrappedItemExecutorBehavior);
    toolBarTO._mergeBehavior(ToolBarTOBaseBehavior);
    toolBarTO._mergeBehavior(ToolBarTOBehavior);
    toolBarTO._minimumItemIndex = 0;
    return toolBarTO;
}

/**
 * The behaviors of the ToolBar object
 * @memberof WinForms
 * @ignore
 */
var ToolBarTOBehavior = {
    /**
     * @ignore
     * @memberof WinForms.ToolBarTOBehavior
     */
    _methods: {
        /**
         * Selects the specified item in this menu. Do not invoke on a toolbar.
         * Remarks: Only visible items can be selected.
         * @function
         * @param {number|string} itemPath the full path of the menu item is a list of menu button names separated by semicolons.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        select: function (itemPath) {
            return this._executeWithEvents(arguments, "Select", itemPath);
        },

        /**
         * Opens the dropdown menu associated with this menu item or toolbar item.
         * @function
         * @param {number|string} itemPathOrIndex The identifier of the item. If it is a number, it is the 0-based index of the item. If it is a string, it is the item path.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        showDropdown: function (itemPathOrIndex) {
            return this._executeWithEvents(arguments, "ShowDropdown", itemPathOrIndex);
        },

        /**
         * Indicates whether the specified toolbar button or menu button exists.
         * @function
         * @param {string} itemPath The full path of the button. the full path of a menu button is a list of menu button names separated by semicolons.
         * @returns {Promise<boolean>} a promise that is fulfilled with indication whether the specified toolbar button or menu button exists.
         */
        isItemExists: function (itemPath) {
            return this._executeNotWrapped(arguments, "ItemExists", itemPath);
        },

        /*jshint eqnull:true */
        /**
         * Retrieves the item with the specified text.
         * @function
         * @param {string} text The text representation if the ToolBarItem.
         * @returns {ToolBarItem} The ToolBarItem object. See {@link WinForms.ToolBarItem}
         */
        getItem: function (text) {
            if (text == null)
                throw new Error("The parameter text cannot be null.");
            return this._createItem(text, text);
        }
    },

    /**
     * @ignore
     * @memberof WinForms.ToolBarTOBehavior
     */
    _properties:{
        /**
         * For menu: returns the names of the top menu items.
         * For toolbar: returns the names of the toolbar buttons.
         * @function
         * @returns {string[]} an array of names.
         */
        topMenuItems: function () {
            return this._executeWithEventsOnError(arguments, "GetContent").then((function (result) {
                if (StringUtils.isNullOrEmpty(result))
                    return [];
                var listOfItems = result.split("\n");
                return listOfItems;
            }).bind(this));
        },

        /**
         * Returns the toolbar items in this toolbar. Do not invoke on a menu.
         * @function
         * @returns {Promise<ToolBarItem[]>} a promise that is fulfilled with an array of all items in the ToolBar. See {@link WinForms.ToolBarItem}
         */
        items: function () {
            return this._executeWithEventsOnError(arguments, "GetContent").then(this._nativeStringToMenuItems.bind(this));
        },

        /**
         * Returns the selected items in this toolbar. Do not invoke on a menu.
         * @function
         * @returns {Promise<ToolBarItem[]>} a promise that is fulfilled with an array of all selected items in the ToolBar. See {@link WinForms.ToolBarButton}
         */
        selectedItems: function () {
            return this._executeWithEventsOnError(arguments, "GetSelection").then(this._nativeStringToMenuItems.bind(this));
        },

        /**
         * Returns the tooltip text of the error icon associated with this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the tooltip text of the error icon associated with this object.
         */
        errorText: function () {
            return this._executeWithEventsOnError(arguments, "GetErrorProviderText");
        }
    },

    _helpers: {
        /*jshint eqnull:true */
        /**
         * @ignore
         */
        _nativeStringToMenuItems: function (nativeString) {
            if (StringUtils.isNullOrEmpty(nativeString))
                return [];
            var listOfItems = nativeString.split("\n");
            return listOfItems.map(function (item) {
                return this._createItem(item, item);
            }, this);
        },

        /**
         * Press a toolbar item.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        _pressItem: function (identifier) {
            return this._executeNotWrapped(arguments, "Press", identifier);
        },

        /**
         * Check if the item is hidden
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the toolbar item is hidden or not
         * @ignore
         */
        _isItemHidden: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "hidden");
        },

        /**
         * Create a ToolBarItem from the identifier and textRepresentation
         * @param {number|string} identifier The identifier of the ToolBarItem. If it is a number, it is the 0-based index of the item.
         * @param {string} textRepresentation The text representation if the ToolBarItem.
         * @returns {ToolBarItem} The ToolBarItem object
         * @ignore
         */
        _createItem: function (identifier, textRepresentation) {
            return new ToolBarItem(this, identifier, textRepresentation);
        }
    }
};

module.exports.ToolBarTO = ToolBarTO;
module.exports.ToolBar = ToolBar;
