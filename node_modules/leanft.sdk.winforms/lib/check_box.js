// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/07/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var Convert = Core.Convert;
var CheckedState = Core.CheckedState;

var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;

/**
 * The description of a CheckBox test object.
 * @param {Object} [props] Initializes a CheckBox test object using the supplied property bag.
 * @returns {CheckBox} the description object that was initialized.
 * @class CheckBox
 * @extends WinForms.UiObjectBaseDescription
 * @mixes WinForms.CheckBoxDescriptionBehavior
 * @memberof WinForms
 */
function CheckBox(props) {
    var checkBoxDesc = new UiObjectBaseDescription("CheckBox");
    Utils.extend(checkBoxDesc, CheckBoxDescriptionBehavior);
    checkBoxDesc._defineByPropertyBag(props);
    return checkBoxDesc;
}

/**
 * CheckBoxDescriptionBehavior - the description for a CheckBox object
 * @memberof WinForms
 * @ignore
 */

var CheckBoxDescriptionBehavior = {
    /**
     * Indicates whether the control is checked.
     * @param {boolean} [isChecked] When provided, this method acts as a setter and sets the isChecked value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isChecked value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isChecked: function (isChecked) {
        return this._propertyHandler("checked", isChecked, Convert.toBool);
    },

    /**
     * Indicates whether the check box is able to display three check states.
     * @param {boolean} [isThreeState] When provided, this method acts as a setter and sets the isThreeState value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isThreeState value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isThreeState: function (isThreeState) {
        return this._propertyHandler ("ThreeState", isThreeState, Convert.toBool);
    },

    /**
     * Get or set the check box state.
     * @param {CheckedState} [state] When provided, this method acts as a setter and sets the state value.
     * @returns {CheckedState | Description} If no parameter is provided, the method acts as a getter and returns the current stored state value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    state: function (state) {
        return this._propertyHandler ("CheckState", state, CheckedState._checkedStateToNative4DotNet,CheckedState._nativeToCheckedState4DotNet );
    }
};

/**
 * A CheckBoxTO object,
 * @constructor
 * @class CheckBoxTO
 * @extends WinForms.UiObjectBaseTO
 * @mixes WinForms.CheckBoxTOBehavior._properties
 * @mixes WinForms.CheckBoxTOBehavior._methods
 * @memberof WinForms
 */
function CheckBoxTO(session, description) {
    description = description || CheckBox();
    var checkBoxTO = new UiObjectBaseTO("SwfCheckBox", session, description);
    checkBoxTO._mergeBehavior(CheckBoxTOBehavior);
    return checkBoxTO;
}

//Consts
var checkStateWiredName = "CheckState";

/**
 * The behaviors of the CheckBox object
 * @memberof WinForms
 * @ignore
 */
var CheckBoxTOBehavior = {
    /**
     * @ignore
     * @memberof WinForms.CheckBoxTOBehavior
     */
    _properties: {
        /**
         * Indicates whether this control is selected.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with indicates whether this control is selected.
         */
        isChecked: {
            wiredName: "checked"
        },

        /**
         * Indicates this check box is able to display three check states.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with indicates this check box is able to display three check states.
         */
        isThreeState: {
            wiredName: "ThreeState"
        },

        /**
         * Returns the check box status.
         * @function
         * @returns {Promise<CheckedState>} a promise that is fulfilled and returns the check box status.
         */
        state: {
            type: 'enum',
            enumType: CheckedState,
            enumName: 'CheckedState',
            wiredName: checkStateWiredName,
            getter: function () {
                return this._getROProperty(checkStateWiredName, arguments).then(CheckedState._nativeToCheckedState4DotNet);
            }
        },

        /**
         * Returns the tooltip text of the error icon associated with this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled when the errorText operation ends.
         */
        errorText: function () {
            return this._executeWithEventsOnError(arguments, "GetErrorProviderText");
        }
    },

    /**
     * @ignore
     * @memberof WinForms.CheckBoxTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * The check box status.
         * @function
         * @param {CheckedState} state Possible values: {@link CheckedState}
         * @returns {Promise<void>} a promise that is fulfilled when the set operation ends.
         */
        set: function (state) {
            if (state == null)
                throw new Error("The state cannot be null.");
            return this._executeWithEvents(arguments, "Set", CheckedState._checkedStateToNative(state));
        }
    }
};
module.exports.CheckBox = CheckBox;
module.exports.CheckBoxTO = CheckBoxTO;