// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;
var Convert = Core.Convert;
var TableCell = require("./tablecell.js").TableCell;

/**
 * An Infragistics UltraWinGrid object.
 * @constructor
 * @class UltraWinGrid
 * @mixes WinForms.UltraWinGridBehavior._properties
 * @mixes WinForms.UltraWinGridBehavior._methods
 * @memberof WinForms
 */
function UltraWinGrid(ownerTable) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(UltraWinGridBehavior);
    this._ownerTable = ownerTable;
}

UltraWinGrid.prototype = {
    _ownerTable: null
};

/**
 * The behaviors of the UltraWinGridBehavior object
 * @memberof WinForms
 * @ignore
 */
var UltraWinGridBehavior = {
    /**
     * @memberof WinForms.UltraWinGridBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Double-clicks the specified cell in this grid..
         * @function
         * @param {number|string} rowOrRowPath The 0-based row number or row path.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the activateCell operation ends.
         */
        activateCell: function (rowOrRowPath, columnHeader) {
            if (rowOrRowPath == null)
                throw new Error("ArgumentException: rowOrRowPath is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "ActivateCell", rowOrRowPath, columnHeader);
        },

        /**
         * Scrolls the specified cell into view.
         * @function
         * @param {number|string} rowOrRowPath The 0-based row number or row path.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the makeCellVisible operation ends.
         */
        makeCellVisible: function (rowOrRowPath, columnHeader) {
            if (rowOrRowPath == null)
                throw new Error("ArgumentException: rowOrRowPath is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "MakeCellVisible", rowOrRowPath, columnHeader);
        },

        /**
         * Double-clicks the specified column header in this grid.
         * @function
         * @param {number} bandLevel The 0-based band level.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the activateColumn operation ends.
         */
        activateColumn: function (bandLevel, columnHeader) {
            if (bandLevel == null)
                throw new Error("ArgumentException: bandLevel is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "ActivateColumn", Convert.toNumber(bandLevel) + ";" + columnHeader);
        },

        /**
         * Double-clicks the specified row header in this grid.
         * @function
         * @param {string} rowPath The row as a string in the format: "n1;n2;...nX" where n is the row number in each band level.
         * @returns {Promise<void>} a promise that is fulfilled when the activateRow operation ends.
         */
        activateRow: function (rowPath) {
            if (rowPath == null)
                throw new Error("ArgumentException: rowPath is required.");
            return this._ownerTable._executeWithEvents(arguments, "ActivateRow", rowPath);
        },

        /**
         * Adds a new row to the table band using the Add button for the corresponding band.
         * @function
         * @param {string} addButtonName The name of the Add button corresponding to the band to which you want to add a row.
         * @param {string} [newRowPath] The band path that shows where the row is added in the format: "n1;n2;...;nX" where n is the row number in each band level.
         * @returns {Promise<void>} a promise that is fulfilled when the addRow operation ends.
         */
        addRow: function (addButtonName, newRowPath) {
            if (addButtonName == null)
                throw new Error("ArgumentException: addButtonName is required.");

            if (newRowPath == null)
                return this._ownerTable._executeWithEvents(arguments, "AddRow", addButtonName);

            return this._ownerTable._executeWithEvents(arguments, "AddRow", addButtonName, newRowPath);
        },

        /**
         * Collapses the specified row.
         * @function
         * @param {string|number} rowOrRowPath The 0-based row index or the row as a string in the format: "n1;n2;...;nX" where n is the row number in each band level.
         * @returns {Promise<void>} a promise that is fulfilled when the collapseRow operation ends.
         */
        collapseRow: function (rowOrRowPath) {
            if (rowOrRowPath == null)
                throw new Error("ArgumentException: rowOrRowPath is required.");
            return this._ownerTable._executeWithEvents(arguments, "CollapseRow", rowOrRowPath);
        },

        /**
         * Expands the specified row.
         * @function
         * @param {string|number} rowOrRowPath The 0-based row index or the row as a string in the format: "n1;n2;...;nX" where n is the row number in each band level.
         * @returns {Promise<void>} a promise that is fulfilled when the expandRow operation ends.
         */
        expandRow: function (rowOrRowPath) {
            if (rowOrRowPath == null)
                throw new Error("ArgumentException: rowOrRowPath is required.");
            return this._ownerTable._executeWithEvents(arguments, "ExpandRow", rowOrRowPath);
        },

        /**
         * Returns the specified cell.
         * @function
         * @param {string|number} rowOrRowPath 0-based row number or row path.
         * @param {string|number} columnOrColumnHeader 0-based column index or column caption.
         * @returns {WinForms.TableCell} the TableCell.
         */
        getCell: function (rowOrRowPath, columnOrColumnHeader) {
            if (rowOrRowPath == null)
                throw new Error("ArgumentException: rowOrRowPath is required.");
            if (columnOrColumnHeader == null)
                throw new Error("ArgumentException: columnOrColumnHeader is required.");

            return new TableCell(this._ownerTable, rowOrRowPath, columnOrColumnHeader);
        },

        /**
         * Opens the summary dialog box for the specified column.
         * @function
         * @param {number} bandLevel The band level for which you want to open the dialog box.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the openSummaryDialog operation ends.
         */
        openSummaryDialog: function (bandLevel, columnHeader) {
            if (bandLevel == null)
                throw new Error("ArgumentException: bandLevel is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "OpenSummaryDlg", Convert.toNumber(bandLevel), columnHeader);
        },

        /**
         * Selects the specified cell in this grid.
         * @function
         * @param {string|number} rowOrRowPath 0-based row number or row path.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the selectCell operation ends.
         */
        selectCell: function (rowOrRowPath, columnHeader) {
            if (rowOrRowPath == null)
                throw new Error("ArgumentException: rowOrRowPath is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "SelectCell", rowOrRowPath, columnHeader);
        },

        /**
         * Selects column by column index or column caption.
         * @function
         * @param {number} bandLevel The band level for which you want to open the dialog box..
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the selectColumn operation ends.
         */
        selectColumn: function (bandLevel, columnHeader) {
            if (bandLevel == null)
                throw new Error("ArgumentException: bandLevel is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "SelectColumn", Convert.toNumber(bandLevel) + ";" + columnHeader);
        },

        /**
         * Clicks the specified row header in this grid.
         * @function
         * @param {string} rowPath The row as a string in the format: "n1;n2;...;nX" where n is the row number in each band level.
         * @returns {Promise<void>} a promise that is fulfilled when the collapseRow operation ends.
         */
        selectRow: function (rowPath) {
            if (rowPath == null)
                throw new Error("ArgumentException: rowPath is required.");
            return this._ownerTable._executeWithEvents(arguments, "SelectRow", rowPath);
        },

        /**
         * Applies the specified filter string to the specified column.
         * @function
         * @param {number} bandLevel The 0-based band level.
         * @param {string} columnHeader The column caption.
         * @param {string} filter A value in the column to be used as the filter
         * @returns {Promise<void>} a promise that is fulfilled when the setFilter operation ends.
         */
        setFilter: function (bandLevel, columnHeader, filter) {
            if (bandLevel == null)
                throw new Error("ArgumentException: bandLevel is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            if (filter == null)
                throw new Error("ArgumentException: filter is required.");
            return this._ownerTable._executeWithEvents(arguments, "SetFilter", bandLevel, columnHeader, filter);
        },

        /**
         * Sorts this table by the specified column (ascending).
         * @function
         * @param {number} bandLevel The 0-based band level.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the sort operation ends.
         */
        sort: function (bandLevel, columnHeader) {
            if (columnHeader == null)
                throw new Error("ArgumentException: column is required.");
            return this._ownerTable._executeWithEvents(arguments, "Sort", bandLevel, columnHeader, "Ascending");
        },

        /**
         * Sorts this table by the specified column (descending).
         * @function
         * @param {number} bandLevel The 0-based band level.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the sort operation ends.
         */
        sortDescending: function (bandLevel, columnHeader) {
            if (bandLevel == null)
                throw new Error("ArgumentException: bandLevel is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "Sort", bandLevel, columnHeader, "Descending");
        }
    },

    /**
     * @memberof WinForms.UltraWinGridBehavior
     * @ignore
     */
    _properties: {
        /**
         * Get the number of rows
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of rows
         */
        rowCount: function () {
            return this._ownerTable._executeWithEventsOnError(arguments, "RowCount");
        },

        /**
         * Get the number of columns
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns
         */
        columnCount: function () {
            return this._ownerTable._executeWithEventsOnError(arguments, "ColumnCount");
        },

        /**
         * Returns the Table test object this custom grid was accessed from.
         * @function
         * @returns {WinForms.Table} the tableTestObject.
         */
        tableTestObject: function () {
            return this._ownerTable;
        }
    }

};

module.exports.UltraWinGrid = UltraWinGrid;
