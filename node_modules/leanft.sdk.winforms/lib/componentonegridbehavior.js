// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/10/2016.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var C1TableCell = require("./tablecell.js").C1TableCell;

/**
 * The behaviors of the ComponentOneGridBehavior object
 * @memberof WinForms
 * @ignore
 */
var ComponentOneGridBehavior = {
    /**
     * @memberof WinForms.ComponentOneGridBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Double-clicks the specified cell in this grid..
         * @function
         * @param {number} row 0-based row number.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the activateCell operation ends.
         */
        activateCell: function (row, columnHeader) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "ActivateCell", Convert.toNumber(row), columnHeader);
        },

        /**
         * Scrolls the specified cell into view.
         * @function
         * @param {number} row 0-based row number.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the makeCellVisible operation ends.
         */
        makeCellVisible: function (row, columnHeader) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "MakeCellVisible", Convert.toNumber(row), columnHeader);
        },

        /**
         * Collapses the specified row.
         * @function
         * @param {number} row The 0-based row index.
         * @returns {Promise<void>} a promise that is fulfilled when the collapseRow operation ends.
         */
        collapseRow: function (row) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            return this._ownerTable._executeWithEvents(arguments, "CollapseRow", Convert.toNumber(row));
        },

        /**
         * Expands the specified row.
         * @function
         * @param {number} row The 0-based row index.
         * @returns {Promise<void>} a promise that is fulfilled when the expandRow operation ends.
         */
        expandRow: function (row) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            return this._ownerTable._executeWithEvents(arguments, "ExpandRow", Convert.toNumber(row));
        },

        /**
         * Returns the specified cell.
         * @function
         * @param {number} row 0-based row number.
         * @param {string|number} columnOrColumnHeader 0-based column index or column caption.
         * @returns {WinForms.C1TableCell} the C1TableCell.
         */
        getCell: function (row, columnOrColumnHeader) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnOrColumnHeader == null)
                throw new Error("ArgumentException: columnOrColumnHeader is required.");

            return new C1TableCell(this._ownerTable, Convert.toNumber(row), columnOrColumnHeader);
        },

        /**
         * Selects the specified cell and opens a cell's pop-up cell element.
         * @function
         * @param {number} row 0-based row number.
         * @param {string|number} column 0-based column index or column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the openCellElement operation ends.
         */
        openCellElement: function (row, column) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (column == null)
                throw new Error("ArgumentException: column is required.");
            return this._ownerTable._executeWithEvents(arguments, "OpenCellElement", Convert.toNumber(row), column);
        },

        /**
         * Selects the specified cell in this grid.
         * @function
         * @param {number} row 0-based row number.
         * @param {string} columnHeader The column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the selectCell operation ends.
         */
        selectCell: function (row, columnHeader) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnHeader == null)
                throw new Error("ArgumentException: columnHeader is required.");
            return this._ownerTable._executeWithEvents(arguments, "SelectCell", Convert.toNumber(row), columnHeader);
        },

        /**
         * Selects column by column index or column caption.
         * @function
         * @param {string|number} column The column 0-based index or column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the selectColumn operation ends.
         */
        selectColumn: function (column) {
            if (column == null)
                throw new Error("ArgumentException: column is required.");
            return this._ownerTable._executeWithEvents(arguments, "SelectColumn", column);
        },

        /**
         * Applies the specified filter string to the specified column.
         * @function
         * @param {string|number} column The column 0-based index or column caption.
         * @param {string} filter a value in the column to be used as the filter
         * @returns {Promise<void>} a promise that is fulfilled when the setFilter operation ends.
         */
        setFilter: function (column, filter) {
            if (column == null)
                throw new Error("ArgumentException: column is required.");
            if (filter == null)
                throw new Error("ArgumentException: filter is required.");
            return this._ownerTable._executeWithEvents(arguments, "SetFilter", column, filter);
        },

        /**
         * Sorts this table by the specified column (ascending).
         * @function
         * @param {string|number} column The column 0-based index or column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the sort operation ends.
         */
        sort: function (column) {
            if (column == null)
                throw new Error("ArgumentException: column is required.");
            return this._ownerTable._executeWithEvents(arguments, "Sort", column, "Ascending");
        },

        /**
         * Sorts this table by the specified column (descending).
         * @function
         * @param {string|number} column The column 0-based index or column caption.
         * @returns {Promise<void>} a promise that is fulfilled when the sort operation ends.
         */
        sortDescending: function (column) {
            if (column == null)
                throw new Error("ArgumentException: column is required.");
            return this._ownerTable._executeWithEvents(arguments, "Sort", column, "Descending");
        }
    },

    /**
     * @memberof WinForms.ComponentOneGridBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the Table test object this custom grid was accessed from.
         * @function
         * @returns {WinForms.Table} the tableTestObject.
         */
        tableTestObject: function () {
            return this._ownerTable;
        },

        /**
         * Returns either a promise for all the cells in the table (when called without arguments), or all the cells in a row (when called with row only), or for the specified cell.
         * @function
         * @param {number} [rowIndex] The row index of the specific cell.
         * @param {number} [columnIndex] The column index in the row, specified by the row parameter.
         * @returns {Promise<WinForms.C1TableCell[][] | WinForms.C1TableCell[]> | WinForms.C1TableCell} either a promise for all the cells in the table (when called without arguments), or all the cells in a row (when called with row only), or for the specified cell.
         */
        cells: function (rowIndex, columnIndex) {
            return this._cells(rowIndex, columnIndex);
        }
    },

    _helpers: {
        /**
         * Get the number of rows and columns
         * @returns {Promise<Object>} a promise that is fulfilled with the number of rows and columns.
         * @ignore
         */
        _getRowAndColumnCount: function () {
            return this._ownerTable._executeNotWrapped(arguments, "RowCount").then(function(rowCount) {
                return this._ownerTable._executeCommand("ColumnCount").then(function(colCount) {
                    return {
                        rowCount: rowCount,
                        columnCount: colCount
                    };
                });
            }.bind(this));
        },

        /**
         * Get the number of columns in the table.
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns in the table.
         * @ignore
         */
        _getColumnCount: function () {
            return this._ownerTable._executeNotWrapped(arguments, "ColumnCount");
        },

        /**
         * Create C1TableCell object.
         * @param rowIndex 0-based index.
         * @param columnIndex 0-based index.
         * @returns {WinForms.C1TableCell} a C1TableCell object.
         * @ignore
         */
        _createCell: function (rowIndex, columnIndex) {
            return new C1TableCell(this._ownerTable, rowIndex, columnIndex);
        }
    }
};

module.exports.ComponentOneGridBehavior = ComponentOneGridBehavior;
