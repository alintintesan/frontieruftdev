// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */
var Core = require("leanft.sdk.core");
var UiObjectBase = require("./ui_object_base.js");
var HelperBehaviors = require("./helper_behaviors.js");
var ClassPathDescriptionBehavior = HelperBehaviors.ClassPathDescriptionBehavior;
var ClassPathInfoProvider = HelperBehaviors.ClassPathInfoProvider;
var EnabledDescriptionBehavior = HelperBehaviors.EnabledDescriptionBehavior;
var EnabledInfoProvider = HelperBehaviors.EnabledInfoProvider;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;
var ObjUtils = Core.ObjectUtils;

/**
 * FlexFieldWindowDescriptionBehavior - the description for an Oracle flexfield window.
 * @memberof Oracle
 * @ignore
 */
var FlexFieldWindowDescriptionBehavior = {
    /**
     * The window title.
     * @param {string} [title] When provided, this method acts as a setter and sets the title value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored title value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    title: function (title) {
        return this._simplePropertyHandler("title", title);
    }
};

/**
 * The description of an Oracle flexfield window.
 * @param {Object} [props] Initializes an Oracle FlexFieldWindow test object using the supplied property bag.
 * @returns {FlexFieldWindow} the description object that was initialized.
 * @class FlexFieldWindow
 * @extends Oracle.UiObjectBaseDescription
 * @mixes Oracle.ClassPathDescriptionBehavior
 * @mixes Oracle.EnabledDescriptionBehavior
 * @mixes Oracle.FlexFieldWindowDescriptionBehavior
 * @memberof Oracle
 */
function FlexFieldWindow(props) {
    var flexFieldWindow = new UiObjectBaseDescription("FlexFieldWindow");
    ObjUtils.extend(flexFieldWindow, ClassPathDescriptionBehavior);
    ObjUtils.extend(flexFieldWindow, EnabledDescriptionBehavior);
    ObjUtils.extend(flexFieldWindow, FlexFieldWindowDescriptionBehavior);
    flexFieldWindow._defineByPropertyBag(props);
    return flexFieldWindow;
}

/**
 * An Oracle flexfield window.
 * @constructor
 * @class FlexFieldWindowTO
 * @extends Oracle.UiObjectBaseTO
 * @mixes Oracle.FlexFieldWindowTOBehavior._methods
 * @mixes Oracle.FlexFieldWindowTOBehavior._properties
 * @mixes Oracle.ClassPathInfoProvider._properties
 * @mixes Oracle.EnabledInfoProvider._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof Oracle
 */
function FlexFieldWindowTO(session, description) {
    description = description || FlexFieldWindow();
    var flexFieldWindowTO = new UiObjectBaseTO("OracleFlexWindow", session, description);
    flexFieldWindowTO._mergeBehavior(ClassPathInfoProvider);
    flexFieldWindowTO._mergeBehavior(EnabledInfoProvider);
    flexFieldWindowTO._mergeBehavior(WaitUntilEnabledBehavior);
    flexFieldWindowTO._mergeBehavior(FlexFieldWindowTOBehavior);
    return flexFieldWindowTO;
}

/**
 * The behaviors of An Oracle flexfield window.
 * @memberof Oracle
 * @ignore
 */
var FlexFieldWindowTOBehavior = {
    /**
     * @ignore
     * @memberof Oracle.FlexFieldWindowTOBehavior
     */
    _properties: {
        /**
         * Get the window title.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the window title.
         */
        title: {
        }
    },
    /**
     * @ignore
     * @memberof Oracle.FlexFieldWindowTOBehavior
     */
    _methods: {
        /**
         * Accepts changes and closes the flexfield window by clicking the OK button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the approve operation ends.
         */
        approve: function () {
            return this._executeWithEvents(arguments, "Approve");
        },
        /**
         * Cancels changes and closes the flexfield window by clicking the Cancel button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the cancel operation ends.
         */
        cancel: function () {
            return this._executeWithEvents(arguments, "Cancel");
        },
        /**
         * Clears data in the flexfield window fields by clicking the Clear button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the clear operation ends.
         */
        clear: function () {
            return this._executeWithEvents(arguments, "Clear");
        },
        /**
         * Accesses the online help by clicking the Help button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the help operation ends.
         */
        help: function () {
            return this._executeWithEvents(arguments, "Help");
        },
        /**
         * Uses the Show Combinations button to display a Reduction Criteria window that assists in completing the flexfield value.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the showCombinations operation ends.
         */
        showCombinations: function () {
            return this._executeWithEvents(arguments, "ShowCombinations");
        }
    }
};

module.exports.FlexFieldWindow = FlexFieldWindow;
module.exports.FlexFieldWindowTO = FlexFieldWindowTO;

