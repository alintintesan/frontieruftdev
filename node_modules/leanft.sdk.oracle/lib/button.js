// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */
var Core = require("leanft.sdk.core");
var UiObjectBase = require("./ui_object_base.js");
var HelperBehaviors = require("./helper_behaviors.js");
var ClassPathDescriptionBehavior = HelperBehaviors.ClassPathDescriptionBehavior;
var ClassPathInfoProvider = HelperBehaviors.ClassPathInfoProvider;
var EnabledDescriptionBehavior = HelperBehaviors.EnabledDescriptionBehavior;
var EnabledInfoProvider = HelperBehaviors.EnabledInfoProvider;
var ObjectInfoDescriptionBehavior = HelperBehaviors.ObjectInfoDescriptionBehavior;
var ObjectInfoProvider = HelperBehaviors.ObjectInfoProvider;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;
var ObjUtils = Core.ObjectUtils;

/**
 * ButtonDescriptionBehavior - the description for an Oracle button.
 * @memberof Oracle
 * @ignore
 */
var ButtonDescriptionBehavior = {
    /**
     * The text displayed on the object.
     * @param {string} [label] When provided, this method acts as a setter and sets the label value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored label value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    label: function (label) {
        return this._simplePropertyHandler("label", label);
    }
};

/**
 * The description of an Oracle button.
 * @param {Object} [props] Initializes an Oracle button test object using the supplied property bag.
 * @returns {Button} the description object that was initialized.
 * @class Button
 * @extends Oracle.UiObjectBaseDescription
 * @mixes Oracle.ClassPathDescriptionBehavior
 * @mixes Oracle.EnabledDescriptionBehavior
 * @mixes Oracle.ObjectInfoDescriptionBehavior
 * @mixes Oracle.ButtonDescriptionBehavior
 * @memberof Oracle
 */
function Button(props) {
    var button = new UiObjectBaseDescription("Button");
    ObjUtils.extend(button, EnabledDescriptionBehavior);
    ObjUtils.extend(button, ObjectInfoDescriptionBehavior);
    ObjUtils.extend(button, ClassPathDescriptionBehavior);
    ObjUtils.extend(button, ButtonDescriptionBehavior);
    button._defineByPropertyBag(props);
    return button;
}

/**
 * An Oracle button.
 * @constructor
 * @class ButtonTO
 * @extends Oracle.UiObjectBaseTO
 * @mixes Oracle.ClassPathInfoProvider._properties
 * @mixes Oracle.EnabledInfoProvider._properties
 * @mixes Oracle.ObjectInfoProvider._properties
 * @mixes Oracle.ButtonTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof Oracle
 */
function ButtonTO(session, description) {
    description = description || Button();
    var buttonTO = new UiObjectBaseTO("OracleButton", session, description);
    buttonTO._mergeBehavior(ClassPathInfoProvider);
    buttonTO._mergeBehavior(EnabledInfoProvider);
    buttonTO._mergeBehavior(ObjectInfoProvider);
    buttonTO._mergeBehavior(WaitUntilEnabledBehavior);
    buttonTO._mergeBehavior(ButtonTOBehavior);
    return buttonTO;
}

/**
 * The behaviors of An Oracle button.
 * @memberof Oracle
 * @ignore
 */
var ButtonTOBehavior = {
    /**
     * @ignore
     * @memberof Oracle.ButtonTOBehavior
     */
    _properties: {
        /**
         * Get the text displayed on the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the label.
         */
        label: {
        }
    }
};

module.exports.Button = Button;
module.exports.ButtonTO = ButtonTO;

