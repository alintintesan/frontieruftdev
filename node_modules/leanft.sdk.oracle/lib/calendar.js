// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */
var Core = require("leanft.sdk.core");
var UiObjectBase = require("./ui_object_base.js");
var HelperBehaviors = require("./helper_behaviors.js");
var ClassPathDescriptionBehavior = HelperBehaviors.ClassPathDescriptionBehavior;
var ClassPathInfoProvider = HelperBehaviors.ClassPathInfoProvider;
var EnabledDescriptionBehavior = HelperBehaviors.EnabledDescriptionBehavior;
var EnabledInfoProvider = HelperBehaviors.EnabledInfoProvider;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var CalendarConverter = Core.CalendarConverter;
var ObjUtils = Core.ObjectUtils;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

/**
 * CalendarDescriptionBehavior - the description for an Oracle calendar.
 * @memberof Oracle
 * @ignore
 */
var CalendarDescriptionBehavior = {
    /**
     * The window title.
     * @param {string} [title] When provided, this method acts as a setter and sets the title value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored title value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    title: function (title) {
        return this._simplePropertyHandler("title", title);
    }
};

/**
 * The description of an Oracle calendar.
 * @param {Object} [props] Initializes an Oracle Calendar test object using the supplied property bag.
 * @returns {Calendar} the description object that was initialized.
 * @class Calendar
 * @extends Oracle.UiObjectBaseDescription
 * @mixes Oracle.ClassPathDescriptionBehavior
 * @mixes Oracle.EnabledDescriptionBehavior
 * @mixes Oracle.CalendarDescriptionBehavior
 * @memberof Oracle
 */
function Calendar(props) {
    var calendar = new UiObjectBaseDescription("Calendar");
    ObjUtils.extend(calendar, EnabledDescriptionBehavior);
    ObjUtils.extend(calendar, ClassPathDescriptionBehavior);
    ObjUtils.extend(calendar, CalendarDescriptionBehavior);
    calendar._defineByPropertyBag(props);
    return calendar;
}

/**
 * An Oracle calendar.
 * @constructor
 * @class CalendarTO
 * @extends Oracle.UiObjectBaseTO
 * @mixes Oracle.ClassPathInfoProvider._properties
 * @mixes Oracle.EnabledInfoProvider._properties
 * @mixes Oracle.CalendarTOBehavior._properties
 * @mixes Oracle.CalendarTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof Oracle
 */
function CalendarTO(session, description) {
    description = description || Calendar();
    var calendarTO = new UiObjectBaseTO("OracleCalendar", session, description);
    calendarTO._mergeBehavior(ClassPathInfoProvider);
    calendarTO._mergeBehavior(EnabledInfoProvider);
    calendarTO._mergeBehavior(WaitUntilEnabledBehavior);
    calendarTO._mergeBehavior(CalendarTOBehavior);
    return calendarTO;
}

/**
 * The behaviors of an Oracle calendar.
 * @memberof Oracle
 * @ignore
 */
var CalendarTOBehavior = {
    /**
     * @ignore
     * @memberof Oracle.CalendarTOBehavior
     */
    _properties: {
        /**
         * Presses the Cancel button in an Oracle calendar.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the window title.
         */
        title: {
        }
    },
    /**
     * @ignore
     * @memberof Oracle.CalendarTOBehavior
     */
    _methods: {
        /**
         * Presses the Cancel button in an Oracle calendar.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the cancel operation ends.
         */
        cancel: function () {
            return this._executeWithEvents(arguments, "Cancel");
        },
        /**
         * Enters a date in an Oracle calendar.
         * @function
         * @param {Date|string} date The date to set.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setDate: function (date) {
            if (date == null)
                throw new Error("ArgumentException: parameter date can not be null");
            if (typeof(date) === 'string')
                return this._executeWithEvents(arguments, "Enter", date);
            else
                return this._executeWithEvents(arguments, "Enter", CalendarConverter.convertToNativeSingleDateFormat(date));
        }
    }
};

module.exports.Calendar = Calendar;
module.exports.CalendarTO = CalendarTO;

