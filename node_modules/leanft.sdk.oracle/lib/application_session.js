// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var Core = require("leanft.sdk.core");
var UiObjectBase = require("./ui_object_base.js");
var HelperBehaviors = require("./helper_behaviors.js");
var ClassPathDescriptionBehavior = HelperBehaviors.ClassPathDescriptionBehavior;
var ClassPathInfoProvider = HelperBehaviors.ClassPathInfoProvider;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var ObjUtils = Core.ObjectUtils;
var Convert = Core.Convert;

/**
 * The description of an Oracle Applications session window.
 * @param {Object} [props] Initializes an Oracle Applications session test object using the supplied property bag.
 * @returns {ApplicationSession} the description object that was initialized.
 * @class ApplicationSession
 * @extends Oracle.UiObjectBaseDescription
 * @mixes Oracle.ClassPathDescriptionBehavior
 * @memberof Oracle
 */
function ApplicationSession(props) {
    var applicationSession = new UiObjectBaseDescription("ApplicationSession");
    ObjUtils.extend(applicationSession, ClassPathDescriptionBehavior);
    applicationSession._defineByPropertyBag(props);
    return applicationSession;
}

/**
 * An Oracle Applications session window.
 * @constructor
 * @class ApplicationSessionTO
 * @extends Oracle.UiObjectBaseTO
 * @mixes Oracle.ApplicationSessionTOBehavior._methods
 * @mixes Oracle.ClassPathInfoProvider._properties
 * @memberof Oracle
 */
function ApplicationSessionTO(session, description) {
    description = description || ApplicationSession();
    var applicationSessionTO = new UiObjectBaseTO("OracleApplications", session, description);
    applicationSessionTO._mergeBehavior(ClassPathInfoProvider);
    applicationSessionTO._mergeBehavior(ApplicationSessionTOBehavior);
    return applicationSessionTO;
}

/**
 * The behaviors of An Oracle Applications session window.
 * @memberof Oracle
 * @ignore
 */
var ApplicationSessionTOBehavior = {
    /**
     * @ignore
     * @memberof Oracle.ApplicationSessionTOBehavior
     */
    _methods: {
        /**
         * Exits the Oracle Applications session window.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the exit operation ends.
         */
        exit: function () {
            return this._executeWithEvents(arguments, "Exit");
        },
        /**
         * Instructs LeanFT to wait the specified number of seconds to synchronize with Oracle Applications before continuing the run session.
         * @function
         * @param {number} [seconds] If a number is passed, it will wait this number of seconds for a response.
         * @returns {Promise<void>} a promise that is fulfilled when the sync operation ends.
         */
        sync: function (seconds) {
            if (seconds != null) {
                return this._executeWithEvents(arguments, "Sync", Convert.toNumber(seconds));
            }
            return this._executeWithEvents(arguments, "Sync");
        },
        /**
         * Returns the test object representing the currently active window.
         * @function
         * @returns {Promise<TestObject>} a promise that is fulfilled with a test object representing the currently active window.
         */
        getActiveWindow: function() {
            return this._executeWithEvents(arguments, "GetActiveWindow");
        }
    }
};

module.exports.ApplicationSession = ApplicationSession;
module.exports.ApplicationSessionTO = ApplicationSessionTO;

