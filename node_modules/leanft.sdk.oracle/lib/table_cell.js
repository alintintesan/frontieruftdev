// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * A single cell in an Oracle Table.
 * @class TableCell
 * @mixes Oracle.TableCellBehavior._properties
 * @mixes Oracle.TableCellBehavior._methods
 * @memberof Oracle
 */
function TableCell(ownerTable, rowIdentifier, columnIdentifier) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(TableCellBehavior);
    this._ownerTable = ownerTable;
    this._rowIdentifier = rowIdentifier;
    this._columnIdentifier = columnIdentifier;
    this._executeWithEventsOnItem = this._ownerTable._executeWithEventsOnItem.bind(this._ownerTable, this);
    this._executeWithEventsOnItemOnError = this._ownerTable._executeWithEventsOnItemOnError.bind(this._ownerTable, this);
}

TableCell.prototype = {
    _ownerTable: null,
    _rowIdentifier: null,
    _columnIdentifier: null,
    _executeWithEventsOnItem: null,
    _executeWithEventsOnItemOnError: null
};

/**
 * The methods of TableCell object
 * @memberof Oracle
 * @ignore
 */
var TableCellBehavior = {
    /**
     * @memberof Oracle.TableCellBehavior
     * @ignore
     */
    _properties: {
        /**
         * Retrieves the value of a specified record field.
         * @function
         * @returns {Promise<Object>} a promise that is fulfilled with the content of this cell.
         * @memberof Oracle.TableCell#
         */
        value: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTable._getCellValue, this._rowIdentifier, this._columnIdentifier);
        },
        /**
         * Checks whether the field is editable.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the column header name of this cell.
         * @memberof Oracle.TableCell#
         */
        isEditable: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTable._isEditable, this._rowIdentifier, this._columnIdentifier);
        }
    },

    /**
     * @memberof Oracle.TableCellBehavior
     * @ignore
     */
    _methods: {
        /**
         * Enters a value in a specific record field.
         * @function
         * @param {Object} value The value to set.
         * @returns {Promise<void>} a promise that is fulfilled when the setValue operation ends.
         * @memberof Oracle.TableCell#
         */
        setValue: function (value) {
            return this._executeWithEventsOnItem(this._ownerTable._setCellValue, this._rowIdentifier, this._columnIdentifier, value);
        },
        /**
         * Enters a value in a specific record field with validation.
         * @function
         * @param {Object} value The value to set.
         * @returns {Promise<void>} a promise that is fulfilled when the setValueAndValidate operation ends.
         * @memberof Oracle.TableCell#
         */
        setValueAndValidate: function (value) {
            return this._executeWithEventsOnItem(this._ownerTable._setCellValueAndValidate, this._rowIdentifier, this._columnIdentifier, value);
        },
        /**
         * Returns the test object representing a specified record field.
         * @function
         * @returns {Promise<TestObject>} a promise that is fulfilled when the asTestObject operation ends.
         * @memberof Oracle.TableCell#
         */
        asTestObject: function () {
            return this._executeWithEventsOnItem(this._ownerTable._getAsTestObject, this._rowIdentifier, this._columnIdentifier);
        },
        /**
         * Opens a specified record field's associated dialog box.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the openDialog operation ends.
         * @memberof Oracle.TableCell#
         */
        openDialog: function () {
            return this._executeWithEventsOnItem(this._ownerTable._openDialog, this._rowIdentifier, this._columnIdentifier);
        },
        /**
         * Transfers focus to a specified record field.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the setFocus operation ends.
         * @memberof Oracle.TableCell#
         */
        setFocus: function () {
            return this._executeWithEventsOnItem(this._ownerTable._setFocus, this._rowIdentifier, this._columnIdentifier);
        }
    }
};

module.exports.TableCell = TableCell;