// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var StringUtils = Core.StringUtils;
var ExecuteItemsWithEventsBehavior = Core.ExecuteItemsWithEventsBehavior;
var TableBaseOperationBehavior = Core.TableBaseOperationBehavior;
var UiObjectBase = require("./ui_object_base.js");
var HelperBehaviors = require("./helper_behaviors.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var EnabledDescriptionBehavior = HelperBehaviors.EnabledDescriptionBehavior;
var EnabledInfoProvider = HelperBehaviors.EnabledInfoProvider;
var TableCell = require("./table_cell.js").TableCell;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

/**
 * TableDescriptionBehavior - the description for an Oracle Table test object
 * @memberof Oracle
 * @ignore
 */
var TableDescriptionBehavior = {
    /**
     * The name of the object supplied by the server.
     * @param {string} [objectName] When provided, this method acts as a setter and sets the objectName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored objectName value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    objectName: function (objectName) {
        return this._propertyHandler("block name", objectName, Convert.toString);
    },
    /**
     * The number of visible rows in the table.
     * @param {number} [rowsCount] When provided, this method acts as a setter and sets the rowsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored rowsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Oracle.Table#
     */
    rowsCount: function (rowsCount) {
        return this._propertyHandler("visible rows", rowsCount, Convert.toNumber);
    },
    /**
     * The number of columns in the table.
     * @param {number} [columnsCount] When provided, this method acts as a setter and sets the columnsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored columnsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Oracle.Table#
     */
    columnsCount: function (columnsCount) {
        return this._propertyHandler("columns", columnsCount, Convert.toNumber);
    },
    /**
     * A list of all column names in the table.
     * @param {string[]} [columnHeaders] When provided, this method acts as a setter and sets the columnHeaders value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored columnHeaders value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Oracle.Table#
     */
    columnHeaders: function (columnHeaders) {
        return this._propertyHandler("column names", columnHeaders, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    }
};


/**
 * The description of a Oracle Table test object.
 * @param {Object} [props] Initializes a Oracle Table test object using the supplied property bag.
 * @returns {Table} the description object that was initialized.
 * @class Table
 * @extends Oracle.UiObjectBaseDescription
 * @mixes Oracle.EnabledDescriptionBehavior
 * @mixes Oracle.TableDescriptionBehavior
 * @memberof Oracle
 */
function Table(props) {
    var tableDesc = new UiObjectBaseDescription("Table");
    ObjUtils.extend(tableDesc, EnabledDescriptionBehavior);
    ObjUtils.extend(tableDesc, TableDescriptionBehavior);
    tableDesc._defineByPropertyBag(props);
    return tableDesc;
}

/**
 * The behaviors of Table object
 * @memberof Oracle
 * @ignore
 */
var TableTOBehavior = {
    /**
     * @ignore
     * @memberof Oracle.TableTOBehavior
     */
    _properties: {
        /**
         * Returns a promise for all the cells in a table (when called without arguments), all the cells in a row (when called with row only), or a specified cell.
         * @function
         * @param {number} [rowIndex] The row index of the specific cell.
         * @param {string|number} [columnOrIndex] The column header or 0-based column index in the row.
         * @returns {Promise<TableCell[][] | TableCell[]> | TableCell} all the cells in the table (when called without arguments), all the cells in the row (when called with row only), or the specified cell.
         * @memberof Oracle.TableTO#
         */
        cells: function (rowIndex, columnOrIndex) {
            return this._cells(rowIndex, columnOrIndex);
        },

        /**
         * Returns the column headers.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the column headers.
         * @memberof Oracle.TableTO#
         */
        columnHeaders: {
            wiredName: 'column names',
            getter: function () {
                return this._getROProperty('column names', arguments).then(StringUtils.splitFunc(";"));
            }
        },

        /**
         * Returns the number of visible rows in the table.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the rowsCount.
         * @memberof Oracle.TableTO#
         */
        rowsCount: {
            wiredName: 'visible rows',
            getter: function () {
                return this._getROProperty('visible rows', arguments);
            }
        },
        /**
         * Returns the name of the object supplied by the server.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the objectName.
         * @memberof Oracle.TableTO#
         */
        objectName: {
            wiredName: 'block name'
        }
    },

    /**
     * @ignore
     * @memberof Oracle.TableTOBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Activates a specified record.
         * @function
         * @param {number} row 0-based row number.
         * @returns {Promise<void>} a promise that is fulfilled when the activateRow operation ends.
         * @memberof Oracle.TableTO#
         */
        activateRow: function (row) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            return this._executeWithEvents(arguments, "ActivateRecord", Convert.toNumber(row + 1));
        }
    },

    _helpers: {
        /**
         * Get the number of rows in the table.
         * @returns {Promise<number>} a promise that is fulfilled when the _getRowsCount operation ends.
         * @ignore
         */
        _getRowsCount: function () {
            return this._getROProperty("visible rows", arguments).then(Convert.toNumber);
        },

        /**
         * Get cell value.
         * @param {number} rowIdentifier 0-based index.
         * @param {string|number} columnIdentifier The header or 0-based index of the column.
         * @returns {Promise<Object>} a promise that is fulfilled when the _getCellValue operation ends.
         * @ignore
         */
        _getCellValue: function (rowIdentifier, columnIdentifier) {
            return this._executeNotWrapped(arguments, "GetFieldValue", rowIdentifier + 1, this._columnIdentifierTransform(columnIdentifier));
        },

        /**
         * Enters a value in a specific record field.
         * @param {number} rowIdentifier 0-based index.
         * @param {number} columnIdentifier 0-based index.
         * @param {Object} value The cell value to be set.
         * @returns {Promise<void>} a promise that is fulfilled when the _setCellValue operation ends.
         * @ignore
         */
        _setCellValue: function (rowIdentifier, columnIdentifier, value) {
            return this._executeNotWrapped(arguments, "EnterField", rowIdentifier + 1, this._columnIdentifierTransform(columnIdentifier), value, false);
        },

        /**
         * Enters a value in a specific record field with validation.
         * @param {number} rowIdentifier 0-based index.
         * @param {number} columnIdentifier 0-based index.
         * @param {Object} value The cell value to be set.
         * @returns {Promise<void>} a promise that is fulfilled when the _setCellValue operation ends.
         * @ignore
         */
        _setCellValueAndValidate: function (rowIdentifier, columnIdentifier, value) {
            return this._executeNotWrapped(arguments, "EnterField", rowIdentifier + 1, this._columnIdentifierTransform(columnIdentifier), value);
        },

        /**
         * Get the number of rows and columns
         * @returns {Promise<Object>} a promise that is fulfilled with the number of rows and columns.
         * @ignore
         */
        _getRowAndColumnCount: function () {
            return this._getROProperties("visible rows", "columns").then(function (count) {
                return {
                    rowCount: Convert.toNumber(count[0]),
                    columnCount: Convert.toNumber(count[1])
                };
            });
        },

        /**
         * Get the number of columns in the table.
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns in the table.
         * @ignore
         */
        _getColumnCount: function () {
            return this._getROProperty("columns", arguments).then(Convert.toNumber);
        },

        /**
         * Create TableCell object.
         * @param {number} rowIndex 0-based index.
         * @param {string|number} columnOrIndex The column header or 0-based column index in the row, specified by the row parameter.
         * @returns {Oracle.TableCell} A TableCell object.
         * @ignore
         */
        _createCell: function (rowIndex, columnOrIndex) {
            return new TableCell(this, rowIndex, columnOrIndex);
        },
        /**
         * Returns the test object representing a specified record field.
         * @param {number} rowIdentifier 0-based index.
         * @param {number} columnIdentifier 0-based index.
         * @function
         * @returns {Promise<TestObject>} a promise that is fulfilled when the _getAsTestObject operation ends.
         * @memberof Oracle.TableCell#
         */
        _getAsTestObject: function (rowIdentifier, columnIdentifier) {
            return this._executeNotWrapped(arguments, "GetFieldItem", rowIdentifier + 1, this._columnIdentifierTransform(columnIdentifier));
        },
        /**
         * Opens a specified record field's associated dialog box.
         * @param {number} rowIdentifier 0-based index.
         * @param {number} columnIdentifier 0-based index.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the openDialog operation ends.
         * @memberof Oracle.TableCell#
         */
       _openDialog: function (rowIdentifier, columnIdentifier) {
            return this._executeNotWrapped(arguments, "OpenDialog", rowIdentifier + 1, this._columnIdentifierTransform(columnIdentifier));
        },
        /**
         * Transfers focus to a specified record field.
         * @param {number} rowIdentifier 0-based index.
         * @param {number} columnIdentifier 0-based index.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the setFocus operation ends.
         * @memberof Oracle.TableCell#
         */
        _setFocus: function (rowIdentifier, columnIdentifier) {
            return this._executeNotWrapped(arguments, "SetFocus", rowIdentifier + 1, this._columnIdentifierTransform(columnIdentifier));
        },
        /**
         * Checks whether the field is editable.
         * @param {number} rowIdentifier 0-based index.
         * @param {number} columnIdentifier 0-based index.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the column header name of this cell.
         * @memberof Oracle.TableCell#
         */
        _isEditable: function (rowIdentifier, columnIdentifier) {
            return this._executeNotWrapped(arguments, "IsFieldEditable", rowIdentifier + 1, this._columnIdentifierTransform(columnIdentifier));
        },
        _columnIdentifierTransform: function (column) {
            if (typeof column === 'number')
                return column + 1;
            return column;
        }
    }
};

/**
 * A Oracle Table test object
 * @constructor
 * @class TableTO
 * @extends Oracle.UiObjectBaseTO
 * @mixes TableBaseOperationBehavior._methods
 * @mixes TableBaseOperationBehavior._properties
 * @mixes ExecuteItemsWithEventsBehavior
 * @mixes Oracle.EnabledInfoProvider._properties
 * @mixes Oracle.TableTOBehavior._properties
 * @mixes Oracle.TableTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof Oracle
 */
function TableTO(session, description) {
    description = description || Table();
    var tableTO = new UiObjectBaseTO("OracleTable", session, description);
    tableTO._mergeBehavior(TableBaseOperationBehavior);
    tableTO._mergeBehavior(ExecuteItemsWithEventsBehavior);
    tableTO._mergeBehavior(EnabledInfoProvider);
    tableTO._mergeBehavior(WaitUntilEnabledBehavior);
    tableTO._mergeBehavior(TableTOBehavior);
    return tableTO;
}

module.exports.Table = Table;
module.exports.TableTO = TableTO;
