// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */
var Core = require("leanft.sdk.core");
var UiObjectBase = require("./ui_object_base.js");
var UiFormBase = require("./ui_form_base.js");
var HelperBehaviors = require("./helper_behaviors.js");
var MenuItem = require("./menu_item.js").MenuItem;
var ClassPathDescriptionBehavior = HelperBehaviors.ClassPathDescriptionBehavior;
var ClassPathInfoProvider = HelperBehaviors.ClassPathInfoProvider;
var EnabledDescriptionBehavior = HelperBehaviors.EnabledDescriptionBehavior;
var EnabledInfoProvider = HelperBehaviors.EnabledInfoProvider;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiFormBaseDescriptionBehavior = UiFormBase.UiFormBaseDescriptionBehavior;
var UiFormBaseBehavior = UiFormBase.UiFormBaseBehavior;
var ObjUtils = Core.ObjectUtils;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;

/**
 * FormWindowDescriptionBehavior - the description for an Oracle Form window.
 * @memberof Oracle
 * @ignore
 */
var FormWindowDescriptionBehavior = {
    /**
     * The window short title.
     * @param {string} [shortTitle] When provided, this method acts as a setter and sets the short title value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored short title value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    shortTitle: function (shortTitle) {
        return this._simplePropertyHandler("short title", shortTitle);
    }
};

/**
 * The description of an Oracle Form window.
 * @param {Object} [props] Initializes an Oracle FormWindow test object using the supplied property bag.
 * @returns {FormWindow} the description object that was initialized.
 * @class FormWindow
 * @extends Oracle.UiObjectBaseDescription
 * @mixes Oracle.ClassPathDescriptionBehavior
 * @mixes Oracle.EnabledDescriptionBehavior
 * @mixes Oracle.FormWindowDescriptionBehavior
 * @mixes Oracle.UiFormBaseDescriptionBehavior
 * @memberof Oracle
 */
function FormWindow(props) {
    var formWindow = new UiObjectBaseDescription("FormWindow");
    ObjUtils.extend(formWindow, ClassPathDescriptionBehavior);
    ObjUtils.extend(formWindow, EnabledDescriptionBehavior);
    ObjUtils.extend(formWindow, UiFormBaseDescriptionBehavior);
    ObjUtils.extend(formWindow, FormWindowDescriptionBehavior);
    formWindow._defineByPropertyBag(props);
    return formWindow;
}

/**
 * An Oracle Form window.
 * @constructor
 * @class FormWindowTO
 * @extends Oracle.UiObjectBaseTO
 * @mixes Oracle.FormWindowTOBehavior._properties
 * @mixes Oracle.ClassPathInfoProvider._properties
 * @mixes Oracle.EnabledInfoProvider._properties
 * @mixes Oracle.UiFormBaseBehavior._methods
 * @mixes Oracle.UiFormBaseBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof Oracle
 */
function FormWindowTO(session, description) {
    description = description || FormWindow();
    var formWindowTO = new UiObjectBaseTO("OracleFormWindow", session, description);
    formWindowTO._mergeBehavior(WrappedItemExecutorBehavior);
    formWindowTO._mergeBehavior(ClassPathInfoProvider);
    formWindowTO._mergeBehavior(EnabledInfoProvider);
    formWindowTO._mergeBehavior(UiFormBaseBehavior);
    formWindowTO._mergeBehavior(WaitUntilEnabledBehavior);
    formWindowTO._mergeBehavior(FormWindowTOBehavior);
    return formWindowTO;
}

/**
 * The behaviors of An Oracle Form window.
 * @memberof Oracle
 * @ignore
 */
var FormWindowTOBehavior = {
    /**
     * @ignore
     * @memberof Oracle.FormWindowTOBehavior
     */
    _properties: {
        /**
         * Get the window short title.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the window short title.
         */
        shortTitle: {
            wiredName: "short title"
        }
    }
};

module.exports.FormWindow = FormWindow;
module.exports.FormWindowTO = FormWindowTO;
module.exports.MenuItem = MenuItem;

