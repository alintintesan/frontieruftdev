// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */
var Core = require("leanft.sdk.core");
var UiObjectBase = require("./ui_object_base.js");
var HelperBehaviors = require("./helper_behaviors.js");
var ClassPathDescriptionBehavior = HelperBehaviors.ClassPathDescriptionBehavior;
var ClassPathInfoProvider = HelperBehaviors.ClassPathInfoProvider;
var EnabledDescriptionBehavior = HelperBehaviors.EnabledDescriptionBehavior;
var EnabledInfoProvider = HelperBehaviors.EnabledInfoProvider;
var ObjectInfoDescriptionBehavior = HelperBehaviors.ObjectInfoDescriptionBehavior;
var ObjectInfoProvider = HelperBehaviors.ObjectInfoProvider;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var ObjUtils = Core.ObjectUtils;
var Convert = Core.Convert;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

/**
 * CheckBoxDescriptionBehavior - the description for a check box Oracle field.
 * @memberof Oracle
 * @ignore
 */
var CheckBoxDescriptionBehavior = {
    /**
     * The text displayed on the object.
     * @param {string} [label] When provided, this method acts as a setter and sets the label value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored label value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    label: function (label) {
        return this._simplePropertyHandler("label", label);
    },
    /**
     * The caption of the object.
     * @param {string} [caption] When provided, this method acts as a setter and sets the caption value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored caption value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    caption: function (caption) {
        return this._simplePropertyHandler("prompt", caption);
    },
    /**
     * The state of the object -whether it is selected or cleared.
     * @param {boolean} [isSelected] When provided, this method acts as a setter and sets the isSelected value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isSelected value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isSelected: function (isSelected) {
        return this._propertyHandler("selected", isSelected, Convert.toBool);
    }
};

/**
 * The description of a check box Oracle field.
 * @param {Object} [props] Initializes an Oracle CheckBox test object using the supplied property bag.
 * @returns {CheckBox} the description object that was initialized.
 * @class CheckBox
 * @extends Oracle.UiObjectBaseDescription
 * @mixes Oracle.ClassPathDescriptionBehavior
 * @mixes Oracle.EnabledDescriptionBehavior
 * @mixes Oracle.ObjectInfoDescriptionBehavior
 * @mixes Oracle.CheckBoxDescriptionBehavior
 * @memberof Oracle
 */
function CheckBox(props) {
    var checkBox = new UiObjectBaseDescription("CheckBox");
    ObjUtils.extend(checkBox, EnabledDescriptionBehavior);
    ObjUtils.extend(checkBox, ClassPathDescriptionBehavior);
    ObjUtils.extend(checkBox, ObjectInfoDescriptionBehavior);
    ObjUtils.extend(checkBox, CheckBoxDescriptionBehavior);
    checkBox._defineByPropertyBag(props);
    return checkBox;
}

/**
 * A check box Oracle field.
 * @constructor
 * @class CheckBoxTO
 * @extends Oracle.UiObjectBaseTO
 * @mixes Oracle.ClassPathInfoProvider._properties
 * @mixes Oracle.EnabledInfoProvider._properties
 * @mixes Oracle.ObjectInfoProvider._properties
 * @mixes Oracle.CheckBoxTOBehavior._properties
 * @mixes Oracle.CheckBoxTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof Oracle
 */
function CheckBoxTO(session, description) {
    description = description || CheckBox();
    var checkBoxTO = new UiObjectBaseTO("OracleCheckbox", session, description);
    checkBoxTO._mergeBehavior(ClassPathInfoProvider);
    checkBoxTO._mergeBehavior(EnabledInfoProvider);
    checkBoxTO._mergeBehavior(ObjectInfoProvider);
    checkBoxTO._mergeBehavior(WaitUntilEnabledBehavior);
    checkBoxTO._mergeBehavior(CheckBoxTOBehavior);
    return checkBoxTO;
}

/**
 * The behaviors of a check box Oracle field.
 * @memberof Oracle
 * @ignore
 */
var CheckBoxTOBehavior = {
    /**
     * @ignore
     * @memberof Oracle.CheckBoxTOBehavior
     */
    _properties: {
        /**
         * The text displayed on the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the label.
         */
        label: {
        },
        /**
         * The caption of the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the caption.
         */
        caption: {
            wiredName: "prompt"
        },
        /**
         * The state of the object -whether it is selected or cleared.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the selected state.
         */
        isSelected: {
            wiredName: "selected"
        }
    },
    /**
     * @ignore
     * @memberof Oracle.CheckBoxTOBehavior
     */
    _methods: {
        /**
         * Clears (unchecks) the check box.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the clear operation ends.
         */
        clear: function () {
            return this._executeWithEvents(arguments, "Clear");
        },
        /**
         * Selects (checks) the check box.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         */
        select: function () {
            return this._executeWithEvents(arguments, "Select");
        },
        /**
         * Transfers focus to the check box.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the setFocus operation ends.
         */
        setFocus: function () {
            return this._executeWithEvents(arguments, "SetFocus");
        }
    }
};

module.exports.CheckBox = CheckBox;
module.exports.CheckBoxTO = CheckBoxTO;

