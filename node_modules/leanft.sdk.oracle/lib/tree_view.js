// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var ArrayUtils = Core.ArrayUtils;
var ExecuteItemsWithEventsBehavior = Core.ExecuteItemsWithEventsBehavior;
var UiObjectBase = require("./ui_object_base.js");
var HelperBehaviors = require("./helper_behaviors.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var ClassPathDescriptionBehavior = HelperBehaviors.ClassPathDescriptionBehavior;
var ClassPathInfoProvider = HelperBehaviors.ClassPathInfoProvider;
var EnabledDescriptionBehavior = HelperBehaviors.EnabledDescriptionBehavior;
var EnabledInfoProvider = HelperBehaviors.EnabledInfoProvider;
var ObjectInfoDescriptionBehavior = HelperBehaviors.ObjectInfoDescriptionBehavior;
var ObjectInfoProvider = HelperBehaviors.ObjectInfoProvider;
var TreeViewNode = require("./tree_view_node.js").TreeViewNode;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

/**
 * TreeViewDescriptionBehavior - the description for an Oracle tree.
 * @memberof Oracle
 * @ignore
 */
var TreeViewDescriptionBehavior = {
    /**
     * The value of the selected item.
     * @param {string} [selectedItem] When provided, this method acts as a setter and sets the selectedItem value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedItem value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedItem: function (selectedItem) {
        return this._propertyHandler("selected item", selectedItem, Convert.toString);
    },
    /**
     * The caption of the object.
     * @param {string} [caption] When provided, this method acts as a setter and sets the caption value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored caption value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    caption: function (caption) {
        return this._propertyHandler("prompt", caption, Convert.toString);
    }
};


/**
 * The description of an Oracle tree.
 * @param {Object} [props] Initializes an Oracle tree test object using the supplied property bag.
 * @returns {TreeView} the description object that was initialized.
 * @class TreeView
 * @extends Oracle.UiObjectBaseDescription
 * @mixes Oracle.ClassPathDescriptionBehavior
 * @mixes Oracle.EnabledDescriptionBehavior
 * @mixes Oracle.ObjectInfoDescriptionBehavior
 * @memberof Oracle
 */
function TreeView(props) {
    var treeViewDesc = new UiObjectBaseDescription("TreeView");
    ObjUtils.extend(treeViewDesc, EnabledDescriptionBehavior);
    ObjUtils.extend(treeViewDesc, ClassPathDescriptionBehavior);
    ObjUtils.extend(treeViewDesc, ObjectInfoDescriptionBehavior);
    ObjUtils.extend(treeViewDesc, TreeViewDescriptionBehavior);
    treeViewDesc._defineByPropertyBag(props);
    return treeViewDesc;
}

/**
 * The behaviors of Tree object
 * @memberof Oracle
 * @ignore
 */
var TreeViewTOBehavior = {
    /**
     * @ignore
     * @memberof Oracle.TreeViewTOBehavior
     */
    _properties: {
        /**
         * The caption of the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the caption.
         */
        caption: {
            wiredName: "prompt"
        },
        /**
         * The value of the selected item.
         * @function
         * @returns {Promise<TreeViewNode>} a promise that is fulfilled with the selectedItem.
         */
        selectedItem: {
            wiredName: "selected item",
            getter: function () {
                return this._getROProperty("selected item", arguments).then((function (item) {
                    return this._createItem(item);
                }).bind(this));
            }
        },
    },

    /**
     * @ignore
     * @memberof Oracle.TreeViewTOBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Returns the path constructed from the path parts.
         * @function
         * @param {...(string)} nodePathParts The node path parts can be: logical name(string), full path(separated strings by ->).
         * @returns {string} the path of the specified node item.
         */
        buildNodePath: function (nodePathParts) {
            if (nodePathParts == null)
                throw new Error("The parameter nodePathParts cannot be null.");
            nodePathParts = ArrayUtils.toArray(arguments);
            var items = nodePathParts.map((function (item) {
                if (typeof item === "string") {
                    return item;
                }
                else {
                    throw new Error("Parameter type is not a string");
                }
            }).bind(this));

            return items.join("->");
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Activates the specified item in the tree.
         * @function
         * @param {TreeViewNode|number|string} item The item to be activated.
         * The input can be the tree item, the 0-based index of the item or the name/text of the item
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         */
        activate: function (item) {
            if (item == null)
                throw new Error("ArgumentException: item is required.");
            return this._executeWithEvents(arguments, "Activate", this._nodeTransform(item));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects the specified item in the tree.
         * @function
         * @param {TreeViewNode | number | string} item The item to be selected.
         * The input can be the tree item, the 0-based index of the item or the name/text of the item
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        select: function (item) {
            if (item == null)
                throw new Error("ArgumentException: items is required.");
            return this._executeWithEvents(arguments, "Select", this._nodeTransform(item));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Returns the specified node.
         * Tip: Use the {@link Oracle.TreeViewTO#buildNodePath} method to build the node path strings to be used as the nodePath argument for this method.
         * @function
         * @param {string} nodePath The full path of the node to return within the tree.
         * @returns {Oracle.TreeViewNode} The specified node
         * @memberof Oracle.TreeViewTO#
         */
        getNode: function (nodePath) {
            if (nodePath == null)
                throw new Error("ArgumentException: nodePath is required.");
            return this._createItem(nodePath);
        }
    },

    _helpers: {
        /**
         * Collapses the specified item in the tree.
         * @param {string} identifier The identifier of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the _nodeCollapse operation ends.
         * @ignore
         */
        _nodeCollapse: function (identifier) {
            return this._executeNotWrapped(arguments, "Collapse", identifier);
        },

        /**
         * Expands the specified item in the tree.
         * @param {string} identifier The identifier of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the _nodeExpand operation ends.
         * @ignore
         */
        _nodeExpand: function (identifier) {
            return this._executeNotWrapped(arguments, "Expand", identifier);
        },

        _nodeTransform: function (nodeOrPath) {
            if (typeof nodeOrPath === 'object')
                nodeOrPath = nodeOrPath._getIdentifier();

            if (typeof nodeOrPath === 'number')
                return nodeOrPath + 1;

            if (typeof nodeOrPath === 'string')
                return nodeOrPath;

            throw new Error("ArgumentException: unsupported identifier type");
        },

        /**
         * Create an TreeViewNode from the identifier and textRepresentation
         * @param {number|string} identifier The identifier of the tree node.
         * @returns {Oracle.TreeViewNode} The TreeViewNode object
         * @ignore
         */
        _createItem: function (identifier) {
            return new TreeViewNode(this, identifier);
        }
    }
};

/**
 * A Oracle Tree test object
 * @constructor
 * @class TreeViewTO
 * @extends Oracle.UiObjectBaseTO
 * @mixes ExecuteItemsWithEventsBehavior
 * @mixes Oracle.ClassPathInfoProvider._properties
 * @mixes Oracle.EnabledInfoProvider._properties
 * @mixes Oracle.ObjectInfoProvider._properties
 * @mixes Oracle.TreeViewTOBehavior._properties
 * @mixes Oracle.TreeViewTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof Oracle
 */
function TreeViewTO(session, description) {
    description = description || TreeView();
    var treeViewTO = new UiObjectBaseTO("OracleTree", session, description);
    treeViewTO._mergeBehavior(ExecuteItemsWithEventsBehavior);
    treeViewTO._mergeBehavior(ClassPathInfoProvider);
    treeViewTO._mergeBehavior(EnabledInfoProvider);
    treeViewTO._mergeBehavior(ObjectInfoProvider);
    treeViewTO._mergeBehavior(WaitUntilEnabledBehavior);
    treeViewTO._mergeBehavior(TreeViewTOBehavior);
    return treeViewTO;
}

module.exports.TreeView = TreeView;
module.exports.TreeViewTO = TreeViewTO;
