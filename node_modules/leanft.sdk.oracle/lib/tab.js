// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */
var Core = require("leanft.sdk.core");
var UiObjectBase = require("./ui_object_base.js");
var HelperBehaviors = require("./helper_behaviors.js");
var ClassPathDescriptionBehavior = HelperBehaviors.ClassPathDescriptionBehavior;
var ClassPathInfoProvider = HelperBehaviors.ClassPathInfoProvider;
var EnabledDescriptionBehavior = HelperBehaviors.EnabledDescriptionBehavior;
var EnabledInfoProvider = HelperBehaviors.EnabledInfoProvider;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var ObjUtils = Core.ObjectUtils;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

/**
 * TabDescriptionBehavior - the description for an Oracle tabbed region.
 * @memberof Oracle
 * @ignore
 */
var TabDescriptionBehavior = {
    /**
     * The text displayed on the object.
     * @param {string} [label] When provided, this method acts as a setter and sets the label value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored label value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    label: function (label) {
        return this._simplePropertyHandler("label", label);
    }
};

/**
 * The description of an Oracle tabbed region.
 * @param {Object} [props] Initializes an Oracle Tab test object using the supplied property bag.
 * @returns {Tab} the description object that was initialized.
 * @class Tab
 * @extends Oracle.UiObjectBaseDescription
 * @mixes Oracle.ClassPathDescriptionBehavior
 * @mixes Oracle.EnabledDescriptionBehavior
 * @mixes Oracle.TabDescriptionBehavior
 * @memberof Oracle
 */
function Tab(props) {
    var tabDesc = new UiObjectBaseDescription("Tab");
    ObjUtils.extend(tabDesc, EnabledDescriptionBehavior);
    ObjUtils.extend(tabDesc, ClassPathDescriptionBehavior);
    ObjUtils.extend(tabDesc, TabDescriptionBehavior);
    tabDesc._defineByPropertyBag(props);
    return tabDesc;
}

/**
 * An Oracle tabbed region.
 * @constructor
 * @class TabTO
 * @extends Oracle.UiObjectBaseTO
 * @mixes Oracle.ClassPathInfoProvider._properties
 * @mixes Oracle.EnabledInfoProvider._properties
 * @mixes Oracle.TabTOBehavior._properties
 * @mixes Oracle.TabTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof Oracle
 */
function TabTO(session, description) {
    description = description || Tab();
    var tabTO = new UiObjectBaseTO("OracleTabbedRegion", session, description);
    tabTO._mergeBehavior(ClassPathInfoProvider);
    tabTO._mergeBehavior(EnabledInfoProvider);
    tabTO._mergeBehavior(WaitUntilEnabledBehavior);
    tabTO._mergeBehavior(TabTOBehavior);
    return tabTO;
}

/**
 * The behaviors of an Oracle tabbed region.
 * @memberof Oracle
 * @ignore
 */
var TabTOBehavior = {
    /**
     * @ignore
     * @memberof Oracle.TabTOBehavior
     */
    _properties: {
        /**
         * The text displayed on the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the label.
         */
        label: {
        }
    },
    /**
     * @ignore
     * @memberof Oracle.TabTOBehavior
     */
    _methods: {
        /**
         * Selects the tabbed region.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         */
        select: function () {
            return this._executeWithEvents(arguments, "Select");
        }
    }
};

module.exports.Tab = Tab;
module.exports.TabTO = TabTO;

