// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var Core = require("leanft.sdk.core");
var MergeBehavior = Core.MergeBehavior;
var Utils = Core.ObjectUtils;

/**
 * A menu item in an Oracle menu.
 * @class MenuItem
 * @mixes Oracle.MenuItemBehavior._properties
 * @mixes Oracle.MenuItemBehavior._methods
 * @memberof Oracle
 */
function MenuItem(ownerMenu, itemPath) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(MenuItemBehavior);
    this._ownerMenu = ownerMenu;
    this._path = itemPath;
    this._executeWithEventsOnItemOnError = this._ownerMenu._executeWithEventsOnItemOnError.bind(this._ownerMenu, this);
}

MenuItem.prototype = {
    _ownerMenu: null,
    _path: null,
    _executeWithEventsOnItemOnError: null
};

/**
 * The methods of MenuItem object.
 * @memberof Oracle
 * @ignore
 */
var MenuItemBehavior = {
    /**
     * @memberof Oracle.MenuItemBehavior
     * @ignore
     */
    _properties: {
        /**
         * The path of this menu item.
         * @function
         * @returns {string} The path of this menu item.
         * @ignore
         */
        path: function () {
            return this._path;
        },

        /**
         * Indicates whether this menu item is currently checked.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether this menu item has a check mark displayed next to it.
         */
        isChecked: function () {
            return this._executeWithEventsOnItemOnError(this._ownerMenu._isItemChecked, this._path);
        },

        /**
         * Indicates whether this menu item is currently enabled.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether this menu item is currently enabled.
         */
        isEnabled: function () {
            return this._executeWithEventsOnItemOnError(this._ownerMenu._isItemEnabled, this._path);
        },

        /**
         * Indicates whether this menu item is currently disabled.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether this menu item is disabled.
         */
        isDisabled: function () {
            return this._executeWithEventsOnItemOnError(this._ownerMenu._isItemDisabled, this._path);
        },

        /**
         * Indicates whether this menu item is currently visible.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether this menu item is visible.
         */
        isVisible: function () {
            return this._executeWithEventsOnItemOnError(this._ownerMenu._isItemVisible, this._path);
        },

        /**
         * Indicates whether this menu item is currently showing.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether this menu item is showing.
         */
        isShowing: function () {
            return this._executeWithEventsOnItemOnError(this._ownerMenu._isItemShowing, this._path);
        },

        /**
         * Returns a list of all submenus for the specified menu item.
         * @function
         * @returns {Promise<MenuItem[]>} a promise that is fulfilled with the list of all submenus items.
         */
        getMenuSubItems: function () {
            return this._executeWithEventsOnItemOnError(this._ownerMenu._getMenuSubItems, this._path);
        }
    }
};

module.exports.MenuItem = MenuItem;