// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var Core = require("leanft.sdk.core");
var TestObjectBase = Core.TestObjectBase;
var DescriptionBase = Core.DescriptionBase;
var LocationInfoProvider = Core.LocationInfoProvider;
var LocationDescriptionBehavior = Core.LocationDescriptionBehavior;
var ObjUtils = Core.ObjectUtils;
var ArrayUtils = Core.ArrayUtils;
var SendKeyBehaviorOracle = require("./oracle_sendkey_behavior.js").SendKeyBehaviorOracle;
var ClickBehavior = Core.ClickBehavior;

/**
 * Oracle namespace
 * @namespace Oracle
 */

/**
 * UiObjectBaseDescription - the base description for all Oracle elements
 * @class UiObjectBaseDescription
 * @extends DescriptionBase
 * @mixes LocationDescriptionBehavior
 * @memberof Oracle
 * @ignore
 */
function UiObjectBaseDescription(leanFTType) {
    this._init({
        technology: "Oracle",
        leanftType: leanFTType
    });

    ObjUtils.extend(this, LocationDescriptionBehavior);

    //init grouped properties
    this.location({});
    this.absoluteLocation({});
    this.size({});
}

/**
 * @ignore
 */
ObjUtils.inherit(UiObjectBaseDescription, DescriptionBase, {
    /**
     * The general object type.
     * @param {string} [objectType] When provided, this method acts as a setter and sets the objectType value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored objectType value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Oracle.UiObjectBaseDescription#
     */
    objectType : function (objectType) {
        return this._simplePropertyHandler("class description", objectType);
    }
});

/**
 * @class UiObjectBaseTO
 * @param nativeClass
 * @param session
 * @param description
 * @constructor
 * @extends TestObjectBase
 * @mixes LocationInfoProvider._properties
 * @mixes Oracle.SendKeyBehaviorOracle._methods
 * @mixes Oracle.UiObjectBaseTOBehavior._properties
 * @abstract
 * @memberof Oracle
 * @ignore
 */
function UiObjectBaseTO(nativeClass, session, description) {
    this._init(nativeClass, session, description);

    this._mergeBehavior(LocationInfoProvider);
    this._mergeBehavior(SendKeyBehaviorOracle);
    this._mergeBehavior(ClickBehavior);
    this._mergeBehavior(UiObjectBaseTOBehavior);
}

/**
 * @ignore
 */
ObjUtils.inherit(UiObjectBaseTO, TestObjectBase, {
});

/**
 * @memberof Oracle
 * @ignore
 */
var UiObjectBaseTOBehavior = {
    /**
     * @ignore
     * @memberof Oracle.UiObjectBaseTOBehavior
     */
    _properties: {
        /**
         * Returns the general object type.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's objectType.
         * @memberof Oracle.UiObjectBaseTO#
         */
        objectType: {
            wiredName: "class description"
        }
    },

    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Opens the context menu and selects the specified menu option.
         * @function
         * @param {...string} menuPathParts The parts that make up the path of the context menu item to select. Each part can be a name of a menu item or a full path of items separated by "->".
         * @returns {Promise<void>} a promise that is fulfilled when the operation of selecting from the context menu ends.
		 * @memberof Oracle.UiObjectBaseTO#
         */
        selectFromPopupMenu: function (menuPathParts){
			if (menuPathParts == null)
                throw new Error("The parameter menuPathParts cannot be null.");				
			else {
				menuPathParts = ArrayUtils.toArray(arguments);
				var items = menuPathParts.map((function (item) {
					if (typeof item === "string") {
						return item;
					}
					else {
						throw new Error("Parameter type is not a string ");
					}
				}).bind(this));

				return this._executeWithEvents(arguments, "SelectPopupMenu", items.join("->"));
			}
        }
    }
};

module.exports.UiObjectBaseDescription = UiObjectBaseDescription;
module.exports.UiObjectBaseTO = UiObjectBaseTO;