// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */
var Core = require("leanft.sdk.core");
var UiObjectBase = require("./ui_object_base.js");
var HelperBehaviors = require("./helper_behaviors.js");
var ClassPathDescriptionBehavior = HelperBehaviors.ClassPathDescriptionBehavior;
var ClassPathInfoProvider = HelperBehaviors.ClassPathInfoProvider;
var EnabledDescriptionBehavior = HelperBehaviors.EnabledDescriptionBehavior;
var EnabledInfoProvider = HelperBehaviors.EnabledInfoProvider;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var ObjUtils = Core.ObjectUtils;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

/**
 * StatusBarDescriptionBehavior - the description for the status line and message line at the bottom of an ApplicationSession window.
 * @memberof Oracle
 * @ignore
 */
var StatusBarDescriptionBehavior = {
    /**
     * The text of the displayed message.
     * @param {string} [message] When provided, this method acts as a setter and sets the message value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored message value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    message: function (message) {
        return this._simplePropertyHandler("message", message);
    },
    /**
     * The error code of the displayed message.
     * @param {string} [errorCode] When provided, this method acts as a setter and sets the errorCode value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored errorCode value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    errorCode: function (errorCode) {
        return this._simplePropertyHandler("error code", errorCode);
    }
};

/**
 * The description of the status line and message line at the bottom of an ApplicationSession window.
 * @param {Object} [props] Initializes an Oracle StatusBar test object using the supplied property bag.
 * @returns {StatusBar} the description object that was initialized.
 * @class StatusBar
 * @extends Oracle.UiObjectBaseDescription
 * @mixes Oracle.ClassPathDescriptionBehavior
 * @mixes Oracle.EnabledDescriptionBehavior
 * @mixes Oracle.StatusBarDescriptionBehavior
 * @memberof Oracle
 */
function StatusBar(props) {
    var statusBar = new UiObjectBaseDescription("StatusBar");
    ObjUtils.extend(statusBar, EnabledDescriptionBehavior);
    ObjUtils.extend(statusBar, ClassPathDescriptionBehavior);
    ObjUtils.extend(statusBar, StatusBarDescriptionBehavior);
    statusBar._defineByPropertyBag(props);
    return statusBar;
}

/**
 * The status line and message line at the bottom of an ApplicationSession window.
 * @constructor
 * @class StatusBarTO
 * @extends Oracle.UiObjectBaseTO
 * @mixes Oracle.ClassPathInfoProvider._properties
 * @mixes Oracle.EnabledInfoProvider._properties
 * @mixes Oracle.StatusBarTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof Oracle
 */
function StatusBarTO(session, description) {
    description = description || StatusBar();
    var statusBarTO = new UiObjectBaseTO("OracleStatusLine", session, description);
    statusBarTO._mergeBehavior(ClassPathInfoProvider);
    statusBarTO._mergeBehavior(EnabledInfoProvider);
    statusBarTO._mergeBehavior(WaitUntilEnabledBehavior);
    statusBarTO._mergeBehavior(StatusBarTOBehavior);
    return statusBarTO;
}

/**
 * The behaviors of the status line and message line at the bottom of an ApplicationSession window.
 * @memberof Oracle
 * @ignore
 */
var StatusBarTOBehavior = {
    /**
     * @ignore
     * @memberof Oracle.StatusBarTOBehavior
     */
    _properties: {
        /**
         * The text of the displayed message.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the displayed message.
         */
        message: {
        },
        /**
         * The error code of the displayed message.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the displayed message.
         */
        errorCode: {
            wiredName: "error code"
        }
    }
};

module.exports.StatusBar = StatusBar;
module.exports.StatusBarTO = StatusBarTO;

