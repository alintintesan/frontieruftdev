// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */
var Core = require("leanft.sdk.core");
var UiObjectBase = require("./ui_object_base.js");
var HelperBehaviors = require("./helper_behaviors.js");
var ClassPathDescriptionBehavior = HelperBehaviors.ClassPathDescriptionBehavior;
var ClassPathInfoProvider = HelperBehaviors.ClassPathInfoProvider;
var EnabledDescriptionBehavior = HelperBehaviors.EnabledDescriptionBehavior;
var EnabledInfoProvider = HelperBehaviors.EnabledInfoProvider;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

/**
 * NotificationType.
 * @typedef {Oracle.NotificationType} NotificationType
 * @property {string} error error type.
 * @property {string} info info type.
 * @property {string} decision question or decision type
 * @property {string} warning warning type.
 * @memberof Oracle
 */
var NotificationType = {
    /**
     * error type.
     * @type {string}
     */
    error: "error",
    /**
     * info type.
     * @type {string}
     */
    info: "info",
    /**
     * question or decision type.
     * @type {string}
     */
    decision: "decision",
    /**
     * warning type.
     * @type {string}
     */
    warning: "warning"
};

var NotificationTypeConverter = {
    /**
     * @ignore
     * @memberof Oracle
     */
    _notificationTypeToNativeString: {
        error: "Error",
        info: "Info",
        decision: "Decision",
        warning: "Warning"
    },
    /**
     * @ignore
     * @memberof Oracle
     */
    _nativeStringToNotificationType: {
        "Error": "error",
        "Info": "info",
        "Decision": "decision",
        "Warning": "warning"
    },
    /*jshint eqnull:true */
    /**
     * @private
     * @ignore
     * @memberof Oracle
     */
    _notificationTypeToNative: function (value) {
        var nativeString = NotificationTypeConverter._notificationTypeToNativeString[value.toLowerCase()];
        if (nativeString == null) {
            throw new Error("You must supply a valid NotificationType");
        }

        return nativeString;
    },
    /**
     * @private
     * @ignore
     * @memberof Oracle
     */
    _nativeToNotificationType: function (value) {
        var nativeString = NotificationTypeConverter._nativeStringToNotificationType[value];
        if (nativeString == null) {
            throw new Error("Enum NotificationType name not found");
        }

        return nativeString;
    }
};

/**
 * NotificationDescriptionBehavior - the description for an Oracle error or message window.
 * @memberof Oracle
 * @ignore
 */
var NotificationDescriptionBehavior = {
    /**
     * The text of the notification.
     * @param {string} [message] When provided, this method acts as a setter and sets the message value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored message value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    message: function (message) {
        return this._simplePropertyHandler("message", message);
    },
    /**
     * The window title.
     * @param {string} [title] When provided, this method acts as a setter and sets the title value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored title value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    title: function (title) {
        return this._simplePropertyHandler("title", title);
    },
    /**
     * Returns type of notification.
     * @param {Oracle.NotificationType} [type] When provided, this method acts as a setter and sets the type value.
     * @returns {Oracle.NotificationType | Description} If no parameter is provided, the method acts as a getter and returns the current stored type value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    type: function (type) {
        return this._propertyHandler("type", type, NotificationTypeConverter._notificationTypeToNative, NotificationTypeConverter._nativeToNotificationType);
    }
};

/**
 * The description of an Oracle error or message window.
 * @param {Object} [props] Initializes an Oracle Notification test object using the supplied property bag.
 * @returns {Notification} the description object that was initialized.
 * @class Notification
 * @extends Oracle.UiObjectBaseDescription
 * @mixes Oracle.ClassPathDescriptionBehavior
 * @mixes Oracle.EnabledDescriptionBehavior
 * @mixes Oracle.NotificationDescriptionBehavior
 * @memberof Oracle
 */
function Notification(props) {
    var notification = new UiObjectBaseDescription("Notification");
    ObjUtils.extend(notification, EnabledDescriptionBehavior);
    ObjUtils.extend(notification, ClassPathDescriptionBehavior);
    ObjUtils.extend(notification, NotificationDescriptionBehavior);
    notification._defineByPropertyBag(props);
    return notification;
}

/**
 * An Oracle error or message window.
 * @constructor
 * @class NotificationTO
 * @extends Oracle.UiObjectBaseTO
 * @mixes Oracle.ClassPathInfoProvider._properties
 * @mixes Oracle.EnabledInfoProvider._properties
 * @mixes Oracle.NotificationTOBehavior._properties
 * @mixes Oracle.NotificationTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof Oracle
 */
function NotificationTO(session, description) {
    description = description || Notification();
    var checkBoxTO = new UiObjectBaseTO("OracleNotification", session, description);
    checkBoxTO._mergeBehavior(ClassPathInfoProvider);
    checkBoxTO._mergeBehavior(EnabledInfoProvider);
    checkBoxTO._mergeBehavior(WaitUntilEnabledBehavior);
    checkBoxTO._mergeBehavior(NotificationTOBehavior);
    return checkBoxTO;
}

/**
 * The behaviors of an Oracle error or message window.
 * @memberof Oracle
 * @ignore
 */
var NotificationTOBehavior = {
    /**
     * @ignore
     * @memberof Oracle.NotificationTOBehavior
     */
    _properties: {
        /**
         * The text of the notification.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the label.
         */
        message: {
        },
        /**
         * The window title.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the title.
         */
        title: {
        },
        /**
         * The type of notification.
         * @function
         * @returns {Promise<Oracle.NotificationType>} a promise that is fulfilled with the type.
         */
        type: {
            type: 'enum',
            enumType: NotificationType,
            enumName: 'NotificationType',
            wiredName: 'type',
            getter: function () {
                return this._getROProperty("type", arguments).then(NotificationTypeConverter._nativeToNotificationType);
            }
        }
    },
    /**
     * @ignore
     * @memberof Oracle.NotificationTOBehavior
     */
    _methods: {
        /**
         * Clicks the Yes or OK button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the approve operation ends.
         */
        approve: function () {
            return this._executeWithEvents(arguments, "Approve");
        },
        /**
         * Clicks the Cancel button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the cancel operation ends.
         */
        cancel: function () {
            return this._executeWithEvents(arguments, "Cancel");
        },
        /**
         * Clicks the default button in the window.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the selectDefaultButton operation ends.
         */
        selectDefaultButton: function () {
            return this._executeWithEvents(arguments, "ChooseDefault");
        },
        /**
         * Clicks the No button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the decline operation ends.
         */
        decline: function () {
            return this._executeWithEvents(arguments, "Decline");
        },
        /**
         * Clicks the specified button.
         * @function
         * @param {string} name The name of the button.
         * @returns {Promise<void>} a promise that is fulfilled when the clear operation ends.
         */
        clickButton: function (name) {
            return this._executeWithEvents(arguments, "Choose", Convert.toString(name));
        }
    }
};

module.exports.Notification = Notification;
module.exports.NotificationTO = NotificationTO;
module.exports.NotificationType = NotificationType;

