// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */
var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var ArrayUtils = Core.ArrayUtils;
var StringUtils = Core.StringUtils;
var MenuItem = require("./menu_item.js").MenuItem;

/**
 * UiFormBaseDescriptionBehavior - the description for a UiFormBase object
 * @memberof Oracle
 * @ignore
 */
var UiFormBaseDescriptionBehavior = {
    /**
     * The window title.
     * @param {string} [title] When provided, this method acts as a setter and sets the title value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored title value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Oracle.UiFormBaseDescriptionBehavior#
     */
    title: function (title) {
        return this._simplePropertyHandler("title", title);
    }
};

/**
 * @ignore
 */
var UiFormBaseBehavior = {
    /**
     * @ignore
     * @memberof UiFormBaseBehavior
     */
    _properties: {
        /**
         * Gets the window title.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's title.
         */
        title: {}
    },
    /**
     * @ignore
     * @memberof Oracle.UiFormBaseBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Activates the form.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         * @memberof Oracle.UiFormBaseBehavior#
         */
        activate: function () {
            return this._executeWithEvents(arguments, "Activate");
        },
        /*jshint unused:true, eqnull:true */
        /**
         * Closes the form using the Exit softkey
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the closeForm operation ends.
         * @memberof Oracle.UiFormBaseBehavior#
         */
        closeForm: function () {
            return this._executeWithEvents(arguments, "CloseForm");
        },
        /*jshint unused:true, eqnull:true */
        /**
         * Closes the form using the X button in the form window title bar.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the closeWindow operation ends.
         * @memberof Oracle.UiFormBaseBehavior#
         */
        closeWindow: function () {
            return this._executeWithEvents(arguments, "CloseWindow");
        },
        /*jshint unused:true, eqnull:true */
        /**
         * Presses a toolbar button.
         * @function
         * @param {string} buttonName The button name.
         * @returns {Promise<void>} a promise that is fulfilled when the pressToolbarButton operation ends.
         * @memberof Oracle.UiFormBaseBehavior#
         */
        pressToolbarButton: function (buttonName) {
            return this._executeWithEvents(arguments, "PressToolbarButton", Convert.toString(buttonName));
        },
        /*jshint unused:true, eqnull:true */
        /**
         * Performs a Save operation using the Commit softkey.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the save operation ends.
         * @memberof Oracle.UiFormBaseBehavior#
         */
        save: function () {
            return this._executeWithEvents(arguments, "Save");
        },
        /*jshint eqnull:true */
        /**
         * Returns the menu item with the specified path.
         * @function
         * @param {string} path The full path of the menu item to select from the menu list.
         * The path is composed of the menu item names separated by a -> set of chars.
         * @returns {MenuItem} the MenuItem object. See {@link Oracle.MenuItem}
         */
        getItem: function (path) {
            if (path == null)
                throw new Error("The parameter path cannot be null.");
            return new MenuItem(this, path);
        },
        /**
         * Returns the path constructed from the path parts.
         * @function
         * @param {...(string)} menuPathParts The menu path parts can be: logical name(string), full path(separated strings by ->).
         * @returns {string} the path of the specified menu item.
         */
        buildMenuPath: function (menuPathParts) {
            if (menuPathParts == null)
                throw new Error("The parameter menuPathParts cannot be null.");
            menuPathParts = ArrayUtils.toArray(arguments);
            var items = menuPathParts.map((function (item) {
                if (typeof item === "string") {
                    return item;
                }
                else {
                    throw new Error("Parameter type is not a string");
                }
            }).bind(this));

            return items.join("->");
        },
        /*jshint eqnull:true */
        /**
         * Selects a menu option.
         * @function
         * @param {MenuItem|string} menuItem The item to be selected. It can be the MenuItem, or the menu path.
         * Use the getItem method to get the menu item argument for this method.
         * Use the buildMenuPath method to build the item path string that can then be used as the menu path argument for this method.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        selectMenuItem: function (menuItem) {
            if (menuItem == null)
                throw new Error("The menuItem cannot be null.");

            var value = menuItem;
            if (typeof menuItem === 'object') {
                if (menuItem._path == null) {
                    throw new Error("The path of the menu item cannot be null.");
                }
                value = menuItem._path;
            }

            return this._executeWithEvents(arguments, "SelectMenu", value);
        },

        /**
         * Indicates whether the menu item is checked.
         * @function
         * @param {string} path The path of the menu item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether the menu item is checked or not.
         * @ignore
         */
        _isItemChecked: function (path) {
            return this._executeNotWrapped(arguments, "GetMenuItemProperty", Convert.toString(path), "checked");
        },

        /**
         * Indicates whether the menu item is enabled.
         * @function
         * @param {string} path The path of the menu item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether the menu item is enabled or not.
         * @ignore
         */
        _isItemEnabled: function (path) {
            return this._executeNotWrapped(arguments, "GetMenuItemProperty", Convert.toString(path), "enabled");
        },

        /**
         * Indicates whether this menu item is currently disabled.
         * @function
         * @param {string} path The path of the menu item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether the menu item is disabled or not.
         * @ignore
         */
        _isItemDisabled: function (path) {
            return this._executeNotWrapped(arguments, "GetMenuItemProperty", Convert.toString(path), "disabled");
        },

        /**
         * Indicates whether this menu item is currently visible.
         * @function
         * @param {string} path The path of the menu item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether the menu item is visible or not.
         * @ignore
         */
        _isItemVisible: function (path) {
            return this._executeNotWrapped(arguments, "GetMenuItemProperty", Convert.toString(path), "visible");
        },

        /**
         * Indicates whether this menu item is currently showing.
         * @function
         * @param {string} path The path of the menu item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether the menu item is showing or not.
         * @ignore
         */
        _isItemShowing: function (path) {
            return this._executeNotWrapped(arguments, "GetMenuItemProperty", Convert.toString(path), "showing");
        },

        /**
         * Gets the number of sub-menus of the menu item.
         * @function
         * @param {string} path The path of the menu item.
         * @returns {Promise<MenuItem[]>} a promise that is fulfilled with the list of all submenus items.
         * @ignore
         */
        _getMenuSubItems: function (path) {
            return this._executeWithEvents(arguments, "GetMenuSubItems", path).then((function (result) {
                if (StringUtils.isNullOrEmpty(result))
                    return [];
                var listOfItems = result.split("\n");
                return listOfItems.map(function (path) {
                    return new MenuItem(this, path);
                }, this);
            }).bind(this));
        }
    }
};



module.exports.UiFormBaseDescriptionBehavior = UiFormBaseDescriptionBehavior;
module.exports.UiFormBaseBehavior = UiFormBaseBehavior;