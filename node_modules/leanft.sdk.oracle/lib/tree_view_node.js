// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * A TreeViewNode object
 * @class TreeViewNode
 * @mixes Oracle.TreeViewNodeBehavior._properties
 * @mixes Oracle.TreeViewNodeBehavior._methods
 * @memberof Oracle
 */
function TreeViewNode(ownerTreeView, identifier) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(TreeViewNodeBehavior);
    this._ownerTreeView = ownerTreeView;
    this._identifier = identifier;
    this._executeWithEventsOnItem = this._ownerTreeView._executeWithEventsOnItem.bind(this._ownerTreeView, this);
    this._executeWithEventsOnItemOnError = this._ownerTreeView._executeWithEventsOnItemOnError.bind(this._ownerTreeView, this);
}

TreeViewNode.prototype = {
    _ownerTreeView: null,
    _identifier: null,
    _executeWithEventsOnItem: null,
    _executeWithEventsOnItemOnError: null
};

/**
 * The methods of TreeViewNode object
 * @memberof Oracle
 * @ignore
 */
var TreeViewNodeBehavior = {
    /**
     * @memberof Oracle.TreeViewNodeBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the path to the node in the tree.
         * @function
         * @returns {string} the path to the node in the tree
         * @memberof Oracle.TreeViewNode#
         */
        path: function () {
            return this._getIdentifier();
        }
    },

    /**
     * @memberof Oracle.TreeViewNodeBehavior
     * @ignore
     */
    _methods: {
        /**
         * Collapses the specified item in the tree.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the collapse operation ends.
         * @memberof Oracle.TreeViewNode#
         */
        collapse: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._nodeCollapse, this._identifier);
        },

        /**
         * Expands the specified item in the tree.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the expand operation ends.
         * @memberof Oracle.TreeViewNode#
         */
        expand: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._nodeExpand, this._identifier);
        }
    },

    _helpers: {
        /**
         * Get the identifier of the node.
         * @returns {string} the identifier of the node.
         * @ignore
         */
        _getIdentifier: function () {
            return this._identifier;
        },
        /**
         * Returns the text representation of the item.
         * @returns {string} the text representation of the item.
         * @ignore
         */
        _getTextRepresentation: function () {
            return this._identifier;
        }
    }
};

module.exports.TreeViewNode = TreeViewNode;
