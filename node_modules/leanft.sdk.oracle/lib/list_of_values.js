// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */
var Core = require("leanft.sdk.core");
var UiObjectBase = require("./ui_object_base.js");
var HelperBehaviors = require("./helper_behaviors.js");
var ClassPathDescriptionBehavior = HelperBehaviors.ClassPathDescriptionBehavior;
var ClassPathInfoProvider = HelperBehaviors.ClassPathInfoProvider;
var EnabledDescriptionBehavior = HelperBehaviors.EnabledDescriptionBehavior;
var EnabledInfoProvider = HelperBehaviors.EnabledInfoProvider;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var StringUtils = Core.StringUtils;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

/**
 * ListOfValuesDescriptionBehavior - the description for an Oracle window containing a list of values for selection.
 * @memberof Oracle
 * @ignore
 */
var ListOfValuesDescriptionBehavior = {
    /**
     * The window title.
     * @param {string} [title] When provided, this method acts as a setter and sets the title value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored title value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    title: function (title) {
        return this._simplePropertyHandler("title", title);
    },
    /**
     * Content of the object window.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the items value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored items value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    items: function (items) {
        return this._propertyHandler("list content", items, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    },

    /**
     * Number of available choices (taking into account the active filter).
     * @param {number} [choicesNumber] When provided, this method acts as a setter and sets the choicesNumber value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored choicesNumber value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    choicesNumber: function (choicesNumber) {
        return this._propertyHandler("choices number", choicesNumber, Convert.toNumber);
    }
};

/**
 * The description of an Oracle window containing a list of values for selection.
 * @param {Object} [props] Initializes an Oracle ListOfValues test object using the supplied property bag.
 * @returns {ListOfValues} the description object that was initialized.
 * @class ListOfValues
 * @extends Oracle.UiObjectBaseDescription
 * @mixes Oracle.ClassPathDescriptionBehavior
 * @mixes Oracle.EnabledDescriptionBehavior
 * @mixes Oracle.ListOfValuesDescriptionBehavior
 * @memberof Oracle
 */
function ListOfValues(props) {
    var listOfValues = new UiObjectBaseDescription("ListOfValues");
    ObjUtils.extend(listOfValues, EnabledDescriptionBehavior);
    ObjUtils.extend(listOfValues, ClassPathDescriptionBehavior);
    ObjUtils.extend(listOfValues, ListOfValuesDescriptionBehavior);
    listOfValues._defineByPropertyBag(props);
    return listOfValues;
}

/**
 * An Oracle window containing a list of values for selection.
 * @constructor
 * @class ListOfValuesTO
 * @extends Oracle.UiObjectBaseTO
 * @mixes Oracle.ClassPathInfoProvider._properties
 * @mixes Oracle.EnabledInfoProvider._properties
 * @mixes Oracle.ListOfValuesTOBehavior._properties
 * @mixes Oracle.ListOfValuesTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof Oracle
 */
function ListOfValuesTO(session, description) {
    description = description || ListOfValues();
    var listOfValuesTO = new UiObjectBaseTO("OracleListOfValues", session, description);
    listOfValuesTO._mergeBehavior(ClassPathInfoProvider);
    listOfValuesTO._mergeBehavior(EnabledInfoProvider);
    listOfValuesTO._mergeBehavior(WaitUntilEnabledBehavior);
    listOfValuesTO._mergeBehavior(ListOfValuesTOBehavior);
    return listOfValuesTO;
}

/**
 * The behaviors of an Oracle window containing a list of values for selection.
 * @memberof Oracle
 * @ignore
 */
var ListOfValuesTOBehavior = {
    _helpers: {
        _itemTransform: function (item) {
            if (typeof item === 'number')
                return item + 1;

            if (typeof item === 'string')
                return item;

            throw new Error("ArgumentException: unsupported identifier type");
        }
    },
    /**
     * @ignore
     * @memberof Oracle.ListOfValuesTOBehavior
     */
    _properties: {
        /**
         * The window title.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the title.
         */
        title: {
        },
        /**
         * Returns the content of the object window.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with an array of all items.
         */
        items: {
            wiredName: "list content",
            getter: function () {
                return this._getROProperty("list content", arguments).then(StringUtils.splitFunc(";"));
            }
        }
    },
    /**
     * @ignore
     * @memberof Oracle.ListOfValuesTOBehavior
     */
    _methods: {
        /**
         * Closes the List of Values window.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the cancel operation ends.
         */
        cancel: function () {
            return this._executeWithEvents(arguments, "Cancel");
        },
        /*jshint unused:true, eqnull:true */
        /**
         * Selects the specified item from the list.
         * @function
         * @param {number | string} item The item to be selected.
         * The input can be the list item, the 0-based index of the item or the name/text of the item
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        select: function (item) {
            if (item == null)
                throw new Error("ArgumentException: items is required.");
            return this._executeWithEvents(arguments, "Select", this._itemTransform(item));
        },
        /*jshint unused:true, eqnull:true */
        /**
         * Finds the item in the list that matches the specified value.
         * The value or prefix to find in the first column of the list.
         * UFT searches in the first column of the list to locate the specified value.
         * If only one item in the list matches the specified value, it is automatically selected.
         * If more than one item in the list matches the specified value, all of the matching values are displayed.
         * @function
         * @param {string} text The item to be selected.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        find: function (text) {
            if (text == null)
                throw new Error("ArgumentException: text is required.");
            return this._executeWithEvents(arguments, "Find", Convert.toString(text));
        }
    },
    _additionalProperties: {
        choicesNumber: {wiredName: "choices number"}
    }
};

module.exports.ListOfValues = ListOfValues;
module.exports.ListOfValuesTO = ListOfValuesTO;

