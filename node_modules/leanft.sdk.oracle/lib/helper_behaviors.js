// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;


/**
 * @ignore
 * @memberof Oracle
 */
var EnabledDescriptionBehavior = {
    /**
     * Indicates whether the object is enable.
     * @param {boolean} [isEnabled] When provided, this method acts as a setter and sets the isEnabled value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isEnabled: function (isEnabled) {
        return this._propertyHandler("enabled", isEnabled, Convert.toBool);
    }
};

/**
 * @ignore
 * @memberof Oracle
 */
var EnabledInfoProvider = {
    /**
     * @ignore
     * @memberof Oracle.EnabledInfoProvider
     */
    _properties: {
        /**
         * Checks if the object is enabled.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object is enabled or not.
         */
        isEnabled: {
            wiredName: "enabled"
        }
    }
};

/**
 * @ignore
 * @memberof Oracle
 */
var ClassPathDescriptionBehavior = {
    /**
     * The Oracle class hierarchy of the object's Oracle class.
     * @param {string} [classPath] When provided, this method acts as a setter and sets the classPath value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored classPath value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    classPath: function (classPath) {
        return this._propertyHandler("class path", classPath, Convert.toString);
    }
};

/**
 * @ignore
 * @memberof Oracle
 */
var ClassPathInfoProvider = {
    /**
     * @ignore
     * @memberof Oracle.ClassPathInfoProvider
     */
    _properties: {
        /**
         * Returns the Oracle class hierarchy of the object's Oracle class.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's classPath.
         */
        classPath: {
            wiredName: "class path"
        }
    }
};

/**
 * @ignore
 * @memberof Oracle
 */
var ObjectInfoDescriptionBehavior = {
    /**
     * Indicates accessibility description of the object as specified by the server.
     * @param {string} [objectDescription] When provided, this method acts as a setter and sets the objectDescription value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored objectDescription value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    objectDescription: function (objectDescription) {
        return this._propertyHandler("description", objectDescription, Convert.toString);
    },
    /**
     * Indicates internal name of the object supplied by the application server.
     * @param {string} [objectName] When provided, this method acts as a setter and sets the objectName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored objectName value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    objectName: function (objectName) {
        return this._propertyHandler("developer name", objectName, Convert.toString);
    },
    /**
     * Indicates the text displayed in the object's tooltip.
     * @param {string} [tooltipText] When provided, this method acts as a setter and sets the tooltipText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored tooltipText value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    tooltipText: function (tooltipText) {
        return this._propertyHandler("tooltip", tooltipText, Convert.toString);
    }
};

/**
 * @ignore
 * @memberof Oracle
 */
var ObjectInfoProvider = {
    /**
     * @ignore
     * @memberof Oracle.ObjectInfoProvider
     */
    _properties: {
        /**
         * Returns accessibility description of the object as specified by the server.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with an indication of whether the object's objectDescription.
         */
        objectDescription: {
            wiredName: "description"
        },
        /**
         * Returns internal name of the object supplied by the application server.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with an indication of whether the object's objectName.
         */
        objectName: {
            wiredName: "developer name"
        },
        /**
         * Returns the text displayed in the object's tooltip.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with an indication of whether the object's tooltipText.
         */
        tooltipText: {
            wiredName: "tooltip"
        }
    }
};

module.exports.EnabledInfoProvider = EnabledInfoProvider;
module.exports.EnabledDescriptionBehavior = EnabledDescriptionBehavior;
module.exports.ClassPathInfoProvider = ClassPathInfoProvider;
module.exports.ClassPathDescriptionBehavior = ClassPathDescriptionBehavior;
module.exports.ObjectInfoProvider = ObjectInfoProvider;
module.exports.ObjectInfoDescriptionBehavior = ObjectInfoDescriptionBehavior;