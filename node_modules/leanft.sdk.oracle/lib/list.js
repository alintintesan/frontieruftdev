// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var HelperBehaviors = require("./helper_behaviors.js");
var ClassPathDescriptionBehavior = HelperBehaviors.ClassPathDescriptionBehavior;
var ClassPathInfoProvider = HelperBehaviors.ClassPathInfoProvider;
var EnabledDescriptionBehavior = HelperBehaviors.EnabledDescriptionBehavior;
var EnabledInfoProvider = HelperBehaviors.EnabledInfoProvider;
var ObjectInfoDescriptionBehavior = HelperBehaviors.ObjectInfoDescriptionBehavior;
var ObjectInfoProvider = HelperBehaviors.ObjectInfoProvider;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var ListItem = require("./list_item.js").ListItem;
var Convert = Core.Convert;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

/**
 * ListDescriptionBehavior - the description for an Oracle poplist (combo box) or list.
 * @memberof Oracle
 * @ignore
 */
var ListDescriptionBehavior = {
    /**
     * The value of the selected item.
     * @param {string} [selectedItem] When provided, this method acts as a setter and sets the selectedItem value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedItem value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedItem: function (selectedItem) {
        return this._propertyHandler("selected item", selectedItem, Convert.toString);
    },
    /**
     * The caption of the object.
     * @param {string} [caption] When provided, this method acts as a setter and sets the caption value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored caption value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    caption: function (caption) {
        return this._propertyHandler("prompt", caption, Convert.toString);
    },
    /**
     * The 0-based index of the selected item.
     * @param {number} [selectedIndex] When provided, this method acts as a setter and sets the selectedIndex value.
     * NOTE: If no item is selected, -1 is returned.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedIndex value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedIndex: function (selectedIndex) {
        return this._propertyHandler("selected index", selectedIndex, function (index) {
            index = Convert.toNumber(index);
            return index != null ? index + 1 : null;
        }, function (index) {
            index = Convert.toNumber(index);
            return index != null ? index - 1 : null;
        });
    }
};

/**
 * The description of an Oracle poplist (combo box) or list.
 * @param {Object} [props] Initializes a List test object using the supplied property bag.
 * @returns {List} the description object that was initialized.
 * @class List
 * @extends Oracle.UiObjectBaseDescription
 * @mixes Oracle.ClassPathDescriptionBehavior
 * @mixes Oracle.EnabledDescriptionBehavior
 * @mixes Oracle.ObjectInfoDescriptionBehavior
 * @mixes Oracle.ListDescriptionBehavior
 * @memberof Oracle
 */
function List(props) {
    var listDesc = new UiObjectBaseDescription("List");
    ObjectUtils.extend(listDesc, EnabledDescriptionBehavior);
    ObjectUtils.extend(listDesc, ClassPathDescriptionBehavior);
    ObjectUtils.extend(listDesc, ObjectInfoDescriptionBehavior);
    ObjectUtils.extend(listDesc, ListDescriptionBehavior);
    listDesc._defineByPropertyBag(props);
    return listDesc;
}

/**
 * An Oracle poplist (combo box) or list.
 * @constructor
 * @class ListTO
 * @extends Oracle.UiObjectBaseTO
 * @mixes Oracle.ListTOBehavior._properties
 * @mixes Oracle.ClassPathInfoProvider._properties
 * @mixes Oracle.EnabledInfoProvider._properties
 * @mixes Oracle.ObjectInfoProvider._properties
 * @mixes Oracle.ListTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof Oracle
 */
function ListTO(session, description) {
    description = description || List();
    var listTO = new UiObjectBaseTO("OracleList", session, description);
    listTO._mergeBehavior(WrappedItemExecutorBehavior);
    listTO._mergeBehavior(ClassPathInfoProvider);
    listTO._mergeBehavior(EnabledInfoProvider);
    listTO._mergeBehavior(ObjectInfoProvider);
    listTO._mergeBehavior(WaitUntilEnabledBehavior);
    listTO._mergeBehavior(ListTOBehavior);
    return listTO;
}

/**
 * The behaviors of an Oracle poplist (combo box) or list.
 * @memberof Oracle
 * @ignore
 */
var ListTOBehavior = {

    _helpers: {
        _itemTransform: function (item) {
            if (typeof item === 'object')
                item = item._getIdentifier();

            if (typeof item === 'number')
                return item + 1;

            if (typeof item === 'string')
                return item;

            throw new Error("ArgumentException: unsupported identifier type");
        },

        /**
         * Checks whether the specified item is selected.
         * @function
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * If it is a string, it is the name of the item.
         * @returns {Promise<string>} a promise that is fulfilled with the item's text when the _getItemText operation ends.
         * @ignore
         */
        _isItemSelected: function (identifier) {
            return this._executeNotWrapped(arguments, "IsSelected", this._itemTransform(identifier));
        },

        /**
         * Create an item from the identifier
         * @function
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * @returns {ListItem} The ListItem object
         * @ignore
         */
        _createItem: function (identifier) {
            return new ListItem(this, identifier);
        }
    },
    /**
     * @ignore
     * @memberof Oracle.ListTOBehavior
     */
    _properties: {
        /**
         * The caption of the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the caption.
         */
        caption: {
            wiredName: "prompt"
        },
        /**
         * The value of the selected item.
         * @function
         * @returns {Promise<ListItem>} a promise that is fulfilled with the selectedItem.
         */
        selectedItem: {
            wiredName: "selected item",
            getter: function () {
                return this._getROProperty("selected item", arguments).then((function (item) {
                    return this._createItem(item);
                }).bind(this));
            }
        },
        /**
         * The 0-based index of the selected item.
         * @function
         * NOTE: If no item is selected, -1 is returned.
         * @returns {Promise<number>} a promise that is fulfilled with the selectedIndex.
         */
        selectedIndex: {
            wiredName: "selected index",
            getter: function () {
                return this._getROProperty("selected index", arguments).then(function (index) {
                    return index - 1;
                });
            }
        }
    },

    /**
     * @ignore
     * @memberof Oracle.ListTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Returns the item with the specified text.
         * @function
         * @param {string | number} item The text/index of the item.
         * @returns {Oracle.ListItem} Get the List item with the specified text.
         * @memberof Oracle.ListTO#
         */
        getItem: function (item) {
            if (item == null)
                throw new Error("ArgumentException: text is required.");
            return this._createItem(item);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Activates the specified item in the list.
         * @function
         * @param {ListItem | number | string} item The item to be activated.
         * The input can be the list item, the 0-based index of the item or the name/text of the item
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         */
        activate: function (item) {
            if (item == null)
                throw new Error("ArgumentException: item is required.");
            return this._executeWithEvents(arguments, "Activate", this._itemTransform(item));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Checks whether the specified item is contained in the list.
         * @function
         * @param {string} item The item to be searched in list.
         * @returns {Promise<boolean>} a promise that is fulfilled when the contains operation ends.
         */
        contains: function (item) {
            if (item == null)
                throw new Error("ArgumentException: item is required.");
            return this._executeWithEvents(arguments, "IsItemInList", Convert.toString(item));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects the specified item from the list.
         * @function
         * @param {ListItem | number | string} item The item to be selected.
         * The input can be the list item, the 0-based index of the item or the name/text of the item
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        select: function (item) {
            if (item == null)
                throw new Error("ArgumentException: items is required.");
            return this._executeWithEvents(arguments, "Select", this._itemTransform(item));
        }
    }
};

module.exports.List = List;
module.exports.ListTO = ListTO;
