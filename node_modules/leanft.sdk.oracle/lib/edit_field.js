// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */
var Core = require("leanft.sdk.core");
var UiObjectBase = require("./ui_object_base.js");
var HelperBehaviors = require("./helper_behaviors.js");
var ClassPathDescriptionBehavior = HelperBehaviors.ClassPathDescriptionBehavior;
var ClassPathInfoProvider = HelperBehaviors.ClassPathInfoProvider;
var EnabledDescriptionBehavior = HelperBehaviors.EnabledDescriptionBehavior;
var EnabledInfoProvider = HelperBehaviors.EnabledInfoProvider;
var ObjectInfoDescriptionBehavior = HelperBehaviors.ObjectInfoDescriptionBehavior;
var ObjectInfoProvider = HelperBehaviors.ObjectInfoProvider;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var ObjUtils = Core.ObjectUtils;
var Convert = Core.Convert;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

/**
 * EditFieldDescriptionBehavior - the description for an Oracle text field.
 * @memberof Oracle
 * @ignore
 */
var EditFieldDescriptionBehavior = {
    /**
     * The value of the object.
     * @param {string} [text] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    text: function (text) {
        return this._simplePropertyHandler("value", text);
    },
    /**
     * The caption of the object.
     * @param {string} [caption] When provided, this method acts as a setter and sets the caption value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored caption value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    caption: function (caption) {
        return this._simplePropertyHandler("prompt", caption);
    },
    /**
     * Indicates whether the text field is editable.
     * @param {boolean} [isEditable] When provided, this method acts as a setter and sets the isEditable value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEditable value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isEditable: function (isEditable) {
        return this._propertyHandler("editable", isEditable, Convert.toBool);
    }
};

/**
 * The description of an Oracle text field.
 * @param {Object} [props] Initializes an Oracle EditField test object using the supplied property bag.
 * @returns {EditField} the description object that was initialized.
 * @class EditField
 * @extends Oracle.UiObjectBaseDescription
 * @mixes Oracle.ClassPathDescriptionBehavior
 * @mixes Oracle.EnabledDescriptionBehavior
 * @mixes Oracle.ObjectInfoDescriptionBehavior
 * @mixes Oracle.EditFieldDescriptionBehavior
 * @memberof Oracle
 */
function EditField(props) {
    var editField = new UiObjectBaseDescription("EditField");
    ObjUtils.extend(editField, EnabledDescriptionBehavior);
    ObjUtils.extend(editField, ClassPathDescriptionBehavior);
    ObjUtils.extend(editField, ObjectInfoDescriptionBehavior);
    ObjUtils.extend(editField, EditFieldDescriptionBehavior);
    editField._defineByPropertyBag(props);
    return editField;
}

/**
 * An Oracle text field.
 * @constructor
 * @class EditFieldTO
 * @extends Oracle.UiObjectBaseTO
 * @mixes Oracle.ClassPathInfoProvider._properties
 * @mixes Oracle.EnabledInfoProvider._properties
 * @mixes Oracle.ObjectInfoProvider._properties
 * @mixes Oracle.EditFieldTOBehavior._properties
 * @mixes Oracle.EditFieldTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof Oracle
 */
function EditFieldTO(session, description) {
    description = description || EditField();
    var editFieldTO = new UiObjectBaseTO("OracleTextField", session, description);
    editFieldTO._mergeBehavior(ClassPathInfoProvider);
    editFieldTO._mergeBehavior(EnabledInfoProvider);
    editFieldTO._mergeBehavior(ObjectInfoProvider);
    editFieldTO._mergeBehavior(WaitUntilEnabledBehavior);
    editFieldTO._mergeBehavior(EditFieldTOBehavior);
    return editFieldTO;
}

/**
 * The behaviors of an Oracle text field.
 * @memberof Oracle
 * @ignore
 */
var EditFieldTOBehavior = {
    /**
     * @ignore
     * @memberof Oracle.EditFieldTOBehavior
     */
    _properties: {
        /**
         * The value of the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text.
         */
        text: {
            wiredName: "value"
        },
        /**
         * The caption of the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the caption.
         */
        caption: {
            wiredName: "prompt"
        },
        /**
         * Indicates whether the text field is editable.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the editable state.
         */
        isEditable: {
            wiredName: "editable"
        }
    },
    /**
     * @ignore
     * @memberof Oracle.EditFieldTOBehavior
     */
    _methods: {
        /**
         * Enters the specified text into the field.
         * @function
         * @param {string} text The text to enter in the text field.
         * @returns {Promise<void>} a promise that is fulfilled when the setText operation ends.
         */
        setText: function (text) {
            return this._executeWithEvents(arguments, "Enter", Convert.toString(text), false);
        },
        /**
         * Enters the specified text into the field with validation.
         * @function
         * @param {string} text The text to enter in the text field.
         * @returns {Promise<void>} a promise that is fulfilled when the setTextAndValidate operation ends.
         */
        setTextAndValidate: function (text) {
            return this._executeWithEvents(arguments, "Enter", Convert.toString(text));
        },
        /**
         * Opens the field's associated dialog box.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the openDialog operation ends.
         */
        openDialog: function () {
            return this._executeWithEvents(arguments, "OpenDialog");
        },
        /**
         * Transfers the focus out of the field.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the validate operation ends.
         */
        validate: function () {
            return this._executeWithEvents(arguments, "Validate");
        },
        /**
         * Transfers the focus to the field.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the setFocus operation ends.
         */
        setFocus: function () {
            return this._executeWithEvents(arguments, "SetFocus");
        }
    }
};

module.exports.EditField = EditField;
module.exports.EditFieldTO = EditFieldTO;

