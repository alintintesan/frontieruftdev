// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Oracle SendKey Behaviour Tests", function() {
    var Core = require("leanft.sdk.core");
    var ObjUtils = Core.ObjectUtils;
    var SendKeyBehaviorOracle = require("../lib/oracle_sendkey_behavior.js").SendKeyBehaviorOracle;
    var SoftKeys = require("../lib/oracle_sendkey_behavior.js").SoftKeys;
    var sendKeyBehaviorOracleUnderTest = null;

    beforeEach(function () {
        sendKeyBehaviorOracleUnderTest = Object.create(null);
        ObjUtils.combineBehaviors(sendKeyBehaviorOracleUnderTest, SendKeyBehaviorOracle);
        sendKeyBehaviorOracleUnderTest = ObjUtils.mergeTestBehavior(sendKeyBehaviorOracleUnderTest);
        sendKeyBehaviorOracleUnderTest._executeWithEvents = sinon.stub();
    });

    afterEach(function() {
        delete sendKeyBehaviorOracleUnderTest._executeWithEvents;
    });

    describe("sendKey", function () {
        it("should throw error if key is undefined", function () {
            assert.throws(function () {
                sendKeyBehaviorOracleUnderTest.sendKey();
            });
        });

        it("should throw error if key is null ", function () {
            assert.throws(function () {
                sendKeyBehaviorOracleUnderTest.sendKey(null);
            });
        });

            [[SoftKeys.nextField, "NEXT FIELD"],
            [SoftKeys.previousField, "PREVIOUS FIELD"],
            [SoftKeys.clearField, "CLEAR FIELD"],
            [SoftKeys.up, "UP"],
            [SoftKeys.down, "DOWN"],
            [SoftKeys.scrollUp, "SCROLL UP"],
            [SoftKeys.scrollDown, "SCROLL DOWN"],
            [SoftKeys.edit, "EDIT"],
            [SoftKeys.return, "RETURN"],
            [SoftKeys.listOfValues, "LIST OF VALUES"],
            [SoftKeys.help, "HELP"],
            [SoftKeys.exit, "EXIT"],
            [SoftKeys.showKeys, "SHOW KEYS"],
            [SoftKeys.commit, "COMMIT"],
            [SoftKeys.nextPrimaryKey, "NEXT PRIMARY KEY"],
            [SoftKeys.clearRecord, "CLEAR RECORD"],
            [SoftKeys.deleteRecord, "DELETE RECORD"],
            [SoftKeys.duplicateRecord, "DUPLICATE RECORD"],
            [SoftKeys.insertRecord, "INSERT RECORD"],
            [SoftKeys.nextSetOfRecords, "NEXT SET OF RECORDS"],
            [SoftKeys.nextRecord, "NEXT RECORD"],
            [SoftKeys.previousRecord, "PREVIOUS RECORD"],
            [SoftKeys.clearBlock, "CLEAR BLOCK"],
            [SoftKeys.blockMenu, "BLOCK MENU"],
            [SoftKeys.nextBlock, "NEXT BLOCK"],
            [SoftKeys.previousBlock, "PREVIOUS BLOCK"],
            [SoftKeys.duplicateField, "DUPLICATE FIELD"],
            [SoftKeys.clearForm, "CLEAR FORM"],
            [SoftKeys.enterQuery, "ENTER QUERY"],
            [SoftKeys.executeQuery, "EXECUTE QUERY"],
            [SoftKeys.displayError, "DISPLAY ERROR"],
            [SoftKeys.print, "PRINT"],
            [SoftKeys.countQuery, "COUNT QUERY"],
            [SoftKeys.updateRecord, "UPDATE RECORD"],
            [SoftKeys.f0, "FUNCTION 0"],
            [SoftKeys.f1, "FUNCTION 1"],
            [SoftKeys.f2, "FUNCTION 2"],
            [SoftKeys.f3, "FUNCTION 3"],
            [SoftKeys.f4, "FUNCTION 4"],
            [SoftKeys.f5, "FUNCTION 5"],
            [SoftKeys.f6, "FUNCTION 6"],
            [SoftKeys.f7, "FUNCTION 7"],
            [SoftKeys.f8, "FUNCTION 8"],
            [SoftKeys.f9, "FUNCTION 9"],
            [SoftKeys.listTabPages, "LIST TAB PAGES"]].forEach(function(key) {
            it("should convert correctly if input string is " + key[0], function(){
                var input = key[0];
                var expected = key[1];
                sendKeyBehaviorOracleUnderTest.sendKey(input);
                sinon.assert.calledOnce(sendKeyBehaviorOracleUnderTest._executeWithEvents);
                sinon.assert.calledWith(sendKeyBehaviorOracleUnderTest._executeWithEvents, sinon.match({ 0: input }), "InvokeSoftkey", expected);
            });
        });

        it("should throw error if input contains more keys", function() {
            assert.throws(function () {
                sendKeyBehaviorOracleUnderTest.sendKey(SoftKeys.f1 + SoftKeys.executeQuery);
            });
        });

        it("should throw error if input contains illegal key", function() {
            assert.throws(function () {
                sendKeyBehaviorOracleUnderTest.sendKey(SoftKeys.f1 + " test");
            });
        });

        it("should throw error if input is illegal key", function() {
            assert.throws(function () {
                sendKeyBehaviorOracleUnderTest.sendKey("test");
            });
        });
    });
});