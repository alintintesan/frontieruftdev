// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("FormWindow Description", function () {
    var FormWindow = require("../lib/form_window.js").FormWindow;
    var formWindowDescriptionUnderTest;

    beforeEach(function () {
        formWindowDescriptionUnderTest = FormWindow();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and 'FormWindow' LeanFT type", function () {
            formWindowDescriptionUnderTest = new FormWindow();
            assert.deepEqual(formWindowDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "FormWindow"
            });
        });
    });

    describe("shortTitle", function () {
        it("should add 'shortTitle' to _properties when value is given", function () {
            formWindowDescriptionUnderTest.shortTitle("test");
            assert.strictEqual(formWindowDescriptionUnderTest._properties["short title"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = formWindowDescriptionUnderTest.shortTitle("test");
            assert.strictEqual(result, formWindowDescriptionUnderTest);
        });

        it("should remove 'shortTitle' from _properties when value is null", function () {
            formWindowDescriptionUnderTest._properties["short title"] = "test";
            formWindowDescriptionUnderTest.shortTitle(null);
            assert(!("test" in formWindowDescriptionUnderTest._properties));
        });

        it("should return the value of 'short title' from _properties when value is not given", function () {
            formWindowDescriptionUnderTest._properties["short title"] = "test";
            var result = formWindowDescriptionUnderTest.shortTitle();
            assert.strictEqual(result, "test");
        });
    });

    describe("classPath", function () {
        it("should add 'class path' to _properties when value is given", function () {
            formWindowDescriptionUnderTest.classPath("test");
            assert.strictEqual(formWindowDescriptionUnderTest._properties["class path"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = formWindowDescriptionUnderTest.classPath("test");
            assert.strictEqual(result, formWindowDescriptionUnderTest);
        });

        it("should remove 'classPath' from _properties when value is null", function () {
            formWindowDescriptionUnderTest._properties["class path"] = "test";
            formWindowDescriptionUnderTest.classPath(null);
            assert(!("test" in formWindowDescriptionUnderTest._properties));
        });

        it("should return the value of 'class path' from _properties when value is not given", function () {
            formWindowDescriptionUnderTest._properties["class path"] = "test";
            var result = formWindowDescriptionUnderTest.classPath();
            assert.strictEqual(result, "test");
        });
    });

    describe("isEnabled", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            formWindowDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(formWindowDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given is given in string", function () {
            formWindowDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(formWindowDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = formWindowDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(result, formWindowDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            formWindowDescriptionUnderTest._properties["enabled"] = "true";
            formWindowDescriptionUnderTest.isEnabled(null);
            assert(!("true" in formWindowDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            formWindowDescriptionUnderTest._properties["enabled"] = "true";
            var result = formWindowDescriptionUnderTest.isEnabled();
            assert.strictEqual(result, "true");
        });
    });

    describe("title", function () {
        it("should add 'title' to _properties when value is given", function () {
            formWindowDescriptionUnderTest.title("test");
            assert.strictEqual(formWindowDescriptionUnderTest._properties["title"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = formWindowDescriptionUnderTest.title("test");
            assert.strictEqual(result, formWindowDescriptionUnderTest);
        });

        it("should remove 'title' from _properties when value is null", function () {
            formWindowDescriptionUnderTest._properties["title"] = "test";
            formWindowDescriptionUnderTest.title(null);
            assert(!("test" in formWindowDescriptionUnderTest._properties));
        });

        it("should return the value of 'title' from _properties when value is not given", function () {
            formWindowDescriptionUnderTest._properties["title"] = "test";
            var result = formWindowDescriptionUnderTest.title();
            assert.strictEqual(result, "test");
        });
    });
});

describe("Form Window Test Object", function () {
    var FormWindowTO = require("../lib/form_window.js").FormWindowTO;
    var MenuItem = require("../lib/form_window.js").MenuItem;
    var formWindowTestObjectUnderTest;

    beforeEach(function () {
        formWindowTestObjectUnderTest = new FormWindowTO();
        sinon.stub(formWindowTestObjectUnderTest, "_executeNotWrapped");
        sinon.stub(formWindowTestObjectUnderTest, "_getROProperty");
        sinon.stub(formWindowTestObjectUnderTest, "_executeWithEvents");
    });

    describe("title method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'title'", function () {
            formWindowTestObjectUnderTest._getROProperty.returns(promiseMock);
            formWindowTestObjectUnderTest.title();
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._getROProperty, "title", sinon.match({}));
        });

        it("should return promise as is", function () {
            formWindowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = formWindowTestObjectUnderTest.title();
            assert.strictEqual(res, promiseMock);
        });
    });
    
    describe("shortTitle method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'shortTitle'", function () {
            formWindowTestObjectUnderTest._getROProperty.returns(promiseMock);
            formWindowTestObjectUnderTest.shortTitle();
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._getROProperty, "short title", sinon.match({}));
        });

        it("should return promise as is", function () {
            formWindowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = formWindowTestObjectUnderTest.shortTitle();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("classPath method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'class path'", function () {
            formWindowTestObjectUnderTest._getROProperty.returns(promiseMock);
            formWindowTestObjectUnderTest.classPath();
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._getROProperty, "class path", sinon.match({}));
        });

        it("should return promise as is", function () {
            formWindowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = formWindowTestObjectUnderTest.classPath();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEnabled method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'enabled'", function () {
            formWindowTestObjectUnderTest._getROProperty.returns(promiseMock);
            formWindowTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return promise as is", function () {
            formWindowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = formWindowTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("activate method", function () {
        it("should execute command 'Activate'", function () {
            formWindowTestObjectUnderTest.activate();
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeWithEvents, sinon.match({}), "Activate");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            formWindowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = formWindowTestObjectUnderTest.activate();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("closeForm method", function () {
        it("should execute command 'CloseForm'", function () {
            formWindowTestObjectUnderTest.closeForm();
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeWithEvents, sinon.match({}), "CloseForm");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            formWindowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = formWindowTestObjectUnderTest.closeForm();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("closeWindow method", function () {
        it("should execute command 'CloseWindow'", function () {
            formWindowTestObjectUnderTest.closeWindow();
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeWithEvents, sinon.match({}), "CloseWindow");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            formWindowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = formWindowTestObjectUnderTest.closeWindow();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("save method", function () {
        it("should execute command 'Save'", function () {
            formWindowTestObjectUnderTest.save();
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeWithEvents, sinon.match({}), "Save");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            formWindowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = formWindowTestObjectUnderTest.save();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("pressToolbarButton method", function () {
        it("should throw error if name is undefined", function () {
            assert.throws(function () {
                formWindowTestObjectUnderTest.pressToolbarButton();
            });
        });

        it("should throw error if name is null", function () {
            assert.throws(function () {
                formWindowTestObjectUnderTest.pressToolbarButton(null);
            });
        });

        it("should throw error if name is object", function () {
            assert.throws(function () {
                formWindowTestObjectUnderTest.pressToolbarButton({test: 'test'});
            });
        });

        it("should execute _executeWithEvents with 'PressToolbarButton' and argument as string", function () {
            formWindowTestObjectUnderTest.pressToolbarButton("test");
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeWithEvents, sinon.match({}), "PressToolbarButton", "test");
        });
    });

    describe("getItem method", function () {
        it("should throw error if path is undefined", function () {
            assert.throws(function () {
                formWindowTestObjectUnderTest.getItem();
            });
        });

        it("should throw error if path is null", function () {
            assert.throws(function () {
                formWindowTestObjectUnderTest.getItem(null);
            });
        });

        it("should return the MenuItem", function () {
            var res = formWindowTestObjectUnderTest.getItem("Item1");
            assert.strictEqual(res._path, "Item1");
            assert.deepEqual(res._ownerMenu, formWindowTestObjectUnderTest);
        });
    });

    describe("buildNodePath method", function () {
        it("should return a correct path with nodes", function () {
            var res = formWindowTestObjectUnderTest.buildMenuPath("node1", "node2", "node3");
            assert.strictEqual(res, "node1->node2->node3");
        });

        it("should throw if an empty list is passed", function () {
            assert.throws(function () {
                formWindowTestObjectUnderTest.buildMenuPath();
            });
        });

        it("should throw error if one of nodes isn't a string", function () {
            assert.throws(function () {
                formWindowTestObjectUnderTest.buildMenuPath(0, true, 4);
            });
        });
    });

    describe("selectMenuItem method", function () {
        it("should execute command 'SelectMenu' if the 'item' parameter is a MenuItem", function () {
            var menuItemTOMock = {_ownerMenu: "Owner", _executeWithEventsOnItemOnError: sinon.stub()};
            var item = new MenuItem(menuItemTOMock, "MenuItem");

            formWindowTestObjectUnderTest.selectMenuItem(item);
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeWithEvents, sinon.match({0: item}), "SelectMenu", "MenuItem");
        });

        it("should throw if the 'item' parameter has path null", function () {
            assert.throws(function () {
                var menuItemTOMock = {_ownerMenu: "Owner", _executeWithEventsOnItemOnError: sinon.stub()};
                var item = new MenuItem(menuItemTOMock, null);

                formWindowTestObjectUnderTest.selectMenuItem(item);
            });
        });

        it("should execute command 'SelectMenu' if the 'item' parameter is string", function () {
            formWindowTestObjectUnderTest.selectMenuItem("MenuItem1");
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeWithEvents, sinon.match({0: "MenuItem1"}), "SelectMenu", "MenuItem1");
        });

        it("should throw error if the 'item' parameter is null", function () {
            assert.throws(function () {
                formWindowTestObjectUnderTest.selectMenuItem(null);
            });
        });

        it("should throw error if the 'item' parameter is undefined", function () {
            assert.throws(function () {
                formWindowTestObjectUnderTest.selectMenuItem();
            });
        });
    });

    describe("_isItemChecked method", function () {
        var executionPromise;
        beforeEach(function () {
            executionPromise = {
                then: function (cb) {
                    return cb(true);
                }
            };
            formWindowTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            formWindowTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = formWindowTestObjectUnderTest._isItemChecked("item1");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetMenuItemProperty' with correct parameters, if input is number", function () {
            formWindowTestObjectUnderTest._isItemChecked(0);
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeNotWrapped, sinon.match({0: 0}), "GetMenuItemProperty", "0", "checked");
        });

        it("should execute _executeNotWrapped 'GetMenuItemProperty' with correct parameters, if input is string", function () {
            formWindowTestObjectUnderTest._isItemChecked("Item1");
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeNotWrapped, sinon.match({0: "Item1"}), "GetMenuItemProperty", "Item1", "checked");
        });
    });

    describe("_isItemEnabled method", function () {
        var executionPromise;
        beforeEach(function () {
            executionPromise = {
                then: function (cb) {
                    return cb(true);
                }
            };
            formWindowTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            formWindowTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = formWindowTestObjectUnderTest._isItemEnabled("item1");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetMenuItemProperty' with correct parameters, if input is number", function () {
            formWindowTestObjectUnderTest._isItemEnabled(0);
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeNotWrapped, sinon.match({0: 0}), "GetMenuItemProperty", "0", "enabled");
        });

        it("should execute _executeNotWrapped 'GetMenuItemProperty' with correct parameters, if input is string", function () {
            formWindowTestObjectUnderTest._isItemEnabled("Item1");
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeNotWrapped, sinon.match({0: "Item1"}), "GetMenuItemProperty", "Item1", "enabled");
        });
    });

    describe("_isItemDisabled method", function () {
        var executionPromise;
        beforeEach(function () {
            executionPromise = {
                then: function (cb) {
                    return cb(true);
                }
            };
            formWindowTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            formWindowTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = formWindowTestObjectUnderTest._isItemDisabled("item1");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetMenuItemProperty' with correct parameters, if input is number", function () {
            formWindowTestObjectUnderTest._isItemDisabled(0);
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeNotWrapped, sinon.match({0: 0}), "GetMenuItemProperty", "0", "disabled");
        });

        it("should execute _executeNotWrapped 'GetMenuItemProperty' with correct parameters, if input is string", function () {
            formWindowTestObjectUnderTest._isItemDisabled("Item1");
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeNotWrapped, sinon.match({0: "Item1"}), "GetMenuItemProperty", "Item1", "disabled");
        });
    });

    describe("_isItemVisible method", function () {
        var executionPromise;
        beforeEach(function () {
            executionPromise = {
                then: function (cb) {
                    return cb(true);
                }
            };
            formWindowTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            formWindowTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = formWindowTestObjectUnderTest._isItemVisible("item1");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetMenuItemProperty' with correct parameters, if input is number", function () {
            formWindowTestObjectUnderTest._isItemVisible(0);
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeNotWrapped, sinon.match({0: 0}), "GetMenuItemProperty", "0", "visible");
        });

        it("should execute _executeNotWrapped 'GetMenuItemProperty' with correct parameters, if input is string", function () {
            formWindowTestObjectUnderTest._isItemVisible("Item1");
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeNotWrapped, sinon.match({0: "Item1"}), "GetMenuItemProperty", "Item1", "visible");
        });
    });

    describe("_isItemShowing method", function () {
        var executionPromise;
        beforeEach(function () {
            executionPromise = {
                then: function (cb) {
                    return cb(true);
                }
            };
            formWindowTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            formWindowTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = formWindowTestObjectUnderTest._isItemShowing("item1");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetMenuItemProperty' with correct parameters, if input is number", function () {
            formWindowTestObjectUnderTest._isItemShowing(0);
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeNotWrapped, sinon.match({0: 0}), "GetMenuItemProperty", "0", "showing");
        });

        it("should execute _executeNotWrapped 'GetMenuItemProperty' with correct parameters, if input is string", function () {
            formWindowTestObjectUnderTest._isItemShowing("Item1");
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeNotWrapped, sinon.match({0: "Item1"}), "GetMenuItemProperty", "Item1", "showing");
        });
    });

    describe("_getMenuSubItems method", function () {
        it("should call the method _executeWithEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            formWindowTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            formWindowTestObjectUnderTest._getMenuSubItems("Item1");
            sinon.assert.calledOnce(formWindowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(formWindowTestObjectUnderTest._executeWithEvents, sinon.match({ }), "GetMenuSubItems", "Item1");
        });

        it("should return empty list if no item returns from _executeWithEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            formWindowTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = formWindowTestObjectUnderTest._getMenuSubItems("Item1");
            assert.deepEqual(res, []);
        });

        it("should return a list  with items if items returns from _executeWithEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            formWindowTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var items = formWindowTestObjectUnderTest._getMenuSubItems("Item1");
            assert.deepEqual(items.length, 2);
        });
    });
});

describe("Menu Item", function () {
    var MenuItem = require("../lib/form_window.js").MenuItem;
    var menuItemUnderTest;
    var owner;

    beforeEach(function () {
        owner = { owner: "Owner", _executeWithEventsOnItemOnError: sinon.stub() };
        menuItemUnderTest = new MenuItem(owner, "path");
        menuItemUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    afterEach(function () {
        delete menuItemUnderTest._executeWithEventsOnItemOnError;
        delete owner._executeWithEventsOnItemOnError;
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            assert.strictEqual(menuItemUnderTest._ownerMenu, owner);
            assert.strictEqual(menuItemUnderTest._path, "path");
        });
    });

    describe("isChecked method", function () {
        it("should execute _isItemChecked with correct parameter", function () {
            menuItemUnderTest.isChecked();
            sinon.assert.calledOnce(menuItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(menuItemUnderTest._executeWithEventsOnItemOnError, menuItemUnderTest._ownerMenu._isItemChecked, "path");
        });

        it("should return bool if _isItemChecked returns bool", function () {
            menuItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);
            var res = menuItemUnderTest.isChecked();
            assert.strictEqual(res, true);
        });
    });

    describe("isEnabled method", function () {
        it("should execute _isItemEnabled with correct parameter", function () {
            menuItemUnderTest.isEnabled();
            sinon.assert.calledOnce(menuItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(menuItemUnderTest._executeWithEventsOnItemOnError, menuItemUnderTest._ownerMenu._isItemEnabled, "path");
        });

        it("should return bool if _isItemEnabled returns bool", function () {
            menuItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);
            var res = menuItemUnderTest.isEnabled();
            assert.strictEqual(res, true);
        });
    });

    describe("isDisabled method", function () {
        it("should execute _isItemDisabled with correct parameter", function () {
            menuItemUnderTest.isDisabled();
            sinon.assert.calledOnce(menuItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(menuItemUnderTest._executeWithEventsOnItemOnError, menuItemUnderTest._ownerMenu._isItemDisabled, "path");
        });

        it("should return bool if _isItemDisabled returns bool", function () {
            menuItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);
            var res = menuItemUnderTest.isDisabled();
            assert.strictEqual(res, true);
        });
    });

    describe("isVisible method", function () {
        it("should execute _isItemVisible with correct parameter", function () {
            menuItemUnderTest.isVisible();
            sinon.assert.calledOnce(menuItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(menuItemUnderTest._executeWithEventsOnItemOnError, menuItemUnderTest._ownerMenu._isItemVisible, "path");
        });

        it("should return bool if _isItemChecked returns bool", function () {
            menuItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);
            var res = menuItemUnderTest.isVisible();
            assert.strictEqual(res, true);
        });
    });

    describe("isShowing method", function () {
        it("should execute _isItemShowing with correct parameter", function () {
            menuItemUnderTest.isShowing();
            sinon.assert.calledOnce(menuItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(menuItemUnderTest._executeWithEventsOnItemOnError, menuItemUnderTest._ownerMenu._isItemShowing, "path");
        });

        it("should return bool if _isItemShowing returns bool", function () {
            menuItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);
            var res = menuItemUnderTest.isShowing();
            assert.strictEqual(res, true);
        });
    });

    describe("getMenuSubItems method", function () {
        it("should execute _getMenuSubItems with correct parameter", function () {
            menuItemUnderTest.getMenuSubItems();
            sinon.assert.calledOnce(menuItemUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(menuItemUnderTest._executeWithEventsOnItemOnError, menuItemUnderTest._ownerMenu._getMenuSubItems, "path");
        });

        it("should return bool if _getMenuSubItems returns bool", function () {
            menuItemUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(["1","2"]);
            var res = menuItemUnderTest.getMenuSubItems();
            assert.deepEqual(res, ["1","2"]);
        });
    });

    describe("path method", function () {
        it("should return correct values", function () {
            var res = menuItemUnderTest.path();
            assert.strictEqual(res, "path");
        });
    });
});
