// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("RadioGroup Description", function () {
    var RadioGroup = require("../lib/radio_group.js").RadioGroup;
    var radioGroupDescriptionUnderTest;

    beforeEach(function () {
        radioGroupDescriptionUnderTest = RadioGroup();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and 'RadioGroup' LeanFT type", function () {
            radioGroupDescriptionUnderTest = new RadioGroup();
            assert.deepEqual(radioGroupDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "RadioGroup"
            });
        });
    });

    describe("classPath", function () {
        it("should add 'class path' to _properties when value is given", function () {
            radioGroupDescriptionUnderTest.classPath("test");
            assert.strictEqual(radioGroupDescriptionUnderTest._properties["class path"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = radioGroupDescriptionUnderTest.classPath("test");
            assert.strictEqual(result, radioGroupDescriptionUnderTest);
        });

        it("should remove 'classPath' from _properties when value is null", function () {
            radioGroupDescriptionUnderTest._properties["class path"] = "test";
            radioGroupDescriptionUnderTest.classPath(null);
            assert(!("test" in radioGroupDescriptionUnderTest._properties));
        });

        it("should return the value of 'class path' from _properties when value is not given", function () {
            radioGroupDescriptionUnderTest._properties["class path"] = "test";
            var result = radioGroupDescriptionUnderTest.classPath();
            assert.strictEqual(result, "test");
        });
    });

    describe("isEnabled", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            radioGroupDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(radioGroupDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given is given in string", function () {
            radioGroupDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(radioGroupDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = radioGroupDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(result, radioGroupDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            radioGroupDescriptionUnderTest._properties["enabled"] = "true";
            radioGroupDescriptionUnderTest.isEnabled(null);
            assert(!("true" in radioGroupDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            radioGroupDescriptionUnderTest._properties["enabled"] = "true";
            var result = radioGroupDescriptionUnderTest.isEnabled();
            assert.strictEqual(result, "true");
        });
    });

    describe("objectDescription", function () {
        it("should add 'description' to _properties when value is given", function () {
            radioGroupDescriptionUnderTest.objectDescription("test");
            assert.strictEqual(radioGroupDescriptionUnderTest._properties["description"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = radioGroupDescriptionUnderTest.objectDescription("test");
            assert.strictEqual(result, radioGroupDescriptionUnderTest);
        });

        it("should remove 'description' from _properties when value is null", function () {
            radioGroupDescriptionUnderTest._properties["description"] = "test";
            radioGroupDescriptionUnderTest.objectDescription(null);
            assert(!("test" in radioGroupDescriptionUnderTest._properties));
        });

        it("should return the value of 'description' from _properties when value is not given", function () {
            radioGroupDescriptionUnderTest._properties["description"] = "test";
            var result = radioGroupDescriptionUnderTest.objectDescription();
            assert.strictEqual(result, "test");
        });
    });

    describe("objectName", function () {
        it("should add 'developer name' to _properties when value is given", function () {
            radioGroupDescriptionUnderTest.objectName("test");
            assert.strictEqual(radioGroupDescriptionUnderTest._properties["developer name"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = radioGroupDescriptionUnderTest.objectName("test");
            assert.strictEqual(result, radioGroupDescriptionUnderTest);
        });

        it("should remove 'developer name' from _properties when value is null", function () {
            radioGroupDescriptionUnderTest._properties["developer name"] = "test";
            radioGroupDescriptionUnderTest.objectName(null);
            assert(!("test" in radioGroupDescriptionUnderTest._properties));
        });

        it("should return the value of 'developer name' from _properties when value is not given", function () {
            radioGroupDescriptionUnderTest._properties["developer name"] = "test";
            var result = radioGroupDescriptionUnderTest.objectName();
            assert.strictEqual(result, "test");
        });
    });

    describe("tooltipText", function () {
        it("should add 'tooltip' to _properties when value is given", function () {
            radioGroupDescriptionUnderTest.tooltipText("test");
            assert.strictEqual(radioGroupDescriptionUnderTest._properties["tooltip"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = radioGroupDescriptionUnderTest.tooltipText("test");
            assert.strictEqual(result, radioGroupDescriptionUnderTest);
        });

        it("should remove 'tooltip' from _properties when value is null", function () {
            radioGroupDescriptionUnderTest._properties["tooltip"] = "test";
            radioGroupDescriptionUnderTest.tooltipText(null);
            assert(!("test" in radioGroupDescriptionUnderTest._properties));
        });

        it("should return the value of 'tooltip' from _properties when value is not given", function () {
            radioGroupDescriptionUnderTest._properties["tooltip"] = "test";
            var result = radioGroupDescriptionUnderTest.tooltipText();
            assert.strictEqual(result, "test");
        });
    });
    
    describe("selectedItem", function () {
        it("should add 'selected item' to _properties when value is given", function () {
            radioGroupDescriptionUnderTest.selectedItem("test");
            assert.strictEqual(radioGroupDescriptionUnderTest._properties["selected item"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = radioGroupDescriptionUnderTest.selectedItem("test");
            assert.strictEqual(result, radioGroupDescriptionUnderTest);
        });

        it("should remove 'selected item' from _properties when value is null", function () {
            radioGroupDescriptionUnderTest._properties["selected item"] = "test";
            radioGroupDescriptionUnderTest.selectedItem(null);
            assert(!("test" in radioGroupDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            radioGroupDescriptionUnderTest._properties["selected item"] = "test";
            var result = radioGroupDescriptionUnderTest.selectedItem();
            assert.strictEqual(result, "test");
        });
    });

    describe("caption", function () {
        it("should add 'caption' to _properties when value is given", function () {
            radioGroupDescriptionUnderTest.caption("test");
            assert.strictEqual(radioGroupDescriptionUnderTest._properties["prompt"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = radioGroupDescriptionUnderTest.caption("test");
            assert.strictEqual(result, radioGroupDescriptionUnderTest);
        });

        it("should remove 'caption' from _properties when value is null", function () {
            radioGroupDescriptionUnderTest._properties["prompt"] = "test";
            radioGroupDescriptionUnderTest.caption(null);
            assert(!("test" in radioGroupDescriptionUnderTest._properties));
        });

        it("should return the value of 'prompt' from _properties when value is not given", function () {
            radioGroupDescriptionUnderTest._properties["prompt"] = "test";
            var result = radioGroupDescriptionUnderTest.caption();
            assert.strictEqual(result, "test");
        });
    });

    describe("selectedIndex", function () {
        it("should add 'selected index' to _properties when value is given", function () {
            radioGroupDescriptionUnderTest.selectedIndex(4);
            assert.strictEqual(radioGroupDescriptionUnderTest._properties["selected index"], 5);
        });

        it("should add 'selected index' to _properties when value is given is given in string", function () {
            radioGroupDescriptionUnderTest.selectedIndex('4');
            assert.strictEqual(radioGroupDescriptionUnderTest._properties["selected index"], 5);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = radioGroupDescriptionUnderTest.selectedIndex(4);
            assert.strictEqual(result, radioGroupDescriptionUnderTest);
        });

        it("should remove 'selected index' from _properties when value is null", function () {
            radioGroupDescriptionUnderTest._properties["selected index"] = 4;
            radioGroupDescriptionUnderTest.selectedIndex(null);
            assert(!(4 in radioGroupDescriptionUnderTest._properties));
        });

        it("should return the value of 'selected index' from _properties when value is not given", function () {
            radioGroupDescriptionUnderTest._properties["selected index"] = 4;
            var result = radioGroupDescriptionUnderTest.selectedIndex();
            assert.strictEqual(result, 3);
        });
    });
});

describe("Radio Group Test Object", function () {
    var RadioGroupTO = require("../lib/radio_group.js").RadioGroupTO;
    var RadioGroupItem = require("../lib/radio_group_item.js").RadioGroupItem;
    var radioGroupTestObjectUnderTest;

    beforeEach(function () {
        radioGroupTestObjectUnderTest = new RadioGroupTO();
        sinon.stub(radioGroupTestObjectUnderTest, "_executeNotWrapped");
        sinon.stub(radioGroupTestObjectUnderTest, "_getROProperty");
        sinon.stub(radioGroupTestObjectUnderTest, "_executeWithEvents");
    });

    describe("classPath method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'class path'", function () {
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);
            radioGroupTestObjectUnderTest.classPath();
            sinon.assert.calledOnce(radioGroupTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(radioGroupTestObjectUnderTest._getROProperty, "class path", sinon.match({}));
        });

        it("should return promise as is", function () {
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = radioGroupTestObjectUnderTest.classPath();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEnabled method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'enabled'", function () {
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);
            radioGroupTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(radioGroupTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(radioGroupTestObjectUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return promise as is", function () {
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = radioGroupTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("objectDescription method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'description'", function () {
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);
            radioGroupTestObjectUnderTest.objectDescription();
            sinon.assert.calledOnce(radioGroupTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(radioGroupTestObjectUnderTest._getROProperty, "description", sinon.match({}));
        });

        it("should return promise as is", function () {
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = radioGroupTestObjectUnderTest.objectDescription();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("objectName method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'developer name'", function () {
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);
            radioGroupTestObjectUnderTest.objectName();
            sinon.assert.calledOnce(radioGroupTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(radioGroupTestObjectUnderTest._getROProperty, "developer name", sinon.match({}));
        });

        it("should return promise as is", function () {
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = radioGroupTestObjectUnderTest.objectName();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("tooltipText method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'tooltip'", function () {
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);
            radioGroupTestObjectUnderTest.tooltipText();
            sinon.assert.calledOnce(radioGroupTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(radioGroupTestObjectUnderTest._getROProperty, "tooltip", sinon.match({}));
        });

        it("should return promise as is", function () {
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = radioGroupTestObjectUnderTest.tooltipText();
            assert.strictEqual(res, promiseMock);
        });
    });
    
    describe("selectedItem method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'selected item'", function () {
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);
            radioGroupTestObjectUnderTest.selectedItem();
            sinon.assert.calledOnce(radioGroupTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(radioGroupTestObjectUnderTest._getROProperty, "selected item", sinon.match({}));
        });

        it("should return promise as is", function () {
            var radioGroupTOMock = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
            var item = new RadioGroupItem(radioGroupTOMock, "test");
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);

            var res = radioGroupTestObjectUnderTest.selectedItem();
            assert.strictEqual(res._identifier, item._identifier);
        });
    });

    describe("caption method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'caption'", function () {
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);
            radioGroupTestObjectUnderTest.caption();
            sinon.assert.calledOnce(radioGroupTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(radioGroupTestObjectUnderTest._getROProperty, "prompt", sinon.match({}));
        });

        it("should return promise as is", function () {
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = radioGroupTestObjectUnderTest.caption();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("selectedIndex method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb(4);
            }
        };

        it("should execute _getROProperty 'selected index'", function () {
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);
            radioGroupTestObjectUnderTest.selectedIndex();
            sinon.assert.calledOnce(radioGroupTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(radioGroupTestObjectUnderTest._getROProperty, "selected index", sinon.match({}));
        });

        it("should return promise as is", function () {
            radioGroupTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = radioGroupTestObjectUnderTest.selectedIndex();
            assert.strictEqual(res, 3);
        });
    });

    describe("getItem method", function () {
        it("should throw error if path is undefined", function () {
            assert.throws(function () {
                radioGroupTestObjectUnderTest.getItem();
            });
        });

        it("should throw error if path is null", function () {
            assert.throws(function () {
                radioGroupTestObjectUnderTest.getItem(null);
            });
        });

        it("should return the RadioGroupItem", function () {
            var res = radioGroupTestObjectUnderTest.getItem("Item1");
            assert.strictEqual(res._identifier, "Item1");
            assert.deepEqual(res._ownerRadioGroup, radioGroupTestObjectUnderTest);
        });
    });

    describe("_createItem method", function () {
        it("should return the RadioGroupItem with correct values", function () {
            var res = radioGroupTestObjectUnderTest._createItem("Item1", "Item1");
            assert.strictEqual(res._identifier, "Item1");
            assert.deepEqual(res._ownerRadioGroup, radioGroupTestObjectUnderTest);
        });
    });

    describe("_isItemSelected method", function () {
        var executionPromise;
        beforeEach(function () {
            executionPromise = {
                then: function (cb) {
                    return cb(true);
                }
            };
            radioGroupTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            radioGroupTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = radioGroupTestObjectUnderTest._isItemSelected("item1");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'IsSelected' with correct parameters, if input is number", function () {
            radioGroupTestObjectUnderTest._isItemSelected(0);
            sinon.assert.calledOnce(radioGroupTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(radioGroupTestObjectUnderTest._executeNotWrapped, sinon.match({0: 0}), "IsSelected", 1);
        });

        it("should execute _executeNotWrapped 'IsSelected' with correct parameters, if input is string", function () {
            radioGroupTestObjectUnderTest._isItemSelected("Item1");
            sinon.assert.calledOnce(radioGroupTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(radioGroupTestObjectUnderTest._executeNotWrapped, sinon.match({0: "Item1"}), "IsSelected", "Item1");
        });
    });

    describe("select method", function () {
        beforeEach(function () {
            sinon.stub(radioGroupTestObjectUnderTest, "_itemTransform");
        });

        it("should execute command 'select' if the 'item' parameter is a RadioGroupItem", function () {
            radioGroupTestObjectUnderTest._itemTransform.returns("radioGroupItem");
            var radioGroupTOMock = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
            var item = new RadioGroupItem(radioGroupTOMock, "radioGroupItem", "radioGroupItem");

            radioGroupTestObjectUnderTest.select(item);
            sinon.assert.calledOnce(radioGroupTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(radioGroupTestObjectUnderTest._executeWithEvents, sinon.match({0: item}), "Select", "radioGroupItem");
        });

        it("should execute command 'select' if the 'item' parameter is string", function () {
            radioGroupTestObjectUnderTest._itemTransform.returns("radioGroupItem2");
            radioGroupTestObjectUnderTest.select("radioGroupItem2");
            sinon.assert.calledOnce(radioGroupTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(radioGroupTestObjectUnderTest._executeWithEvents, sinon.match({0: "radioGroupItem2"}), "Select", "radioGroupItem2");
        });

        it("should execute command 'select' if the 'item' parameter is number", function () {
            radioGroupTestObjectUnderTest._itemTransform.returns(3);
            radioGroupTestObjectUnderTest.select(3);
            sinon.assert.calledOnce(radioGroupTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(radioGroupTestObjectUnderTest._executeWithEvents, sinon.match({0: 3}), "Select", 3);
        });

        it("should throw error if the 'item' parameter is null", function () {
            assert.throws(function () {
                radioGroupTestObjectUnderTest.select(null);
            });
        });

        it("should throw error if the 'item' parameter is undefined", function () {
            assert.throws(function () {
                radioGroupTestObjectUnderTest.select();
            });
        });
    });

    describe("setFocus method", function () {
        it("should execute command 'SetFocus'", function () {
            radioGroupTestObjectUnderTest.setFocus();
            sinon.assert.calledOnce(radioGroupTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(radioGroupTestObjectUnderTest._executeWithEvents, sinon.match({}), "SetFocus");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            radioGroupTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = radioGroupTestObjectUnderTest.setFocus();
            assert.strictEqual(res, executionPromise);
        });
    });
});