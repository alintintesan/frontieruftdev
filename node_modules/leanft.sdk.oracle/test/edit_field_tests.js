// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("EditField Description", function () {
    var EditField = require("../lib/edit_field.js").EditField;
    var editFieldDescriptionUnderTest;

    beforeEach(function () {
        editFieldDescriptionUnderTest = EditField();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and 'EditField' LeanFT type", function () {
            editFieldDescriptionUnderTest = new EditField();
            assert.deepEqual(editFieldDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "EditField"
            });
        });
    });

    describe("text", function () {
        it("should add 'text' to _properties when value is given", function () {
            editFieldDescriptionUnderTest.text("test");
            assert.strictEqual(editFieldDescriptionUnderTest._properties["value"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = editFieldDescriptionUnderTest.text("test");
            assert.strictEqual(result, editFieldDescriptionUnderTest);
        });

        it("should remove 'text' from _properties when value is null", function () {
            editFieldDescriptionUnderTest._properties["value"] = "test";
            editFieldDescriptionUnderTest.text(null);
            assert(!("test" in editFieldDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            editFieldDescriptionUnderTest._properties["value"] = "test";
            var result = editFieldDescriptionUnderTest.text();
            assert.strictEqual(result, "test");
        });
    });

    describe("caption", function () {
        it("should add 'caption' to _properties when value is given", function () {
            editFieldDescriptionUnderTest.caption("test");
            assert.strictEqual(editFieldDescriptionUnderTest._properties["prompt"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = editFieldDescriptionUnderTest.caption("test");
            assert.strictEqual(result, editFieldDescriptionUnderTest);
        });

        it("should remove 'caption' from _properties when value is null", function () {
            editFieldDescriptionUnderTest._properties["prompt"] = "test";
            editFieldDescriptionUnderTest.caption(null);
            assert(!("test" in editFieldDescriptionUnderTest._properties));
        });

        it("should return the value of 'prompt' from _properties when value is not given", function () {
            editFieldDescriptionUnderTest._properties["prompt"] = "test";
            var result = editFieldDescriptionUnderTest.caption();
            assert.strictEqual(result, "test");
        });
    });

    describe("isEditable", function () {
        it("should add 'isEditable' to _properties when value is given", function () {
            editFieldDescriptionUnderTest.isEditable(true);
            assert.strictEqual(editFieldDescriptionUnderTest._properties["editable"], true);
        });

        it("should add 'isEditable' to _properties when value is given is given in string", function () {
            editFieldDescriptionUnderTest.isEditable("true");
            assert.strictEqual(editFieldDescriptionUnderTest._properties["editable"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = editFieldDescriptionUnderTest.isEditable("true");
            assert.strictEqual(result, editFieldDescriptionUnderTest);
        });

        it("should remove 'isEditable' from _properties when value is null", function () {
            editFieldDescriptionUnderTest._properties["editable"] = "true";
            editFieldDescriptionUnderTest.isEditable(null);
            assert(!("true" in editFieldDescriptionUnderTest._properties));
        });

        it("should return the value of 'editable' from _properties when value is not given", function () {
            editFieldDescriptionUnderTest._properties["editable"] = "true";
            var result = editFieldDescriptionUnderTest.isEditable();
            assert.strictEqual(result, "true");
        });
    });

    describe("classPath", function () {
        it("should add 'class path' to _properties when value is given", function () {
            editFieldDescriptionUnderTest.classPath("test");
            assert.strictEqual(editFieldDescriptionUnderTest._properties["class path"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = editFieldDescriptionUnderTest.classPath("test");
            assert.strictEqual(result, editFieldDescriptionUnderTest);
        });

        it("should remove 'classPath' from _properties when value is null", function () {
            editFieldDescriptionUnderTest._properties["class path"] = "test";
            editFieldDescriptionUnderTest.classPath(null);
            assert(!("test" in editFieldDescriptionUnderTest._properties));
        });

        it("should return the value of 'class path' from _properties when value is not given", function () {
            editFieldDescriptionUnderTest._properties["class path"] = "test";
            var result = editFieldDescriptionUnderTest.classPath();
            assert.strictEqual(result, "test");
        });
    });

    describe("objectDescription", function () {
        it("should add 'description' to _properties when value is given", function () {
            editFieldDescriptionUnderTest.objectDescription("test");
            assert.strictEqual(editFieldDescriptionUnderTest._properties["description"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = editFieldDescriptionUnderTest.objectDescription("test");
            assert.strictEqual(result, editFieldDescriptionUnderTest);
        });

        it("should remove 'description' from _properties when value is null", function () {
            editFieldDescriptionUnderTest._properties["description"] = "test";
            editFieldDescriptionUnderTest.objectDescription(null);
            assert(!("test" in editFieldDescriptionUnderTest._properties));
        });

        it("should return the value of 'description' from _properties when value is not given", function () {
            editFieldDescriptionUnderTest._properties["description"] = "test";
            var result = editFieldDescriptionUnderTest.objectDescription();
            assert.strictEqual(result, "test");
        });
    });

    describe("objectName", function () {
        it("should add 'developer name' to _properties when value is given", function () {
            editFieldDescriptionUnderTest.objectName("test");
            assert.strictEqual(editFieldDescriptionUnderTest._properties["developer name"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = editFieldDescriptionUnderTest.objectName("test");
            assert.strictEqual(result, editFieldDescriptionUnderTest);
        });

        it("should remove 'developer name' from _properties when value is null", function () {
            editFieldDescriptionUnderTest._properties["developer name"] = "test";
            editFieldDescriptionUnderTest.objectName(null);
            assert(!("test" in editFieldDescriptionUnderTest._properties));
        });

        it("should return the value of 'developer name' from _properties when value is not given", function () {
            editFieldDescriptionUnderTest._properties["developer name"] = "test";
            var result = editFieldDescriptionUnderTest.objectName();
            assert.strictEqual(result, "test");
        });
    });

    describe("tooltipText", function () {
        it("should add 'tooltip' to _properties when value is given", function () {
            editFieldDescriptionUnderTest.tooltipText("test");
            assert.strictEqual(editFieldDescriptionUnderTest._properties["tooltip"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = editFieldDescriptionUnderTest.tooltipText("test");
            assert.strictEqual(result, editFieldDescriptionUnderTest);
        });

        it("should remove 'tooltip' from _properties when value is null", function () {
            editFieldDescriptionUnderTest._properties["tooltip"] = "test";
            editFieldDescriptionUnderTest.tooltipText(null);
            assert(!("test" in editFieldDescriptionUnderTest._properties));
        });

        it("should return the value of 'tooltip' from _properties when value is not given", function () {
            editFieldDescriptionUnderTest._properties["tooltip"] = "test";
            var result = editFieldDescriptionUnderTest.tooltipText();
            assert.strictEqual(result, "test");
        });
    });

    describe("isEnabled", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            editFieldDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(editFieldDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given is given in string", function () {
            editFieldDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(editFieldDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = editFieldDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(result, editFieldDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            editFieldDescriptionUnderTest._properties["enabled"] = "true";
            editFieldDescriptionUnderTest.isEnabled(null);
            assert(!("true" in editFieldDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            editFieldDescriptionUnderTest._properties["enabled"] = "true";
            var result = editFieldDescriptionUnderTest.isEnabled();
            assert.strictEqual(result, "true");
        });
    });
});

describe("Edit Field Test Object", function () {
    var EditFieldTO = require("../lib/edit_field.js").EditFieldTO;
    var editFieldTestObjectUnderTest;

    beforeEach(function () {
        editFieldTestObjectUnderTest = new EditFieldTO();
        sinon.stub(editFieldTestObjectUnderTest, "_getROProperty");
        sinon.stub(editFieldTestObjectUnderTest, "_executeWithEvents");
    });

    describe("text method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'text'", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            editFieldTestObjectUnderTest.text();
            sinon.assert.calledOnce(editFieldTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(editFieldTestObjectUnderTest._getROProperty, "value", sinon.match({}));
        });

        it("should return promise as is", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = editFieldTestObjectUnderTest.text();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("caption method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'caption'", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            editFieldTestObjectUnderTest.caption();
            sinon.assert.calledOnce(editFieldTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(editFieldTestObjectUnderTest._getROProperty, "prompt", sinon.match({}));
        });

        it("should return promise as is", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = editFieldTestObjectUnderTest.caption();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEditable method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'editable'", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            editFieldTestObjectUnderTest.isEditable();
            sinon.assert.calledOnce(editFieldTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(editFieldTestObjectUnderTest._getROProperty, "editable", sinon.match({}));
        });

        it("should return promise as is", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = editFieldTestObjectUnderTest.isEditable();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("classPath method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'class path'", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            editFieldTestObjectUnderTest.classPath();
            sinon.assert.calledOnce(editFieldTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(editFieldTestObjectUnderTest._getROProperty, "class path", sinon.match({}));
        });

        it("should return promise as is", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = editFieldTestObjectUnderTest.classPath();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("objectDescription method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'description'", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            editFieldTestObjectUnderTest.objectDescription();
            sinon.assert.calledOnce(editFieldTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(editFieldTestObjectUnderTest._getROProperty, "description", sinon.match({}));
        });

        it("should return promise as is", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = editFieldTestObjectUnderTest.objectDescription();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("objectName method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'developer name'", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            editFieldTestObjectUnderTest.objectName();
            sinon.assert.calledOnce(editFieldTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(editFieldTestObjectUnderTest._getROProperty, "developer name", sinon.match({}));
        });

        it("should return promise as is", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = editFieldTestObjectUnderTest.objectName();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("tooltipText method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'tooltip'", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            editFieldTestObjectUnderTest.tooltipText();
            sinon.assert.calledOnce(editFieldTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(editFieldTestObjectUnderTest._getROProperty, "tooltip", sinon.match({}));
        });

        it("should return promise as is", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = editFieldTestObjectUnderTest.tooltipText();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEnabled method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'enabled'", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            editFieldTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(editFieldTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(editFieldTestObjectUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return promise as is", function () {
            editFieldTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = editFieldTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });
    });
    
    describe("setText method", function () {
        it("should throw error if text is undefined", function () {
            assert.throws(function () {
                editFieldTestObjectUnderTest.setText();
            });
        });

        it("should throw error if date is null", function () {
            assert.throws(function () {
                editFieldTestObjectUnderTest.setText(null);
            });
        });

        it("should throw error if date is object", function () {
            assert.throws(function () {
                editFieldTestObjectUnderTest.setText({test: 'test'});
            });
        });

        it("should execute _executeWithEvents with 'Enter' and argument as string", function () {
            editFieldTestObjectUnderTest.setText("test");
            sinon.assert.calledOnce(editFieldTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(editFieldTestObjectUnderTest._executeWithEvents, sinon.match({}), "Enter", "test", false);
        });
    });

    describe("setTextAndValidate method", function () {
        it("should throw error if text is undefined", function () {
            assert.throws(function () {
                editFieldTestObjectUnderTest.setTextAndValidate();
            });
        });

        it("should throw error if date is null", function () {
            assert.throws(function () {
                editFieldTestObjectUnderTest.setTextAndValidate(null);
            });
        });

        it("should throw error if date is object", function () {
            assert.throws(function () {
                editFieldTestObjectUnderTest.setTextAndValidate({test: 'test'});
            });
        });

        it("should execute _executeWithEvents with 'Enter' and argument as string", function () {
            editFieldTestObjectUnderTest.setTextAndValidate("test");
            sinon.assert.calledOnce(editFieldTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(editFieldTestObjectUnderTest._executeWithEvents, sinon.match({}), "Enter", "test");
        });
    });

    describe("setFocus method", function () {
        it("should execute command 'SetFocus'", function () {
            editFieldTestObjectUnderTest.setFocus();
            sinon.assert.calledOnce(editFieldTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(editFieldTestObjectUnderTest._executeWithEvents, sinon.match({}), "SetFocus");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            editFieldTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = editFieldTestObjectUnderTest.setFocus();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("validate method", function () {
        it("should execute command 'Validate'", function () {
            editFieldTestObjectUnderTest.validate();
            sinon.assert.calledOnce(editFieldTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(editFieldTestObjectUnderTest._executeWithEvents, sinon.match({}), "Validate");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            editFieldTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = editFieldTestObjectUnderTest.validate();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("openDialog method", function () {
        it("should execute command 'OpenDialog'", function () {
            editFieldTestObjectUnderTest.openDialog();
            sinon.assert.calledOnce(editFieldTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(editFieldTestObjectUnderTest._executeWithEvents, sinon.match({}), "OpenDialog");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            editFieldTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = editFieldTestObjectUnderTest.openDialog();
            assert.strictEqual(res, executionPromise);
        });
    });
});