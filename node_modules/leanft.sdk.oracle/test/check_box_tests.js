// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("CheckBox Description", function () {
    var CheckBox = require("../lib/check_box.js").CheckBox;
    var checkBoxDescriptionUnderTest;

    beforeEach(function () {
        checkBoxDescriptionUnderTest = CheckBox();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and 'CheckBox' LeanFT type", function () {
            checkBoxDescriptionUnderTest = new CheckBox();
            assert.deepEqual(checkBoxDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "CheckBox"
            });
        });
    });

    describe("label", function () {
        it("should add 'label' to _properties when value is given", function () {
            checkBoxDescriptionUnderTest.label("test");
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["label"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkBoxDescriptionUnderTest.label("test");
            assert.strictEqual(result, checkBoxDescriptionUnderTest);
        });

        it("should remove 'label' from _properties when value is null", function () {
            checkBoxDescriptionUnderTest._properties["label"] = "test";
            checkBoxDescriptionUnderTest.label(null);
            assert(!("test" in checkBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'label' from _properties when value is not given", function () {
            checkBoxDescriptionUnderTest._properties["label"] = "test";
            var result = checkBoxDescriptionUnderTest.label();
            assert.strictEqual(result, "test");
        });
    });

    describe("caption", function () {
        it("should add 'caption' to _properties when value is given", function () {
            checkBoxDescriptionUnderTest.caption("test");
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["prompt"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkBoxDescriptionUnderTest.caption("test");
            assert.strictEqual(result, checkBoxDescriptionUnderTest);
        });

        it("should remove 'caption' from _properties when value is null", function () {
            checkBoxDescriptionUnderTest._properties["prompt"] = "test";
            checkBoxDescriptionUnderTest.caption(null);
            assert(!("test" in checkBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'prompt' from _properties when value is not given", function () {
            checkBoxDescriptionUnderTest._properties["prompt"] = "test";
            var result = checkBoxDescriptionUnderTest.caption();
            assert.strictEqual(result, "test");
        });
    });

    describe("isSelected", function () {
        it("should add 'isSelected' to _properties when value is given", function () {
            checkBoxDescriptionUnderTest.isSelected(true);
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["selected"], true);
        });

        it("should add 'isSelected' to _properties when value is given is given in string", function () {
            checkBoxDescriptionUnderTest.isSelected("true");
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["selected"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkBoxDescriptionUnderTest.isSelected("true");
            assert.strictEqual(result, checkBoxDescriptionUnderTest);
        });

        it("should remove 'isSelected' from _properties when value is null", function () {
            checkBoxDescriptionUnderTest._properties["selected"] = "true";
            checkBoxDescriptionUnderTest.isSelected(null);
            assert(!("true" in checkBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'selected' from _properties when value is not given", function () {
            checkBoxDescriptionUnderTest._properties["selected"] = "true";
            var result = checkBoxDescriptionUnderTest.isSelected();
            assert.strictEqual(result, "true");
        });
    });

    describe("classPath", function () {
        it("should add 'class path' to _properties when value is given", function () {
            checkBoxDescriptionUnderTest.classPath("test");
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["class path"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkBoxDescriptionUnderTest.classPath("test");
            assert.strictEqual(result, checkBoxDescriptionUnderTest);
        });

        it("should remove 'classPath' from _properties when value is null", function () {
            checkBoxDescriptionUnderTest._properties["class path"] = "test";
            checkBoxDescriptionUnderTest.classPath(null);
            assert(!("test" in checkBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'class path' from _properties when value is not given", function () {
            checkBoxDescriptionUnderTest._properties["class path"] = "test";
            var result = checkBoxDescriptionUnderTest.classPath();
            assert.strictEqual(result, "test");
        });
    });

    describe("objectDescription", function () {
        it("should add 'description' to _properties when value is given", function () {
            checkBoxDescriptionUnderTest.objectDescription("test");
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["description"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkBoxDescriptionUnderTest.objectDescription("test");
            assert.strictEqual(result, checkBoxDescriptionUnderTest);
        });

        it("should remove 'description' from _properties when value is null", function () {
            checkBoxDescriptionUnderTest._properties["description"] = "test";
            checkBoxDescriptionUnderTest.objectDescription(null);
            assert(!("test" in checkBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'description' from _properties when value is not given", function () {
            checkBoxDescriptionUnderTest._properties["description"] = "test";
            var result = checkBoxDescriptionUnderTest.objectDescription();
            assert.strictEqual(result, "test");
        });
    });

    describe("objectName", function () {
        it("should add 'developer name' to _properties when value is given", function () {
            checkBoxDescriptionUnderTest.objectName("test");
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["developer name"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkBoxDescriptionUnderTest.objectName("test");
            assert.strictEqual(result, checkBoxDescriptionUnderTest);
        });

        it("should remove 'developer name' from _properties when value is null", function () {
            checkBoxDescriptionUnderTest._properties["developer name"] = "test";
            checkBoxDescriptionUnderTest.objectName(null);
            assert(!("test" in checkBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'developer name' from _properties when value is not given", function () {
            checkBoxDescriptionUnderTest._properties["developer name"] = "test";
            var result = checkBoxDescriptionUnderTest.objectName();
            assert.strictEqual(result, "test");
        });
    });

    describe("tooltipText", function () {
        it("should add 'tooltip' to _properties when value is given", function () {
            checkBoxDescriptionUnderTest.tooltipText("test");
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["tooltip"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkBoxDescriptionUnderTest.tooltipText("test");
            assert.strictEqual(result, checkBoxDescriptionUnderTest);
        });

        it("should remove 'tooltip' from _properties when value is null", function () {
            checkBoxDescriptionUnderTest._properties["tooltip"] = "test";
            checkBoxDescriptionUnderTest.tooltipText(null);
            assert(!("test" in checkBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'tooltip' from _properties when value is not given", function () {
            checkBoxDescriptionUnderTest._properties["tooltip"] = "test";
            var result = checkBoxDescriptionUnderTest.tooltipText();
            assert.strictEqual(result, "test");
        });
    });

    describe("isEnabled", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            checkBoxDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given is given in string", function () {
            checkBoxDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkBoxDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(result, checkBoxDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            checkBoxDescriptionUnderTest._properties["enabled"] = "true";
            checkBoxDescriptionUnderTest.isEnabled(null);
            assert(!("true" in checkBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            checkBoxDescriptionUnderTest._properties["enabled"] = "true";
            var result = checkBoxDescriptionUnderTest.isEnabled();
            assert.strictEqual(result, "true");
        });
    });
});

describe("Check Box Test Object", function () {
    var CheckBoxTO = require("../lib/check_box.js").CheckBoxTO;
    var checkBoxTestObjectUnderTest;

    beforeEach(function () {
        checkBoxTestObjectUnderTest = new CheckBoxTO();
        sinon.stub(checkBoxTestObjectUnderTest, "_getROProperty");
        sinon.stub(checkBoxTestObjectUnderTest, "_executeWithEvents");
    });

    describe("label method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'label'", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            checkBoxTestObjectUnderTest.label();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._getROProperty, "label", sinon.match({}));
        });

        it("should return promise as is", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = checkBoxTestObjectUnderTest.label();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("caption method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'caption'", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            checkBoxTestObjectUnderTest.caption();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._getROProperty, "prompt", sinon.match({}));
        });

        it("should return promise as is", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = checkBoxTestObjectUnderTest.caption();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isSelected method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'selected'", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            checkBoxTestObjectUnderTest.isSelected();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._getROProperty, "selected", sinon.match({}));
        });

        it("should return promise as is", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = checkBoxTestObjectUnderTest.isSelected();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("classPath method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'class path'", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            checkBoxTestObjectUnderTest.classPath();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._getROProperty, "class path", sinon.match({}));
        });

        it("should return promise as is", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = checkBoxTestObjectUnderTest.classPath();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("objectDescription method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'description'", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            checkBoxTestObjectUnderTest.objectDescription();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._getROProperty, "description", sinon.match({}));
        });

        it("should return promise as is", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = checkBoxTestObjectUnderTest.objectDescription();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("objectName method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'developer name'", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            checkBoxTestObjectUnderTest.objectName();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._getROProperty, "developer name", sinon.match({}));
        });

        it("should return promise as is", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = checkBoxTestObjectUnderTest.objectName();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("tooltipText method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'tooltip'", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            checkBoxTestObjectUnderTest.tooltipText();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._getROProperty, "tooltip", sinon.match({}));
        });

        it("should return promise as is", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = checkBoxTestObjectUnderTest.tooltipText();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEnabled method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'enabled'", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            checkBoxTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return promise as is", function () {
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = checkBoxTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });
    });
    
    describe("clear method", function () {
        it("should execute command 'Clear'", function () {
            checkBoxTestObjectUnderTest.clear();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._executeWithEvents, sinon.match({}), "Clear");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            checkBoxTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = checkBoxTestObjectUnderTest.clear();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("setFocus method", function () {
        it("should execute command 'SetFocus'", function () {
            checkBoxTestObjectUnderTest.setFocus();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._executeWithEvents, sinon.match({}), "SetFocus");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            checkBoxTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = checkBoxTestObjectUnderTest.setFocus();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("select method", function () {
        it("should execute command 'Select'", function () {
            checkBoxTestObjectUnderTest.select();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._executeWithEvents, sinon.match({}), "Select");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            checkBoxTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = checkBoxTestObjectUnderTest.select();
            assert.strictEqual(res, executionPromise);
        });
    });
});