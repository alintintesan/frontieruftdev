// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Calendar Description", function () {
    var Calendar = require("../lib/calendar.js").Calendar;
    var calendarDescriptionUnderTest;

    beforeEach(function () {
        calendarDescriptionUnderTest = Calendar();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and 'Calendar' LeanFT type", function () {
            calendarDescriptionUnderTest = new Calendar();
            assert.deepEqual(calendarDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "Calendar"
            });
        });
    });

    describe("title", function () {
        it("should add 'title' to _properties when value is given", function () {
            calendarDescriptionUnderTest.title("test");
            assert.strictEqual(calendarDescriptionUnderTest._properties["title"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = calendarDescriptionUnderTest.title("test");
            assert.strictEqual(result, calendarDescriptionUnderTest);
        });

        it("should remove 'title' from _properties when value is null", function () {
            calendarDescriptionUnderTest._properties["title"] = "test";
            calendarDescriptionUnderTest.title(null);
            assert(!("test" in calendarDescriptionUnderTest._properties));
        });

        it("should return the value of 'title' from _properties when value is not given", function () {
            calendarDescriptionUnderTest._properties["title"] = "test";
            var result = calendarDescriptionUnderTest.title();
            assert.strictEqual(result, "test");
        });
    });

    describe("classPath", function () {
        it("should add 'class path' to _properties when value is given", function () {
            calendarDescriptionUnderTest.classPath("test");
            assert.strictEqual(calendarDescriptionUnderTest._properties["class path"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = calendarDescriptionUnderTest.classPath("test");
            assert.strictEqual(result, calendarDescriptionUnderTest);
        });

        it("should remove 'classPath' from _properties when value is null", function () {
            calendarDescriptionUnderTest._properties["class path"] = "test";
            calendarDescriptionUnderTest.classPath(null);
            assert(!("test" in calendarDescriptionUnderTest._properties));
        });

        it("should return the value of 'class path' from _properties when value is not given", function () {
            calendarDescriptionUnderTest._properties["class path"] = "test";
            var result = calendarDescriptionUnderTest.classPath();
            assert.strictEqual(result, "test");
        });
    });

    describe("isEnabled", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            calendarDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(calendarDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given is given in string", function () {
            calendarDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(calendarDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = calendarDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(result, calendarDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            calendarDescriptionUnderTest._properties["enabled"] = "true";
            calendarDescriptionUnderTest.isEnabled(null);
            assert(!("true" in calendarDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            calendarDescriptionUnderTest._properties["enabled"] = "true";
            var result = calendarDescriptionUnderTest.isEnabled();
            assert.strictEqual(result, "true");
        });
    });
});

describe("Calendar Test Object", function () {
    var CalendarTO = require("../lib/calendar.js").CalendarTO;
    var calendarTestObjectUnderTest;

    beforeEach(function () {
        calendarTestObjectUnderTest = new CalendarTO();
        sinon.stub(calendarTestObjectUnderTest, "_getROProperty");
        sinon.stub(calendarTestObjectUnderTest, "_executeWithEvents");
    });

    describe("title method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'title'", function () {
            calendarTestObjectUnderTest._getROProperty.returns(promiseMock);
            calendarTestObjectUnderTest.title();
            sinon.assert.calledOnce(calendarTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(calendarTestObjectUnderTest._getROProperty, "title", sinon.match({}));
        });

        it("should return promise as is", function () {
            calendarTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = calendarTestObjectUnderTest.title();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("classPath method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'class path'", function () {
            calendarTestObjectUnderTest._getROProperty.returns(promiseMock);
            calendarTestObjectUnderTest.classPath();
            sinon.assert.calledOnce(calendarTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(calendarTestObjectUnderTest._getROProperty, "class path", sinon.match({}));
        });

        it("should return promise as is", function () {
            calendarTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = calendarTestObjectUnderTest.classPath();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEnabled method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'enabled'", function () {
            calendarTestObjectUnderTest._getROProperty.returns(promiseMock);
            calendarTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(calendarTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(calendarTestObjectUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return promise as is", function () {
            calendarTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = calendarTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("cancel method", function () {
        it("should execute command 'Cancel'", function () {
            calendarTestObjectUnderTest.cancel();
            sinon.assert.calledOnce(calendarTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(calendarTestObjectUnderTest._executeWithEvents, sinon.match({}), "Cancel");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            calendarTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = calendarTestObjectUnderTest.cancel();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("setDate method", function () {
        it("should throw error if date is undefined", function () {
            assert.throws(function () {
                calendarTestObjectUnderTest.setDate();
            });
        });

        it("should throw error if date is null", function () {
            assert.throws(function () {
                calendarTestObjectUnderTest.setDate(null);
            });
        });

        it("should execute _executeWithEvents with 'Enter' and argument as Date", function () {
            calendarTestObjectUnderTest.setDate(new Date(2016, 2, 17));
            sinon.assert.calledOnce(calendarTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(calendarTestObjectUnderTest._executeWithEvents, sinon.match({0: new Date(2016, 2, 17)}), "Enter", "17-Mar-2016");
        });

        it("should throw error if date is an object not a Date", function () {
            assert.throws(function () {
                calendarTestObjectUnderTest.setDate({ceva: "tare"});
            });
        });

        it("should call _executeWithEvents with 'Enter' and argument as string", function () {
            calendarTestObjectUnderTest.setDate("25/04/2016");
            sinon.assert.calledOnce(calendarTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(calendarTestObjectUnderTest._executeWithEvents, sinon.match({}), "Enter", "25/04/2016");
        });
    });
});