// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Table Description", function () {
    var Table = require("../lib/table.js").Table;
    var tableDescriptionUnderTest;

    beforeEach(function () {
        tableDescriptionUnderTest = Table();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and 'Table' LeanFT type", function () {
            tableDescriptionUnderTest = new Table();
            assert.deepEqual(tableDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "Table"
            });
        });
    });

    describe("isEnabled", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            tableDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(tableDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given is given in string", function () {
            tableDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(tableDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tableDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(result, tableDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            tableDescriptionUnderTest._properties["enabled"] = "true";
            tableDescriptionUnderTest.isEnabled(null);
            assert(!("true" in tableDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            tableDescriptionUnderTest._properties["enabled"] = "true";
            var result = tableDescriptionUnderTest.isEnabled();
            assert.strictEqual(result, "true");
        });
    });
    
    describe("objectName", function () {
        it("should add 'block name' to _properties when value is given", function () {
            tableDescriptionUnderTest.objectName("test");
            assert.strictEqual(tableDescriptionUnderTest._properties["block name"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tableDescriptionUnderTest.objectName("test");
            assert.strictEqual(result, tableDescriptionUnderTest);
        });

        it("should remove 'block name' from _properties when value is null", function () {
            tableDescriptionUnderTest._properties["block name"] = "test";
            tableDescriptionUnderTest.objectName(null);
            assert(!("test" in tableDescriptionUnderTest._properties));
        });

        it("should return the value of 'block name' from _properties when value is not given", function () {
            tableDescriptionUnderTest._properties["block name"] = "test";
            var result = tableDescriptionUnderTest.objectName();
            assert.strictEqual(result, "test");
        });
    });
    
    describe("rowsCount", function () {
        var rowsCount = 50;
        it("should add 'visible rows' to _properties when value is given", function () {
            tableDescriptionUnderTest.rowsCount(rowsCount);
            assert.strictEqual(tableDescriptionUnderTest._properties["visible rows"], rowsCount);
        });

        it("should add 'visible rows' to _properties when value is given in string", function () {
            tableDescriptionUnderTest.rowsCount(rowsCount.toString());
            assert.strictEqual(tableDescriptionUnderTest._properties["visible rows"], rowsCount);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tableDescriptionUnderTest.rowsCount(rowsCount);
            assert.strictEqual(result, tableDescriptionUnderTest);
        });

        it("should remove 'visible rows' from _properties when value is null", function () {
            tableDescriptionUnderTest._properties["visible rows"] = rowsCount;
            tableDescriptionUnderTest.rowsCount(null);
            assert(!("visible rows" in tableDescriptionUnderTest._properties));
        });

        it("should return the value of 'visible rows' from _properties when value is not given", function () {
            tableDescriptionUnderTest._properties["visible rows"] = rowsCount;
            var result = tableDescriptionUnderTest.rowsCount();
            assert.strictEqual(result, rowsCount);
        });
    });

    describe("columnsCount", function () {
        var columnsCount = 50;
        it("should add 'columns' to _properties when value is given", function () {
            tableDescriptionUnderTest.columnsCount(columnsCount);
            assert.strictEqual(tableDescriptionUnderTest._properties["columns"], columnsCount);
        });

        it("should add 'columns' to _properties when value is given in string", function () {
            tableDescriptionUnderTest.columnsCount(columnsCount.toString());
            assert.strictEqual(tableDescriptionUnderTest._properties["columns"], columnsCount);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tableDescriptionUnderTest.columnsCount(columnsCount);
            assert.strictEqual(result, tableDescriptionUnderTest);
        });

        it("should remove 'columns' from _properties when value is null", function () {
            tableDescriptionUnderTest._properties["columns"] = columnsCount;
            tableDescriptionUnderTest.columnsCount(null);
            assert(!("columns" in tableDescriptionUnderTest._properties));
        });

        it("should return the value of 'columns' from _properties when value is not given", function () {
            tableDescriptionUnderTest._properties["columns"] = columnsCount;
            var result = tableDescriptionUnderTest.columnsCount();
            assert.strictEqual(result, columnsCount);
        });
    });

    describe("columnHeaders", function () {
        var columnHeaders = ["colHeader1", "colHeader2"];
        it("should add 'column names' to _properties when value is given", function () {
            tableDescriptionUnderTest.columnHeaders(columnHeaders);
            assert.strictEqual(tableDescriptionUnderTest._properties["column names"], columnHeaders.join(";"));
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tableDescriptionUnderTest.columnHeaders(columnHeaders);
            assert.strictEqual(result, tableDescriptionUnderTest);
        });

        it("should remove 'column names' from _properties when value is null", function () {
            tableDescriptionUnderTest._properties["column names"] = columnHeaders;
            tableDescriptionUnderTest.columnHeaders(null);
            assert(!("column names" in tableDescriptionUnderTest._properties));
        });

        it("should return the value of 'column names' from _properties when value is not given", function () {
            tableDescriptionUnderTest._properties["column names"] = columnHeaders.join(";");
            var result = tableDescriptionUnderTest.columnHeaders();
            assert.deepEqual(result, columnHeaders);
        });
    });
});

describe("Table Test Object", function () {
    var TableTO = require("../lib/table.js").TableTO;
    var tableTestObjectUnderTest;

    beforeEach(function () {
        tableTestObjectUnderTest = new TableTO();
        sinon.stub(tableTestObjectUnderTest, "_getROProperty");
        sinon.stub(tableTestObjectUnderTest, "_executeNotWrapped");
        sinon.stub(tableTestObjectUnderTest, "_executeWithEvents");
        sinon.stub(tableTestObjectUnderTest, "_executeOnItemsCollection");
        sinon.stub(tableTestObjectUnderTest, "_executeSingleOpOnCollection");
    });

    describe("isEnabled method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'enabled'", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            tableTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(tableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tableTestObjectUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return promise as is", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = tableTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });
    });
    
    describe("rowsCount method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb(4);
            }
        };
        it("should execute _getROProperty 'visible rows'", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            tableTestObjectUnderTest.rowsCount();
            sinon.assert.calledOnce(tableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tableTestObjectUnderTest._getROProperty, "visible rows", sinon.match({}));
        });

        it("should return promise as is", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = tableTestObjectUnderTest.rowsCount();
            assert.strictEqual(res, promiseMock);
        });
    });
    
    describe("objectName method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'block name'", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            tableTestObjectUnderTest.objectName();
            sinon.assert.calledOnce(tableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tableTestObjectUnderTest._getROProperty, "block name", sinon.match({}));
        });

        it("should return promise as is", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = tableTestObjectUnderTest.objectName();
            assert.strictEqual(res, promiseMock);
        });
    });
    
    describe("columnHeaders method", function () {
        var columnHeaders = "colHeader1;colHeader2";
        var promiseMock = {
            then: function (cb) {
                return cb(columnHeaders);
            }
        };
        it("should execute _getROProperty 'column names'", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            tableTestObjectUnderTest.columnHeaders();
            sinon.assert.calledOnce(tableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tableTestObjectUnderTest._getROProperty, "column names", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = tableTestObjectUnderTest.columnHeaders();
            assert.deepEqual(res, columnHeaders.split(";"));
        });
    });

    describe("activateRow method", function () {
        it("should execute command 'ActivateRecord' if the 'row' parameter is an index", function () {
            tableTestObjectUnderTest.activateRow(0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0
            }), "ActivateRecord", 1);
        });

        it("should throw if the 'row' parameter is the header of a column", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.activateRow("column1");
            });
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.activateRow(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.activateRow(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.activateRow();
            });
        });
    });

    describe("_getRowsCount method", function () {
        var rowsCount = 2;
        var promiseMock = {
            then: function (cb) {
                return cb(rowsCount.toString());
            }
        };
        it("should execute _getROProperty 'visible rows'", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            tableTestObjectUnderTest._getRowsCount();
            sinon.assert.calledOnce(tableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tableTestObjectUnderTest._getROProperty, "visible rows", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = tableTestObjectUnderTest._getRowsCount();
            assert.strictEqual(res, rowsCount);
        });
    });

    describe("_getCellValue method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._getCellValue(0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetFieldValue' if the parameters are indices", function () {
            tableTestObjectUnderTest._getCellValue(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "GetFieldValue", 1, 1);
        });

        it("should execute _executeNotWrapped 'GetFieldValue' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._getCellValue(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header"
            }), "GetFieldValue", 1, "col header");
        });
    });

    describe("_setCellValue method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._setCellValue(0, 0, "some value");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'EnterField' if the parameters are indices", function () {
            tableTestObjectUnderTest._setCellValue(0, 0, "some value");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: "some value"
            }), "EnterField", 1, 1, "some value", false);
        });

        it("should execute _executeNotWrapped 'EnterField' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._setCellValue(0, "col header", "some value");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header",
                2: "some value"
            }), "EnterField", 1, "col header", "some value", false);
        });
    });

    describe("_setCellValueAndValidate method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._setCellValueAndValidate(0, 0, "some value");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'EnterField' if the parameters are indices", function () {
            tableTestObjectUnderTest._setCellValueAndValidate(0, 0, "some value");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: "some value"
            }), "EnterField", 1, 1, "some value");
        });

        it("should execute _executeNotWrapped 'EnterField' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._setCellValueAndValidate(0, "col header", "some value");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header",
                2: "some value"
            }), "EnterField", 1, "col header", "some value");
        });
    });

    describe("_getRowAndColumnCount method", function () {
        beforeEach(function () {
            sinon.stub(tableTestObjectUnderTest, "_getROProperties");
            var executionPromise = {
                then: function (cb) {
                    return cb(["4", "6"]);
                }
            };
            tableTestObjectUnderTest._getROProperties.returns(executionPromise);
        });

        it("should execute command '_getROProperties'", function () {
            tableTestObjectUnderTest._getRowAndColumnCount();
            sinon.assert.calledOnce(tableTestObjectUnderTest._getROProperties);
            sinon.assert.calledWith(tableTestObjectUnderTest._getROProperties, "visible rows", "columns");
        });

        it("should return rowCount and columnCount", function () {
            var res = tableTestObjectUnderTest._getRowAndColumnCount();
            assert.deepEqual(res, {rowCount: 4, columnCount: 6});
        });
    });

    describe("_getColumnCount method", function () {
        var columnCount = 6;
        var promiseMock = {
            then: function (cb) {
                return cb(columnCount.toString());
            }
        };
        it("should execute _getROProperty 'columns'", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            tableTestObjectUnderTest._getColumnCount();
            sinon.assert.calledOnce(tableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tableTestObjectUnderTest._getROProperty, "columns", sinon.match({}));
        });

        it("should return a number value when promise returns numeric string", function () {
            tableTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = tableTestObjectUnderTest._getColumnCount();
            assert.strictEqual(res, columnCount);
        });
    });

    describe("_createCell method", function () {
        it("should return the TableCell with correct values", function () {
            var res = tableTestObjectUnderTest._createCell(0, 0);
            assert.strictEqual(res._rowIdentifier, 0);
            assert.strictEqual(res._columnIdentifier, 0);
            assert.deepEqual(res._ownerTable, tableTestObjectUnderTest);
        });
    });

    describe("_getAsTestObject method", function () {
        it("should execute _executeNotWrapped 'GetFieldItem' if the parameters are indices", function () {
            tableTestObjectUnderTest._getAsTestObject(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "GetFieldItem", 1, 1);
        });

        it("should execute _executeNotWrapped 'GetFieldItem' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._getAsTestObject(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header"
            }), "GetFieldItem", 1, "col header");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._getAsTestObject(0,0);
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("_openDialog method", function () {
        it("should execute _executeNotWrapped 'OpenDialog' if the parameters are indices", function () {
            tableTestObjectUnderTest._openDialog(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "OpenDialog", 1, 1);
        });

        it("should execute _executeNotWrapped 'OpenDialog' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._openDialog(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header"
            }), "OpenDialog", 1, "col header");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._openDialog(0,0);
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("_setFocus method", function () {
        it("should execute _executeNotWrapped 'SetFocus' if the parameters are indices", function () {
            tableTestObjectUnderTest._setFocus(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "SetFocus", 1, 1);
        });

        it("should execute _executeNotWrapped 'SetFocus' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._setFocus(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header"
            }), "SetFocus", 1, "col header");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._setFocus(0,0);
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("_isEditable method", function () {
        it("should execute _executeNotWrapped 'IsFieldEditable' if the parameters are indices", function () {
            tableTestObjectUnderTest._isEditable(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "IsFieldEditable", 1, 1);
        });

        it("should execute _executeNotWrapped 'IsFieldEditable' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._isEditable(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header"
            }), "IsFieldEditable", 1, "col header");
        });

        it("should return the execution promise", function () {
            var executionPromise = {
                then: function (cb) {
                    return cb(true);
                }
            };
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._isEditable(0,0);
            assert.strictEqual(res, executionPromise);
        });
    });
});