// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Button Description", function () {
    var Button = require("../lib/button.js").Button;
    var buttonDescriptionUnderTest;

    beforeEach(function () {
        buttonDescriptionUnderTest = Button();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and 'Button' LeanFT type", function () {
            buttonDescriptionUnderTest = new Button();
            assert.deepEqual(buttonDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "Button"
            });
        });
    });

    describe("label", function () {
        it("should add 'label' to _properties when value is given", function () {
            buttonDescriptionUnderTest.label("test");
            assert.strictEqual(buttonDescriptionUnderTest._properties["label"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = buttonDescriptionUnderTest.label("test");
            assert.strictEqual(result, buttonDescriptionUnderTest);
        });

        it("should remove 'label' from _properties when value is null", function () {
            buttonDescriptionUnderTest._properties["label"] = "test";
            buttonDescriptionUnderTest.label(null);
            assert(!("test" in buttonDescriptionUnderTest._properties));
        });

        it("should return the value of 'label' from _properties when value is not given", function () {
            buttonDescriptionUnderTest._properties["label"] = "test";
            var result = buttonDescriptionUnderTest.label();
            assert.strictEqual(result, "test");
        });
    });

    describe("classPath", function () {
        it("should add 'class path' to _properties when value is given", function () {
            buttonDescriptionUnderTest.classPath("test");
            assert.strictEqual(buttonDescriptionUnderTest._properties["class path"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = buttonDescriptionUnderTest.classPath("test");
            assert.strictEqual(result, buttonDescriptionUnderTest);
        });

        it("should remove 'classPath' from _properties when value is null", function () {
            buttonDescriptionUnderTest._properties["class path"] = "test";
            buttonDescriptionUnderTest.classPath(null);
            assert(!("test" in buttonDescriptionUnderTest._properties));
        });

        it("should return the value of 'class path' from _properties when value is not given", function () {
            buttonDescriptionUnderTest._properties["class path"] = "test";
            var result = buttonDescriptionUnderTest.classPath();
            assert.strictEqual(result, "test");
        });
    });

    describe("isEnabled", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            buttonDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(buttonDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given is given in string", function () {
            buttonDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(buttonDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = buttonDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(result, buttonDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            buttonDescriptionUnderTest._properties["enabled"] = "true";
            buttonDescriptionUnderTest.isEnabled(null);
            assert(!("true" in buttonDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            buttonDescriptionUnderTest._properties["enabled"] = "true";
            var result = buttonDescriptionUnderTest.isEnabled();
            assert.strictEqual(result, "true");
        });
    });

    describe("objectDescription", function () {
        it("should add 'description' to _properties when value is given", function () {
            buttonDescriptionUnderTest.objectDescription("test");
            assert.strictEqual(buttonDescriptionUnderTest._properties["description"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = buttonDescriptionUnderTest.objectDescription("test");
            assert.strictEqual(result, buttonDescriptionUnderTest);
        });

        it("should remove 'description' from _properties when value is null", function () {
            buttonDescriptionUnderTest._properties["description"] = "test";
            buttonDescriptionUnderTest.objectDescription(null);
            assert(!("test" in buttonDescriptionUnderTest._properties));
        });

        it("should return the value of 'description' from _properties when value is not given", function () {
            buttonDescriptionUnderTest._properties["description"] = "test";
            var result = buttonDescriptionUnderTest.objectDescription();
            assert.strictEqual(result, "test");
        });
    });

    describe("objectName", function () {
        it("should add 'developer name' to _properties when value is given", function () {
            buttonDescriptionUnderTest.objectName("test");
            assert.strictEqual(buttonDescriptionUnderTest._properties["developer name"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = buttonDescriptionUnderTest.objectName("test");
            assert.strictEqual(result, buttonDescriptionUnderTest);
        });

        it("should remove 'developer name' from _properties when value is null", function () {
            buttonDescriptionUnderTest._properties["developer name"] = "test";
            buttonDescriptionUnderTest.objectName(null);
            assert(!("test" in buttonDescriptionUnderTest._properties));
        });

        it("should return the value of 'developer name' from _properties when value is not given", function () {
            buttonDescriptionUnderTest._properties["developer name"] = "test";
            var result = buttonDescriptionUnderTest.objectName();
            assert.strictEqual(result, "test");
        });
    });

    describe("tooltipText", function () {
        it("should add 'tooltip' to _properties when value is given", function () {
            buttonDescriptionUnderTest.tooltipText("test");
            assert.strictEqual(buttonDescriptionUnderTest._properties["tooltip"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = buttonDescriptionUnderTest.tooltipText("test");
            assert.strictEqual(result, buttonDescriptionUnderTest);
        });

        it("should remove 'tooltip' from _properties when value is null", function () {
            buttonDescriptionUnderTest._properties["tooltip"] = "test";
            buttonDescriptionUnderTest.tooltipText(null);
            assert(!("test" in buttonDescriptionUnderTest._properties));
        });

        it("should return the value of 'tooltip' from _properties when value is not given", function () {
            buttonDescriptionUnderTest._properties["tooltip"] = "test";
            var result = buttonDescriptionUnderTest.tooltipText();
            assert.strictEqual(result, "test");
        });
    });
});

describe("Button Test Object", function () {
    var ButtonTO = require("../lib/button.js").ButtonTO;
    var buttonTestObjectUnderTest;

    beforeEach(function () {
        buttonTestObjectUnderTest = new ButtonTO();
        sinon.stub(buttonTestObjectUnderTest, "_getROProperty");
        sinon.stub(buttonTestObjectUnderTest, "_executeWithEvents");
    });

    describe("classPath method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'class path'", function () {
            buttonTestObjectUnderTest._getROProperty.returns(promiseMock);
            buttonTestObjectUnderTest.classPath();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "class path", sinon.match({}));
        });

        it("should return promise as is", function () {
            buttonTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = buttonTestObjectUnderTest.classPath();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEnabled method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'enabled'", function () {
            buttonTestObjectUnderTest._getROProperty.returns(promiseMock);
            buttonTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return promise as is", function () {
            buttonTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = buttonTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("objectDescription method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'description'", function () {
            buttonTestObjectUnderTest._getROProperty.returns(promiseMock);
            buttonTestObjectUnderTest.objectDescription();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "description", sinon.match({}));
        });

        it("should return promise as is", function () {
            buttonTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = buttonTestObjectUnderTest.objectDescription();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("objectName method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'developer name'", function () {
            buttonTestObjectUnderTest._getROProperty.returns(promiseMock);
            buttonTestObjectUnderTest.objectName();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "developer name", sinon.match({}));
        });

        it("should return promise as is", function () {
            buttonTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = buttonTestObjectUnderTest.objectName();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("tooltipText method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'tooltip'", function () {
            buttonTestObjectUnderTest._getROProperty.returns(promiseMock);
            buttonTestObjectUnderTest.tooltipText();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "tooltip", sinon.match({}));
        });

        it("should return promise as is", function () {
            buttonTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = buttonTestObjectUnderTest.tooltipText();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("label method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'label'", function () {
            buttonTestObjectUnderTest._getROProperty.returns(promiseMock);
            buttonTestObjectUnderTest.label();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "label", sinon.match({}));
        });

        it("should return promise as is", function () {
            buttonTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = buttonTestObjectUnderTest.label();
            assert.strictEqual(res, promiseMock);
        });
    });
});