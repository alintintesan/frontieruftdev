// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Notification Description", function () {

    var Notification = require("../lib/notification.js").Notification;
    var NotificationType = require("../lib/notification.js").NotificationType;
    var notificationDescriptionUnderTest;

    beforeEach(function () {
        notificationDescriptionUnderTest = Notification();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and 'Notification' LeanFT type", function () {
            notificationDescriptionUnderTest = new Notification();
            assert.deepEqual(notificationDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "Notification"
            });
        });
    });

    describe("type method", function () {
        it("should return this - builder pattern when value is given", function () {
            var result = notificationDescriptionUnderTest.type(NotificationType.error);
            assert.strictEqual(result, notificationDescriptionUnderTest);
        });

        it("should add 'type' string to _properties when value is given with no case sensitive", function () {
            notificationDescriptionUnderTest.type("ERRoR");
            assert.strictEqual(notificationDescriptionUnderTest._properties["type"], "Error");
        });

        [["ERror", "Error"], ["DecIsion", "Decision"],
            ["InfO", "Info"], ["warNIng", "Warning"],].forEach(function(key) {
            it("should add 'type' string to _properties when value is given with no case sensitive " + key[0], function(){
                var input = key[0];
                var expected = key[1];
                notificationDescriptionUnderTest.type(input);
                assert.strictEqual(notificationDescriptionUnderTest._properties["type"], expected);
            });
        });

        [[NotificationType.error, "Error"], [NotificationType.decision, "Decision"],
            [NotificationType.info, "Info"], [NotificationType.warning, "Warning"],].forEach(function(key) {
            it("should add 'type' string to _properties when input is " + key[0], function(){
                var input = key[0];
                var expected = key[1];
                notificationDescriptionUnderTest.type(input);
                assert.strictEqual(notificationDescriptionUnderTest._properties["type"], expected);
            });
        });

        [["error", "Error"], ["decision", "Decision"],
            ["info", "Info"], ["warning", "Warning"],].forEach(function(key) {
            it("should add 'type' string to _properties when input string is " + key[0], function(){
                var input = key[0];
                var expected = key[1];
                notificationDescriptionUnderTest.type(input);
                assert.strictEqual(notificationDescriptionUnderTest._properties["type"], expected);
            });
        });

        it("should remove 'type' from _properties when value is null", function () {
            notificationDescriptionUnderTest._properties["type"] = "Error";
            notificationDescriptionUnderTest.type(null);
            assert(!("type" in notificationDescriptionUnderTest._properties));
        });

        it("should return the value of 'error' from _properties when value is not given", function () {
            notificationDescriptionUnderTest._properties["type"] = "Error";
            var result = notificationDescriptionUnderTest.type();
            assert.equal(result, NotificationType.error);
        });
    });

    describe("title", function () {
        it("should add 'title' to _properties when value is given", function () {
            notificationDescriptionUnderTest.title("test");
            assert.strictEqual(notificationDescriptionUnderTest._properties["title"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = notificationDescriptionUnderTest.title("test");
            assert.strictEqual(result, notificationDescriptionUnderTest);
        });

        it("should remove 'title' from _properties when value is null", function () {
            notificationDescriptionUnderTest._properties["title"] = "test";
            notificationDescriptionUnderTest.title(null);
            assert(!("test" in notificationDescriptionUnderTest._properties));
        });

        it("should return the value of 'title' from _properties when value is not given", function () {
            notificationDescriptionUnderTest._properties["title"] = "test";
            var result = notificationDescriptionUnderTest.title();
            assert.strictEqual(result, "test");
        });
    });

    describe("message", function () {
        it("should add 'message' to _properties when value is given", function () {
            notificationDescriptionUnderTest.message("test");
            assert.strictEqual(notificationDescriptionUnderTest._properties["message"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = notificationDescriptionUnderTest.message("test");
            assert.strictEqual(result, notificationDescriptionUnderTest);
        });

        it("should remove 'message' from _properties when value is null", function () {
            notificationDescriptionUnderTest._properties["message"] = "test";
            notificationDescriptionUnderTest.message(null);
            assert(!("test" in notificationDescriptionUnderTest._properties));
        });

        it("should return the value of 'message' from _properties when value is not given", function () {
            notificationDescriptionUnderTest._properties["message"] = "test";
            var result = notificationDescriptionUnderTest.message();
            assert.strictEqual(result, "test");
        });
    });

    describe("classPath", function () {
        it("should add 'class path' to _properties when value is given", function () {
            notificationDescriptionUnderTest.classPath("test");
            assert.strictEqual(notificationDescriptionUnderTest._properties["class path"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = notificationDescriptionUnderTest.classPath("test");
            assert.strictEqual(result, notificationDescriptionUnderTest);
        });

        it("should remove 'classPath' from _properties when value is null", function () {
            notificationDescriptionUnderTest._properties["class path"] = "test";
            notificationDescriptionUnderTest.classPath(null);
            assert(!("test" in notificationDescriptionUnderTest._properties));
        });

        it("should return the value of 'class path' from _properties when value is not given", function () {
            notificationDescriptionUnderTest._properties["class path"] = "test";
            var result = notificationDescriptionUnderTest.classPath();
            assert.strictEqual(result, "test");
        });
    });

    describe("isEnabled", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            notificationDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(notificationDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given is given in string", function () {
            notificationDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(notificationDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = notificationDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(result, notificationDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            notificationDescriptionUnderTest._properties["enabled"] = "true";
            notificationDescriptionUnderTest.isEnabled(null);
            assert(!("true" in notificationDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            notificationDescriptionUnderTest._properties["enabled"] = "true";
            var result = notificationDescriptionUnderTest.isEnabled();
            assert.strictEqual(result, "true");
        });
    });
});

describe("Notification Object", function () {
    var NotificationTO = require("../lib/notification.js").NotificationTO;
    var NotificationType = require("../lib/notification.js").NotificationType;
    var notificationTestObjectUnderTest;

    beforeEach(function () {
        notificationTestObjectUnderTest = new NotificationTO();
        sinon.stub(notificationTestObjectUnderTest, "_getROProperty");
        sinon.stub(notificationTestObjectUnderTest, "_executeWithEvents");
    });

    afterEach(function () {

    });

    describe("type method", function () {
        it("should execute _getROProperty 'error'", function () {
            var promiseMock = { then: function (cb) { return cb("Error"); } };
            notificationTestObjectUnderTest._getROProperty.returns(promiseMock);
            notificationTestObjectUnderTest.type();
            sinon.assert.calledOnce(notificationTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(notificationTestObjectUnderTest._getROProperty, "type", sinon.match({}));
        });

        it("should return promise as NotificationType", function () {
            var promiseMock = { then: function (cb) { return cb("Error"); } };
            notificationTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = notificationTestObjectUnderTest.type();
            assert.strictEqual(res, NotificationType.error);
        });
    });

    describe("title method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'title'", function () {
            notificationTestObjectUnderTest._getROProperty.returns(promiseMock);
            notificationTestObjectUnderTest.title();
            sinon.assert.calledOnce(notificationTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(notificationTestObjectUnderTest._getROProperty, "title", sinon.match({}));
        });

        it("should return promise as is", function () {
            notificationTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = notificationTestObjectUnderTest.title();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("message method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'message'", function () {
            notificationTestObjectUnderTest._getROProperty.returns(promiseMock);
            notificationTestObjectUnderTest.message();
            sinon.assert.calledOnce(notificationTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(notificationTestObjectUnderTest._getROProperty, "message", sinon.match({}));
        });

        it("should return promise as is", function () {
            notificationTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = notificationTestObjectUnderTest.message();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("classPath method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'class path'", function () {
            notificationTestObjectUnderTest._getROProperty.returns(promiseMock);
            notificationTestObjectUnderTest.classPath();
            sinon.assert.calledOnce(notificationTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(notificationTestObjectUnderTest._getROProperty, "class path", sinon.match({}));
        });

        it("should return promise as is", function () {
            notificationTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = notificationTestObjectUnderTest.classPath();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEnabled method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'enabled'", function () {
            notificationTestObjectUnderTest._getROProperty.returns(promiseMock);
            notificationTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(notificationTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(notificationTestObjectUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return promise as is", function () {
            notificationTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = notificationTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });
    });
    
    describe("cancel method", function () {
        it("should execute command 'Cancel'", function () {
            notificationTestObjectUnderTest.cancel();
            sinon.assert.calledOnce(notificationTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(notificationTestObjectUnderTest._executeWithEvents, sinon.match({}), "Cancel");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            notificationTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = notificationTestObjectUnderTest.cancel();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("approve method", function () {
        it("should execute command 'Approve'", function () {
            notificationTestObjectUnderTest.approve();
            sinon.assert.calledOnce(notificationTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(notificationTestObjectUnderTest._executeWithEvents, sinon.match({}), "Approve");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            notificationTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = notificationTestObjectUnderTest.approve();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("selectDefaultButton method", function () {
        it("should execute command 'ChooseDefault'", function () {
            notificationTestObjectUnderTest.selectDefaultButton();
            sinon.assert.calledOnce(notificationTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(notificationTestObjectUnderTest._executeWithEvents, sinon.match({}), "ChooseDefault");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            notificationTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = notificationTestObjectUnderTest.selectDefaultButton();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("decline method", function () {
        it("should execute command 'Decline'", function () {
            notificationTestObjectUnderTest.decline();
            sinon.assert.calledOnce(notificationTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(notificationTestObjectUnderTest._executeWithEvents, sinon.match({}), "Decline");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            notificationTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = notificationTestObjectUnderTest.decline();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("clickButton method", function () {
        it("should throw error if name is undefined", function () {
            assert.throws(function () {
                notificationTestObjectUnderTest.clickButton();
            });
        });

        it("should throw error if name is null", function () {
            assert.throws(function () {
                notificationTestObjectUnderTest.clickButton(null);
            });
        });

        it("should throw error if name is object", function () {
            assert.throws(function () {
                notificationTestObjectUnderTest.clickButton({test: 'test'});
            });
        });

        it("should execute _executeWithEvents with 'Choose' and argument as string", function () {
            notificationTestObjectUnderTest.clickButton("test");
            sinon.assert.calledOnce(notificationTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(notificationTestObjectUnderTest._executeWithEvents, sinon.match({}), "Choose", "test");
        });
    });
});