// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("FlexFieldWindow Description", function () {
    var FlexFieldWindow = require("../lib/flex_field_window.js").FlexFieldWindow;
    var flexFieldWindowDescriptionUnderTest;

    beforeEach(function () {
        flexFieldWindowDescriptionUnderTest = FlexFieldWindow();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and 'FlexFieldWindow' LeanFT type", function () {
            flexFieldWindowDescriptionUnderTest = new FlexFieldWindow();
            assert.deepEqual(flexFieldWindowDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "FlexFieldWindow"
            });
        });
    });

    describe("title", function () {
        it("should add 'title' to _properties when value is given", function () {
            flexFieldWindowDescriptionUnderTest.title("test");
            assert.strictEqual(flexFieldWindowDescriptionUnderTest._properties["title"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = flexFieldWindowDescriptionUnderTest.title("test");
            assert.strictEqual(result, flexFieldWindowDescriptionUnderTest);
        });

        it("should remove 'title' from _properties when value is null", function () {
            flexFieldWindowDescriptionUnderTest._properties["title"] = "test";
            flexFieldWindowDescriptionUnderTest.title(null);
            assert(!("test" in flexFieldWindowDescriptionUnderTest._properties));
        });

        it("should return the value of 'title' from _properties when value is not given", function () {
            flexFieldWindowDescriptionUnderTest._properties["title"] = "test";
            var result = flexFieldWindowDescriptionUnderTest.title();
            assert.strictEqual(result, "test");
        });
    });

    describe("classPath", function () {
        it("should add 'class path' to _properties when value is given", function () {
            flexFieldWindowDescriptionUnderTest.classPath("test");
            assert.strictEqual(flexFieldWindowDescriptionUnderTest._properties["class path"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = flexFieldWindowDescriptionUnderTest.classPath("test");
            assert.strictEqual(result, flexFieldWindowDescriptionUnderTest);
        });

        it("should remove 'classPath' from _properties when value is null", function () {
            flexFieldWindowDescriptionUnderTest._properties["class path"] = "test";
            flexFieldWindowDescriptionUnderTest.classPath(null);
            assert(!("test" in flexFieldWindowDescriptionUnderTest._properties));
        });

        it("should return the value of 'class path' from _properties when value is not given", function () {
            flexFieldWindowDescriptionUnderTest._properties["class path"] = "test";
            var result = flexFieldWindowDescriptionUnderTest.classPath();
            assert.strictEqual(result, "test");
        });
    });

    describe("isEnabled", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            flexFieldWindowDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(flexFieldWindowDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given is given in string", function () {
            flexFieldWindowDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(flexFieldWindowDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = flexFieldWindowDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(result, flexFieldWindowDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            flexFieldWindowDescriptionUnderTest._properties["enabled"] = "true";
            flexFieldWindowDescriptionUnderTest.isEnabled(null);
            assert(!("true" in flexFieldWindowDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            flexFieldWindowDescriptionUnderTest._properties["enabled"] = "true";
            var result = flexFieldWindowDescriptionUnderTest.isEnabled();
            assert.strictEqual(result, "true");
        });
    });
});

describe("Flex Field Window Test Object", function () {
    var FlexFieldWindowTO = require("../lib/flex_field_window.js").FlexFieldWindowTO;
    var flexFieldWindowTestObjectUnderTest;

    beforeEach(function () {
        flexFieldWindowTestObjectUnderTest = new FlexFieldWindowTO();
        sinon.stub(flexFieldWindowTestObjectUnderTest, "_getROProperty");
        sinon.stub(flexFieldWindowTestObjectUnderTest, "_executeWithEvents");
    });

    describe("title method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'title'", function () {
            flexFieldWindowTestObjectUnderTest._getROProperty.returns(promiseMock);
            flexFieldWindowTestObjectUnderTest.title();
            sinon.assert.calledOnce(flexFieldWindowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(flexFieldWindowTestObjectUnderTest._getROProperty, "title", sinon.match({}));
        });

        it("should return promise as is", function () {
            flexFieldWindowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = flexFieldWindowTestObjectUnderTest.title();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("classPath method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'class path'", function () {
            flexFieldWindowTestObjectUnderTest._getROProperty.returns(promiseMock);
            flexFieldWindowTestObjectUnderTest.classPath();
            sinon.assert.calledOnce(flexFieldWindowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(flexFieldWindowTestObjectUnderTest._getROProperty, "class path", sinon.match({}));
        });

        it("should return promise as is", function () {
            flexFieldWindowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = flexFieldWindowTestObjectUnderTest.classPath();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEnabled method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'enabled'", function () {
            flexFieldWindowTestObjectUnderTest._getROProperty.returns(promiseMock);
            flexFieldWindowTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(flexFieldWindowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(flexFieldWindowTestObjectUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return promise as is", function () {
            flexFieldWindowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = flexFieldWindowTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("approve method", function () {
        it("should execute command 'Approve'", function () {
            flexFieldWindowTestObjectUnderTest.approve();
            sinon.assert.calledOnce(flexFieldWindowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(flexFieldWindowTestObjectUnderTest._executeWithEvents, sinon.match({}), "Approve");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            flexFieldWindowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = flexFieldWindowTestObjectUnderTest.approve();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("clear method", function () {
        it("should execute command 'Clear'", function () {
            flexFieldWindowTestObjectUnderTest.clear();
            sinon.assert.calledOnce(flexFieldWindowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(flexFieldWindowTestObjectUnderTest._executeWithEvents, sinon.match({}), "Clear");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            flexFieldWindowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = flexFieldWindowTestObjectUnderTest.clear();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("cancel method", function () {
        it("should execute command 'Cancel'", function () {
            flexFieldWindowTestObjectUnderTest.cancel();
            sinon.assert.calledOnce(flexFieldWindowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(flexFieldWindowTestObjectUnderTest._executeWithEvents, sinon.match({}), "Cancel");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            flexFieldWindowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = flexFieldWindowTestObjectUnderTest.cancel();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("help method", function () {
        it("should execute command 'Help'", function () {
            flexFieldWindowTestObjectUnderTest.help();
            sinon.assert.calledOnce(flexFieldWindowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(flexFieldWindowTestObjectUnderTest._executeWithEvents, sinon.match({}), "Help");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            flexFieldWindowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = flexFieldWindowTestObjectUnderTest.help();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("showCombinations method", function () {
        it("should execute command 'ShowCombinations'", function () {
            flexFieldWindowTestObjectUnderTest.showCombinations();
            sinon.assert.calledOnce(flexFieldWindowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(flexFieldWindowTestObjectUnderTest._executeWithEvents, sinon.match({}), "ShowCombinations");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            flexFieldWindowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = flexFieldWindowTestObjectUnderTest.showCombinations();
            assert.strictEqual(res, executionPromise);
        });
    });
});