// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("TreeViewNode", function () {

    var TreeViewNode = require("../lib/tree_view_node.js").TreeViewNode;
    var treeViewNodeUnderTest;
    var owner;
    beforeEach(function () {
        owner = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
        treeViewNodeUnderTest = new TreeViewNode(owner, "identifier");
        treeViewNodeUnderTest._executeWithEventsOnItem = sinon.stub();
        treeViewNodeUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    describe("Constructor", function () {
        it("should assign correct values", function () {
            var parent = owner;
            treeViewNodeUnderTest = new TreeViewNode(parent, "identifier");
            assert.strictEqual(treeViewNodeUnderTest._ownerTreeView, parent);
            assert.strictEqual(treeViewNodeUnderTest._identifier, "identifier");
        });
    });

    describe("collapse method", function () {
        it("should execute _nodeCollapse with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._nodeCollapse = sinon.stub();
            treeViewNodeUnderTest.collapse();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._nodeCollapse, "identifier");
        });

        it("should return the promise as it is", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.collapse();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("expand method", function () {
        it("should execute _nodeExpand with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._nodeExpand = sinon.stub();
            treeViewNodeUnderTest.expand();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._nodeExpand, "identifier");
        });

        it("should return the promise as it is", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.expand();
            assert.strictEqual(res, promiseMock);
        });
    });
   
    describe("_getIdentifier method", function () {
        it("should return correct values", function () {
            var res = treeViewNodeUnderTest._getIdentifier();
            assert.strictEqual(res, "identifier");
        });
    });

    describe("_getTextRepresentation method", function () {
        it("should return correct values", function () {
            var res = treeViewNodeUnderTest._getTextRepresentation();
            assert.strictEqual(res, "identifier");
        });
    });
});
