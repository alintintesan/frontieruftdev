// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("UI Object Base Description", function () {

    var UiObjectBaseDescription = require("../lib/ui_object_base.js").UiObjectBaseDescription;
    var uiObjectBaseDescriptionUnderTest;

    beforeEach(function () {
        uiObjectBaseDescriptionUnderTest = new UiObjectBaseDescription();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and LeanFT type", function () {
            uiObjectBaseDescriptionUnderTest = new UiObjectBaseDescription("button");
            assert.deepEqual(uiObjectBaseDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "button"
            });
        });
    });

    describe("objectType method", function () {
        it("should add 'class description' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.objectType("class description");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["class description"], "class description");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.objectType("class description");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'class description' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["class description"] = "class description";
            uiObjectBaseDescriptionUnderTest.objectType(null);
            assert(!("class description" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'label' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["class description"] = "class description";
            var result = uiObjectBaseDescriptionUnderTest.objectType();
            assert.strictEqual(result, "class description");
        });
    });
   
});

describe("UI Object Base Test Object", function () {

    var UiObjectBaseTO = require("../lib/ui_object_base.js").UiObjectBaseTO;
    var uiObjectBaseTOUnderTest;

    beforeEach(function () {
        uiObjectBaseTOUnderTest = new UiObjectBaseTO();
        sinon.stub(uiObjectBaseTOUnderTest, "_getROProperty");
        sinon.stub(uiObjectBaseTOUnderTest, "_executeWithEvents");
    });

    describe("objectType method", function () {
        it("should execute _getROProperty 'class description'", function () {
            uiObjectBaseTOUnderTest.objectType();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "class description", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.objectType();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("selectFromPopupMenu method", function () {
        it("should throw error if menuPathParts is null ", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.selectFromPopupMenu(null);
            });
        });

        it("should throw error if menuPathParts is undefined ", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.selectFromPopupMenu();
            });
        });
        
        it("should throw error if menuPathParts contains a type different from string", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.selectFromPopupMenu("Menu1", "Menu2", 1);
            });
        });

        it("should call correct method with given string", function(){
            var path = "path";
            uiObjectBaseTOUnderTest.selectFromPopupMenu(path);
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({}), "SelectPopupMenu", path);
        });

        it("should call correct method with multiple strings", function(){
            var path1 = "path1";
            var path2 = "path2";
            var path3 = "path3";
            var result = "path1->path2->path3"; 
            uiObjectBaseTOUnderTest.selectFromPopupMenu(path1, path2, path3);
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({}), "SelectPopupMenu", result);
        });
    });
});