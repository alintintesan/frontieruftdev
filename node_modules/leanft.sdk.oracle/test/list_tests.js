// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("List Description", function () {
    var List = require("../lib/list.js").List;
    var listDescriptionUnderTest;

    beforeEach(function () {
        listDescriptionUnderTest = List();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and 'List' LeanFT type", function () {
            listDescriptionUnderTest = new List();
            assert.deepEqual(listDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "List"
            });
        });
    });

    describe("selectedItem", function () {
        it("should add 'selected item' to _properties when value is given", function () {
            listDescriptionUnderTest.selectedItem("test");
            assert.strictEqual(listDescriptionUnderTest._properties["selected item"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listDescriptionUnderTest.selectedItem("test");
            assert.strictEqual(result, listDescriptionUnderTest);
        });

        it("should remove 'selected item' from _properties when value is null", function () {
            listDescriptionUnderTest._properties["selected item"] = "test";
            listDescriptionUnderTest.selectedItem(null);
            assert(!("test" in listDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            listDescriptionUnderTest._properties["selected item"] = "test";
            var result = listDescriptionUnderTest.selectedItem();
            assert.strictEqual(result, "test");
        });
    });

    describe("caption", function () {
        it("should add 'caption' to _properties when value is given", function () {
            listDescriptionUnderTest.caption("test");
            assert.strictEqual(listDescriptionUnderTest._properties["prompt"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listDescriptionUnderTest.caption("test");
            assert.strictEqual(result, listDescriptionUnderTest);
        });

        it("should remove 'caption' from _properties when value is null", function () {
            listDescriptionUnderTest._properties["prompt"] = "test";
            listDescriptionUnderTest.caption(null);
            assert(!("test" in listDescriptionUnderTest._properties));
        });

        it("should return the value of 'prompt' from _properties when value is not given", function () {
            listDescriptionUnderTest._properties["prompt"] = "test";
            var result = listDescriptionUnderTest.caption();
            assert.strictEqual(result, "test");
        });
    });

    describe("selectedIndex", function () {
        it("should add 'selected index' to _properties when value is given", function () {
            listDescriptionUnderTest.selectedIndex(4);
            assert.strictEqual(listDescriptionUnderTest._properties["selected index"], 5);
        });

        it("should add 'selected index' to _properties when value is given is given in string", function () {
            listDescriptionUnderTest.selectedIndex('4');
            assert.strictEqual(listDescriptionUnderTest._properties["selected index"], 5);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listDescriptionUnderTest.selectedIndex(4);
            assert.strictEqual(result, listDescriptionUnderTest);
        });

        it("should remove 'selected index' from _properties when value is null", function () {
            listDescriptionUnderTest._properties["selected index"] = 4;
            listDescriptionUnderTest.selectedIndex(null);
            assert(!(4 in listDescriptionUnderTest._properties));
        });

        it("should return the value of 'selected index' from _properties when value is not given", function () {
            listDescriptionUnderTest._properties["selected index"] = 4;
            var result = listDescriptionUnderTest.selectedIndex();
            assert.strictEqual(result, 3);
        });
    });

    describe("classPath", function () {
        it("should add 'class path' to _properties when value is given", function () {
            listDescriptionUnderTest.classPath("test");
            assert.strictEqual(listDescriptionUnderTest._properties["class path"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listDescriptionUnderTest.classPath("test");
            assert.strictEqual(result, listDescriptionUnderTest);
        });

        it("should remove 'classPath' from _properties when value is null", function () {
            listDescriptionUnderTest._properties["class path"] = "test";
            listDescriptionUnderTest.classPath(null);
            assert(!("test" in listDescriptionUnderTest._properties));
        });

        it("should return the value of 'class path' from _properties when value is not given", function () {
            listDescriptionUnderTest._properties["class path"] = "test";
            var result = listDescriptionUnderTest.classPath();
            assert.strictEqual(result, "test");
        });
    });

    describe("isEnabled", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            listDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(listDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given is given in string", function () {
            listDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(listDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(result, listDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            listDescriptionUnderTest._properties["enabled"] = "true";
            listDescriptionUnderTest.isEnabled(null);
            assert(!("true" in listDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            listDescriptionUnderTest._properties["enabled"] = "true";
            var result = listDescriptionUnderTest.isEnabled();
            assert.strictEqual(result, "true");
        });
    });

    describe("objectDescription", function () {
        it("should add 'description' to _properties when value is given", function () {
            listDescriptionUnderTest.objectDescription("test");
            assert.strictEqual(listDescriptionUnderTest._properties["description"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listDescriptionUnderTest.objectDescription("test");
            assert.strictEqual(result, listDescriptionUnderTest);
        });

        it("should remove 'description' from _properties when value is null", function () {
            listDescriptionUnderTest._properties["description"] = "test";
            listDescriptionUnderTest.objectDescription(null);
            assert(!("test" in listDescriptionUnderTest._properties));
        });

        it("should return the value of 'description' from _properties when value is not given", function () {
            listDescriptionUnderTest._properties["description"] = "test";
            var result = listDescriptionUnderTest.objectDescription();
            assert.strictEqual(result, "test");
        });
    });

    describe("objectName", function () {
        it("should add 'developer name' to _properties when value is given", function () {
            listDescriptionUnderTest.objectName("test");
            assert.strictEqual(listDescriptionUnderTest._properties["developer name"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listDescriptionUnderTest.objectName("test");
            assert.strictEqual(result, listDescriptionUnderTest);
        });

        it("should remove 'developer name' from _properties when value is null", function () {
            listDescriptionUnderTest._properties["developer name"] = "test";
            listDescriptionUnderTest.objectName(null);
            assert(!("test" in listDescriptionUnderTest._properties));
        });

        it("should return the value of 'developer name' from _properties when value is not given", function () {
            listDescriptionUnderTest._properties["developer name"] = "test";
            var result = listDescriptionUnderTest.objectName();
            assert.strictEqual(result, "test");
        });
    });

    describe("tooltipText", function () {
        it("should add 'tooltip' to _properties when value is given", function () {
            listDescriptionUnderTest.tooltipText("test");
            assert.strictEqual(listDescriptionUnderTest._properties["tooltip"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listDescriptionUnderTest.tooltipText("test");
            assert.strictEqual(result, listDescriptionUnderTest);
        });

        it("should remove 'tooltip' from _properties when value is null", function () {
            listDescriptionUnderTest._properties["tooltip"] = "test";
            listDescriptionUnderTest.tooltipText(null);
            assert(!("test" in listDescriptionUnderTest._properties));
        });

        it("should return the value of 'tooltip' from _properties when value is not given", function () {
            listDescriptionUnderTest._properties["tooltip"] = "test";
            var result = listDescriptionUnderTest.tooltipText();
            assert.strictEqual(result, "test");
        });
    });
});

describe("List Test Object", function () {
    var ListTO = require("../lib/list.js").ListTO;
    var ListItem = require("../lib/list_item.js").ListItem;
    var listTestObjectUnderTest;

    beforeEach(function () {
        listTestObjectUnderTest = new ListTO();
        sinon.stub(listTestObjectUnderTest, "_executeNotWrapped");
        sinon.stub(listTestObjectUnderTest, "_getROProperty");
        sinon.stub(listTestObjectUnderTest, "_executeWithEvents");
    });

    describe("selectedItem method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'selected item'", function () {
            listTestObjectUnderTest._getROProperty.returns(promiseMock);
            listTestObjectUnderTest.selectedItem();
            sinon.assert.calledOnce(listTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(listTestObjectUnderTest._getROProperty, "selected item", sinon.match({}));
        });

        it("should return promise as is", function () {
            var listTOMock = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
            var item = new ListItem(listTOMock, "test");
            listTestObjectUnderTest._getROProperty.returns(promiseMock);

            var res = listTestObjectUnderTest.selectedItem();
            assert.strictEqual(res._identifier, item._identifier);
        });
    });

    describe("caption method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'caption'", function () {
            listTestObjectUnderTest._getROProperty.returns(promiseMock);
            listTestObjectUnderTest.caption();
            sinon.assert.calledOnce(listTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(listTestObjectUnderTest._getROProperty, "prompt", sinon.match({}));
        });

        it("should return promise as is", function () {
            listTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = listTestObjectUnderTest.caption();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("selectedIndex method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb(4);
            }
        };
        it("should execute _getROProperty 'selected index'", function () {
            listTestObjectUnderTest._getROProperty.returns(promiseMock);
            listTestObjectUnderTest.selectedIndex();
            sinon.assert.calledOnce(listTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(listTestObjectUnderTest._getROProperty, "selected index", sinon.match({}));
        });

        it("should return promise as is", function () {
            listTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = listTestObjectUnderTest.selectedIndex();
            assert.strictEqual(res, 3);
        });

        it("should return -1 if item is null", function () {
            var nullPromiseMock = {
                then: function (cb) {
                    return cb(null);
                }
            };

            listTestObjectUnderTest._getROProperty.returns(nullPromiseMock);
            var res = listTestObjectUnderTest.selectedIndex();
            assert.strictEqual(res, -1);
        });
    });

    describe("classPath method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'class path'", function () {
            listTestObjectUnderTest._getROProperty.returns(promiseMock);
            listTestObjectUnderTest.classPath();
            sinon.assert.calledOnce(listTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(listTestObjectUnderTest._getROProperty, "class path", sinon.match({}));
        });

        it("should return promise as is", function () {
            listTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = listTestObjectUnderTest.classPath();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEnabled method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'enabled'", function () {
            listTestObjectUnderTest._getROProperty.returns(promiseMock);
            listTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(listTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(listTestObjectUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return promise as is", function () {
            listTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = listTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("objectDescription method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'description'", function () {
            listTestObjectUnderTest._getROProperty.returns(promiseMock);
            listTestObjectUnderTest.objectDescription();
            sinon.assert.calledOnce(listTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(listTestObjectUnderTest._getROProperty, "description", sinon.match({}));
        });

        it("should return promise as is", function () {
            listTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = listTestObjectUnderTest.objectDescription();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("objectName method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'developer name'", function () {
            listTestObjectUnderTest._getROProperty.returns(promiseMock);
            listTestObjectUnderTest.objectName();
            sinon.assert.calledOnce(listTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(listTestObjectUnderTest._getROProperty, "developer name", sinon.match({}));
        });

        it("should return promise as is", function () {
            listTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = listTestObjectUnderTest.objectName();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("tooltipText method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'tooltip'", function () {
            listTestObjectUnderTest._getROProperty.returns(promiseMock);
            listTestObjectUnderTest.tooltipText();
            sinon.assert.calledOnce(listTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(listTestObjectUnderTest._getROProperty, "tooltip", sinon.match({}));
        });

        it("should return promise as is", function () {
            listTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = listTestObjectUnderTest.tooltipText();
            assert.strictEqual(res, promiseMock);
        });
    });
    
    describe("getItem method", function () {
        it("should throw error if path is undefined", function () {
            assert.throws(function () {
                listTestObjectUnderTest.getItem();
            });
        });

        it("should throw error if path is null", function () {
            assert.throws(function () {
                listTestObjectUnderTest.getItem(null);
            });
        });

        it("should return the ListItem", function () {
            var res = listTestObjectUnderTest.getItem("Item1");
            assert.strictEqual(res._identifier, "Item1");
            assert.deepEqual(res._ownerList, listTestObjectUnderTest);
        });
    });

    describe("_createItem method", function () {
        it("should return the ListItem with correct values", function () {
            var res = listTestObjectUnderTest._createItem("Item1", "Item1");
            assert.strictEqual(res._identifier, "Item1");
            assert.deepEqual(res._ownerList, listTestObjectUnderTest);
        });
    });

    describe("_isItemSelected method", function () {
        var executionPromise;
        beforeEach(function () {
            executionPromise = {
                then: function (cb) {
                    return cb(true);
                }
            };
            listTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            listTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = listTestObjectUnderTest._isItemSelected("item1");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'IsSelected' with correct parameters, if input is number", function () {
            listTestObjectUnderTest._isItemSelected(0);
            sinon.assert.calledOnce(listTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listTestObjectUnderTest._executeNotWrapped, sinon.match({0: 0}), "IsSelected", 1);
        });

        it("should execute _executeNotWrapped 'IsSelected' with correct parameters, if input is string", function () {
            listTestObjectUnderTest._isItemSelected("Item1");
            sinon.assert.calledOnce(listTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listTestObjectUnderTest._executeNotWrapped, sinon.match({0: "Item1"}), "IsSelected", "Item1");
        });
    });

    describe("activate method", function () {
        beforeEach(function () {
            sinon.stub(listTestObjectUnderTest, "_itemTransform");
        });

        it("should execute command 'activate' if the 'item' parameter is a ListItem", function () {
            listTestObjectUnderTest._itemTransform.returns("listItem");
            var listTOMock = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
            var item = new ListItem(listTOMock, "listItem", "listItem");

            listTestObjectUnderTest.activate(item);
            sinon.assert.calledOnce(listTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(listTestObjectUnderTest._executeWithEvents, sinon.match({0: item}), "Activate", "listItem");
        });

        it("should execute command 'Activate' if the 'item' parameter is string", function () {
            listTestObjectUnderTest._itemTransform.returns("listItem2");
            listTestObjectUnderTest.activate("listItem2");
            sinon.assert.calledOnce(listTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(listTestObjectUnderTest._executeWithEvents, sinon.match({0: "listItem2"}), "Activate", "listItem2");
        });

        it("should execute command 'Activate' if the 'item' parameter is number", function () {
            listTestObjectUnderTest._itemTransform.returns(3);
            listTestObjectUnderTest.activate(3);
            sinon.assert.calledOnce(listTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(listTestObjectUnderTest._executeWithEvents, sinon.match({0: 3}), "Activate", 3);
        });

        it("should throw error if the 'item' parameter is null", function () {
            assert.throws(function () {
                listTestObjectUnderTest.activate(null);
            });
        });

        it("should throw error if the 'item' parameter is undefined", function () {
            assert.throws(function () {
                listTestObjectUnderTest.activate();
            });
        });
    });

    describe("select method", function () {
        beforeEach(function () {
            sinon.stub(listTestObjectUnderTest, "_itemTransform");
        });

        it("should execute command 'select' if the 'item' parameter is a ListItem", function () {
            listTestObjectUnderTest._itemTransform.returns("listItem");
            var listTOMock = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
            var item = new ListItem(listTOMock, "listItem", "listItem");

            listTestObjectUnderTest.select(item);
            sinon.assert.calledOnce(listTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(listTestObjectUnderTest._executeWithEvents, sinon.match({0: item}), "Select", "listItem");
        });

        it("should execute command 'select' if the 'item' parameter is string", function () {
            listTestObjectUnderTest._itemTransform.returns("listItem2");
            listTestObjectUnderTest.select("listItem2");
            sinon.assert.calledOnce(listTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(listTestObjectUnderTest._executeWithEvents, sinon.match({0: "listItem2"}), "Select", "listItem2");
        });

        it("should execute command 'select' if the 'item' parameter is number", function () {
            listTestObjectUnderTest._itemTransform.returns(3);
            listTestObjectUnderTest.select(3);
            sinon.assert.calledOnce(listTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(listTestObjectUnderTest._executeWithEvents, sinon.match({0: 3}), "Select", 3);
        });

        it("should throw error if the 'item' parameter is null", function () {
            assert.throws(function () {
                listTestObjectUnderTest.select(null);
            });
        });

        it("should throw error if the 'item' parameter is undefined", function () {
            assert.throws(function () {
                listTestObjectUnderTest.select();
            });
        });
    });

    describe("contains method", function () {
        it("should throw error if item is undefined", function () {
            assert.throws(function () {
                listTestObjectUnderTest.contains();
            });
        });

        it("should throw error if date is null", function () {
            assert.throws(function () {
                listTestObjectUnderTest.contains(null);
            });
        });

        it("should throw error if date is object", function () {
            assert.throws(function () {
                listTestObjectUnderTest.contains({test: 'test'});
            });
        });

        it("should execute _executeWithEvents with 'IsItemInList' and argument as string", function () {
            listTestObjectUnderTest.contains("test");
            sinon.assert.calledOnce(listTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(listTestObjectUnderTest._executeWithEvents, sinon.match({}), "IsItemInList", "test");
        });
    });
});