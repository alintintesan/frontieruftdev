// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ListOfValues Description", function () {
    var ListOfValues = require("../lib/list_of_values.js").ListOfValues;
    var listOfValuesDescriptionUnderTest;

    beforeEach(function () {
        listOfValuesDescriptionUnderTest = ListOfValues();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and 'ListOfValues' LeanFT type", function () {
            listOfValuesDescriptionUnderTest = new ListOfValues();
            assert.deepEqual(listOfValuesDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "ListOfValues"
            });
        });
    });

    describe("title", function () {
        it("should add 'title' to _properties when value is given", function () {
            listOfValuesDescriptionUnderTest.title("test");
            assert.strictEqual(listOfValuesDescriptionUnderTest._properties["title"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listOfValuesDescriptionUnderTest.title("test");
            assert.strictEqual(result, listOfValuesDescriptionUnderTest);
        });

        it("should remove 'title' from _properties when value is null", function () {
            listOfValuesDescriptionUnderTest._properties["title"] = "test";
            listOfValuesDescriptionUnderTest.title(null);
            assert(!("test" in listOfValuesDescriptionUnderTest._properties));
        });

        it("should return the value of 'title' from _properties when value is not given", function () {
            listOfValuesDescriptionUnderTest._properties["title"] = "test";
            var result = listOfValuesDescriptionUnderTest.title();
            assert.strictEqual(result, "test");
        });
    });

    describe("items method", function () {
        it("should add 'list content' to _properties when value is given", function () {
            listOfValuesDescriptionUnderTest.items(["item1", "item2"]);
            assert.strictEqual(listOfValuesDescriptionUnderTest._properties["list content"], "item1;item2");
        });

        it("should add 'list content' to _properties when value is given using property bag", function () {
            listOfValuesDescriptionUnderTest = ListOfValues({
                items: ["item1", "item2"]
            });
            assert.strictEqual(listOfValuesDescriptionUnderTest._properties["list content"], "item1;item2");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = listOfValuesDescriptionUnderTest.items(["item1", "item2"]);
            assert.strictEqual(result, listOfValuesDescriptionUnderTest);
        });

        it("should remove 'list content' from _properties when value is null", function () {
            listOfValuesDescriptionUnderTest._properties["list content"] = "item1;item2";
            listOfValuesDescriptionUnderTest.items(null);
            assert(!("list content" in listOfValuesDescriptionUnderTest._properties));
        });
        it("should return the value of 'list content' from _properties when value is not given", function () {
            listOfValuesDescriptionUnderTest._properties["list content"] = "item1;item2";
            var value = listOfValuesDescriptionUnderTest.items();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'list content' in _properties when get is called", function () {
            listOfValuesDescriptionUnderTest._properties["list content"] = "item1;item2";
            listOfValuesDescriptionUnderTest.items();
            assert.strictEqual(listOfValuesDescriptionUnderTest._properties["list content"], "item1;item2");
        });
    });
    
    describe("choicesNumber", function () {
        it("should add 'choices number' to _properties when value is given", function () {
            listOfValuesDescriptionUnderTest.choicesNumber(4);
            assert.strictEqual(listOfValuesDescriptionUnderTest._properties["choices number"], 4);
        });

        it("should add 'choices number' to _properties when value is given is given in string", function () {
            listOfValuesDescriptionUnderTest.choicesNumber('4');
            assert.strictEqual(listOfValuesDescriptionUnderTest._properties["choices number"], 4);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listOfValuesDescriptionUnderTest.choicesNumber(4);
            assert.strictEqual(result, listOfValuesDescriptionUnderTest);
        });

        it("should remove 'choices number' from _properties when value is null", function () {
            listOfValuesDescriptionUnderTest._properties["choices number"] = 4;
            listOfValuesDescriptionUnderTest.choicesNumber(null);
            assert(!(4 in listOfValuesDescriptionUnderTest._properties));
        });

        it("should return the value of 'choices number' from _properties when value is not given", function () {
            listOfValuesDescriptionUnderTest._properties["choices number"] = 4;
            var result = listOfValuesDescriptionUnderTest.choicesNumber();
            assert.strictEqual(result, 4);
        });
    });

    describe("classPath", function () {
        it("should add 'class path' to _properties when value is given", function () {
            listOfValuesDescriptionUnderTest.classPath("test");
            assert.strictEqual(listOfValuesDescriptionUnderTest._properties["class path"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listOfValuesDescriptionUnderTest.classPath("test");
            assert.strictEqual(result, listOfValuesDescriptionUnderTest);
        });

        it("should remove 'classPath' from _properties when value is null", function () {
            listOfValuesDescriptionUnderTest._properties["class path"] = "test";
            listOfValuesDescriptionUnderTest.classPath(null);
            assert(!("test" in listOfValuesDescriptionUnderTest._properties));
        });

        it("should return the value of 'class path' from _properties when value is not given", function () {
            listOfValuesDescriptionUnderTest._properties["class path"] = "test";
            var result = listOfValuesDescriptionUnderTest.classPath();
            assert.strictEqual(result, "test");
        });
    });

    describe("isEnabled", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            listOfValuesDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(listOfValuesDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given is given in string", function () {
            listOfValuesDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(listOfValuesDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listOfValuesDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(result, listOfValuesDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            listOfValuesDescriptionUnderTest._properties["enabled"] = "true";
            listOfValuesDescriptionUnderTest.isEnabled(null);
            assert(!("true" in listOfValuesDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            listOfValuesDescriptionUnderTest._properties["enabled"] = "true";
            var result = listOfValuesDescriptionUnderTest.isEnabled();
            assert.strictEqual(result, "true");
        });
    });
});

describe("List Of ValuesTO Test Object", function () {
    var ListOfValuesTO = require("../lib/list_of_values.js").ListOfValuesTO;
    var listOfValuesTestObjectUnderTest;

    beforeEach(function () {
        listOfValuesTestObjectUnderTest = new ListOfValuesTO();
        sinon.stub(listOfValuesTestObjectUnderTest, "_getROProperty");
        sinon.stub(listOfValuesTestObjectUnderTest, "_executeWithEvents");
    });

    describe("items method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("Item1;Item2");
            }
        };
        it("should query the property 'list content'", function () {
            listOfValuesTestObjectUnderTest._getROProperty.returns(promiseMock);
            listOfValuesTestObjectUnderTest.items();
            sinon.assert.calledOnce(listOfValuesTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(listOfValuesTestObjectUnderTest._getROProperty, "list content");
        });

        it("should return a list  with items if items returns from _getROProperty", function () {
            listOfValuesTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = listOfValuesTestObjectUnderTest.items();
            assert.deepEqual(res, ["Item1", "Item2"]);
        });
    });

    describe("title method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'title'", function () {
            listOfValuesTestObjectUnderTest._getROProperty.returns(promiseMock);
            listOfValuesTestObjectUnderTest.title();
            sinon.assert.calledOnce(listOfValuesTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(listOfValuesTestObjectUnderTest._getROProperty, "title", sinon.match({}));
        });

        it("should return promise as is", function () {
            listOfValuesTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = listOfValuesTestObjectUnderTest.title();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("classPath method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'class path'", function () {
            listOfValuesTestObjectUnderTest._getROProperty.returns(promiseMock);
            listOfValuesTestObjectUnderTest.classPath();
            sinon.assert.calledOnce(listOfValuesTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(listOfValuesTestObjectUnderTest._getROProperty, "class path", sinon.match({}));
        });

        it("should return promise as is", function () {
            listOfValuesTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = listOfValuesTestObjectUnderTest.classPath();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEnabled method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'enabled'", function () {
            listOfValuesTestObjectUnderTest._getROProperty.returns(promiseMock);
            listOfValuesTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(listOfValuesTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(listOfValuesTestObjectUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return promise as is", function () {
            listOfValuesTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = listOfValuesTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });
    });
    
    describe("select method", function () {
        beforeEach(function () {
            sinon.stub(listOfValuesTestObjectUnderTest, "_itemTransform");
        });

        it("should execute command 'select' if the 'item' parameter is string", function () {
            listOfValuesTestObjectUnderTest._itemTransform.returns("listItem2");
            listOfValuesTestObjectUnderTest.select("listItem2");
            sinon.assert.calledOnce(listOfValuesTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(listOfValuesTestObjectUnderTest._executeWithEvents, sinon.match({0: "listItem2"}), "Select", "listItem2");
        });

        it("should execute command 'select' if the 'item' parameter is number", function () {
            listOfValuesTestObjectUnderTest._itemTransform.returns(3);
            listOfValuesTestObjectUnderTest.select(3);
            sinon.assert.calledOnce(listOfValuesTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(listOfValuesTestObjectUnderTest._executeWithEvents, sinon.match({0: 3}), "Select", 3);
        });

        it("should throw error if the 'item' parameter is null", function () {
            assert.throws(function () {
                listOfValuesTestObjectUnderTest.select(null);
            });
        });

        it("should throw error if the 'item' parameter is undefined", function () {
            assert.throws(function () {
                listOfValuesTestObjectUnderTest.select();
            });
        });
    });
    
    describe("find method", function () {
        it("should throw error if text is undefined", function () {
            assert.throws(function () {
                listOfValuesTestObjectUnderTest.find();
            });
        });

        it("should throw error if date is null", function () {
            assert.throws(function () {
                listOfValuesTestObjectUnderTest.find(null);
            });
        });

        it("should throw error if date is object", function () {
            assert.throws(function () {
                listOfValuesTestObjectUnderTest.find({test: 'test'});
            });
        });

        it("should execute _executeWithEvents with 'Find' and argument as string", function () {
            listOfValuesTestObjectUnderTest.find("test");
            sinon.assert.calledOnce(listOfValuesTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(listOfValuesTestObjectUnderTest._executeWithEvents, sinon.match({}), "Find", "test");
        });
    });

    describe("cancel method", function () {
        it("should execute command 'Cancel'", function () {
            listOfValuesTestObjectUnderTest.cancel();
            sinon.assert.calledOnce(listOfValuesTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(listOfValuesTestObjectUnderTest._executeWithEvents, sinon.match({}), "Cancel");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            listOfValuesTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = listOfValuesTestObjectUnderTest.cancel();
            assert.strictEqual(res, executionPromise);
        });
    });
});