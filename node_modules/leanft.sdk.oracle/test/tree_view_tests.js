// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("TreeView Description", function () {
    var TreeView = require("../lib/tree_view.js").TreeView;
    var treeViewDescriptionUnderTest;

    beforeEach(function () {
        treeViewDescriptionUnderTest = TreeView();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and 'TreeView' LeanFT type", function () {
            treeViewDescriptionUnderTest = new TreeView();
            assert.deepEqual(treeViewDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "TreeView"
            });
        });
    });

    describe("classPath", function () {
        it("should add 'class path' to _properties when value is given", function () {
            treeViewDescriptionUnderTest.classPath("test");
            assert.strictEqual(treeViewDescriptionUnderTest._properties["class path"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescriptionUnderTest.classPath("test");
            assert.strictEqual(result, treeViewDescriptionUnderTest);
        });

        it("should remove 'classPath' from _properties when value is null", function () {
            treeViewDescriptionUnderTest._properties["class path"] = "test";
            treeViewDescriptionUnderTest.classPath(null);
            assert(!("test" in treeViewDescriptionUnderTest._properties));
        });

        it("should return the value of 'class path' from _properties when value is not given", function () {
            treeViewDescriptionUnderTest._properties["class path"] = "test";
            var result = treeViewDescriptionUnderTest.classPath();
            assert.strictEqual(result, "test");
        });
    });

    describe("isEnabled", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            treeViewDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(treeViewDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given is given in string", function () {
            treeViewDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(treeViewDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(result, treeViewDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            treeViewDescriptionUnderTest._properties["enabled"] = "true";
            treeViewDescriptionUnderTest.isEnabled(null);
            assert(!("true" in treeViewDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            treeViewDescriptionUnderTest._properties["enabled"] = "true";
            var result = treeViewDescriptionUnderTest.isEnabled();
            assert.strictEqual(result, "true");
        });
    });

    describe("objectDescription", function () {
        it("should add 'description' to _properties when value is given", function () {
            treeViewDescriptionUnderTest.objectDescription("test");
            assert.strictEqual(treeViewDescriptionUnderTest._properties["description"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescriptionUnderTest.objectDescription("test");
            assert.strictEqual(result, treeViewDescriptionUnderTest);
        });

        it("should remove 'description' from _properties when value is null", function () {
            treeViewDescriptionUnderTest._properties["description"] = "test";
            treeViewDescriptionUnderTest.objectDescription(null);
            assert(!("test" in treeViewDescriptionUnderTest._properties));
        });

        it("should return the value of 'description' from _properties when value is not given", function () {
            treeViewDescriptionUnderTest._properties["description"] = "test";
            var result = treeViewDescriptionUnderTest.objectDescription();
            assert.strictEqual(result, "test");
        });
    });

    describe("objectName", function () {
        it("should add 'developer name' to _properties when value is given", function () {
            treeViewDescriptionUnderTest.objectName("test");
            assert.strictEqual(treeViewDescriptionUnderTest._properties["developer name"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescriptionUnderTest.objectName("test");
            assert.strictEqual(result, treeViewDescriptionUnderTest);
        });

        it("should remove 'developer name' from _properties when value is null", function () {
            treeViewDescriptionUnderTest._properties["developer name"] = "test";
            treeViewDescriptionUnderTest.objectName(null);
            assert(!("test" in treeViewDescriptionUnderTest._properties));
        });

        it("should return the value of 'developer name' from _properties when value is not given", function () {
            treeViewDescriptionUnderTest._properties["developer name"] = "test";
            var result = treeViewDescriptionUnderTest.objectName();
            assert.strictEqual(result, "test");
        });
    });

    describe("tooltipText", function () {
        it("should add 'tooltip' to _properties when value is given", function () {
            treeViewDescriptionUnderTest.tooltipText("test");
            assert.strictEqual(treeViewDescriptionUnderTest._properties["tooltip"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescriptionUnderTest.tooltipText("test");
            assert.strictEqual(result, treeViewDescriptionUnderTest);
        });

        it("should remove 'tooltip' from _properties when value is null", function () {
            treeViewDescriptionUnderTest._properties["tooltip"] = "test";
            treeViewDescriptionUnderTest.tooltipText(null);
            assert(!("test" in treeViewDescriptionUnderTest._properties));
        });

        it("should return the value of 'tooltip' from _properties when value is not given", function () {
            treeViewDescriptionUnderTest._properties["tooltip"] = "test";
            var result = treeViewDescriptionUnderTest.tooltipText();
            assert.strictEqual(result, "test");
        });
    });
    
    describe("selectedItem", function () {
        it("should add 'selected item' to _properties when value is given", function () {
            treeViewDescriptionUnderTest.selectedItem("test");
            assert.strictEqual(treeViewDescriptionUnderTest._properties["selected item"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescriptionUnderTest.selectedItem("test");
            assert.strictEqual(result, treeViewDescriptionUnderTest);
        });

        it("should remove 'selected item' from _properties when value is null", function () {
            treeViewDescriptionUnderTest._properties["selected item"] = "test";
            treeViewDescriptionUnderTest.selectedItem(null);
            assert(!("test" in treeViewDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            treeViewDescriptionUnderTest._properties["selected item"] = "test";
            var result = treeViewDescriptionUnderTest.selectedItem();
            assert.strictEqual(result, "test");
        });
    });

    describe("caption", function () {
        it("should add 'caption' to _properties when value is given", function () {
            treeViewDescriptionUnderTest.caption("test");
            assert.strictEqual(treeViewDescriptionUnderTest._properties["prompt"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescriptionUnderTest.caption("test");
            assert.strictEqual(result, treeViewDescriptionUnderTest);
        });

        it("should remove 'caption' from _properties when value is null", function () {
            treeViewDescriptionUnderTest._properties["prompt"] = "test";
            treeViewDescriptionUnderTest.caption(null);
            assert(!("test" in treeViewDescriptionUnderTest._properties));
        });

        it("should return the value of 'prompt' from _properties when value is not given", function () {
            treeViewDescriptionUnderTest._properties["prompt"] = "test";
            var result = treeViewDescriptionUnderTest.caption();
            assert.strictEqual(result, "test");
        });
    });
    
});

describe("Tree View Test Object", function () {
    var TreeViewTO = require("../lib/tree_view.js").TreeViewTO;
    var TreeViewNode = require("../lib/tree_view_node.js").TreeViewNode;
    var treeViewTestObjectUnderTest;
    var treeViewTestObjectMock;

    beforeEach(function () {
        treeViewTestObjectUnderTest = new TreeViewTO();
        sinon.stub(treeViewTestObjectUnderTest, "_executeNotWrapped");
        sinon.stub(treeViewTestObjectUnderTest, "_getROProperty");
        sinon.stub(treeViewTestObjectUnderTest, "_executeWithEvents");
        treeViewTestObjectMock = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
    });

    describe("classPath method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'class path'", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            treeViewTestObjectUnderTest.classPath();
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._getROProperty, "class path", sinon.match({}));
        });

        it("should return promise as is", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTestObjectUnderTest.classPath();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEnabled method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'enabled'", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            treeViewTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return promise as is", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("objectDescription method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'description'", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            treeViewTestObjectUnderTest.objectDescription();
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._getROProperty, "description", sinon.match({}));
        });

        it("should return promise as is", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTestObjectUnderTest.objectDescription();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("objectName method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'developer name'", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            treeViewTestObjectUnderTest.objectName();
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._getROProperty, "developer name", sinon.match({}));
        });

        it("should return promise as is", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTestObjectUnderTest.objectName();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("tooltipText method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'tooltip'", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            treeViewTestObjectUnderTest.tooltipText();
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._getROProperty, "tooltip", sinon.match({}));
        });

        it("should return promise as is", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTestObjectUnderTest.tooltipText();
            assert.strictEqual(res, promiseMock);
        });
    });
    
    describe("selectedItem method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'selected item'", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            treeViewTestObjectUnderTest.selectedItem();
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._getROProperty, "selected item", sinon.match({}));
        });

        it("should return promise as is", function () {
            var treeTOMock = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
            var item = new TreeViewNode(treeTOMock, "test");
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);

            var res = treeViewTestObjectUnderTest.selectedItem();
            assert.strictEqual(res._identifier, item._identifier);
        });
    });

    describe("caption method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'caption'", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            treeViewTestObjectUnderTest.caption();
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._getROProperty, "prompt", sinon.match({}));
        });

        it("should return promise as is", function () {
            treeViewTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTestObjectUnderTest.caption();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("buildNodePath method", function () {
        it("should return a correct path with nodes", function () {
            var res = treeViewTestObjectUnderTest.buildNodePath("node1", "node2", "node3");
            assert.strictEqual(res, "node1->node2->node3");
        });

        it("should throw if an empty list is passed", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.buildNodePath();
            });
        });

        it("should throw error if one of nodes isn't a string", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.buildNodePath(0, true, 4);
            });
        });
    });

    describe("activate method", function () {
        it("should execute command 'Activate' if the 'nodeOrPath' parameter is a TreeViewNode", function () {
            var node = new TreeViewNode(treeViewTestObjectMock, "nodeIdentifier", "nodeIdentifier");
            treeViewTestObjectUnderTest.activate(node);
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeWithEvents, sinon.match({0: node}), "Activate", node._getIdentifier());
        });

        it("should execute command 'Activate' if the 'nodeOrPath' parameter is node path", function () {
            treeViewTestObjectUnderTest.activate("node2");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeWithEvents, sinon.match({0: "node2"}), "Activate", "node2");
        });

        it("should execute command 'Activate' if the 'nodeOrPath' parameter is index", function () {
            treeViewTestObjectUnderTest.activate(2);
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeWithEvents, sinon.match({0: 2}), "Activate", 3);
        });

        it("should throw error if the 'nodeOrPath' parameter is null", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.activate(null);
            });
        });

        it("should throw error if the 'nodeOrPath' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.activate();
            });
        });
    });

    describe("getNode method", function () {
        it("should return a TreeViewNode", function () {
            var node = treeViewTestObjectUnderTest.getNode("nodeIdentifier");
            assert.strictEqual(node._identifier, "nodeIdentifier");
            assert.deepEqual(node._ownerTreeView, treeViewTestObjectUnderTest);
        });

        it("should throw error if the 'nodePath' parameter is null", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.getNode(null);
            });
        });

        it("should throw error if the 'nodePath' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.getNode();
            });
        });
    });

    describe("select method", function () {
        it("should execute command 'Select' if the 'nodeOrPath' parameter is a TreeViewNode", function () {
            var node = new TreeViewNode(treeViewTestObjectMock, "nodeIdentifier", "nodeIdentifier");
            treeViewTestObjectUnderTest.select(node);
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeWithEvents, sinon.match({0: node}), "Select", node._getIdentifier());
        });

        it("should execute command 'Select' if the 'nodeOrPath' parameter is node path", function () {
            treeViewTestObjectUnderTest.select("node2");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeWithEvents, sinon.match({0: "node2"}), "Select", "node2");
        });

        it("should execute command 'Select' if the 'nodeOrPath' parameter is index", function () {
            treeViewTestObjectUnderTest.select(2);
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeWithEvents, sinon.match({0: 2}), "Select", 3);
        });

        it("should throw error if the 'nodeOrPath' parameter is null", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.select(null);
            });
        });

        it("should throw error if the 'nodeOrPath' parameter is undefined", function () {
            assert.throws(function () {
                treeViewTestObjectUnderTest.select();
            });
        });
    });

    describe("_nodeCollapse method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTestObjectUnderTest._nodeCollapse("nodeIdentifier");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Collapse'", function () {
            treeViewTestObjectUnderTest._nodeCollapse("nodeIdentifier");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeNotWrapped, sinon.match({0: "nodeIdentifier"}), "Collapse", "nodeIdentifier");
        });
    });

    describe("_nodeExpand method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTestObjectUnderTest._nodeExpand("nodeIdentifier");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Expand'", function () {
            treeViewTestObjectUnderTest._nodeExpand("nodeIdentifier");
            sinon.assert.calledOnce(treeViewTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTestObjectUnderTest._executeNotWrapped, sinon.match({0: "nodeIdentifier"}), "Expand", "nodeIdentifier");
        });
    });

    describe("_createItem method", function () {
        it("should return the TreeViewNode with correct values", function () {
            var res = treeViewTestObjectUnderTest._createItem("some name", "some text");
            assert.strictEqual(res._identifier, "some name");
            assert.deepEqual(res._ownerTreeView, treeViewTestObjectUnderTest);
        });
    });
});