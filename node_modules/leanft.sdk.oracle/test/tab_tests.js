// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Tab Description", function () {
    var Tab = require("../lib/tab.js").Tab;
    var tabDescriptionUnderTest;

    beforeEach(function () {
        tabDescriptionUnderTest = Tab();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and 'Tab' LeanFT type", function () {
            tabDescriptionUnderTest = new Tab();
            assert.deepEqual(tabDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "Tab"
            });
        });
    });

    describe("classPath", function () {
        it("should add 'class path' to _properties when value is given", function () {
            tabDescriptionUnderTest.classPath("test");
            assert.strictEqual(tabDescriptionUnderTest._properties["class path"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tabDescriptionUnderTest.classPath("test");
            assert.strictEqual(result, tabDescriptionUnderTest);
        });

        it("should remove 'classPath' from _properties when value is null", function () {
            tabDescriptionUnderTest._properties["class path"] = "test";
            tabDescriptionUnderTest.classPath(null);
            assert(!("test" in tabDescriptionUnderTest._properties));
        });

        it("should return the value of 'class path' from _properties when value is not given", function () {
            tabDescriptionUnderTest._properties["class path"] = "test";
            var result = tabDescriptionUnderTest.classPath();
            assert.strictEqual(result, "test");
        });
    });

    describe("isEnabled", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            tabDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(tabDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given is given in string", function () {
            tabDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(tabDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tabDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(result, tabDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            tabDescriptionUnderTest._properties["enabled"] = "true";
            tabDescriptionUnderTest.isEnabled(null);
            assert(!("true" in tabDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            tabDescriptionUnderTest._properties["enabled"] = "true";
            var result = tabDescriptionUnderTest.isEnabled();
            assert.strictEqual(result, "true");
        });
    });
    
    describe("label", function () {
        it("should add 'label' to _properties when value is given", function () {
            tabDescriptionUnderTest.label("test");
            assert.strictEqual(tabDescriptionUnderTest._properties["label"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tabDescriptionUnderTest.label("test");
            assert.strictEqual(result, tabDescriptionUnderTest);
        });

        it("should remove 'label' from _properties when value is null", function () {
            tabDescriptionUnderTest._properties["label"] = "test";
            tabDescriptionUnderTest.label(null);
            assert(!("test" in tabDescriptionUnderTest._properties));
        });

        it("should return the value of 'label' from _properties when value is not given", function () {
            tabDescriptionUnderTest._properties["label"] = "test";
            var result = tabDescriptionUnderTest.label();
            assert.strictEqual(result, "test");
        });
    });
});

describe("Tab Test Object", function () {
    var TabTO = require("../lib/tab.js").TabTO;
    var tabTestObjectUnderTest;

    beforeEach(function () {
        tabTestObjectUnderTest = new TabTO();
        sinon.stub(tabTestObjectUnderTest, "_getROProperty");
        sinon.stub(tabTestObjectUnderTest, "_executeWithEvents");
    });

    describe("classPath method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'class path'", function () {
            tabTestObjectUnderTest._getROProperty.returns(promiseMock);
            tabTestObjectUnderTest.classPath();
            sinon.assert.calledOnce(tabTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tabTestObjectUnderTest._getROProperty, "class path", sinon.match({}));
        });

        it("should return promise as is", function () {
            tabTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = tabTestObjectUnderTest.classPath();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEnabled method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'enabled'", function () {
            tabTestObjectUnderTest._getROProperty.returns(promiseMock);
            tabTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(tabTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tabTestObjectUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return promise as is", function () {
            tabTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = tabTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });
    });


    describe("label method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'label'", function () {
            tabTestObjectUnderTest._getROProperty.returns(promiseMock);
            tabTestObjectUnderTest.label();
            sinon.assert.calledOnce(tabTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tabTestObjectUnderTest._getROProperty, "label", sinon.match({}));
        });

        it("should return promise as is", function () {
            tabTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = tabTestObjectUnderTest.label();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("select method", function () {
        it("should execute command 'Select'", function () {
            tabTestObjectUnderTest.select();
            sinon.assert.calledOnce(tabTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabTestObjectUnderTest._executeWithEvents, sinon.match({}), "Select");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tabTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = tabTestObjectUnderTest.select();
            assert.strictEqual(res, executionPromise);
        });
    });
});