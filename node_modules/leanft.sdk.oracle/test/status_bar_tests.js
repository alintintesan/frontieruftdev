// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("StatusBar Description", function () {
    var StatusBar = require("../lib/status_bar.js").StatusBar;
    var statusBarDescriptionUnderTest;

    beforeEach(function () {
        statusBarDescriptionUnderTest = StatusBar();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and 'StatusBar' LeanFT type", function () {
            statusBarDescriptionUnderTest = new StatusBar();
            assert.deepEqual(statusBarDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "StatusBar"
            });
        });
    });

    describe("classPath", function () {
        it("should add 'class path' to _properties when value is given", function () {
            statusBarDescriptionUnderTest.classPath("test");
            assert.strictEqual(statusBarDescriptionUnderTest._properties["class path"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = statusBarDescriptionUnderTest.classPath("test");
            assert.strictEqual(result, statusBarDescriptionUnderTest);
        });

        it("should remove 'classPath' from _properties when value is null", function () {
            statusBarDescriptionUnderTest._properties["class path"] = "test";
            statusBarDescriptionUnderTest.classPath(null);
            assert(!("test" in statusBarDescriptionUnderTest._properties));
        });

        it("should return the value of 'class path' from _properties when value is not given", function () {
            statusBarDescriptionUnderTest._properties["class path"] = "test";
            var result = statusBarDescriptionUnderTest.classPath();
            assert.strictEqual(result, "test");
        });
    });

    describe("isEnabled", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            statusBarDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(statusBarDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given is given in string", function () {
            statusBarDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(statusBarDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = statusBarDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(result, statusBarDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            statusBarDescriptionUnderTest._properties["enabled"] = "true";
            statusBarDescriptionUnderTest.isEnabled(null);
            assert(!("true" in statusBarDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            statusBarDescriptionUnderTest._properties["enabled"] = "true";
            var result = statusBarDescriptionUnderTest.isEnabled();
            assert.strictEqual(result, "true");
        });
    });
    
    describe("message", function () {
        it("should add 'message' to _properties when value is given", function () {
            statusBarDescriptionUnderTest.message("test");
            assert.strictEqual(statusBarDescriptionUnderTest._properties["message"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = statusBarDescriptionUnderTest.message("test");
            assert.strictEqual(result, statusBarDescriptionUnderTest);
        });

        it("should remove 'message' from _properties when value is null", function () {
            statusBarDescriptionUnderTest._properties["message"] = "test";
            statusBarDescriptionUnderTest.message(null);
            assert(!("test" in statusBarDescriptionUnderTest._properties));
        });

        it("should return the value of 'message' from _properties when value is not given", function () {
            statusBarDescriptionUnderTest._properties["message"] = "test";
            var result = statusBarDescriptionUnderTest.message();
            assert.strictEqual(result, "test");
        });
    });

    describe("errorCode", function () {
        it("should add 'error code' to _properties when value is given", function () {
            statusBarDescriptionUnderTest.errorCode("test");
            assert.strictEqual(statusBarDescriptionUnderTest._properties["error code"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = statusBarDescriptionUnderTest.errorCode("test");
            assert.strictEqual(result, statusBarDescriptionUnderTest);
        });

        it("should remove 'error code' from _properties when value is null", function () {
            statusBarDescriptionUnderTest._properties["error code"] = "test";
            statusBarDescriptionUnderTest.errorCode(null);
            assert(!("test" in statusBarDescriptionUnderTest._properties));
        });

        it("should return the value of 'error code' from _properties when value is not given", function () {
            statusBarDescriptionUnderTest._properties["error code"] = "test";
            var result = statusBarDescriptionUnderTest.errorCode();
            assert.strictEqual(result, "test");
        });
    });
});

describe("Status Bar Test Object", function () {
    var StatusBarTO = require("../lib/status_bar.js").StatusBarTO;
    var statusBarTestObjectUnderTest;

    beforeEach(function () {
        statusBarTestObjectUnderTest = new StatusBarTO();
        sinon.stub(statusBarTestObjectUnderTest, "_getROProperty");
        sinon.stub(statusBarTestObjectUnderTest, "_executeWithEvents");
    });

    describe("classPath method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'class path'", function () {
            statusBarTestObjectUnderTest._getROProperty.returns(promiseMock);
            statusBarTestObjectUnderTest.classPath();
            sinon.assert.calledOnce(statusBarTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTestObjectUnderTest._getROProperty, "class path", sinon.match({}));
        });

        it("should return promise as is", function () {
            statusBarTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = statusBarTestObjectUnderTest.classPath();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEnabled method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("1");
            }
        };
        it("should execute _getROProperty 'enabled'", function () {
            statusBarTestObjectUnderTest._getROProperty.returns(promiseMock);
            statusBarTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(statusBarTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTestObjectUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return promise as is", function () {
            statusBarTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = statusBarTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("message method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'message'", function () {
            statusBarTestObjectUnderTest._getROProperty.returns(promiseMock);
            statusBarTestObjectUnderTest.message();
            sinon.assert.calledOnce(statusBarTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTestObjectUnderTest._getROProperty, "message", sinon.match({}));
        });

        it("should return promise as is", function () {
            statusBarTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = statusBarTestObjectUnderTest.message();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("errorCode method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'error code'", function () {
            statusBarTestObjectUnderTest._getROProperty.returns(promiseMock);
            statusBarTestObjectUnderTest.errorCode();
            sinon.assert.calledOnce(statusBarTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTestObjectUnderTest._getROProperty, "error code", sinon.match({}));
        });

        it("should return promise as is", function () {
            statusBarTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = statusBarTestObjectUnderTest.errorCode();
            assert.strictEqual(res, promiseMock);
        });
    });
});