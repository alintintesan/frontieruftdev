// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/18/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ApplicationSession Description", function () {
    var ApplicationSession = require("../lib/application_session.js").ApplicationSession;
    var applicationSessionDescriptionUnderTest;

    beforeEach(function () {
        applicationSessionDescriptionUnderTest = ApplicationSession();
    });

    describe("Constructor", function () {
        it("should assign 'Oracle' and 'ApplicationSession' LeanFT type", function () {
            applicationSessionDescriptionUnderTest = new ApplicationSession();
            assert.deepEqual(applicationSessionDescriptionUnderTest.leanFTType, {
                technology: "Oracle",
                leanftType: "ApplicationSession"
            });
        });
    });

    describe("classPath", function () {
        it("should add 'class path' to _properties when value is given", function () {
            applicationSessionDescriptionUnderTest.classPath("test");
            assert.strictEqual(applicationSessionDescriptionUnderTest._properties["class path"], "test");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = applicationSessionDescriptionUnderTest.classPath("test");
            assert.strictEqual(result, applicationSessionDescriptionUnderTest);
        });

        it("should remove 'classPath' from _properties when value is null", function () {
            applicationSessionDescriptionUnderTest._properties["class path"] = "test";
            applicationSessionDescriptionUnderTest.classPath(null);
            assert(!("test" in applicationSessionDescriptionUnderTest._properties));
        });

        it("should return the value of 'class path' from _properties when value is not given", function () {
            applicationSessionDescriptionUnderTest._properties["class path"] = "test";
            var result = applicationSessionDescriptionUnderTest.classPath();
            assert.strictEqual(result, "test");
        });
    });
});

describe("Application Session Test Object", function () {
    var ApplicationSessionTO = require("../lib/application_session.js").ApplicationSessionTO;
    var applicationSessionTestObjectUnderTest;

    beforeEach(function () {
        applicationSessionTestObjectUnderTest = new ApplicationSessionTO();
        sinon.stub(applicationSessionTestObjectUnderTest, "_getROProperty");
        sinon.stub(applicationSessionTestObjectUnderTest, "_executeWithEvents");
    });

    describe("classPath method", function () {
        var promiseMock = {
            then: function (cb) {
                return cb("test");
            }
        };
        it("should execute _getROProperty 'class path'", function () {
            applicationSessionTestObjectUnderTest._getROProperty.returns(promiseMock);
            applicationSessionTestObjectUnderTest.classPath();
            sinon.assert.calledOnce(applicationSessionTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(applicationSessionTestObjectUnderTest._getROProperty, "class path", sinon.match({}));
        });

        it("should return promise as is", function () {
            applicationSessionTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = applicationSessionTestObjectUnderTest.classPath();
            assert.strictEqual(res, promiseMock);
        });
    });
    
    describe("exit method", function () {
        it("should execute command 'Exit'", function () {
            applicationSessionTestObjectUnderTest.exit();
            sinon.assert.calledOnce(applicationSessionTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(applicationSessionTestObjectUnderTest._executeWithEvents, sinon.match({}), "Exit");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            applicationSessionTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = applicationSessionTestObjectUnderTest.exit();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("sync method", function () {
        it("should execute command 'Sync'", function () {
            applicationSessionTestObjectUnderTest.sync();
            sinon.assert.calledOnce(applicationSessionTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(applicationSessionTestObjectUnderTest._executeWithEvents, sinon.match({}), "Sync");
        });

        it("should execute command 'Sync' with number of seconds", function () {
            applicationSessionTestObjectUnderTest.sync(100);
            sinon.assert.calledOnce(applicationSessionTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(applicationSessionTestObjectUnderTest._executeWithEvents, sinon.match({}), "Sync", 100);
        });

        it("should throw error when called with invalid argument", function () {
            assert.throws(function () {
                applicationSessionTestObjectUnderTest.sync("asdas");
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            applicationSessionTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = applicationSessionTestObjectUnderTest.sync();
            assert.strictEqual(res, executionPromise);
        });
    });

    describe("getActiveWindow method", function () {
        it("should execute command 'GetActiveWindow'", function () {
            applicationSessionTestObjectUnderTest.getActiveWindow();
            sinon.assert.calledOnce(applicationSessionTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(applicationSessionTestObjectUnderTest._executeWithEvents, sinon.match({}), "GetActiveWindow");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            applicationSessionTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = applicationSessionTestObjectUnderTest.getActiveWindow();
            assert.strictEqual(res, executionPromise);
        });
    });
});