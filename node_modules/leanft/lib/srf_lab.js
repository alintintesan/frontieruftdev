// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var Core = require("leanft.sdk.core");
var Logger = Core.Logger;

/*jshint eqnull:true */
/**
 * Enables you to launch browsers or lock devices in SRF..
 * @constructor SrfLab
 */
function SrfLab(browserFactory, mobileLab) {
    this._logger = new Logger("SrfLab");
    if (browserFactory == null) {
        throw new Error("browserFactory is mandatory for creating SrfLab");
    }

    if(mobileLab == null) {
        throw new Error("mobileLab is mandatory for creating SrfLab");
    }

    this._browserFactory = browserFactory;
    this._mobileLab = mobileLab;
}

SrfLab.prototype = {
    _logger: null,
    _browserFactory: null,
    _mobileLab: null,

    /**
     * Launches a new browser tab, according to supplied {@link Web.BrowserType} or a browser capabilities property bag.
     * Returning an instance of {@link Web.Browser} for the launched browser.
     * The returned browser instance is valid until the tab is closed.
     * @param {string | object} browserCapabilities the type of browser to launch: Possible values: {@link Web.BrowserType}, or a property bag defining the browser capabilities.
     * @param {string} browserCapabilities.type if a property bag is supplied, it must have the type key, Possible values: {@link Web.BrowserType}.
     * @returns {Promise<Web.BrowserTO>} a promise that is fulfilled with the browser instance.
     * @memberof SrfLab#
     */
    launchBrowser: function(browserCapabilities){
        return this._browserFactory._launchOnSrf(browserCapabilities);
    },

    /**
     * Obtains a device from the SRF Mobile lab and locks it, so that only LeanFT can perform actions on it.
     * @param {Mobile.Device | object} description The description of the device or a device capabilities property bag.
     * @param {Mobile.Application[]} [appsToInstall] An {@link Mobile.Application|Application} array of applications to install on the device.
     * @param {Mobile.DeviceSource} [deviceSource] The source location of the device. You can use the {@link Mobile.Device.DeviceSource|DeviceSource} object or just pass 'mobile_center', 'amazon_device_farm' or 'any' as a string.
     * @returns {Promise<Mobile.DeviceTO>} a promise that is fulfilled with the locked device.
     * @memberof SrfLab#
     */
    lockDevice: function (description, appsToInstall, deviceSource) {
        return this._mobileLab.lockDevice(description, appsToInstall, deviceSource);
    },

	/**
     * Obtains a device from the SRF Mobile lab and locks it, so that only the current LeanFT test can perform actions on it.
     * @param {Mobile.Device | object} description The description of the device or a device capabilities property bag.
     * @param {Object} sessionOptions the session options to use.
     * @param {Mobile.Application[]} [sessionOptions.appsToInstall] An {@link Mobile.Application|Application} array of applications to install on the device.
     * @param {Mobile.DeviceSource} [sessionOptions.deviceSource] The source location of the device. You can use the {@link Mobile.Device.DeviceSource|DeviceSource} object or just pass 'mobile_center', 'amazon_device_farm' or 'any' as a string.
     * @param {bool} [sessionOptions.collectLogs=true] indicates whether logs should be collected in this session.
     * @param {Object} [sessionOptions.collectVitals] Defines which device vitals should be collected in this session.
     * @param {bool} [sessionOptions.collectVitals.cpu=false] indicates whether to collect the device CPU usage.
     * @param {bool} [sessionOptions.collectVitals.memory=false] indicates whether to collect the device memory usage.
     * @param {bool} [sessionOptions.collectVitals.freeMemory=false] indicates whether to collect the device free memory.
     * @returns {Promise<Mobile.DeviceTO>} a promise that is fulfilled with the locked device.
     * @memberof SrfLab#
     */
    lockDeviceWithOptions: function (description, sessionOptions) {
        return this._mobileLab.lockDeviceWithOptions(description, sessionOptions);
    },

    /**
     * Obtains a device from the SRF Mobile lab by deviceID and locks it, so that only LeanFT can perform actions on it.
     * @param {string} deviceID The device ID used by SRF Mobile lab.
     * @returns {Promise<Mobile.DeviceTO>} a promise that is fulfilled with the locked device.
     * @memberof SrfLab#
     */
    lockDeviceById: function (deviceID) {
        return this._mobileLab.lockDeviceById(deviceID);
    },

    /**
     * Release the allocated device environment.
     * @param {Web.BrowserTO|Mobile.DeviceTO}envToRelease the browser or device environment to release.
     */
    releaseEnvironment: function (envToRelease) {
        envToRelease._release();
    }
};

module.exports.SrfLab = SrfLab;