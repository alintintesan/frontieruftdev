// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 03/05/2016.
 */

var assert = require("assert");
var lftVerify = require("../../verify/lft_verify.js");
require('expectations');
var Q = require("q");

describe("lftVerify unit tests", function() {
    var promiseMock1;
    var promiseMock2;

    beforeEach(function() {
        promiseMock2 = {
            then: function(cb) {
                return cb(expect(7));
            }
        };

        promiseMock1 = {
            then: function() {
                return promiseMock2;
            }
        }
    });

    describe("construction", function () {
        it("should chain a promise with the expect if value passed is a promise", function() {
            var verifyUnderTest = lftVerify(promiseMock1);
            assert.notEqual(verifyUnderTest._promise, null);
        });

        it("should create regular expect if value passed is not a promise", function() {
            var verifyUnderTest = lftVerify(8);
            assert.strictEqual(verifyUnderTest.constructor.name, "Object");
        });

        it("should have all keys of expect except 'toThrow'", function() {
            var verifyUnderTest = lftVerify(promiseMock1);
            var regularExpect = expect("");

            for(var expectKey in regularExpect) {
                if(expectKey !== "toThrow") {
                    assert(expectKey in verifyUnderTest, "key: " + expectKey + " is not in verifyUnderTest");
                }
            }
        });

        it("should not have the 'toThrow' key", function() {
            var verifyUnderTest = lftVerify(promiseMock1);
            assert(!("toThrow" in verifyUnderTest));
        });
    });

    describe("functions", function() {
        var deferred;
        var verifyUnderTest;

        beforeEach(function() {
            deferred = Q.defer();
            verifyUnderTest = lftVerify(deferred.promise);
        });

        describe("fail", function() {
            it("should throw exception with correct message", function(done) {
                deferred.resolve(null);
                var errMsg = "failing the test";
                verifyUnderTest.fail(errMsg).then(
                    function(result) {
                        assert.strictEqual(result, false);
                        done();
                    },
                    function(err){done(err);}
                );
            });
        });

        describe("toBe", function () {
            it("should succeed for correct value", function () {
                deferred.resolve(7);
                return verifyUnderTest.toBe(7);
            });

            it("should fail for in correct value", function (done) {
                deferred.resolve(7);

                verifyUnderTest.toBe(8).then(
                    function(result){
                        assert.strictEqual(result, false);
                        done();
                    },
                    function(){ done("exception was thrown");});
            });
        });

        describe("toBeCloseTo", function () {
            it("should succeed for correct value", function () {
                deferred.resolve(7.32);
                return verifyUnderTest.toBeCloseTo(7.3,1);
            });

            it("should fail for in correct value", function (done) {
                deferred.resolve(7.32);

                verifyUnderTest.toBeCloseTo(7.3,2).then(
                    function(result){assert.strictEqual(result, false); done();},
                    function(){done("exception was thrown");});
            });
        });

        describe("toBeDefined", function () {
            it("should succeed for correct value", function () {
                deferred.resolve(7);
                return verifyUnderTest.toBeDefined();
            });

            it("should fail for in correct value", function (done) {
                deferred.resolve(undefined);

                verifyUnderTest.toBeDefined().then(
                    function(result){assert.strictEqual(result, false); done();},
                    function(){done("exception was thrown");});
            });
        });

        describe("toBeFalsey", function () {
            it("should succeed for correct value", function () {
                deferred.resolve(null);
                return verifyUnderTest.toBeFalsey();
            });

            it("should fail for in correct value", function (done) {
                deferred.resolve(true);

                verifyUnderTest.toBeFalsey().then(
                    function(result){assert.strictEqual(result, false); done();},
                    function(){done("exception was thrown");});
            });
        });

        describe("toBeFalsy", function () {
            it("should succeed for correct value", function () {
                deferred.resolve(null);
                return verifyUnderTest.toBeFalsey();
            });

            it("should fail for in correct value", function (done) {
                deferred.resolve(true);

                verifyUnderTest.toBeFalsey().then(
                    function(result){assert.strictEqual(result, false); done();},
                    function(){done("exception was thrown");});
            });
        });

        describe("toBeGreaterThan", function () {
            it("should succeed for correct value", function () {
                deferred.resolve(7);
                return verifyUnderTest.toBeGreaterThan(6);
            });

            it("should fail for in correct value", function (done) {
                deferred.resolve(7);

                verifyUnderTest.toBeGreaterThan(8).then(
                    function(result){assert.strictEqual(result, false); done();},
                    function(){done("exception was thrown");});
            });
        });

        describe("toBeLessThan", function () {
            it("should succeed for correct value", function () {
                deferred.resolve(7);
                return verifyUnderTest.toBeLessThan(8);
            });

            it("should fail for in correct value", function (done) {
                deferred.resolve(7);

                verifyUnderTest.toBeLessThan(6).then(
                    function(result){assert.strictEqual(result, false); done();},
                    function(){done("exception was thrown");});
            });
        });

        describe("toBeNull", function () {
            it("should succeed for correct value", function () {
                deferred.resolve(null);
                return verifyUnderTest.toBeNull();
            });

            it("should fail for in correct value", function (done) {
                deferred.resolve(7);

                verifyUnderTest.toBeNull().then(
                    function(result){assert.strictEqual(result, false); done();},
                    function(){done("exception was thrown");});
            });
        });

        describe("toBeTruthy", function () {
            it("should succeed for correct value", function () {
                deferred.resolve(true);
                return verifyUnderTest.toBeTruthy();
            });

            it("should fail for in correct value", function (done) {
                deferred.resolve(null);

                verifyUnderTest.toBeTruthy().then(
                    function(result){assert.strictEqual(result, false); done();},
                    function(){done("exception was thrown");});
            });
        });

        describe("toBeUndefined", function () {
            it("should succeed for correct value", function () {
                deferred.resolve(undefined);
                return verifyUnderTest.toBeUndefined();
            });

            it("should fail for in correct value", function (done) {
                deferred.resolve(null);

                verifyUnderTest.toBeUndefined().then(
                    function(result){assert.strictEqual(result, false); done();},
                    function(){done("exception was thrown");});
            });
        });

        describe("toContain", function () {
            it("should succeed for correct value", function () {
                deferred.resolve([2,3]);
                return verifyUnderTest.toContain(2);
            });

            it("should fail for in correct value", function (done) {
                deferred.resolve([2,3]);

                verifyUnderTest.toContain(4).then(
                    function(result){assert.strictEqual(result, false); done();},
                    function(){done("exception was thrown");});
            });
        });

        describe("toEqual", function () {
            it("should succeed for correct value", function () {
                deferred.resolve({a: 1, b: 2});
                return verifyUnderTest.toEqual({a: 1, b: 2});
            });

            it("should fail for in correct value", function (done) {
                deferred.resolve({a: 1, b: 2});

                verifyUnderTest.toEqual({}).then(
                    function(result){assert.strictEqual(result, false); done();},
                    function(){done("exception was thrown");});
            });
        });

        describe("toMatch", function () {
            it("should succeed for correct value", function () {
                deferred.resolve("how are you?");
                return verifyUnderTest.toMatch(/you?/);
            });

            it("should fail for in correct value", function (done) {
                deferred.resolve("how are you?");

                verifyUnderTest.toMatch(/aaa/).then(
                    function(result){assert.strictEqual(result, false); done();},
                    function(){done("exception was thrown");});
            });
        });

        describe("toNotEqual", function () {
            it("should succeed for correct value", function () {
                deferred.resolve({a: 1, b: 2});
                return verifyUnderTest.toNotEqual({});
            });

            it("should fail for in correct value", function (done) {
                deferred.resolve({a: 1, b: 2});

                verifyUnderTest.toNotEqual({a: 1, b: 2}).then(
                    function(result){assert.strictEqual(result, false); done();},
                    function(){done("exception was thrown");});
            });
        });
    });

    describe("report", function () {
        var deferred;
        var expectUnderTest;
        var reportMock = {};

        before(function() {
            // clean the cached lft_expect module
            global.__LFT_REPORTER__ = reportMock;
            var module = require.resolve("../../verify/lft_verify.js");
            var cachedModule = require.cache[module];
            delete require.cache[cachedModule.id];
            lftVerify = require("../../verify/lft_verify.js");
        });

        it("should report successful except event if value is promise", function(done) {
            reportMock._reportExpectEvent = function(funcName, hasNot, argumentsForReport, shouldThrow){
                assert.strictEqual(funcName, "toBe");
                assert.strictEqual(hasNot, null);
                assert.deepEqual(argumentsForReport, [7,7]);
                assert.strictEqual(shouldThrow, true);
            }

            deferred = Q.defer();
            expectUnderTest = lftVerify(deferred.promise);
            deferred.resolve(7);
            expectUnderTest.toBe(7).then(
                function(){done();},
                function(){done("exception was not thrown");});
        });

        it("should report successful not expect event if value is promise", function(done) {
            reportMock._reportExpectEvent = function(funcName, hasNot, argumentsForReport, shouldThrow){
                assert.strictEqual(funcName, "toBe");
                assert.strictEqual(hasNot, true);
                assert.deepEqual(argumentsForReport, [7,8]);
                assert.strictEqual(shouldThrow, true);
            }

            deferred = Q.defer();
            expectUnderTest = lftVerify(deferred.promise);
            deferred.resolve(7);
            expectUnderTest.not.toBe(8).then(
                function(){done();},
                function(){done("exception was thrown");});
        });

        it("should report failed expect event if value is promise", function(done) {
            reportMock._reportExpectEvent = function(funcName, hasNot, argumentsForReport, shouldThrow, e){
                assert.strictEqual(funcName, "toBe");
                assert.strictEqual(hasNot, null);
                assert.deepEqual(argumentsForReport, [8,7]);
                assert.strictEqual(shouldThrow, false);
                assert.notEqual(e, null);
            }

            deferred = Q.defer();
            expectUnderTest = lftVerify(deferred.promise);
            deferred.resolve(8);
            expectUnderTest.toBe(7).then(
                function(){done();},
                function(){done("exception was thrown");});
        });

        it("should report successful expect event if value is not a promise", function() {
            reportMock._reportExpectEvent = function(funcName, hasNot, argumentsForReport, shouldThrow){
                assert.strictEqual(funcName, "toBe");
                assert.strictEqual(hasNot, null);
                assert.deepEqual(argumentsForReport, [7,7]);
                assert.strictEqual(shouldThrow, false);
            }

            expectUnderTest = lftVerify(7);
            expectUnderTest.toBe(7);
        });

        it("should report successful not expect event if value is not a promise", function() {
            reportMock._reportExpectEvent = function(funcName, hasNot, argumentsForReport, shouldThrow){
                assert.strictEqual(funcName, "toBe");
                assert.strictEqual(hasNot, true);
                assert.deepEqual(argumentsForReport, [7,8]);
                assert.strictEqual(shouldThrow, false);
            }

            expectUnderTest = lftVerify(7);
            expectUnderTest.not.toBe(8);
        });

        it("should report failed expect event if value is not a promise", function(done) {
            reportMock._reportExpectEvent = function(funcName, hasNot, argumentsForReport, shouldThrow, e){
                assert.strictEqual(funcName, "toBe");
                assert.strictEqual(hasNot, null);
                assert.deepEqual(argumentsForReport, [7,8]);
                assert.strictEqual(shouldThrow, false);
                assert.notEqual(e, null);
            }

            expectUnderTest = lftVerify(7);
            try {
                expectUnderTest.toBe(8);
            }catch(error){
                done("exception wasn't thrown");
                return;
            }
            done();
        });

        it("should report the event with the used arguments", function() {
            var typesToCheck = [5,[0,1,2],{'key':'value'}];

            for(var i=0; i<typesToCheck.length; i++){
                reportMock._reportExpectEvent = function(funcName, hasNot, argumentsForReport){
                    assert.deepEqual(argumentsForReport, [typesToCheck[i],typesToCheck[i]]);
                }
                expectUnderTest = lftVerify(typesToCheck[i]);
                expectUnderTest.toBe(typesToCheck[i]);
            }
        });

        it("should report the event correct arguments from different type", function() {
            var expectedToCheck = [5,[0,1,2],{'key':'value'}];
            var actualToCheck = [[0,1,2],{'key':'value'},5];

            for(var i=0; i<expectedToCheck.length; i++){
                reportMock._reportExpectEvent = function(funcName, hasNot, argumentsForReport){
                    assert.deepEqual(argumentsForReport, [expectedToCheck[i],actualToCheck[i]]);
                }
                try {
                    expectUnderTest = lftVerify(expectedToCheck[i]);
                    expectUnderTest.toBe(actualToCheck[i]);
                }catch(error){
                    continue;
                }
            }
        });
    });
});