// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 20/12/2015.
 */
var Core = require("leanft.sdk.core");
var ArrayUtils = Core.ArrayUtils;
var Logger = Core.Logger;
var StackManipulator = Core.StackManipulator;
require('expectations');
var reporter = global.__LFT_REPORTER__;

/*jshint eqnull:true */
function lftExpect(value) {
    var shouldThrow = true;
    var args = ArrayUtils.toArray(arguments);
    args.splice(0,1);

    // verify mode
    if (args[0] && args[0].shouldThrowError === false){
        shouldThrow = false;
    }

    return new ExpectWrapper(value, shouldThrow);
}

function ExpectWrapper(value, shouldThrow) {
    this._logger = new Logger("expect");
    this._shouldThrow = shouldThrow;
    Object.defineProperty(this, 'not', {
        get: function() {
            this._hasNot = !this._hasNot;
            return this;
        },
        enumerable: true
    });


    var expectToWrap = expect();

    for(var expectKey in expectToWrap) {
        if(!(expectKey in this) && (ExpectWrapper.prototype._notSupportedKeys.indexOf(expectKey) === -1)) {
            this[expectKey] = this._invoke.bind(this, expectKey);
        }
    }

    this._storedStack = StackManipulator.removeFromTop(new Error().stack, 2);

    // check if promise
    if(value == null || !value.then){
        this._exp = expect(value);
    }
    else{
        this._promise = value.then(expect);
    }
}

ExpectWrapper.prototype = {
    _promise: null,
    _hasNot: null,
    _notSupportedKeys: ["toThrow"],
    _logger: null,
    _storedStack: null,
    _shouldThrow: null,
    _exp: null,

    _invoke: function(funcName){
        var args = ArrayUtils.toArray(arguments);
        args.splice(0,1);

        // promise mode
        if (this._promise) {
            this._promise = this._promise.then(this._execute.bind(this, funcName, args));
            return this._promise;
        }
        return this._execute(funcName, args, this._exp);
    },

    _execute : function(funcName, args, exp) {
        var argumentsForReport = args.concat(exp.value);
        try {
            if(this._hasNot) {
                this._logger.debug("_invoke(" + funcName + "):using not");
                exp = exp.not;
            }
            exp[funcName].apply(exp, args);
            if (reporter){
                reporter.reportExpectEvent({name:funcName, isNot:this._hasNot, args:argumentsForReport, shouldThrow:this._shouldThrow, func:exp[funcName]});
            }
            return true;
        } catch(e) {
            this._logger.info(e);
            e.lftStack = this._storedStack;
            if (reporter){
                reporter.reportExpectEvent({name:funcName, isNot:this._hasNot, args:argumentsForReport, shouldThrow:this._shouldThrow, func:exp[funcName], error:e});
            }
            if (this._shouldThrow)
                throw e;

            return false;
        }
    }
};

module.exports = lftExpect;