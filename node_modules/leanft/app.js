// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/10/2015.
 * Contains the SDK definitions.
 */

/* jshint esversion: 6 */

var os = require("os");
var Session = require("./lib/session.js").Session;
var SrfLab = require("./lib/srf_lab.js").SrfLab;
var ServerLauncher = require("./lib/server_launcher.js").ServerLauncher;
var Web = require("leanft.sdk.web");
var Mobile = require("leanft.sdk.mobile");
var SapUI5 = require("leanft.sdk.sapui5");
var Insight = require("leanft.sdk.insight");
var STDWindow = require("leanft.sdk.stdwin");
var Core = require("leanft.sdk.core");
var PromiseManager = Core.PromiseManager;
var Logger = Core.Logger;
var Report = require("leanft.report");
var SapGui = require("leanft.sdk.sapgui");
var TerminalEmulators = require("leanft.sdk.te");
var PowerBuilder = require("leanft.sdk.powerbuilder");
var WinForms = require("leanft.sdk.winforms");
var Java = require("leanft.sdk.java");
var Oracle = require("leanft.sdk.oracle");
var WPF = require("leanft.sdk.wpf");
var ApiTesting = require("leanft.sdk.apitesting.uft");
const AI = require("leanft.sdk.ai");
const UIAPro = require("leanft.sdk.uiapro");

var logger = new Logger("LFT");
var promiseManager = new PromiseManager();
var serverLauncher = undefined;
var defaultSession = new Session(promiseManager);
defaultSession.factory.registerFactory(new Web.WebFactory(defaultSession));
defaultSession.factory.registerFactory(new Mobile.MobileFactory(defaultSession));
defaultSession.factory.registerFactory(new SapUI5.SapUI5Factory(defaultSession));
defaultSession.factory.registerFactory(new Insight.InsightFactory(defaultSession));
defaultSession.factory.registerFactory(new STDWindow.StdWindowFactory(defaultSession));
defaultSession.factory.registerFactory(new SapGui.SapGuiFactory(defaultSession));
defaultSession.factory.registerFactory(new TerminalEmulators.TerminalEmulatorsFactory(defaultSession));
defaultSession.factory.registerFactory(new WinForms.WinFormsFactory(defaultSession));
defaultSession.factory.registerFactory(new Java.JavaFactory(defaultSession));
defaultSession.factory.registerFactory(new WPF.WPFFactory(defaultSession));
defaultSession.factory.registerFactory(new PowerBuilder.PowerBuilderFactory(defaultSession));
defaultSession.factory.registerFactory(new Oracle.OracleFactory(defaultSession));
defaultSession.factory.registerFactory(new AI.AIFactory(defaultSession));
defaultSession.factory.registerFactory(new UIAPro.UIAProFactory(defaultSession));

if (global.jasmine) {
    require("leanft.report/jasmine");
}

var mobileLab = new Mobile.MobileLab(defaultSession, "MobileCenter");
/**
 * LFT namespace - The main LeanFT module.
 * @namespace LFT
 */

var LFT = {
    SDK: defaultSession,
    Position: Core.Position,
    MouseButton: Core.MouseButton,
    SwipeDirection: Core.SwipeDirection,
    ImageUtils: new Core.ImageUtils(defaultSession),
    Keyboard: new Core.Keyboard(defaultSession),
    Mouse: new Core.Mouse(defaultSession),
    whenDone: defaultSession._promiseManager.whenDone.bind(defaultSession._promiseManager),
    /**
     * This method should be called by the user before each test method.
     * @returns {void}
     * @memberof LFT#
     */
    beforeTest: function () {

    },
    /**
     * This method should be called by the user after each test method.
     * @returns {void}
     * @memberof LFT#
     */
    afterTest: function () {
        promiseManager._reset();
    },

    _enableUft: function () {
        const UftObjects = require("../leanft.sdk.uft/app.js");
        defaultSession.factory.registerFactory(new UftObjects.UftObjectFactory(defaultSession));
        LFT.UftObjects = UftObjects;
    },

    /**
     * Initializes the SDK with the specified configuration.
     * @param {string} config The SDK configuration
     * @returns {Promise<void>}
     * @memberof LFT#
     */
    init: function (config, libraryMode) {
        var processedConfig = defaultSession._initWithoutConnect(config, libraryMode);

        serverLauncher = new ServerLauncher(processedConfig, promiseManager);
        var launchError;
        var launchPromise = serverLauncher.launchIfNeeded();

        return launchPromise.catch(function (err) {
            //ignoring launch failure and trying to connect anyway
            logger.debug("LeanFT engine launch failed: " + err.message);
            launchError = err;
        }).then(function () {
            return defaultSession._connect().then(function () {
                LFT.Reporter._init(defaultSession, processedConfig.report);
                var reportToSrfListener = new LFT.Reporter.ReportToSrfListener(defaultSession);
                LFT.Reporter._addReportListener(reportToSrfListener);
            });
        }).catch(function (err) {
            if (launchError) {
                err.message = err.message + os.EOL + "Possible cause: " + launchError.message;
            }

            throw err;
        });
    },
    /**
     * Performs an SDK cleanup when connection ends.
     * @returns {void}
     * @memberof LFT#
     */
    cleanup: function(){
        try {
            LFT.Reporter._closeAllReportLevels();
        } catch (e) {}

        return defaultSession.cleanup().then(function() {
            return serverLauncher.stopIfNeeded();
        }).then(function () {
            LFT.Reporter.cleanup();
        });
    },
    Web: {
        Browser: new Web.BrowserFactory(defaultSession, mobileLab),
        BrowserType: Web.BrowserType,
        CapabilitiesNames: Web.CapabilitiesNames,
        Link: Web.Link,
        Button: Web.Button,
        Edit: Web.Edit,
        RadioGroup: Web.RadioGroup,
        Element: Web.WebElement,
        ListBox: Web.ListBox,
        CheckBox: Web.CheckBox,
        AgGrid: Web.AgGrid,
        UiGrid: Web.UiGrid,
        Area: Web.Area,
        Image: Web.Image,
        ImageTypes: Web.ImageTypes,
        DialogButton: Web.DialogButton,
        Page: Web.Page,
        Frame: Web.Frame,
        AudioControl: Web.AudioControl,
        VideoControl: Web.VideoControl,
        FileField: Web.FileField,
        Table: Web.Table,
        Event: Web.Event,
        MouseEvent: Web.MouseEvent,
        Menu: Web.Menu,
        TreeView: Web.TreeView,
        NumericField: Web.NumericField,
        TabStrip: Web.TabStrip,
        Slider: Web.Slider,
        EmulatedDevice: Web.EmulatedDevice
    },
    Mobile: Mobile.DescriptionsAndEnums,
    Insight: {
        Insight: Insight.Insight
    },
    Desktop: new Core.Desktop(defaultSession),
    Aut: Core.Aut,
    StdWin: STDWindow.DescriptionsAndEnums,
    SAPUI5: SapUI5.DescriptionsAndEnums,
    SAPGUI: SapGui.DescriptionsAndEnums,
	WinForms: WinForms.DescriptionsAndEnums,
    Java: Java.DescriptionsAndEnums,
    WPF: WPF.DescriptionsAndEnums,
    TerminalEmulators: TerminalEmulators.DescriptionsAndEnums,
    PowerBuilder: PowerBuilder.DescriptionsAndEnums,
    Oracle: Oracle.DescriptionsAndEnums,
    UIAPro: UIAPro.DescriptionsAndEnums,
    Reporter: Report,
    KeyModifier: Core.KeyModifier,
    Keys: Core.Keys,
    FunctionKeys: Core.FunctionKeys,
    WindowState: Core.WindowState,
    WindowStyles: Core.WindowStyles,
    WindowExtendedStyles: Core.WindowExtendedStyles,
    VerticalScrollPosition: Core.VerticalScrollPosition,
    ScrollOrientation: Core.ScrollOrientation,
    ScrollType: Core.ScrollType,
    CheckedState: Core.CheckedState,
    DateFormatType: Core.DateFormatType,
    Horizontal: Core.Horizontal,
    Vertical: Core.Vertical,
    Proximity: Core.Proximity,
    APITesting: {
        APITestRunner: new ApiTesting.APITestRunner(defaultSession)
    },
    TypeRegistry: Core.TypeRegistry,
    RuntimeAccessMode: Core.RuntimeAccessMode
};

LFT.SrfLab = new SrfLab(LFT.Web.Browser, new Mobile.MobileLab(defaultSession, "srf"));

LFT.SAPGUI.GuiSessionFactory = new SapGui.GuiSessionFactory(defaultSession);

LFT.Mobile.Lab = mobileLab;

LFT.AI = new AI.AIImpl(defaultSession);

module.exports = LFT;
