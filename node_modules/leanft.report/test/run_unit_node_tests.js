// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var assert = require("assert");
var RunUnitNode = require("../lib/run_unit_node").RunUnitNode;

describe("RunUnitNode tests", function () {
    var runUnitNodeUnderTest;

    beforeEach(function () {
        runUnitNodeUnderTest = new RunUnitNode({nodeType: "Test"});
    });

    [["Passed", "Passed", "Passed"],
        ["Passed", "Failed", "Failed"],
        ["Failed", "Passed", "Failed"],
        ["Passed", "Warning", "Warning"],
        ["Warning", "Passed", "Warning"],
        ["Warning", "Warning", "Warning"],
        ["Warning", "Failed", "Failed"],
        ["Failed", "Warning", "Failed"],
        ["Failed", "Failed", "Failed"]].forEach(function (params) {
        var childNode1Status = params[0];
        var childNode2Status = params[1];
        var expectedStatus = params[2];

        it("should set status of node to: " + expectedStatus + " if child nodes status are " + childNode1Status + " and " + childNode2Status, function () {
            //Prepare
            var childNode1 = new RunUnitNode({nodeType: "Step"});
            var childNode2 = new RunUnitNode({nodeType: "Step"});
            childNode1._status = childNode1Status;
            childNode2._status = childNode2Status;

            runUnitNodeUnderTest.addNodeToList(childNode1);
            runUnitNodeUnderTest.addNodeToList(childNode2);

            //Act
            runUnitNodeUnderTest.closeLevel();

            //Verify
            assert.strictEqual(runUnitNodeUnderTest._status, expectedStatus);
        });
    });

});
