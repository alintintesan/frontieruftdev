// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var assert = require("assert");
var sinon = require("sinon");
var ReportUtils = require("../lib/report_utils").ReportUtils;

describe("ReportUtils Tests",function() {
    var reportUtilsUnderTest = ReportUtils;
    var sandbox;

    beforeEach(function () {
        sandbox = sinon.sandbox.create();
    });

    afterEach(function () {
        sandbox.restore();
    });

    describe("getTOProperties",function() {
       beforeEach(function () {
            sandbox.stub(reportUtilsUnderTest, "getTechnologyFromTestObject").returns("some_tech");
        });

        afterEach(function () {
            delete reportUtilsUnderTest._propertyValueHandler.boolean;
        });

        it("should use the original property value if propertyValueHandler don't handles property type",function(){
            var testObjectUnderTest = {"_description":{"isMaximized":function(){return true;}},_getApplicationInfo:sinon.stub().returns(undefined)};
            var properties = reportUtilsUnderTest.getTOProperties(testObjectUnderTest);
            assert.ok(properties.length == 1)
            assert.deepEqual(properties[0], {name :"isMaximized", value:true});
        });

        it("should use the propertyValueHandler if property type is supported",function(){
            reportUtilsUnderTest._propertyValueHandler.boolean = sinon.stub().returns(true);

            var testObjectUnderTest = {"_description":{"isMaximized":function(){return true;}},_getApplicationInfo:sinon.stub().returns(undefined)};
            var properties = reportUtilsUnderTest.getTOProperties(testObjectUnderTest);
            assert.ok(properties.length == 1)
            assert.deepEqual(properties[0], {name :"isMaximized", value:true});
            sinon.assert.calledOnce(reportUtilsUnderTest._propertyValueHandler.boolean);
            sinon.assert.calledWith(reportUtilsUnderTest._propertyValueHandler.boolean, sinon.match(true))
        });

        it("should set empty name and vri text when TO contains VRI relation",function(){
            reportUtilsUnderTest._propertyValueHandler.boolean = sinon.stub().returns(true);

            var testObjectUnderTest = {"_description":{vri:function(){return 'relation';}},_getApplicationInfo:sinon.stub().returns(undefined)};
            var properties = reportUtilsUnderTest.getTOProperties(testObjectUnderTest);
            assert.deepEqual(properties[0], {name :"", value:'* Test object description also contains VRI definitions'});
        });

        it("should return application info on supported testObjects",function(){
            reportUtilsUnderTest._propertyValueHandler.boolean = sinon.stub().returns(true);

            var testObjectUnderTest = {_getApplicationInfo:sinon.stub().returns({"version":"52", "type":"someType"})};
            var properties = reportUtilsUnderTest.getTOProperties(testObjectUnderTest);
            assert.deepEqual(properties[0], {
                "name": "version",
                "value": "52",
            });
        });
    });

    describe("isContainerItemsArray",function() {
        it("should return false if value is not array",function(){
            var result = reportUtilsUnderTest.isContainerItemsArray('kuku');
            assert.strictEqual(result,false);
        });

        it("should return false if value is array without container items",function(){
            var result = reportUtilsUnderTest.isContainerItemsArray(['kuku']);
            assert.strictEqual(result,false);
        });

        it("should return true if  array contains container item",function(){
            var result = reportUtilsUnderTest.isContainerItemsArray(['kuku', {_identifier:"a"}]);
            assert.strictEqual(result,true);
        });
    });

});