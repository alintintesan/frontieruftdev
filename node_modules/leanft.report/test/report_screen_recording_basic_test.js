/**
 * Created by diamanta on 11/10/2015.
 */
var assert = require("assert");
var LFT = require("../../leanft/app");
var SDK = LFT.SDK;
var Web = LFT.Web;

var expect = require("../../leanft/expect");
//var Reporter = require("../../leanft/report");

var browserTypeToTest = Web.BrowserType.Firefox;

var browser;

jasmine.DEFAULT_TIMEOUT_INTERVAL = 20 * 1000;

xdescribe("Test Report Browser", function () {

    beforeEach(function (done) {
        LFT.SDK.init();
        LFT.init();
        LFT.whenDone(done);
    });
    
    var test1 = it("Start screen recording with parameters", function (done) {
        console.log("");
        console.log(test1.description);
        console.log("");

        LFT.Reporter.startScreenRecording(true, "c:\\temp\\screenrecording.avi").then(function() {
            sleep(5000)
            LFT.Reporter.stopScreenRecording();
            LFT.whenDone(done);
        }).catch(function(e) {
            console.log("ERROR: " + e);
            assert.fail("not expected");
            LFT.whenDone(done);
        });
    });
    
    var test2 = it("Start screen recording with path only", function (done) {
        console.log("");
        console.log(test2.description);
        console.log("");

        LFT.Reporter.startScreenRecording("c:\\temp\\screenrecording.avi").then(function(){
            sleep(3000)
            LFT.Reporter.stopScreenRecording();
            LFT.whenDone(done);
        }).catch(function() {
            console.log("ERROR");
            assert.fail("not expected");
            LFT.whenDone(done);
        });
        
    });
    
    var test3 = it("Start screen recording with compression only", function (done) {
        console.log("");
        console.log(test3.description);
        console.log("");

        LFT.Reporter.startScreenRecording(true).then(function() {
            sleep(3000)
            LFT.Reporter.stopScreenRecording();
            LFT.whenDone(done);
        }).catch(function() {
            console.log("ERROR");
            assert.fail("not expected");
            LFT.whenDone(done);
        });
    });
    
    var test4 = it("Start screen recording with default parameters", function (done) {
        console.log("");
        console.log(test4.description);
        console.log("");

        LFT.Reporter.startScreenRecording().then(function() {
            sleep(3000)
            LFT.Reporter.stopScreenRecording();
            LFT.whenDone(done);
        }).catch(function() {
            console.log("ERROR");
            assert.fail("not expected");
            LFT.whenDone(done);
        });
    });

    var test5 = it("Start screen recording with invalid path", function (done) {
        console.log("");
        console.log(test5.description);
        console.log("");

        LFT.Reporter.startScreenRecording("c:\\temp\\_invaldi_.xxx").then(function(){
            assert.fail("not expected");
            LFT.whenDone(done);
        }).catch(function(){
            LFT.whenDone(done);
        });

        
    });

    afterEach(function (done) {
        SDK.cleanup();

        LFT.whenDone(done);
    });


    function sleep(ms) {
        var time_ms = new Date().getTime();
        while (new Date().getTime() < time_ms + ms) { }
    }
});





