// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var assert = require("assert");
var sinon = require("sinon");
var ReportModel = require("../lib/report_model.js").ReportModel;

describe("ReportModel Tests",function() {
    var reportModelUnderTest = new ReportModel();

    describe("removeCurrentRunUnitNode",function() {
        it("should not remove node from model if node not found by type",function(){
            reportModelUnderTest._findNodeByType = sinon.stub().returns(false);
            reportModelUnderTest._currentNode = sinon.stub().returns(undefined);
            //sinon.assert.notCalled(reportModelUnderTest._currentNode);
            var isRemoved = reportModelUnderTest.removeCurrentRunUnitNode("kuku");
            assert.equal(isRemoved, false);
        });

        it("should not remove node from model if node is not in parents child nodes",function(){
            var nodeMock = {_parent:{_childRunUnits:[]}};
            reportModelUnderTest._findNodeByType = sinon.stub().returns(nodeMock);
            var isRemoved = reportModelUnderTest.removeCurrentRunUnitNode("kuku");
            assert.equal(isRemoved, false);
        });

        it("should remove node from model and should not change the current node",function(){
            var currentNodeMock = {};
            var nodeMock = {_parent:{_childRunUnits:[]}};
            nodeMock._parent._childRunUnits = [nodeMock,nodeMock];
            reportModelUnderTest._findNodeByType = sinon.stub().returns(nodeMock);
            reportModelUnderTest._currentNode = currentNodeMock;
            var isRemoved = reportModelUnderTest.removeCurrentRunUnitNode("kuku");
            assert.equal(isRemoved, true);
            assert.strictEqual(reportModelUnderTest._currentNode, currentNodeMock);
        });

        it("should remove node from model and should change the current node to parent if parent has no child's",function(){
            var currentNodeMock = {};
            var nodeMock = {_parent:{_childRunUnits:[]}};
            nodeMock._parent._childRunUnits = [nodeMock];
            reportModelUnderTest._findNodeByType = sinon.stub().returns(nodeMock);
            reportModelUnderTest._currentNode = currentNodeMock;
            var isRemoved = reportModelUnderTest.removeCurrentRunUnitNode("kuku");
            assert.equal(isRemoved, true);
            assert.strictEqual(reportModelUnderTest._currentNode, nodeMock._parent);
        });

        it("should should not re-throw exception",function(){
            reportModelUnderTest._findNodeByType = function(){throw new Error();};
            var isRemoved = reportModelUnderTest.removeCurrentRunUnitNode("kuku");
            assert.equal(isRemoved, false);
        });
    });
});