// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var assert = require("assert");
var sinon = require("sinon");
var ExternalLabReportSender = require("../lib/external_lab_report_sender").ExternalLabReportSender;
var Q = require("q");

describe("ExternalLabReportSender tests", function () {
    var reportSenderUnderTest;
    var sessionMock;

    beforeEach(function () {
        sessionMock = {
            _communication: {
                _notify: sinon.stub(),
                _send: sinon.stub()
            }
        };
        reportSenderUnderTest = new ExternalLabReportSender(sessionMock, "MyLab");
    });

    describe("sendReportEvent", function () {
        it("should notify ReportToExternal message with reportContext", function () {
            reportSenderUnderTest.sendReportEvent("MyReportContext", {a: "aa"});
            sinon.assert.calledOnce(sessionMock._communication._notify);
            sinon.assert.calledWith(sessionMock._communication._notify, "ReportToExternal", {
                reportContext: "MyReportContext",
                labName: "MyLab",
                data: {a: "aa"}
            });
        });
    });

    describe("sendCloseReportEvent", function () {
        it("should notify ReportCloseToExternal message with reportContext", function () {
            reportSenderUnderTest.sendCloseReportEvent("MyReportContext", {a: "aa"});
            sinon.assert.calledOnce(sessionMock._communication._notify);
            sinon.assert.calledWith(sessionMock._communication._notify, "ReportCloseToExternal", {
                reportContext: "MyReportContext",
                labName: "MyLab",
                data: {a: "aa"}
            });
        });
    });

    describe("closeReportContext", function () {
        it("should notify CloseReportContext message with reportContext", function () {
            reportSenderUnderTest.closeReportContext("MyReportContext");
            sinon.assert.calledOnce(sessionMock._communication._notify);
            sinon.assert.calledWith(sessionMock._communication._notify, "CloseReportContext", {
                reportContext: "MyReportContext",
                labName: "MyLab"
            });
        });
    });
    
    describe("createReportContextForId", function () {
        it("should send CreateReportContext message with lab name and id", function () {
            sessionMock._communication._send.returns(Q.resolve(null));
            reportSenderUnderTest.createReportContextForId("MyId");

            sinon.assert.calledOnce(sessionMock._communication._send);
            sinon.assert.calledWith(sessionMock._communication._send, "CreateReportContext", {
                labName: "MyLab",
                testObject: "MyId"
            });
        });

        it("should return null if _send returns null", function () {
            sessionMock._communication._send.returns(Q.resolve(null));
            return reportSenderUnderTest.createReportContextForId("MyId").then(function (result) {
                assert.strictEqual(result, null);
            });
        });

        it("should return null if _send returns object without reportContext", function () {
            sessionMock._communication._send.returns(Q.resolve({}));
            return reportSenderUnderTest.createReportContextForId("MyId").then(function (result) {
                assert.strictEqual(result, null);
            });
        });

        it("should return null if _send is rejected", function () {
            sessionMock._communication._send.returns(Q.reject(null));
            return reportSenderUnderTest.createReportContextForId("MyId").then(function (result) {
                assert.strictEqual(result, null);
            });
        });

        it("should return reportContext if _send returns object with reportContext", function () {
            sessionMock._communication._send.returns(Q.resolve({reportContext: "someReportContext"}));
            return reportSenderUnderTest.createReportContextForId("MyId").then(function (result) {
                assert.strictEqual(result, "someReportContext");
            });
        });
    });
});