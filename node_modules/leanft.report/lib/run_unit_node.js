// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var LFT = require("leanft.sdk.core");
var Utils = LFT.ObjectUtils;
var ReportUtils = require("./report_utils.js").ReportUtils;
var RunUnitNodeBase = require("./run_unit_node_base.js").RunUnitNodeBase;
var Enums = require("./enums.js");
var RunUnitNodeState = Enums.RunUnitNodeState;
var Status = Enums.Status;
var statusToInt = Enums.statusToInt;

function RunUnitNode(node){
    this.init(node);
    this._childRunUnits = [];
    this._environmentInfo = {};
    this._generalInfo = {};
}

Utils.inherit(RunUnitNode, RunUnitNodeBase, {
    _environmentInfo: null,
    _generalInfo: null,
    _childRunUnits: null,


   closeLevel: function (state) {
        if (state == RunUnitNodeState.Done)
            return;

        var now = ReportUtils.getCurrentDateTime();
        this._duration = now.getTime() - this._time.getTime();
        this._state = RunUnitNodeState.Done;

        for (var i = 0; i < this._childRunUnits.length; i++){
            var childNode = this._childRunUnits[i];
            childNode.closeLevel();

            if (this._status !== childNode._status && statusToInt(this._status) < statusToInt(childNode._status)) {
                this._status = childNode._status;
            }
        }
    },
    cloneNode: function (state) {
    },

    addNodeToList: function (newTest) {
        newTest._parent = this;
        this._childRunUnits.push(newTest);

        // handle node with exception
        if (newTest._exception !== null) {
            this._exception = newTest._exception;
            this._status = newTest._status;
        }
        return newTest;
    },

    updateExistingNode: function (nodeToUpdate) {
        this._state = RunUnitNodeState.InProgress;
        this._parent._state = RunUnitNodeState.InProgress;
    },
});

module.exports.RunUnitNode = RunUnitNode;
