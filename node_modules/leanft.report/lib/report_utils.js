// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var fs = require('fs');
var path = require('path');
var uuidv4 = require('uuid/v4');

var ReportUtils = {
    SkeletonNodes : ["Suite","Spec", "Region", "Run"],

    getCurrentDateTime : function() {
        return new Date();
    },

    getCurrentDateTimeInStringFormat: function() {
        function addLeadingZero(num) {
            if(num<10) {
                return '0' + num;
            }

            return num;
        }

        var currentDate = new Date();
        var dd = addLeadingZero(currentDate.getDate());
        var MM = addLeadingZero(currentDate.getMonth()+1); //January is 0!

        var hh = addLeadingZero(currentDate.getHours());
        var mm = addLeadingZero(currentDate.getMinutes());
        var ss = addLeadingZero(currentDate.getSeconds());

        var yyyy = currentDate.getFullYear();
        return dd+'_'+MM+'_'+yyyy+'_'+hh+'_'+mm+'_'+ss;
    },

    areStringsEqual : function(s1,s2) {
        if (s1 === s2)
            return true;
        if (s1 === null)
            return (s2 === null);
        return s1.equals(s2);
    },

    generateUUID : function () {
        return uuidv4();
    },

    directoryExists : function (reportTargetDirecotry) {
        return fs.existsSync(reportTargetDirecotry);
    },

    replaceToAbsolutePath : function (constructedPath) {
        return path.resolve(constructedPath);
    },

    createDirectory: function (tempFolder) {
        try {
            fs.mkdirSync(tempFolder);
        } catch(e) {
            if ( e.code != 'EEXIST' ) throw e;
        }
    },

    isStructureNode: function(node){
        var index =  ReportUtils.SkeletonNodes.indexOf(node._nodeType);

        if (index > -1)
            return true;

        return false;
    },

    getMapValues : function(map){
        var values = Object.keys(map).map(function(key){
            return this[key];
        }, map);
        return values;
    },


    deleteFolder : function(path) {
        if( fs.existsSync(path) ) {
            fs.readdirSync(path).forEach(function(file,index){
                var curPath = path + "/" + file;
                if(fs.lstatSync(curPath).isDirectory()) { // recurse
                    ReportUtils.deleteFolder(curPath);
                } else { // delete file
                    fs.unlinkSync(curPath);
                }
            });
            fs.rmdirSync(path);
        }
    },

    isImagePath : function(string) {
        var extension = string.substr(-3);
        if(extension === "png" || extension == "jpg" || extension === "bmp"){
            return true;
        }
        return false;
    },

    base64_encode: function (file) {
        // read binary data
        var bitmap = fs.readFileSync(file);
        // convert binary data to base64 encoded string
        return new Buffer(bitmap).toString('base64');
    },

    base64_decode : function(base64str, file, cb) {
        // create buffer object from base64 encoded string, it is important to tell the constructor that the string is base64 encoded
        var bitmap = new Buffer(base64str, 'base64');

        if (!cb) {
            // write buffer to file
            fs.writeFileSync(file, bitmap);
        }
        else{
            fs.writeFile(file,bitmap, cb);
        }
    },


getParamNames : function (func, argumentNames) {
    if (argumentNames === 0)
        return null;

    var strip_comments = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
    var argument_names = /([^\s,]+)/g;

    var fnStr = func.toString().replace(strip_comments, '');
    var result = fnStr.slice(fnStr.indexOf('(')+1, fnStr.indexOf(')')).match(argument_names);
    if(result === null)
        result = [];
    return result;
},

    getLeanFtTypeFromTestObject: function (testObject) {
        if (testObject._nativeClass === "Browser") {
            return "Browser";
        }

        if (testObject._nativeClass === "Device") {
            return "Device";
        }

        if (!testObject._description || !testObject._description.leanFTType)
            return null;

        return testObject._description.leanFTType.leanftType || "";
    },

    getTechnologyFromTestObject: function (testObject) {
        if (testObject._nativeClass === "Browser") {
            return "Web";
        }

        if (testObject._nativeClass === "Device") {
            return "Mobile";
        }

        if (!testObject._description || !testObject._description.leanFTType)
            return null;

        return testObject._description.leanFTType.technology || "";
    },

    getTOProperties: function (testObject) {
        if (testObject._getApplicationInfo) {
            // handle application context objects like Browser
            var applicationInfo = testObject._getApplicationInfo();
            if (applicationInfo) {
                return Object.keys(applicationInfo).map(function (key) {
                    return { name: key, value: applicationInfo[key] };
                });
            }
        }

        // set the properties value
        var description = testObject._description || {};

        var descriptionProperties = [];

        for (var key in description) {
            if (typeof (description[key]) === "function" && key[0] !== '_' && key.toString() !== "constructor") {
                descriptionProperties.push(key);
            }
        }

        var technology = ReportUtils.getTechnologyFromTestObject(testObject).toLowerCase();

        var properties = descriptionProperties.map(function (key) {
            var value = description[key]();
            if (value === undefined || value === null)
                return null;

            if(technology === "ai" && key === "locator") {

                var locatorValStr = "";
                if (value.direction) {
                    locatorValStr = "{{direction = " + value.direction + "}";
                    if (value.index != null) {
                        locatorValStr += ", {index = " + value.index + "}";
                    }
                    locatorValStr += "}";
                }
                else if (value.relation) {
                    return {name: "", value: "* Test object description also contains AI VRI definitions"};
                }
                return {name: key, value: locatorValStr};
            }

            var propertyValue = ReportUtils._propertyValueHandler[typeof (value)] ? ReportUtils._propertyValueHandler[typeof (value)](value) : value;

            if (propertyValue === null || Number.isNaN(value))
                return null;

            // handle vri relation
            if (key == 'vri') {
                return { name: "", value: '* Test object description also contains VRI definitions' };
            }

            return { name: key, value: propertyValue };
        }).filter(function (value) {
            return value !== null;
        });
        return properties;
    },

    _propertyValueHandler: {
        object: function (value) {
            if (Array.isArray(value)) {
                return value.map(function (item) {
                    return ReportUtils._propertyValueHandler[typeof (item)](item);
                }).join(", ");
            }

            if (value._keyPrefix || value._keysMap) {
                var values = [];
                for (var item in value) {
                    // check if it's public method
                    if (item[0] !== '_') {
                        var key = ReportUtils._propertyValueHandler[typeof (item)](item);
                        var result = ReportUtils._propertyValueHandler[typeof (value[item])](value[item]);
                        values.push({ key: key, value: result });
                    }
                }

                if (values.length === 0)
                    return null;

                if (value._keyPrefix) {
                    return "{" + values.map(function (item) {
                            return "{" + item.key + " ," + item.value + "}";
                        }).join(", ") + "}";
                }
                return "{" + values.map(function (item) {
                        return "{" + item.key.replace(/['"]+/g, '') + " = " + item.value + "}";
                    }).join(", ") + "}";
            }
            return value.toString();
        },

        string: function (value) {
            return value;
        },

        number: function (value) {
            return value;
        }
    },

    /*jshint eqnull:true */
    isContainerItemsArray: function (value) {
        if (!Array.isArray(value))
            return false;

        var containerItems = value.filter(function (value) {
            if (value != null) {
                return value._identifier != null;
            }
            return false;
        });

        if (containerItems != null && containerItems.length > 0)
            return true;

        return false;
    },

    asPromise: function (value) {
        if(value && value.then) {
            return value;
        }

        return {
            then: function (callback) {
                return callback(value);
            }
        };
    },

    encodeHtmlEntities: function(str){
        if(typeof str == "number") {
            return str;
        }
        str = str.replace("<", "&lt;");
        str = str.replace(">", "&gt;");
        return str;
    },

    trimHtmlTags: function(str){
        if(typeof str == "number") {
            return str;
        }
        str = str.replace("<", "");
        str = str.replace(">", "");
        return str;
    }
};

module.exports.ReportUtils = ReportUtils;