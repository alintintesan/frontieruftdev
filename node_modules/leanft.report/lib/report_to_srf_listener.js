// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var ExternalLabReportSender = require("./external_lab_report_sender").ExternalLabReportSender;
var ReportUtils = require("./report_utils.js").ReportUtils;
var LFTCore = require("leanft.sdk.core");
var Logger = LFTCore.Logger;
var Enums = require("./enums.js");
var Path = require("path");
var ReporterProvider = require("./report_provider.js");

function ReportToSrfListener(session) {
    this._knownReportContexts = [];
    this._testObjectToContextMap = {};
    this._sentEventsPerContext = {};
    this._logger = new Logger("ReportToSrfListener");
    this._reportSender = new ExternalLabReportSender(session, "srf");

    this._lastGetContextPromise = session._promiseManager.syncedBranchThen(function(){});
    this._defaultContext = session._config.ENVIRONMENT_REPORT_CONTEXT;
    if(this._defaultContext === undefined) {
        this._defaultContext = null;
    }
    if(this._defaultContext) {
        this._logger.debug("default context: " + this._defaultContext);
        this._knownReportContexts.push(this._defaultContext);
    }
}

ReportToSrfListener.prototype = {
    _knownReportContexts: null,
    _testObjectToContextMap: null,
    _sentEventsPerContext: null,
    _logger: null,
    _reportSender: null,
    _eventOrder: 0,

    _lastGetContextPromise: null,

    _defaultContext: null,

    onStructureOpenedEvent: function (node) {
        //structure events will be sent if an operation on SRF test object is detected.
    },

    onStructureClosedEvent: function (node) {
        if (!node) {
            return;
        }

        this._lastGetContextPromise._thenNoWrap(function () {
            this._knownReportContexts.filter(function (reportContext) {
                return this._sentEventsPerContext[reportContext].indexOf(node._id) >= 0;
            }, this).forEach(function (reportContext) {
                this._reportSender.sendCloseReportEvent(reportContext, this._nodeToJson(node));
            }, this);
        }.bind(this));
    },

    /*jshint eqnull:true */
    _findTopParent: function (testObject) {
        var topParent = testObject;
        while(topParent._parent != null) {
            topParent = topParent._parent;
        }

        return topParent;
    },
    /*jshint eqnull:true */
    onSdkOperation: function (node, snapshotData) {
        var testObject = node._testObject;
        var result = node._result;

        var topParent = testObject != null ? this._findTopParent(testObject) : result;

       this._lastGetContextPromise = this._lastGetContextPromise._thenNoWrap(function () {
            return ReportUtils.asPromise(this._getReportContextForTestObject(topParent))
                .then(function (reportContext) {
                    if (!reportContext) {
                        return;
                    }

                    if (this._knownReportContexts.indexOf(reportContext) < 0) {
                        this._knownReportContexts.push(reportContext);
                    }

                    this._reportAllParentStructureNodes(reportContext, node);

                    return this._reportSender.sendReportEvent(reportContext, this._nodeToJson(node, snapshotData));
                }.bind(this));
        }.bind(this));

        return this._lastGetContextPromise;
    },

    onVerification: function (node, snapshotData) {
        this._sendEventWithParentsToAllKnownContexts(node, snapshotData);
    },

    onReportCustomEvent: function (node, snapshotData) {
        this._sendEventWithParentsToAllKnownContexts(node, snapshotData);
    },

    onRuntimeErrorEvent: function (node, snapshotData) {
        this._sendEventWithParentsToAllKnownContexts(node, snapshotData);
    },

    _sendEventWithParentsToAllKnownContexts: function (node, snapshotData) {
        this._lastGetContextPromise._thenNoWrap(function () {
            this._knownReportContexts.forEach(function (reportContext) {
                this._reportAllParentStructureNodes(reportContext, node);
                this._reportSender.sendReportEvent(reportContext, this._nodeToJson(node, snapshotData));
            }, this);
        }.bind(this));
    },

    _mergeLogicalNamesToTestObjectJson: function (node, testObjectMap) {
        if (node._objectPath) {

            var clonePathObject = LFTCore.ObjectUtils.clone(node._objectPath);

            var reversedObjectNames = clonePathObject.reverse().map(function (objectPath) {
                return objectPath.Name;
            });

            var mapPointer = testObjectMap;

            reversedObjectNames.forEach(function (name) {
                mapPointer.Name = name;
                mapPointer = mapPointer.Parent;
            });
        }
    },

    /*jshint eqnull:true */
    _testObjectToJson: function (node) {
        var testObject = node._testObject;
        var result = node._result;
        if (testObject == null && result && result._getApplicationInfo) {
            testObject = result;
        }

        if(testObject == null) {
            return undefined;
        }

        var testObjectMap = testObject._toFullJson();
        this._mergeLogicalNamesToTestObjectJson(node, testObjectMap);

        return testObjectMap;
    },

    snapshotDataToJson: function (node, snapshotData) {
        if (!snapshotData) {
            return null;
        }

        var snapshotDataMap = {};

        if (snapshotData.highlightRect) {
            snapshotDataMap.HighlightRect = snapshotData.highlightRect;
        }

        if(snapshotData.snapshotId){
            snapshotDataMap.SnapshotId = snapshotData.snapshotId;
            return snapshotDataMap;
        }

        if (snapshotData.image) {
            snapshotDataMap.Image = snapshotData.image;
            snapshotDataMap.ImageType = snapshotData.type;
        }

        return snapshotDataMap;
    },
    _nodeToJson: function (node, snapshotData) {
        var map = {
            EventId: node._id,
            EventOrder: ++ReportToSrfListener.prototype._eventOrder,
            Name: node._name,
            Time: node._time.getTime(),
            Duration: node._duration || 0,
            Status: node._status,
            ParentEventId: node.getParentId(),
            type: node._nodeType,
            AdditionalData: node._additionalData
        };

        if (node._exception) {
            map.Error = {
                Message: node._exception.message,
                Stack: node._exception.stack
            };
        }

        if(ReportUtils.isStructureNode(node)) {
            map.Sdk = "javascript";
        }

        if (node._nodeType === Enums.RunUnitNodeType.Step) {
            map.Operation = node._operation;
            if(node._wiredName) {
                map.WiredName = node._wiredName;
            }
            map.Parameters = this._buildArgumentsJson(node._parameters);

            //handle test object
            map.Object = this._testObjectToJson(node);
        }

        if (node._nodeType === Enums.RunUnitNodeType.Verify || node._nodeType === Enums.RunUnitNodeType.Expect) {
            map.Operation = node._operation; //looks like it is not set in JS
            map.Description = node._verifyDesc;

            map.Parameters = this._buildArgumentsJson(node._parameters);

            if(!snapshotData && node._imageDetails) {
                var fullImagePath = Path.join(ReporterProvider.ReporterProvider.prototype._runtimeSettings._generatedReportPath,
                    node._imageDetails.path);
                snapshotData = {
                    image: ReportUtils.base64_encode(fullImagePath),
                    type: 'user'
                };
            }
        }

        if(node._nodeType === Enums.RunUnitNodeType.CustomStep) {
            map.Description = node._description;
        }

        if (snapshotData) {
            //handle snapshot data
            map.SnapshotData = this.snapshotDataToJson(node, snapshotData);
        }

        return map;
    },

    /*jshint eqnull:true */
    _reportAllParentStructureNodes: function (reportContext, node) {
        if (!node._parent) {
            return;
        }

        var parent = node._parent;
        var structureNodesToSend = [];
        var structureNodesToSendIds;
        while (parent) {
            structureNodesToSend = [parent].concat(structureNodesToSend);
            parent = parent._parent;
        }

        if (structureNodesToSend.length === 0) {
            return;
        }

        if (this._sentEventsPerContext[reportContext]) {
            var sentAlreadyNodeIds = this._sentEventsPerContext[reportContext];
            structureNodesToSend = structureNodesToSend.filter(function (structureNode) {
                return sentAlreadyNodeIds.indexOf(structureNode._id) < 0;
            });

            structureNodesToSendIds = structureNodesToSend.map(function (stuctureNode) {
               return stuctureNode._id;
            });
            this._sentEventsPerContext[reportContext] = sentAlreadyNodeIds.concat(structureNodesToSendIds);
        } else {
            //new report context
            structureNodesToSendIds = structureNodesToSend.map(function (stuctureNode) {
                return stuctureNode._id;
            });
            this._sentEventsPerContext[reportContext] = structureNodesToSendIds;
        }

        structureNodesToSend.forEach(function (structureNode) {
            this._reportSender.sendReportEvent(reportContext, this._nodeToJson(structureNode));
        }, this);
    },

    /*jshint eqnull:true */
    _getReportContextForTestObject: function (topParent) {
        if (topParent == null || topParent._cookie == null) {
            return this._defaultContext;
        }

        if (this._testObjectToContextMap[topParent._cookie] !== undefined) {
            return this._testObjectToContextMap[topParent._cookie];
        }

        return this._reportSender.createReportContextForId(topParent._cookie).then(function (reportContext) {
            reportContext = reportContext || this._defaultContext;
            this._testObjectToContextMap[topParent._cookie] = reportContext;
            return reportContext;
        }.bind(this)).catch(function (err) {
            this._logger.error("_getReportContextForTestObject: failure: " + err);
            this._testObjectToContextMap[topParent._cookie] = this._defaultContext;
        }.bind(this));
    },

    /*jshint eqnull:true */
    _buildArgumentsJson: function (params) {
        if(params == null) {
            return null;
        }

        return params.map(function (param) {
            var containerItemsArray = [].concat(param.value);

            // check if data contains container items
            if (ReportUtils.isContainerItemsArray(containerItemsArray)) {
                return this._argumentValueHandler.containerItemArray.call(this, {
                    name: param.name,
                    value: containerItemsArray
                });
            }

            return {
                name: param.name,
                value: this._argumentValueHandler[typeof (param.value)].call(this, param.value)
            };
        }, this);
    },

    _argumentValueHandler: {
        /*jshint eqnull:true */
        object: function (value) {
            if (value === null) {
                return null;
            }

            // test object case
            if (value._description) {
                return ReportToSrfListener.prototype._argumentValueHandler.testObject.call(this, value);
            }

            // description case
            if (value._properties) {
                var properties = ReportUtils.getTOProperties({_description: value});
                var propsObject = {};
                properties.forEach(function (prop) {
                    propsObject[prop.name] = prop.value;
                });
                return {
                    type: "DefaultComplex",
                    value: propsObject
                };
            }

            // date case
            if (Object.prototype.toString.call(value) === "[object Date]") {
                return {
                    type: "Date",
                    value: value.getTime()
                };
            }

            // array case
            if (Array.isArray(value)) {
                return {
                    type: "Collection",
                    value: value.map(function (value) {
                        return ReportToSrfListener.prototype._argumentValueHandler[typeof (value)].call(this, value);
                    }, this)
                };
            }

            // containerItem case
            if (value._identifier) {
                return {
                    type: "ContainerItem",
                    value: {
                        Identifier: value._identifier
                    }
                };
            }

            // expected\actual arg
            if (value.expectArg !== undefined) {
                return ReportToSrfListener.prototype._argumentValueHandler[typeof (value.expectArg)].call(this, value.expectArg);
            }

            // regex case
            if(value instanceof RegExp) {
                return value;
            }

            var defaultComplexMap = {};
            Object.keys(value).forEach(function (item) {
                defaultComplexMap[item] =
                    ReportToSrfListener.prototype._argumentValueHandler[typeof (value[item])].call(this, value[item]);
            }, this);
            return {
                type: "DefaultComplex",
                value: defaultComplexMap
            };
        },

        testObject: function (value) {
            return {
                type: "TestObject",
                value: value._toFullJson()
            };
        },

        string: function (value) {
            var regex = new RegExp('(?:^(?:[A-Za-z0-9+\/]{4}\\n?)*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)$)');

            // check if string is base64 image string
            var match = value.match(regex);
            if (match) {
                return ReportToSrfListener.prototype._argumentValueHandler.image.call(this, value);
            }

            return value;
        },

        image: function (value) {
            return {
                type: "Image",
                value: {
                    image: value
                }
            };
        },

        number: function (value) {
            return value;
        },

        boolean: function (value) {
            return value;
        },

        containerItemArray: function (value) {
            if (value.value.length === 1) {
                return {
                    type: "ContainerItem",
                    value: {
                        Identifier: value[0]._identifier
                    }
                };
            }

            return value.value.map(function (container) {
                return {
                    type: "ContainerItem",
                    value: {
                        Identifier: container._identifier
                    }
                };
            });
        },

        function: function (value) {
            return "";
        },

        undefined: function () {
            return "undefined";
        }
    }


};

module.exports.ReportToSrfListener = ReportToSrfListener;