// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/**
 The possible levels for reporting events to the LeanFT Report.
 @typedef {Object} ReportLevel
 @property {string} All Report events on all levels.
 @property {string} Warning Report only events with the status Warning or Error.
 @property {string} Error Report only events with the status Error.
 @property {string} Off Disable all report levels. A LeanFT report is not created.
 @memberof Reporter
 */
var ReportLevel = {
    /**
     * Report events on all levels.
     */
    All: "All",
    /**
     * Report only events with the status Warning or Error.
     */
    Warning: "Warning",
    /**
     * Report only events with the status Error.
     */
    Error: "Error",
    /**
     * Disable all report levels. A LeanFT report is not created.
     */
    Off: "Off",
};

/**
 The possible levels for capturing snapshots for the report.
 @typedef {Object} CaptureLevel
 @property {number} All Snapshots are captured for all test object operations.
 @property {number} OnError TSnapshots are captured only for test object operations with errors.
 @property {number} Off Snapshots are not captured.
 @memberof Reporter
 */
var CaptureLevel = {
    /**
     * Snapshots are captured for all test object operations.
     */
    All: 0,
    /**
     * Snapshots are captured only for test object operations with errors.
     */
    OnError: 1,
    /**
     * Snapshots are not captured.
     */
    Off: 2,
};

/**
 The possible statuses of an event reported to the LeanFT report.
 @typedef {Object} Status
 @property {string} Passed The event related to the node and all of its sub-nodes succeeded.
 @property {string} Failed The event related to the node or to one of its sub-nodes failed.
 @property {string} Warning The event related to the node or to one of its sub-nodes resulted in a warning.
 @memberof Reporter
 */
var Status = {
    /**
     * The event related to the node and all of its sub-nodes succeeded.
     */
    Passed: "Passed",
    /**
     *The event related to the node or to one of its sub-nodes failed.
     */
    Failed: "Failed",
    /**
     * The event related to the node or to one of its sub-nodes resulted in a warning.
     */
    Warning: "Warning",
};

var ConvertStatusToInt = {
    "passed": 0,
    "warning": 1,
    "failed": 2
};

/*jshint eqnull:true */
function statusToInt(status) {
    if(status == null) {
        throw new Error("status can't be null");
    }

    var convertedStatus =  ConvertStatusToInt[status.toLowerCase()];

    if(convertedStatus == null) {
        throw new Error("illegal status value: " + status);
    }

    return convertedStatus;
}

var RunUnitNodeState = {
    InProgress: "InProgress",
    Done: "Done",
};

var RunUnitNodeType  = {
    /**
     * Run node type (root level, one for entire run)
     */
    Run : "Run",
    /**
     * Suite node type
     */
    Suite: "Suite",
    /**
     * Spec node type
     */
    Spec: "Spec",
    /**
     * Class node type
     */
    Class: "Class",
    /**
     * Test node type
     */
    Test: "Test",
    /**
     * Step node type
     */
    Step: "Step",
    /**
     * CustomStep node type
     */
    CustomStep: "CustomStep",
    /**
     * Region node type
     */
    Region: "Region",
    /**
     * VerificationRegion node type
     */
    VerificationRegion: "VerificationRegion",
    /**
     * Mix node type
     */
    Mix: "Mix",
    /**
     * Expect node type
     */
    Expect : "Expect",
    /**
     * Verify node type 
     */
    Verify : "Verify",
    /**
     * Run time error
     */
    RunTimeError: "RunTimeError"
};

var ReportContextMode = {
    /**
     * Normal reporting context mode.
     */
    Normal : "Normal",
    /**
     * Verification reporting context mode.
     */
    Verification : "Verification"
};

module.exports.Status = Status;
module.exports.RunUnitNodeType = RunUnitNodeType;
module.exports.RunUnitNodeState = RunUnitNodeState;
module.exports.ReportLevel = ReportLevel;
module.exports.CaptureLevel = CaptureLevel;
module.exports.statusToInt = statusToInt;
module.exports.ReportContextMode = ReportContextMode;
