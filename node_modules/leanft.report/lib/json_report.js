// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates.

var path = require('path');
var util = require('util');
var fs = require('fs');
var Path = require("path");
var Const = require("./const.js").Const;
var ReportUtils = require("./report_utils.js").ReportUtils;
var Enums = require("./enums.js");
var RunUnitNodeType =Enums.RunUnitNodeType;
var LFT = require("leanft.sdk.core");
var StringUtils = LFT.StringUtils;
var ObjectUtils = LFT.ObjectUtils;

DateFormat = {
    formatDuration : function(duration) {
        var durationSeconds = (duration / 1000);
        return ("" + durationSeconds);
    },

    formatTime : function (date) {
        return date.toString("YYYY-MM-DD HH:mm:ss:sss");
    }
};


function JsonReport(){
}

JsonReport.prototype = {
    _reportModel : null,
    _runtimeSettings : null,

    _getGeneralInfoNode: function () {
        var info  = {};
        var node = {};
        info[Const.CustomFields] = this._getGeneralUserInfo() || {};
        info[Const.Name] = this._reportModel._generalInfo.name || "";
        info[Const.RunStartTime] = this._reportModel._rootNode._time;
        info[Const.Timezone] = this._reportModel._environmentInfo[Const.Timezone] || "";
        info[Const.OrchestrationToolName] = "JS";
        info[Const.OrchestrationToolVersion] = this._reportModel._environmentInfo.orc_tool_version || "";
        info[Const.ReportTitle] = this._runtimeSettings.reportTabTitle || "UFT Developer Report";
        node[Const.GeneralInfo] = info;

        return node;
    },

    _getGeneralUserInfo :function() {
        var userVales = Object.keys(this._reportModel._generalInfo).filter(function(value){
            return value.startsWith("user_");
        });

        return userVales.map(function(userValue){
            return {name : userValue.substring("user_".length, userValue.length) , value: this._reportModel._generalInfo[userValue]};
        }, this);
    },

    _buildReport: function (node) {
        var element = {};
        var dataNode = {};

        var ruNodeType = node._nodeType;

        element.type = ruNodeType;

        var handler = this._specialValueHandler[node._nodeType] || this._specialValueHandler.Default;
        handler.call(this, node, dataNode);

        element[Const.Data] = dataNode;
        if (!node._childRunUnits || node._childRunUnits.length === 0){
            element.type =  ruNodeType;
            element[Const.Data] = (dataNode);
            return element;
        }

        var elements = node._childRunUnits.map(this._buildReport.bind(this));

        if (elements.length > 1){
            element[Const.ReportNode] = elements;

            for (var i =0; i < elements.length; i++){
                elements[i] = elements[i][Const.ReportNode] ? elements[i][Const.ReportNode] : elements[i];
            }
        }
        else{
            element[Const.ReportNode] =  elements[0][Const.ReportNode] ? elements[0][Const.ReportNode] : elements[0];
        }
        var tempNode = {};
        tempNode[Const.ReportNode] = element;
        return tempNode;
    },

    _getImageDetails: function (baseRuNode, anyNode) {
        if (!baseRuNode._imageDetails || baseRuNode._nodeType === "Verify" || baseRuNode._nodeType === "CustomStep"){
            return;
        }

        anyNode[Const.StepCustomImagePath] = baseRuNode._imageDetails.path;
    },

    _addCommonChildsToDataNode : function( baseRuNode, dataNode) {
        var name = baseRuNode.cdlsStepData ? baseRuNode.cdlsStepData.stepText : baseRuNode._name;
        var duration = DateFormat.formatDuration(baseRuNode._duration);
        var description = baseRuNode._htmlDescription ? baseRuNode._htmlDescription : baseRuNode._description;

        dataNode[Const.Name] = name;
        dataNode[Const.Description]  = description ? description : "";
        dataNode[Const.StartTime] =  DateFormat.formatTime(baseRuNode._time);
        dataNode[Const.Result] =  baseRuNode._status || Enums.Status.Passed;

        if (baseRuNode._exception)
            dataNode[Const.ErrorText] =  this._getErrorString(baseRuNode);

        //build "Extension" node
        var extensionNode = {};
        var anyNode = {};

        dataNode[Const.Duration] = duration;
        anyNode[Const.IconKey] = baseRuNode._nodeType;
        anyNode[Const.IsHtmlErrorText] =  "true";

        this._getImageDetails(baseRuNode, anyNode);
        if (baseRuNode._imageDetails){
                dataNode.Snapshot = { reference:baseRuNode._imageDetails.path };
        }

        extensionNode[Const.Any] = anyNode;
        dataNode[Const.Extension] = extensionNode;
    },

    generate: function (reportModel, runtimeSettings) {
        this._reportModel = reportModel;
        this._runtimeSettings = runtimeSettings;

        var result = {};
        result[Const.Root]  = this._getGeneralInfoNode();
        var elementList = this._buildReport(this._reportModel._rootNode);

        if (elementList[Const.ReportNode]){
            result[Const.Root][Const.ReportNode] =  elementList[Const.ReportNode];
        }
        else{
            result[Const.Root][Const.ReportNode] = elementList;
        }
        return result;
    },

    /*jshint eqnull:true */
    _getErrorString: function(baseRuNode) {
        var operationFailureMessage = "";

        if (baseRuNode._nodeType === RunUnitNodeType.Verify || baseRuNode._nodeType === RunUnitNodeType.Mix) {
            operationFailureMessage = util.format("<b>Verification '%s' failed:</b><BR/>", baseRuNode._name);
        } else if(baseRuNode._nodeType === RunUnitNodeType.RunTimeError) {
            operationFailureMessage = ""; //the error message is enough, no need for headers
        } else {
            operationFailureMessage = util.format("<b>Operation '%s' failed:</b><BR/>", baseRuNode._name);
        }

        // remove long error message in case of expect or verify
        if (baseRuNode._nodeType === "Expect" ||baseRuNode._nodeType === "Verify") {
            if (baseRuNode._exception.message != null && baseRuNode._exception.message.length > 6000) {
                baseRuNode._exception.message = baseRuNode._exception.message.slice(0, 6000) + "...";
            }
        }

        var message = baseRuNode._exception.message || "";

        if (baseRuNode._exception.name === "AssertionError"){
            return operationFailureMessage + message;
        }
        return operationFailureMessage + message + "<pre>" + ( baseRuNode._exception.stack || baseRuNode._exception) + "</pre>";
    },

    _getEnvironmentNode:function() {
        var data  = {};
        var osType =  this._reportModel._environmentInfo[Const.OsType] || "";
        var osInfo = this._reportModel._environmentInfo[Const.OsVersion] || "";
        if (osType !== null && !StringUtils.isNullOrWhiteSpace(osType)){
            osInfo += " (" + osType + ")";
        }
        data[Const.OSInfo] = osInfo;
        data[Const.HostName] = this._reportModel._environmentInfo.machine_name || "" ;
        data[Const.NumberOfCores] = this._reportModel._environmentInfo.number_of_cpu || "" ;
        data[Const.CpuInfo] = this._reportModel._environmentInfo.cpu_info || "" ;
        data[Const.TotalMemory] = this._reportModel._environmentInfo.total_memory || "" ;
        data[Const.Locale] = this._reportModel._environmentInfo.locale || "" ;
        data[Const.Timezone] = this._reportModel._environmentInfo.time_zone || "" ;
        data[Const.User] = this._reportModel._environmentInfo.user || "" ;

        return data;
    },

    _getTestedApplicationNode:function()  {
        var data  = {};
        data[Const.RuntimeEngineInfo] = this._reportModel._testedApplication[Const.RuntimeEngineInfo]|| "" ;
        data[Const.Name] = this._reportModel._testedApplication[Const.Name]|| "" ;
        data[Const.Path] = this._reportModel._testedApplication[Const.Path]|| "" ;
        data[Const.Version] = this._reportModel._testedApplication[Const.Version]|| "" ;
        return data;
    },

    _createNewDataSection: function(isNestedSection,isHtml){
        isHtml = isHtml || false;
        var dataSection = {DataSection:{IsNestedSection:isNestedSection.toString(), '@ishtml':isHtml.toString(), DataPair:[]}};
        return dataSection;
    },

    _createNewContentSection: function(content,isHtml){
        isHtml = isHtml || false;
        var captionSection = {Content: {"#text": content, '@ishtml':isHtml.toString()}};
        return captionSection;
    },

    _createNewDataPair: function(label,isHtml){
        isHtml = isHtml || false;
        var captionSection = {DataPair:{Label: {'#cdata-section':label, '@ishtml':isHtml.toString()}}};
        return captionSection;
    },

    _createNewCaptionSection: function(content,isHtml){
        isHtml = isHtml || false;
        var captionSection = {Caption:{"#text": content, '@ishtml':isHtml.toString()}};
        return captionSection;
    },

    _createNewSubCaptionSection: function(content, isHtml, isError){
        isHtml = isHtml || false;
        isError = isError || false;

        if (isError) {
            content = "<font color='red'>" + content + "</font>";
        }

        var captionSection = {SubCaption:{"#text": content, '@ishtml':isHtml.toString()}};
        return captionSection;
    },

    _specialValueHandler: {
        Run: function (baseNode, dataNode) {

            // call to default behavior
            this._specialValueHandler.Default.call(this, baseNode, dataNode);
            dataNode[Const.Name] = this._runtimeSettings.title || Const.DefaultTitle;

            // avoid showing "undefined" in Description field
            dataNode[Const.Description] = this._runtimeSettings.description || "\u0020";
            dataNode[Const.Environment] = this._getEnvironmentNode();
            dataNode[Const.TestedApplication] = this._getTestedApplicationNode();

            //LeanFT
            dataNode[Const.ToolName] = (this._runtimeSettings.toolName || "UFT Developer") + " " + (this._reportModel._environmentInfo.product_version || "");

            //Needed to add a Link node as a child of Run node in the XML report. Based on this System Monitor tab will be added in the HTML report.
            var vitalsPath = Path.join(this._runtimeSettings._generatedReportPath, "Resources", "Vitals");
            if(fs.existsSync(vitalsPath)){
                dataNode[Const.Links] = {
                    type: "CountersMonitorResults",
                    reference: Path.join("file:///", vitalsPath),
                    displayname: "System Monitor"
                };
            }

            return dataNode;
        },

        Step: function (baseNode, dataNode) {
            this._specialValueHandler.Default.call(this, baseNode, dataNode);
            var properties = {Property: []};

            var testObject = {};

            // create path
            var objectPath = baseNode._objectPath || [];
            testObject.Path = {Object: objectPath.map(function(item) {
                return {
                    Name: item.Name, 
                    Type: item.displayType ? item.displayType : item.Type
                };
            })};
            testObject.Operation = baseNode._operation;
            testObject.OperationData = {"#cdata-section": baseNode._htmlDescription};
            testObject.Operation = baseNode._operation;

            if (baseNode._properties) {
                baseNode._properties.forEach(function (property) {
                    properties.Property.push(
                        {
                            Name: {"#cdata-section": property.name},
                            Value: {"#cdata-section": property.value},
                        });
                });
                testObject.Properties = properties;
            }

            baseNode._objectPath = baseNode._objectPath || [];

            var descTestObject = baseNode._objectPath.map(function (item) {
                var object = {
                    Object: {
                        Name: item.Name, 
                        Type: item.displayType ? item.displayType : item.Type,
                        IconKey: item.Type.split(".")[1]
                    }
                };
                return object.Object;
            });

            var anyNode = dataNode.Extension.Any;
            anyNode.TestObject = testObject;

            if (descTestObject.length > 0) {
                anyNode.Descriptive = {TestObject: {Path: {Object: descTestObject}}};
            }

            anyNode.HideContextInfo = "true";
            anyNode.IsHtmlErrorText = "true";
            anyNode.IconKey = baseNode._objectType ? baseNode._objectType : "" ;
            var dataTitle = baseNode._reportAdditionalData.OperationDataTitle || "Data";
            anyNode.CustomUIElements =  {DescriptionLabel:dataTitle};
            if (baseNode.cdlsStepData) {
                anyNode.CustomUIElements.FlowTreeNodeCaption = baseNode.cdlsStepData.stepText ? {"#cdata-section": baseNode.cdlsStepData.stepText} : "";
                anyNode.CustomUIElements.FlowTreeNodeTooltip = baseNode.cdlsStepData.stepText ? {"#cdata-section": baseNode.cdlsStepData.stepText} : "";
            } else {
                anyNode.CustomUIElements.FlowTreeNodeCaption = baseNode._reportAdditionalData[Const.Title] ? {"#cdata-section": baseNode._reportAdditionalData[Const.Title]} : "";
                anyNode.CustomUIElements.FlowTreeNodeTooltip = baseNode._reportAdditionalData[Const.TitleToolTip] ? {"#cdata-section": baseNode._reportAdditionalData[Const.TitleToolTip]}: "";
            }

            dataNode.Name = {"#cdata-section" : dataNode.Name};
            dataNode.Description = {"#cdata-section" : dataNode.Description};

            if (baseNode.imageDetails && baseNode.imageDetails.imageType === "Snapshots"){
                dataNode.Snapshot = { reference:baseNode.imageDetails.path };

                if (baseNode._reportAdditionalData.highlightArea){
                    dataNode.Snapshot.highlight =  + baseNode._reportAdditionalData.highlightArea.x + "," + baseNode._reportAdditionalData.highlightArea.y + "," + baseNode._reportAdditionalData.highlightArea.width + "," +baseNode._reportAdditionalData.highlightArea.height;
                }
            }

            if (baseNode._reportAdditionalData.API){
                this._specialValueHandler.API.call(this, baseNode, dataNode);
            }
            return dataNode;
        },

        Mix : function (baseNode, dataNode) {
            this._specialValueHandler.Step.call(this, baseNode, dataNode);

            if (baseNode._reportAdditionalData.firstImage && baseNode._reportAdditionalData.ImageBitmapCheckPointResult) {
                var checkPoint = {"Checkpoint" : {"Type" : "Bitmap CheckPoint"}};
                checkPoint.Checkpoint.bmpChkPointFileExpected =  baseNode._reportAdditionalData.firstImage;

                if (baseNode._reportAdditionalData.secondImage) {
                    checkPoint.Checkpoint.bmpChkPointFileActual =  baseNode._reportAdditionalData.secondImage;
                }

                if (baseNode._reportAdditionalData.deltaImage) {
                    checkPoint.Checkpoint.bmpChkPointFileDifferent =  baseNode._reportAdditionalData.deltaImage;
                }

                dataNode.Extension.Any.Checkpoint = checkPoint.Checkpoint;
            }

            var anyNode = dataNode.Extension.Any;

            // in case of exception use the general iconkey and not the verification icon
            // elsewhere use the relevant verification icon
            if (!baseNode._exception)
                anyNode.CustomUIElements.ErrorListItemStatusIndicatorIconKey = baseNode._status === Enums.Status.Passed ? "VerifySuccess" : "VerifyFailure";
        },

        Verify : function (baseNode, dataNode) {
            this._specialValueHandler.Default.call(this, baseNode, dataNode);
            var anyNode = dataNode.Extension.Any;
            anyNode.IsHtmlErrorText = "true";
            anyNode.IconKey = baseNode._status === Enums.Status.Passed ? "VerifySuccess" : "VerifyFailure" ;
            anyNode.CustomUIElements =  {DescriptionLabel:"Data"};
            anyNode.CustomUIElements.ErrorListItemStatusIndicatorIconKey = baseNode._status === Enums.Status.Passed ? "VerifySuccess" : "VerifyFailure";
            anyNode.CustomUIElements.HideFlowTreeNodeStatusIndicator = "true";

            if (baseNode._imageDetails){
                dataNode.Snapshot = { reference:baseNode._imageDetails.path };

                if (baseNode._reportAdditionalData.highlightArea){
                    dataNode.Snapshot.highlight =  + baseNode._reportAdditionalData.highlightArea.x + "," + baseNode._reportAdditionalData.highlightArea.y + "," + baseNode._reportAdditionalData.highlightArea.width + "," +baseNode._reportAdditionalData.highlightArea.height;
                }
            }
            dataNode.Name = {"#cdata-section" : dataNode.Name};
            dataNode.Description = {"#cdata-section" : dataNode.Description};
            delete(dataNode.Duration);
        },

        Expect: function (baseNode, dataNode) {
            this._specialValueHandler.Verify.call(this, baseNode, dataNode);
        },

        Default: function(baseNode, dataNode){
            this._addCommonChildsToDataNode(baseNode,dataNode);
        },

        API : function (baseNode, dataNode) {
            var apiData = baseNode._reportAdditionalData.API;
            var dataSection = this._createNewDataSection(false, false);
            var captionSection = this._createNewCaptionSection("API Test Results", false);
            dataSection.DataSection.Caption = captionSection.Caption;

            if (apiData.APIUFTReportStatus){
                var subCaptionSection = this._createNewSubCaptionSection(apiData.APIUFTReportStatus, true, true);
                dataSection.DataSection.SubCaption = subCaptionSection.SubCaption;
            }

            if (apiData.outputParameters){
                var outputLabelDataPair = this._createNewDataPair("Output Parameters", false);
                var tableDataPair = this._createNewDataPair(apiData.outputParameters, true);
                dataSection.DataSection.DataPair.push(outputLabelDataPair.DataPair);
                dataSection.DataSection.DataPair.push(tableDataPair.DataPair);
            }

            if (apiData.APIUFTReportlink){
                var link = apiData.APIUFTReportlink;
                var linkDataPair = this._createNewDataPair("External Link", true);
                dataSection.DataSection.DataPair.push(linkDataPair.DataPair);
                var extLink = {ExtLink: {"@href": link, "@target":"self","@ishtml":false, "#text" : "UFT API Test Report" }};
                dataSection.DataSection.DataPair.push(extLink);
            }

            var anyNode = dataNode.Extension.Any;
            anyNode.DataSection = dataSection.DataSection;
        },
    }
};

module.exports.JsonReport = JsonReport;
