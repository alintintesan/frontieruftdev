// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 2/15/2018.
 */

var Core = require("leanft.sdk.core");
var TestObjectBase = Core.TestObjectBase;
var Utils = Core.ObjectUtils;
var DescriptionBase = Core.DescriptionBase;
var UIObjectBaseBehavior = Core.UIObjectBaseBehavior;
var LocationDescriptionBehavior = Core.LocationDescriptionBehavior;
var UIObjectDescriptionBaseBehavior = Core.UIObjectDescriptionBaseBehavior;
var StdBehaviors = require("leanft.sdk.stdwin").Behaviors;
var StdWinUiObjectBaseDescriptionBehavior = StdBehaviors.UiObjectBaseDescriptionBehavior;
var StdUiObjectBaseTOBehavior = StdBehaviors.UiObjectBaseTOBehavior;

/**
 * PowerBuilder namespace
 * @namespace PowerBuilder
 */

/**
 * UiObjectBaseDescription - the base description for all PowerBuilder elements
 * @class UiObjectBaseDescription
 * @extends DescriptionBase
 * @mixes LocationDescriptionBehavior
 * @mixes UIObjectDescriptionBaseBehavior
 * @mixes StdWin.UiObjectBaseDescriptionBehavior
 * @memberof PowerBuilder
 * @ignore
 */
function UiObjectBaseDescription(leanFTType) {
    this._init({
        technology: "PowerBuilder",
        leanftType: leanFTType
    });
    Utils.extend(this, LocationDescriptionBehavior);
    Utils.extend(this, UIObjectDescriptionBaseBehavior);
    Utils.extend(this, StdWinUiObjectBaseDescriptionBehavior);
    //init grouped properties
    this.location({});
    this.absoluteLocation({});
    this.size({});

    this._indexType = "location";
}

/**
 * @ignore
 */
Utils.inherit(UiObjectBaseDescription, DescriptionBase, {
    /**
     * The object's name as set by the developer.
     * @param {string} [objectName] When provided, this method acts as a setter and sets the objectName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored objectName value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof PowerBuilder.UiObjectBaseDescription#
     */
    objectName: function (objectName) {
        return this._simplePropertyHandler("pbname", objectName);
    }
});

/**
 * @class UiObjectBaseTO
 * @param nativeClass
 * @param session
 * @param description
 * @constructor
 * @extends TestObjectBase
 * @mixes LocationInfoProvider._properties
 * @mixes ClickBehavior._methods
 * @mixes DoubleClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes SendKeysBehavior._methods
 * @mixes StdWin.UiObjectBaseTOBehavior._properties
 * @mixes UiObjectBaseTOBehavior._properties
 * @mixes WaitUntilVisibleBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @abstract
 * @memberof PowerBuilder
 * @ignore
 */
function UiObjectBaseTO(nativeclass, session, description) {
    this._init(nativeclass, session, description);
    this._mergeBehavior(UIObjectBaseBehavior);
    this._mergeBehavior(StdUiObjectBaseTOBehavior);
    this._mergeBehavior(UiObjectBaseTOBehavior);

}

var UiObjectBaseTOBehavior = {
    /**
     * @ignore
     * @memberof PowerBuilder.UiObjectBaseTOBehavior
     */
    _properties: {
        /**
         * Returns the object's name as set by the developer.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's objectName name.
         * @memberof PowerBuilder.UIBaseTestObject#
         */
        objectName: {
            wiredName: "pbname"
        }
    }
};

/**
 * @ignore
 */
Utils.inherit(UiObjectBaseTO, TestObjectBase, {
});

module.exports.UiObjectBaseDescription = UiObjectBaseDescription;
module.exports.UiObjectBaseTO = UiObjectBaseTO;
