// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 03/14/2018.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var ExecuteItemsWithEventsBehavior = Core.ExecuteItemsWithEventsBehavior;
var TableBaseOperationBehavior = Core.TableBaseOperationBehavior;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var StdWinBehaviors = require("leanft.sdk.stdwin").Behaviors;
var StdWinUiObjectWithLayoutInfoBehaviour = StdWinBehaviors.UiObjectWithLayoutInfoBehaviour;
var StdWinUiObjectWithLayoutInfoDescription = StdWinBehaviors.UiObjectWithLayoutInfoDescription;
var TableCell = require("./table_cell.js").TableCell;

/**
 * The description of a PowerBuilder Table test object.
 * @param {Object} [props] Initializes a PowerBuilder Table test object using the supplied property bag.
 * @returns {Table} the description object that was initialized.
 * @class Table
 * @extends PowerBuilder.UiObjectBaseDescription
 * @mixes PowerBuilder.TableDescriptionBehavior
 * @memberof PowerBuilder
 */
function Table(props) {
    var tableDesc = new UiObjectBaseDescription("Table");
    ObjUtils.extend(tableDesc, StdWinUiObjectWithLayoutInfoDescription);
    tableDesc._defineByPropertyBag(props);
    return tableDesc;
}

/**
 * The behaviors of Table object
 * @memberof PowerBuilder
 * @ignore
 */
var TableTOBehavior = {
    /**
     * @ignore
     * @memberof PowerBuilder.TableTOBehavior
     */
    _properties: {
        /**
         * Returns either a promise for all the cells in the table (when called without arguments), or all the cells in a row (when called with row only), or for the specified cell.
         * @function
         * @param {number} [rowIndex] The row index of the specific cell.
         * @param {string|number} [columnOrIndex] The column header or 0-based column index in the row.
         * @returns {Promise<TableCell[][] | TableCell[] | TableCell>} a promise that is fulfilled with either all the cells in the table (when called without arguments), or all the cells in a row (when called with row only), or with the specified cell.
         * @memberof PowerBuilder.TableTO#
         */
        cells: function (rowIndex, columnOrIndex) {
            return this._cells(rowIndex, columnOrIndex);
        },
        /**
         * Returns the number of columns in the table.
         * @returns {Promise<number>} a promise that is fulfilled with the columnsCount value;
         * @memberof PowerBuilder.TableTO#
         */
        columnsCount: {
            wiredName: "ColumnCount",
            getter: function () {
                return this._executeWithEventsOnError(arguments, "ColumnCount").then(Convert.toNumber);
            }
        },
        /**
         * Returns the number of rows in the table.
         * @returns {Promise<number>} a promise that is fulfilled with the rowsCount value;
         * @memberof PowerBuilder.TableTO#
         */
        rowsCount: {
            wiredName: "RowCount",
            getter: function () {
                return this._executeWithEventsOnError(arguments, "RowCount").then(Convert.toNumber);
            }
        }
    },

    /**
     * @ignore
     * @memberof PowerBuilder.TableTOBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * The getTableProperty method uses the PowerBuilder Describe method to return the value of one property of a DataWindow object and controls within the DataWindow object.
         * Each column and graphic control in the DataWindow has a set of properties.
         * You specify one property as a string, and getTableProperty returns the values of the property.
         * @function
         * @param {string} property name of property. Possible values: http://infocenter.sybase.com/help/topic/com.sybase.infocenter.dc37783.1252/html/dwref/CCJBHCCF.htm
         * @returns {Promise<string>} a promise that is fulfilled with the value of property.
         * @example  pbTable.getTableProperty("DataWindow.Column.Count");
         * How to use PowerBuilder Describe method: http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.infocenter.dc37783.1252/html/dwref/BFCEADCH.htm
         * The getTableProperty throws Error for invalid items.
         * The getTableProperty returns null for property that have no value.
         * @memberof PowerBuilder.TableTO#
         */
        getTableProperty: function (property) {
            if(property == null)
                throw new Error("ArgumentException: property is required.");
            if(property.indexOf(" ") !== -1)
                throw new Error("The property should contain no spaces.");

            return this._executeWithEventsOnError(arguments, "Describe", property).then((this._validateDescribeResult).bind(this));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * evaluateExpression uses the PowerBuilder Describe method to evaluate one expression involving values of a particular row and column.
         * @function
         * @param {string} expression The expression you want to evaluate. In this expression, include a specification of the relevant column. 
         * @param {number} row The number of the row for which you want to evaluate the expression.
         * @returns {Promise<string>} a promise that is fulfilled when the evaluateExpression operation ends.
         * @example  pbTable.evaluateExpression("If(field1 > 10, 1, 0)", 2);
         * In the example above, evaluateExpression returns a string with value of 1 or 0 depending on the value of the field1 column and row 2.
         * How to use PowerBuilder Describe method to evaluate an expression: http://infocenter.sybase.com/help/index.jsp?topic=/com.sybase.infocenter.dc37783.1252/html/dwref/BFCEADCH.htm
         * The evaluateExpression throws GeneralReplayException for an invalid expression.
         * @memberof PowerBuilder.TableTO#
         */
        evaluateExpression: function (expression, row) {
            if (expression == null)
                throw new Error("ArgumentException: expression is required.");
            if (row == null)
                throw new Error("ArgumentException: row is required.");

            var expressionStatement = "Evaluate('" + expression + "', " + row + ")";

            return this._executeWithEventsOnError(arguments, "Describe", expressionStatement).then((this._validateDescribeResult).bind(this));
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Double-clicks a cell by row and column indices or header.
         * @function
         * @param {number} row 0-based row number.
         * @param {string|number} columnOrIndex The column header or 0-based column index.
         * @returns {Promise<void>} a promise that is fulfilled when the activateCell operation ends.
         * @memberof PowerBuilder.TableTO#
         */
        activateCell: function (row, columnOrIndex) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnOrIndex == null)
                throw new Error("ArgumentException: columnOrIndex is required.");
            if (typeof(columnOrIndex) !== 'string')
                columnOrIndex = Convert.toNumber(columnOrIndex) + 1;
            row = Convert.toNumber(row) + 1;
            return this._executeWithEvents(arguments, "ActivateCell", row, columnOrIndex);
        },

        /**
         * Clicks a cell by row and column indices or header.
         * @function
         * @param {number} row 0-based row number.
         * @param {string|number} columnOrIndex The column header or 0-based column index.
         * @returns {Promise<void>} a promise that is fulfilled when the selectCell operation ends.
         * @memberof PowerBuilder.TableTO#
         */
        selectCell: function (row, columnOrIndex) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnOrIndex == null)
                throw new Error("ArgumentException: columnOrIndex is required.");
            if (typeof(columnOrIndex) !== 'string')
                columnOrIndex = Convert.toNumber(columnOrIndex) + 1;
            row = Convert.toNumber(row) + 1;
            return this._executeWithEvents(arguments, "SelectCell", row, columnOrIndex);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Selects row by index.
         * @function
         * @param {number} row 0-based index.
         * @returns {Promise<void>} a promise that is fulfilled when the selectRow operation ends.
         * @memberof PowerBuilder.TableTO#
         */
        selectRow: function (row) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            row = Convert.toNumber(row) + 1;
            return this._executeWithEvents(arguments, "SelectRow", row);
        }
    },

    _helpers: {
        _validateDescribeResult: function(result){
            if(result == "!")
                throw new Error("Invalid input parameter.");
            if (result == "?")
                return null;
            return result;
        },
        /**
         * Get cell value.
         * @param {number} rowIdentifier 0-based index.
         * @param {string|number} columnIdentifier The header or 0-based index of the column.
         * @returns {Promise<string>} a promise that is fulfilled when the _getCellValue operation ends.
         * @ignore
         */
        _getCellValue: function (rowIdentifier, columnIdentifier) {
            if (typeof(columnIdentifier) !== 'string')
                columnIdentifier = Convert.toNumber(columnIdentifier) + 1;
            rowIdentifier = rowIdentifier + 1;
            return this._executeNotWrapped(arguments, "GetCellData", rowIdentifier, columnIdentifier);
        },

        /**
         * Set cell value.
         * @param {number} rowIdentifier 0-based index.
         * @param {string|number} columnIdentifier The header or 0-based index of the column.
         * @param {string} value The cell value to be set.
         * @returns {Promise<void>} a promise that is fulfilled when the _setCellValue operation ends.
         * @ignore
         */
        _setCellValue: function (rowIdentifier, columnIdentifier, value) {
            if (typeof(columnIdentifier) !== 'string')
                columnIdentifier = Convert.toNumber(columnIdentifier) + 1;
            rowIdentifier = rowIdentifier + 1;
            return this._executeNotWrapped(arguments, "SetCellData", rowIdentifier, columnIdentifier, value);
        },

        /**
         * Get the number of rows and columns
         * @returns {Promise<Object>} a promise that is fulfilled with the number of rows and columns.
         * @ignore
         */
        _getRowAndColumnCount: function () {
            return this._executeNotWrapped(arguments, "RowCount").then(function(rowCount) {
                return this._executeCommand("ColumnCount").then(function(colCount) {
                    return {
                        rowCount: rowCount,
                        columnCount: colCount
                    };
                });
            }.bind(this));
        },

        /**
         * Get the number of rows in the table.
         * @returns {Promise<number>} a promise that is fulfilled when the _getRowsCount operation ends.
         * @ignore
         */
        _getRowsCount: function () {
            return this._executeCommand("RowCount").then(Convert.toNumber);
        },

        /**
         * Get the number of columns in the table.
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns in the table.
         * @ignore
         */
        _getColumnCount: function () {
            return this._executeCommand("ColumnCount").then(Convert.toNumber);
        },

        /**
         * Create TableCell object.
         * @param {number} rowIndex 0-based index.
         * @param {string|number} [columnOrIndex] The column header or 0-based column index in the row.
         * @returns {PowerBuilder.TableCell} A TableCell object.
         * @ignore
         */
        _createCell: function (rowIndex, columnOrIndex) {
            return new TableCell(this, rowIndex, columnOrIndex);
        }
    },

    _additionalProperties: {
        rowsCount: {wiredName: "RowCount"},
        columnsCount: {wiredName: "ColumnCount"}
    }
};

/**
 * A PowerBuilder Table test object
 * @constructor
 * @class TableTO
 * @extends PowerBuilder.UiObjectBaseTO
 * @mixes TableBaseOperationBehavior._methods
 * @mixes TableBaseOperationBehavior._properties
 * @mixes ExecuteItemsWithEventsBehavior
 * @mixes PowerBuilder.TableTOBehavior._properties
 * @mixes PowerBuilder.TableTOBehavior._methods
 * @memberof PowerBuilder
 */
function TableTO(session, description) {
    description = description || Table();
    var tableTO = new UiObjectBaseTO("PbDataWindow", session, description);
    tableTO._mergeBehavior(StdWinUiObjectWithLayoutInfoBehaviour);
    tableTO._mergeBehavior(TableBaseOperationBehavior);
    tableTO._mergeBehavior(ExecuteItemsWithEventsBehavior);
    tableTO._mergeBehavior(TableTOBehavior);
    return tableTO;
}

module.exports.Table = Table;
module.exports.TableTO = TableTO;
