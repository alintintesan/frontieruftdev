// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 2/20/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ComboBox Description", function () {

    var ComboBox = require("../lib/combo_box.js").ComboBox;
    var comboBoxDescUnderTest;

    beforeEach(function () {
        comboBoxDescUnderTest = ComboBox();
    });

    describe("items method", function () {
        it("should add 'all items' to _properties when value is given", function () {
            comboBoxDescUnderTest.items(["item1", "item2"]);
            assert.strictEqual(comboBoxDescUnderTest._properties["all items"], "item1;item2");
        });

        it("should add 'all items' to _properties when value is given using property bag", function () {
            comboBoxDescUnderTest = ComboBox({
                items: ["item1", "item2"]
            });
            assert.strictEqual(comboBoxDescUnderTest._properties["all items"], "item1;item2");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = comboBoxDescUnderTest.items(["item1", "item2"]);
            assert.strictEqual(result, comboBoxDescUnderTest);
        });

        it("should remove 'all items' from _properties when value is null", function () {
            comboBoxDescUnderTest._properties["all items"] = "item1;item2";
            comboBoxDescUnderTest.items(null);
            assert(!("all items" in comboBoxDescUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties when value is not given", function () {
            comboBoxDescUnderTest._properties["all items"] = "item1;item2";
            var value = comboBoxDescUnderTest.items();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'all items' in _properties when get is called", function () {
            comboBoxDescUnderTest._properties["all items"] = "item1;item2";
            comboBoxDescUnderTest.items();
            assert.strictEqual(comboBoxDescUnderTest._properties["all items"], "item1;item2");
        });
    });

    describe("selectedItem method", function () {
        it("should add 'selection' to _properties when value is given", function () {
            comboBoxDescUnderTest.selectedItem("selected");
            assert.strictEqual(comboBoxDescUnderTest._properties["selection"], "selected");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = comboBoxDescUnderTest.selectedItem("selected");
            assert.strictEqual(result, comboBoxDescUnderTest);
        });

        it("should remove 'selection' from _properties when value is null", function () {
            comboBoxDescUnderTest._properties["selection"] = "selected";
            comboBoxDescUnderTest.selectedItem(null);
            assert(!("selection" in comboBoxDescUnderTest._properties));
        });

        it("should return the value of 'selection' from _properties when value is not given", function () {
            comboBoxDescUnderTest._properties["selection"] = "selected";
            var selected = comboBoxDescUnderTest.selectedItem();
            assert.equal(selected, "selected");
        });
    });

    describe("itemsCount method", function () {
        it("should add 'items count' to _properties when value is given", function () {
            comboBoxDescUnderTest.itemsCount(100);
            assert.strictEqual(comboBoxDescUnderTest._properties["items count"], 100);
        });

        it("should add 'items count' to _properties when value is given in string", function () {
            comboBoxDescUnderTest.itemsCount('100');
            assert.strictEqual(comboBoxDescUnderTest._properties["items count"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = comboBoxDescUnderTest.itemsCount(100);
            assert.strictEqual(result, comboBoxDescUnderTest);
        });

        it("should remove 'items count' from _properties when value is null", function () {
            comboBoxDescUnderTest._properties["items count"] = 100;
            comboBoxDescUnderTest.itemsCount(null);
            assert(!("items count" in comboBoxDescUnderTest._properties));
        });

        it("should return the value of 'items count' from _properties when value is not given", function () {
            comboBoxDescUnderTest._properties["items count"] = 100;
            var result = comboBoxDescUnderTest.itemsCount();
            assert.equal(result, 100);
        });
    });

});

describe("ComboBox Test Object", function () {

    var ComboBoxTO = require("../lib/combo_box.js").ComboBoxTO;
    var comboboxTOUnderTest;

    beforeEach(function () {
        comboboxTOUnderTest = new ComboBoxTO();
        sinon.stub(comboboxTOUnderTest, "_executeWithEvents");
        sinon.stub(comboboxTOUnderTest, "_getROProperty");
    });

    afterEach(function () {
        comboboxTOUnderTest._executeWithEvents.restore();
        comboboxTOUnderTest._getROProperty.restore();
    });

    describe("selectedItem method", function () {

        it("should return the execution promise", function () {
            var executionPromise = {};
            comboboxTOUnderTest._getROProperty.returns(executionPromise);
            var res = comboboxTOUnderTest.selectedItem();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'selection' with correct parameters", function () {
            comboboxTOUnderTest.selectedItem();
            sinon.assert.calledOnce(comboboxTOUnderTest._getROProperty);
            sinon.assert.calledWith(comboboxTOUnderTest._getROProperty, "selection", sinon.match({}));
        });
    });

    describe("select method", function () {
        it("should throw error if indexOrItem is undefined", function () {
            assert.throws(function () {
                comboboxTOUnderTest.select();
            });
        });

        it("should throw error if indexOrItem is null", function () {
            assert.throws(function () {
                comboboxTOUnderTest.select(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            comboboxTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = comboboxTOUnderTest.select(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Select' if indexOrItem is a number", function () {
            comboboxTOUnderTest.select(10);
            sinon.assert.calledOnce(comboboxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(comboboxTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Select", 10);
        });

        it("should execute _executeWithEvents 'Select' if indexOrItem is a string", function () {
            comboboxTOUnderTest.select("item1");
            sinon.assert.calledOnce(comboboxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(comboboxTOUnderTest._executeWithEvents, sinon.match({ 0: "item1" }), "Select", "item1");
        });
    });

    describe("items method", function () {
        it("should query the property 'all items'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };
            comboboxTOUnderTest._getROProperty.returns(promiseMock);
            comboboxTOUnderTest.items();
            sinon.assert.calledOnce(comboboxTOUnderTest._getROProperty);
            sinon.assert.calledWith(comboboxTOUnderTest._getROProperty, "all items");
        });

        it("should return empty list if no item returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            comboboxTOUnderTest._getROProperty.returns(promiseMock);
            var res = comboboxTOUnderTest.items();
            assert.deepEqual(res, [""]);
        });

        it("should return a list  with items if items returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            comboboxTOUnderTest._getROProperty.returns(promiseMock);
            var res = comboboxTOUnderTest.items();
            assert.deepEqual(res, ["Item1", "Item2"]);
        });
    });
});
