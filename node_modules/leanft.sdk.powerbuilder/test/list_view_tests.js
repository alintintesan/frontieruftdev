// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 2/20/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("List View Text Object", function () {

    var ListViewTO = require("../lib/list_view.js").ListViewTO;
    var ListViewItem = require("leanft.sdk.stdwin").Behaviors.ListViewItem;
    var listViewTOUnderTest;

    var removeExecutorMethods = function (array) {
        array.map(function (item) {
            delete item._executeWithEventsOnItem;
            delete item._executeWithEventsOnItemOnError;
        });
        return array;
    };

    beforeEach(function () {
        listViewTOUnderTest = new ListViewTO();
        sinon.stub(listViewTOUnderTest, "_executeNotWrapped");
        sinon.stub(listViewTOUnderTest, "_getROPropertiesWithoutEvents");
        sinon.stub(listViewTOUnderTest, "_getROProperty");
        sinon.stub(listViewTOUnderTest, "_getROProperties");
        sinon.stub(listViewTOUnderTest, "_executeWithEvents");
        sinon.stub(listViewTOUnderTest, "_executeWithEventsOnError");
    });

    afterEach(function () {
        listViewTOUnderTest._executeWithEvents.restore();
        listViewTOUnderTest._getROPropertiesWithoutEvents.restore();
        listViewTOUnderTest._getROProperty.restore();
        listViewTOUnderTest._getROProperties.restore();
        listViewTOUnderTest._executeWithEventsOnError.restore();
        listViewTOUnderTest._executeNotWrapped.restore();
    });

    describe("items method", function () {
        it("should query the properties 'all items', 'items count'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2", 2]);
                }
            };
            listViewTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            listViewTOUnderTest.items();
            sinon.assert.calledOnce(listViewTOUnderTest._getROPropertiesWithoutEvents);
            sinon.assert.calledWith(listViewTOUnderTest._getROPropertiesWithoutEvents, "all items", "items count");
        });

        it("should return empty list if no item returns from _getROPropertiesWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["", 0]);
                }
            };

            listViewTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            var res = listViewTOUnderTest.items();
            assert.deepEqual(res, []);
        });

        it("should return a list  with items if items returns from _getROPropertiesWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2", 2]);
                }
            };

            listViewTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            var res = listViewTOUnderTest.items();
            assert.deepEqual(removeExecutorMethods(res), removeExecutorMethods([new ListViewItem(listViewTOUnderTest, 0, "Item1"), new ListViewItem(listViewTOUnderTest, 1, "Item2")]));
        });
    });

    describe("selectedItems method", function () {
        it("should query the property 'selection'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };
            listViewTOUnderTest._getROProperty.returns(promiseMock);
            listViewTOUnderTest.selectedItems();
            sinon.assert.calledOnce(listViewTOUnderTest._getROProperty);
            sinon.assert.calledWith(listViewTOUnderTest._getROProperty, "selection", sinon.match({}));
        });

        it("should return empty list if null returns from _getROPropertyWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb();
                }
            };

            listViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = listViewTOUnderTest.selectedItems();
            assert.deepEqual(res, []);
        });

        it("should return empty list if no item returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            listViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = listViewTOUnderTest.selectedItems();
            assert.deepEqual(res, []);
        });

        it("should return a list  with items if items returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            listViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = listViewTOUnderTest.selectedItems();
            assert.deepEqual(removeExecutorMethods(res), removeExecutorMethods([new ListViewItem(listViewTOUnderTest, "Item1", "Item1"), new ListViewItem(listViewTOUnderTest, "Item2", "Item2")]));
        });
    });

    describe("getItem method", function () {
        it("should throw error if text is undefined", function () {
            assert.throws(function () {
                listViewTOUnderTest.getItem();
            });
        });

        it("should throw error if text is null", function () {
            assert.throws(function () {
                listViewTOUnderTest.getItem(null);
            });
        });

        it("should return the ListViewItem", function () {
            var res = listViewTOUnderTest.getItem("Item1");
            assert.strictEqual(res._identifier, "Item1");
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerListViewBox, listViewTOUnderTest);
        });
    });

    describe("visibleColumnsCount method", function () {
        it("should execute _executeWithEventsOnError command with ColumnCount parameter", function () {
            listViewTOUnderTest.visibleColumnsCount();
            sinon.assert.calledOnce(listViewTOUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(listViewTOUnderTest._executeWithEventsOnError, sinon.match({}), "ColumnCount");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            listViewTOUnderTest._executeWithEventsOnError.returns(executionPromise);
            var res = listViewTOUnderTest.visibleColumnsCount();
            assert.equal(res, executionPromise);
        });
    });

    describe("checkedItems method", function () {
        it("should query the properties 'checked', 'all items'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["1;2", "Item0\nItem1\nItem2"]);
                }
            };
            listViewTOUnderTest._getROProperties.returns(promiseMock);
            listViewTOUnderTest.checkedItems();
            sinon.assert.calledOnce(listViewTOUnderTest._getROProperties);
            sinon.assert.calledWith(listViewTOUnderTest._getROProperties, sinon.match({}), "checked", "all items");
        });

        it("should return empty list if no item returns from _getROProperties", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["", ""]);
                }
            };

            listViewTOUnderTest._getROProperties.returns(promiseMock);
            var res = listViewTOUnderTest.checkedItems();
            assert.deepEqual(res, []);
        });

        it("should return empty list if null returns from _getROProperties", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(null);
                }
            };

            listViewTOUnderTest._getROProperties.returns(promiseMock);
            var res = listViewTOUnderTest.checkedItems();
            assert.deepEqual(res, []);
        });

        it("should return a list  with items if items returns from _getROProperties", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["1;2", "Item0\nItem1\nItem2"]);
                }
            };

            listViewTOUnderTest._getROProperties.returns(promiseMock);
            var res = listViewTOUnderTest.checkedItems();
            assert.deepEqual(removeExecutorMethods(res), removeExecutorMethods([new ListViewItem(listViewTOUnderTest, 1, "Item1"), new ListViewItem(listViewTOUnderTest, 2, "Item2")]));
        });
    });

    describe("_enableLabelEditingItem method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            listViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = listViewTOUnderTest._enableLabelEditingItem(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'EditLabel' with correct parameters, if input is number", function () {
            listViewTOUnderTest._enableLabelEditingItem(10);
            sinon.assert.calledOnce(listViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "EditLabel", 10);
        });

        it("should execute _executeNotWrapped 'EditLabel' with correct parameters, if input is string", function () {
            listViewTOUnderTest._enableLabelEditingItem("Item1");
            sinon.assert.calledOnce(listViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "EditLabel", "Item1");
        });
    });

    describe("getColumnHeader method", function () {
        it("should throw error if columnIndex is undefined", function () {
            assert.throws(function () {
                listViewTOUnderTest.getColumnHeader();
            });
        });

        it("should throw error if columnIndex is null", function () {
            assert.throws(function () {
                listViewTOUnderTest.getColumnHeader(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            listViewTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = listViewTOUnderTest.getColumnHeader(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents command with GetColumnHeader if input is number", function () {
            listViewTOUnderTest.getColumnHeader(10);
            sinon.assert.calledOnce(listViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(listViewTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "GetColumnHeader", 10);
        });

        it("should execute _executeWithEvents command with GetColumnHeader if input is string", function () {
            listViewTOUnderTest.getColumnHeader("10");
            sinon.assert.calledOnce(listViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(listViewTOUnderTest._executeWithEvents, sinon.match({ 0: "10" }), "GetColumnHeader", 10);
        });
    });

    describe("_getItemState method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            listViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = listViewTOUnderTest._getItemState(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            listViewTOUnderTest._getItemState(10);
            sinon.assert.calledOnce(listViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "state");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            listViewTOUnderTest._getItemState("Item1");
            sinon.assert.calledOnce(listViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "state");
        });
    });

    describe("_getSubItemText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            listViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = listViewTOUnderTest._getSubItemText(10, "text");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped with 'GetSubItem' with correct parameters, if identifier is number", function () {
            listViewTOUnderTest._getSubItemText(10, "text");
            sinon.assert.calledOnce(listViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10, 1: "text" }), "GetSubItem", 10, "text");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if identifier is string", function () {
            listViewTOUnderTest._getSubItemText("Item1", "text");
            sinon.assert.calledOnce(listViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1", 1: "text" }), "GetSubItem", "Item1", "text");
        });

        it("should execute _executeNotWrapped with 'GetSubItem' with correct parameters, if indexOrName is number", function () {
            listViewTOUnderTest._getSubItemText(10, 5);
            sinon.assert.calledOnce(listViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10, 1: 5 }), "GetSubItem", 10, 5);
        });

        it("should execute _executeNotWrapped with 'GetSubItem' with correct parameters, if indexOrName is string", function () {
            listViewTOUnderTest._getSubItemText(10, "text");
            sinon.assert.calledOnce(listViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10, 1: "text" }), "GetSubItem", 10, "text");
        });
    });

    describe("_setItemState method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            listViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = listViewTOUnderTest._setItemState(10, 2);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped with 'SetItemState' with correct parameters, if identifier is number", function () {
            listViewTOUnderTest._setItemState(10, 2);
            sinon.assert.calledOnce(listViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10, 1: 2 }), "SetItemState", 10, 2);
        });

        it("should execute _executeNotWrapped 'SetItemState' with correct parameters, if identifier is string", function () {
            listViewTOUnderTest._setItemState("Item1", 2);
            sinon.assert.calledOnce(listViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1", 1: 2 }), "SetItemState", "Item1", 2);
        });

        it("should execute _executeNotWrapped with 'SetItemState' with correct parameters, if state is number", function () {
            listViewTOUnderTest._setItemState(10, 2);
            sinon.assert.calledOnce(listViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10, 1: 2 }), "SetItemState", 10, 2);
        });

        it("should execute _executeNotWrapped with 'SetItemState' with correct parameters, if state is string", function () {
            listViewTOUnderTest._setItemState(10, "2");
            sinon.assert.calledOnce(listViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(listViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10, 1: "2" }), "SetItemState", 10, 2);
        });
    });

    describe("_createItem method", function () {
        it("should return the ListViewItem with correct values", function () {
            var res = listViewTOUnderTest._createItem(10, "Item1");
            assert.strictEqual(res._identifier, 10);
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerListViewBox, listViewTOUnderTest);
        });
    });
});
