// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 2/20/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Edit  TO", function () {

    var EditTO = require("../lib/edit.js").EditTO;
    var editTOUnderTest;

    beforeEach(function () {
        editTOUnderTest = new EditTO();
        sinon.stub(editTOUnderTest, "_executeWithEvents");
    });

    afterEach(function () {
        editTOUnderTest._executeWithEvents.restore();
    });

    describe("setText method", function () {
        it("should throw error if text is undefined", function () {
            assert.throws(function () {
                editTOUnderTest.setText();
            });
        });

        it("should throw error if text is null", function () {
            assert.throws(function () {
                editTOUnderTest.setText(null);
            });
        });

        it("should execute command with text is entered", function () {
            editTOUnderTest.setText("Sample text");
            sinon.assert.calledOnce(editTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(editTOUnderTest._executeWithEvents, sinon.match({ 0: "Sample text" }), "Set", "Sample text");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            editTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = editTOUnderTest.setText("Sample Text");
            assert.equal(res, executionPromise);
        });
    });

    describe("select method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            editTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = editTOUnderTest.select(1, 1);
            assert.equal(res, executionPromise);
        });

        it("should execute command 'SetSelection' with all input values if the inputs are number", function () {
            editTOUnderTest.select(2, 5);
            sinon.assert.calledOnce(editTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(editTOUnderTest._executeWithEvents, sinon.match({ 0: 2, 1: 5 }), "SetSelection", 2, 6);
        });

        it("should execute command 'SetSelection' with all input values in the inputs are string", function () {
            editTOUnderTest.select("2", "5");
            sinon.assert.calledOnce(editTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(editTOUnderTest._executeWithEvents, sinon.match({ 0: "2", 1: "5" }), "SetSelection", 2, 6);
        });

        it("should throw error if fromStartPos is undefined", function () {
            assert.throws(function () {
                editTOUnderTest.select();
            });
        });

        it("should throw error if fromStartPos is null", function () {
            assert.throws(function () {
                editTOUnderTest.select(null);
            });
        });

        it("should throw error if toEndPos is undefined", function () {
            assert.throws(function () {
                editTOUnderTest.select(1);
            });
        });

        it("should throw error if toEndPos is null", function () {
            assert.throws(function () {
                editTOUnderTest.select(1, null);
            });
        });
    });

    describe("setSecure method", function () {
        it("should throw error if encodedText is undefined", function () {
            assert.throws(function () {
                editTOUnderTest.setSecure();
            });
        });

        it("should throw error if encodedText is null", function () {
            assert.throws(function () {
                editTOUnderTest.setSecure(null);
            });
        });

        it("should execute command 'setSecure' with text is entered", function () {
            editTOUnderTest.setSecure("Sample encoded text");
            sinon.assert.calledOnce(editTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(editTOUnderTest._executeWithEvents, sinon.match({ 0: "Sample encoded text" }), "SetSecure", "Sample encoded text");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            editTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = editTOUnderTest.setSecure("Sample encoded text");
            assert.equal(res, executionPromise);
        });
    });
});
