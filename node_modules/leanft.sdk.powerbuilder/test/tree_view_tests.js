// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 03/13/2018.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var MouseButton = Core.MouseButton;

describe("TreeView Description", function () {

    var TreeView = require("../lib/tree_view.js").TreeView;
    var treeViewDescUnderTest;

    beforeEach(function () {
        treeViewDescUnderTest = TreeView();
    });

    describe("visibleNodes method", function () {
        it("should add 'all items' to _properties when value is given using property bag", function () {
            treeViewDescUnderTest = TreeView({
                visibleNodes: ["item1", "item2"]
            });
            assert.strictEqual(treeViewDescUnderTest._properties["all items"], "item1\nitem2");
        });
    });

    describe("selectedNodes method", function () {
        it("should add 'selection' to _properties when value is given using property bag", function () {
            treeViewDescUnderTest = TreeView({
                selectedNodes: ["item1", "item2"]
            });
            assert.strictEqual(treeViewDescUnderTest._properties["selection"], "item1\nitem2");
        });
    });
});

describe("Tree View Test Object", function () {

    var TreeViewTO = require("../lib/tree_view.js").TreeViewTO;
    var TreeViewNode = require("leanft.sdk.stdwin").Behaviors.TreeViewNode;
    var treeViewTOUnderTest;

    var removeExecutorMethods = function (array) {
        array.map(function (item) {
            delete item._executeWithEventsOnItem;
            delete item._executeWithEventsOnItemOnError;
        });
        return array;
    };

    beforeEach(function () {
        treeViewTOUnderTest = new TreeViewTO();
        sinon.stub(treeViewTOUnderTest, "_executeWithEvents");
        sinon.stub(treeViewTOUnderTest, "_getROProperties");
        sinon.stub(treeViewTOUnderTest, "_getROPropertiesWithoutEvents");
        sinon.stub(treeViewTOUnderTest, "_getROProperty");
        sinon.stub(treeViewTOUnderTest, "_executeWithEventsOnError");
        sinon.stub(treeViewTOUnderTest, "_executeNotWrapped");
    });

    afterEach(function () {
        treeViewTOUnderTest._executeWithEvents.restore();
        treeViewTOUnderTest._getROProperties.restore();
        treeViewTOUnderTest._getROProperty.restore();
        treeViewTOUnderTest._executeWithEventsOnError.restore();
        treeViewTOUnderTest._executeNotWrapped.restore();
        treeViewTOUnderTest._getROPropertiesWithoutEvents.restore();
    });

    describe("visibleNodes method", function () {
        it("should query the properties 'all items', 'items count'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2", 2]);
                }
            };
            treeViewTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            treeViewTOUnderTest.visibleNodes();
            sinon.assert.calledOnce(treeViewTOUnderTest._getROPropertiesWithoutEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._getROPropertiesWithoutEvents, "all items", "items count");
        });

        it("should return empty list if no item returns from _getROPropertiesWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["", 0]);
                }
            };

            treeViewTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            var res = treeViewTOUnderTest.visibleNodes();
            assert.deepEqual(res, []);
        });

        it("should return a list  with items if items returns from _getROPropertiesWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2", 2]);
                }
            };

            treeViewTOUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            var res = treeViewTOUnderTest.visibleNodes();
            assert.deepEqual(removeExecutorMethods(res), removeExecutorMethods([new TreeViewNode(treeViewTOUnderTest, 0, "Item1"), new TreeViewNode(treeViewTOUnderTest, 1, "Item2")]));
        });
    });

    describe("selectedNodes method", function () {
        it("should query the property 'selection'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };
            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            treeViewTOUnderTest.selectedNodes();
            sinon.assert.calledOnce(treeViewTOUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTOUnderTest._getROProperty, "selection", sinon.match({}));
        });

        it("should return empty list if null returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb();
                }
            };

            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTOUnderTest.selectedNodes();
            assert.deepEqual(res, []);
        });

        it("should return empty list if no node returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTOUnderTest.selectedNodes();
            assert.deepEqual(res, []);
        });

        it("should return a list  with nodes if nodes returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTOUnderTest.selectedNodes();
            assert.deepEqual(removeExecutorMethods(res), removeExecutorMethods([new TreeViewNode(treeViewTOUnderTest, "Item1", "Item1"), new TreeViewNode(treeViewTOUnderTest, "Item2", "Item2")]));
        });
    });

    describe("checkedVisibleNodes method", function () {
        it("should query the properties 'checked', 'all items'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["1;2", "Item1\nItem2"]);
                }
            };
            treeViewTOUnderTest._getROProperties.returns(promiseMock);
            treeViewTOUnderTest.checkedVisibleNodes();
            sinon.assert.calledOnce(treeViewTOUnderTest._getROProperties);
            sinon.assert.calledWith(treeViewTOUnderTest._getROProperties, sinon.match({}), "checked", "all items");
        });

        it("should return empty list if no item returns from _getROProperties", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["", ""]);
                }
            };

            treeViewTOUnderTest._getROProperties.returns(promiseMock);
            var res = treeViewTOUnderTest.checkedVisibleNodes();
            assert.deepEqual(res, []);
        });

        it("should return empty list if 'checked' property is null which is returned from _getROProperties", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([null, ""]);
                }
            };

            treeViewTOUnderTest._getROProperties.returns(promiseMock);
            var res = treeViewTOUnderTest.checkedVisibleNodes();
            assert.deepEqual(res, []);
        });

        it("should return empty list if null returns from _getROProperties", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(null);
                }
            };

            treeViewTOUnderTest._getROProperties.returns(promiseMock);
            var res = treeViewTOUnderTest.checkedVisibleNodes();
            assert.deepEqual(res, []);
        });

        it("should return a list  with nodes if nodes returns from _getROProperties", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["1;2", "Item0\nItem1\nItem2"]);
                }
            };

            treeViewTOUnderTest._getROProperties.returns(promiseMock);
            var res = treeViewTOUnderTest.checkedVisibleNodes();
            assert.deepEqual(removeExecutorMethods(res), removeExecutorMethods([new TreeViewNode(treeViewTOUnderTest, 1, "Item1"), new TreeViewNode(treeViewTOUnderTest, 2, "Item2")]));
        });
    });

    describe("getNode method", function () {
        it("should throw error if path is undefined", function () {
            assert.throws(function () {
                treeViewTOUnderTest.getNode();
            });
        });

        it("should throw error if path is null", function () {
            assert.throws(function () {
                treeViewTOUnderTest.getNode(null);
            });
        });

        it("should return the TreeViewNode", function () {
            var res = treeViewTOUnderTest.getNode("Item1");
            assert.strictEqual(res._identifier, "Item1");
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerTreeView, treeViewTOUnderTest);
        });
    });


    describe("activateNode method", function () {
        it("should throw error if node is undefined", function () {
            assert.throws(function () {
                treeViewTOUnderTest.activateNode();
            });
        });

        it("should throw error if node is null", function () {
            assert.throws(function () {
                treeViewTOUnderTest.activateNode(null);
            });
        });

        it("should throw error if node has no identifier", function () {
            assert.throws(function () {
                treeViewTOUnderTest.activateNode({});
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = treeViewTOUnderTest.activateNode(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Activate' if node is a number", function () {
            treeViewTOUnderTest.activateNode(10);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Activate", 10, 0);
        });

        it("should execute _executeWithEvents 'Activate' if node is a string", function () {
            treeViewTOUnderTest.activateNode("identifier");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: "identifier" }), "Activate", "identifier", 0);
        });

        it("should execute _executeWithEvents 'Activate' if node is an object", function () {
            var node = {}; node._identifier = 10;
            treeViewTOUnderTest.activateNode(node);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: { _identifier: 10 } }), "Activate", 10, 0);
        });

        it("should execute _executeWithEvents 'Activate' with Mouse Button Left if null", function () {
            var node = {}; node._identifier = 10;
            treeViewTOUnderTest.activateNode(node, null);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: { _identifier: 10 } }), "Activate", 10, 0);
        });

        it("should execute _executeWithEvents 'Activate' with correct Mouse Button", function () {
            var node = {}; node._identifier = 10;
            treeViewTOUnderTest.activateNode(node, MouseButton.right);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: { _identifier: 10 }, 1: "right" }), "Activate", 10, 1);
        });
    });

    describe("select method", function () {
        it("should throw error if node is undefined", function () {
            assert.throws(function () {
                treeViewTOUnderTest.select();
            });
        });

        it("should throw error if node is null", function () {
            assert.throws(function () {
                treeViewTOUnderTest.select(null);
            });
        });

        it("should throw error if node has no identifier", function () {
            assert.throws(function () {
                treeViewTOUnderTest.select({});
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = treeViewTOUnderTest.select(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Select' if node is a number", function () {
            treeViewTOUnderTest.select(10);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Select", 10, 0);
        });

        it("should execute _executeWithEvents 'Select' if node is a string", function () {
            treeViewTOUnderTest.select("identifier");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: "identifier" }), "Select", "identifier", 0);
        });

        it("should execute _executeWithEvents 'Select' if node is an object", function () {
            var node = {}; node._identifier = 10;
            treeViewTOUnderTest.select(node);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: { _identifier: 10 } }), "Select", 10, 0);
        });

        it("should execute _executeWithEvents 'Select' with Mouse Button Left if null", function () {
            var node = {}; node._identifier = 10;
            treeViewTOUnderTest.select(node, null);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: { _identifier: 10 } }), "Select", 10, 0);
        });

        it("should execute _executeWithEvents 'Select' with correct Mouse Button", function () {
            var node = {}; node._identifier = 10;
            treeViewTOUnderTest.select(node, MouseButton.right);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: { _identifier: 10 }, 1: "right" }), "Select", 10, 1);
        });
    });

    describe("_createItem method", function () {
        it("should return the TreeViewNode with correct values", function () {
            var res = treeViewTOUnderTest._createItem(10, "Item1");
            assert.strictEqual(res._identifier, 10);
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerTreeView, treeViewTOUnderTest);
        });
    });
});
