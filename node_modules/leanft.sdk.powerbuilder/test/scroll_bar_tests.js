// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 03/14/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ScrollBar Description", function () {
    var ScrollBar = require("../lib/scroll_bar.js").ScrollBar;
    var scrollBarDescUnderTest;

    beforeEach(function () {
        scrollBarDescUnderTest = ScrollBar();
    });

    describe("position method", function () {
        it("should add 'ScrollPosition' to _properties when value is given", function () {
            scrollBarDescUnderTest.position(100);
            assert.strictEqual(scrollBarDescUnderTest._properties["ScrollPosition"], 100);
        });

        it("should add 'ScrollPosition' to _properties when value is given in string", function () {
            scrollBarDescUnderTest.position('100');
            assert.strictEqual(scrollBarDescUnderTest._properties["ScrollPosition"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = scrollBarDescUnderTest.position(100);
            assert.strictEqual(result, scrollBarDescUnderTest);
        });

        it("should remove 'ScrollPosition' from _properties when value is null", function () {
            scrollBarDescUnderTest._properties["ScrollPosition"] = 100;
            scrollBarDescUnderTest.position(null);
            assert(!("Position" in scrollBarDescUnderTest._properties));
        });

        it("should return the value of 'ScrollPosition' from _properties when value is not given", function () {
            scrollBarDescUnderTest._properties["ScrollPosition"] = 100;
            var result = scrollBarDescUnderTest.position();
            assert.equal(result, 100);
        });
    });

    describe("maxPosition method", function () {
        it("should add 'MaxScrollPos' to _properties when value is given", function () {
            scrollBarDescUnderTest.maxPosition(100);
            assert.strictEqual(scrollBarDescUnderTest._properties["MaxScrollPos"], 100);
        });

        it("should add 'MaxScrollPos' to _properties when value is given in string", function () {
            scrollBarDescUnderTest.maxPosition('100');
            assert.strictEqual(scrollBarDescUnderTest._properties["MaxScrollPos"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = scrollBarDescUnderTest.maxPosition(100);
            assert.strictEqual(result, scrollBarDescUnderTest);
        });

        it("should remove 'MaxScrollPos' from _properties when value is null", function () {
            scrollBarDescUnderTest._properties["MaxScrollPos"] = 100;
            scrollBarDescUnderTest.maxPosition(null);
            assert(!("Position" in scrollBarDescUnderTest._properties));
        });

        it("should return the value of 'MaxScrollPos' from _properties when value is not given", function () {
            scrollBarDescUnderTest._properties["MaxScrollPos"] = 100;
            var result = scrollBarDescUnderTest.maxPosition();
            assert.equal(result, 100);
        });
    });

    describe("minPosition method", function () {
        it("should add 'MinScrollPos' to _properties when value is given", function () {
            scrollBarDescUnderTest.minPosition(100);
            assert.strictEqual(scrollBarDescUnderTest._properties["MinScrollPos"], 100);
        });

        it("should add 'MinScrollPos' to _properties when value is given in string", function () {
            scrollBarDescUnderTest.minPosition('100');
            assert.strictEqual(scrollBarDescUnderTest._properties["MinScrollPos"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = scrollBarDescUnderTest.minPosition(100);
            assert.strictEqual(result, scrollBarDescUnderTest);
        });

        it("should remove 'MinScrollPos' from _properties when value is null", function () {
            scrollBarDescUnderTest._properties["MinScrollPos"] = 100;
            scrollBarDescUnderTest.minPosition(null);
            assert(!("Position" in scrollBarDescUnderTest._properties));
        });

        it("should return the value of 'MinScrollPos' from _properties when value is not given", function () {
            scrollBarDescUnderTest._properties["MinScrollPos"] = 100;
            var result = scrollBarDescUnderTest.minPosition();
            assert.equal(result, 100);
        });
    });
});

describe("ScrollBar Test Object", function () {

    var ScrollBarTO = require("../lib/scroll_bar.js").ScrollBarTO;
    var scrollBarTOUnderTest;

    beforeEach(function () {
        scrollBarTOUnderTest = new ScrollBarTO();
        sinon.stub(scrollBarTOUnderTest, "_getROProperty");        
    });

    afterEach(function () {
        scrollBarTOUnderTest._getROProperty.restore();
    });

    describe("position method", function () {

        it("should return the execution promise", function () {
            var executionPromise = {};
            scrollBarTOUnderTest._getROProperty.returns(executionPromise);
            var res = scrollBarTOUnderTest.position();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'ScrollPosition' with correct parameters", function () {
            scrollBarTOUnderTest.position();
            sinon.assert.calledOnce(scrollBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(scrollBarTOUnderTest._getROProperty, "ScrollPosition", sinon.match({}));
        });
    });

    describe("maxPosition method", function () {
        
        it("should return the execution promise", function () {
            var executionPromise = {};
            scrollBarTOUnderTest._getROProperty.returns(executionPromise);
            var res = scrollBarTOUnderTest.maxPosition();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'MaxScrollPos' with correct parameters", function () {
            scrollBarTOUnderTest.maxPosition();
            sinon.assert.calledOnce(scrollBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(scrollBarTOUnderTest._getROProperty, "MaxScrollPos", sinon.match({}));
        });        
    });

    describe("minPosition method", function () {

        it("should return the execution promise", function () {
            var executionPromise = {};
            scrollBarTOUnderTest._getROProperty.returns(executionPromise);
            var res = scrollBarTOUnderTest.minPosition();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'MinScrollPos' with correct parameters", function () {
            scrollBarTOUnderTest.minPosition();
            sinon.assert.calledOnce(scrollBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(scrollBarTOUnderTest._getROProperty, "MinScrollPos", sinon.match({}));
        });
    });
});
