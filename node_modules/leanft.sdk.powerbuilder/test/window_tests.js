// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 2/19/2018.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("Window Description", function () {

    var Window = require("../lib/window.js").Window;
    var windowDescriptionUnderTest;

    beforeEach(function () {
        windowDescriptionUnderTest = Window();
    });

    describe("Constructor", function () {
        it("should assign 'PowerBuilder' and 'Window' LeanFT type", function () {
            windowDescriptionUnderTest = new Window();
            assert.deepEqual(windowDescriptionUnderTest.leanFTType, {
                technology: "PowerBuilder",
                leanftType: "Window"
            });
        });
    });

    describe("isActive method", function () {
        it("should add 'Foreground' to _properties when value is given", function () {
            windowDescriptionUnderTest.isActive(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["Foreground"], true);
        });

        it("should add 'Foreground' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isActive("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["Foreground"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isActive(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'Foreground' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["Foreground"] = true;
            windowDescriptionUnderTest.isActive(null);
            assert(!("Foreground" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'Foreground' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["Foreground"] = true;
            var result = windowDescriptionUnderTest.isActive();
            assert.equal(result, true);
        });
    });

    describe("hasBorder method", function () {
        it("should add 'HasBorder' to _properties when value is given", function () {
            windowDescriptionUnderTest.hasBorder(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["HasBorder"], true);
        });

        it("should add 'HasBorder' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.hasBorder("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["HasBorder"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.hasBorder(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'HasBorder' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["HasBorder"] = true;
            windowDescriptionUnderTest.hasBorder(null);
            assert(!("HasBorder" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'HasBorder' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["HasBorder"] = true;
            var result = windowDescriptionUnderTest.hasBorder();
            assert.equal(result, true);
        });
    });

    describe("hasCaption method", function () {
        it("should add 'HasCaption' to _properties when value is given", function () {
            windowDescriptionUnderTest.hasCaption(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["HasCaption"], true);
        });

        it("should add 'HasCaption' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.hasCaption("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["HasCaption"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.hasCaption(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'HasCaption' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["HasCaption"] = true;
            windowDescriptionUnderTest.hasCaption(null);
            assert(!("HasCaption" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'HasCaption' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["HasCaption"] = true;
            var result = windowDescriptionUnderTest.hasCaption();
            assert.equal(result, true);
        });
    });

    describe("hasSizebox method", function () {
        it("should add 'HasSizebox' to _properties when value is given", function () {
            windowDescriptionUnderTest.hasSizebox(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["HasSizebox"], true);
        });

        it("should add 'HasSizebox' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.hasSizebox("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["HasSizebox"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.hasSizebox(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'HasSizebox' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["HasSizebox"] = true;
            windowDescriptionUnderTest.hasSizebox(null);
            assert(!("HasSizebox" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'HasSizebox' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["HasSizebox"] = true;
            var result = windowDescriptionUnderTest.hasSizebox();
            assert.equal(result, true);
        });
    });

    describe("hasSystemMenu method", function () {
        it("should add 'HasSystemMenu' to _properties when value is given", function () {
            windowDescriptionUnderTest.hasSystemMenu(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["HasSystemMenu"], true);
        });

        it("should add 'HasSystemMenu' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.hasSystemMenu("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["HasSystemMenu"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.hasSystemMenu(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'HasSystemMenu' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["HasSystemMenu"] = true;
            windowDescriptionUnderTest.hasSystemMenu(null);
            assert(!("HasSystemMenu" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'HasSystemMenu' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["HasSystemMenu"] = true;
            var result = windowDescriptionUnderTest.hasSystemMenu();
            assert.equal(result, true);
        });
    });

    describe("isOwnedWindow method", function () {
        it("should add 'is owned window' to _properties when value is given", function () {
            windowDescriptionUnderTest.isOwnedWindow(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["is owned window"], true);
        });

        it("should add 'is owned window' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isOwnedWindow("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["is owned window"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isOwnedWindow(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'is owned window' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["is owned window"] = true;
            windowDescriptionUnderTest.isOwnedWindow(null);
            assert(!("is owned window" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'is owned window' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["is owned window"] = true;
            var result = windowDescriptionUnderTest.isOwnedWindow();
            assert.equal(result, true);
        });
    });

    describe("isChildWindow method", function () {
        it("should add 'is child window' to _properties when value is given", function () {
            windowDescriptionUnderTest.isChildWindow(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["is child window"], true);
        });

        it("should add 'is child window' to _properties when value is givenin string", function () {
            windowDescriptionUnderTest.isChildWindow("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["is child window"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isChildWindow(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'is child window' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["is child window"] = true;
            windowDescriptionUnderTest.isChildWindow(null);
            assert(!("is child window" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'is child window' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["is child window"] = true;
            var result = windowDescriptionUnderTest.isChildWindow();
            assert.equal(result, true);
        });
    });

    describe("isMdiChildWindow method", function () {
        it("should add 'IsMdiChildWindow' to _properties when value is given", function () {
            windowDescriptionUnderTest.isMdiChildWindow(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["IsMdiChildWindow"], true);
        });

        it("should add 'IsMdiChildWindow' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isMdiChildWindow("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["IsMdiChildWindow"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isMdiChildWindow(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'IsMdiChildWindow' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["IsMdiChildWindow"] = true;
            windowDescriptionUnderTest.isMdiChildWindow(null);
            assert(!("IsMdiChildWindow" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'IsMdiChildWindow' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["IsMdiChildWindow"] = true;
            var result = windowDescriptionUnderTest.isMdiChildWindow();
            assert.equal(result, true);
        });
    });

    describe("isPopupWindow method", function () {
        it("should add 'IsPopupWindow' to _properties when value is given", function () {
            windowDescriptionUnderTest.isPopupWindow(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["IsPopupWindow"], true);
        });

        it("should add 'IsPopupWindow' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isPopupWindow("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["IsPopupWindow"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isPopupWindow(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'IsPopupWindow' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["IsPopupWindow"] = true;
            windowDescriptionUnderTest.isPopupWindow(null);
            assert(!("IsPopupWindow" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'IsPopupWindow' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["IsPopupWindow"] = true;
            var result = windowDescriptionUnderTest.isPopupWindow();
            assert.equal(result, true);
        });
    });

    describe("isToolWindow method", function () {
        it("should add 'IsToolWindow' to _properties when value is given", function () {
            windowDescriptionUnderTest.isToolWindow(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["IsToolWindow"], true);
        });

        it("should add 'IsToolWindow' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isToolWindow("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["IsToolWindow"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isToolWindow(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'IsToolWindow' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["IsToolWindow"] = true;
            windowDescriptionUnderTest.isToolWindow(null);
            assert(!("IsToolWindow" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'IsToolWindow' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["IsToolWindow"] = true;
            var result = windowDescriptionUnderTest.isToolWindow();
            assert.equal(result, true);
        });
    });

    describe("isMaximizable method", function () {
        it("should add 'Maximizable' to _properties when value is given", function () {
            windowDescriptionUnderTest.isMaximizable(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["Maximizable"], true);
        });

        it("should add 'Maximizable' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isMaximizable("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["Maximizable"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isMaximizable(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'Maximizable' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["Maximizable"] = true;
            windowDescriptionUnderTest.isMaximizable(null);
            assert(!("Maximizable" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'Maximizable' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["Maximizable"] = true;
            var result = windowDescriptionUnderTest.isMaximizable();
            assert.equal(result, true);
        });
    });

    describe("isMinimizable method", function () {
        it("should add 'Minimizable' to _properties when value is given", function () {
            windowDescriptionUnderTest.isMinimizable(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["Minimizable"], true);
        });

        it("should add 'Minimizable' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isMinimizable("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["Minimizable"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isMinimizable(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'Minimizable' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["Minimizable"] = true;
            windowDescriptionUnderTest.isMinimizable(null);
            assert(!("Minimizable" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'Minimizable' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["Minimizable"] = true;
            var result = windowDescriptionUnderTest.isMinimizable();
            assert.equal(result, true);
        });
    });

    describe("isTopmost method", function () {
        it("should add 'Topmost' to _properties when value is given", function () {
            windowDescriptionUnderTest.isTopmost(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["Topmost"], true);
        });

        it("should add 'Topmost' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isTopmost("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["Topmost"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isTopmost(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'Topmost' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["Topmost"] = true;
            windowDescriptionUnderTest.isTopmost(null);
            assert(!("Topmost" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'Topmost' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["Topmost"] = true;
            var result = windowDescriptionUnderTest.isTopmost();
            assert.equal(result, true);
        });
    });
});

describe("Window Test Object", function () {
    var WindowTO = require("../lib/window.js").WindowTO;
    var windowTestObjectUnderTest;

    beforeEach(function () {
        windowTestObjectUnderTest = new WindowTO();
        windowTestObjectUnderTest._getROProperty = sinon.stub();
        windowTestObjectUnderTest._executeWithEvents = sinon.stub();
        windowTestObjectUnderTest._getROProperties = sinon.stub();
    });

    afterEach(function () {
        delete windowTestObjectUnderTest._executeWithEvents;
        delete windowTestObjectUnderTest._getROProperty;
        delete windowTestObjectUnderTest._getROProperties;
    });

    describe("isOwnedWindow method", function () {
        it("should execute _getROProperty 'is owned window'", function () {
            windowTestObjectUnderTest.isOwnedWindow();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "is owned window", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.isOwnedWindow();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isChildWindow method", function () {
        it("should execute _getROProperty 'is child window'", function () {
            windowTestObjectUnderTest.isChildWindow();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "is child window", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.isChildWindow();
            assert.strictEqual(res, promiseMock);
        });
    });
});
