// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 2/19/2018.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("UI Object Base Description", function () {

    var UiObjectBaseDescription = require("../lib/ui_object_base.js").UiObjectBaseDescription;
    var uiObjectBaseDescriptionUnderTest;

    beforeEach(function () {
        uiObjectBaseDescriptionUnderTest = new UiObjectBaseDescription();
    });

    describe("Constructor", function () {
        it("should assign 'PowerBuilder' and LeanFT type", function () {
            uiObjectBaseDescriptionUnderTest = new UiObjectBaseDescription("Window");
            assert.deepEqual(uiObjectBaseDescriptionUnderTest.leanFTType, {
                technology: "PowerBuilder",
                leanftType: "Window"
            });
        });
    });

    describe("nativeClass method", function () {
        it("should add 'nativeclass' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.nativeClass("native");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["nativeclass"], "native");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.nativeClass("native");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'nativeClass' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["nativeclass"] = "native";
            uiObjectBaseDescriptionUnderTest.nativeClass(null);
            assert(!("nativeClass" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'nativeclass' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["nativeclass"] = "native";
            var native = uiObjectBaseDescriptionUnderTest.nativeClass();
            assert.equal(native, "native");
        });
    });

    describe("windowId method", function () {
        it("should add 'window id' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.windowId(100);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["window id"], 100);
        });

        it("should add 'window id' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.windowId('100');
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["window id"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.windowId(100);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'window id' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["window id"] = 100;
            uiObjectBaseDescriptionUnderTest.windowId(null);
            assert(!("window id" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'window id' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["window id"] = 100;
            var result = uiObjectBaseDescriptionUnderTest.windowId();
            assert.equal(result, 100);
        });
    });

    describe("objectName method", function () {
        it("should add 'pbname' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.objectName("objectName");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["pbname"], "objectName");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.objectName("objectName");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'pbname' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["pbname"] = "objectName";
            uiObjectBaseDescriptionUnderTest.objectName(null);
            assert(!("pbname" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'pbname' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["pbname"] = "objectName";
            var result = uiObjectBaseDescriptionUnderTest.objectName();
            assert.equal(result, "objectName");
        });
    });

    describe("attachedText method", function () {
        it("should add 'Attached text' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.attachedText("attachedText");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["Attached text"], "attachedText");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.attachedText("attachedText");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'Attached text' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["Attached text"] = "attachedText";
            uiObjectBaseDescriptionUnderTest.attachedText(null);
            assert(!("Attached text" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'Attached text' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["Attached text"] = "attachedText";
            var result = uiObjectBaseDescriptionUnderTest.attachedText();
            assert.equal(result, "attachedText");
        });
    });

    describe("isEnabled method", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["enabled"] = true;
            uiObjectBaseDescriptionUnderTest.isEnabled(null);
            assert(!("enabled" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["enabled"] = true;
            var result = uiObjectBaseDescriptionUnderTest.isEnabled();
            assert.equal(result, true);
        });
    });

    describe("isFocused method", function () {
        it("should add 'focused' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.isFocused(true);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["focused"], true);
        });

        it("should add 'focused' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.isFocused("true");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["focused"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.isFocused(true);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'focused' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["focused"] = true;
            uiObjectBaseDescriptionUnderTest.isFocused(null);
            assert(!("focused" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'focused' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["focused"] = true;
            var result = uiObjectBaseDescriptionUnderTest.isFocused();
            assert.equal(result, true);
        });
    });

    describe("windowClassRegExp method", function () {
        it("should add 'regexpwndclass' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.windowClassRegExp("windowClassRegExp");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["regexpwndclass"], "windowClassRegExp");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.windowClassRegExp("windowClassRegExp");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'regexpwndclass' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["regexpwndclass"] = "windowClassRegExp";
            uiObjectBaseDescriptionUnderTest.windowClassRegExp(null);
            assert(!("regexpwndclass" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'regexpwndclass' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["regexpwndclass"] = "windowClassRegExp";
            var result = uiObjectBaseDescriptionUnderTest.windowClassRegExp();
            assert.equal(result, "windowClassRegExp");
        });
    });

    describe("windowTitleRegExp method", function () {
        it("should add 'regexpwndtitle' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.windowTitleRegExp("windowTitleRegExp");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["regexpwndtitle"], "windowTitleRegExp");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.windowTitleRegExp("windowTitleRegExp");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'regexpwndtitle' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["regexpwndtitle"] = "windowTitleRegExp";
            uiObjectBaseDescriptionUnderTest.windowTitleRegExp(null);
            assert(!("regexpwndtitle" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'regexpwndtitle' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["regexpwndtitle"] = "windowTitleRegExp";
            var result = uiObjectBaseDescriptionUnderTest.windowTitleRegExp();
            assert.equal(result, "windowTitleRegExp");
        });
    });

    describe("isVisible method", function () {
        it("should add 'visible' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.isVisible(true);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["visible"], true);
        });

        it("should add 'visible' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.isVisible("true");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["visible"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.isVisible(true);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'visible' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["visible"] = true;
            uiObjectBaseDescriptionUnderTest.isVisible(null);
            assert(!("visible" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'visible' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["visible"] = true;
            var result = uiObjectBaseDescriptionUnderTest.isVisible();
            assert.equal(result, true);
        });
    });

    describe("text method", function () {
        it("should add 'text' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.text("text");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["text"], "text");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.text("text");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'text' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["text"] = "text";
            uiObjectBaseDescriptionUnderTest.text(null);
            assert(!("text" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'text' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["text"] = "text";
            var result = uiObjectBaseDescriptionUnderTest.text();
            assert.equal(result, "text");
        });
    });

    describe("windowExtendedStyle method", function () {
        it("should add 'WindowExtendedStyle' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.windowExtendedStyle(100);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["WindowExtendedStyle"], 100);
        });

        it("should add 'WindowExtendedStyle' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.windowExtendedStyle("100");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["WindowExtendedStyle"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.windowExtendedStyle(100);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'WindowExtendedStyle' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["WindowExtendedStyle"] = 100;
            uiObjectBaseDescriptionUnderTest.windowExtendedStyle(null);
            assert(!("WindowExtendedStyle" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'WindowExtendedStyle' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["WindowExtendedStyle"] = 100;
            var result = uiObjectBaseDescriptionUnderTest.windowExtendedStyle();
            assert.equal(result, 100);
        });
    });

    describe("windowStyle method", function () {
        it("should add 'WindowStyle' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.windowStyle(100);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["WindowStyle"], 100);
        });

        it("should add 'WindowStyle' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.windowStyle("100");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["WindowStyle"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.windowStyle(100);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'WindowStyle' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["WindowStyle"] = 100;
            uiObjectBaseDescriptionUnderTest.windowStyle(null);
            assert(!("WindowStyle" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'WindowStyle' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["WindowStyle"] = 100;
            var result = uiObjectBaseDescriptionUnderTest.windowStyle();
            assert.equal(result, 100);
        });
    });
});

describe("UI Object Base Test Object", function () {

    var UiObjectBaseTO = require("../lib/ui_object_base.js").UiObjectBaseTO;
    var uiObjectBaseTOUnderTest;

    beforeEach(function () {
        uiObjectBaseTOUnderTest = new UiObjectBaseTO();
        uiObjectBaseTOUnderTest._getROProperty = sinon.stub();
    });

    describe("objectName method", function () {
        it("should execute _getROProperty 'pbname'", function () {
            uiObjectBaseTOUnderTest.objectName();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "pbname", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.objectName();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("attachedText method", function () {
        it("should execute _getROProperty 'attached text'", function () {
            uiObjectBaseTOUnderTest.attachedText();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "attached text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.attachedText();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("text method", function () {
        it("should execute _getROProperty 'text'", function () {
            uiObjectBaseTOUnderTest.text();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.text();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("windowExtendedStyle method", function () {
        it("should execute _getROProperty 'WindowExtendedStyle'", function () {
            uiObjectBaseTOUnderTest.windowExtendedStyle();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "WindowExtendedStyle", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.windowExtendedStyle();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("windowStyle method", function () {
        it("should execute _getROProperty 'WindowStyle'", function () {
            uiObjectBaseTOUnderTest.windowStyle();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "WindowStyle", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.windowStyle();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("windowClassRegExp method", function () {
        it("should execute _getROProperty 'windowClassRegExp'", function () {
            uiObjectBaseTOUnderTest.windowClassRegExp();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "RegExpWndClass", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.windowClassRegExp();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("windowId method", function () {
        it("should execute _getROProperty 'window id'", function () {
            uiObjectBaseTOUnderTest.windowId();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "window id", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.windowId();
            assert.strictEqual(res, promiseMock);
        });
    });

});
