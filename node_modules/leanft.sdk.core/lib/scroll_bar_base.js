// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/20/2016.
 */

var ArrayUtils = require("./object_utils.js").ArrayUtils;
var Convert = require("./convert.js").Convert;
var Utils = require("./object_utils.js").ObjectUtils;

//Consts
var setPositionWiredName = "Set";
var nextLineWiredName = "NextLine";
var nextPageWiredName = "NextPage";
var previousLineWiredName = "PrevLine";
var previousPageWiredName = "PrevPage";

/**
 * The behaviors of the ScrollBar object of StdWin and WinForms
 * @memberof Core
 * @ignore
 */
var ScrollBarTOBaseBehavior = {
    /**
     * @ignore
     * @memberof Core.ScrollBarTOBaseBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Set the position for the ScrollBar.
         * @function
         * @param {number} position The position to be set.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        setPosition: {
            wiredName: setPositionWiredName,
            exec: function (position) {
                if (position == null)
                    throw new Error("The parameter position cannot be null.");
                return this._executeWithEvents(arguments, setPositionWiredName, Convert.toNumber(position));
            }
        },

        /*jshint eqnull:true */
        /**
         * Moves the scroll bar downward, or to the right, the specified number of lines.
         * @function
         * @param {number} [numberOfLines = 1] The number of lines to move the scroll bar.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        nextLine: {
            wiredName: nextLineWiredName,
            exec: function (numberOfLines) {
                if (numberOfLines == null)
                    numberOfLines = 1;

                numberOfLines = Convert.toNumber(numberOfLines);

                if (numberOfLines < 1) {
                    throw new Error("numberOfLines is Illegal value (< 1)");
                }

                return this._executeWithEvents(arguments, nextLineWiredName, numberOfLines);
            }
        },

        /*jshint eqnull:true */
        /**
         * Moves the scroll bar downward, or to the right, the specified number of pages.
         * @function
         * @param {number} [numberOfPages = 1] The number of pages to move the scroll bar.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        nextPage: {
            wiredName: nextPageWiredName,
            exec: function (numberOfPages) {
                if (numberOfPages == null)
                    numberOfPages = 1;

                numberOfPages = Convert.toNumber(numberOfPages);

                if (numberOfPages < 1) {
                    throw new Error("numberOfPages is Illegal value (< 1)");
                }
                return this._executeWithEvents(arguments, nextPageWiredName, numberOfPages);
            }
        },

        /*jshint eqnull:true */
        /**
         * Moves the scroll bar upward, or to the left, the specified number of lines.
         * @function
         * @param {number} [numberOfLines = 1] The number of lines to move the scroll bar.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        previousLine: {
            wiredName: previousLineWiredName,
            exec: function (numberOfLines) {
                if (numberOfLines == null)
                    numberOfLines = 1;

                numberOfLines = Convert.toNumber(numberOfLines);

                if (numberOfLines < 1) {
                    throw new Error("numberOfLines is Illegal value (< 1)");
                }
                return this._executeWithEvents(arguments, previousLineWiredName, numberOfLines);
            }
        },

        /*jshint eqnull:true */
        /**
         * Moves the scroll bar upward, or to the left, the specified number of pages.
         * @function
         * @param {number} [numberOfPages = 1] The number of pages to move the scroll bar.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        previousPage: {
            wiredName: previousPageWiredName,
            exec: function (numberOfPages) {
                if (numberOfPages == null)
                    numberOfPages = 1;

                numberOfPages = Convert.toNumber(numberOfPages);

                if (numberOfPages < 1) {
                    throw new Error("numberOfPages is Illegal value (< 1)");
                }
                return this._executeWithEvents(arguments, previousPageWiredName, numberOfPages);
            }
        }
    }
};

module.exports.ScrollBarTOBaseBehavior = ScrollBarTOBaseBehavior;