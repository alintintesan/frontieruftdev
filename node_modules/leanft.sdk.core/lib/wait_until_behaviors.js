// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/**
 * This is the behavior that needs to be use in case the test object supports drag & drop.
 * @ignore
 */
var WaitUntilEnabledBehavior = {
    /**
     * @ignore
     * @memberof WaitUntilEnabledBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Waits until the test object becomes enabled or the timeout elapses.
         * This method is useful for synchronizing your test with your application.
         * @param {number} [timeout] The length of time to wait (in milliseconds) for the test object to become enabled.
         * @returns {Promise<boolean>} a promise fulfilled with true if test object becomes enabled before the timeout is reached; otherwise, false.
         */
        waitUntilEnabled: function (timeout) {
            return this._session.waitUntil(this.isEnabled.bind(this), timeout);
        }
    }
};

/**
 * This is the behavior that needs to be use in case the test object supports drag & drop.
 * @ignore
 */
var WaitUntilVisibleBehavior = {
    /**
     * @ignore
     * @memberof WaitUntilVisibleBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Waits until the test object becomes visible or the timeout elapses.
         * This method is useful for synchronizing your test with your application.
         * @param {number} [timeout] The length of time to wait (in milliseconds) for the test object to become visible.
         * @returns {Promise<boolean>} a promise fulfilled with true if test object becomes visible before the timeout is reached; otherwise, false.
         */
        waitUntilVisible: function (timeout) {
            return this._session.waitUntil(this.isVisible.bind(this), timeout);
        }
    }
};

module.exports.WaitUntilEnabledBehavior = WaitUntilEnabledBehavior;
module.exports.WaitUntilVisibleBehavior = WaitUntilVisibleBehavior;