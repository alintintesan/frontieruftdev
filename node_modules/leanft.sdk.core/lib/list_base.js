// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/25/2016.
 */

var ArrayUtils = require("./object_utils.js").ArrayUtils;
var Convert = require("./convert.js").Convert;
var MouseButton = require("./clickbehavior.js").MouseButton;
var Utils = require("./object_utils.js").ObjectUtils;

//Consts
var selectRangeWiredName = "SelectRange";


/**
 * The behaviors of List Base, base class for List controls of StdWin and WinForms
 * @ignore
 */
var ListBaseBehavior = {
    /**
     * @ignore
     * @memberof ListBaseBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Selects a range of items.
         * <BR>If itemOrIndexTo is not specified, selects all list items between the currently selected item and itemOrIndexTo passed as the argument.
         * <BR>This method is applicable only to lists that allow multiple selection.
         * @function
         * @param {ListItem | ListViewItem | string | number} item The first item to select.<BR>
         * The input can be the list item, list view item, the 0-based index of the item or the name/text of the item.<BR>
         * If itemOrIndexTo is not specified, this item is the last item to select.
         * @param {ListItem | ListViewItem | string | number} [itemOrIndexTo] The last item to select.<BR>
         * The input can be the list item, list view item, the 0-based index of the item or the name/text of the item
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        selectRange: {
            wiredName: selectRangeWiredName,
            exec: function (item, itemOrIndexTo) {
                if (item == null)
                    throw new Error("The parameter item cannot be null.");
                if (itemOrIndexTo == null)
                    return this._executeWithEvents(arguments, selectRangeWiredName, this._itemTransform(item));
                return this._executeWithEvents(arguments, selectRangeWiredName, this._itemTransform(item), this._itemTransform(itemOrIndexTo));
            }
        },
    },

    _helpers:{
        /*jshint eqnull:true */
        /**
         * Activate a list item.
         * @param {ListItem|number|string} item The item to be activated.
         * The input can be the list item, the 0-based index of the item or the name/text of the item
         * @param {MouseButton} [button] The button to activate. Default is the left button.
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         * @ignore
         */
        _activateItem: function (item, button) {
            if (item == null)
                throw new Error("The item cannot be null.");

            value = item;
            if (typeof item === 'object') {
                if (item._identifier == null) {
                    throw new Error("The identifier of the item cannot be null.");
                }
                value = item._identifier;
            }

            var mouse_button = button || MouseButton.left;
            return this._executeWithEvents(arguments.callee.caller.arguments, "Activate", value, MouseButton._convert(mouse_button));
        },

        /*jshint eqnull:true */
        /**
         * Deselects a list of items.
         * @param {...(ListItem | ListViewItem | number | string)} items You can pass as many items as you like. Each item can be either the name of the item you wish to select,
         * or the numeric index of the item in the list.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        _deselect: function (items) {
            if (items == null)
                throw new Error("The parameter items cannot be null.");
            return this._executeSingleOpOnCollection(arguments.callee.caller.arguments, "Deselect", ArrayUtils.toArray(arguments), this._itemTransform);
        },

        /*jshint eqnull:true */
        /**
         * Selects a list of items.
         * @param {...(ListItem | ListViewItem | number | string)} items You can pass as many items as you like. Each item can be either the name of the item you wish to select,
         * or the numeric index of the item in the list.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        _select: function (items) {
            if (items == null)
                throw new Error("The parameter items cannot be null.");
            return this._executeOnItemsCollection(arguments.callee.caller.arguments, "Select", "ExtendSelect", ArrayUtils.toArray(arguments), this._itemTransform);
        },

        /*jshint eqnull:true */
        /**
         * Selects additional items from the multi-selection list.
         * <BR>Remark: This method is applicable only to lists that allow multiple selection.
         * @param {...(ListItem | ListViewItem | string | number)} items One or more items to add to the selection. Each item can be either a {@link StdWin.ListItem} or {@link StdWin.ListViewItem}, the item's name,
         * or the item's numeric index in the list.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        _extendSelect: function (items) {
            if (items == null)
                throw new Error("The parameter items cannot be null.");
            return this._executeOnItemsCollection(arguments.callee.caller.arguments, "ExtendSelect", "ExtendSelect", ArrayUtils.toArray(arguments), this._itemTransform);
        },

        /*jshint eqnull:true */
        /**
         * Create a ListItem/ListViewItem from its text representation.
         * @param {string} text The text representation if the item.
         * @returns {ListItem} The ListItem object.
         * @ignore
         */
        _getItem: function (text) {
            if (text == null)
                throw new Error("The parameter text cannot be null.");
            return this._createItem(text, text);
        },

        /**
         * Select the text of the item.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * If it is a string, it is the name of the item.
         * @returns {Promise<string>} a promise fulfilled with the text of the item.
         * @ignore
         */
        _getItemText: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "text");
        },

        /**
         * Check if the item is focused.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean indicating if the item is focused or not
         * @ignore
         */
        _isItemFocused: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "focused");
        },

        /**
         * Check if the item is selected.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean indicating if the item is selected or not
         * @ignore
         */
        _isItemSelected: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "selected");
        },

        /**
         * @ignore
         */
        _itemTransform: function (item) {
            if (typeof item === 'object') {
                return item._identifier;
            }
            return item;
        }
    }
};

module.exports.ListBaseBehavior = ListBaseBehavior;
