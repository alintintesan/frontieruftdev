// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/01/2016.
 */

var Convert = require("./convert.js").Convert;

//Consts
var selectWiredName = "SetSelection";
var setCursorPositionWiredName = "SetCaretPos";

/**
 * The behaviors of the Editor object used for StdWin and Winforms technology
 * @ignore
 */
var EditorBaseTOBehavior = {
     /**
     * @ignore
     * @memberof EditorBaseTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Select a block of text in the Editor. All positions are 0-based.
         * @function
         * @param {number} fromLine The line at which the selection starts.
         * @param {number} fromCharPos The character position at which the selection starts.
         * @param {number} toLine The line at which the selection ends.
         * @param {number} toCharPos The character position at which the selection ends.
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         */
        select: {
            wiredName: selectWiredName,
            exec: function (fromLine, fromCharPos, toLine, toCharPos) {
                if (fromLine == null)
                    throw new Error("The parameter fromLine should have a value.");
                if (fromCharPos == null)
                    throw new Error("The parameter fromCharPos should have a value.");
                if (toLine == null)
                    throw new Error("The parameter toLine should have a value.");
                if (toCharPos == null)
                    throw new Error("The parameter toCharPos should have a value.");
                return this._executeWithEvents(arguments, selectWiredName, Convert.toNumber(fromLine), Convert.toNumber(fromCharPos), Convert.toNumber(toLine), Convert.toNumber(toCharPos) + 1);
            }
        },

        /*jshint eqnull:true */
        /**
         * Places the cursor at the specified point in the multi-line editor.
         * @function
         * @param {number} line The line in which the cursor is placed. (0-based)
         * @param {number} charPos The character position at which the cursor is placed.
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         */
        setCursorPosition: {
            wiredName: setCursorPositionWiredName,
            exec: function (line, charPos) {
                if (line == null)
                    throw new Error("The parameter line should have a value.");
                if (charPos == null)
                    throw new Error("The parameter charPos should have a value.");
                return this._executeWithEvents(arguments, setCursorPositionWiredName, Convert.toNumber(line), Convert.toNumber(charPos));
            }
        }
    },

    /**
     * @ignore
     * @memberof EditorBaseTOBehavior
     */
    _properties: {
        /**
         * Get the line where the cursor is located. (0-based)
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the line where the cursor is located. (0-based)
         */
        cursorLine: {
            wiredName: "line"
        },

        /**
         * Get the character position where the cursor is located. (zero-based)
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the character position where the cursor is located. (0-based)
         */
        cursorColumn: {
            wiredName: "column"
        }
    }
};

module.exports.EditorBaseTOBehavior = EditorBaseTOBehavior;