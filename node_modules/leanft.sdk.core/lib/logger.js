// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/* Created on 06/10/2015. */

/**
 * Methods for writing log messages at different levels.
 * @type {{trace: Function, debug: Function, info:Function, warn:Function, error:Function, fatal:Function}}
 * @class
 * @static
 * @ignore
 */
var Logger = function(category){
    this.category = category;
    this.level = Logger.prototype.logLevelFromString(process.env.LFTSDK_DEFAULT_LOG_LEVEL) || Logger.prototype.DEFAULT_LEVEL;
    this.appender = new ConsoleAppender();
};


Logger.prototype = {
    category: null,
    level: 0,
    DEFAULT_LEVEL: 0, //OFF
    appender: null,

    logLevelAsString: {
        1000: "Fatal",
        2000: "Error",
        3000: "Warn",
        4000: "Info",
        5000: "Debug",
        6000: "Trace"
    },

    /*jshint eqnull:true */
    logLevelFromString : function(logAsString){
        var logLevels = {
            fatal: 1000,
            error: 2000,
            warn: 3000,
            info: 4000,
            debug: 5000,
            trace: 6000
        };
            
        if(logAsString == null)
            return null;
        logAsString = logAsString.toLowerCase();
        return logLevels[logAsString];
    },

	/**
	* Writes a log entry.
	* @function
	* @alias trace
	* @memberof! Logger
    * @ignore
	*/
    trace: function (msg) {
        this.writeToLog(msg,6000);
    },

    /**
	* Writes a log entry.
	* @function
	* @memberof! Logger
    * @ignore
	*/
	debug: function (msg) {
        this.writeToLog(msg,5000);
    },

     /**
	* Writes a log entry.
	* @function
	* @memberof! Logger
    * @ignore
	*/
   info: function (msg) {
        this.writeToLog(msg,4000);
    },

     /**
	* Writes a log entry.
	* @function
	* @memberof! Logger
    * @ignore
	*/
   warn: function (msg) {
        this.writeToLog(msg,3000);
    },

    /**
	* Writes a log entry.
	* @function
	* @memberof! Logger
    * @ignore
	*/
    error: function (msg) {
        this.writeToLog(msg,2000);
    },

     /**
	* Writes a log entry.
	* @function
	* @memberof! Logger
    * @ignore
	*/
   fatal: function (msg) {
        this.writeToLog(msg,1000);
    },

    writeToLog: function (msg, level) {
        if(this.level < level)
            return;

        this.appender.append(this.formatMessage(msg,level),Logger.prototype.logLevelAsString[level]);
    },

    formatMessage: function(msg,level){
        return new Date().toGMTString() + " [" + Logger.prototype.logLevelAsString[level] + "] " + this.category + ": " + msg;
    }
};

function ConsoleAppender(){

}

ConsoleAppender.prototype = {
    appenderFunctionByLevel: {
        "trace": console.log,
        "debug": console.log,
        "info": console.info,
        "warn": console.warn,
        "error": console.error,
        "fatal": console.error
    },
    append: function(msg,levelString){
        this.appenderFunctionByLevel[levelString.toLowerCase()].call(console,msg);
    }
};

module.exports.Logger = Logger;
