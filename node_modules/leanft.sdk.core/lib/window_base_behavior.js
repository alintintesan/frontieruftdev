// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var Convert = require("./convert.js").Convert;
var MouseButton = require("./clickbehavior.js").MouseButton;
var WindowState = require("./window_state_and_styles.js").WindowState;

/**
 * The Window description base behavior used for StdWin, Winforms and PowerBuilder technology
 * @ignore
 */
var WindowObjectDescriptionBaseBehavior = {
    /**
     * Indicates whether the Window or the Dialog is active.
     * @param {boolean} [isActive] When provided, this method acts as a setter and sets the isActive value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isActive value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isActive: function (isActive) {
        return this._propertyHandler("Foreground", isActive, Convert.toBool);
    },

    /**
     * Indicates whether the Window or the Dialog has borders.
     * @param {boolean} [hasBorder] When provided, this method acts as a setter and sets the hasBorder value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored hasBorder value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    hasBorder: function (hasBorder) {
        return this._propertyHandler("HasBorder", hasBorder, Convert.toBool);
    },

    /**
     * Indicates whether the Window or the Dialog has a cation.
     * @param {boolean} [hasCaption] When provided, this method acts as a setter and sets the hasCaption value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored hasCaption value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    hasCaption: function (hasCaption) {
        return this._propertyHandler("HasCaption", hasCaption, Convert.toBool);
    },

    /**
     * Indicates whether the Window or the Dialog has a sizebox.
     * @param {boolean} [hasSizebox] When provided, this method acts as a setter and sets the hasSizebox value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored hasSizebox value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    hasSizebox: function (hasSizebox) {
        return this._propertyHandler("HasSizebox", hasSizebox, Convert.toBool);
    },

    /**
     * Indicates whether the Window or the Dialog has system menu.
     * @param {boolean} [hasSystemMenu] When provided, this method acts as a setter and sets the hasSystemMenu value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored hasSystemMenu value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    hasSystemMenu: function (hasSystemMenu) {
        return this._propertyHandler("HasSystemMenu", hasSystemMenu, Convert.toBool);
    },

    /**
     * Indicates whether the Window or the Dialog is MDI child window/dialog.
     * @param {boolean} [isMdiChildWindow] When provided, this method acts as a setter and sets the isMdiChildWindow value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isMdiChildWindow value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isMdiChildWindow: function (isMdiChildWindow) {
        return this._propertyHandler("IsMdiChildWindow", isMdiChildWindow, Convert.toBool);
    },

    /**
     * Indicates whether the Window or the Dialog is a popup window/dialog.
     * @param {boolean} [isPopupWindow] When provided, this method acts as a setter and sets the isPopupWindow value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isPopupWindow value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isPopupWindow: function (isPopupWindow) {
        return this._propertyHandler("IsPopupWindow", isPopupWindow, Convert.toBool);
    },

    /**
     * Indicates whether the Window or the Dialog is a tool window.
     * @param {boolean} [isToolWindow] When provided, this method acts as a setter and sets the isToolWindow value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isToolWindow value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isToolWindow: function (isToolWindow) {
        return this._propertyHandler("IsToolWindow", isToolWindow, Convert.toBool);
    },

    /**
     * Indicates whether the Window or the Dialog is maximizable.
     * @param {boolean} [isMaximizable] When provided, this method acts as a setter and sets the isMaximizable value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isMaximizable value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isMaximizable: function (isMaximizable) {
        return this._propertyHandler("Maximizable", isMaximizable, Convert.toBool);
    },

    /**
     * Indicates whether the Window or the Dialog is minimizable.
     * @param {boolean} [isMinimizable] When provided, this method acts as a setter and sets the isMinimizable value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isMinimizable value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isMinimizable: function (isMinimizable) {
        return this._propertyHandler("Minimizable", isMinimizable, Convert.toBool);
    },

    /**
     * Indicates whether the Window or the Dialog is top-most.
     * @param {boolean} [isTopmost] When provided, this method acts as a setter and sets the isTopmost value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isTopmost value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isTopmost: function (isTopmost) {
        return this._propertyHandler("Topmost", isTopmost, Convert.toBool);
    }
};

//Consts
var closeWiredName = "Close";
var maximizeWiredName = "Maximize";
var moveWiredName = "Move";
var resizeWiredName = "Resize";
var restoreWiredName = "Restore";
var activateWiredName = "Activate";
var minimizeWiredName = "Minimize";

/**
 * The behaviors of the Window base object with base functions: close, maximize, move, resize, restore
 * @ignore
 */
var WindowObjectBaseBehavior = {
    /**
     * @memberof WindowObjectBaseBehavior
     * @ignore
     */
    _methods: {
        /**
         * Closes this window or dialog box.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        close: {
            wiredName: closeWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, closeWiredName);
            }
        },

        /**
         * Maximizes this window or dialog box.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        maximize: {
            wiredName: maximizeWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, maximizeWiredName);
            }
        },

        /*jshint eqnull:true */
        /**
         * Move the Window/Dialog to a point.
         * @function
         * @param {Point | number} pointOrX If a Point object is passed, it will move to the point. If a number
         * is passed, it will be interpreted as a x-coord value.
         * @param {number} [y] If the first parameter is a full Point object, this parameter is ignored.
         * @returns {Promise<void>} a promise that is fulfilled after move operation ends.
         */
        move: {
            wiredName: moveWiredName,
            exec: function (pointOrX, y) {
                var pointObj;

                if (arguments.length === 0 || pointOrX === null)
                    throw new Error("You must pass x and y (number), or a point object");

                if (arguments.length == 1) {
                    if (typeof pointOrX !== "object")
                        throw new Error("You must pass x and y (number), or a point object");

                    pointObj = arguments[0];

                    if (pointObj.x == null || pointObj.y == null)
                        throw new Error("the argument does not contain the x or y or both");
                }
                else {
                    if (!(arguments[0] !== null && arguments[1] !== null))
                        throw new Error("You can't pass null to move()");

                    pointObj = {x: pointOrX, y: y};
                }

                return this._executeWithEvents(arguments, moveWiredName, Convert.toNumber(pointObj.x), Convert.toNumber(pointObj.y));
            }
        },

        /*jshint eqnull:true */
        /**
         * Resizes the Window to the specified dimensions.
         * @function
         * @param {Size | number} sizeOrWidth If a Size object is passed, it will resize according to the object. If a number
         * is passed, it will be interpreted as a width.
         * @param {number} [height] If the first parameter is a full Size object, this parameter is ignored.
         * @returns {Promise<void>} a promise that is fulfilled after resizing the window/dialog.
         */
        resize: {
            wiredName: resizeWiredName,
            exec: function (sizeOrWidth, height) {
                var sizeObj;

                if (arguments.length === 0 || sizeOrWidth === null)
                    throw new Error("You must pass width and height (number), or a size object");

                if (arguments.length == 1) {
                    if (typeof sizeOrWidth !== "object")
                        throw new Error("You must pass width and height (number), or a size object");

                    sizeObj = arguments[0];

                    if (sizeObj.width == null || sizeObj.height == null)
                        throw new Error("the argument does not contain the width or height keys or both");
                }
                else {
                    if (arguments[1] === null)
                        throw new Error("You can't pass null to resize()");

                    sizeObj = {width: sizeOrWidth, height: height};
                }

                return this._executeWithEvents(arguments, resizeWiredName, Convert.toNumber(sizeObj.width), Convert.toNumber(sizeObj.height));
            }
        },

        /**
         * Restore the Window/Dialog.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        restore: {
            wiredName: restoreWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, restoreWiredName);
            }
        }
    }
};

/**
 * The behaviors of the Window base object with extended functions: isMaximizable, isMinimizable, windowState, activate, minimize
 * @ignore
 */
var WindowObjectBaseExtendedBehavior = {
    /**
     * @memberof WindowObjectBaseExtendedBehavior
     * @ignore
     */
    _properties: {
        /**
         * Check if the window/dialog is maximizable.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean indicating if the window/dialog is maximizable or not.
         */
        isMaximizable: {
            wiredName: "Maximizable"
        },

        /**
         * Check if the window/dialog is minimizable.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean indicating if the window/dialog is minimizable or not.
         */
        isMinimizable: {
            wiredName: "Minimizable"
        },

        /**
         * Get the window/dialog state.
         * @function
         * @returns {Promise<WindowState>} a promise that is fulfilled with the window/dialog state. See {@link WindowState}
         */
        windowState: {
            type: 'enum',
            enumType: WindowState,
            enumName: 'WindowState',

            nonTranslatable: true,
            getter: function () {
                return this._getROProperties("Maximized", "Minimized").then(function (state) {
                    if (state[0] === true) {
                        return WindowState.maximized;
                    }
                    else if (state[1] === true) {
                        return WindowState.minimized;
                    }
                    else {
                        return WindowState.normal;
                    }
                });
            }
        }
    },

    /**
     * @memberof WindowObjectBaseExtendedBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Activate the Window/Dialog with a mouse button.
         * @function
         * @param {MouseButton} [button] the mouse button. See {@link MouseButton}
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         */
        activate: {
            wiredName: activateWiredName,
            exec: function (button) {
                if (button == null) {
                    return this._executeWithEvents(arguments, activateWiredName);
                }
                return this._executeWithEvents(arguments, activateWiredName, MouseButton._convert(button));
            }
        },

        /**
         * Minimize the Window/Dialog.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the minimize operation ends.
         */
        minimize: {
            wiredName: minimizeWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, minimizeWiredName);
            }
        }
    }
};

/**
 * The behaviors of the Window base object with extended functions: isActive, hasBorder, hasCaption, hasSizebox, 
 * hasSystemMenu, isMdiChildWindow, isPopupWindow, isToolWindow and isTopmost
 * @ignore
 */
var WindowBasePropsBehavior = {
    /**
     * @memberof WindowBasePropsBehavior
     * @ignore
     */
    _properties: {
        /**
         * Check if the window/dialog is active.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean indicating if the window/dialog is active or not.
         */
        isActive: {
            wiredName: "Foreground"
        },

        /**
         * Check if the window/dialog has border.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean indicating if the window/dialog has border or not.
         */
        hasBorder: {
            wiredName: "HasBorder"
        },

        /**
         * Check if the window/dialog has caption.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean indicating if the window/dialog has caption or not.
         */
        hasCaption: {
            wiredName: "HasCaption"
        },

        /**
         * Check if the window/dialog has size box.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean indicating if the window/dialog has size box or not.
         */
        hasSizebox: {
            wiredName: "HasSizebox"
        },

        /**
         * Check if the window/dialog has system menu.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean indicating if the window/dialog has system menu or not.
         */
        hasSystemMenu: {
            wiredName: "HasSystemMenu"
        },

        /**
         * Check if the window/dialog is a MDI child window.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean indicating if the window/dialog is a MDI child window or not.
         */
        isMdiChildWindow: {
            wiredName: "IsMdiChildWindow"
        },

        /**
         * Check if the window/dialog is a popup window.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean indicating if the window/dialog is a popup window or not.
         */
        isPopupWindow: {
            wiredName: "IsPopupWindow"
        },

        /**
         * Check if the window/dialog is a tool window.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean indicating if the window/dialog is a tool window or not.
         */
        isToolWindow: {
            wiredName: "IsToolWindow"
        },

        /**
         * Check if the window/dialog is top-most.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean indicating if the window/dialog is top-most or not.
         */
        isTopmost: {
            wiredName: "Topmost"
        }
    }
};

module.exports.WindowObjectBaseBehavior = WindowObjectBaseBehavior;
module.exports.WindowObjectBaseExtendedBehavior = WindowObjectBaseExtendedBehavior;
module.exports.WindowObjectDescriptionBaseBehavior = WindowObjectDescriptionBaseBehavior;
module.exports.WindowBasePropsBehavior = WindowBasePropsBehavior;