// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created 09/12/2015.
 * This file defines the behaviour of the drag and drop for test objects
 */
var Location = require("./location.js").Location;
var MouseButton = require("./clickbehavior.js").MouseButton;

/**
 * This is the behavior that needs to be use in case the test object supports drag & drop.
 * @ignore
 */
var DragAndDropBehavior = {
    /**
     * @ignore
     * @memberof DragAndDropBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Drags and drops a test object onto the specified target object according to the specified DragOptions behavior.
         * @function
         * @param {TestObject | Object} target The target object on which this object is dropped.
         * @param {Object} [dragOptions] The drag and drop behavior to apply.
         * @param {MouseButton} [dragOptions.button = MouseButton.left] The mouse button used to drag the object.
         * @param {Location} [dragOptions.dragLocation] The point on the source object where the drag operation begins.
         * @param {Location} [dragOptions.dropLocation] The point on the target object where the drag and drop operation ends.
         * @returns {Promise<void>} a promise that is fulfilled when the drop operation ends.
         */
        dragAndDropOn: function (target, dragOptions) {
            var func = function (id) {
                dragOptions = dragOptions || {};

                if (target == null) {
                    throw new Error("Drop target is mandatory");
                }

                if (!target._drop)
                    throw new Error("Object does not support drag & drop operations, and cannot be used as target");

                return this._drag(dragOptions).then(function () {
                    return target._drop(dragOptions, this._notifyAdditionalData.bind(this, id));
                }.bind(this));
            };
            var options = {sender: this, onError: false, calleeArguments: arguments, type: "TestObject"};
            return this.notifyWithEvents(func.bind(this), arguments, options);
        }
    },

    _helpers: {
        /**
         * @ignore
         */
        _drag: function (dragOptions) {
            var button = dragOptions.button || MouseButton.left;
            return this._executeCommand("Drag", Location(dragOptions.dragLocation), MouseButton._convert(button));
        },

        /**
         * @ignore
         */
        _drop: function (dragOptions, _notifyAdditionalData) {
            return this._executeCommand("Drop", Location(dragOptions.dropLocation), _notifyAdditionalData);
        }
    }
};

/**
 * @ignore
 */
var ItemDragAndDropBehavior = {
    /**
     * @ignore
     * @memberOf ItemDragAndDropBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Drags and drops a test object onto the specified target object according to the specified DragOptions behavior.
         * @function
         * @param {TestObject | Object} target The target object on which this object is dropped.
         * @param {Object} [dragOptions] The drag and drop behavior to apply.
         * @param {MouseButton} [dragOptions.button = MouseButton.left] The mouse button used to drag the object.
         * @param {Location} [dragOptions.dragLocation] The point on the source object where the drag operation begins.
         * @param {Location} [dragOptions.dropLocation] The point on the target object where the drag and drop operation ends.
         * @returns {Promise<void>} a promise that is fulfilled when the drop operation ends.
         */
        dragAndDropOn: function (target, dragOptions) {
            var func = function (id) {
                dragOptions = dragOptions || {};

                if (target == null) {
                    throw new Error("Drop target is mandatory");
                }

                if (!target._drop)
                    throw new Error("Object does not support drag & drop operations, and cannot be used as target");

                return this._drag(dragOptions).then(function () {
                    return target._drop(dragOptions, this._getOwnerTO()._notifyAdditionalData.bind(this._getOwnerTO(), id));
                }.bind(this));
            };
            var options = { sender: this, onError: false, calleeArguments: arguments, type: "TestObject" };
            return this._getOwnerTO().notifyWithEvents(func.bind(this), arguments, options);
        }
    },

    _helpers: {
        /**
        * @ignore
        */
        _drag: function (dragOptions) {
            var button = dragOptions.button || MouseButton.left;
            return this._getOwnerTO()._executeCommand("DragItem", this._getIdentifier(), MouseButton._convert(button));
        },

        /**
        * @ignore
        */
        _drop: function (dragOptions, _notifyAdditionalData) {
            var button = dragOptions.button || MouseButton.left;
            return this._getOwnerTO()._executeCommand("DropOnItem", this._getIdentifier(), MouseButton._convert(button), _notifyAdditionalData);
        }
    }
};

module.exports.DragAndDropBehavior = DragAndDropBehavior;
module.exports.ItemDragAndDropBehavior = ItemDragAndDropBehavior;
