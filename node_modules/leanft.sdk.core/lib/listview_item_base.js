// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/13/2016.
 */

var Convert = require("./convert.js").Convert;

/**
 * The methods of List View Item object
 * This base class is expected to be used by StdWin and WinForms
 * @ignore
 */
ListViewItemBaseBehavior = {
    /**
     * @ignore
     * @memberof ListViewItemBaseBehavior
     */
    _properties: {
        /**
         * The text value of the list item, or "" when empty..
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text of the item.
         */
        text: function () {
            return this._executeWithEventsOnItemOnError(this._ownerListViewBox._getItemText, this._identifier);
        },

        /**
         * Indicates whether the list item is in focus in a multiple selection list box.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with indication whether the item is focused.
         */
        isFocused: function () {
            return this._executeWithEventsOnItemOnError(this._ownerListViewBox._isItemFocused, this._identifier);
        },

        /**
         * Indicates whether the list item is selected.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with indication whether the item is selected or not.
         */
        isSelected: function () {
            return this._executeWithEventsOnItemOnError(this._ownerListViewBox._isItemSelected, this._identifier);
        },

        /**
         * The list item's state image index.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the list item's state image index..
         */
        state: function () {
            return this._executeWithEventsOnItemOnError(this._ownerListViewBox._getItemState, this._identifier);
        }
    },

    _methods: {
        /*jshint eqnull:true */
        /**
         * Returns the text value of the specified report-style (LVS_REPORT) list-view subitem.
         * @function
         * @param {number|string} indexOrName The 0-based numeric index or name of the list-view subitem you want to retrieve.
         * @returns {Promise<string>} a promise that is fulfilled with the text value of the subitem.
         */
        getSubItemText: function (indexOrName) {
            if (indexOrName == null)
                throw new Error("The parameter indexOrName cannot be null.");
            return this._executeWithEventsOnItemOnError(this._ownerListViewBox._getSubItemText, this._identifier, indexOrName);
        },

        /*jshint eqnull:true */
        /**
         * Sets the state of the check box icon of the specified item in the list.
         * @function
         * @param {number} state the 0-based state image index.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setItemState: function (state) {
            if (state == null)
                throw new Error("The parameter state cannot be null.");
            return this._executeWithEventsOnItem(this._ownerListViewBox._setItemState, this._identifier, Convert.toNumber(state));
        },

        /**
         * Clicks the state image icon.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        clickState: function () {
            return this._executeWithEventsOnItem(this._ownerListViewBox._setItemState, this._identifier, -1);
        },

        /**
         * Double-clicks state image icon.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        doubleClickState: function () {
            return this._executeWithEventsOnItem(this._ownerListViewBox._setItemState, this._identifier, -2);
        },

        /**
         * Activates the edit mode for the lists item label to enable renaming.
         * Remarks: This method only enables the item for renaming. To actually rename the item, set its value using EditorTO or EditTO test object, together with an applicable method.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        enableLabelEditing: function () {
            return this._executeWithEventsOnItem(this._ownerListViewBox._enableLabelEditingItem, this._identifier);
        }
    },

    _helpers: {
        _textRepresentation: null,
        _ownerListViewBox: null,
        _identifier: null,
        _executeWithEventsOnItem: null,
        _executeWithEventsOnItemOnError: null,

        /**
         * Get the identifier of the item.
         * @returns {number|string} the identifier of the item.
         * @ignore
         */
        _getIdentifier: function () {
            return this._identifier;
        },

        /**
         * Get the text representation of the item.
         * @returns {string} the text representation of the item.
         * @ignore
         */
        _getTextRepresentation: function () {
            return this._textRepresentation;
        },

        /**
         * Get the ListView of the item.
         * @returns {ListView} the ListView of the item.
         * @ignore
         */
        _getOwnerTO: function () {
            return this._ownerListViewBox;
        }
    }

};

module.exports.ListViewItemBaseBehavior = ListViewItemBaseBehavior;
