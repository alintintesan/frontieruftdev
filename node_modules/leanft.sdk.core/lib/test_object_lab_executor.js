// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var ArrayUtils = require("./object_utils.js").ArrayUtils;
var ObjectUtils = require("./object_utils.js").ObjectUtils;
var TestObjectExecutor = require("./test_object_executor.js");

function TestObjectLabExecutor(testObject, labCommandsMap){
    this._testObject = testObject;
    this._session = testObject._session;
    this._labCommandsMap = labCommandsMap;
}

/**
 * @ignore
 */
ObjectUtils.inherit(TestObjectLabExecutor, TestObjectExecutor, {

    /**
     * Handles all execution requests to engine.
     * The method will invoke the additional data event if result contains additionaldata.
     * @param {string} methodName
     * @returns Promise
     * @private
     * @ignore
     */
    executeCommand: function(methodName){
        if (!this._isLabOperation(methodName))
            return this.__super.executeCommand.apply(this, arguments);

        //removes the first argument since it is the methodName
        var args = ArrayUtils.toArray(arguments);
        args.splice(0,1);

        //checks if there is an additional data callback.
        var additionalDataHandler = ObjectUtils.identity;
        if(typeof(args[args.length -1]) === "function"){
            additionalDataHandler = args.pop();
        }

        var msg = {
            type: this._labCommandsMap[methodName].toString(),
            Operation: methodName,
            Parameters: args,
            Object: this._testObject._toJSON()
        };

        return this.__super._sendExecuteCommand.call(this, "ExecuteLabCommand", msg, additionalDataHandler);
    },

    _isLabOperation: function(methodName){
        if (this._labCommandsMap[methodName]){
            return true;
        }
    }
});


module.exports.TestObjectLabExecutor = TestObjectLabExecutor;