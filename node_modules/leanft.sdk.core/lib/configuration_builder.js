// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var nconf = require('nconf');

var ObjectUtils = require("./object_utils.js").ObjectUtils;
/**
 * Configuration builder
 *
 * @class
 * @ignore
*/
function ConfigurationBuilder() {
}

ConfigurationBuilder.prototype = {
    _config: undefined,
    _defaultConfig: {
        address: "ws://localhost:5095",
        mode: "replay",
        autoLaunch: true,
        executionSynchronization : undefined,
        ENVIRONMENT_ID: undefined,
        ENVIRONMENT_ADDRESS: undefined,
        ENVIRONMENT_DEVICE_BROWSER_TYPE: undefined,
        ENVIRONMENT_REPORT_CONTEXT: undefined,
        lwePath: undefined,
        report: {
            enabled: true,
            reportFolder: "RunResults",
            title: "Run Results",
            description: "",
            targetDirectory: ".",
            overrideExisting: true,
            reportLevel: "All",
            snapshotsLevel: 2 //off
        }
    },

    build: function(config, libraryMode){
        if(libraryMode) {
            return this._buildInLibraryMode(config);
        }

       if (ConfigurationBuilder.prototype._config) {
           this._updateCodeStore(config);
           ConfigurationBuilder.prototype._config = this._getSettingsObject();
           return ConfigurationBuilder.prototype._config;
       }

       nconf.add("code", { type: 'literal', store: config || {} });

       nconf.add("specialEnv", { type: 'literal', store:{}});
       this._handleSpecialEnvVars();

        // read configuration from argv, file, env
        nconf.argv();
        this._processArgv();

        var configFilePath = process.env.LFT_TEST_CONFIG;

        if (configFilePath) {
            nconf.file({file: configFilePath});
        }

        nconf.env();
        this._handleEnvPrefix();

        //add the default as the lowest priority store
        nconf.add("default", { type: 'literal', store: ConfigurationBuilder.prototype._defaultConfig});

        ConfigurationBuilder.prototype._config = this._getSettingsObject();

        return ConfigurationBuilder.prototype._config;
    },

    _updateCodeStore: function(config, prefix) {
        if (!config) {
            return;
        }

        nconf.stores.code.readOnly = false;
        Object.keys(config).forEach(function(key) {
            nconf.stores.code.merge(key, config[key]);
        });
    },

    _processArgv: function() {
        nconf.stores.argv.readOnly = false;
        var argvStore = nconf.stores.argv.store;
        Object.keys(ConfigurationBuilder.prototype._defaultConfig.report).forEach(function(name) {
            var argvVarValue = nconf.stores.argv.get(name);

            if (argvVarValue !== undefined) {
                nconf.stores.argv.set("report:" + name, argvVarValue);
            }
        });
    },

    _getSettingsObject: function() {
        var settingsObj = nconf.get();
        settingsObj.address = nconf.get('address') || nconf.get('LFT_ADDRESS');
        this._parseValuesOFSettings(settingsObj);

        return settingsObj;
    },

    _buildInLibraryMode: function (config) {
        var defaultsClone = ObjectUtils.extendAndPreserveUndefined({}, ConfigurationBuilder.prototype._defaultConfig);
        ConfigurationBuilder.prototype._config = ObjectUtils.extendAndPreserveUndefined(defaultsClone, config);

        // making full report copy, because ObjectUtils.extend just copies reference to the inner object
        ConfigurationBuilder.prototype._config.report = {};
        ObjectUtils.extendAndPreserveUndefined(ConfigurationBuilder.prototype._config.report,
            ConfigurationBuilder.prototype._defaultConfig.report);
        ObjectUtils.extendAndPreserveUndefined(ConfigurationBuilder.prototype._config.report, config.report);

        return ConfigurationBuilder.prototype._config;
    },

    _handleSpecialEnvVars: function() {
        var envTargetDir = process.env.LEANFT_REPORTS_TARGETDIR;
        if (envTargetDir) {
            nconf.stores.specialEnv.readOnly = false;
            nconf.stores.specialEnv.set("report:targetDirectory", envTargetDir);
        }
    },

    _handleEnvPrefix: function() {
        var envPrefix = "LFTSDK_";

        nconf.stores.env.readOnly = false;
        var envStore = nconf.stores.env.store;

        var prefixRegExp = new RegExp("^"+envPrefix, 'i');

        //remove all env vars which don't start with envPrefix
        Object.keys(envStore).forEach( function(envVar) {
            if(!envVar.match(prefixRegExp)) {
                nconf.stores.env.clear(envVar);
            }
        }, this);

        //remove the prefix part (by clearing each setting and setting it again without the prefix)
        Object.keys(envStore).forEach( function(envVar) {
            var envVarValue = nconf.stores.env.get(envVar);
            nconf.stores.env.clear(envVar);

            var newEnvVarName = envVar.replace(prefixRegExp, "");
            nconf.stores.env.set(newEnvVarName, envVarValue);
        });
    },

    _parseValuesOFSettings: function(settingsObj){
        Object.keys(settingsObj).forEach(function(settingKey){
            var value = settingsObj[settingKey];
            if(value == null)
                return;
            if(typeof(value) === "object"){
                this._parseValuesOFSettings(settingsObj[settingKey]);
                return;
            }

            if(typeof(value) !== "string")
                return;

            if(value.toLowerCase() === "true" ||
               value.toLowerCase() === "false"){
                   settingsObj[settingKey] = value.toLowerCase() === "true";
            }
        }.bind(this));
    }
};

module.exports.ConfigurationBuilder = ConfigurationBuilder;
