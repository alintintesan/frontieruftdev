// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/28/2016.
 */

var Utils = require("./object_utils.js").ObjectUtils;
var StringUtils = require("./object_utils.js").StringUtils;
var Convert = require("./convert.js").Convert;
var MouseButton = require("./clickbehavior.js").MouseButton;
/**
 * TreeViewDescriptionBaseBehavior - the description for a TreeView object of StdWin, WinForms, and WPF.
 * @memberof Core
 * @ignore
 */
var TreeViewDescriptionBaseBehavior = {
    /**
     * An array of all visible nodes of the tree view.
     * @param {string[]} [visibleNodes] When provided, this method acts as a setter and sets the visibleNodes value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored visibleNodes value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    visibleNodes: function (visibleNodes) {
        return this._propertyHandler("all items", visibleNodes, StringUtils.joinFunc("\n"), StringUtils.splitFunc("\n"));
    },

    /**
     * An array of all selected nodes in the list.
     * @param {string[]} [selectedNodes] When provided, this method acts as a setter and sets the selectedNodes value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedNodes value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedNodes: function (selectedNodes) {
        return this._propertyHandler("selection", selectedNodes, StringUtils.joinFunc("\n"), StringUtils.splitFunc("\n"));
    },

    /**
     * The number of nodes in the tree view.
     * @param {number} [nodesCount] When provided, this method acts as a setter and sets the nodesCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored nodesCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    nodesCount: function (nodesCount) {
        return this._propertyHandler("items count", nodesCount, Convert.toNumber);
    },
};

/**
 * The behaviors of the TreeView object of StdWin, WinForms, and WPF
 * @memberof Core
 * @ignore
 */
var TreeViewTOBaseBehavior = {
    _helpers: {
        /*jshint eqnull:true */
        /**
         * Activates a node. This function is relevant to StdWin and WinForms, but not for WPF.
         * @param {TreeViewNode|number|string} node The item to be activated.
         * The input can be the TreeViewNode, the 0-based index of the node, or the name/text of the node.
         * @param {MouseButton} [button = MouseButton.left] The button to activate. Default: the left button.
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         */
        _activateWithButton: function (node, button) {
            if (node == null)
                throw new Error("The node cannot be null.");

            var value = node;
            if (typeof node === 'object') {
                if (node._identifier == null) {
                    throw new Error("The identifier of the node cannot be null.");
                }
                value = node._identifier;
            }

            var mouse_button = button != null ? button : MouseButton.left;
            return this._executeWithEvents(arguments, "Activate", value, MouseButton._convert(mouse_button));
        },


        /*jshint eqnull:true */
        /**
         * Selects a node. This function is relevant to StdWin and WinForms, but not for WPF.
         * @param {TreeViewNode|number|string} node The item to be selected.
         * The input can be the TreeViewNode, the 0-based index of the node, or the name/text of the node.
         * @param {MouseButton} [button = MouseButton.left] The button to activate. Default: the left button.
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         */
        _selectWithButton: function (node, button) {
            if (node == null)
                throw new Error("The node cannot be null.");

            var value = node;
            if (typeof node === 'object') {
                if (node._identifier == null) {
                    throw new Error("The identifier of the node cannot be null.");
                }
                value = node._identifier;
            }

            var mouse_button = button != null ? button : MouseButton.left;
            return this._executeWithEvents(arguments, "Select", value, MouseButton._convert(mouse_button));
        },

        /**
         * Collapses a node.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         * @ignore
         */
        _collapseNode: function (identifier) {
            return this._executeNotWrapped(arguments, "Collapse", identifier);
        },

        /**
         * Expands a node.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         * @ignore
         */
        _expandNode: function (identifier) {
            return this._executeNotWrapped(arguments, "Expand", identifier);
        },

        /**
         * Expands all child nodes.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         * @ignore
         */
        _expandAll: function (identifier) {
            return this._executeNotWrapped(arguments, "ExpandAll", identifier);
        },

        /**
         * Activates the edit mode for the node label to enable renaming.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @ignore
         */
        _enableLabelEditingNode: function (identifier) {
            return this._executeNotWrapped(arguments, "EditLabel", identifier);
        },

        /**
         * Checks if the node is expanded.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the node is expanded or not.
         * @ignore
         */
        _isNodeExpanded: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "expanded");
        },

        /**
         * Gets the node's first child path.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<string>} a promise that is fulfilled with the node's first child path.
         * @ignore
         */
        _getNodeFirstChildPath: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "firstchild");
        },

        /**
         * Checks if the node has any children.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the node has children or not.
         * @ignore
         */
        _nodeHasChildren: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "haschildren");
        },

        /**
         * Gets the node's image index.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<number>} a promise that is fulfilled with the node's image index.
         * @ignore
         */
        _getNodeImageIndex: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "imageindex");
        },

        /**
         * Gets the node's next sibling path.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<string>} a promise that is fulfilled with the node's next sibling path.
         * @ignore
         */
        _getNodeNextSiblingPath: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "nextsibling");
        },

        /**
         * Gets the node's overlay image index.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<number>} a promise that is fulfilled with the node's overlay image index.
         * @ignore
         */
        _getNodeOverlayImageIndex: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "overlayimage");
        },

        /**
         * Gets the node's parent path.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<string>} a promise that is fulfilled with the node's parent path.
         * @ignore
         */
        _getNodeParentPath: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "parent");
        },

        /**
         * Gets the node's path.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<string>} a promise that is fulfilled with the node's path.
         * @ignore
         */
        _getNodePath: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "path");
        },

        /**
         * Checks if the node is selected.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the node is selected or not.
         * @ignore
         */
        _isNodeSelected: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "selected");
        },

        /**
         * Gets the node's state.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<number>} a promise that is fulfilled with the node's state.
         * @ignore
         */
        _getNodeState: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "state");
        },

        /**
         * Gets the node's text.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<string>} a promise that is fulfilled with the node's text.
         * @ignore
         */
        _getNodeText: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "text");
        },

        /**
         * Sets the state for a node.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * @param {number} state The state of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @ignore
         */
        _setNodeState: function (identifier, state) {
            return this._executeNotWrapped(arguments, "SetItemState", identifier, Convert.toNumber(state));
        }
    }
};

module.exports.TreeViewDescriptionBaseBehavior = TreeViewDescriptionBaseBehavior;
module.exports.TreeViewTOBaseBehavior = TreeViewTOBaseBehavior;
