// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
//Created on 18/10/2015.
// This file contain the base for all descriptions.

/*
 * @private
 */
var ObjectUtils = require("./object_utils.js").ObjectUtils;

/*
 * @private
 */
var Vertical = require("./visual_relation.js").Vertical;
/*
 * @private
 */
var Horizontal = require("./visual_relation.js").Horizontal;
/*
 * @private
 */
var Proximity = require("./visual_relation.js").Proximity;

/**
 * Description base
 * @class DescriptionBase
 * @ignore
 */
function DescriptionBase(){
}

/**
 * @ignore
 */
DescriptionBase.prototype = {
    _properties: null,
    _vri: undefined,
    leanFTType : {

    },


    /**
     * Sets a VisualRelation definition.
     * <br> The VRI definition helps to distinguish this object from other objects with otherwise identical descriptions, based on this object's visual relationship to another object in the application.
     * @param {Object[]} [value] Array that contains multiple VRI definitions for this test object.
     * @param {Object} value.anchor The related test object.
     * @param {Horizontal} [value.horizontal] The horizontal relation definition.
     * @param {boolean} [value.hInline = false] The horizontal inline definition.
     * @param {Vertical} [value.vertical]  The vertical relation definition.
     * @param {string} [value.vInline = false] The vertical inline definition.
     * @param {Proximity} [value.proximity] The proximity relation definition.
     * @memberof DescriptionBase
     */
    vri: function(value){
        if(value === undefined){
            return this._vri;
        }

        if(value === null) {
            delete this._vri;
        } else {
            this._vri = value;
        }
        return this;
    },

    _init: function(type){
        this.leanFTType = type;
        this._properties = {};
    },

    _toJSON: function(){
        return {
            Properties: this._transformSpecialValues(this._properties),
            Index: this._handleIndexDescription(),
            VRI: this._handleVriDescription()
        };
    },
    _transformSpecialValues: function(props){
        //flatten grouped properties
        var flattedProperties = {};
        Object.keys(props).forEach(function (key) {
            var value = props[key];

            if(!value._flat) {
                flattedProperties[key] = value;
            } else {
                ObjectUtils.extend(flattedProperties, value._flat());
            }
        });


        var transformedProperties = {};

        Object.keys(flattedProperties).forEach(function(key) {
            var value = flattedProperties[key];
            if(value instanceof RegExp){
                var pattern = value.toString();
                transformedProperties[key] = {
                    Type: "Regexp",
                    Regexp: pattern.slice(1,pattern.lastIndexOf("/"))  //performs trim(/) from the string
                };
                return;
            }

            transformedProperties[key] = value;
        });

        return transformedProperties;
    },

    _indexType: null,
    /*jshint eqnull:true */
    _handleIndexDescription: function () {
        if (this._index == null)
            return this._index;
        if(this._indexType == null || this._indexType.toLowerCase() == "index") {
            return this._index;
        }
        var value = {};
        value[this._indexType] = this._index;
        return value;
    },

    _validateRelation: function (vri) {
        // should we validate values ????
        if (vri.anchor == null){
            throw new Error("null anchor was passed in the anchor VRI field");
        }

        if (vri.horizontal == null && vri.vertical == null && vri.proximity == null){
            throw new Error("All TestObject relations passed in the TestObjectData VRI field are None");
        }

        var testObjectDescription = vri.anchor._description;
        if (testObjectDescription != null){
            if (testObjectDescription.vri() != null && testObjectDescription.vri().length > 0){
                throw new Error("Referenced test objects in the VRI field cannot have VRI data of their own");
            }
        }
    },

    _handleVriDescription: function () {
        if (this._vri == null)
            return this._vri;

        // convert to array if item is not array
        this._vri = [].concat(this._vri);

        if (this._vri.length === 0)
            return null;

        var vriArray = this._vri.map(function(vriRelation){
            this._validateRelation(vriRelation);

            return {
                TestObjectData: vriRelation.anchor._toJSON(),
                HorizontalRelation: Horizontal._convertHorizontalEnumToNativeValue(vriRelation.horizontal, vriRelation.hInline),
                VerticalRelation: Vertical._convertVerticalEnumToNativeValue(vriRelation.vertical, vriRelation.vInline),
                ProximityRelation: Proximity._convertProximityToNativeValue(vriRelation.proximity)
            };
        }, this);

        return vriArray;
    },

    _index: null,
    /**
     * The 0-based index of this object, relative to all other objects with an otherwise identical description.
     * @param {number} [value] When provided, this method acts as a setter and sets the index to the specified value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored index;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof DescriptionBase
     */
    index: function(value){
        if(value === undefined){
            //then it's a property getter
            return this._index;
        }
        //then it's a property setter - part of the builder pattern
        if(value === null) {
            //remove the property
            delete this._index;
        } else {
            //set the property value
            this._index = value;
        }
        return this; //builder pattern
    },
    /*jshint unused:true, eqnull:true */
    _defineByPropertyBag: function(supportedProps){
        if(supportedProps == null)
            return;
        for(var key in supportedProps){
            if (this[key] == null)
                throw new Error("ERROR: Property '" + key + "' is unsupported.");
            this[key].call(this, supportedProps[key]);
        }
    },

    /*jshint eqnull:true */
    _propertyHandler: function(propName, value, beforeSet, afterGet, convertBeforeSet) {
        beforeSet = beforeSet || ObjectUtils.identity;
        afterGet = afterGet || ObjectUtils.identity;
        convertBeforeSet = convertBeforeSet || ObjectUtils.identity;

        if(value === undefined) {
            //then it's a property getter
            var lowerCasePropertyName = propName.toLowerCase();
            var propKey = Object.keys(this._properties).filter(function(propertyKey) {
                return propertyKey.toLowerCase() === lowerCasePropertyName;
            });

            var propValue = propKey.length > 0 ? this._properties[propKey[0]] : undefined;
            if(propValue != null) {
                propValue = afterGet(propValue);
            }

            return propValue;
        }

        //property setter
        if(value !== null) {
            value = convertBeforeSet(value);
            value = beforeSet(value);
        }

        return this._insertValue(propName, value);
    },
    _simplePropertyHandler: function(propName, value) {
        return this._propertyHandler(propName, value);
    },

    /*jshint eqnull:true */
    _insertValue: function(propName, value) {
        if(value == null) {
            //remove the property
            delete this._properties[propName];
        } else {
            //set the property value
            this._properties[propName] = value;
        }

        return this; //builder pattern
    },

    _propertyFlatterHandler: function(propName, flatterCreateFunc, value, flatterArg){
        if(value === undefined) {
            //then it's a property getter - assumption flatters are never null or undefined
            return this._properties[propName];
        }

        //then it's a property setter - part of the builder pattern
        this._properties[propName] = new flatterCreateFunc(value, flatterArg);

        return this; //builder pattern
    }

};

module.exports = DescriptionBase;
