// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
// Created on 16/11/2015.

/**
* Possible values for the 'Position' type.
 * @typedef {Position} Position
 * @property {string} topLeft The top-left corner of this object.
 * @property {string} topRight The top-right corner of this object.
 * @property {string} center The center of this object.
 * @property {string} bottomLeft The bottom-left corner of this object.
 * @property {string} bottomRight The bottom-right corner of this object.
*/
var Position = {
    /**
     * The top-left corner of this object.
     */
    topLeft: "TopLeft",
    /**
     * The top-right corner of this object.
     */
    topRight: "TopRight",
    /**
     * The center of this object.
     */
    center: "Center",
    /**
     * The bottom-left corner of this object.
     */
    bottomLeft: "BottomLeft",
    /**
     * The bottom-right corner of this object.
     */
    bottomRight: "BottomRight",

    /**
     * @param {string} positionString
     * @returns {number}
     * @private
     * @ignore
     */
    _convert: function(positionString){
        return Object.keys(this).map(function(key){
            return key.toLowerCase();
        }).indexOf(positionString.toLowerCase());
    }
};

/**
* The coordinates of a point on the screen.
* @function
* @typedef {Object} Point
* @returns an instance of Point
* @ignore
* @private
*/
function Point(propBag) {
    propBag = propBag || {};
    return{
        Type: "Point",
        X: propBag.x || 0,
        Y: propBag.y || 0
    };
}

/**
 * The location (relative to an object in the application) at which to perform the operation.
 * @function
 * @typedef {Object} Location
 * @property {Position} anchor The position within the object from which the offset is taken.
 * @property {Object} offset The offset from the anchor position.
 * @property {number} offset.x The x-coordinate of the offset.
 * @property {number} offset.y The y-coordinate of the offset.
 * @returns an instance of Location
 */
function Location(locationPropBag){
    locationPropBag = locationPropBag || {};
    return {
        Type: "Location",
        Offset: Point(locationPropBag.offset),
        Anchor: Position._convert(locationPropBag.anchor || Position.center)
    };
}

/**
 * RectLocation creation function.
 * @param locationPropBag A property bag of offset and anchor.
 * @returns {{Type, Offset, Anchor}|a} an instance of RectLocation.
 * @constructor
 */
function RectLocation(locationPropBag){
    var location = Location(locationPropBag);
    location.Type = "LocationFromRect";
    return location;
}

module.exports.Location = Location;
module.exports.Point = Point;
module.exports.Position = Position;
module.exports.RectLocation = RectLocation;