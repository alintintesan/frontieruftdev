// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/02/2016.
 * This file contains the Desktop object, a virtual object to create
 * windows-based objects.
 *
 */

/** @private */
var Aut = require("./aut.js").Aut;
var ObjectUtils = require("./object_utils.js").ObjectUtils;
var NotifyEventsBehavior = require("./notify_events_behavior.js");

/**
 * A class to create Window or Dialog Test Object.
 * Note: To create a Window or Dialog Test Object, use Desktop.$
 * @constructor
 * @class Desktop
 */
function Desktop(session) {
    this._session = session;

    ObjectUtils.extend(this, NotifyEventsBehavior);
}

Desktop.prototype = {
    _session: null,
    _topLevelObjectTypes: ["window", "dialog", "internalframe"],
    _topLevelSpecialObjectTypes: {
        "oracle": ["flexfieldwindow","formwindow","logonwindow","navigatorwindow","notification","statusbar","applicationsession","calendar","listofvalues"],
        "ui automation": ["uiobject"]
    },

    /**
     * Creates a Window or Dialog Test Object based on the description.
     * This operation does not cause UFT Developer to search for the object in the AUT. UFT Developer interacts with the application only when a step runs that performs an operation on the AUT object.
     * @param {Object} description The description of the test object (Window or Dialog).
     * @returns {*} the new Window or Dialog test object with the provided description. An error will be thrown if the description is not a window or dialog.
     */
    $: function (description) {
        var technology = description.leanFTType.technology.toLowerCase();
        var leanFtType = description.leanFTType.leanftType.toLowerCase();

        if (this._topLevelObjectTypes.includes(leanFtType) || this._topLevelSpecialObjectTypes[technology].includes(leanFtType)) {
            var child = this._session.factory.create(description.leanFTType, description);
            child._parent = null;

            return child;
        } else {
            throw new Error("The passed description does not describe a top level object.");
        }
    },

    /**
     * Launches an AUT using the file name. To used this method, you must create an application allowlist file. For details, see Add SDK code to your tests in the LeanFT Help Center.
     * @param {string} fileName The name of the AUT file to launch. Specify only the name, or the full or relative path to the file.
     * @param {string[]} [args] A list of arguments.
     * @param {string} [workingDirectory] A working directory.
     * @returns {Promise<Object>} a promise that is fulfilled with the launched AUT
     */
    launchAut: function(fileName, args, workingDirectory) {
        var func = function(){
            var launchData = {
                "fileName": fileName,
                "args": args,
                "workingDirectory": workingDirectory
            };

            return this._session._communication.send("LaunchAut", launchData).then(function (launchResult) {
                if (!launchResult) {
                    throw new Error("launch result cannot be empty");
                }

                return new Aut(this._session, launchResult.AUTcookie, launchData);
            }.bind(this));
        };

        var options = { sender: this, onError: false, calleeArguments: arguments, type: "Desktop"};
        return this.notifyWithEvents(func, arguments, options);
    }
};

module.exports.Desktop = Desktop;
