// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/28/2016.
 */
var Convert = require("./convert.js").Convert;
var Utils = require("./object_utils.js").ObjectUtils;

/**
 * The methods of the TreeViewNodeBase object of StdWin, WinForms, and WPF
 * @memberof Core
 * @ignore
 */
var TreeViewNodeBase = {
    /**
     * @ignore
     * @memberof TreeViewNodeBase
     */
    _properties: {
        /**
         * Gets the text of the node.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text of the node.
         */
        text: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._getNodeText, this._identifier);
        },

        /**
         * Checks if the node is expanded.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the node is expanded or not.
         */
        isExpanded: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._isNodeExpanded, this._identifier);
        },

        /**
         * Checks if the node is selected.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the node is selected or not.
         */
        isSelected: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._isNodeSelected, this._identifier);
        },

        /**
         * Gets the state image index of the node.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the state image index of the node.
         */
        state: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._getNodeState, this._identifier);
        },

        /**
         * Gets the full path of the node's first child node as a semi-colon delimited string.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the full path of the node's first child node.
         */
        firstChildPath: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._getNodeFirstChildPath, this._identifier);
        },

        /**
         * Checks if the node has children.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the node has children or not.
         */
        hasChildren: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._nodeHasChildren, this._identifier);
        },

        /**
         * Gets the image index of the node.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the image index of the node.
         */
        imageIndex: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._getNodeImageIndex, this._identifier);
        },

        /**
         * Gets the full path of the node's next sibling node as a semi-colon delimited string.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the full path of the node's next sibling node.
         */
        nextSiblingPath: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._getNodeNextSiblingPath, this._identifier);
        },

        /**
         * Gets the index number of the current overlay image.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the index number of the current overlay image.
         */
        overlayImageIndex: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._getNodeOverlayImageIndex, this._identifier);
        },

        /**
         * Gets the full path of the node's parent node as a semi-colon delimited string.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the full path of the node's parent node.
         */
        parentPath: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._getNodeParentPath, this._identifier);
        },

        /**
         * Gets the full path of the node as a semi-colon delimited string.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the full path of the node.
         */
        path: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._getNodePath, this._identifier);
        }
    },

    /**
     * @ignore
     * @memberof TreeViewNodeBase
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the state of the check box icon of the specified node in the tree-view control.
         * @function
         * @param {number} state The state index.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        setNodeState: function (state) {
            if (state == null)
                throw new Error("The parameter state cannot be null.");
            return this._executeWithEventsOnItem(this._ownerTreeView._setNodeState, this._identifier, Convert.toNumber(state));
        },

        /**
         * Clicks the state icon.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        clickState: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._setNodeState, this._identifier, -1);
        },

        /**
         * Double-clicks the state icon.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        doubleClickState: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._setNodeState, this._identifier, -2);
        },

        /**
         * Activates the edit mode for the node in the tree-view control to enable renaming.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        enableLabelEditing: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._enableLabelEditingNode, this._identifier);
        },

        /**
         * Hides the sub-nodes of the specified node in the expanded tree-view control.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        collapse: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._collapseNode, this._identifier);
        },

        /**
         * Displays the hidden sub-nodes of the specified node in the tree-view control.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        expand: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._expandNode, this._identifier);
        },

        /**
         * Expands the node in the tree-view control and all of the nodes below it.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        expandAll: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._expandAll, this._identifier);
        }
    },

    _helpers: {
        _textRepresentation: null,
        _ownerTreeView: null,
        _identifier: null,
        _executeWithEventsOnItem: null,
        _executeWithEventsOnItemOnError: null,

        /**
         * Gets the identifier of the item.
         * @returns {number|string} the identifier of the item.
         * @ignore
         */
        _getIdentifier: function () {
            return this._identifier;
        },

        /**
         * Gets the text representation of the item.
         * @returns {string} the text representation of the item.
         * @ignore
         */
        _getTextRepresentation: function () {
            return this._textRepresentation;
        },

        /**
         * Gets the TreeView of the node.
         * @function
         * @returns {TreeView} the TreeView of the node.
         * @ignore
         */
        _getOwnerTO: function () {
            return this._ownerTreeView;
        }

    }
};

module.exports.TreeViewNodeBase = TreeViewNodeBase;
