// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/*
 * Created on 27/07/2016.
 */
var Convert = require("./convert.js").Convert;
/**
 * The horizontal location of the related test object relative to the object to identify.
 * See the UFT Developer Help Center for a diagram that illustrates the way LeanFT interprets visual relations and the boundaries that are used for determining in-line related objects.
 *
 * Possible values for the 'Horizontal' type.
 * @typedef {Horizontal} Horizontal
 * @property {string} left The related test object is located to the left of the test object to identify
 * @property {string} right The related test object is located to the right of the test object to identify
 */

var Horizontal = {
    /**
     * @type {string}
     * @memberof Horizontal
     */
    left: 'left',

    /**
     * @type {string}
     * @memberof Horizontal
     */
    right: 'right',

    /**
     * @ignore
     */
    _horizontalToNative : {
        left: 1,
        leftandinline: 2,
        right: 3,
        rightandinline :4
    },

    /**
     * @param relation
     * @param inline
     * @returns {*}
     * @ignore
     */
    /*jshint eqnull:true */
    _convertHorizontalEnumToNativeValue : function(relation, inline){
        if (relation == null)
            return relation;

        if (inline != null){
            inline = Convert.toBool(inline);

            if (inline)
                relation = relation + "andinline";
        }

        var horizontal =  this._horizontalToNative[relation.toLowerCase()];
        if (horizontal == null)
            throw new Error("Relation value is illegal, value = " + relation);

        return horizontal;
    }
};

/**
 * The vertical location of the related test object relative to the object to identify.
 * See the UFT Developer Help Center for a diagram that illustrates the way LeanFT interprets visual relations and the boundaries that are used for determining in-line related objects.
 *
 * Possible values for the 'Vertical' type.
 * @typedef {Vertical} Vertical
 * @property {string} above The related test object is located above the test object to identify.
 * @property {string} below The related test object is located below the test object to identify.
 */
var Vertical = {
    /**
     * @type {string}
     * @memberof Vertical
     */
    above : 'above',

    /**
     * @type {string}
     * @memberof Vertical
     */
    below : 'below',


    /**
     * @ignore
     */
     _verticalToNative : {
        above: 1,
        aboveandinline: 2,
        below: 3,
        belowandinline: 4
    },

    /**
     * @param relation
     * @param inline
     * @returns {*}
     * @ignore
     */
    /*jshint eqnull:true */
    _convertVerticalEnumToNativeValue : function(relation, inline){
        if (relation == null)
            return relation;

        if (inline != null){
            inline = Convert.toBool(inline);

            if (inline)
                relation = relation + "andinline";
        }

        var vertical =  this._verticalToNative[relation.toLowerCase()];

        if (vertical == null)
            throw new Error("Relation value is illegal, value = " + relation);

        return vertical;
    }
};


/**
 * The distance or hierarchical location of the related test object relative to the object to identify.
 *  See the LeanFT Help Center for more details on VRI.
 *
 * Possible values for the 'Proximity' type.
 * @typedef {Proximity} Proximity
 * @property {string} closestOnXAxis The related test object is the closest object on the x-axis to the test object to identify.
 * @property {string} closestOnYAxis The related test object is the closest object on the y-axis to the test object to identify.
 * @property {string} closestOnBothAxes The related test object is the closest object on both the x- and y- axes to the test object to identify.
 * @property {string} contains The related test object contains the test object to identify.
 */
var Proximity = {
    /**
     * @type {string}
     * @memberof Proximity
     */
    closestOnXAxis : 'closestOnXAxis',

    /**
     * @type {string}
     * @memberof Proximity
     */
    closestOnYAxis : 'closestOnYAxis',

    /**
     * @type {string}
     * @memberof Proximity
     */
    closestOnBothAxes : 'closestOnBothAxes',

    /**
     * @type {string}
     * @memberof Proximity
     */
    contains : 'contains',


    /**
     * @ignore
     */
    _proximityToNative : {
        closestonxaxis: 1,
        closestonyaxis: 2,
        closestonbothaxes: 3,
        contains :4
    },

    /**
     * @param relation
     * @param inline
     * @returns {*}
     * @ignore
     */
    /*jshint eqnull:true */
    _convertProximityToNativeValue : function(relation){
        if (relation == null)
            return relation;

        var proximity = this._proximityToNative[relation.toLowerCase()];

        if (proximity == null)
             throw new Error("Relation value is illegal, value = " + relation);

        return proximity;
    }
};



module.exports.Horizontal = Horizontal;
module.exports.Vertical = Vertical;
module.exports.Proximity = Proximity;

