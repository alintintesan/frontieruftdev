// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/17/2016.
 */

//Consts
var dateWiredName = "date";
var setDateRangeWiredName = "SetDateRange";

/**
 * The behaviors of the Calendar object
 * @ignore
 */
var CalendarTOBaseBehavior = {
    /**
     * @ignore
     * @memberof CalendarTOBaseBehavior
     */
    _properties: {
        /*jshint eqnull:true */
        /**
         * Gets the date of this calendar.
         * @function
         * @returns {Promise<Date>} a promise that is fulfilled with the date of this calendar.
         */
		 date: {
			type: 'date',
            wiredName: dateWiredName,
			getter: function () {
				return this._getROProperty(dateWiredName, arguments).then((function (res) {
					if (res == null) {
						throw new Error("Can't determine the current date of the test object.");
					}

					if (res == this._notSupport) {
						throw new Error("Date is not supported for this test object.");
					}

					return CalendarConverter.isNativeSingleDateRangeFormatWithBrackets(res) ? CalendarConverter.parseNativeSingleDateRangeFormatWithBrackets(res).startDate : CalendarConverter.parseNativeSingleDateFormat(res);
				}).bind(this));
            }
        },

        /*jshint eqnull:true */
        /**
         * Gets the time of this calendar.
         * @function
         * @returns {Promise<Date>} a promise that is fulfilled with the time of this calendar. Use time methods to get the time of a date.
         */
        time: {
            type: 'time',
            getter: function () {
                return this._getROProperty("time", arguments).then((function (res) {
                    if (res == null) {
                        throw new Error("Can't determine the current time of the test object.");
                    }
                    if (res == this._notSupport) {
                        throw new Error("Time is not supported for this test object.");
                    }
                    return CalendarConverter.parseNativeTimeFormat(res);
                }).bind(this));
            }
        }
    },

    /**
     * @ignore
     * @memberof CalendarTOBaseBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the specified date.
         * @function
         * @param {Date} date The date to set.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setDate: function (date) {
            if (date == null)
                throw new Error("parameter date can not be null");

            var originalArgs = arguments;

            return this._getROPropertyWithoutEvents("date").then((function (res) {
                if (res != null && res == this._notSupport) {
                    throw new Error("Date is not supported for this test object.");
                }

                return this._executeWithEvents(originalArgs, "SetDate", this.convertToNativeSingleDateFormat(date));
            }).bind(this));
        },

        /*jshint eqnull:true */
        /**
         * Sets the specified time.
         * @function
         * @param {Date} time The time to set.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setTime: function (time) {
            if (time == null)
                throw new Error("parameter time can not be null");

            var originalArgs = arguments;
            return this._getROPropertyWithoutEvents("time").then((function (res) {
                if (res != null && res == this._notSupport) {
                    throw new Error("Time is not supported for this test object.");
                }
                return this._executeWithEvents(originalArgs, "SetTime", CalendarConverter.convertToNativeTimeFormat(time));
            }).bind(this));
        }
    },

    _helpers:{
        /**
         * @ignore
         */
        _notSupport: "Unavailable",

        /**
         * Converts a Date to a string in d-MMM-yyy format.
         * @param {Date} date
         * @ignore
         */
        convertToNativeSingleDateFormat: function (date) {
            return CalendarConverter.convertToNativeSingleDateFormat(date);
        }
    }
};

/**
 * The behaviors of the Calendar object with extended functions: dateRange, setDateRange, isRangeSelected.
 * @ignore
 */
var CalendarTOBaseExtendedBehavior = {
    /**
     * @ignore
     * @memberof CalendarTOBaseExtendedBehavior
     */
    _properties: {
        /*jshint eqnull:true */
        /**
         * Gets the range of dates selected in this calendar.
         * @function
         * @returns {Promise<Object>} a promise that is fulfilled with the range of dates selected in this calendar.
         */
        dateRange: {
            type: 'daterange',
            wiredName: dateWiredName,
            getter: function () {
                return this._getROProperty(dateWiredName, arguments).then((function (res) {
                    if (res == null) {
                        throw new Error("Can't determine the current date of the test object.");
                    }
                    if (res == this._notSupport) {
                        throw new Error("DateRange is not supported for this test object.");
                    }
                    if (!CalendarConverter.isNativeSingleDateRangeFormatWithBrackets(res)) {
                        var dateTime = CalendarConverter.parseNativeSingleDateFormat(res);
                        var range = {startDate: dateTime, endDate: dateTime};
                        return range;
                    }
                    else {
                        return CalendarConverter.parseNativeSingleDateRangeFormatWithBrackets(res);
                    }
                }).bind(this));
            }
        },

        /*jshint eqnull:true */
        /**
         * Checks if a range of dates is currently selected in this calendar.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether a range of dates is currently selected in this calendar or not.
         */
        isRangeSelected: {
            wiredName: dateWiredName,
            getter: function () {
                return this._getROProperty(dateWiredName, arguments).then((function (res) {
                    if (res == null) {
                        throw new Error("Can't determine the current date of the test object.");
                    }
                    if (res == this._notSupport) {
                        throw new Error("Date is not supported for this test object.");
                    }
                    return CalendarConverter.isNativeSingleDateRangeFormatWithBrackets(res);
                }).bind(this));
            }
        }
    },

    /**
     * @ignore
     * @memberof CalendarTOBaseBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the specified date range.
         * @function
         * @param {Object | Date} dateRangeOrStartDate The date range or the start date. If it is the dateRange, the start date is in the first element and the end date is in the second element.
         * @param {Date} [endDate] The end date of the range.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setDateRange: {
            wiredName: setDateRangeWiredName,
            exec: function (dateRangeOrStartDate, endDate) {
                if (dateRangeOrStartDate == null)
                    throw new Error("parameter dateRangeOrStartDate can not be null");

                var startDate = dateRangeOrStartDate;

                if (dateRangeOrStartDate.startDate != null) {
                    startDate = dateRangeOrStartDate.startDate;
                    endDate = dateRangeOrStartDate.endDate;
                }

                if (startDate == null)
                    throw new Error("parameter startDate can not be null");

                if (endDate == null)
                    throw new Error("parameter endDate can not be null");

                var originalArgs = arguments;
                return this._getROPropertyWithoutEvents("date").then((function (res) {
                    if (res != null && res == this._notSupport) {
                        throw new Error("Date is not supported for this test object.");
                    }
                    var dateRangeToString = CalendarConverter.convertToNativeSingleDateRangeFormatWithBrackets({ startDate: startDate, endDate: endDate });
                    return this._executeWithEvents(originalArgs, setDateRangeWiredName, dateRangeToString);
                }).bind(this));
            }
        }
    },

    _helpers: {
        /**
         * @ignore
         */
        _notSupport: "Unavailable"
    }
};

var CalendarConverter = {
    _monthAbbreviations: new Array('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'),

    _getMonthName: function (date) {
        return CalendarConverter._monthAbbreviations[date.getMonth()];
    },

    _getMonthFromName: function (name) {
        return CalendarConverter._monthAbbreviations.indexOf(name);
    },

    /**
     * Checks if a string contains only a single date representation.
     * @param {string} nativeDate The checked string.
     * @returns {boolean}
     * @ignore
     */
    isNativeSingleDateFormat: function (nativeDate) {
        if (nativeDate.indexOf("; ") >= 0 || nativeDate.indexOf(" - ") >= 0)
            return false;
        var re = new RegExp("[0-9]+-[A-Z][a-z][a-z]-[0-9]+");
        return re.test(nativeDate);
    },

    /**
     * Checks if a string contains only a single date range representation.
     * @param {string} nativeDateRange The checked string.
     * @returns {boolean}
     * @ignore
     */
    isNativeSingleDateRangeFormat: function (nativeDateRange) {
        if (nativeDateRange.indexOf("; ") >= 0)
            return false;
        var re = new RegExp("[0-9]+-[A-Z][a-z][a-z]-[0-9]+ - [0-9]+-[A-Z][a-z][a-z]-[0-9]+");
        return re.test(nativeDateRange);
    },

    /**
     * Checks if a string contains multiple date range representation.
     * @param {string} nativeDateRanges The checked string.
     * @returns {boolean}
     * @ignore
     */
    isNativeMultipleDateRangesFormat: function (nativeDateRanges) {
        if (nativeDateRanges.indexOf("; ") < 0)
            return false;
        var splittedDatesStrings = nativeDateRanges.split("; ");
        return splittedDatesStrings.every(function (dateString) {
            return CalendarConverter.isNativeSingleDateFormat(dateString) || CalendarConverter.isNativeSingleDateRangeFormat(dateString);
        });
    },

    /**
     * Checks if a string is in date range format.
     * @param {string} nativeDateRange The checked string.
     * @returns {boolean}
     * @ignore
     */
    isNativeSingleDateRangeFormatWithBrackets: function (nativeDateRange) {
        var re = new RegExp("\[[0-9]+-[A-Z][a-z][a-z]-[0-9]+ - [0-9]+-[A-Z][a-z][a-z]-[0-9]+\]");
        return re.test(nativeDateRange);
    },

    /*jshint eqnull:true */
    /**
     * Parses a string into the Date object.
     * @param {string} nativeDate The string to parse. The default format is "d-MMM-yyyy", based on the separator.
     * @param {string} [separator = '-'] The separator.
     * @returns {Date}
     * @ignore
     */
    parseNativeSingleDateFormat: function (nativeDate, separator) {
        if (separator == null)
            separator = '-';
        var parts = nativeDate.split(separator);
        return new Date(parts[2], CalendarConverter._getMonthFromName(parts[1]), parts[0]);
    },

    /**
     * Parses a date range formatted string into the Date Range object.
     * @param {string} nativeDateRange The string to parse. Sample: [10-Mar-2016 - 11-Apr-2017]
     * @returns {Object} DateRange object
     * @ignore
     */
    parseNativeSingleDateRangeFormatWithBrackets: function (nativeDateRange) {
        if (!CalendarConverter.isNativeSingleDateRangeFormatWithBrackets(nativeDateRange)) {
            throw new Error("Argument is not in correct format.");
        }
        //trim "[" and "]";
        //nativeDateRange = nativeDateRange.substr(1).slice(0, -1);
        nativeDateRange = nativeDateRange.slice(1, -1);

        return CalendarConverter.parseNativeSingleDateRangeFormatToDateRange(nativeDateRange);
    },

    /**
     * Parses a date range formatted string into the Date Range object.
     * @param {string} nativeDateRange The string to parse. Sample: 10-Mar-2016 - 11-Apr-2017
     * @returns {Object} the DateRange object.
     * @ignore
     */
    parseNativeSingleDateRangeFormat: function (nativeDateRange) {
        if (!CalendarConverter.isNativeSingleDateRangeFormat(nativeDateRange)) {
            throw new Error("Argument is not in correct format.");
        }

        return CalendarConverter.parseNativeSingleDateRangeFormatToDateRange(nativeDateRange);
    },

    /**
     * Parses a native UFT WPF calendar string representing multiple date ranges to the array of DateRanges elements.
     * @param {string} nativeDateRanges The native date format string to parse.
     * @returns {Object} the DateRanges object.
     * @ignore
     */
    parseNativeDateRangesFormat: function (nativeDateRanges) {
        var splittedDatesStrings = nativeDateRanges.split("; ");
        return splittedDatesStrings.map(function (dateString) {
            if (CalendarConverter.isNativeSingleDateFormat(dateString)) {
                var dateToAdd = CalendarConverter.parseNativeSingleDateFormat(dateString);
                return { startDate: dateToAdd, endDate: dateToAdd };
            }
            return CalendarConverter.parseNativeSingleDateRangeFormat(dateString);
        });
    },

    /**
     * Parses a string into the Date Range object.
     * @param {string} nativeDateRange The string to parse. Sample: 10-Mar-2016 - 11-Apr-2017
     * @returns {Object} the DateRange object.
     * @ignore
     */
    parseNativeSingleDateRangeFormatToDateRange: function (nativeDateRange) {
        var indexOfSeparator = nativeDateRange.indexOf(" - ");
        var startDateString = nativeDateRange.substring(0, indexOfSeparator).trim();
        var endDateString = nativeDateRange.substring(indexOfSeparator + 3).trim();

        var dateRange = { startDate: CalendarConverter.parseNativeSingleDateFormat(startDateString), endDate: CalendarConverter.parseNativeSingleDateFormat(endDateString) };
        return dateRange;
    },

    /**
     * Converts a date range object into a string.
     * @param {Object} dateRange The date range object.
     * @returns {string} a date range object in a string inside brackets. Sample: [10-Mar-2016 - 11-Apr-2017]
     * @ignore
     */
    convertToNativeSingleDateRangeFormatWithBrackets: function (dateRange) {
        return "[" + CalendarConverter.convertToNativeSingleDateRangeFormat(dateRange) + "]";
    },

    /**
     * Converts a date range object into a string without brackets.
     * @param {Object} dateRange The date range object.
     * @returns {string}  a date range object in a string without brackets. Sample: 10-Mar-2016 - 11-Apr-2017
     * @ignore
     */
    convertToNativeSingleDateRangeFormat: function (dateRange) {
        return CalendarConverter.convertToNativeSingleDateFormat(dateRange.startDate) + " - " + CalendarConverter.convertToNativeSingleDateFormat(dateRange.endDate);
    },

    /**
     * Parses a string into a Date object containing time information.
     * @param {string} nativeTime The input string. The format is "HH:mm:ss".
     * @returns {Date} the date object containing time information.
     * @ignore
     */
    parseNativeTimeFormat: function (nativeTime) {
        var parts = nativeTime.split(':');

        var date = new Date();
        date.setHours(parts[0]);
        date.setMinutes(parts[1]);
        date.setSeconds(parts[2]);
        return date;
    },

    /**
     * Converts a Date object containing time information to a string.
     * @param {Date} date The Date object.
     * @returns {string} the time in string format. Sample: 13:14:15
     * @ignore
     */
    convertToNativeTimeFormat: function (date) {
        function pad(x) {
            return x <= 9 ? '0' + x : x;
        }
        return pad(date.getHours()) + ':' + pad(date.getMinutes()) + ':' + pad(date.getSeconds());
    },

    /**
     * Parses a string to a Date object. If the string is a date range, gets the startDate.
     * @param {string} value The input string.
     * @returns {Date}
     * @ignore
     */
    convertStringToDate: function (value) {
        if (CalendarConverter.isNativeSingleDateRangeFormatWithBrackets(value)) {
            return CalendarConverter.parseNativeSingleDateRangeFormatWithBrackets(value).startDate;
        }
        else {
            return CalendarConverter.parseNativeSingleDateFormat(value);
        }
    },

    /*jshint eqnull:true */
    /**
     * Converts a Date to a string.
     * @param {Date} date
     * @param {string} [separator = '-'] The separator string
     * @returns {string} a date in string format. Sample: 14-Apr-2017
     * @ignore
     */
    convertToNativeSingleDateFormat: function (date, separator) {
        if (separator == null)
            separator = '-';
        return "" + date.getDate() + separator + CalendarConverter._getMonthName(date) + separator + date.getFullYear();
    }
};

/**
 * Indicates whether a date entity refers to a single date or to one or more date ranges.
 * @typedef {DateFormatType} DateFormatType
 * @property {string} none The date is an empty string.
 * @property {string} singleDate The date string represents a single date string For example: "20-Mar-2015".
 * @property {string} singleDateRange The date string represents a single range of dates For example: "20-Mar-2015 - 22-Mar-2015".
 * @property {string} multipleDateRanges The date string represents multiple date ranges For example: "20-Mar-2015 - 22-Mar-2015; 25-Mar-2015; 28-Mar-2015 - 29-Mar-2015".
*/
var DateFormatType = {
    /**
     * @type {string}
     */
    none: "none",
    /**
     * @type {string}
     */
    singleDate: "singleDate",
    /**
     * @type {string}
     */
    singleDateRange: "singleDateRange",
    /**
     * @type {string}
     */
    multipleDateRanges: "multipleDateRanges"
};

module.exports.DateFormatType = DateFormatType;
module.exports.CalendarConverter = CalendarConverter;
module.exports.CalendarTOBaseBehavior = CalendarTOBaseBehavior;
module.exports.CalendarTOBaseExtendedBehavior = CalendarTOBaseExtendedBehavior;
