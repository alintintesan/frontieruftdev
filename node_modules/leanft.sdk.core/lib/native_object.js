// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 04/01/2016.
 * This file contains the implementation of the NativeObject which is a proxy to a real native object.
 * To get a native object from a test object, use the NativeObject method of the test object.
 */

var TestObjectUtilsBehavior = require("./testobject_base.js").TestObjectUtilsBehavior;
var NotifyEventsBehavior = require("./notify_events_behavior.js");
var ObjectUtils = require("./object_utils.js").ObjectUtils;
var ArrayUtils = require("./object_utils.js").ArrayUtils;
var Logger = require("./logger.js").Logger;

/*jshint eqnull:true */
/**
 * Creates a NativeObject with the given proxy-ID.
 * @param {number} proxyId The proxy-ID returned from the engine, representing an instance of a native object stored on the engine side.
 * @param {Object} session The current session.
 * @constructor
 */
function NativeObject(proxyId, session) {
    this._logger = new Logger("NativeObject");

    if(proxyId == null) {
        throw new Error("proxyId must have a value");
    }
    if(session == null){
        throw new Error("The communication channel is mandatory for creating NativeObject");
    }

    this._session = session;
    this._proxyId = proxyId;

    ObjectUtils.extend(this, TestObjectUtilsBehavior);
    ObjectUtils.extend(this, NotifyEventsBehavior);
}

NativeObject.prototype = {
    _proxyId: null,
    _session: null,
    _logger: null,

    /**
     * Invokes a method on the native object.
     * All arguments passed after the name argument is passed as the arguments of the invoked method.
     * @param {string} name The name of the method to invoke.
     * @returns {Promise<*>} a promise that is fulfilled with the result of the method invocation.
     * @private
     */
    __invokeMethod__: function(name) {
        var args = ["InvokeMethod"].concat(ArrayUtils.toArray(arguments));
        return this._invokeHelper.apply(this, args);
    },

    /**
     * Returns the value of the desired property from the native object.
     * @param {string} name The name of the property.
     * @returns {Promise<*>} a promise that is fulfilled with the value of the property.
     * @private
     */
    __getProperty__: function(name) {
        return this._invokeHelper("PropertyGet", name);
    },

    /**
     * Sets the value of the desired property in the native object.
     * @param {string} name The name of the property.
     * @param {*} value The value to set the property to.
     * @returns {Promise<void>} a promise that is fulfilled when the property value is set.
     * @private
     */
    __setProperty__: function(name, value) {
        return this._invokeHelper("PropertySet", name, value);
    },

    /**
     * Returns the value of the native object at the requested index.
     * @param {number} index The index to return its value.
     * @returns {Promise<*>} a promise that is fulfilled with the value of the native object at the requested index.
     * @private
     */
    __getItem__: function(index) {
        var args = ["IndexerGet", "indexerGet"].concat(ArrayUtils.toArray(arguments));
        return this._invokeHelper.apply(this, args);
    },

    /**
     * Sets the value of the native object at the passed index.
     * @returns {Promise<void>} a promise that is fulfilled when the value is set.
     * @private
     */
    __setItem__: function() {
        var args = ["IndexerSet", "indexerSet"].concat(ArrayUtils.toArray(arguments));
        return this._invokeHelper.apply(this, args);
    },

    /**
     * Returns a string array representing all members of the native object.
     * @returns {Promise<string[]>} a promise that is fulfilled with a string array representing all members of the native object.
     */
    MEMBERS: function() {
        var func = function() {
            return this._getMembers();
        };
        var options = { sender: this, onError:true, calleeArguments: arguments, type: "NativeObject", name :"MEMBERS"};
        return this.notifyWithEvents(func, arguments, options);
    },

    _getMembers : function(){
        return this._session._communication.send("GetNativeObjectMethods",{
            ServerCookie: this._proxyId
        }).then(function(data) {
            if(!data) //we expect to receive an object here
                return null;

            return this._getResultValue(data.Result);
        }.bind(this));
    },

    _invokeHelper: function(type, name) {
        var args = Array.prototype.map.call(arguments,function(arg){
            return arg._toJSON ? arg._toJSON() : arg;
        });

        args.splice(0,2);

        var func = function() {
            var info = {
                Operation: name,
                Parameters: args,
                ServerCookie: this._proxyId,
                InvocationType: type
            };

            return this._session._communication.send("InvokeOnNativeObject",info).then(function(data) {
                if(!data) //we expect to receive an object here
                    return null;

                return this._getResultValue(data.Result);
            }.bind(this));
        };
        var options = { sender: this, onError:false, calleeArguments: arguments, type: "NativeObject", name: name};
        return this.notifyWithEvents(func, arguments, options);
    },

    _fillKeysFromMembers: function() {
        return this._getMembers().then(function(members) {
            members.forEach(function(member) {
                var indexOfBrackets = member.indexOf("(");
                if(indexOfBrackets !== -1) {
                    //member is a method
                    var methodName = member.substring(0, indexOfBrackets);
                    this[methodName] = this.__invokeMethod__.bind(this, methodName);
                    return;
                }

                //member is a property
                var isReadOnly = member.match(/\[ReadOnly]$/) != null;
                member = member.replace(" [ReadOnly]", "");
                member = member.trim();

                Object.defineProperty(this, member, {
                    get: this.__getProperty__.bind(this, member),
                    set: !isReadOnly ? this.__setProperty__.bind(this, member) : function(){
                        throw new Error("the " + member + " property is read only!");
                    },
                    enumerable: true
                });
            }, this);

            return this;

        }.bind(this));
    },

    _toJSON: function() {
        return {
            Type: "DynamicProxy",
            ServerCookie: this._proxyId
        };
    }

};


module.exports = NativeObject;