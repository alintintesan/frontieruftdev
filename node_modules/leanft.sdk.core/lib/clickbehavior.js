// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
// Created on 16/11/2015.

 
/** @private */
var Location = require("./location.js").Location;
/** @private */

/**
* Possible values for the 'MouseButton' type.
 * @typedef {MouseButton} MouseButton
 * @property {string} left Left mouse button
 * @property {string} right Right mouse button
 * @property {string} middle Middle mouse button
*/
var MouseButton = {
    /**
     * @type {string}
     * @memberof MouseButton
     */
    left: "left",
	/**
     * @type {string}
     */
    right: "right",
	/**
     * @type {string}
     */
    middle: "middle",

    /**
     * @ignore
     */
    _convertToRuntime: {
        left: 0,
        right: 1,
        middle: 2
    },

    /**
     * @param {MouseButton} button
     * @returns {*}
     * @ignore
     */
    _convert: function(button) {
        return MouseButton._convertToRuntime[button.toLowerCase()];
    }
};

//Consts
var clickWiredName = "Click";
var doubleClickWiredName = "DblClick";

/**
 * This provides methods used to implement clicks on this object using the definitions from the supplied args object.
 * @ignore
 */
var ClickBehavior = {
    /**
     * @ignore
     * @memberof ClickBehavior
     */
    _methods: {
        /**
         * Clicks on this object using the definitions from the supplied args object.
         * If you do not provide the args object, the click is performed in the center of the object using the left mouse button.
         * @function
         * @param {Object} [args] The arguments for the click operation.
         * @param {MouseButton} [args.button = MouseButton.left] The mouse button to use for the click.
         * @param {Position} [args.anchor = Position.center] The position within the object from which the offset is taken.
         * @param {Object} [args.offset] The offset from the anchor position.
         * @param {number} [args.offset.x = 0] The x-coordinate of the offset.
         * @param {number} [args.offset.y = 0] The y-coordinate of the offset.
         * @returns {Promise<void>} a promise that is fulfilled when the click operation ends.
         */
        click: {
            wiredName: clickWiredName,
            exec: function (args) {
                if (!args) {
                    return this._executeWithEvents(arguments, clickWiredName, -9999, -9999, MouseButton._convert(MouseButton.left));
                } else {
                    var button = args.button || MouseButton.left;
                    return this._executeWithEvents(arguments, clickWiredName, Location(args), MouseButton._convert(button));
                }
            }
        }
    }
};

/**
 * This provides methods used to implement double-clicks on this object using the definitions from the supplied args object.
 * @ignore
 */
var DoubleClickBehavior = {
    /**
     * @ignore
     * @memberof DoubleClickBehavior
     */
    _methods: {
        /**
         * Clicks on this object using the definitions from the supplied args object.
         * If you do not provide the args object, the double-click is performed in the center of the object using the left mouse button.
         * @function
         * @param {Object} [args] The arguments for the double-click operation.
         * @param {MouseButton} [args.button = MouseButton.left] The mouse button to use for the double-click.
         * @param {Position} [args.anchor = Position.center] The anchor location within the object.
         * @param {Object} [args.offset] The offset from the anchor position.
         * @param {number} [args.offset.x = 0] The x-coordinate of the offset.
         * @param {number} [args.offset.y = 0] The y-coordinate of the offset.
         * @returns {Promise<void>} a promise that is fulfilled when the double-click operation ends.
         */
        doubleClick: {
            wiredName: doubleClickWiredName,
            exec: function (args) {
                args = args || {};
                var button = args.button || MouseButton.left;

                return this._executeWithEvents(arguments, doubleClickWiredName, new Location(args), MouseButton._convert(button));
            }
        }
    }
};

module.exports.MouseButton = MouseButton;
module.exports.ClickBehavior = ClickBehavior;
module.exports.DoubleClickBehavior = DoubleClickBehavior;