// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var ArrayUtils = require("./object_utils.js").ArrayUtils;
var ObjectUtils = require("./object_utils.js").ObjectUtils;

function TestObjectExecutor(testObject){
    this._testObject = testObject;
    this._session = testObject._session;
}

TestObjectExecutor.prototype = {
    _testObject: null,
    _session: null,

    /**
     * Handles all execution requests to engine.
     * The method will invoke the additional data event if result contains additionaldata.
     * @param {string} methodName
     * @returns Promise
     * @private
     * @ignore
     */
    executeCommand: function(methodName){
        //removes the first argument since it is the methodName
        var args = ArrayUtils.toArray(arguments);
        args.splice(0,1);

        //checks if there is an additional data callback.
        var orgAdditionalDataHandler;
        if(typeof(args[args.length -1]) === "function"){
            orgAdditionalDataHandler = args.pop();
        }

        var _this = this;
        additionalDataHandler = function (additionalData) {
            // Always clean _lastAdditionalData on the test object
            _this._testObject._lastAdditionalData = undefined;
            if (orgAdditionalDataHandler) {
                orgAdditionalDataHandler(additionalData);
            }
        };

        var msg = {
            Operation: methodName,
            Parameters: args,
            Object: this._testObject._toJSON()
        };

        return this._sendExecuteCommand("ExecuteCommand", msg, additionalDataHandler);
    },

    _sendExecuteCommand: function(commandNameToExecute, msg, additionalDataHandler) {
        return this._session._communication.send(commandNameToExecute, msg).then(function(data) {
            if(!data) //we expect to receive an object here
                return null;

            var result = this._testObject._getResultValue(data.Result);
            additionalDataHandler(data.AdditionalInfo);
            return result;
        }.bind(this), function(error){
            additionalDataHandler(error._additionalInfo);
            this._testObject._handleError(error);
        }.bind(this));
    }
};

module.exports = TestObjectExecutor;