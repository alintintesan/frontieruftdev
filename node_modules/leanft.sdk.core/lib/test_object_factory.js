// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

// Created on 14/10/2015.


 /** @private */
var Logger = require("./logger.js").Logger;
var TypeRegistry = require("./type_registry.js").TypeRegistry;

/**
* TestObjectFactory
* @class
*/
function TestObjectFactory(){
    this._logger = new Logger("TestObjectFactory");
}

TestObjectFactory.prototype = {
    _logger: null,
    _factories: [],

	/**
	* Creates test object
	* @function
	*/
    create: function(type,description){
        this._logger.trace("create: called for " + JSON.stringify(type));
        var resultTO = null;
        this._factories.some(function(factory){
           resultTO = factory.create(type,description);
           return resultTO !== null;
        });

        if(resultTO === null) {
            this._logger.warn("create: Failed to create Test Object with type: " + JSON.stringify(type));
            throw new Error("Failed to create " + type);
        }

        return resultTO;
    },

	/**
	* createByNativeClass
	* @function
	*/
    createByNativeClass: function(nativeClass, subType) {
        /*jshint eqnull:true */
        this._logger.trace("createByNativeClass: called for " + nativeClass);
        var resultTO = null;
        this._factories.some(function(factory){
            resultTO = factory.createByNativeClass(nativeClass,subType);
	    return resultTO != null;
        });

        if(resultTO == null) {
            this._logger.warn("create: Failed to create Test Object with native type: " + nativeClass);
            throw new Error("Failed to create test object with native class: " + nativeClass);
        }

        return resultTO;
    },

	/**
	* registerFactory function
	* @function
	*/
    registerFactory: function (factory) {
        this._factories.push(factory);

        //create an instance of all test objects of the factory and register its meta info to the TypeRegistry
        Object.keys(factory._constructors).forEach(function (type) {
            var testObject = factory.create({
                technology: factory._technology,
                leanftType: type
            });

            TypeRegistry._registerTestObjectMetaInfo(testObject);
        });
    }
};

var ConcreteFactoryBehavior = {
    /*jshint unused:true, eqnull:true */
    create: function(type,description){
        if(type.technology !== this._technology)
            return null;

        var toConstructor = this._constructors[type.leanftType.toLowerCase()];
        if(toConstructor == null)
            return null;
        this._logger.trace("create: Creating test object for " + type.leanftType);

        return new toConstructor(this._session,description);
    },

    /* jshint unused: vars */
    createByNativeClass: function(nativeClass, subType) {
        var leanFtType = this._nativeClassToLeanFtType[nativeClass.toLowerCase()];
        if(!leanFtType)
            return;

        var toConstructor = this._constructors[leanFtType.toLowerCase()];
        if(toConstructor == null)
            throw new Error("Missing entry for LeanFT type: " + leanFtType);

        this._logger.trace("createByNativeClass: Creating test object for " + leanFtType);

        var testObject = new toConstructor(this._session,null);

        if(testObject._setSubTypeInfoFromString && subType) {
            this._logger.trace("createByNativeClass: setting subtype of test object to: " + subType);
            testObject._setSubTypeInfoFromString(subType);
        }

        return testObject;
    }
};


module.exports.TestObjectFactory = TestObjectFactory;
module.exports.ConcreteFactoryBehavior = ConcreteFactoryBehavior;
