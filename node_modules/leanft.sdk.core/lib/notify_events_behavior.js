// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
var ArrayUtils = require("./object_utils.js").ArrayUtils;

var NotifyEventsBehavior = {

    findMethodName: function (object,method) {
        var foundKey=null;
        for (var key in object) {
            if (object[key] === method) {
                foundKey = key;
                break;
            }
        }
        return foundKey;
    },

    notifyWithEvents : function(func, args, options){
        var cmdId = IdGenerator.prototype.generate();

        if (!this._session){
            return func.call(this, cmdId);
        }

        var foundKey = options.name ? options.name : this.findMethodName(this, options.calleeArguments.callee);

        var method = options.calleeArguments.callee;
        var methodArguments = ArrayUtils.toArray(options.calleeArguments);

        var onStart = function() {
            this._session.fireEvent("onBeforeCommand",
                {
                    type: options.type,
                    sender: options.sender,
                    methodName: foundKey,
                    method: method,
                    commandId: cmdId,
                    methodArguments: methodArguments,
                    caller: options.caller
                });
        }.bind(this);

        var onFinishOK = function(result) {
            if (!options.onError) {
                this._session.fireEvent("onAfterCommand", {commandId: cmdId, testObject : this, result: result, methodName: foundKey, type: options.type});
            }
        }.bind(this);

        var onFinishErr = function(error) {
            this._session.fireEvent("onErrorCommand", {commandId: cmdId, testObject : this, error : error, type: options.type});
        }.bind(this);

        var promiseFunc = func.bind(this, cmdId);

        return this._session._promiseManager.wrapPromiseFunctionWithNotifyEvents(
            onStart, promiseFunc, onFinishOK, onFinishErr);
    }
};

function IdGenerator(){}

IdGenerator.prototype = {
    _nextID: -1,
    generate: function(){
        return ++IdGenerator.prototype._nextID;
    }
};



module.exports = NotifyEventsBehavior;