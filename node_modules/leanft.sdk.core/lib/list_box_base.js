// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/25/2016.
 */

var ArrayUtils = require("./object_utils.js").ArrayUtils;
var ContainerBehavior = require("./container_helper.js").ContainerBehavior;
var Convert = require("./convert.js").Convert;
var ListItem = require("./list_item_base.js").ListItem;
var StringUtils = require("./object_utils.js").StringUtils;
var Utils = require("./object_utils.js").ObjectUtils;
var WrappedItemExecutorBehavior = require("./execute_items_with_events_behavior.js");

/**
 * ListBoxDescriptionBehavior - the description for a ListBox objects of StdWin and WinForms
 * @ignore
 */
var ListBoxDescriptionBaseBehavior = {
    /**
     * An array of all items in the list.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the items value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored items value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    items: function (items) {
        return this._propertyHandler("all items", items, StringUtils.joinFunc("\n"), StringUtils.splitFunc("\n"));
    },

    /**
     * An array of all selected items in the list.
     * @param {string[]} [selectedItem] When provided, this method acts as a setter and sets the selectedItems value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedItems value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedItems: function (selectedItems) {
        return this._propertyHandler("selection", selectedItems, StringUtils.joinFunc("\n"), StringUtils.splitFunc("\n"));
    },

    /**
     * The number of items in the list box.
     * @param {number} [itemsCount] When provided, this method acts as a setter and sets the itemsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored itemsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    itemsCount: function (itemsCount) {
        return this._propertyHandler("items count", itemsCount, Convert.toNumber);
    }
};

module.exports.ListBoxDescriptionBaseBehavior = ListBoxDescriptionBaseBehavior;
