// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/16/2016.
 */
/**
 * A ToolBarItemBase object
 * @constructor
 * @class ToolBarItemBase
 * This base class is expected to be used by StdWin and WinForms technologies.
 */
function ToolBarItemBase(ownerToolBar, identifier, textRepresentation) {
    this._ownerToolBar = ownerToolBar;
    this._identifier = identifier;
    this._textRepresentation = textRepresentation;
    this._executeWithEventsOnItem = this._ownerToolBar._executeWithEventsOnItem.bind(this._ownerToolBar, this);
    this._executeWithEventsOnItemOnError = this._ownerToolBar._executeWithEventsOnItemOnError.bind(this._ownerToolBar, this);
}

/**
 * The methods of ToolBarItemBase object
 * @ignore
 */
ToolBarItemBase.prototype = {
    _ownerToolBar: null,
    _identifier: null,
    _textRepresentation: null,
    _executeWithEventsOnItem: null,
    _executeWithEventsOnItemOnError: null,

    /**
     * Get the identifier of the item.
     * @returns {number|string} the identifier of the item.
     * @ignore
     */
    _getIdentifier: function () {
        return this._identifier;
    },

    /**
     * Get the text representation of the item.
     * @returns {string} the text representation of the item.     
     * @ignore
     */
    _getTextRepresentation: function () {
        return this._textRepresentation;
    },

    /**
     * Indicates whether the toolbar button is a dual-state (toggle) push button and is currently selected (pushed)..
     * @function
     * @returns {Promise<boolean>} a promise that is fulfilled with indication whether the item is checked or not.
     */
    isChecked: function () {
        return this._executeWithEventsOnItemOnError(this._ownerToolBar._isItemChecked, this._identifier);
    },

    /**
     * Indicates whether the toolbar button's text is truncated and an ellipsis (...) is displayed.
     * Remarks: this property is not supported for QMenuBar objects.
     * @function
     * @returns {Promise<boolean>} a promise that is fulfilled with indication whether the toolbar item's text is truncated and an ellipsis (...) is displayed or not
     */
    hasEllipses: function () {
        return this._executeWithEventsOnItemOnError(this._ownerToolBar._hasItemEllipses, this._identifier);
    },

    /**
     * Indicates whether the toolbar button is enabled.
     * @function
     * @returns {Promise<boolean>} a promise that is fulfilled with indication whether the item is enabled or not.
     */
    isEnabled: function () {
        return this._executeWithEventsOnItemOnError(this._ownerToolBar._isItemEnabled, this._identifier);
    },

    /**
     * Indicates whether the toolbar button is highlighted (surrounded by a dotted line).
     * @function
     * @returns {Promise<boolean>} a promise that is fulfilled with indication whether the item is highlighted or not.
     */
    isHighlighted: function () {
        return this._executeWithEventsOnItemOnError(this._ownerToolBar._isItemHighlighted, this._identifier);
    },

    /**
     * Indicates whether the toolbar button is "hot". (Appears highlighted on mouseover.)
     * Remarks: the IsHot function is not supported for QMenuBar objects.
     * @function
     * @returns {Promise<boolean>} a promise that is fulfilled with indication whether the item is hot or not.
     */
    isHot: function () {
        return this._executeWithEventsOnItemOnError(this._ownerToolBar._isItemHot, this._identifier);
    },

    /**
     * Indicates whether the toolbar button is disabled.
     * @function
     * @returns {Promise<boolean>} a promise that is fulfilled with indication whether the item is disabled or not.
     */
    isIndeterminate: function () {
        return this._executeWithEventsOnItemOnError(this._ownerToolBar._isItemIndeterminate, this._identifier);
    },

    /**
     * Get the 0-based index number of the toolbar item. The index does not include hidden and separator items.
     * @function
     * @returns {Promise<number>} a promise that is fulfilled with the item index.
     */
    index: function () {
        return this._executeWithEventsOnItemOnError(this._ownerToolBar._getItemIndex, this._identifier);
    },

    /**
     * Indicates whether the toolbar button is marked. The interpretation of a marked button is application dependent.
     * Remarks: not supported for QMenuBar objects
     * @function
     * @returns {Promise<boolean>} a promise that is fulfilled with indication whether the item is marked or not.
     */
    isMarked: function () {
        return this._executeWithEventsOnItemOnError(this._ownerToolBar._isItemMarked, this._identifier);
    },

    /**
     * The name of the toolbar button.
     * @function
     * @returns {Promise<string>} a promise that is fulfilled with the item name.
     */
    name: function () {
        return this._executeWithEventsOnItemOnError(this._ownerToolBar._getItemName, this._identifier);
    },

    /**
     * Indicates whether the toolbar button is currently being clicked.
     * @function
     * @returns {Promise<boolean>} a promise that is fulfilled with indication whether the item is pressed or not.
     */
    isPressed: function () {
        return this._executeWithEventsOnItemOnError(this._ownerToolBar._isItemPressed, this._identifier);
    },

    /**
     * Indicates whether the toolbar button is enabled and followed by a line break.
     * @function
     * @returns {Promise<boolean>} a promise that is fulfilled with indication whether the item is wrapped or not.
     */
    isWrap: function () {
        return this._executeWithEventsOnItemOnError(this._ownerToolBar._isItemWrap, this._identifier);
    }
};

module.exports.ToolBarItemBase = ToolBarItemBase;
