// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/13/2016.
 */

var Convert = require("./convert.js").Convert;

//Consts
var getColumnHeaderWiredName = "GetColumnHeader";

/**
 * The behaviors of the ListView base object
 * This base class is expected to be used by StdWin and WinForms
 * @ignore
 */
var ListViewTOBaseBehavior = {
    /**
     * @ignore
     * @memberof ListViewTOBaseBehavior
     */
    _properties: {
        /**
         * Returns the number of visible columns in the list-view object.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of visible columns.
         */
        visibleColumnsCount: {
            nonTranslatable: true,
            getter: function () {
                return this._executeWithEventsOnError(arguments, "ColumnCount");
            }
        }
    },

    /**
     * @ignore
     * @memberof ListViewTOBaseBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Returns the text header of the specified (report-style) list-view column.
         * @function
         * @param {number} columnIndex The 0-based index of the column.
         * @returns {Promise<string>} a promise that is fulfilled with the text header of the column.
         */
        getColumnHeader: {
            wiredName: getColumnHeaderWiredName,
            exec: function (columnIndex) {
                if (columnIndex == null)
                    throw new Error("The parameter columnIndex cannot be null.");
                return this._executeWithEvents(arguments, getColumnHeaderWiredName, Convert.toNumber(columnIndex));
            }
        }
    },

    _helpers:{
        /**
         * Activates the edit mode for the lists item label to enable renaming.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        _enableLabelEditingItem: function (identifier) {
            return this._executeNotWrapped(arguments, "EditLabel", identifier);
        },

        /**
         * Get the list item's state image index.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * @returns {Promise<number>} a promise that is fulfilled with the list item's state image index.
         * @ignore
         */
        _getItemState: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "state");
        },

        /**
         * Get the text value of the specified report-style (LVS_REPORT) list-view subitem.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * @param {number|string} indexOrName The index or the column name of the subitem.
         * @returns {Promise<string>} a promise that is fulfilled with the text value of the specified report-style (LVS_REPORT) list-view subitem.
         * @ignore
         */
        _getSubItemText: function (identifier, indexOrName) {
            return this._executeNotWrapped(arguments, "GetSubItem", identifier, indexOrName);
        },

        /**
         * Sets the state of the check box icon of the specified item in the list.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * @param {number} state The 0-based state image index.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        _setItemState: function (identifier, state) {
            return this._executeNotWrapped(arguments, "SetItemState", identifier, Convert.toNumber(state));
        }
    }
};

module.exports.ListViewTOBaseBehavior = ListViewTOBaseBehavior;
