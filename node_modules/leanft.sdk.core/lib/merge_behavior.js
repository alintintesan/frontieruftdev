// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
var ObjectUtils = require("./object_utils.js").ObjectUtils;
var TypeRegistry = require("./type_registry.js").TypeRegistry;

var GetterAutoGenerate = {generate: true, dontGenerate: false};
var WiredNameAutoGenerate = {generate: true, dontGenerate: false};
var FlattenProperties = {flatten: true, dontFlatten: false};

var MergeBehavior = {
    _behaviors: [],

    _mergeBehavior: function (behavior) {
        this._behaviors.push(behavior);
        this._mergeMethods(behavior);
        ObjectUtils.extend(this, behavior._helpers);

        this._mergeProperties(behavior);
        this._handleAdditionalProperties(behavior);
        this._handleAdditionalNativeProperties(behavior);
    },

    /*jshint eqnull:true */
    _mergeMethods: function (behavior) {
        var methods = behavior._methods;
        if (methods == null) {
            return;
        }

        var methodsToExtend = {};

        // handle behavior properties
        Object.keys(methods).forEach(function (method) {
            var methodValue = methods[method];
            if (typeof(methodValue) === "object") {
                 if (methodValue.wiredName == null) {
                    methodValue.wiredName = method;
                }

                methodValue = methodValue.exec;

            } else {
                methods[method] = {
                    wiredName: null,
                    exec: methodValue
                };
            }

            methodsToExtend[method] = methodValue;
        }, this);

        ObjectUtils.extend(this, methodsToExtend);
    },

    _mergeProperties: function (behavior) {
        this._propertiesHandlerHelper(behavior._properties,
            FlattenProperties.flatten,
            GetterAutoGenerate.generate,
            WiredNameAutoGenerate.generate);
    },

    _handleAdditionalProperties: function (behavior) {
        this._additionalProperties = this._additionalProperties || {};
        this._propertiesHandlerHelper(behavior._additionalProperties,
            FlattenProperties.dontFlatten,
            GetterAutoGenerate.dontGenerate,
            WiredNameAutoGenerate.generate);
    },

    _handleAdditionalNativeProperties: function (behavior) {
        this._additionalNativeProperties = this._additionalNativeProperties || {};
        this._propertiesHandlerHelper(behavior._additionalNativeProperties,
            FlattenProperties.dontFlatten,
            GetterAutoGenerate.dontGenerate,
            WiredNameAutoGenerate.dontGenerate);
    },

    /*jshint eqnull:true */
    _propertiesHandlerHelper: function (properties, flattenProperties, getterAutoGenerate, wiredNameAutoGenerate) {
        if (properties == null) {
            return;
        }

        var propertiesToExtend = {};

        // handle behavior properties
        Object.keys(properties).forEach(function (property) {
            var propertyValue = properties[property];
            if (typeof(propertyValue) === "object") {
                var handler = SpecialValueHandler[propertyValue.type] || null;

                // handle special properties like enum properties
                if (handler)
                    handler.call(this, properties, property);

                if (wiredNameAutoGenerate && (propertyValue.wiredName == null)) {
                    propertyValue.wiredName = property;
                }

                if (getterAutoGenerate && (propertyValue.getter == null)) {
                    var wiredName = propertyValue.wiredName;
                    propertyValue.getter = function () {
                        return this._getROProperty(wiredName, arguments);
                    };
                }

                propertyValue = propertyValue.getter;

            } else {
                //the property is a function so mark it as non translatable
                // since the wiredName is not provided
                properties[property] = {
                    nonTranslatable: true,
                    getter: propertyValue
                };
            }

            if (flattenProperties) {
                // add property to properties object
                propertiesToExtend[property] = propertyValue;
            }
        }, this);

        ObjectUtils.extend(this, propertiesToExtend);
    }
};

var SpecialValueHandler = {
    enum: function (properties, property) {
        var enumObject = {enumName: properties[property].enumName, values: properties[property].enumType};
        TypeRegistry.addPropertyWithEnum(this, property, enumObject);
    },

    dictionary: function (properties, property) {
        TypeRegistry.addPropertyWithDictionary(this, property);
    },

    uint: function (properties, property) {
        TypeRegistry.addPropertyWithUint(this, property);
    },

    double: function (properties, property) {
        TypeRegistry.addPropertyWithDouble(this, property);
    },

    date: function (properties, property) {
        TypeRegistry.addPropertyWithDate(this, property);
    },

    time: function (properties, property) {
        TypeRegistry.addPropertyWithTime(this, property);
    },

    daterange: function (properties, property) {
        TypeRegistry.addPropertyWithDateRange(this, property);
    },

    notregex: function (properties, property) {
        TypeRegistry.addPropertyWithNotRegexString(this, property);
    }
};


module.exports = MergeBehavior;
