// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
// Created on 16/11/2015.

/*
 * @typedef {Object} Size
 * @property {number} width - The width in pixels.
 * @property {number} height - The height in pixels.
 *
 */

var Convert = require("./convert").Convert;
var PropertyFlatter = require("./property_flatter.js").PropertyFlatter;
var groupedPropertyWiredNamesToSimple = require("./helper_utils.js").groupedPropertyWiredNamesToSimple;

var LocationToNativeKeysProps = {
    x: {wiredName: "x"},
    y: {wiredName: "y"}
};

var LocationToNativeKeys = groupedPropertyWiredNamesToSimple(LocationToNativeKeysProps);

var AbsLocationToNativeProps = {
    x: {wiredName: "abs_x"},
    y: {wiredName: "abs_y"}
};

var AbsLocationToNative = groupedPropertyWiredNamesToSimple(AbsLocationToNativeProps);

var SizeToNativeKeysProps = {
    width: {wiredName: "width"},
    height: {wiredName: "height"}
};

var SizeToNativeKeys = groupedPropertyWiredNamesToSimple(SizeToNativeKeysProps);


/**
 * Provides a point representation
 * @typedef Point
 * @property {number} x the X coordinate of this point.
 * @property {number} y the Y coordinate of this point.
 */

/**
 * Provides information about where an object is located on the screen.
 * @ignore
 */
var LocationInfoProvider = {
     /**
     * @ignore
     * @memberof LocationInfoProvider
     */
    _properties: {
        /**
         * Returns the object's coordinates relative to the parent window (in pixels), format: {x,y}.
         * @returns {Promise<Point>} a promise that is fulfilled with the object's relative coordinates.
         * @function
         */
        location: {
            type: 'grouped',
            properties: LocationToNativeKeysProps,
            getter: function () {
                var propNames = LocationToNativeKeys;
                return this._getROProperties(propNames.x, propNames.y).then(function (res) {
                    return {
                        x: Convert.toNumber(res[0]),
                        y: Convert.toNumber(res[1])
                    };
                });
            }
        },
        /**
         * Returns the object's absolute coordinates relative to the screen (in pixels), format: {x,y}. <br/>
         * Remark: 0,0 is always the top-left corner of the (primary) monitor.
         * @returns {Promise<Point>} a promise that is fulfilled with the object's absolute coordinates.
         * @function
         */
        absoluteLocation: {
            type: 'grouped',
            properties: AbsLocationToNativeProps,
            getter: function () {
                var propNames = AbsLocationToNative;
                return this._getROProperties(propNames.x, propNames.y).then(function (res) {
                    return {
                        x: Convert.toNumber(res[0]),
                        y: Convert.toNumber(res[1])
                    };
                });
            }
        },
         /**
          * Returns the object's size (in pixels).
          * @returns {Promise<Size>} a promise that is fulfilled with the object's size.
          * @function
          */
         size: {
             type: 'grouped',
             properties: SizeToNativeKeysProps,
             getter: function () {
                 var propNames = SizeToNativeKeys;
                 return this._getROProperties(propNames.width, propNames.height).then(function (res) {
                     return {
                         width: Convert.toNumber(res[0]),
                         height: Convert.toNumber(res[1])
                     };
                 });
             }
         }
    }
};

/**
 * @ignore
 */
var LocationDescriptionBehavior = {
    /**
     * The object's coordinates relative to the parent's location in pixels.
     * @param {Point} [location] When provided, this method acts as a setter and sets the location value.
     * @returns {Point | Description} If no parameter is provided, the method acts as a getter and returns the current stored location value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @function
     */
    location: function(location) {
        return this._propertyFlatterHandler("Location", PropertyFlatter, location, LocationToNativeKeys);
    },

    /**
     * The object's coordinates relative to the screen in pixels. 0,0 is the top-left corner of the primary monitor.
     * @param {Point} [location] When provided, this method acts as a setter and sets the absoluteLocation value.
     * @returns {Point | Description} If no parameter is provided, the method acts as a getter and returns the absoluteLocation value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @function
     */
    absoluteLocation: function(location) {
        return this._propertyFlatterHandler("AbsoluteLocation", PropertyFlatter, location, AbsLocationToNative);
    },

    /**
     * The object's size in pixels.
     * @param {Size} [size] When provided, this method acts as a setter and sets the size value.
     * @returns {Size | Description} If no parameter is provided, the method acts as a getter and returns the current stored size value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @function
     */
    size: function(size) {
        return this._propertyFlatterHandler("Size", PropertyFlatter, size, SizeToNativeKeys);
    }
};

module.exports.LocationInfoProvider = LocationInfoProvider;
module.exports.LocationToNativeKeys = LocationToNativeKeys;
module.exports.LocationToNativeKeysProps = LocationToNativeKeysProps;
module.exports.AbsLocationToNative = AbsLocationToNative;
module.exports.AbsLocationToNativeProps = AbsLocationToNativeProps;
module.exports.SizeToNativeKeys = SizeToNativeKeys;
module.exports.SizeToNativeKeysProps = SizeToNativeKeysProps;
module.exports.LocationDescriptionBehavior = LocationDescriptionBehavior;