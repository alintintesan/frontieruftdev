// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/16/2016.
 */

/**
 * This base class is expected to be used by StdWin and WinForms technologies.
 * @ignore
 */
var ToolBarTOBaseBehavior = {
    _helpers: {
        /**
         * Identify if the item is checked.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the item is checked or not.
         * @ignore
         */
        _isItemChecked: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "checked");
        },

        /**
         * Indicates whether the toolbar item's text is truncated and an ellipsis (...) is displayed.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the toolbar item's text is truncated and an ellipsis (...) is displayed or not
         * @ignore
         */
        _hasItemEllipses: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "ellipses");
        },

        /**
         * Check if the item is enabled.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the toolbar item is enabled or not
         * @ignore
         */
        _isItemEnabled: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "enabled");
        },

        /**
         * Check if the item is highlighted.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the toolbar item is highlighted or not
         * @ignore
         */
        _isItemHighlighted: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "highlighted");
        },

        /**
         * Check if the item is hot. (Appears highlighted on mouseover)
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the toolbar item is hot or not
         * @ignore
         */
        _isItemHot: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "hot");
        },

        /**
         * Check if the item is disable
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the toolbar item is disabled or not
         * @ignore
         */
        _isItemIndeterminate: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "indeterminate");
        },

        /**
         * Get the item index.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<number>} a promise that is fulfilled with the toolbar item index
         * @ignore
         */
        _getItemIndex: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "index");
        },

        /**
         * Get the item name.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<string>} a promise that is fulfilled with the toolbar item name
         * @ignore
         */
        _getItemName: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "name");
        },

        /**
         * Check if the item is marked
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the toolbar item is marked or not
         * @ignore
         */
        _isItemMarked: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "marked");
        },

        /**
         * Check if the item is pressed
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the toolbar item is pressed or not
         * @ignore
         */
        _isItemPressed: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "pressed");
        },

        /**
         * Check if the item is selected
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the toolbar item is selected or not
         * @ignore
         */
        _isItemSelected: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "selected");
        },

        /**
         * Check if the item is wrapped
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the toolbar item is wrapped or not
         * @ignore
         */
        _isItemWrap: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "wrap");
        }
    }
};

module.exports.ToolBarTOBaseBehavior = ToolBarTOBaseBehavior;