// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * This file contains helper utility objects
 */

/**
 * Static object that contains helper functions for working with rectangle objects.

 * @class
 * @static
 * @private
 * @ignore
 */
var RectangleUtils = {
    /*jshint eqnull:true */
    /**
     * Analyzes a function parameter and verifies whether it is a valid rectangle object.
     * @param {Object} rectangle The object that receives the new properties.
     * @returns {{x,y,width,height}} a rectangle object.
     */
    getRectangleOrDefault: function(rectangle){
        if (rectangle == null)
            rectangle = {};
        else if (typeof rectangle !== 'object')
            throw new Error("The rectangle parameter must be a rectangle object");

        var x_val = rectangle.x == null ? -1 : rectangle.x;
        var y_val = rectangle.y == null ? -1 : rectangle.y;
        var width_val = rectangle.width == null ? 0 : rectangle.width;
        var height_val = rectangle.height == null ? 0 : rectangle.height;
        return {x: x_val,
                y: y_val,
                width: width_val,
                height: height_val,
                _left: x_val,
                _top: y_val,
                _right: x_val + width_val,
                _bottom: y_val + height_val};
    },
    /**
     * Converts the array representing the rectangles array to an array of property bags representing rectangles
     */
    convertNumArrayToRectArray: function(arrayToConvert) {
        var rectanglesArray = [];
        var size = 4;

        while (arrayToConvert.length > 0) {
            var currentArray = arrayToConvert.splice(0, size);
            rectanglesArray.push( {
                    x:currentArray[0],
                    y:currentArray[1],
                    width:currentArray[2]-currentArray[0],
                    height:currentArray[3]-currentArray[1]}
            );
        }
        return rectanglesArray;
    }

};

function groupedPropertyWiredNamesToSimple(propertiesObject) {
    var simpleMap = {};

    Object.keys(propertiesObject).forEach(function (property) {
        simpleMap[property] = propertiesObject[property].wiredName;
    });

    return simpleMap;
}

module.exports.RectangleUtils = RectangleUtils;
module.exports.groupedPropertyWiredNamesToSimple = groupedPropertyWiredNamesToSimple;