// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/** @private */
var ObjectUtils = require("./object_utils.js").ObjectUtils;
var ReplayErrorsBehavior = require("./replay_errors.js");
var Logger = require("./logger.js").Logger;
var NotifyEventsBehavior = require("./notify_events_behavior.js");
var MouseButton = require("./clickbehavior.js").MouseButton;
var ExecuteUtilityCommandBehavior = require("./execute_utility_command_behavior.js");


/**
 * A class that enables low-level mouse operations.
 * @class Mouse
 */

/**
 * Constructor method that is called by the factory.
 * @param {Session} session The session to which the constructed object belongs.
 * @returns {Mouse}
 * @constructor
 * @private
 */
function Mouse(session){
    this._logger = new Logger("Mouse");
    if(session === null){
        throw new Error("The communication channel is mandatory for creating Mouse");
    }

    this._session = session;
    ObjectUtils.extend(this, ReplayErrorsBehavior);
    ObjectUtils.extend(this, NotifyEventsBehavior);
    ObjectUtils.extend(this, ExecuteUtilityCommandBehavior);
}

Mouse.prototype = {
    _logger: null,
    _session: null,

    /**
     * @ignore
     */
    _mouseButtonToNative: {
        left: 0,
        middle: 1,
        right: 2
    },


    /*jshint eqnull:true */
    /**
     * Moves the mouse to the specified point on the screen and clicks the left mouse button.
     * @param {number} x The x-coordinate on the screen to place the mouse pointer.
     * @param {number} y The y-coordinate on the screen to place the mouse pointer.
     * @param {MouseButton} button The mouse button used for the click operation.
     * @returns {Promise<void>} a promise that is fulfilled after moving the mouse to the specified point on the screen and clicking the left mouse button.
     */
    click: function(x, y, button) {
        if (x == null)
            throw new Error("the x-coordinate parameter must be supplied");

        if (y == null)
            throw new Error("the y-coordinate parameter must be supplied");

        button = button || MouseButton.left;
        var func = function(){
            return this._executeUtilityCommand("ExecuteDeviceReplayCommand", "MouseClick", x, y, this._convertMouseButtonEnumToNativeValue(button));
        };
        var options = { sender: this, onError: true, calleeArguments: arguments, type: "Mouse"};
        return this.notifyWithEvents(func, arguments, options);
    },

    /*jshint eqnull:true */
    /**
     * Moves the mouse to the specified point on the screen and double-clicks the left mouse button.
     * @param {number} x The x-coordinate on the screen to place the mouse pointer.
     * @param {number} y The y-coordinate on the screen to place the mouse pointer.
     * @param {MouseButton} button The mouse button used for the click operation.
     * @returns {Promise<void>} a promise that is fulfilled after moving the mouse to the specified point on the screen and double-clicking the left mouse button.
     */
    doubleClick: function(x, y, button) {
        if (x == null)
            throw new Error("the x-coordinate parameter must be supplied");

        if (y == null)
            throw new Error("the y-coordinate parameter must be supplied");

        button = button || MouseButton.left;
        var func = function(){
            return this._executeUtilityCommand("ExecuteDeviceReplayCommand", "MouseDblClick", x, y, this._convertMouseButtonEnumToNativeValue(button));
        };
        var options = { sender: this, onError: true, calleeArguments: arguments, type: "Mouse"};
        return this.notifyWithEvents(func, arguments, options);
    },

    /*jshint eqnull:true */
    /**
     * Drags the mouse from and to the specified points while the left mouse button is pressed, and then releases the mouse button.
     * @param {Point} fromPoint The point from which to perform the drag and drop operation.
     * @param {Point} toPoint The point where the drag ends and the mouse button is released.
     * @param {MouseButton} button The mouse button pressed during the drag operation.
     * @returns {Promise<void>} a promise that is fulfilled after dragging the mouse from and to the specified point while the left mouse button is pressed, and then releasing the mouse button.
     */
    dragAndDrop: function(fromPoint, toPoint, button) {
        if (fromPoint == null)
            throw new Error("fromPoint parameter must be supplied");

        if (toPoint == null)
            throw new Error("toPoint parameter must be supplied");

        button = button || MouseButton.left;
        var func = function(){
            return this._executeUtilityCommand("ExecuteDeviceReplayCommand", "DragAndDrop", fromPoint.x, fromPoint.y, toPoint.x, toPoint.y, this._convertMouseButtonEnumToNativeValue(button));
        };
        var options = { sender: this, onError: true, calleeArguments: arguments, type: "Mouse"};
        return this.notifyWithEvents(func, arguments, options);
    },

    /*jshint eqnull:true */
    /**
     * Presses the specified mouse button at the specified point on the screen.
     * @param {number} x The x-coordinate on the screen to place the mouse pointer.
     * @param {number} y The y-coordinate on the screen to place the mouse pointer.
     * @param {MouseButton} button The mouse button used for the click operation.
     * @returns {Promise<void>} a promise that is fulfilled after pressing the mouse button at the specified point.
     */
    buttonDown: function(x, y, button) {
        if (x == null)
            throw new Error("the x-coordinate parameter must be supplied");

        if (y == null)
            throw new Error("the y-coordinate parameter must be supplied");

        button = button || MouseButton.left;
        var func = function(){
            return this._executeUtilityCommand("ExecuteDeviceReplayCommand", "MouseDown", x, y, this._convertMouseButtonEnumToNativeValue(button));
        };
        var options = { sender: this, onError: true, calleeArguments: arguments, type: "Mouse"};
        return this.notifyWithEvents(func, arguments, options);
    },

    /*jshint eqnull:true */
    /**
     * Releases the specified mouse button at the specified point on the screen.
     * @param {number} x The x-coordinate on the screen to place the mouse pointer.
     * @param {number} y The y-coordinate on the screen to place the mouse pointer.
     * @param {MouseButton} button The mouse button used for the click operation.
     * @returns {Promise<void>} a promise that is fulfilled after releasing the mouse button at the specified point.
     */
    buttonUp: function(x, y, button) {
        if (x == null)
            throw new Error("the x-coordinate parameter must be supplied");

        if (y == null)
            throw new Error("the y-coordinate parameter must be supplied");

        button = button || MouseButton.left;
        var func = function(){
            return this._executeUtilityCommand("ExecuteDeviceReplayCommand", "MouseUp", x, y, this._convertMouseButtonEnumToNativeValue(button));
        };
        var options = { sender: this, onError: true, calleeArguments: arguments, type: "Mouse"};
        return this.notifyWithEvents(func, arguments, options);
    },

    /*jshint eqnull:true */
    /**
     * Moves the mouse to the specified point on the screen.
     * @param {number} x The x-coordinate on the screen to place the mouse pointer.
     * @param {number} y The y-coordinate on the screen to place the mouse pointer.
     * @returns {Promise<void>} a promise that is fulfilled after moving the mouse to the specified point.
     */
    move: function(x, y) {
        if (x == null)
            throw new Error("the x-coordinate parameter must be supplied");

        if (y == null)
            throw new Error("the y-coordinate parameter must be supplied");

        var func = function(){
            return this._executeUtilityCommand("ExecuteDeviceReplayCommand", "MouseMove", x, y);
        };
        var options = { sender: this, onError: true, calleeArguments: arguments, type: "Mouse"};
        return this.notifyWithEvents(func, arguments, options);
    },

    /**
     * @param button
     * @returns {*}
     * @ignore
     */
    _convertMouseButtonEnumToNativeValue: function(button) {
        return this._mouseButtonToNative[button.toLowerCase()];
    }
};

module.exports.Mouse = Mouse;

