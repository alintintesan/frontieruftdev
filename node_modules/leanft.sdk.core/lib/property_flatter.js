// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

// Created on 19/11/2015.

/** @private */
var ObjectUtils = require("./object_utils.js").ObjectUtils;
var StringUtils = require("./object_utils.js").StringUtils;

/*jshint unused:true, eqnull:true */

/** 
* Property Flatter
* @private
*/
function PropertyFlatter (valuesMap, keysMap) {
    if(keysMap == null)
        throw new Error("keyMap cannot be null");

    this._keysMap = keysMap;

    ObjectUtils.extend(this, valuesMap);
}

PropertyFlatter.prototype = {
    _keysMap: null,

    /*jshint unused:true, eqnull:true */
    _flat: function() {
        var nativeMap = {};
        Object.keys(this._keysMap).forEach(function(userKey) {
            if(this[userKey] == null) //means null or undefined
                return;

            var nativeKey = this._keysMap[userKey];
            nativeMap[nativeKey] = this[userKey];
        }, this);

        return nativeMap;
    }
};

/** 
* PropertyKeyPrefixFlatter
* @private
*/
function PropertyKeyPrefixFlatter (valuesMap, keyPrefix) {
    if(StringUtils.isNullOrWhiteSpace(keyPrefix))
        throw new Error("keyPrefix cannot be null or whitespace");

    this._keyPrefix = keyPrefix;

    ObjectUtils.extend(this, valuesMap);
}

PropertyKeyPrefixFlatter.prototype = {
    _keyPrefix: null,

    /*jshint unused:true, eqnull:true */
    _flat: function() {
        var nativeMap = {};
        Object.keys(this).filter(function (key) {
            return !key.match(/^_/);
        }).forEach(function(userKey) {
            if(this[userKey] == null) //means null or undefined
                return;

            var nativeKey = this._keyPrefix + userKey;
            nativeMap[nativeKey] = this[userKey];
        }, this);

        return nativeMap;
    }
};

module.exports.PropertyFlatter = PropertyFlatter;
module.exports.PropertyKeyPrefixFlatter = PropertyKeyPrefixFlatter;