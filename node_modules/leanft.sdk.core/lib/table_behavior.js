// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/15/2016.
 */

/**
 * TableBaseOperationBehavior
 * @ignore
 */
var TableBaseOperationBehavior = {
    _helpers: {
        /*jshint eqnull:true */
        /**
         * Returns either a specific cell or a promise of all cells in the table (when called without arguments), all the cells in a row (when called with row only).
         * @param {number} [row] The row index of the specific cell.
         * @param {string|number} [columnOrIndex] The column header or 0-based column index in the row, specified by the row parameter.
         * @returns {Promise<TableCell[][] | TableCell[]> | TableCell} a promise that is fulfilled with either all the cells in the table (when called without arguments), all the cells in a row (when called with row only), or with the specified cell.
         * @ignore
         */
        _cells: function (row, columnOrIndex) {
            if (row == null && columnOrIndex == null) {
                return this._getRowAndColumnCount().then((function (rowsAndColumns) {
                    return this._initTable(rowsAndColumns.rowCount, rowsAndColumns.columnCount);
                }).bind(this));
            }
            else if (row != null && columnOrIndex == null) {
                return this._getColumnCount().then((function (columns) {
                    return this._initRowInTable(row, columns);
                }).bind(this));
            }
            return this._createCell(row, columnOrIndex);
        },

        /**
         * Initializes a complete table of cells (array of arrays)
         * @param {number} rows The number of rows in the requested table.
         * @param {number} cols The number of cells in each row.
         * @returns {Object[]} the array of rows.
         * @ignore
         */
        _initTable: function (rows, cols) {
            var table = [];
            for (var rowIndex = 0; rowIndex < rows; rowIndex++) {
                table[rowIndex] = this._initRowInTable(rowIndex, cols);
            }
            return table;
        },

        /**
         * Initializes a row of cells.
         * @param {number} rowNumber The row number to initialize.
         * @param {number} cols The number of cells.
         * @returns {Object[]} the array of cells.
         * @ignore
         */
        _initRowInTable: function (rowNumber, cols) {
            var resRow = [];
            for (var cellIndex = 0; cellIndex < cols; cellIndex++) {
                resRow[cellIndex] = this._createCell(rowNumber, cellIndex);
            }
            return resRow;
        }
    }
};

module.exports.TableBaseOperationBehavior = TableBaseOperationBehavior;
