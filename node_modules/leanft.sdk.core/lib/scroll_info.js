// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/08/2016.
 */

var Convert = require("./convert.js").Convert;

/**
 * Represents the position of the Vertical scrollbar.
 * @typedef {VerticalScrollPosition} VerticalScrollPosition
 * @property {string} left The vertical scrollbar is on the left.
 * @property {string} right The vertical scrollbar is on the right.
 * @property {string} none There is no vertical scrollbar.
 */
var VerticalScrollPosition = {
    /**
     * @type {string}
     */
    left: 'left',
    /**
     * @type {string}
     */
    right: 'right',
    /**
     * @type {string}
     */
    none: 'none',

    /**
     * @ignore
     */
    _convertToRuntime: {
        left: 0,
        right: 1,
        none: 2
    },

    /**
     * @param position
     * @returns {*}
     * @ignore
     */
    /*jshint eqnull:true */
    _convert: function(position) {
        if (position == null)
            return position;

        var verticalPosition = VerticalScrollPosition._convertToRuntime[position.toLowerCase()];
        if (verticalPosition == null)
            throw new Error("Vertical scroll position value is illegal, value = " + position);

        return verticalPosition;
    }
};

/**
 * The type of scrolling operation.
 * @typedef {ScrollType} ScrollType
 * @property {string} lineDecrement Decrement the scroll by lines.
 * @property {string} lineIncrement Increment the scroll by lines.
 * @property {string} pageDecrement Decrement the scroll by pages.
 * @property {string} pageIncrement Increment the scroll by pages.
 * @property {string} setSpecificLine Move the scroll bar to a specific position.
 * @property {string} first Move the scroll bar to its beginning.
 * @property {string} last Move the scroll bar to its end position.
 */
var ScrollType = {
    /**
     * @type {string}
     */
    lineDecrement: 'lineDecrement',
    /**
     * @type {string}
     */
    lineIncrement: 'lineIncrement',
    /**
     * @type {string}
     */
    pageDecrement: 'pageDecrement',
    /**
     * @type {string}
     */
    pageIncrement: 'pageIncrement',
    /**
     * @type {string}
     */
    setSpecificLine: 'setSpecificLine',
    /**
     * @type {string}
     */
    first: 'first',
    /**
     * @type {string}
     */
    last: 'last',

    /**
     * @ignore
     */
    _convertToRuntime: {
        linedecrement: 0,
        lineincrement: 1,
        pagedecrement: 2,
        pageincrement: 3,
        setspecificline: 4,
        first: 6,
        last: 7
    },

    /**
     * @param type
     * @returns {*}
     * @ignore
     */
    /*jshint eqnull:true */
    _convert: function(type) {
        if (type == null)
            return type;

        var scrollType = ScrollType._convertToRuntime[type.toLowerCase()];
        if (scrollType == null)
            throw new Error("Scroll type position value is illegal, value = " + type);

        return scrollType;
    }
};

/**
 * Represents the scroll bar orientation.
 * @enum
 */
var ScrollOrientation = {
    /**
     * Horizontal scroll bar orientation.
     * @type {string}
     */
    horizontalScroll: 'horizontalScroll',
    /**
     * Vertical scroll bar orientation.
     * @type {string}
     */
    verticalScroll: 'verticalScroll',
};
/**
 * This provides methods used to implement scroll on this object using the definitions from the supplied args object.
 * @ignore
 */
var ScrollBehaviour = {
    /**
     * @ignore
     * @memberof ScrollBehaviour
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Scroll the scroll bar of a standard Windows object.
         * @function
         * @param {ScrollOrientation} orientation The orientation of scroll. See {@link ScrollOrientation}
         * @param {ScrollType} type the type of scroll operation. See {@link ScrollType}
         * @param {number} [value = 1] the value of scroll operation. Default value is 1.
         * @returns {Promise<void>} a promise that is fulfilled when the scroll operation ends.
         */
        scroll: function (orientation, type, value) {
            if (orientation == null)
                throw new Error("You must pass orientation value");
            if (type == null)
                throw new Error("You must pass type value");
            if (value == null)
                value = 1;
            var methodName = (orientation.toLowerCase() == ScrollOrientation.horizontalScroll.toLowerCase()) ? "HScroll" : "VScroll";
            return this._executeWithEvents(arguments, methodName, ScrollType._convert(type), Convert.toNumber(value));
        }
    }
};


module.exports.VerticalScrollPosition = VerticalScrollPosition;
module.exports.ScrollOrientation = ScrollOrientation;
module.exports.ScrollType = ScrollType;
module.exports.ScrollBehaviour = ScrollBehaviour;