// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/08/2016.
 */

var Utils = require("./object_utils.js").ObjectUtils;
var LocationInfoProvider = require("./location_info_provider.js").LocationInfoProvider;
var DragAndDropBehavior = require("./drag_drop_behaviour.js").DragAndDropBehavior;
var ClickBehavior = require("./clickbehavior.js").ClickBehavior;
var DoubleClickBehavior = require("./clickbehavior.js").DoubleClickBehavior;
var Location = require("./location.js").Location;
var SendKeysBehavior = require("./sendkeys_behavior.js").SendKeysBehavior;
var WaitUntilEnabledBehavior = require("./wait_until_behaviors.js").WaitUntilEnabledBehavior;
var WaitUntilVisibleBehavior = require("./wait_until_behaviors.js").WaitUntilVisibleBehavior;
var Convert = require("./convert.js").Convert;

/**
 * The UI Object Description Base behavior used for StdWin, WPF, and WinForms technologies
 * @ignore
 */
var UIObjectDescriptionBaseBehavior = {
    /**
     * Indicates whether the object is enable.
     * @param {boolean} [isEnabled] When provided, this method acts as a setter and sets the isEnabled value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isEnabled: function (isEnabled) {
        return this._propertyHandler("enabled", isEnabled, Convert.toBool);
    },

    /**
     * Indicates whether the object is focused.
     * @param {boolean} [isFocused] When provided, this method acts as a setter and sets the isFocused value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isFocused value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isFocused: function (isFocused) {
        return this._propertyHandler("focused", isFocused, Convert.toBool);
    },

    /**
     * The constant part of the window title.
     * @param {string} [windowClassRegExp] When provided, this method acts as a setter and sets the windowTitleRegExp value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored windowTitleRegExp value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    windowTitleRegExp: function (windowTitleRegExp) {
        return this._simplePropertyHandler("regexpwndtitle", windowTitleRegExp);
    },

    /**
     * Indicates whether the object is visible.
     * @param {boolean} [isVisible] When provided, this method acts as a setter and sets the isVisible value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isVisible value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isVisible: function (isVisible) {
        return this._propertyHandler("visible", isVisible, Convert.toBool);
    },

    /**
     * The text associated with the object.
     * @param {string} [text] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    text: function (text) {
        return this._simplePropertyHandler("text", text);
    },

    /**
     * @ignore 
     */
    _createUserKeysMapping: function (objectProperties) {
        var retObject = {};
        
        if(objectProperties){
            Object.keys(objectProperties).forEach(function (userKey) {
                retObject[userKey] = userKey;
            }, this);
        }
        
        return retObject;
    }
};

/**
 * @ignore
 */
var UIObjectBaseBehavior = {
    /**
     * @ignore
     * @memberof UIObjectBaseBehavior
     */
    _properties: {
        /**
         * Checks if the object is enabled.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object is enabled or not.
         */
        isEnabled: {
            wiredName: "enabled"
        },

        /**
         * Checks if the object is focused.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object is focused or not.
         */
        isFocused: {
            wiredName: "focused"
        },

        /**
         * Gets the native class of the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's native class.
         */
        nativeClass: {
            wiredName: "NativeClass"
        },

        /**
         * Returns the object's constant part of the title.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's constant part of the title.
         */
        windowTitleRegExp: {
            wiredName: "RegExpWndTitle"
        },

        /**
         * Checks if the object is visible.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object is visible or not.
         */
        isVisible: {
            wiredName: "visible"
        },

        /**
         * Returns the object's handle.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's handle.
         */
        handle: {
            wiredName: "hWnd"
        }
    },

    /**
     * @ignore
     * @memberof UIObjectBaseBehavior
     */
    _helpers:{
        /**
         * Moves the mouse to a location.
         * @param {Object} [location] The location details for the mouseMove operation.
         * @param {Position} [location.anchor = Position.center] The position within the object from which the offset is taken.
         * @param {Object} [location.offset] The offset from the anchor position.
         * @param {number} [location.offset.x = 0] The x-coordinate of the offset.
         * @param {number} [location.offset.y = 0] The y-coordinate of the offset.
         * @returns {Promise<void>} a promise that is fulfilled when the mouseMove operation ends.
         */
        mouseMove: function (location) {
            return this._executeWithEvents(arguments, "MouseMove", Location(location));
        }
    }
};

Utils.combineBehaviors(UIObjectBaseBehavior, LocationInfoProvider);
Utils.combineBehaviors(UIObjectBaseBehavior, ClickBehavior);
Utils.combineBehaviors(UIObjectBaseBehavior, DoubleClickBehavior);
Utils.combineBehaviors(UIObjectBaseBehavior, DragAndDropBehavior);
Utils.combineBehaviors(UIObjectBaseBehavior, SendKeysBehavior);
Utils.combineBehaviors(UIObjectBaseBehavior, WaitUntilEnabledBehavior);
Utils.combineBehaviors(UIObjectBaseBehavior, WaitUntilVisibleBehavior);

module.exports.UIObjectBaseBehavior = UIObjectBaseBehavior;
module.exports.UIObjectDescriptionBaseBehavior = UIObjectDescriptionBaseBehavior;