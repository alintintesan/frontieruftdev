// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

//Consts
var sendKeysWiredName = "Type";

/**
 * The class to implement sendkey action.
 * @ignore
 */
var SendKeysBehavior = {
    /**
     * @ignore
     * @memberof SendKeysBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Sends keyboard keys to an object.
         * @function
         * @param {string} [input] The string to send to the object. Use {@link FunctionKeys} and {@link Keys} for special keys.
         * @param {KeyModifier} [modifiers = KeyModifier.none] The modifier keys. Use {@link KeyModifier} for this parameter.
         * @returns {Promise<void>} a promise that is fulfilled when the sendKeys operation ends.
         */
        sendKeys: {
            wiredName: sendKeysWiredName,
            exec: function (input, modifiers) {
                if (input == null)
                    input = "";
                if (modifiers == null)
                    modifiers = KeyModifier.none;
                var nativeInput = this._convertLeanFtKeysConstsToNativeConsts(input);
                nativeInput = this._addModifiersToNativeInputForTypeMethod(nativeInput, modifiers);

                return this._executeWithEvents(arguments, sendKeysWiredName, nativeInput);
            }
        }
    },

    _helpers: {
        _convertLeanFtKeysConstsToNativeConsts: function (input) {
            var convertedInputString = "";
            var keysPrefix = prefix;
            var keysSuffix = suffix;

            var keysPrefixLength = keysPrefix.length;

            var suspectPrefixIndex = input.indexOf(keysPrefix);
            if (suspectPrefixIndex < 0) {
                //no suspects found
                return input;
            }

            //prefix of suspect found
            var currentSearchStartindex = 0;

            while (suspectPrefixIndex >= 0) {
                var suspectSuffixIndex = input.indexOf(keysSuffix, suspectPrefixIndex);
                if (suspectSuffixIndex < 0) {
                    //no more suspects (no more suffixes found)
                    convertedInputString = convertedInputString + input.substring(currentSearchStartindex);
                    return convertedInputString;
                }

                //Append input part up until the suspect as is
                var inputPartWithoutSuspectsLength = suspectPrefixIndex - currentSearchStartindex;
                if (inputPartWithoutSuspectsLength > 0) {
                    //Append the input part from previous search up to the current found suspect prefix
                    //since this part does not include any suspects, it should be appended as is.
                    convertedInputString = convertedInputString + input.substr(currentSearchStartindex, inputPartWithoutSuspectsLength);
                }

                //suspect found (both prefix and suffix found)
                var suspectLength = suspectSuffixIndex - suspectPrefixIndex + 1;
                var suspectString = input.substr(suspectPrefixIndex, suspectLength);

                //test the suspect
                if (this._isContainSuspectStringInConverter(suspectString)) {
                    //suspect confirmed - Append the converted to native consts, replacing the confirmed suspect
                    convertedInputString = convertedInputString + this._convertKeysToNativeString(suspectString);
                    currentSearchStartindex = suspectSuffixIndex + 1;
                }
                else {
                    //suspect not confirmed, Append the not confirmed suspect prefix so that it will be as is in the converted string
                    //and continue searching
                    convertedInputString = convertedInputString + keysPrefix;
                    currentSearchStartindex = suspectPrefixIndex + keysPrefixLength;//continue searching right after the not confirmed suspect prefix
                }

                suspectPrefixIndex = input.indexOf(keysPrefix, currentSearchStartindex);
            }

            //add the final part - since we haven't reached the end of the input string
            if (currentSearchStartindex < input.length) {
                convertedInputString = convertedInputString + input.substring(currentSearchStartindex);
            }

            return convertedInputString;
        },

        _addModifiersToNativeInputForTypeMethod: function (convertedInputString, modifiers) {
            if (modifiers != KeyModifier.none) {
                var prefix = "";
                var suffix = "";
                Object.keys(KeyModifier).forEach(function (key) {
                    var keyMod = KeyModifier[key];
                    if (modifiers & keyMod) {
                        var downUpNativeConsts = this._convertKeyModifierToNativeDownUpStrings(keyMod);
                        prefix = prefix + downUpNativeConsts[0];
                        suffix = suffix + downUpNativeConsts[1];
                    }
                }, this);

                convertedInputString = prefix + convertedInputString + suffix;
            }

            return convertedInputString;
        },

        _isContainSuspectStringInConverter: function (suspectString) {
            return this._isKeySupported(suspectString);
        },

        _convertKeysToNativeString: function (suspectString) {
            if (suspectString in FunctionKeysToNativeConsts) {
                return FunctionKeysToNativeConsts[suspectString];
            }
            return KeysToNativeConsts[suspectString];
        },

        _isKeySupported: function (suspectString) {
            return (suspectString in KeysToNativeConsts) || (suspectString in FunctionKeysToNativeConsts);
        },

        _convertKeyModifierToNativeDownUpStrings: function (keyModifier) {
            return ModifierToNativeDownUpConsts[keyModifier];
        }
    }
};

var prefix = "<__";
var suffix = ">";

/**
 * Represents the function keys.
 * @enum
 */
var FunctionKeys = {
    /**
    * Key F1.
    * @type {string}
    */
    f1: prefix + "F1" + suffix,

    /**
    * Key F2.
    * @type {string}
    */
    f2: prefix + "F2" + suffix,

    /**
    * Key F3.
    * @type {string}
    */
    f3: prefix + "F3" + suffix,

    /**
    * Key F4.
    * @type {string}
    */
    f4: prefix + "F4" + suffix,

    /**
    * Key F5.
    * @type {string}
    */
    f5: prefix + "F5" + suffix,

    /**
    * Key F6.
    * @type {string}
    */
    f6: prefix + "F6" + suffix,

    /**
    * Key F7.
    * @type {string}
    */
    f7: prefix + "F7" + suffix,

    /**
    * Key F8.
    * @type {string}
    */
    f8: prefix + "F8" + suffix,

    /**
    * Key F9.
    * @type {string}
    */
    f9: prefix + "F9" + suffix,

    /**
    * Key F10.
    * @type {string}
    */
    f10: prefix + "F10" + suffix,

    /**
    * Key F11.
    * @type {string}
    */
    f11: prefix + "F11" + suffix,

    /**
    * Key F12.
    * @type {string}
    */
    f12: prefix + "F12" + suffix,
};

/**
 * Represents keyboard keys.
 * @enum
 */
var Keys = {
    /**
    * Key INSERT
    * @type {string}
    */
    insert: prefix + "INSERT" + suffix,

    /**
    * Key DELETE
    * @type {string}
    */
    delete: prefix + "DELETE" + suffix,

    /**
    * Key HOME
    * @type {string}
    */
    home: prefix + "HOME" + suffix,

    /**
    * Key END
    * @type {string}
    */
    end: prefix + "END" + suffix,

    /**
    * Key PAGE UP
    * @type {string}
    */
    pageUp: prefix + "PGUP" + suffix,

    /**
    * Key PAGE DOWN
    * @type {string}
    */
    pageDown: prefix + "PGDN" + suffix,

    /**
    * Key UP
    * @type {string}
    */
    up: prefix + "UP" + suffix,

    /**
    * Key DOWN
    * @type {string}
    */
    down: prefix + "DOWN" + suffix,

    /**
    * Key LEFT
    * @type {string}
    */
    left: prefix + "LEFT" + suffix,

    /**
    * Key RIGHT
    * @type {string}
    */
    right: prefix + "RIGHT" + suffix,

    /**
    * Key ESC
    * @type {string}
    */
    esc: prefix + "ESC" + suffix,

    /**
    * Key BACKSPACE
    * @type {string}
    */
    backspace: prefix + "BACKSPACE" + suffix,

    /**
    * Key ENTER
    * @type {string}
    */
    return: prefix + "ENTER" + suffix,

    /**
    * Key TAB
    * @type {string}
    */
    tab: prefix + "TAB" + suffix,

    /**
    * Key PAUSE/BREAK
    * @type {string}
    */
    pause: prefix + "PAUSE" + suffix,

    /**
    * Key PRINT SCREEN
    * @type {string}
    */
    printScr: prefix + "PRINTSCR" + suffix,

    /**
    * Key APPLICATION
    * @type {string}
    */
    appKey: prefix + "APPLICATION" + suffix,

    /**
    * Key F1
    * @type {string}
    */
    f1: FunctionKeys.f1,

    /**
    * Key F2
    * @type {string}
    */
    f2: FunctionKeys.f2,

    /**
    * Key F3
    * @type {string}
    */
    f3: FunctionKeys.f3,

    /**
    * Key F4
    * @type {string}
    */
    f4: FunctionKeys.f4,

    /**
    * Key F5
    * @type {string}
    */
    f5: FunctionKeys.f5,

    /**
    * Key F6
    * @type {string}
    */
    f6: FunctionKeys.f6,

    /**
    * Key F7
    * @type {string}
    */
    f7: FunctionKeys.f7,

    /**
    * Key F8
    * @type {string}
    */
    f8: FunctionKeys.f8,

    /**
    * Key F9
    * @type {string}
    */
    f9: FunctionKeys.f9,

    /**
    * Key F10
    * @type {string}
    */
    f10: FunctionKeys.f10,

    /**
    * Key F11
    * @type {string}
    */
    f11: FunctionKeys.f11,

    /**
    * Key F12
    * @type {string}
    */
    f12: FunctionKeys.f12,

    /**
    * Key NUMLOCK ON
    * @type {string}
    */
    numLockOn: prefix + "NUMLOCKON" + suffix,

    /**
    * Key CAPS LOCK ON
    * @type {string}
    */
    capsLockOn: prefix + "CAPSLOCKON" + suffix,

    /**
    * Key SCROLL LOCK ON
    * @type {string}
    */
    scrollLockOn: prefix + "SCROLLLOCKON" + suffix,

    /**
    * Key NUMLOCK OFF
    * @type {string}
    */
    numLockOff: prefix + "NUMLOCKOFF" + suffix,

    /**
    * Key CAPS LOCK OFF
    * @type {string}
    */
    capsLockOff: prefix + "CAPSLOCKOFF" + suffix,

    /**
    * Key SCROLL LOCK OFF
    * @type {string}
    */
    scrollLockOff: prefix + "SCROLLLOCKOFF" + suffix,
};

/**
 * Represents additional pressed keys.
 * @enum
 */
var KeyModifier = {
    /**
    * No Modifier
    * @type {number}
    */
    none: 0,

    /**
    * Key CTRL is pressed
    * @type {number}
    */
    ctrl: 1,

    /**
    * Key left CTRL is pressed
    * @type {number}
    */
    leftCtrl: 2,

    /**
    * Key right CTRL is pressed
    * @type {number}
    */
    rightCtrl: 4,

    /**
    * Key ALT is pressed
    * @type {number}
    */
    alt: 8,

    /**
    * Key left ALT is pressed
    * @type {number}
    */
    leftAlt: 16,

    /**
    * Key right ALT is pressed
    * @type {number}
    */
    rightAlt: 32,

    /**
    * Key SHIFT is pressed
    * @type {number}
    */
    shift: 64,

    /**
    * Key left SHIFT is pressed
    * @type {number}
    */
    leftShift: 128,

    /**
    * Key right SHIFT is pressed
    * @type {number}
    */
    rightShift: 256,

    /**
    * Key WINDOW is pressed
    * @type {number}
    */
    windowsLogo: 512,

    /**
    * Key left WINDOW is pressed
    * @type {number}
    */
    leftWindowsLogo: 1024,

    /**
    * Key right WINDOW is pressed
    * @type {number}
    */
    rightWindowsLogo: 2048
};

var KeysToNativeConsts = {
};
KeysToNativeConsts[Keys.insert] = "<__MicIns>";
KeysToNativeConsts[Keys.delete] = "<__MicDel>";
KeysToNativeConsts[Keys.home] = "<__MicHome>";
KeysToNativeConsts[Keys.end] = "<__MicEnd>";
KeysToNativeConsts[Keys.pageUp] = "<__MicPgUp>";
KeysToNativeConsts[Keys.pageDown] = "<__MicPgDwn>";

KeysToNativeConsts[Keys.up] = "<__MicUp>";
KeysToNativeConsts[Keys.down] = "<__MicDwn>";
KeysToNativeConsts[Keys.left] = "<__MicLeft>";
KeysToNativeConsts[Keys.right] = "<__MicRight>";
KeysToNativeConsts[Keys.esc] = "<__MicEsc>";
KeysToNativeConsts[Keys.backspace] = "<__MicBack>";    

KeysToNativeConsts[Keys.return] = "<__MicReturn>";
KeysToNativeConsts[Keys.tab] = "<__MicTab>";
KeysToNativeConsts[Keys.pause] = "<__MicPause>";
KeysToNativeConsts[Keys.printScr] = "<__MicPrintScr>";
KeysToNativeConsts[Keys.appKey] = "<__MicAppKey>";

KeysToNativeConsts[Keys.numLockOn] = "<__MicNumLockOn>";
KeysToNativeConsts[Keys.capsLockOn] = "<__MicCapsLockOn>";
KeysToNativeConsts[Keys.scrollLockOn] = "<__MicScrollOn>";
KeysToNativeConsts[Keys.numLockOff] = "<__MicNumLockOff>";
KeysToNativeConsts[Keys.capsLockOff] = "<__MicCapsLockOff>";
KeysToNativeConsts[Keys.scrollLockOff] = "<__MicScrollOff>";

var FunctionKeysToNativeConsts = {
};

FunctionKeysToNativeConsts[Keys.f1] = "<__MicF1>";
FunctionKeysToNativeConsts[Keys.f2] = "<__MicF2>";
FunctionKeysToNativeConsts[Keys.f3] = "<__MicF3>";
FunctionKeysToNativeConsts[Keys.f4] = "<__MicF4>";
FunctionKeysToNativeConsts[Keys.f5] = "<__MicF5>";
FunctionKeysToNativeConsts[Keys.f6] = "<__MicF6>";
FunctionKeysToNativeConsts[Keys.f7] = "<__MicF7>";
FunctionKeysToNativeConsts[Keys.f8] = "<__MicF8>";
FunctionKeysToNativeConsts[Keys.f9] = "<__MicF9>";
FunctionKeysToNativeConsts[Keys.f10] = "<__MicF10>";
FunctionKeysToNativeConsts[Keys.f11] = "<__MicF11>";
FunctionKeysToNativeConsts[Keys.f12] = "<__MicF12>";



var ModifierToNativeConsts = {
};

ModifierToNativeConsts[KeyModifier.ctrl] = "<__MicCtrl>";
ModifierToNativeConsts[KeyModifier.alt] = "<__MicAlt>";
ModifierToNativeConsts[KeyModifier.shift] = "<__MicShift>";

var ModifierToNativeDownUpConsts = {
};

ModifierToNativeDownUpConsts[KeyModifier.ctrl] = ["<__MicCtrlDwn>", "<__MicCtrlUp>"];
ModifierToNativeDownUpConsts[KeyModifier.leftCtrl] = ["<__MicLCtrlDwn>", "<__MicLCtrlUp>"];
ModifierToNativeDownUpConsts[KeyModifier.rightCtrl] = ["<__MicRCtrlDwn>", "<__MicRCtrlUp>"];
ModifierToNativeDownUpConsts[KeyModifier.alt] = ["<__MicAltDwn>", "<__MicAltUp>"];
ModifierToNativeDownUpConsts[KeyModifier.leftAlt] = ["<__MicLAltDwn>", "<__MicLAltUp>"];
ModifierToNativeDownUpConsts[KeyModifier.rightAlt] = ["<__MicRAltDwn>", "<__MicRAltUp>"];
ModifierToNativeDownUpConsts[KeyModifier.shift] = ["<__MicShiftDwn>", "<__MicShiftUp>"];
ModifierToNativeDownUpConsts[KeyModifier.leftShift] = ["<__MicLShiftDwn>", "<__MicLShiftUp>"];
ModifierToNativeDownUpConsts[KeyModifier.rightShift] = ["<__MicRShiftDwn>", "<__MicRShiftUp>"];
ModifierToNativeDownUpConsts[KeyModifier.windowsLogo] = ["<__MicWinLogoDwn>", "<__MicWinLogoUp>"];
ModifierToNativeDownUpConsts[KeyModifier.leftWindowsLogo] = ["<__MicLWinLogoDwn>", "<__MicLWinLogoUp>"];
ModifierToNativeDownUpConsts[KeyModifier.rightWindowsLogo] = ["<__MicRWinLogoDwn>", "<__MicRWinLogoUp>"];

var SendKeysHelper = {
    modifierToNativeConsts: ModifierToNativeConsts,
    keysToNativeConsts: KeysToNativeConsts,
    modifierToNativeDownUpConsts: ModifierToNativeDownUpConsts,
    functionKeysToNativeConsts: FunctionKeysToNativeConsts
};

module.exports.SendKeysBehavior = SendKeysBehavior;
module.exports.KeyModifier = KeyModifier;
module.exports.Keys = Keys;
module.exports.FunctionKeys = FunctionKeys;
module.exports.SendKeysHelper = SendKeysHelper;