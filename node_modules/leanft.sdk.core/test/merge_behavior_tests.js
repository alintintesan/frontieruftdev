// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var assert = require("assert");
var sinon = require("sinon");
var ObjectUtils = require("../lib/object_utils.js").ObjectUtils;

var MergeBehavior = require("../lib/merge_behavior");

describe("MergeBehavior tests", function () {
    var mergeBehaviorUnderTest;

    beforeEach(function () {
        mergeBehaviorUnderTest = {};
        ObjectUtils.extend(mergeBehaviorUnderTest, MergeBehavior);
    });

    describe("_mergeBehavior", function () {
        it("should save all behaviors in call order", function () {
            var behavior1 = {a:"aa"};
            var behavior2 = {z:"zz"};

            mergeBehaviorUnderTest._mergeBehavior(behavior1);
            mergeBehaviorUnderTest._mergeBehavior(behavior2);

            assert.deepEqual(mergeBehaviorUnderTest._behaviors, [behavior1, behavior2]);
        });

        it("should ignore members not under _helpers, _methods, _properties or _additionalProperties", function () {
            var behavior = {a:"aa"};
            mergeBehaviorUnderTest._mergeBehavior(behavior);

            assert.equal(mergeBehaviorUnderTest.a, undefined);
        });

        it("should flatten _methods", function () {
            var someMethodStub = sinon.stub();
            var behavior = {
                _methods: {
                    someMethod: someMethodStub
                }
            };

            mergeBehaviorUnderTest._mergeBehavior(behavior);
            assert.strictEqual(mergeBehaviorUnderTest.someMethod, someMethodStub);
        });

        it("should flatten _helpers", function () {
            var behavior = {
                _helpers: {
                    someHelper: sinon.stub()
                }
            };

            mergeBehaviorUnderTest._mergeBehavior(behavior);
            assert.strictEqual(mergeBehaviorUnderTest.someHelper, behavior._helpers.someHelper);
        });

        it("should fill default wired name on the behavior for _additionalProperties", function () {
            var behavior = {
                _additionalProperties: {
                    a: {someMetaKey: "someMetaValue"}
                }
            };

            mergeBehaviorUnderTest._mergeBehavior(behavior);
            assert.deepEqual(behavior._additionalProperties.a,
                {
                    wiredName: "a",
                    someMetaKey: "someMetaValue"
                });
        });

        describe("_properties", function () {
            var somePropertyGetterFunc;

            beforeEach(function () {
                somePropertyGetterFunc = sinon.stub();
                mergeBehaviorUnderTest._getROProperty = sinon.stub();
            });

            it("should flatten function property", function () {
                var behavior = {
                    _properties: {
                        someProperty: somePropertyGetterFunc
                    }
                };

                mergeBehaviorUnderTest._mergeBehavior(behavior);
                assert.strictEqual(mergeBehaviorUnderTest.someProperty, somePropertyGetterFunc);
            });

            it("should mark function property as nonTranslatable", function () {
                var behavior = {
                    _properties: {
                        someProperty: somePropertyGetterFunc
                    }
                };

                mergeBehaviorUnderTest._mergeBehavior(behavior);
                assert.strictEqual(behavior._properties.someProperty.nonTranslatable, true);
            });

            it("should flatten object with getter property", function () {
                var behavior = {
                    _properties: {
                        someProperty: {
                            getter: somePropertyGetterFunc
                        }
                    }
                };

                mergeBehaviorUnderTest._mergeBehavior(behavior);
                assert.strictEqual(mergeBehaviorUnderTest.someProperty, somePropertyGetterFunc);
            });

            it("should set wiredName in the behavior to property name if no wiredName is set", function () {
                var behavior = {
                    _properties: {
                        someProperty: {
                            getter: somePropertyGetterFunc
                        }
                    }
                };

                mergeBehaviorUnderTest._mergeBehavior(behavior);
                assert.equal(behavior._properties.someProperty.wiredName, "someProperty");
            });
            
            it("should implement default getter using wiredName if no getter set", function () {
                var behavior = {
                    _properties: {
                        someProperty: {
                            wiredName: "someWiredName"
                        }
                    }
                };

                mergeBehaviorUnderTest._mergeBehavior(behavior);
                mergeBehaviorUnderTest.someProperty();

                sinon.assert.calledWith(mergeBehaviorUnderTest._getROProperty, "someWiredName");
            });

            it("should implement default getter with default wiredName if no getter and not wiredName set", function () {
                var behavior = {
                    _properties: {
                        someProperty: {}
                    }
                };

                mergeBehaviorUnderTest._mergeBehavior(behavior);
                mergeBehaviorUnderTest.someProperty();

                sinon.assert.calledWith(mergeBehaviorUnderTest._getROProperty, "someProperty");
            });
        });
    });
});