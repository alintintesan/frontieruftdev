// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/*
 * Created on 06/17/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var ObjectUtils = require("../lib/object_utils.js").ObjectUtils;

describe("MenuHelperBehavior ", function () {

    var MenuHelperBehavior = require("../lib/menu_helper.js").MenuHelperBehavior;
    var menuHelperUnderTest;

    beforeEach(function () {
        menuHelperUnderTest = ObjectUtils.mergeTestBehavior(MenuHelperBehavior);
    });

    describe("buildMenuPath method", function () {
        it("should throw error if menuPathParts is undefined", function () {
            assert.throws(function () {
                menuHelperUnderTest._buildMenuPath();
            });
        });

        it("should throw error if menuPathParts is null", function () {
            assert.throws(function () {
                menuHelperUnderTest._buildMenuPath(null);
            });
        });

        it("should throw error if menuPathParts contains a number < 1", function () {
            assert.throws(function () {
                menuHelperUnderTest._buildMenuPath("Menu1", "Menu2", 0, 1);
            });
        });

        it("should throw error if menuPathParts contains a type diffrenet from string and int", function () {
            assert.throws(function () {
                menuHelperUnderTest._buildMenuPath("Menu1", "Menu2", {}, 1);
            });
        });

        it("should return correct path if menuPathParts contains string only", function () {
            var res = menuHelperUnderTest._buildMenuPath("Menu1", "Menu2", "Menu3");
            assert.equal(res, "Menu1;Menu2;Menu3");
        });

        it("should return correct path if menuPathParts contains int only", function () {
            var res = menuHelperUnderTest._buildMenuPath(1,2,3);
            assert.equal(res, "<Item 1>;<Item 2>;<Item 3>");
        });

        it("should return correct path if menuPathParts contains string and int", function () {
            var res = menuHelperUnderTest._buildMenuPath("Menu1", 2, "Menu3");
            assert.equal(res, "Menu1;<Item 2>;Menu3");
        });
    });
});