// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var ObjectUtils = require("./../lib/object_utils.js").ObjectUtils;

describe("WindowObjectDescriptionBaseBehavior Description", function () {

    var WindowObjectDescriptionBaseBehavior = require("../lib/window_base_behavior.js").WindowObjectDescriptionBaseBehavior;
    var ObjectUtils = require("../lib/object_utils.js").ObjectUtils;
    var DescriptionBase = require("../lib/description_base.js");
    var windowDescriptionUnderTest;

    beforeEach(function () {
        windowDescriptionUnderTest = new DescriptionBase();
        windowDescriptionUnderTest._init({
            technology: "Technology",
            leanftType: "TestObject"
        });

        ObjectUtils.extend(windowDescriptionUnderTest, WindowObjectDescriptionBaseBehavior);
    });

    describe("isActive method", function () {
        it("should add 'Foreground' to _properties when value is given", function () {
            windowDescriptionUnderTest.isActive(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["Foreground"], true);
        });

        it("should add 'Foreground' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isActive("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["Foreground"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isActive(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'Foreground' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["Foreground"] = true;
            windowDescriptionUnderTest.isActive(null);
            assert(!("Foreground" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'Foreground' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["Foreground"] = true;
            var result = windowDescriptionUnderTest.isActive();
            assert.equal(result, true);
        });
    });

    describe("hasBorder method", function () {
        it("should add 'HasBorder' to _properties when value is given", function () {
            windowDescriptionUnderTest.hasBorder(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["HasBorder"], true);
        });

        it("should add 'HasBorder' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.hasBorder("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["HasBorder"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.hasBorder(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'HasBorder' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["HasBorder"] = true;
            windowDescriptionUnderTest.hasBorder(null);
            assert(!("HasBorder" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'HasBorder' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["HasBorder"] = true;
            var result = windowDescriptionUnderTest.hasBorder();
            assert.equal(result, true);
        });
    });

    describe("hasCaption method", function () {
        it("should add 'HasCaption' to _properties when value is given", function () {
            windowDescriptionUnderTest.hasCaption(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["HasCaption"], true);
        });

        it("should add 'HasCaption' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.hasCaption("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["HasCaption"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.hasCaption(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'HasCaption' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["HasCaption"] = true;
            windowDescriptionUnderTest.hasCaption(null);
            assert(!("HasCaption" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'HasCaption' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["HasCaption"] = true;
            var result = windowDescriptionUnderTest.hasCaption();
            assert.equal(result, true);
        });
    });

    describe("hasSizebox method", function () {
        it("should add 'HasSizebox' to _properties when value is given", function () {
            windowDescriptionUnderTest.hasSizebox(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["HasSizebox"], true);
        });

        it("should add 'HasSizebox' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.hasSizebox("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["HasSizebox"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.hasSizebox(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'HasSizebox' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["HasSizebox"] = true;
            windowDescriptionUnderTest.hasSizebox(null);
            assert(!("HasSizebox" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'HasSizebox' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["HasSizebox"] = true;
            var result = windowDescriptionUnderTest.hasSizebox();
            assert.equal(result, true);
        });
    });

    describe("hasSystemMenu method", function () {
        it("should add 'HasSystemMenu' to _properties when value is given", function () {
            windowDescriptionUnderTest.hasSystemMenu(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["HasSystemMenu"], true);
        });

        it("should add 'HasSystemMenu' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.hasSystemMenu("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["HasSystemMenu"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.hasSystemMenu(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'HasSystemMenu' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["HasSystemMenu"] = true;
            windowDescriptionUnderTest.hasSystemMenu(null);
            assert(!("HasSystemMenu" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'HasSystemMenu' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["HasSystemMenu"] = true;
            var result = windowDescriptionUnderTest.hasSystemMenu();
            assert.equal(result, true);
        });
    });

    describe("isMdiChildWindow method", function () {
        it("should add 'IsMdiChildWindow' to _properties when value is given", function () {
            windowDescriptionUnderTest.isMdiChildWindow(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["IsMdiChildWindow"], true);
        });

        it("should add 'IsMdiChildWindow' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isMdiChildWindow("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["IsMdiChildWindow"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isMdiChildWindow(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'IsMdiChildWindow' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["IsMdiChildWindow"] = true;
            windowDescriptionUnderTest.isMdiChildWindow(null);
            assert(!("IsMdiChildWindow" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'IsMdiChildWindow' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["IsMdiChildWindow"] = true;
            var result = windowDescriptionUnderTest.isMdiChildWindow();
            assert.equal(result, true);
        });
    });

    describe("isPopupWindow method", function () {
        it("should add 'IsPopupWindow' to _properties when value is given", function () {
            windowDescriptionUnderTest.isPopupWindow(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["IsPopupWindow"], true);
        });

        it("should add 'IsPopupWindow' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isPopupWindow("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["IsPopupWindow"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isPopupWindow(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'IsPopupWindow' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["IsPopupWindow"] = true;
            windowDescriptionUnderTest.isPopupWindow(null);
            assert(!("IsPopupWindow" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'IsPopupWindow' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["IsPopupWindow"] = true;
            var result = windowDescriptionUnderTest.isPopupWindow();
            assert.equal(result, true);
        });
    });

    describe("isToolWindow method", function () {
        it("should add 'IsToolWindow' to _properties when value is given", function () {
            windowDescriptionUnderTest.isToolWindow(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["IsToolWindow"], true);
        });

        it("should add 'IsToolWindow' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isToolWindow("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["IsToolWindow"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isToolWindow(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'IsToolWindow' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["IsToolWindow"] = true;
            windowDescriptionUnderTest.isToolWindow(null);
            assert(!("IsToolWindow" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'IsToolWindow' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["IsToolWindow"] = true;
            var result = windowDescriptionUnderTest.isToolWindow();
            assert.equal(result, true);
        });
    });

    describe("isMaximizable method", function () {
        it("should add 'Maximizable' to _properties when value is given", function () {
            windowDescriptionUnderTest.isMaximizable(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["Maximizable"], true);
        });

        it("should add 'Maximizable' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isMaximizable("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["Maximizable"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isMaximizable(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'Maximizable' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["Maximizable"] = true;
            windowDescriptionUnderTest.isMaximizable(null);
            assert(!("Maximizable" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'Maximizable' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["Maximizable"] = true;
            var result = windowDescriptionUnderTest.isMaximizable();
            assert.equal(result, true);
        });
    });

    describe("isMinimizable method", function () {
        it("should add 'Minimizable' to _properties when value is given", function () {
            windowDescriptionUnderTest.isMinimizable(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["Minimizable"], true);
        });

        it("should add 'Minimizable' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isMinimizable("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["Minimizable"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isMinimizable(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'Minimizable' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["Minimizable"] = true;
            windowDescriptionUnderTest.isMinimizable(null);
            assert(!("Minimizable" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'Minimizable' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["Minimizable"] = true;
            var result = windowDescriptionUnderTest.isMinimizable();
            assert.equal(result, true);
        });
    });

    describe("isTopmost method", function () {
        it("should add 'Topmost' to _properties when value is given", function () {
            windowDescriptionUnderTest.isTopmost(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["Topmost"], true);
        });

        it("should add 'Topmost' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isTopmost("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["Topmost"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isTopmost(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'Topmost' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["Topmost"] = true;
            windowDescriptionUnderTest.isTopmost(null);
            assert(!("Topmost" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'Topmost' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["Topmost"] = true;
            var result = windowDescriptionUnderTest.isTopmost();
            assert.equal(result, true);
        });
    });
});

describe("Window Base Test Object", function () {

    var WindowObjectBaseBehavior = require("../lib/window_base_behavior.js").WindowObjectBaseBehavior;
    var windowBaseTOUnderTest;

    beforeEach(function () {
        windowBaseTOUnderTest = ObjectUtils.mergeTestBehavior(WindowObjectBaseBehavior);
        windowBaseTOUnderTest._executeWithEvents = sinon.stub();
    });

    afterEach(function () {
        delete windowBaseTOUnderTest._executeWithEvents;
    });

    describe("close method", function () {
        it("should execute _executeWithEvents 'Close'", function () {
            windowBaseTOUnderTest.close();
            sinon.assert.calledOnce(windowBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowBaseTOUnderTest._executeWithEvents, sinon.match({}), "Close");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            windowBaseTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = windowBaseTOUnderTest.close();
            assert.equal(res, executionPromise);
        });
    });

    describe("maximize method", function () {
        it("should execute _executeWithEvents 'Maximize'", function () {
            windowBaseTOUnderTest.maximize();
            sinon.assert.calledOnce(windowBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowBaseTOUnderTest._executeWithEvents, sinon.match({}), "Maximize");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            windowBaseTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = windowBaseTOUnderTest.maximize();
            assert.equal(res, executionPromise);
        });
    });

    describe("move method", function () {
        it("should throw error if null passed", function () {
            assert.throws(function () {
                windowBaseTOUnderTest.move(null);
            });
        });
        it("should return the execution promise", function () {
            var executionPromise = {};
            windowBaseTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = windowBaseTOUnderTest.move(500, 500);
            assert.equal(res, executionPromise);
        });
        it("should call _executeWithEvents and pass it the correct arguments when two numbers passed", function () {
            windowBaseTOUnderTest.move(500, 600);
            assert(windowBaseTOUnderTest._executeWithEvents.calledOnce);
            assert.deepEqual(windowBaseTOUnderTest._executeWithEvents.firstCall.args.splice(1, 3), ["Move", 500, 600]);
        });
        it("should call _executeWithEvents and pass it the correct arguments when a point object passed", function () {
            windowBaseTOUnderTest.move({ x: 500, y: 600 });
            assert(windowBaseTOUnderTest._executeWithEvents.calledOnce);
            assert.deepEqual(windowBaseTOUnderTest._executeWithEvents.firstCall.args.splice(1, 3), ["Move", 500, 600]);
        });
        it("should throw error if one argument passed which is not an object", function () {
            assert.throws(function () {
                windowBaseTOUnderTest.move(500);
            });
        });
        it("should throw error if an object that not contains both properties passed", function () {
            assert.throws(function () {
                windowBaseTOUnderTest.move({});
            });
        });
        it("should throw error if an object that not contains two properties passed", function () {
            assert.throws(function () {
                windowBaseTOUnderTest.move({ x: 500 });
            });
        });
        it("should throw error if an object passed with two properties but the keys are not 'x' or 'y'", function () {
            assert.throws(function () {
                windowBaseTOUnderTest.move({ shimon: 500, y: 600 });
            });
        });
        it("should throw error if an object passed with two properties but one of the values is not a number", function () {
            assert.throws(function () {
                windowBaseTOUnderTest.move({ x: 500, y: "50A" });
            });
        });
        it("should throw error if an passed with two arguments but one of the values is not a number", function () {
            assert.throws(function () {
                windowBaseTOUnderTest.move(500, "50A");
            });
        });
    });

    describe("resize method", function () {
        it("should throw error if null passed", function () {
            assert.throws(function () {
                windowBaseTOUnderTest.resize(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            windowBaseTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = windowBaseTOUnderTest.resize(500, 500);
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments when two numbers passed", function () {
            windowBaseTOUnderTest.resize(500, 600);
            sinon.assert.calledOnce(windowBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowBaseTOUnderTest._executeWithEvents, sinon.match({ 0: 500, 1: 600 }), "Resize", 500, 600);
        });

        it("should call _executeWithEvents and pass it the correct arguments when a size object passed", function () {
            windowBaseTOUnderTest.resize({ width: 500, height: 600 });
            sinon.assert.calledOnce(windowBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowBaseTOUnderTest._executeWithEvents, sinon.match({ 0: { width: 500, height: 600 } }), "Resize", 500, 600);
        });

        it("should throw error if one argument passed which is not an object", function () {
            assert.throws(function () {
                windowBaseTOUnderTest.resize(500);
            });
        });

        it("should throw error if an object that not contains both properties passed", function () {
            assert.throws(function () {
                windowBaseTOUnderTest.resize({});
            });
        });

        it("should throw error if an object that not contains two properties passed", function () {
            assert.throws(function () {
                windowBaseTOUnderTest.resize({ width: 500 });
            });
        });

        it("should throw error if an object passed with two properties but the keys are not 'width' or 'height'", function () {
            assert.throws(function () {
                windowBaseTOUnderTest.resize({ shimon: 500, height: 600 });
            });
        });

        it("should throw error if an object passed with two properties but one of the values is not a number", function () {
            assert.throws(function () {
                windowBaseTOUnderTest.resize({ width: 500, height: "50A" });
            });
        });

        it("should throw error if an passed with two arguments but one of the values is not a number", function () {
            assert.throws(function () {
                windowBaseTOUnderTest.resize(500, "50A");
            });
        });
    });

    describe("restore method", function () {
        it("should execute _executeWithEvents 'Restore'", function () {
            windowBaseTOUnderTest.restore();
            sinon.assert.calledOnce(windowBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowBaseTOUnderTest._executeWithEvents, sinon.match({}), "Restore");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            windowBaseTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = windowBaseTOUnderTest.restore();
            assert.equal(res, executionPromise);
        });
    });
});


describe("Window Base Test Object Extended Behavior", function () {
    var WindowState = require("../lib/window_state_and_styles.js").WindowState;
    var MouseButton = require("../lib/clickbehavior.js").MouseButton;
    var WindowObjectBaseExtendedBehavior = require("../lib/window_base_behavior.js").WindowObjectBaseExtendedBehavior;
    var windowBaseExtendedTOUnderTest;

    beforeEach(function () {
        windowBaseExtendedTOUnderTest = ObjectUtils.mergeTestBehavior(WindowObjectBaseExtendedBehavior);
        windowBaseExtendedTOUnderTest._executeWithEvents = sinon.stub();
        windowBaseExtendedTOUnderTest._getROProperty = sinon.stub();
        windowBaseExtendedTOUnderTest._getROProperties = sinon.stub();
    });

    afterEach(function () {
        delete windowBaseExtendedTOUnderTest._executeWithEvents;
        delete windowBaseExtendedTOUnderTest._getROProperty;
        delete windowBaseExtendedTOUnderTest._getROProperties;
    });

    describe("isMaximizable method", function () {
        it("should execute _getROProperty 'Maximizable'", function () {
            windowBaseExtendedTOUnderTest.isMaximizable();
            sinon.assert.calledOnce(windowBaseExtendedTOUnderTest._getROProperty);
            sinon.assert.calledWith(windowBaseExtendedTOUnderTest._getROProperty, "Maximizable", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            windowBaseExtendedTOUnderTest._getROProperty.returns(promiseMock);
            var res = windowBaseExtendedTOUnderTest.isMaximizable();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isMinimizable method", function () {
        it("should execute _getROProperty 'Minimizable'", function () {
            windowBaseExtendedTOUnderTest.isMinimizable();
            sinon.assert.calledOnce(windowBaseExtendedTOUnderTest._getROProperty);
            sinon.assert.calledWith(windowBaseExtendedTOUnderTest._getROProperty, "Minimizable", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            windowBaseExtendedTOUnderTest._getROProperty.returns(promiseMock);
            var res = windowBaseExtendedTOUnderTest.isMinimizable();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("windowState method", function () {
        var promiseMock = { then: function (cb) { return cb([true, false]); } };
        it("should query the properties 'Maximized', 'Minimized'", function () {
            windowBaseExtendedTOUnderTest._getROProperties.returns(promiseMock);
            windowBaseExtendedTOUnderTest.windowState();
            sinon.assert.calledOnce(windowBaseExtendedTOUnderTest._getROProperties);
            assert.deepEqual(windowBaseExtendedTOUnderTest._getROProperties.firstCall.args, ["Maximized", "Minimized"]);
        });

        it("should return promise as WindowState", function () {
            windowBaseExtendedTOUnderTest._getROProperties.returns(promiseMock);
            var res = windowBaseExtendedTOUnderTest.windowState();
            assert.strictEqual(res, WindowState.maximized);
        });
    });

    describe("activate method", function () {
        it("should execute command 'Activate' if there is no button", function () {
            windowBaseExtendedTOUnderTest.activate();
            sinon.assert.calledOnce(windowBaseExtendedTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowBaseExtendedTOUnderTest._executeWithEvents, sinon.match({}), "Activate");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            windowBaseExtendedTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = windowBaseExtendedTOUnderTest.activate();
            assert.equal(res, executionPromise);
        });

        it("should execute command 'Activate' if button is null", function () {
            windowBaseExtendedTOUnderTest.activate(null);
            sinon.assert.calledOnce(windowBaseExtendedTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowBaseExtendedTOUnderTest._executeWithEvents, sinon.match({}), "Activate");
        });

        it("should execute command 'Activate' if button is 'left'", function () {
            windowBaseExtendedTOUnderTest.activate(MouseButton.left);
            sinon.assert.calledOnce(windowBaseExtendedTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowBaseExtendedTOUnderTest._executeWithEvents, sinon.match({ 0: MouseButton.left }), "Activate", MouseButton._convert(MouseButton.left));
        });

        it("should execute command 'Activate' if button is 'middle'", function () {
            windowBaseExtendedTOUnderTest.activate(MouseButton.middle);
            sinon.assert.calledOnce(windowBaseExtendedTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowBaseExtendedTOUnderTest._executeWithEvents, sinon.match({ 0: MouseButton.middle }), "Activate", MouseButton._convert(MouseButton.middle));
        });

        it("should execute command 'Activate' if button is 'right'", function () {
            windowBaseExtendedTOUnderTest.activate(MouseButton.right);
            sinon.assert.calledOnce(windowBaseExtendedTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowBaseExtendedTOUnderTest._executeWithEvents, sinon.match({ 0: MouseButton.right }), "Activate", MouseButton._convert(MouseButton.right));
        });

        it("should execute command 'Activate' with undefined if button is 'wrong'", function () {
            windowBaseExtendedTOUnderTest.activate("wrong");
            sinon.assert.calledOnce(windowBaseExtendedTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowBaseExtendedTOUnderTest._executeWithEvents, sinon.match({ 0: "wrong" }), "Activate", undefined);
        });
    });

    describe("minimize method", function () {
        it("should execute _executeWithEvents 'Minimize'", function () {
            windowBaseExtendedTOUnderTest.minimize();
            sinon.assert.calledOnce(windowBaseExtendedTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowBaseExtendedTOUnderTest._executeWithEvents, sinon.match({}), "Minimize");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            windowBaseExtendedTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = windowBaseExtendedTOUnderTest.minimize();
            assert.equal(res, executionPromise);
        });
    });

});

describe("Window Base Test Object Property Behaviors", function () {
    var WindowBasePropsBehavior = require("../lib/window_base_behavior.js").WindowBasePropsBehavior;
    var windowTestObjectUnderTest;

    beforeEach(function () {
        windowTestObjectUnderTest = ObjectUtils.mergeTestBehavior(WindowBasePropsBehavior);
        windowTestObjectUnderTest._getROProperty = sinon.stub();
        windowTestObjectUnderTest._getROProperties = sinon.stub();
    });

    afterEach(function () {
        delete windowTestObjectUnderTest._getROProperty;
        delete windowTestObjectUnderTest._getROProperties;
    });

    describe("isActive method", function () {
        it("should execute _getROProperty 'Foreground'", function () {
            windowTestObjectUnderTest.isActive();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "Foreground", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.isActive();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("hasBorder method", function () {
        it("should execute _getROProperty 'HasBorder'", function () {
            windowTestObjectUnderTest.hasBorder();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "HasBorder", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.hasBorder();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("hasCaption method", function () {
        it("should execute _getROProperty 'HasCaption'", function () {
            windowTestObjectUnderTest.hasCaption();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "HasCaption", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.hasCaption();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("hasSizebox method", function () {
        it("should execute _getROProperty 'HasSizebox'", function () {
            windowTestObjectUnderTest.hasSizebox();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "HasSizebox", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.hasSizebox();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("hasSystemMenu method", function () {
        it("should execute _getROProperty 'HasSystemMenu'", function () {
            windowTestObjectUnderTest.hasSystemMenu();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "HasSystemMenu", sinon.match({}));
        });
    });

    describe("isMdiChildWindow method", function () {
        it("should execute _getROProperty 'IsMdiChildWindow'", function () {
            windowTestObjectUnderTest.isMdiChildWindow();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "IsMdiChildWindow", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.isMdiChildWindow();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isPopupWindow method", function () {
        it("should execute _getROProperty 'IsPopupWindow'", function () {
            windowTestObjectUnderTest.isPopupWindow();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "IsPopupWindow", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.isPopupWindow();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isToolWindow method", function () {
        it("should execute _getROProperty 'IsToolWindow'", function () {
            windowTestObjectUnderTest.isToolWindow();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "IsToolWindow", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.isToolWindow();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isTopmost method", function () {
        it("should execute _getROProperty 'Topmost'", function () {
            windowTestObjectUnderTest.isTopmost();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "Topmost", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.isTopmost();
            assert.strictEqual(res, promiseMock);
        });
    });
});
