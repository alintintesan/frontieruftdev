// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/*
 * Created on 19/10/2015.
 * Unittests for object_utils file
 */


var assert = require("assert");
var sinon = require("sinon");

describe("ObjectUtils unit tests",function(){
   var ObjectUtils = require("../lib/object_utils.js").ObjectUtils;
   describe("extend",function(){
      it("should put all the properties on the object",function(){
         var obj = {
            x: 42,
            f: function(x,y){return x+y;}
         };
         var props = {
            y: 43,
            g: function(x,y){ return x-y;}
         };

         var res = ObjectUtils.extend(obj,props);

         assert.equal(res.x,obj.x);
         assert.equal(res.y,props.y);
         assert.equal(res.f,obj.f);
         assert.equal(res.g,props.g);
      });

      it("should override existing properties of obj",function(){
         var obj = {
            x: 42
         };
         var props = {
            x: 5
         };

         var res = ObjectUtils.extend(obj,props);

         assert.equal(res.x,props.x);
      });

      it("should copy properties with properties descriptor correctly",function(){
          var obj = {
              x: 42
          };
          var props = {
              x: 5
          };

         Object.defineProperty(props, 'newProp', {
             get: function() {
                 return "Something";
             },
             set: function() {
               console.log("setter called");
             },
             enumerable: true
         });

         var res = ObjectUtils.extend(obj,props);

         assert.equal(res.x,props.x);
         assert.notEqual(Object.getOwnPropertyDescriptor(res, 'newProp'), null);
         assert.deepEqual(Object.getOwnPropertyDescriptor(res, 'newProp'), Object.getOwnPropertyDescriptor(props, 'newProp'))
       });

       it("should copy array property correctly",function(){
           var obj = {
               x: 42
           };
           var props = {
               arr: [5,6]
           };

           ObjectUtils.extend(obj,props);
           assert.notEqual(obj.arr, props.arr);
           assert.deepEqual(obj.arr, props.arr);
       });
   });

   describe("inherit",function(){
      beforeEach(function(){
         this.Base = function(){};
         this.Base.prototype = {x: 42};
         this.Child = function(){};
      });
      it("should allow access to the base properties",function(){

         ObjectUtils.inherit(this.Child,this.Base,{y: 5});
         var objRes = new this.Child();

         assert.equal(objRes.x,42);
      });

      it("should override base properties with child properties",function(){
         ObjectUtils.inherit(this.Child,this.Base,{x: 5});
         var objRes = new this.Child();

         assert.equal(objRes.x,5);
      });

      it("should add property named __super to access the original base properties",function(){
         ObjectUtils.inherit(this.Child,this.Base,{x: 5});
         var objRes = new this.Child();

         assert.equal(objRes.__super.x,42);
      });

      it("should preserve the child as the constructor of the object",function(){
         ObjectUtils.inherit(this.Child,this.Base,{x: 5});
         var objRes = new this.Child();

         assert.equal(objRes.constructor,this.Child);
      });
   });

    it("should contain a function which acts as identity function",function(){
        var res = ObjectUtils.identity(42);
        assert.strictEqual(res,42);
    });

    describe("map",function(){
        var mapToConvert;
        beforeEach(function(){
            mapToConvert = {x: 12};
        });

        it("should convert the keys using the given function",function(){
            var keyFunc = sinon.stub().returns("a");
            var res = ObjectUtils.map(mapToConvert,keyFunc,ObjectUtils.identity);

            assert.deepEqual(res,{a:12});
            assert(keyFunc.calledOnce);
            assert(keyFunc.calledWith("x"));
        });

        it("should convert values using the given value transformation function",function(){
            var valTransform = sinon.stub().returns(24);
            var res = ObjectUtils.map({x: 12},ObjectUtils.identity,valTransform);

            assert.deepEqual(res,{x:24});
            assert(valTransform.calledOnce);
            assert(valTransform.calledWith(12));
        });

        it("should return null in case of null or undefined",function(){
            assert.strictEqual(null,ObjectUtils.map(null,function(){},function(){}));
        });

        it("should return empty object in case of null or undefined",function(){
            assert.deepEqual({},ObjectUtils.map({},ObjectUtils.identity,ObjectUtils.identity));
        });
    });

    describe("findKeyNameIgnoreCase", function () {
       it("should return correct key when casing match", function () {
          assert.strictEqual("kEY", ObjectUtils.findKeyNameIgnoreCase({kEY: "a"}, "kEY"));
       });

        it("should return correct key when casing don't match", function () {
            assert.strictEqual("kEY", ObjectUtils.findKeyNameIgnoreCase({kEY: "a"}, "Key"));
        });

        it("should return correct key when property is in the prototype of the object", function () {
            function MyObject() {}
            MyObject.prototype = {
              kEY: "a"
            };
            var myObject = new MyObject();
            assert.strictEqual("kEY", ObjectUtils.findKeyNameIgnoreCase(myObject, "Key"));
        });
    });
});

describe("Array Utils",function(){
    var ArrayUtils = require("../lib/object_utils.js").ArrayUtils;
    describe("first",function(){
        it("should find the first element that satisfies the given predicate",function(){
            var res = ArrayUtils.first([1,2,3,4],function(x){
                return x % 2 == 0;
            });

            assert.equal(res,2);
        });

        it("should use the given thisArg as the method's this",function(){
            var obj = {
                p: function(x){
                    return x % 2 == 0;
                }
            };

            var res = ArrayUtils.first([1,2,3,4],function(x){
                return this.p(x);
            },obj);

            assert.equal(res,2);
        });

        it("should return null in case no element satisfied the predicate",function(){
           assert.equal(ArrayUtils.first([1],function(x){
               return x == 2;
           }),null);
        });
    });

    describe("toArray",function(){
       it("should preserve an array if given one",function(){
          var arr = [1,2,3,4];
          assert.deepEqual(ArrayUtils.toArray(arr),arr);
       });

        it("should convert array like object to array",function(){
           var obj = {
               0 : 1,
               length: 1
           };

            var res = ArrayUtils.toArray(obj);
            assert.deepEqual(res,[1]);
            assert(Array.isArray(res));
        });
    });
});

describe("StringUtils", function(){
    var StringUtils = require("../lib/object_utils.js").StringUtils;
    describe("isNullOrWhiteSpace function", function(){
        it("if null is given, should return true", function(){
            assert(StringUtils.isNullOrWhiteSpace(null));
        });
        it("if spaces are given, should return true", function(){
            assert(StringUtils.isNullOrWhiteSpace("   "));
        });
        it("if tab is given, should return true", function(){
            assert(StringUtils.isNullOrWhiteSpace(" "));
        });
        it("if regular string is given, should return false", function(){
            assert(!(StringUtils.isNullOrWhiteSpace("mf,gsakjf")));
        });
        it("", function() {
            assert(StringUtils.isNullOrWhiteSpace(""));
        });
    });

    describe("isNullOrEmpty function", function(){
        it("if null is given, should return true", function(){
            assert(StringUtils.isNullOrEmpty(null));
        });
        it("if nothing is given, should return true", function(){
            assert(StringUtils.isNullOrEmpty());
        });
        it("if empty is given, should return true", function() {
            assert(StringUtils.isNullOrEmpty(""));
        });
        it("if regular string is given, should return false", function(){
            assert(!(StringUtils.isNullOrEmpty("test")));
        });
    });

    describe("trimLeft function", function(){
        it("should throw error if the string is undefined", function () {
            assert.throws(function () {
                StringUtils.trimLeft();
            });
        });
        it("should throw error if the string is null", function () {
            assert.throws(function () {
                StringUtils.trimLeft(null);
            });
        });
        it("if empty string is given, nothing is trimmed", function(){
            var res = StringUtils.trimLeft("");
            assert.strictEqual(res, "");
        });
        it("if no character is given, nothing is trimmed", function(){
            var res = StringUtils.trimLeft("hello world");
            assert.strictEqual(res, "hello world");
        });
        it("if null character is given, nothing is trimmed", function(){
            var res = StringUtils.trimLeft("hello world", null);
            assert.strictEqual(res, "hello world");
        });
        it("if empty character is given, nothing is trimmed", function(){
            var res = StringUtils.trimLeft("hello world", "");
            assert.strictEqual(res, "hello world");
        });
        it("if characters are given, the string should return correct result", function(){
            var res = StringUtils.trimLeft("hello world", "hel");
            assert.strictEqual(res, "o world");
        });
        it("if a character is given, the string should return correct result", function(){
            var res = StringUtils.trimLeft("hello world", "h");
            assert.strictEqual(res, "ello world");
        });
        it("if a unicode character is given, the string should return correct result", function(){
            var res = StringUtils.trimLeft("áááá áááá", "á");
            assert.strictEqual(res, " áááá");
        });
    });

    describe("trimRight function", function(){
        it("should throw error if the string is undefined", function () {
            assert.throws(function () {
                StringUtils.trimRight();
            });
        });
        it("should throw error if the string is null", function () {
            assert.throws(function () {
                StringUtils.trimRight(null);
            });
        });
        it("if empty string is given, nothing is trimmed", function(){
            var res = StringUtils.trimRight("");
            assert.strictEqual(res, "");
        });
        it("if no character is given, nothing is trimmed", function(){
            var res = StringUtils.trimRight("hello world");
            assert.strictEqual(res, "hello world");
        });
        it("if null character is given, nothing is trimmed", function(){
            var res = StringUtils.trimRight("hello world", null);
            assert.strictEqual(res, "hello world");
        });
        it("if empty character is given, nothing is trimmed", function(){
            var res = StringUtils.trimRight("hello world", "");
            assert.strictEqual(res, "hello world");
        });
        it("if characters are given, the string should return correct result", function(){
            var res = StringUtils.trimRight("hello world", "rld");
            assert.strictEqual(res, "hello wo");
        });
        it("if a character is given, the string should return correct result", function(){
            var res = StringUtils.trimRight("hello world", "d");
            assert.strictEqual(res, "hello worl");
        });
        it("if a unicode character is given, the string should return correct result", function(){
            var res = StringUtils.trimRight("áááá áááá", "á");
            assert.strictEqual(res, "áááá ");
        });
    });

    describe("trim function", function(){
        it("if no character is given, nothing is trimmed", function(){
            var res = StringUtils.trim("hello world");
            assert.strictEqual(res, "hello world");
        });
        it("if null character is given, nothing is trimmed", function(){
            var res = StringUtils.trim("hello world", null);
            assert.strictEqual(res, "hello world");
        });
        it("if empty character is given, nothing is trimmed", function(){
            var res = StringUtils.trim("hello world", "");
            assert.strictEqual(res, "hello world");
        });
        it("if characters are given, the string should return correct result", function(){
            var res = StringUtils.trim("   hello world   ", " ");
            assert.strictEqual(res, "hello world");
        });
        it("if a character is given, the string should return correct result", function(){
            var res = StringUtils.trim(";;;;hello world;;;;", ";");
            assert.strictEqual(res, "hello world");
        });
    });

    describe("joinFunc function", function() {
        var arr = [1, 2, 3, 4];
        it("should join the values of an array with the given delimiter", function() {            
            var res = StringUtils.joinFunc(";").call(this, arr);
            assert.strictEqual(res, arr.join(";"));
        });

        it("should join the values of an array with the comma delimiter if the delimiter is not given", function() {
            var res = StringUtils.joinFunc().call(this, arr);
            assert.strictEqual(res, arr.join());
        });
    });

    describe("splitFunc function", function() {
        var str = "1,2,3,4";
        it("should return a four-item array from the string split with the delimiter used in it", function() {            
            var res = StringUtils.splitFunc(",").call(this, str);
            assert.deepEqual(res, str.split(","));
        });

        it("should return an one-item array from the string split with a delimiter other than the one used in it", function() {         
            var res = StringUtils.splitFunc(";").call(this, str);
            assert.deepEqual(res, [str]);
        });

        it("should return an one-item array from the string split with a delimiter of null/undefined", function() {
            str = "1,2,3,4,";
            var res = StringUtils.splitFunc(null).call(this, str);
            assert.deepEqual(res, [str]);
        });

        it("should remove the last delimiter and return a correct array", function() {
            str = "1,2,3,4,";
            var res = StringUtils.splitFunc(",").call(this, str);
            assert.deepEqual(res, [1,2,3,4]);
        });        
    });
});