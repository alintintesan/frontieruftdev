// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/*
 * Created on 09/12/2015.
 * This file contains the tests for the drag and drop behavior.
 */

var MouseButton = require("../lib/clickbehavior.js").MouseButton;
var Location = require("../lib/location.js").Location;
var assert = require("assert");
var sinon = require("sinon");
var Q = require("q");
var ObjectUtils = require("./../lib/object_utils.js").ObjectUtils;
var DragAndDropBehavior = ObjectUtils.mergeTestBehavior(require("../lib/drag_drop_behaviour.js").DragAndDropBehavior);
var ItemDragAndDropBehavior = ObjectUtils.mergeTestBehavior(require("../lib/drag_drop_behaviour.js").ItemDragAndDropBehavior);


describe("DragAndDropBehavior ",function(){

    var sourceDragTO;
    var targetDropTO;


    beforeEach(function(){
        sourceDragTO = {
            _executeCommand: sinon.stub().returns(Q.resolve(null)),
            _notifyAdditionalData: sinon.stub(),
            _drag: sinon.stub().returns(Q.resolve(null)),
            _drop: sinon.stub()
        };
        targetDropTO = {
            _executeCommand: sinon.stub(),
            dragAndDropOn: sinon.stub(),
            _drag: sinon.stub(),
            _drop: sinon.stub()
        };

        sourceDragTO.notifyWithEvents = function(func) {
            return func.call(this);
        };
    });

    describe("_drag method", function () {
        it("should use left button as the default button to drag with", function () {
            DragAndDropBehavior._drag.call(sourceDragTO, {});
            sinon.assert.calledOnce(sourceDragTO._executeCommand);
            sinon.assert.calledWith(sourceDragTO._executeCommand, "Drag", Location(null), MouseButton._convert(MouseButton.left));
        });

        it("should use the given button to drag with", function () {
            DragAndDropBehavior._drag.call(sourceDragTO, {
                button: MouseButton.right
            });

            sinon.assert.calledOnce(sourceDragTO._executeCommand);
            sinon.assert.calledWith(sourceDragTO._executeCommand, "Drag", Location(null), MouseButton._convert(MouseButton.right));
        });

        it("should use the given drag location", function () {
            var dragLocation = {
                offset: { x: 22 }
            };

            DragAndDropBehavior._drag.call(sourceDragTO, {
                dragLocation: dragLocation
            });

            sinon.assert.calledOnce(sourceDragTO._executeCommand);
            sinon.assert.calledWith(sourceDragTO._executeCommand, "Drag", Location(dragLocation), MouseButton._convert(MouseButton.left));
        });
    });

    describe("_drop method", function () {
        it("should call drop on target with default location in case not provided", function () {
            DragAndDropBehavior._drop.call(sourceDragTO, {
            });

            sinon.assert.calledOnce(sourceDragTO._executeCommand);
            sinon.assert.calledWith(sourceDragTO._executeCommand, "Drop", Location(null));
        });

        it("should call drop on target with the given drop location", function () {
            var dropLocation = {
                offset: { x: 22 }
            };

            DragAndDropBehavior._drop.call(sourceDragTO, {
                dropLocation: dropLocation
            });

            sinon.assert.calledOnce(sourceDragTO._executeCommand);
            sinon.assert.calledWith(sourceDragTO._executeCommand, "Drop", Location(dropLocation));
        });

        it("should call drop on target with _notifyAdditionalData", function () {
            var _notifyAdditionalData = function () { };

            var dropLocation = {
                offset: { x: 22 }
            };

            DragAndDropBehavior._drop.call(sourceDragTO, {
                dropLocation: dropLocation
            }, _notifyAdditionalData);

            sinon.assert.calledOnce(sourceDragTO._executeCommand);
            sinon.assert.calledWith(sourceDragTO._executeCommand, "Drop", Location(dropLocation), _notifyAdditionalData);
        });
    });

    describe("dragAndDropOn method", function () {
        it("should throw an exception in case target test object is null", function () {
            assert.throws(function () {
                DragAndDropBehavior.dragAndDropOn.call(sourceDragTO, null);
            });
        });

        it("should throw an exception in case target does not support drag & drop", function () {
            delete targetDropTO._drop;
            assert.throws(function () {
                DragAndDropBehavior.dragAndDropOn.call(sourceDragTO, targetDropTO);
            });
        });

        it("should create default dragOptions", function () {
            DragAndDropBehavior.dragAndDropOn.call(sourceDragTO, targetDropTO);
            sinon.assert.calledOnce(sourceDragTO._drag);
            sinon.assert.calledWith(sourceDragTO._drag, {});
        });

        it("should call _drag on SourceTO and Drop on TargetTO", function () {
            return DragAndDropBehavior.dragAndDropOn.call(sourceDragTO, targetDropTO).then(function () {
                sinon.assert.calledOnce(sourceDragTO._drag);
                sinon.assert.calledOnce(targetDropTO._drop);
            });
        });
    });
});

describe("ItemDragAndDropBehavior ", function () {

    var sourceDragTO;
    var targetDropTO;
    var ownerTO;

    beforeEach(function () {
        sourceDragTO = {
            _drag: sinon.stub().returns(Q.resolve(null)),
            _drop: sinon.stub(),
            _getIdentifier: function () {
                return 10;
            },
            _getOwnerTO: function () {
                return ownerTO;
            }
        };
        targetDropTO = {
            _executeCommand: sinon.stub(),
            dragAndDropOn: sinon.stub(),
            _drag: sinon.stub(),
            _drop: sinon.stub()
        };

        ownerTO = {
            _executeCommand: sinon.stub().returns(Q.resolve(null)),
            notifyWithEvents: function(func) {
                return func.call(this);
            },
            _notifyAdditionalData: sinon.stub()
        };

        sourceDragTO.notifyWithEvents = function (func) {
            return func.call(this);
        };
    });

    describe("_drag method", function () {
        it("should use left button as the default button to drag with", function () {
            ItemDragAndDropBehavior._drag.call(sourceDragTO, {});
            sinon.assert.calledOnce(sourceDragTO._getOwnerTO()._executeCommand);
            sinon.assert.calledWith(sourceDragTO._getOwnerTO()._executeCommand, "DragItem", 10, MouseButton._convert(MouseButton.left));
        });

        it("should use the given button to drag with", function () {
            ItemDragAndDropBehavior._drag.call(sourceDragTO, {
                button: MouseButton.right
            });

            sinon.assert.calledOnce(sourceDragTO._getOwnerTO()._executeCommand);
            sinon.assert.calledWith(sourceDragTO._getOwnerTO()._executeCommand, "DragItem", 10, MouseButton._convert(MouseButton.right));
        });
    });

    describe("_drop method", function () {
        it("should use left button as the default button to drop with", function () {
            ItemDragAndDropBehavior._drop.call(sourceDragTO, {});
            sinon.assert.calledOnce(sourceDragTO._getOwnerTO()._executeCommand);
            sinon.assert.calledWith(sourceDragTO._getOwnerTO()._executeCommand, "DropOnItem", 10, MouseButton._convert(MouseButton.left));
        });

        it("should use the given button to drop with", function () {
            ItemDragAndDropBehavior._drop.call(sourceDragTO, {
                button: MouseButton.right
            });

            sinon.assert.calledOnce(sourceDragTO._getOwnerTO()._executeCommand);
            sinon.assert.calledWith(sourceDragTO._getOwnerTO()._executeCommand, "DropOnItem", 10, MouseButton._convert(MouseButton.right));
        });

        it("should call drop on target with _notifyAdditionalData", function () {
            var _notifyAdditionalData = function () { };

            ItemDragAndDropBehavior._drop.call(sourceDragTO, {
                button: MouseButton.right
            }, _notifyAdditionalData);

            sinon.assert.calledOnce(sourceDragTO._getOwnerTO()._executeCommand);
            sinon.assert.calledWith(sourceDragTO._getOwnerTO()._executeCommand, "DropOnItem", 10, MouseButton._convert(MouseButton.right), _notifyAdditionalData);
        });
    });

    describe("dragAndDropOn method", function () {
        it("should throw an exception in case target test object is null", function () {
            assert.throws(function () {
                ItemDragAndDropBehavior.dragAndDropOn.call(sourceDragTO, null);
            });
        });

        it("should throw an exception in case target does not support drag & drop", function () {
            delete targetDropTO._drop;
            assert.throws(function () {
                ItemDragAndDropBehavior.dragAndDropOn.call(sourceDragTO, targetDropTO);
            });
        });

        it("should create default dragOptions", function () {
            ItemDragAndDropBehavior.dragAndDropOn.call(sourceDragTO, targetDropTO);
            sinon.assert.calledOnce(sourceDragTO._drag);
            sinon.assert.calledWith(sourceDragTO._drag, {});
        });

        it("should call _drag on SourceTO and Drop on TargetTO", function () {
            return ItemDragAndDropBehavior.dragAndDropOn.call(sourceDragTO, targetDropTO).then(function () {
                sinon.assert.calledOnce(sourceDragTO._drag);
                sinon.assert.calledOnce(targetDropTO._drop);
            });
        });
    });
});
