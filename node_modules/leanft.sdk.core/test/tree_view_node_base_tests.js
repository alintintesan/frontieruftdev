// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/28/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Tree View Node Base", function () {

    var TreeViewNodeBase = require("../lib/tree_view_node_base.js").TreeViewNodeBase;
    var ObjectUtils = require("../lib/object_utils.js").ObjectUtils;
    var treeViewNodeUnderTest;
    var owner;

    beforeEach(function () {
        owner = { owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub() };
        treeViewNodeUnderTest = ObjectUtils.mergeTestBehavior(TreeViewNodeBase);
        treeViewNodeUnderTest._identifier = 10;
        treeViewNodeUnderTest._textRepresentation = "TextRepresentation";
        treeViewNodeUnderTest._ownerTreeView = owner;
        treeViewNodeUnderTest._executeWithEventsOnItem = sinon.stub();
        treeViewNodeUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    afterEach(function () {
        delete treeViewNodeUnderTest._ownerTreeView;
        delete treeViewNodeUnderTest._executeWithEventsOnItem;
        delete treeViewNodeUnderTest._executeWithEventsOnItemOnError;
        delete owner._executeWithEventsOnItem;
        delete owner._executeWithEventsOnItemOnError;

    });

    describe("_getIdentifier method", function () {
        it("should return correct values", function () {
            var res = treeViewNodeUnderTest._getIdentifier();
            assert.strictEqual(res, 10);            
        });
    });

    describe("_getTextRepresentation method", function () {
        it("should return correct values", function () {
            var res = treeViewNodeUnderTest._getTextRepresentation();
            assert.strictEqual(res, "TextRepresentation");
        });
    });

    describe("text method", function () {
        it("should execute _getNodeText with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._getNodeText = sinon.stub();
            treeViewNodeUnderTest.text();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItemOnError, treeViewNodeUnderTest._ownerTreeView._getNodeText, 10);
        });

        it("should return string if _getNodeText returns string", function () {
            treeViewNodeUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns("value");;
            var res = treeViewNodeUnderTest.text();
            assert.strictEqual(res, "value");
        });
    });

    describe("isExpanded method", function () {
        it("should execute _isNodeExpanded with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._isNodeExpanded = sinon.stub();
            treeViewNodeUnderTest.isExpanded();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItemOnError, treeViewNodeUnderTest._ownerTreeView._isNodeExpanded, 10);
        });

        it("should return bool if _isNodeExpanded returns bool", function () {
            treeViewNodeUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = treeViewNodeUnderTest.isExpanded();
            assert.strictEqual(res, true);
        });
    });

    describe("isSelected method", function () {
        it("should execute _isNodeSelected with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._isNodeSelected = sinon.stub();
            treeViewNodeUnderTest.isSelected();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItemOnError, treeViewNodeUnderTest._ownerTreeView._isNodeSelected, 10);
        });

        it("should return bool if _isNodeSelected returns bool", function () {
            treeViewNodeUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = treeViewNodeUnderTest.isSelected();
            assert.strictEqual(res, true);
        });
    });

    describe("state method", function () {
        it("should execute _getNodeState with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._getNodeState = sinon.stub();
            treeViewNodeUnderTest.state();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItemOnError, treeViewNodeUnderTest._ownerTreeView._getNodeState, 10);
        });

        it("should return number if _getNodeState returns number", function () {
            treeViewNodeUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = treeViewNodeUnderTest.state();
            assert.strictEqual(res, true);
        });
    });

    describe("firstChildPath method", function () {
        it("should execute _getNodeFirstChildPath with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._getNodeFirstChildPath = sinon.stub();
            treeViewNodeUnderTest.firstChildPath();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItemOnError, treeViewNodeUnderTest._ownerTreeView._getNodeFirstChildPath, 10);
        });

        it("should return string if _getNodeFirstChildPath returns string", function () {
            treeViewNodeUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns("value");;
            var res = treeViewNodeUnderTest.firstChildPath();
            assert.strictEqual(res, "value");
        });
    });

    describe("hasChildren method", function () {
        it("should execute _nodeHasChildren with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._nodeHasChildren = sinon.stub();
            treeViewNodeUnderTest.hasChildren();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItemOnError, treeViewNodeUnderTest._ownerTreeView._nodeHasChildren, 10);
        });

        it("should return bool if _getNodeFirstChildPath returns bool", function () {
            treeViewNodeUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = treeViewNodeUnderTest.hasChildren();
            assert.strictEqual(res, true);
        });
    });

    describe("imageIndex method", function () {
        it("should execute _getNodeImageIndex with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._getNodeImageIndex = sinon.stub();
            treeViewNodeUnderTest.imageIndex();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItemOnError, treeViewNodeUnderTest._ownerTreeView._getNodeImageIndex, 10);
        });

        it("should return number if _getNodeImageIndex returns number", function () {
            treeViewNodeUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(10);;
            var res = treeViewNodeUnderTest.imageIndex();
            assert.strictEqual(res, 10);
        });
    });

    describe("nextSiblingPath method", function () {
        it("should execute _getNodeNextSiblingPath with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._getNodeNextSiblingPath = sinon.stub();
            treeViewNodeUnderTest.nextSiblingPath();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItemOnError, treeViewNodeUnderTest._ownerTreeView._getNodeNextSiblingPath, 10);
        });

        it("should return string if _getNodeNextSiblingPath returns string", function () {
            treeViewNodeUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns("value");;
            var res = treeViewNodeUnderTest.nextSiblingPath();
            assert.strictEqual(res, "value");
        });
    });

    describe("overlayImageIndex method", function () {
        it("should execute _getNodeOverlayImageIndex with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._getNodeOverlayImageIndex = sinon.stub();
            treeViewNodeUnderTest.overlayImageIndex();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItemOnError, treeViewNodeUnderTest._ownerTreeView._getNodeOverlayImageIndex, 10);
        });

        it("should return number if _getNodeOverlayImageIndex returns number", function () {
            treeViewNodeUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(10);;
            var res = treeViewNodeUnderTest.overlayImageIndex();
            assert.strictEqual(res, 10);
        });
    });

    describe("parentPath method", function () {
        it("should execute _getNodeParentPath with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._getNodeParentPath = sinon.stub();
            treeViewNodeUnderTest.parentPath();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItemOnError, treeViewNodeUnderTest._ownerTreeView._getNodeParentPath, 10);
        });

        it("should return string if _getNodeParentPath returns string", function () {
            treeViewNodeUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns("value");;
            var res = treeViewNodeUnderTest.parentPath();
            assert.strictEqual(res, "value");
        });
    });

    describe("path method", function () {
        it("should execute _getNodePath with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._getNodePath = sinon.stub();
            treeViewNodeUnderTest.path();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItemOnError, treeViewNodeUnderTest._ownerTreeView._getNodePath, 10);
        });

        it("should return string if _getNodePath returns string", function () {
            treeViewNodeUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns("value");;
            var res = treeViewNodeUnderTest.path();
            assert.strictEqual(res, "value");
        });
    });

    describe("setNodeState method", function () {
        it("should throw error if state is undefined", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.setNodeState();
            });
        });

        it("should throw error if state is null", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.setNodeState(null);
            });
        });

        it("should execute _setNodeState with correct parameter if state type is number", function () {
            treeViewNodeUnderTest._ownerTreeView._setNodeState = sinon.stub();
            treeViewNodeUnderTest.setNodeState(2);
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._setNodeState, 10, 2);
        });

        it("should execute _setNodeState with correct parameter if state type is string", function () {
            treeViewNodeUnderTest._ownerTreeView._setNodeState = sinon.stub();
            treeViewNodeUnderTest.setNodeState("2");
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._setNodeState, 10, 2);
        });
    });
    
    describe("clickState method", function () {
        it("should execute _setNodeState with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._setNodeState = sinon.stub();
            treeViewNodeUnderTest.clickState();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._setNodeState, 10, -1);
        });
    });

    describe("doubleClickState method", function () {
        it("should execute _setNodeState with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._setNodeState = sinon.stub();
            treeViewNodeUnderTest.doubleClickState();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._setNodeState, 10, -2);
        });
    });

    describe("enableLabelEditing method", function () {
        it("should execute _enableLabelEditingNode with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._enableLabelEditingItem = sinon.stub();
            treeViewNodeUnderTest.enableLabelEditing();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._enableLabelEditingNode, 10);
        });
    });

    describe("collapse method", function () {
        it("should execute _collapseNode with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._collapseNode = sinon.stub();
            treeViewNodeUnderTest.collapse();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._collapseNode, 10);
        });
    });

    describe("expand method", function () {
        it("should execute _expandNode with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._expandNode = sinon.stub();
            treeViewNodeUnderTest.expand();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._expandNode, 10);
        });
    });

    describe("expandAll method", function () {
        it("should execute _expandAll with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._expandAll = sinon.stub();
            treeViewNodeUnderTest.expandAll();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._expandAll, 10);
        });
    });  

    describe("_getOwnerTO method", function () {
        it("should return the TreeView object", function () {
            var res = treeViewNodeUnderTest._getOwnerTO();
            assert.deepEqual(res, owner);
        });
    });
});
