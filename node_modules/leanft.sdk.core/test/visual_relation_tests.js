// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/*
 * Created on 19/11/2015.
 */
var assert = require("assert");
var Vertical = require("../lib/visual_relation.js").Vertical;
var Horizontal = require("../lib/visual_relation.js").Horizontal;
var Proximity = require("../lib/visual_relation.js").Proximity;

describe("VisualRelation",function() {
    describe("Horizontal",function() {
        describe("_convertHorizontalEnumToNativeValue",function() {
            [undefined, false, true].forEach(function(inline) {
                it("should convert correctly left relation with inline: " + inline, function() {
                    var leftValue = inline ? 2:1;
                    var result = Horizontal._convertHorizontalEnumToNativeValue('left', inline);
                    assert.strictEqual(result,leftValue);

                    var result = Horizontal._convertHorizontalEnumToNativeValue('Left', inline);
                    assert.strictEqual(result,leftValue);

                    var result = Horizontal._convertHorizontalEnumToNativeValue(Horizontal.left, inline);
                    assert.strictEqual(result,leftValue);
                });
            }, this);

            [undefined, false, true].forEach(function(inline) {
                it("should convert correctly right relation with inline: " + inline, function() {
                    var rightValue = inline ? 4:3;
                    var result = Horizontal._convertHorizontalEnumToNativeValue('right', inline);
                    assert.strictEqual(result,rightValue);

                    var result = Horizontal._convertHorizontalEnumToNativeValue('Right', inline);
                    assert.strictEqual(result,rightValue);

                    var result = Horizontal._convertHorizontalEnumToNativeValue(Horizontal.right, inline);
                    assert.strictEqual(result,rightValue);
                });
            }, this);

            it("should throw exception if the inline value contains invalid boolean string value", function() {
                assert.throws(function() {
                    var result = Horizontal._convertHorizontalEnumToNativeValue('right', 'fals');
                    assert.strictEqual(result, rightValue);
                });
            });

            it("should throw exception if the inline value contains object and not boolean value", function() {
                assert.throws(function() {
                    var result = Horizontal._convertHorizontalEnumToNativeValue('right', {a:'b'});
                    assert.strictEqual(result, rightValue);
                });
            });

            it("should throw exception if proximity value isn't valid", function() {
                assert.throws(function() {
                    Horizontal._convertHorizontalEnumToNativeValue('kuku');
                });
            });

            it("should return null if value is null", function() {
                var result = Horizontal._convertHorizontalEnumToNativeValue(null);
                assert.strictEqual(result,null);
            });

            it("should return undefined if value is undefined", function() {
                var result = Horizontal._convertHorizontalEnumToNativeValue(undefined);
                assert.strictEqual(result,undefined);
            });
        });
    });

    describe("Vertical",function() {
        describe("_convertVerticalEnumToNativeValue",function() {
            [undefined, false, true].forEach(function(inline) {
                it("should convert correctly above relation with inline: " + inline, function() {
                    var aboveValue = inline ? 2:1;
                    var result = Vertical._convertVerticalEnumToNativeValue('above', inline);
                    assert.strictEqual(result,aboveValue);

                    var result = Vertical._convertVerticalEnumToNativeValue('ABOVE', inline);
                    assert.strictEqual(result,aboveValue);

                    var result = Vertical._convertVerticalEnumToNativeValue(Vertical.above, inline);
                    assert.strictEqual(result,aboveValue);
                });
            }, this);

            [undefined, false, true].forEach(function(inline) {
                it("should convert correctly below relation with inline: " + inline, function() {
                    var aboveValue = inline ? 4:3;
                    var result = Vertical._convertVerticalEnumToNativeValue('below', inline);
                    assert.strictEqual(result,aboveValue);

                    var result = Vertical._convertVerticalEnumToNativeValue('BelOw', inline);
                    assert.strictEqual(result,aboveValue);

                    var result = Vertical._convertVerticalEnumToNativeValue(Vertical.below, inline);
                    assert.strictEqual(result,aboveValue);
                });
            }, this);

            it("should throw exception if the inline value contains invalid boolean string value", function() {
                assert.throws(function() {
                    var result = Vertical._convertVerticalEnumToNativeValue('right', 'fals');
                    assert.strictEqual(result, rightValue);
                });
            });

            it("should throw exception if the inline value contains object and not boolean value", function() {
                assert.throws(function() {
                    var result = Vertical._convertVerticalEnumToNativeValue('right', {a:'b'});
                    assert.strictEqual(result, rightValue);
                });
            });

            it("should throw exception if proximity value isn't valid", function() {
                assert.throws(function() {
                    Vertical._convertVerticalEnumToNativeValue('kuku');
                });
            });

            it("should return null if value is null", function() {
                var result = Vertical._convertVerticalEnumToNativeValue(null);
                assert.strictEqual(result,null);
            });

            it("should return undefined if value is undefined", function() {
                var result = Vertical._convertVerticalEnumToNativeValue(undefined);
                assert.strictEqual(result,undefined);
            });
        });
    });

    describe("Proximity",function() {
        describe("_convertProximityToNativeValue",function() {
            it("should convert correctly closestOnXAxis relation", function() {
                var result = Proximity._convertProximityToNativeValue('closestOnXAxis');
                assert.strictEqual(result,1);

                var result = Proximity._convertProximityToNativeValue('CLOSEsTOnXAxis');
                assert.strictEqual(result,1);

                var result = Proximity._convertProximityToNativeValue(Proximity.closestOnXAxis);
                assert.strictEqual(result,1);
            });

            it("should convert correctly closestOnYAxis relation", function() {
                var result = Proximity._convertProximityToNativeValue('closestOnYAxis');
                assert.strictEqual(result,2);

                var result = Proximity._convertProximityToNativeValue('CLOSEsTOnYAxis');
                assert.strictEqual(result,2);

                var result = Proximity._convertProximityToNativeValue(Proximity.closestOnYAxis);
                assert.strictEqual(result,2);
            });

            it("should convert correctly closestOnBothAxes relation", function() {
                var result = Proximity._convertProximityToNativeValue('closestOnBothAxes');
                assert.strictEqual(result,3);

                var result = Proximity._convertProximityToNativeValue('CLOSEsTOnBothAxes');
                assert.strictEqual(result,3);

                var result = Proximity._convertProximityToNativeValue(Proximity.closestOnBothAxes);
                assert.strictEqual(result,3);
            });

            it("should convert correctly contains relation", function() {
                var result = Proximity._convertProximityToNativeValue('contains');
                assert.strictEqual(result,4);

                var result = Proximity._convertProximityToNativeValue('cONtains');
                assert.strictEqual(result,4);

                var result = Proximity._convertProximityToNativeValue(Proximity.contains);
                assert.strictEqual(result,4);
            });

            it("should throw exception if proximity value isn't valid", function() {
                assert.throws(function() {
                    Proximity._convertProximityToNativeValue('kuku');
                });
            });

            it("should return null if value is null", function() {
                var result = Proximity._convertProximityToNativeValue(null);
                assert.strictEqual(result,null);
            });

            it("should return undefined if value is undefined", function() {
                var result = Proximity._convertProximityToNativeValue(undefined);
                assert.strictEqual(result,undefined);
            });
        });
    });
});