// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/04/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var ObjectUtils = require("./../lib/object_utils.js").ObjectUtils;

describe("ContainerBehavior Test", function () {

    var ContainerBehavior = require("../lib/container_helper.js").ContainerBehavior;
    var containerBehaviorUnderTest;

    beforeEach(function () {
        containerBehaviorUnderTest = ObjectUtils.mergeTestBehavior(ContainerBehavior);
        containerBehaviorUnderTest._getROPropertiesWithoutEvents = sinon.stub();
        containerBehaviorUnderTest._getROPropertyWithoutEvents = sinon.stub();
        containerBehaviorUnderTest._getROProperty = sinon.stub();
        containerBehaviorUnderTest._getROProperties = sinon.stub();
        containerBehaviorUnderTest._createItem = sinon.stub();
    });

    afterEach(function () {
        delete containerBehaviorUnderTest._getROPropertiesWithoutEvents;
        delete containerBehaviorUnderTest._getROPropertyWithoutEvents;
        delete containerBehaviorUnderTest._getROProperty;
        delete containerBehaviorUnderTest._getROProperties;
        delete containerBehaviorUnderTest._createItem;
    });


    describe("_items method", function () {
        it("should query the properties 'all items', 'items count' if there is no define in parameters", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2", 2]);
                }
            };
            containerBehaviorUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            containerBehaviorUnderTest._items('\n');
            sinon.assert.calledOnce(containerBehaviorUnderTest._getROPropertiesWithoutEvents);
            sinon.assert.calledWith(containerBehaviorUnderTest._getROPropertiesWithoutEvents, "all items", "items count");
        });

        it("should query the properties allItemsProp, itemsCountProp if there is a definition in parameters", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2", 2]);
                }
            };
            containerBehaviorUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            containerBehaviorUnderTest._items('\n', "allItemsProp", "itemsCountProp");
            sinon.assert.calledOnce(containerBehaviorUnderTest._getROPropertiesWithoutEvents);
            sinon.assert.calledWith(containerBehaviorUnderTest._getROPropertiesWithoutEvents, "allItemsProp", "itemsCountProp");
        });

        it("should return empty list if no item returns from _getROPropertiesWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["", 0]);
                }
            };
            
            containerBehaviorUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            var res = containerBehaviorUnderTest._items('\n');
            assert.deepEqual(res, []);
        });
        
        it("should call _createItem if items returns from _getROPropertiesWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2", 2]);
                }
            };

            containerBehaviorUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            var res = containerBehaviorUnderTest._items('\n');
            sinon.assert.callCount(containerBehaviorUnderTest._createItem, 2);
            sinon.assert.calledWith(containerBehaviorUnderTest._createItem, 0, "Item1");
            sinon.assert.calledWith(containerBehaviorUnderTest._createItem, 1, "Item2");
        });

        it("should trim the redundant characters if it exceeds the itemCount", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1\nItem2\n\n\n", 2]);
                }
            };

            containerBehaviorUnderTest._getROPropertiesWithoutEvents.returns(promiseMock);
            var res = containerBehaviorUnderTest._items('\n');
            sinon.assert.callCount(containerBehaviorUnderTest._createItem, 2);
        });
    });

    describe("_selectedItems method", function () {
        it("should query the property 'selection'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };
            containerBehaviorUnderTest._getROProperty.returns(promiseMock);
            containerBehaviorUnderTest._selectedItems('\n');
            sinon.assert.calledOnce(containerBehaviorUnderTest._getROProperty);
            sinon.assert.calledWith(containerBehaviorUnderTest._getROProperty, "selection", sinon.match({}));
        });

        it("should return empty list if null returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb();
                }
            };

            containerBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = containerBehaviorUnderTest._selectedItems('\n');
            assert.deepEqual(res, []);
        });

        it("should return empty list if no item returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            containerBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = containerBehaviorUnderTest._selectedItems('\n');
            assert.deepEqual(res, []);
        });

        it("should call _createItem if items returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            containerBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = containerBehaviorUnderTest._selectedItems('\n');
            sinon.assert.callCount(containerBehaviorUnderTest._createItem, 2);
            sinon.assert.calledWith(containerBehaviorUnderTest._createItem, "Item1", "Item1");
            sinon.assert.calledWith(containerBehaviorUnderTest._createItem, "Item2", "Item2");
        });
    });

    describe("_checkedItems method", function () {
        it("should query the properties 'checked', 'all items'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["1;2", "Item1\nItem2"]);
                }
            };
            containerBehaviorUnderTest._getROProperties.returns(promiseMock);
            containerBehaviorUnderTest._checkedItems(';', '\n');
            sinon.assert.calledOnce(containerBehaviorUnderTest._getROProperties);
            sinon.assert.calledWith(containerBehaviorUnderTest._getROProperties, sinon.match({}), "checked", "all items");
        });

        it("should return empty list if no item returns from _getROProperties", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["", ""]);
                }
            };

            containerBehaviorUnderTest._getROProperties.returns(promiseMock);
            var res = containerBehaviorUnderTest._checkedItems(';', '\n');
            assert.deepEqual(res, []);
        });

        it("should return empty list if null returns from _getROProperties", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(null);
                }
            };

            containerBehaviorUnderTest._getROProperties.returns(promiseMock);
            var res = containerBehaviorUnderTest._checkedItems(';', '\n');
            assert.deepEqual(res, []);
        });

        it("should call _createItem if items returns from _getROProperties", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["1;2", "Item0\nItem1\nItem2"]);
                }
            };

            containerBehaviorUnderTest._getROProperties.returns(promiseMock);
            var res = containerBehaviorUnderTest._checkedItems(';', '\n');
            sinon.assert.calledWith(containerBehaviorUnderTest._createItem, 1, "Item1");
            sinon.assert.calledWith(containerBehaviorUnderTest._createItem, 2, "Item2");
        });
    });

    describe("_getAllItemsNames method", function () {
        it("should query the properties 'all items' if there is no define in parameters", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1;Item2;");
                }
            };
            containerBehaviorUnderTest._getROPropertyWithoutEvents.returns(promiseMock);
            containerBehaviorUnderTest._getAllItemsNames();
            sinon.assert.calledOnce(containerBehaviorUnderTest._getROPropertyWithoutEvents);
            sinon.assert.calledWith(containerBehaviorUnderTest._getROPropertyWithoutEvents, "all items");
        });

        it("should query the properties allItemsProp if there is a definition in parameters", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1;Item2;");
                }
            };
            containerBehaviorUnderTest._getROPropertyWithoutEvents.returns(promiseMock);
            containerBehaviorUnderTest._getAllItemsNames("allItemsProp");
            sinon.assert.calledOnce(containerBehaviorUnderTest._getROPropertyWithoutEvents);
            sinon.assert.calledWith(containerBehaviorUnderTest._getROPropertyWithoutEvents, "allItemsProp");
        });

        it("should return empty list if no item returns from _getROPropertyWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            containerBehaviorUnderTest._getROPropertyWithoutEvents.returns(promiseMock);
            var res = containerBehaviorUnderTest._getAllItemsNames("allItemsProp");
            assert.deepEqual(res, []);
        });

        it("should return empty list if null returns from _getROPropertyWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(null);
                }
            };

            containerBehaviorUnderTest._getROPropertyWithoutEvents.returns(promiseMock);
            var res = containerBehaviorUnderTest._getAllItemsNames("allItemsProp");
            assert.deepEqual(res, []);
        });

        it("should return an array if items returns from _getROPropertyWithoutEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1;Item2;");
                }
            };

            containerBehaviorUnderTest._getROPropertyWithoutEvents.returns(promiseMock);
            var res = containerBehaviorUnderTest._getAllItemsNames("allItemsProp");
            assert.deepEqual(res, ["Item1", "Item2"]);
        });
    });
});
