// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/21/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var ObjectUtils = require("./../lib/object_utils.js").ObjectUtils;

describe("ScrollBar Test Object", function () {
    var ScrollBarTOBaseBehavior = require("../lib/scroll_bar_base.js").ScrollBarTOBaseBehavior;
    var scrollBarTOUnderTest;

    beforeEach(function () {
        scrollBarTOUnderTest = ObjectUtils.mergeTestBehavior(ScrollBarTOBaseBehavior);
        scrollBarTOUnderTest._executeWithEvents = sinon.stub();
        scrollBarTOUnderTest._getROProperty = sinon.stub();
    });

    afterEach(function () {
        delete scrollBarTOUnderTest._executeWithEvents;
        delete scrollBarTOUnderTest._getROProperty;
    });

    describe("setPosition method", function () {
        it("should throw error if position is undefined", function () {
            assert.throws(function () {
                scrollBarTOUnderTest.setPosition();
            });
        });

        it("should throw error if position is null", function () {
            assert.throws(function () {
                scrollBarTOUnderTest.setPosition(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            scrollBarTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = scrollBarTOUnderTest.setPosition(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Set' if value is a number", function () {
            scrollBarTOUnderTest.setPosition(10);
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Set", 10);
        });

        it("should execute _executeWithEvents 'Set' if value is a string", function () {
            scrollBarTOUnderTest.setPosition("10");
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({ 0: "10" }), "Set", 10);
        });        
    });

    describe("nextLine method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            scrollBarTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = scrollBarTOUnderTest.nextLine(10);
            assert.equal(res, executionPromise);
        });

        it("should set the input value to 1 if input value is undefined", function () {
            scrollBarTOUnderTest.nextLine();
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({ }), "NextLine", 1);
        });

        it("should set the input value to 1 if input value is null", function () {
            scrollBarTOUnderTest.nextLine(null);
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({}), "NextLine", 1);
        });

        it("should throw error if value is < 1", function () {
            assert.throws(function () {
                scrollBarTOUnderTest.nextLine(0);
            });
        });

        it("should execute _executeWithEvents 'NextLine' if value is a number", function () {
            scrollBarTOUnderTest.nextLine(10);
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "NextLine", 10);
        });

        it("should execute _executeWithEvents 'NextLine' if value is a string", function () {
            scrollBarTOUnderTest.nextLine("10");
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "NextLine", 10);
        });
    });

    describe("nextPage method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            scrollBarTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = scrollBarTOUnderTest.nextPage(10);
            assert.equal(res, executionPromise);
        });

        it("should set the input value to 1 if input value is undefined", function () {
            scrollBarTOUnderTest.nextPage();
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({}), "NextPage", 1);
        });

        it("should set the input value to 1 if input value is null", function () {
            scrollBarTOUnderTest.nextPage(null);
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({}), "NextPage", 1);
        });

        it("should throw error if value is < 1", function () {
            assert.throws(function () {
                scrollBarTOUnderTest.nextPage(0);
            });
        });

        it("should execute _executeWithEvents 'NextPage' if value is a number", function () {
            scrollBarTOUnderTest.nextPage(10);
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "NextPage", 10);
        });

        it("should execute _executeWithEvents 'NextPage' if value is a string", function () {
            scrollBarTOUnderTest.nextPage("10");
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "NextPage", 10);
        });
    });

    describe("previousLine method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            scrollBarTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = scrollBarTOUnderTest.previousLine(10);
            assert.equal(res, executionPromise);
        });

        it("should set the input value to 1 if input value is undefined", function () {
            scrollBarTOUnderTest.previousLine();
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({}), "PrevLine", 1);
        });

        it("should set the input value to 1 if input value is null", function () {
            scrollBarTOUnderTest.previousLine(null);
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({}), "PrevLine", 1);
        });

        it("should throw error if value is < 1", function () {
            assert.throws(function () {
                scrollBarTOUnderTest.previousLine(0);
            });
        });

        it("should execute _executeWithEvents 'PrevLine' if value is a number", function () {
            scrollBarTOUnderTest.previousLine(10);
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "PrevLine", 10);
        });

        it("should execute _executeWithEvents 'PrevLine' if value is a string", function () {
            scrollBarTOUnderTest.previousLine("10");
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "PrevLine", 10);
        });
    });

    describe("previousPage method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            scrollBarTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = scrollBarTOUnderTest.previousPage(10);
            assert.equal(res, executionPromise);
        });

        it("should set the input value to 1 if input value is undefined", function () {
            scrollBarTOUnderTest.previousPage();
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({}), "PrevPage", 1);
        });

        it("should set the input value to 1 if input value is null", function () {
            scrollBarTOUnderTest.previousPage(null);
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({}), "PrevPage", 1);
        });

        it("should throw error if value is < 1", function () {
            assert.throws(function () {
                scrollBarTOUnderTest.previousPage(0);
            });
        });

        it("should execute _executeWithEvents 'PrevPage' if value is a number", function () {
            scrollBarTOUnderTest.previousPage(10);
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "PrevPage", 10);
        });

        it("should execute _executeWithEvents 'PrevPage' if value is a string", function () {
            scrollBarTOUnderTest.previousPage("10");
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "PrevPage", 10);
        });
    });
});
