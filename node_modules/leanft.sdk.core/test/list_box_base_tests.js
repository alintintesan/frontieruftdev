// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/25/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ListBox Description Base Behavior", function () {
    var DescriptionBase = require("../lib/description_base.js");
    var ObjectUtils = require("../lib/object_utils.js").ObjectUtils;
    var ListBoxDescriptionBaseBehavior = require("../lib/list_box_base.js").ListBoxDescriptionBaseBehavior;
    var listBoxDescBaseBehaviorUnderTest;

    beforeEach(function () {
        listBoxDescBaseBehaviorUnderTest = new DescriptionBase();
        listBoxDescBaseBehaviorUnderTest._init({
            technology: "Technology",
            leanftType: "TestObject"
        });

        ObjectUtils.extend(listBoxDescBaseBehaviorUnderTest, ListBoxDescriptionBaseBehavior);
    });

    describe("items method", function () {
            it("should add 'all items' to _properties when value is given", function () {
                listBoxDescBaseBehaviorUnderTest.items(["item1", "item2"]);
                assert.strictEqual(listBoxDescBaseBehaviorUnderTest._properties["all items"], "item1\nitem2");
            });

        //it("should add 'all items' to _properties when value is given using property bag", function () {
        //    listBoxDescBaseBehaviorUnderTest = ListBox({
        //        items: ["item1", "item2"]
        //    });
        //    assert.strictEqual(listBoxDescBaseBehaviorUnderTest._properties["all items"], "item1\nitem2");
        //});

        it("should return this - builder pattern, when value is given", function () {
            var result = listBoxDescBaseBehaviorUnderTest.items(["item1", "item2"]);
            assert.strictEqual(result, listBoxDescBaseBehaviorUnderTest);
        });

        it("should remove 'all items' from _properties when value is null", function () {
            listBoxDescBaseBehaviorUnderTest._properties["all items"] = "item1\nitem2";
            listBoxDescBaseBehaviorUnderTest.items(null);
            assert(!("all items" in listBoxDescBaseBehaviorUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties when value is not given", function () {
            listBoxDescBaseBehaviorUnderTest._properties["all items"] = "item1\nitem2";
            var value = listBoxDescBaseBehaviorUnderTest.items();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'all items' in _properties when get is called", function () {
            listBoxDescBaseBehaviorUnderTest._properties["all items"] = "item1\nitem2";
            listBoxDescBaseBehaviorUnderTest.items();
            assert.strictEqual(listBoxDescBaseBehaviorUnderTest._properties["all items"], "item1\nitem2");
        });
    });

    describe("selectedItems method", function () {
        it("should add 'selection' to _properties when value is given", function () {
            listBoxDescBaseBehaviorUnderTest.selectedItems(["item1", "item2"]);
            assert.strictEqual(listBoxDescBaseBehaviorUnderTest._properties["selection"], "item1\nitem2");
        });

        //it("should add 'selection' to _properties when value is given using property bag", function () {
        //    listBoxDescBaseBehaviorUnderTest = ListBox({
        //        selectedItems: ["item1", "item2"]
        //    });
        //    assert.strictEqual(listBoxDescBaseBehaviorUnderTest._properties["selection"], "item1\nitem2");
        //});

        it("should return this - builder pattern, when value is given", function () {
            var result = listBoxDescBaseBehaviorUnderTest.selectedItems(["item1", "item2"]);
            assert.strictEqual(result, listBoxDescBaseBehaviorUnderTest);
        });

        it("should remove 'selection' from _properties when value is null", function () {
            listBoxDescBaseBehaviorUnderTest._properties["selection"] = "item1\nitem2";
            listBoxDescBaseBehaviorUnderTest.selectedItems(null);
            assert(!("selection" in listBoxDescBaseBehaviorUnderTest._properties));
        });
        it("should return the value of 'selection' from _properties when value is not given", function () {
            listBoxDescBaseBehaviorUnderTest._properties["selection"] = "item1\nitem2";
            var value = listBoxDescBaseBehaviorUnderTest.selectedItems();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'selection' in _properties when get is called", function () {
            listBoxDescBaseBehaviorUnderTest._properties["selection"] = "item1\nitem2";
            listBoxDescBaseBehaviorUnderTest.selectedItems();
            assert.strictEqual(listBoxDescBaseBehaviorUnderTest._properties["selection"], "item1\nitem2");
        });
    });

    describe("itemsCount method", function () {
        it("should add 'items count' to _properties when value is given", function () {
            listBoxDescBaseBehaviorUnderTest.itemsCount(100);
            assert.strictEqual(listBoxDescBaseBehaviorUnderTest._properties["items count"], 100);
        });

        it("should add 'items count' to _properties when value is given in string", function () {
            listBoxDescBaseBehaviorUnderTest.itemsCount('100');
            assert.strictEqual(listBoxDescBaseBehaviorUnderTest._properties["items count"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listBoxDescBaseBehaviorUnderTest.itemsCount(100);
            assert.strictEqual(result, listBoxDescBaseBehaviorUnderTest);
        });

        it("should remove 'items count' from _properties when value is null", function () {
            listBoxDescBaseBehaviorUnderTest._properties["items count"] = 100;
            listBoxDescBaseBehaviorUnderTest.itemsCount(null);
            assert(!("items count" in listBoxDescBaseBehaviorUnderTest._properties));
        });

        it("should return the value of 'items count' from _properties when value is not given", function () {
            listBoxDescBaseBehaviorUnderTest._properties["items count"] = 100;
            var result = listBoxDescBaseBehaviorUnderTest.itemsCount();
            assert.equal(result, 100);
        });
    });
});