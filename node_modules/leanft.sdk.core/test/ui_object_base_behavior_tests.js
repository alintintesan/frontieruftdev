// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Position = require("../lib/location.js").Position;
var ObjectUtils = require("../lib/object_utils.js").ObjectUtils;

describe("UIObjectDescriptionBaseBehavior Tests", function () {

    var UIObjectDescriptionBaseBehavior = require("../lib/ui_object_base_behavior.js").UIObjectDescriptionBaseBehavior;
    var DescriptionBase = require("../lib/description_base.js");
    var uiObjectBaseDescriptionUnderTest;

    beforeEach(function () {
        uiObjectBaseDescriptionUnderTest = new DescriptionBase();
        uiObjectBaseDescriptionUnderTest._init({
            technology: "Technology",
            leanftType: "TestObject"
        });

        ObjectUtils.extend(uiObjectBaseDescriptionUnderTest, UIObjectDescriptionBaseBehavior);       
    });

    afterEach(function () {
    });

    describe("isEnabled method", function () {
        it("should add 'enabled' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["enabled"], true);
        });

        it("should add 'enabled' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'enabled' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["enabled"] = true;
            uiObjectBaseDescriptionUnderTest.isEnabled(null);
            assert(!("enabled" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'enabled' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["enabled"] = true;
            var result = uiObjectBaseDescriptionUnderTest.isEnabled();
            assert.equal(result, true);
        });
    });

    describe("isFocused method", function () {
        it("should add 'focused' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.isFocused(true);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["focused"], true);
        });

        it("should add 'focused' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.isFocused("true");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["focused"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.isFocused(true);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'focused' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["focused"] = true;
            uiObjectBaseDescriptionUnderTest.isFocused(null);
            assert(!("focused" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'focused' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["focused"] = true;
            var result = uiObjectBaseDescriptionUnderTest.isFocused();
            assert.equal(result, true);
        });
    });

    describe("windowTitleRegExp method", function () {
        it("should add 'regexpwndtitle' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.windowTitleRegExp("windowTitleRegExp");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["regexpwndtitle"], "windowTitleRegExp");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.windowTitleRegExp("windowTitleRegExp");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'regexpwndtitle' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["regexpwndtitle"] = "windowTitleRegExp";
            uiObjectBaseDescriptionUnderTest.windowTitleRegExp(null);
            assert(!("regexpwndtitle" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'regexpwndtitle' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["regexpwndtitle"] = "windowTitleRegExp";
            var result = uiObjectBaseDescriptionUnderTest.windowTitleRegExp();
            assert.equal(result, "windowTitleRegExp");
        });
    });

    describe("isVisible method", function () {
        it("should add 'visible' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.isVisible(true);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["visible"], true);
        });

        it("should add 'visible' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.isVisible("true");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["visible"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.isVisible(true);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'visible' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["visible"] = true;
            uiObjectBaseDescriptionUnderTest.isVisible(null);
            assert(!("visible" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'visible' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["visible"] = true;
            var result = uiObjectBaseDescriptionUnderTest.isVisible();
            assert.equal(result, true);
        });
    });

    describe("text method", function () {
        it("should add 'text' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.text("text");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["text"], "text");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.text("text");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'text' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["text"] = "text";
            uiObjectBaseDescriptionUnderTest.text(null);
            assert(!("text" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'text' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["text"] = "text";
            var result = uiObjectBaseDescriptionUnderTest.text();
            assert.equal(result, "text");
        });
    });
});

describe("UI Object Base Behavior", function () {

    var UIObjectBaseBehavior = require("../lib/ui_object_base_behavior.js").UIObjectBaseBehavior;
    var uIObjectBaseBehaviorUnderTest;

    beforeEach(function () {
        uIObjectBaseBehaviorUnderTest = ObjectUtils.mergeTestBehavior(UIObjectBaseBehavior);
        uIObjectBaseBehaviorUnderTest._getROProperty = sinon.stub();
        uIObjectBaseBehaviorUnderTest._executeWithEvents = sinon.stub();
    });

    afterEach(function () {
        delete uIObjectBaseBehaviorUnderTest._getROProperty;
        delete uIObjectBaseBehaviorUnderTest._executeWithEvents;
    });

    describe("nativeClass method", function () {
        it("should execute _getROProperty 'NativeClass'", function () {
            uIObjectBaseBehaviorUnderTest.nativeClass();
            sinon.assert.calledOnce(uIObjectBaseBehaviorUnderTest._getROProperty);
            sinon.assert.calledWith(uIObjectBaseBehaviorUnderTest._getROProperty, "NativeClass", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uIObjectBaseBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = uIObjectBaseBehaviorUnderTest.nativeClass();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("windowTitleRegExp method", function () {
        it("should execute _getROProperty 'windowTitleRegExp'", function () {
            uIObjectBaseBehaviorUnderTest.windowTitleRegExp();
            sinon.assert.calledOnce(uIObjectBaseBehaviorUnderTest._getROProperty);
            sinon.assert.calledWith(uIObjectBaseBehaviorUnderTest._getROProperty, "RegExpWndTitle", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uIObjectBaseBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = uIObjectBaseBehaviorUnderTest.windowTitleRegExp();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEnabled method", function () {
        it("should execute _getROProperty 'enabled'", function () {
            uIObjectBaseBehaviorUnderTest.isEnabled();
            sinon.assert.calledOnce(uIObjectBaseBehaviorUnderTest._getROProperty);
            sinon.assert.calledWith(uIObjectBaseBehaviorUnderTest._getROProperty, "enabled", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uIObjectBaseBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = uIObjectBaseBehaviorUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isFocused method", function () {
        it("should execute _getROProperty 'focused'", function () {
            uIObjectBaseBehaviorUnderTest.isFocused();
            sinon.assert.calledOnce(uIObjectBaseBehaviorUnderTest._getROProperty);
            sinon.assert.calledWith(uIObjectBaseBehaviorUnderTest._getROProperty, "focused", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uIObjectBaseBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = uIObjectBaseBehaviorUnderTest.isFocused();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isVisible method", function () {
        it("should execute _getROProperty 'visible'", function () {
            uIObjectBaseBehaviorUnderTest.isVisible();
            sinon.assert.calledOnce(uIObjectBaseBehaviorUnderTest._getROProperty);
            sinon.assert.calledWith(uIObjectBaseBehaviorUnderTest._getROProperty, "visible", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uIObjectBaseBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = uIObjectBaseBehaviorUnderTest.isVisible();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("handle method", function () {
        it("should execute _getROProperty 'hWnd'", function () {
            uIObjectBaseBehaviorUnderTest.handle();
            sinon.assert.calledOnce(uIObjectBaseBehaviorUnderTest._getROProperty);
            sinon.assert.calledWith(uIObjectBaseBehaviorUnderTest._getROProperty, "hWnd", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uIObjectBaseBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = uIObjectBaseBehaviorUnderTest.handle();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("mouseMove method", function () {
        it("should call execute command with 'MouseMove' and pass the given location argument", function () {
            var mouseMoveArgs = { offset: { x: 10, y: 20 }, anchor: Position.topLeft };
            uIObjectBaseBehaviorUnderTest.mouseMove(mouseMoveArgs);
            sinon.assert.calledOnce(uIObjectBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(uIObjectBaseBehaviorUnderTest._executeWithEvents, sinon.match({ 0: mouseMoveArgs }), "MouseMove", { Type: "Location", Offset: { Type: "Point", X: 10, Y: 20 }, Anchor: 0 });
        });

        it("should execute command 'mouseMove' with default location", function () {
            uIObjectBaseBehaviorUnderTest.mouseMove();
            sinon.assert.calledOnce(uIObjectBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(uIObjectBaseBehaviorUnderTest._executeWithEvents, sinon.match({}), "MouseMove", { Type: "Location", Offset: { Type: "Point", X: 0, Y: 0 }, Anchor: 2 });
        });

        it("should execute command 'mouseMove' with default location if arguments is null", function () {
            uIObjectBaseBehaviorUnderTest.mouseMove(null);
            sinon.assert.calledOnce(uIObjectBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(uIObjectBaseBehaviorUnderTest._executeWithEvents, sinon.match({}), "MouseMove", { Type: "Location", Offset: { Type: "Point", X: 0, Y: 0 }, Anchor: 2 });
        });
    });
});
