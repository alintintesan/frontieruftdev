// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/*
 * Created on 16/11/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var ObjectUtils = require("./../lib/object_utils.js").ObjectUtils;

describe("ClickBehavior Tests",function() {
    var ClickBehavior = require("../lib/clickbehavior.js").ClickBehavior;
    var MouseButton = require("../lib/clickbehavior.js").MouseButton;
    var Position = require("../lib/location.js").Position;
    var clickBehaviorUnderTest = null;

    beforeEach(function () {
        clickBehaviorUnderTest = ObjectUtils.mergeTestBehavior(ClickBehavior);
        clickBehaviorUnderTest._executeCommand = sinon.stub();
        clickBehaviorUnderTest._executeWithEvents = clickBehaviorUnderTest._executeCommand;
    });

    afterEach(function() {
        delete clickBehaviorUnderTest._executeCommand;
        delete clickBehaviorUnderTest._executeWithEvents;
    });

    describe("click",function() {
        it("without args should pass default parameters to _executeCommand",function(){
            clickBehaviorUnderTest.click();
            assert(clickBehaviorUnderTest._executeCommand.calledOnce);
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args.length, 5);
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args[1].toLowerCase(),"click");
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args[2], -9999);
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args[3], -9999);
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args[4], 0); //left
        });

        it("without args should pass 'null' parameters to _executeCommand",function(){
            clickBehaviorUnderTest.click(null);
            assert(clickBehaviorUnderTest._executeCommand.calledOnce);
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args.length, 5);
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args[1].toLowerCase(),"click");
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args[2], -9999);
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args[3], -9999);
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args[4], 0); //left
        });

        it("with button arg should pass button arg and default location to _executeCommand",function(){
            clickBehaviorUnderTest.click({button: MouseButton.right});
            assert(clickBehaviorUnderTest._executeCommand.calledOnce);
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args.length, 4);
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args[1].toLowerCase(),"click");
            assert.deepEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args[2], {
                Type: "Location",
                Offset: {Type: "Point",
                    X: 0,
                    Y: 0},
                Anchor: Position._convert(Position.center)
            });
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args[3], 1); //right
        });
        it("with full args should pass all args to _executeCommand",function(){
            clickBehaviorUnderTest.click({button: MouseButton.right, anchor: Position.bottomRight, offset: {x: 5, y: 8}});
            assert(clickBehaviorUnderTest._executeCommand.calledOnce);
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args.length, 4);
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args[1].toLowerCase(),"click");
            assert.deepEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args[2], {
                Type: "Location",
                Offset: {Type: "Point",
                    X: 5,
                    Y: 8},
                Anchor: Position._convert(Position.bottomRight)
            });
            assert.strictEqual(clickBehaviorUnderTest._executeCommand.getCall(0).args[3], 1); //right
        });
    });

});

describe("DoubleClickBehavior Tests",function() {
    var DoubleClickBehavior = require("../lib/clickbehavior.js").DoubleClickBehavior;
    var MouseButton = require("../lib/clickbehavior.js").MouseButton;
    var Position = require("../lib/location.js").Position;
    var doubleClickBehaviorUnderTest = null;

    beforeEach(function () {
        doubleClickBehaviorUnderTest =  ObjectUtils.mergeTestBehavior(DoubleClickBehavior);
        doubleClickBehaviorUnderTest._executeCommand = function(){};
        sinon.stub(doubleClickBehaviorUnderTest, "_executeCommand");
        doubleClickBehaviorUnderTest._executeWithEvents = doubleClickBehaviorUnderTest._executeCommand;
    });

    describe("doubleClick",function() {
        it("without args should pass default parameters to _executeCommand",function(){
            doubleClickBehaviorUnderTest.doubleClick();
            assert(doubleClickBehaviorUnderTest._executeCommand.calledOnce);
            assert.strictEqual(doubleClickBehaviorUnderTest._executeCommand.getCall(0).args.length, 4);
            assert.strictEqual(doubleClickBehaviorUnderTest._executeCommand.getCall(0).args[1].toLowerCase(), "dblclick");
            assert.deepEqual(doubleClickBehaviorUnderTest._executeCommand.getCall(0).args[2], {
                Type: "Location",
                Offset: {Type: "Point",
                    X: 0,
                    Y: 0},
                Anchor: Position._convert(Position.center)
            });
            assert.equal(doubleClickBehaviorUnderTest._executeCommand.getCall(0).args[3], 0);//left
        });
        it("with button arg should pass button arg and default location to _executeCommand",function(){
            doubleClickBehaviorUnderTest.doubleClick({button: MouseButton.right});
            assert(doubleClickBehaviorUnderTest._executeCommand.calledOnce);
            assert.strictEqual(doubleClickBehaviorUnderTest._executeCommand.getCall(0).args.length, 4);
            assert.strictEqual(doubleClickBehaviorUnderTest._executeCommand.getCall(0).args[1].toLowerCase(), "dblclick");
            assert.deepEqual(doubleClickBehaviorUnderTest._executeCommand.getCall(0).args[2], {
                Type: "Location",
                Offset: {Type: "Point",
                    X: 0,
                    Y: 0},
                Anchor: Position._convert(Position.center)
            });
            assert.equal(doubleClickBehaviorUnderTest._executeCommand.getCall(0).args[3], 1); //right
        });
        it("with full args should pass all args to _executeCommand",function(){
            doubleClickBehaviorUnderTest.doubleClick({button: MouseButton.right, anchor: Position.bottomRight, offset: {x: 5, y: 8}});
            assert(doubleClickBehaviorUnderTest._executeCommand.calledOnce);
            assert.strictEqual(doubleClickBehaviorUnderTest._executeCommand.getCall(0).args.length, 4);
            assert.strictEqual(doubleClickBehaviorUnderTest._executeCommand.getCall(0).args[1].toLowerCase(), "dblclick");
            assert.deepEqual(doubleClickBehaviorUnderTest._executeCommand.getCall(0).args[2], {
                Type: "Location",
                Offset: {Type: "Point",
                    X: 5,
                    Y: 8},
                Anchor: Position._convert(Position.bottomRight)
            });
            assert.strictEqual(doubleClickBehaviorUnderTest._executeCommand.getCall(0).args[3], 1); //right
        });
    });

});