// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/*
 * Created on 19/11/2015.
 */
var assert = require("assert");
var sinon = require("sinon");

var Mouse = require("../lib/mouse.js").Mouse;
var MouseButton = require("../lib/clickbehavior.js").MouseButton;

describe("Mouse tests",function() {
    var sessionMock;
    var communicationMock;
    var mouseUnderTest;

    var mouseButtonValues = Object.keys(MouseButton).filter(function(value){
        return !value.startsWith("_");
    });

    beforeEach(function() {
        communicationMock = {
            send: sinon.stub()
        };
        sessionMock = {
            _communication: communicationMock,
            fireEvent: sinon.stub(),
            _promiseManager: {wrapPromiseFunctionWithNotifyEvents :function(){} }
        };

        sinon.stub(sessionMock._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function(a1, a2) {
            return a2();
        });

        var promiseMock = {
            then: function(cb) {
                return cb({
                    Result: "someResult"
                });
            }
        };

        communicationMock.send.returns(promiseMock);

        mouseUnderTest = new Mouse(sessionMock);
    });

    describe("Click",function() {
        it("should throw exception if point argument value is undefined", function() {
            assert.throws(function(){mouseUnderTest.click()}, Error);
        });

        it("should throw exception if point argument value is  null", function() {
            assert.throws(function(){mouseUnderTest.click(null)}, Error);
        });

        it("should use Left mouse button when button arg is not used", function() {
            mouseUnderTest.click(100 ,100);
            sinon.assert.calledOnce(communicationMock.send);
            sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", {
                Operation: "MouseClick",
                Parameters: [100, 100, 0],
                type: "ExecuteDeviceReplayCommand"
            });
        });

        it("should use correct mouse button when button arg is being used", function() {
            mouseButtonValues.forEach(function(button)
            {
                mouseUnderTest.click(100, 100, button);
                sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", {
                    Operation: "MouseClick",
                    Parameters: [100, 100, mouseUnderTest._convertMouseButtonEnumToNativeValue(button)],
                    type: "ExecuteDeviceReplayCommand"
                });
            });
            sinon.assert.callCount(communicationMock.send,3);
        });

    });

    describe("DoubleClick",function() {
        it("should throw exception if point argument value is undefined", function() {
            assert.throws(function(){mouseUnderTest.doubleClick()}, Error);
        });

        it("should throw exception if point argument value is  null", function() {
            assert.throws(function(){mouseUnderTest.doubleClick(null)}, Error);
        });

        it("should use Left mouse button when button arg is not used", function() {
            mouseUnderTest.doubleClick(100 ,100);
            sinon.assert.calledOnce(communicationMock.send);
            sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", {
                Operation: "MouseDblClick",
                Parameters: [100, 100, 0],
                type: "ExecuteDeviceReplayCommand"
            });
        });

        it("should use the correct mouse button when button arg is being used", function() {
            mouseButtonValues.forEach(function(button)
            {
                mouseUnderTest.doubleClick(100 ,100, button);
                sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", {
                    Operation: "MouseDblClick",
                    Parameters: [100, 100,  mouseUnderTest._convertMouseButtonEnumToNativeValue(button)],
                    type: "ExecuteDeviceReplayCommand"
                });
            });
            sinon.assert.callCount(communicationMock.send,3);
        });
    });

    describe("DragAndDrop",function() {
        it("should throw exception if point argument value is undefined", function() {
            assert.throws(function(){mouseUnderTest.dragAndDrop()}, Error);
        });

        it("should throw exception if point argument value is  null", function() {
            assert.throws(function(){mouseUnderTest.dragAndDrop(null)}, Error);
        });

        it("should throw exception if fromPoint argument is undefined ", function() {
            assert.throws(function(){mouseUnderTest.dragAndDrop({'x':100,'y':100})}, Error);
        });

        it("should throw exception if fromPoint argument is undefined or null", function() {
            assert.throws(function(){mouseUnderTest.dragAndDrop({'x':100,'y':100}, null)}, Error);
        });

        it("should use Left mouse button when button arg is not used", function() {
            mouseUnderTest.dragAndDrop({'x':100,'y':100},{'x':101,'y':101});
            sinon.assert.calledOnce(communicationMock.send);
            sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", {
                Operation: "DragAndDrop",
                Parameters: [100, 100, 101, 101, 0],
                type: "ExecuteDeviceReplayCommand"
            });
        });

        it("should use the correct mouse button when button arg is being used", function() {
            mouseButtonValues.forEach(function(button)
            {
                mouseUnderTest.dragAndDrop({'x':100,'y':100},{'x':101,'y':101}, button);
                sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", {
                    Operation: "DragAndDrop",
                    Parameters: [100, 100, 101, 101, mouseUnderTest._convertMouseButtonEnumToNativeValue(button)],
                    type: "ExecuteDeviceReplayCommand"
                });
            });
            sinon.assert.callCount(communicationMock.send,3);
        });
    });

    describe("ButtonDown",function() {
        it("should throw exception if point argument value is undefined", function() {
            assert.throws(function(){mouseUnderTest.buttonDown()}, Error);
        });

        it("should throw exception if point argument value is  null", function() {
            assert.throws(function(){mouseUnderTest.buttonDown(null)}, Error);
        });

        it("should use Left mouse button when button arg is not used", function() {
            mouseUnderTest.buttonDown(100 ,100);
            sinon.assert.calledOnce(communicationMock.send);
            sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", {
                Operation: "MouseDown",
                Parameters: [100, 100, 0],
                type: "ExecuteDeviceReplayCommand"
            });
        });

        it("should use the correct mouse button when button arg is being used", function() {
            mouseButtonValues.forEach(function(button)
            {
                mouseUnderTest.buttonDown(100 ,100, button);
                sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", {
                    Operation: "MouseDown",
                    Parameters: [100, 100,  mouseUnderTest._convertMouseButtonEnumToNativeValue(button)],
                    type: "ExecuteDeviceReplayCommand"
                });
            });
            sinon.assert.callCount(communicationMock.send, 3);
        });
    });

    describe("ButtonUp",function() {
        it("should throw exception if point argument value is undefined", function() {
            assert.throws(function(){mouseUnderTest.buttonUp()}, Error);
        });

        it("should throw exception if point argument value is  null", function() {
            assert.throws(function(){mouseUnderTest.buttonUp(null)}, Error);
        });

        it("should use Left mouse button when button arg is not used", function() {
            mouseUnderTest.buttonUp(100 ,100);
            sinon.assert.calledOnce(communicationMock.send);
            sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", {
                Operation: "MouseUp",
                Parameters: [100, 100, 0],
                type: "ExecuteDeviceReplayCommand"
            });
        });

        it("should use the correct mouse button when button arg is being used", function() {
            mouseButtonValues.forEach(function(button)
            {
                mouseUnderTest.buttonUp(100 ,100, button);
                sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", {
                    Operation: "MouseUp",
                    Parameters: [100, 100,  mouseUnderTest._convertMouseButtonEnumToNativeValue(button)],
                    type: "ExecuteDeviceReplayCommand"
                });
            });
            sinon.assert.callCount(communicationMock.send,3);
        });
    });

    describe("Move",function() {
        it("should throw exception if point argument value is undefined", function() {
            assert.throws(function(){mouseUnderTest.move()}, Error);
        });

        it("should throw exception if point argument value is null", function() {
            assert.throws(function(){mouseUnderTest.move(null)}, Error);
        });

        it("should use Left mouse button when button arg is not used", function() {
            mouseUnderTest.move(100 ,100);
            sinon.assert.calledOnce(communicationMock.send);
            sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", {
                Operation: "MouseMove",
                Parameters: [100, 100],
                type: "ExecuteDeviceReplayCommand"
            });
        });
    });
});
