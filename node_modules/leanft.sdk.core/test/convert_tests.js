// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/*
 * Created on 26/11/2015.
 */

var assert = require("assert");
var Convert = require("../lib/convert.js").Convert;

describe("Convert unit tests", function() {
    describe("toString", function() {
        it("should return string as is", function() {
            assert.strictEqual(Convert.toString("aaa"), "aaa");
        });

        it("should return numeric string if value is a number", function() {
            assert.strictEqual(Convert.toString(123), "123");
        });

        it("should return string - true if true is passed", function() {
            assert.strictEqual(Convert.toString(true), "true");
        });

        it("should return string - false if false is passed", function() {
            assert.strictEqual(Convert.toString(false), "false");
        });

        it("should throw error if object is passed", function() {
            assert.throws(function() {
                Convert.toString({});
            })
        });
    });

    describe("toNumber", function() {
        it("should return number as is", function() {
            assert.strictEqual(Convert.toNumber(123), 123);
        });

        it("should return float number as is", function() {
            assert.strictEqual(Convert.toNumber(123.123), 123.123);
        });

        it("should return numeric value of numeric string", function() {
            assert.strictEqual(Convert.toNumber("123"), 123);
        });

        it("should return numeric value of float numeric string", function() {
            assert.strictEqual(Convert.toNumber("123.123"), 123.123);
        });

        it("should throw error if not numeric string is passed", function() {
            assert.throws(function() {
                Convert.toNumber("aaa");
            })
        });

        it("should throw error if boolean is passed", function() {
            assert.throws(function() {
                Convert.toNumber(true);
            })
        });

        it("should throw error if object is passed", function() {
            assert.throws(function() {
                Convert.toNumber({});
            })
        });
    });

    describe("toBool", function() {
        it("should return true if true is passed", function() {
            assert.strictEqual(Convert.toBool(true), true);
        });

        it("should return false if false is passed", function() {
            assert.strictEqual(Convert.toBool(false), false);
        });

        it("should return true if true string is passed", function() {
            assert.strictEqual(Convert.toBool("true"), true);
        });

        it("should return true if True string is passed", function() {
            assert.strictEqual(Convert.toBool("True"), true);
        });

        it("should return false if false string is passed", function() {
            assert.strictEqual(Convert.toBool("false"), false);
        });

        it("should return false if False string is passed", function() {
            assert.strictEqual(Convert.toBool("False"), false);
        });

        it("should throw error if string is passed", function() {
            assert.throws(function() {
                Convert.toBool("aaa");
            })
        });

        it("should throw error if number is passed", function() {
            assert.throws(function() {
                Convert.toBool(123);
            })
        });

        it("should throw error if object is passed", function() {
            assert.throws(function() {
                Convert.toBool({});
            })
        });
    });

    describe("toStringProperty", function(){
        it("should return regular expression as is", function() {
            assert.strictEqual(Convert.toStringProperty(/SomeRegEx/).toString(), /SomeRegEx/.toString());
        });

        it("should return string as is", function() {
            assert.strictEqual(Convert.toStringProperty("aaa"), "aaa");
        });

        it("should return numeric string if value is a number", function() {
            assert.strictEqual(Convert.toStringProperty(123), "123");
        });

        it("should return string - true if true is passed", function() {
            assert.strictEqual(Convert.toStringProperty(true), "true");
        });

        it("should return string - false if false is passed", function() {
            assert.strictEqual(Convert.toStringProperty(false), "false");
        });

        it("should throw error if object is passed", function() {
            assert.throws(function() {
                Convert.toStringProperty({});
            })
        });
    });

    describe("toDate", function () {
        var date;
        beforeEach(function () {
            date = new Date("6/20/2016");
        });

        it("should return a Date as is", function () {            
            assert.strictEqual(Convert.toDate(date), date);
        });

        it("should return a Date if the value is in 'd-MMM-yyyy'", function () {
            assert.deepEqual(Convert.toDate("20-Jun-2016"), date);
        });

        it("should return a Date if the value is in 'MM/dd/yyyy'", function () {
            assert.deepEqual(Convert.toDate("06/20/2016"), date);
        });

        it("should return a Date if the value is given in full string", function () {
            assert.deepEqual(Convert.toDate("June 20, 2016"), date);
        });

        it("should return a Date if the value is in 'yyyy-MM-dd'", function () {
            assert.deepEqual(Convert.toDate("2016-6-20"), date);
        });

        it("should throw error if the string is not correct", function () {
            assert.throws(function () {
                Convert.toDate("Wrong");
            })
        });

        it("should throw error if the value is not a string or Date", function () {
            assert.throws(function () {
                Convert.toDate({});
            })
        });
    });
});