// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/*
 * Created on 19/11/2015.
 */
var assert = require("assert");
var VerticalScrollPosition = require("../lib/scroll_info.js").VerticalScrollPosition;
var ScrollType = require("../lib/scroll_info.js").ScrollType;
var ScrollOrientation = require("../lib/scroll_info.js").ScrollOrientation;

describe("VerticalScrollPosition",function() {
    describe("_convert",function() {
        [['left', 0], ['right', 1], ['none', 2]].forEach(function(input) {
            var position = input[0];
            var value = input[1];
            it("should convert correctly position: " + position, function() {
                var result = VerticalScrollPosition._convert(position);
                assert.strictEqual(result, value);
            });
        }, this);

        it("should throw exception if the position value is not valid", function() {
            assert.throws(function() {
                 VerticalScrollPosition._convert('lef');
            });
        });


        it("should return null if value is null", function() {
            var result = VerticalScrollPosition._convert(null);
            assert.strictEqual(result,null);
        });

        it("should return undefined if value is undefined", function() {
            var result = VerticalScrollPosition._convert(undefined);
            assert.strictEqual(result,undefined);
        });

        it("should return correct value if input has capital letters", function() {
            var result = VerticalScrollPosition._convert("NONE");
            assert.strictEqual(result,2);
        });
    });
});

describe("ScrollType",function() {
    describe("_convert",function() {
        [['lineDecrement',0], ['lineIncrement',1], ['pageDecrement',2],['pageIncrement',3],['setSpecificLine',4],['first',6],['last',7]].forEach(function(input) {
            var scrollType = input[0];
            var value = input[1];
            it("should convert correctly scroll type: " + scrollType, function() {
                var result = ScrollType._convert(scrollType);
                assert.strictEqual(result, value);
            });
        }, this);

        it("should throw exception if the position value is not valid", function() {
            assert.throws(function() {
                ScrollType._convert('lineDecremen');
            });
        });


        it("should return null if value is null", function() {
            var result = ScrollType._convert(null);
            assert.strictEqual(result,null);
        });

        it("should return undefined if value is undefined", function() {
            var result = ScrollType._convert(undefined);
            assert.strictEqual(result,undefined);
        });

        it("should return correct value if input has capital letters", function() {
            var result = ScrollType._convert("LINEDecrement");
            assert.strictEqual(result,0);
        });
    });
});

