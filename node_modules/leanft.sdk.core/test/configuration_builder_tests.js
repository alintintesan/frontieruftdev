// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
var sinon = require("sinon");
var assert = require("assert");
var ConfigurationBuilder = require("./../lib/configuration_builder.js").ConfigurationBuilder;
var nconf = require('nconf');


describe("ConfigurationBuilder unit tests", function () {
    var configurationBuilder;

    beforeEach(function () {
	    configurationBuilder = new ConfigurationBuilder();
    });

    describe("in library mode tests", function () {
        it("should preserve default undefined properties", function () {
            var config = configurationBuilder.build({address: "aaa"}, true);
            assert.strictEqual(config.lwePath, undefined);
        });

        it("should preserve default inner properties", function () {
            var config = configurationBuilder.build({ report: { title: "aaa" } }, true);
            assert.strictEqual(config.report.enabled, true);
        });
    });

    describe("nconf tests", function () {
        var envStore = {};
        var argvStore = {};
        var fileStore = {};
        var sandbox;
        beforeEach(function () {
            sandbox = sinon.sandbox.create();
            //sandbox.stub(configurationBuilder, "_handleEnvPrefix");
            ConfigurationBuilder.prototype._config = undefined;
            sandbox.stub(nconf,"env", function () {
                return nconf.add("env", { type: 'literal', store: envStore});
            });
            sandbox.stub(nconf,"file", function (name) {
                return nconf.add(name, { type: 'literal', store: fileStore});
            });

            sandbox.stub(nconf,"argv", function () {
                return nconf.add("argv", { type: 'literal', store: argvStore});
            });
        });
        afterEach(function () {
            sandbox.restore();

            //clear all loaded stores
            Object.keys(nconf.stores).forEach(function(store) {
                nconf.remove(store);
            });
        });
        describe("boolean normalization", function () {
            it("should normalize boolean values", function () {
                argvStore.autoLaunch = "false";
                var config = configurationBuilder.build();
                assert.strictEqual(config.autoLaunch, false);
            });
            it("should recursively normalize boolean values", function () {
                argvStore.report = {enabled: "false"};
                var config = configurationBuilder.build();
                assert.strictEqual(config.report.enabled, false);
            });
        });
        describe("LEANFT_REPORTS_TARGETDIR env variable", function () {
            var targetdirEnvVarOrig = process.env.LEANFT_REPORTS_TARGETDIR;
            beforeEach(function () {
                process.env.LEANFT_REPORTS_TARGETDIR = "myTargetDir";
            });
            afterEach(function () {
                process.env.LEANFT_REPORTS_TARGETDIR = targetdirEnvVarOrig;
            });
            it("should be applied if the Env var is set", function () {
                var config = configurationBuilder.build();
                assert.equal(config.report.targetDirectory, "myTargetDir");
            });
            it("has less priority then code", function () {
                var config = configurationBuilder.build({report:{targetDirectory:"codeTargetDir"}});
                assert.equal(config.report.targetDirectory, "codeTargetDir");
            });
            it("has more priority then argv", function () {
                argvStore.report = {targetDirectory:"argvTargetDir"};
                var config = configurationBuilder.build();
                assert.equal(config.report.targetDirectory, "myTargetDir");
            });
            it("has more priority then file", function () {
                fileStore.report = {targetDirectory:"fileTargetDir"};
                var config = configurationBuilder.build();
                assert.equal(config.report.targetDirectory, "myTargetDir");
            });
        });
        it("_updateCodeStore should apply latest config", function () {
            configurationBuilder.build({report: {title: "codeTitle1"}});
            var config = configurationBuilder.build({report: {title: "codeTitle2"}});
            assert.equal(config.report.title, "codeTitle2");
        });
        it("config should be cached", function () {
            configurationBuilder.build({report: {title: "codeTitle1"}});
            var config = configurationBuilder.build();
            assert.equal(config.report.title, "codeTitle1");
        });
        it("report command line config should be put under .report", function () {
            argvStore.enabled = "false";
            var config = configurationBuilder.build();
            assert.strictEqual(config.report.enabled, false);
        });
    });
});
