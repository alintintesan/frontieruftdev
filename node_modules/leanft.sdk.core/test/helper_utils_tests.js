// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 1/25/2016.
 */

var RectangleUtils = require("../lib/helper_utils.js").RectangleUtils;
var assert = require("assert");

describe("RectangleUtils unit tests", function() {
    describe("convertNumArrayToRectArray unit tests", function() {
        it("should return 2 rectangles if 8 numbers passed", function() {
            var result = RectangleUtils.convertNumArrayToRectArray([1,1,1,1,2,2,2,2]);
            assert.strictEqual(result.length, 2);
        });
        it("should return correct rectangle coordinates if 8 numbers passed", function() {
            var result = RectangleUtils.convertNumArrayToRectArray([10,20,16,28,20,30,24,36]);
            assert.deepEqual(result[0], {
                x: 10,
                y: 20,
                width: 6,
                height: 8
            });
            assert.deepEqual(result[1], {
                x: 20,
                y: 30,
                width: 4,
                height: 6
            });

        });
    });
    describe("getRectangleOrDefault unit tests", function() {
        it("should return rectangle object with coordinates when 4 numbers are passed", function() {
            var result = RectangleUtils.getRectangleOrDefault({
                x:1,
                y:2,
                width:3,
                height:4});
            assert.deepEqual(result, {
                x: 1,
                y: 2,
                width: 3,
                height: 4,
                _left: 1,
                _top: 2,
                _right: 4,
                _bottom: 6
            });

        });
        it("should return rectangle object with default coordinates when null is passed", function() {
            var result = RectangleUtils.getRectangleOrDefault(null);
            assert.deepEqual(result, {
                x: -1,
                y: -1,
                width: 0,
                height: 0,
                _left: -1,
                _top: -1,
                _right: -1,
                _bottom: -1
            });


        });
        it("should return rectangle object with default coordinates when nothing is passed", function() {
            var result = RectangleUtils.getRectangleOrDefault();
            assert.deepEqual(result, {
                x: -1,
                y: -1,
                width: 0,
                height: 0,
                _left: -1,
                _top: -1,
                _right: -1,
                _bottom: -1
            })
        });
        it("should return rectangle object with default coordinates when empty object is passed", function() {
            var result = RectangleUtils.getRectangleOrDefault({});
            assert.deepEqual(result, {
                x: -1,
                y: -1,
                width: 0,
                height: 0,
                _left: -1,
                _top: -1,
                _right: -1,
                _bottom: -1
            })
        });

        it("should replace not passed coordinates with default values", function() {
            var result = RectangleUtils.getRectangleOrDefault({x:20});
            assert.deepEqual(result, {
                x: 20,
                y: -1,
                width: 0,
                height: 0,
                _left: 20,
                _top: -1,
                _right: 20,
                _bottom: -1

            })
        });

        it("should throw when rectangle is passed as string", function() {
            assert.throws(function() {
                RectangleUtils.getRectangleOrDefault("a")});
        });
    });

});