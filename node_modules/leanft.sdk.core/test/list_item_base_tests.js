// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/25/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Position = require("../lib/location.js").Position;
var MouseButton = require("../lib/clickbehavior.js").MouseButton;

describe("List Item Base Behavior", function () {

    var ListItemBaseBehavior = require("../lib/list_item_base.js").ListItemBaseBehavior;
    var ObjectUtils = require("../lib/object_utils.js").ObjectUtils;
    var listItemBaseBehaviorTest;
    var owner;

    beforeEach(function () {
        listItemBaseBehaviorTest = ObjectUtils.mergeTestBehavior(ListItemBaseBehavior);
        listItemBaseBehaviorTest._identifier = 10;
        listItemBaseBehaviorTest._textRepresentation = "TextRepresentation";
        listItemBaseBehaviorTest._ownerListBox = sinon.stub();
        listItemBaseBehaviorTest._executeWithEventsOnItemOnError = sinon.stub();
        listItemBaseBehaviorTest._executeOnItemsCollection = sinon.stub();
        listItemBaseBehaviorTest._executeSingleOpOnCollection = sinon.stub();
        listItemBaseBehaviorTest._executeWithEventsOnError = sinon.stub();
        listItemBaseBehaviorTest._executeNotWrapped = sinon.stub();
    });

    afterEach(function () {
        delete listItemBaseBehaviorTest._executeWithEventsOnItemOnError;
        delete listItemBaseBehaviorTest._executeOnItemsCollection;
        delete listItemBaseBehaviorTest._executeSingleOpOnCollection;
        delete listItemBaseBehaviorTest._executeWithEventsOnError;
        delete listItemBaseBehaviorTest._executeNotWrapped;
    });

    describe("_getIdentifier method", function () {
        it("should return correct values", function () {
            var res = listItemBaseBehaviorTest._getIdentifier();
            assert.strictEqual(res, 10);
        });
    });

    describe("_getTextRepresentation method", function () {
        it("should return correct values", function () {
            var res = listItemBaseBehaviorTest._getTextRepresentation();
            assert.strictEqual(res, "TextRepresentation");
        });
    });

    describe("text method", function () {
        it("should execute _getItemText with correct parameter", function () {
            listItemBaseBehaviorTest._ownerListBox._getItemText = sinon.stub();
            listItemBaseBehaviorTest.text();
            sinon.assert.calledOnce(listItemBaseBehaviorTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(listItemBaseBehaviorTest._executeWithEventsOnItemOnError, listItemBaseBehaviorTest._ownerListBox._getItemText, 10);
        });

        it("should return string if _getItemText returns string", function () {
            listItemBaseBehaviorTest._executeWithEventsOnItemOnError = sinon.stub().returns("value");;
            var res = listItemBaseBehaviorTest.text();
            assert.strictEqual(res, "value");
        });
    });

    describe("isFocused method", function () {
        it("should execute _isItemFocused with correct parameter", function () {
            listItemBaseBehaviorTest._ownerListBox._isItemFocused = sinon.stub();
            listItemBaseBehaviorTest.isFocused();
            sinon.assert.calledOnce(listItemBaseBehaviorTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(listItemBaseBehaviorTest._executeWithEventsOnItemOnError, listItemBaseBehaviorTest._ownerListBox._isItemFocused, 10);
        });

        it("should return boolean if _isItemFocused returns boolean", function () {
            listItemBaseBehaviorTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = listItemBaseBehaviorTest.isFocused();
            assert.strictEqual(res, true);
        });
    });

    describe("height method", function () {
        it("should execute _getItemHeight with correct parameter", function () {
            listItemBaseBehaviorTest._ownerListBox._getItemHeight = sinon.stub();
            listItemBaseBehaviorTest.height();
            sinon.assert.calledOnce(listItemBaseBehaviorTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(listItemBaseBehaviorTest._executeWithEventsOnItemOnError, listItemBaseBehaviorTest._ownerListBox._getItemHeight, 10);
        });

        it("should return number if _getItemHeight returns number", function () {
            listItemBaseBehaviorTest._executeWithEventsOnItemOnError = sinon.stub().returns(100);;
            var res = listItemBaseBehaviorTest.height();
            assert.strictEqual(res, 100);
        });
    });

    describe("isSelected method", function () {
        it("should execute _isItemSelected with correct parameter", function () {
            listItemBaseBehaviorTest._ownerListBox._isItemSelected = sinon.stub();
            listItemBaseBehaviorTest.isSelected();
            sinon.assert.calledOnce(listItemBaseBehaviorTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(listItemBaseBehaviorTest._executeWithEventsOnItemOnError, listItemBaseBehaviorTest._ownerListBox._isItemSelected, 10);
        });

        it("should return boolean if _isItemSelected returns boolean", function () {
            listItemBaseBehaviorTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = listItemBaseBehaviorTest.isSelected();
            assert.strictEqual(res, true);
        });
    });
});
