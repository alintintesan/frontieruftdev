// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/*
 * Created on 19/11/2015.
 */
var assert = require("assert");
var sinon = require("sinon");

var Keyboard = require("../lib/keyboard.js").Keyboard;

describe("Keyboard tests",function() {
   var sessionMock;
   var communicationMock;
   var keyboardUnderTest;

   beforeEach(function() {
      communicationMock = {
         send: sinon.stub()
      };
      sessionMock = {
         _communication: communicationMock,
         fireEvent: sinon.stub(),
         _promiseManager: {wrapPromiseFunctionWithNotifyEvents :function(){} }
      };

      sinon.stub(sessionMock._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function(a1, a2) {
         return a2();
      });

      var promiseMock = {
         then: function(cb) {
            return cb({
               Result: "someResult"
            });
         }
      };

      communicationMock.send.returns(promiseMock);

      keyboardUnderTest = new Keyboard(sessionMock);
   });

    describe("_convert",function() {
        [['space', 1], ['escape', 2], ['tab', 3], ['alt', 4], ['leftalt', 5], ['rightalt', 6], ['control', 7],
            ['leftcontrol', 8], ['rightcontrol', 9], ['shift', 10], ['leftshift', 11], ['rightshift', 12],
            ['system', 13], ['leftsystem', 14], ['rightsystem', 15], ['f1', 16], ['f2', 17], ['f3', 18], ['f4', 19],
            ['f5', 20], ['f6', 21], ['f7', 22], ['f8', 23], ['f9', 24], ['f10', 25], ['f11', 26], ['f12', 27],
            ['d0', 28], ['d1', 29], ['d2', 30], ['d3', 31], ['d4', 32], ['d5', 33], ['d6', 34],
            ['d7', 35], ['d8', 36], ['d9', 37], ['a', 38], ['b', 39], ['c', 40], ['d', 41],
            ['e', 42], ['f', 43], ['g', 44], ['h', 45], ['i', 46], ['j', 47], ['k', 48],
            ['l', 49], ['m', 50], ['n', 51], ['o', 52], ['p', 53], ['q', 54], ['r', 55],
            ['s', 56], ['t', 57], ['u', 58], ['v', 59], ['w', 60], ['x', 61], ['y', 62],
            ['z', 63], ['grave', 64], ['minus', 65], ['equal', 66], ['backspace', 67], ['leftbracket', 68],
            ['rightbracket', 69], ['backslash', 70], ['semicolon', 71], ['quote', 72], ['return', 73], ['comma', 74],
            ['period', 75], ['slash', 76], ['left', 77], ['up', 78], ['right', 79], ['down', 80], ['print', 81],
            ['pause', 82], ['insert', 83], ['delete', 84], ['home', 85], ['end', 86], ['pageup', 87], ['pagedown', 88],
            ['add', 89], ['subtract', 90], ['multiply', 91], ['divide', 92], ['decimal', 93], ['enter', 94], ['num0', 95],
            ['num1', 96], ['num2', 97], ['num3', 98], ['num4', 99], ['num5', 100], ['num6', 101], ['num7', 102],
            ['num8', 103], ['num9', 104], ['capslock', 105], ['scrolllock', 106], ['numlock', 107]].forEach(function(input) {

            var key = input[0];
            var value = input[1];
            it("should convert correctly key: " + key, function () {
                var result = keyboardUnderTest._convert(key);
                assert.strictEqual(result, value);
            });
        }, this);

        it("should throw exception if the key value is not valid", function() {
            assert.throws(function() {
                keyboardUnderTest._convert('blabla');
            });
        });


        it("should return null if value is null", function() {
            var result = keyboardUnderTest._convert(null);
            assert.strictEqual(result,null);
        });

        it("should return undefined if value is undefined", function() {
            var result = keyboardUnderTest._convert(undefined);
            assert.strictEqual(result,undefined);
        });

        it("should return correct value if input has capital letters", function() {
            var result = keyboardUnderTest._convert("d3");
            assert.strictEqual(result,31);
        });
    });

   describe("pressKey",function() {
      it("should throw exception if Key argument value is undefined ", function() {
         assert.throws(function(){keyboardUnderTest.pressKey()}, Error);
      });

      it("should throw exception if Key argument value is null", function() {
         assert.throws(function(){keyboardUnderTest.pressKey(null)}, Error);
      });

       it("should successfully execute the pressKey method with Enum param", function() {
           var key = keyboardUnderTest.Keys.d3;
           var keyOption = "EnumKeyValue";
           keyboardUnderTest.pressKey(key);
           sinon.assert.calledOnce(communicationMock.send);
           sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", { Operation: "PressKey", Parameters: [keyboardUnderTest._convert(key), keyOption], type: "ExecuteDeviceReplayCommand"});
       });

       it("should successfully execute the pressKey method with string param", function() {
           var key = "d3";
           var keyOption = "EnumKeyValue";
           keyboardUnderTest.pressKey(key);
           sinon.assert.calledOnce(communicationMock.send);
           sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", { Operation: "PressKey", Parameters: [keyboardUnderTest._convert(key), keyOption], type: "ExecuteDeviceReplayCommand"});
       });
   });

   describe("keyDown",function() {
      it("should throw exception if Key argument value is undefined", function() {
         assert.throws(function(){keyboardUnderTest.keyDown()}, Error);
      });

      it("should throw exception if Key argument value is null", function() {
         assert.throws(function(){keyboardUnderTest.keyDown(null)}, Error);
      });

       it("should successfully execute the keyDown method with Enum param", function() {
           var key = keyboardUnderTest.Keys.d3;
           var keyOption = "EnumKeyValue";
           keyboardUnderTest.keyDown(key);
           sinon.assert.calledOnce(communicationMock.send);
           sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", { Operation: "KeyDown", Parameters: [keyboardUnderTest._convert(key), keyOption], type: "ExecuteDeviceReplayCommand"});
       });

       it("should successfully execute the keyDown method with string param", function() {
           var key = "enter";
           var keyOption = "EnumKeyValue";
           keyboardUnderTest.keyDown(key);
           sinon.assert.calledOnce(communicationMock.send);
           sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", { Operation: "KeyDown", Parameters: [keyboardUnderTest._convert(key), keyOption], type: "ExecuteDeviceReplayCommand"});
       });
   });

   describe("keyUp",function() {
      it("should throw exception if Key argument value is undefined", function() {
         assert.throws(function(){keyboardUnderTest.keyUp()}, Error);
      });

      it("should throw exception if Key argument value is null", function() {
         assert.throws(function(){keyboardUnderTest.keyUp(null)}, Error);
      });

      it("should successfully execute the keyUp method with Enum param", function() {
          var key = keyboardUnderTest.Keys.d3;
          var keyOption = "EnumKeyValue";
           keyboardUnderTest.keyUp(key);
           sinon.assert.calledOnce(communicationMock.send);
           sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", { Operation: "KeyUp", Parameters: [keyboardUnderTest._convert(key), keyOption], type: "ExecuteDeviceReplayCommand"});
      });

       it("should successfully execute the keyUp method with string param", function() {
           var key = "rightAlt";
           var keyOption = "EnumKeyValue";
           keyboardUnderTest.keyUp(key);
           sinon.assert.calledOnce(communicationMock.send);
           sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", { Operation: "KeyUp", Parameters: [keyboardUnderTest._convert(key), keyOption], type: "ExecuteDeviceReplayCommand"});
       });
   });

   describe("sendString",function() {
      it("should throw exception if scanKey argument value is undefined", function() {
         assert.throws(function(){keyboardUnderTest.sendString()}, Error);
      });

      it("should throw exception if scanKey argument value is null", function() {
         assert.throws(function(){keyboardUnderTest.sendString(null)}, Error);
      });

      it("should successfully execute the sendString method", function() {
         keyboardUnderTest.sendString("82");
         sinon.assert.calledOnce(communicationMock.send);
         sinon.assert.calledWith(communicationMock.send, "ExecuteUtilityObjectCommand", { Operation: "SendString", Parameters: ["82"], type: "ExecuteDeviceReplayCommand"});
      });
   });
});