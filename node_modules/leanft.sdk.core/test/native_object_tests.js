// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 04/01/2016.
 */
var assert = require("assert");
var sinon = require("sinon");
var NativeObject = require("../lib/native_object.js");

describe("NativeObject tests", function() {
    var nativeObjectUnderTest;
    var sessionMock;
    var communicationMock;

    beforeEach(function() {
        communicationMock = {
            send: sinon.stub()
        };
        sessionMock = {
            _communication: communicationMock,
            fireEvent: sinon.stub(),
            _promiseManager: {wrapPromiseFunctionWithNotifyEvents :function(){} }
        };

        sinon.stub(sessionMock._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function(a1, a2) {
            return a2();
        });

        var promiseMock = {
            then: function(cb) {
                return cb({
                    Result: "someResult"
                });
            }
        };

        communicationMock.send.returns(promiseMock);

        nativeObjectUnderTest = new NativeObject(7, sessionMock);
    });

    describe("construction", function () {
        it("should throw if proxy id is null", function() {
            assert.throws(function() {
                new NativeObject(null, {});
            });
        });

        it("should throw if proxy id is undefined", function() {
            assert.throws(function() {
                new NativeObject(undefined, {});
            });
        });
        it("should throw if session id is null", function() {
            assert.throws(function() {
                new NativeObject(7, null);
            });
        });

        it("should throw if session id is undefined", function() {
            assert.throws(function() {
                new NativeObject(7, undefined);
            });
        });
    });


    describe("__invokeMethod__", function() {
        it("should send InvokeOnNativeObject message", function() {
            nativeObjectUnderTest.__invokeMethod__("someMethod");

            assert(communicationMock.send.calledOnce);
            assert.strictEqual(communicationMock.send.firstCall.args[0], "InvokeOnNativeObject");
        });

        it("should send correct type, method name and parameters", function() {
            nativeObjectUnderTest.__invokeMethod__("someMethod", "aa", 1);

            var expectedMsgInfo = {
                Operation: "someMethod",
                Parameters: ["aa", 1],
                ServerCookie: 7,
                InvocationType: "InvokeMethod"
            };

            assert(communicationMock.send.calledOnce);
            assert.deepEqual(communicationMock.send.firstCall.args[1], expectedMsgInfo);
        });

        it("should return the expected result", function() {
            var res = nativeObjectUnderTest.__invokeMethod__("someMethod");

            assert.strictEqual(res, "someResult");
        });

        it("should send the _toJSON value of a parameter which has a _toJSON function", function() {
            var objWithToJSON = {
                _toJSON: sinon.stub().returns(1)
            };
            nativeObjectUnderTest.__invokeMethod__("someMethod", "aa",objWithToJSON);

            var expectedMsgInfo = {
                Operation: "someMethod",
                Parameters: ["aa", 1],
                ServerCookie: 7,
                InvocationType: "InvokeMethod"
            };

            assert(communicationMock.send.calledOnce);
            assert(objWithToJSON._toJSON.calledOnce);
            assert.deepEqual(communicationMock.send.firstCall.args[1], expectedMsgInfo);

        });
    });

    describe("__getProperty__", function() {
        it("should send InvokeOnNativeObject message", function() {
            nativeObjectUnderTest.__getProperty__("someProp");

            assert(communicationMock.send.calledOnce);
            assert.strictEqual(communicationMock.send.firstCall.args[0], "InvokeOnNativeObject");
        });

        it("should send correct type, property name and parameters", function() {
            nativeObjectUnderTest.__getProperty__("someProp");

            var expectedMsgInfo = {
                Operation: "someProp",
                Parameters: [],
                ServerCookie: 7,
                InvocationType: "PropertyGet"
            };

            assert(communicationMock.send.calledOnce);
            assert.deepEqual(communicationMock.send.firstCall.args[1], expectedMsgInfo);
        });

        it("should return the expected result", function() {
            var res = nativeObjectUnderTest.__getProperty__("someProp");

            assert.strictEqual(res, "someResult");
        });
    });

    describe("__setProperty__", function() {
        it("should send InvokeOnNativeObject message", function() {
            nativeObjectUnderTest.__setProperty__("someProp", "aa");

            assert(communicationMock.send.calledOnce);
            assert.strictEqual(communicationMock.send.firstCall.args[0], "InvokeOnNativeObject");
        });

        it("should send correct type, property name and parameters", function() {
            nativeObjectUnderTest.__setProperty__("someProp", "aa");

            var expectedMsgInfo = {
                Operation: "someProp",
                Parameters: ["aa"],
                ServerCookie: 7,
                InvocationType: "PropertySet"
            };

            assert(communicationMock.send.calledOnce);
            assert.deepEqual(communicationMock.send.firstCall.args[1], expectedMsgInfo);
        });
    });

    describe("__getItem__", function() {
        it("should send InvokeOnNativeObject message", function() {
            nativeObjectUnderTest.__getItem__(1,2);

            assert(communicationMock.send.calledOnce);
            assert.strictEqual(communicationMock.send.firstCall.args[0], "InvokeOnNativeObject");
        });

        it("should send correct type, constant operation and the indexes", function() {
            nativeObjectUnderTest.__getItem__(1,2);

            var expectedMsgInfo = {
                Operation: "indexerGet",
                Parameters: [1,2],
                ServerCookie: 7,
                InvocationType: "IndexerGet"
            };

            assert(communicationMock.send.calledOnce);
            assert.deepEqual(communicationMock.send.firstCall.args[1], expectedMsgInfo);
        });

        it("should return the expected result", function() {
            var res = nativeObjectUnderTest.__getItem__(1,2);

            assert.strictEqual(res, "someResult");
        });
    });

    describe("__setItem__", function() {
        it("should send InvokeOnNativeObject message", function() {
            nativeObjectUnderTest.__setItem__(1, 2, "aa");

            assert(communicationMock.send.calledOnce);
            assert.strictEqual(communicationMock.send.firstCall.args[0], "InvokeOnNativeObject");
        });

        it("should send correct type, constant operation, the indexes and the value", function() {
            nativeObjectUnderTest.__setItem__(1, 2, "aa");

            var expectedMsgInfo = {
                Operation: "indexerSet",
                Parameters: [1, 2, "aa"],
                ServerCookie: 7,
                InvocationType: "IndexerSet"
            };

            assert(communicationMock.send.calledOnce);
            assert.deepEqual(communicationMock.send.firstCall.args[1], expectedMsgInfo);
        });
    });

    it("should return correct JSON from the _toJSON function", function() {
        var expectedJSON = {
            Type: "DynamicProxy",
            ServerCookie: 7
        };

        assert.deepEqual(nativeObjectUnderTest._toJSON(), expectedJSON);
    });

    describe("MEMBERS", function() {
        it("should send correct message", function() {
            nativeObjectUnderTest.MEMBERS();

            assert(communicationMock.send.calledOnce);
            assert.deepEqual(communicationMock.send.firstCall.args, ["GetNativeObjectMethods", {ServerCookie:7}]);
        });
        it("should return correct result", function() {
            var res = nativeObjectUnderTest.MEMBERS();

            assert.strictEqual(res, "someResult");
        });
    });

    describe("_fillKeysFromMembers", function() {
        beforeEach(function() {
            sinon.stub(nativeObjectUnderTest, "MEMBERS");
            sinon.stub(nativeObjectUnderTest, "_getMembers");
            sinon.stub(nativeObjectUnderTest, "__invokeMethod__");
            sinon.stub(nativeObjectUnderTest, "__getProperty__");
            sinon.stub(nativeObjectUnderTest, "__setProperty__");
        });
        afterEach(function() {
            nativeObjectUnderTest.MEMBERS.restore();
            nativeObjectUnderTest._getMembers.restore();
            nativeObjectUnderTest.__invokeMethod__.restore();
            nativeObjectUnderTest.__getProperty__.restore();
            nativeObjectUnderTest.__setProperty__.restore();
        });

        describe("method member", function() {
            beforeEach(function() {
                var promiseMock = {
                    then: function(cb) {
                        return cb(["someMethod()"]);
                    }
                };

                nativeObjectUnderTest._getMembers.returns(promiseMock);
            });

            it("should add a someMethod key", function() {
                nativeObjectUnderTest._fillKeysFromMembers();

                assert("someMethod" in nativeObjectUnderTest);
            });

            it("should call _invokeMethod with someMethod as the name", function() {
                nativeObjectUnderTest._fillKeysFromMembers();

                nativeObjectUnderTest.someMethod();

                assert(nativeObjectUnderTest.__invokeMethod__.calledOnce);
                assert.strictEqual(nativeObjectUnderTest.__invokeMethod__.firstCall.args[0], "someMethod");
            });

            it("should return result of _invokeMethod as is", function() {
                nativeObjectUnderTest._fillKeysFromMembers();

                nativeObjectUnderTest.__invokeMethod__.returns("aa");

                var res = nativeObjectUnderTest.someMethod();

                assert.strictEqual(res, "aa");
            });
        });

        describe("method with args member", function() {
            beforeEach(function() {
                var promiseMock = {
                    then: function(cb) {
                        return cb(["someMethod(arg1, arg2)"]);
                    }
                };

                nativeObjectUnderTest._getMembers.returns(promiseMock);
            });

            it("should add a someMethod key", function() {
                nativeObjectUnderTest._fillKeysFromMembers();

                assert("someMethod" in nativeObjectUnderTest);
            });

            it("should call _invokeMethod with someMethod as the name and pass args", function() {
                nativeObjectUnderTest._fillKeysFromMembers();

                nativeObjectUnderTest.someMethod(1, 2);

                assert(nativeObjectUnderTest.__invokeMethod__.calledOnce);
                assert.deepEqual(nativeObjectUnderTest.__invokeMethod__.firstCall.args, ["someMethod", 1, 2]);
            });

            it("should return result of _invokeMethod as is", function() {
                nativeObjectUnderTest._fillKeysFromMembers();

                nativeObjectUnderTest.__invokeMethod__.returns("aa");

                var res = nativeObjectUnderTest.someMethod();

                assert.strictEqual(res, "aa");
            });
        });

        describe("property (read-write) member", function() {
            beforeEach(function() {
                var promiseMock = {
                    then: function(cb) {
                        return cb(["someProp"]);
                    }
                };

                nativeObjectUnderTest._getMembers.returns(promiseMock);
            });

            it("should add a someProp key", function() {
                nativeObjectUnderTest._fillKeysFromMembers();

                assert("someProp" in nativeObjectUnderTest);
            });

            it("should call _getProperty with someProp as the name", function() {
                nativeObjectUnderTest._fillKeysFromMembers();

                var x = nativeObjectUnderTest.someProp;

                assert(nativeObjectUnderTest.__getProperty__.calledOnce);
                assert.strictEqual(nativeObjectUnderTest.__getProperty__.firstCall.args[0], "someProp");
            });

            it("should return result of _getProperty as is", function() {
                nativeObjectUnderTest._fillKeysFromMembers();

                nativeObjectUnderTest.__getProperty__.returns("aa");

                var res = nativeObjectUnderTest.someProp;

                assert.strictEqual(res, "aa");
            });

            it("should call _setProperty with someProp as the name and value as arg", function() {
                nativeObjectUnderTest._fillKeysFromMembers();

                nativeObjectUnderTest.someProp = 5;

                assert(nativeObjectUnderTest.__setProperty__.calledOnce);
                assert.deepEqual(nativeObjectUnderTest.__setProperty__.firstCall.args, ["someProp", 5]);
            });
        });

        describe("readonly property member", function() {
            beforeEach(function() {
                var promiseMock = {
                    then: function(cb) {
                        return cb(["someProp [ReadOnly]"]);
                    }
                };

                nativeObjectUnderTest._getMembers.returns(promiseMock);
            });

            it("should add a someProp key", function() {
                nativeObjectUnderTest._fillKeysFromMembers();

                assert("someProp" in nativeObjectUnderTest);
            });

            it("should call _getProperty with someProp as the name", function() {
                nativeObjectUnderTest._fillKeysFromMembers();

                var x = nativeObjectUnderTest.someProp;

                assert(nativeObjectUnderTest.__getProperty__.calledOnce);
                assert.strictEqual(nativeObjectUnderTest.__getProperty__.firstCall.args[0], "someProp");
            });

            it("should return result of _getProperty as is", function() {
                nativeObjectUnderTest._fillKeysFromMembers();

                nativeObjectUnderTest.__getProperty__.returns("aa");

                var res = nativeObjectUnderTest.someProp;

                assert.strictEqual(res, "aa");
            });

            it("should throw if assignment is invoked on readonly property", function() {
                nativeObjectUnderTest._fillKeysFromMembers();

                assert.throws(function() {
                    nativeObjectUnderTest.someProp = 5;
                });
            });
        });
    });
});