// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/04/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var ObjectUtils = require("../lib/object_utils.js").ObjectUtils;

describe("TableBaseOperationBehavior Test", function () {

    var TableBaseOperationBehavior = require("../lib/table_behavior.js").TableBaseOperationBehavior;
    var tableBaseOperationBehaviorUnderTest;
    var owner;
    beforeEach(function () {
        tableBaseOperationBehaviorUnderTest = ObjectUtils.mergeTestBehavior(TableBaseOperationBehavior);
        tableBaseOperationBehaviorUnderTest._createCell = sinon.stub();
        tableBaseOperationBehaviorUnderTest._getRowAndColumnCount = sinon.stub();
        tableBaseOperationBehaviorUnderTest._getColumnCount = sinon.stub();        
    });

    afterEach(function () {
        delete tableBaseOperationBehaviorUnderTest._createCell;
        delete tableBaseOperationBehaviorUnderTest._getRowAndColumnCount;
        delete tableBaseOperationBehaviorUnderTest._getColumnCount;
    });

    describe("_cells method", function () {
        beforeEach(function () {
            sinon.stub(tableBaseOperationBehaviorUnderTest, "_initTable");
            sinon.stub(tableBaseOperationBehaviorUnderTest, "_initRowInTable");
        });

        afterEach(function () {
            tableBaseOperationBehaviorUnderTest._initTable.restore();
            tableBaseOperationBehaviorUnderTest._initRowInTable.restore();
        });

        it("should call _getRowAndColumnCount if row is null and column is null", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb({rowCount: 3, columnCount: 5});
                }
            };
            tableBaseOperationBehaviorUnderTest._getRowAndColumnCount.returns(promiseMock);
            tableBaseOperationBehaviorUnderTest._cells();
            sinon.assert.calledOnce(tableBaseOperationBehaviorUnderTest._getRowAndColumnCount);
            sinon.assert.calledWith(tableBaseOperationBehaviorUnderTest._getRowAndColumnCount);
        });

        it("should call _getColumnCount if row is not null and column is null", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(3);
                }
            };
            tableBaseOperationBehaviorUnderTest._getColumnCount.returns(promiseMock);
            tableBaseOperationBehaviorUnderTest._cells(2);
            sinon.assert.calledOnce(tableBaseOperationBehaviorUnderTest._getColumnCount);
            sinon.assert.calledWith(tableBaseOperationBehaviorUnderTest._getColumnCount);
        });

        it("should call _initTable if row is null and column is null", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb({ rowCount: 3, columnCount: 5 });
                }
            };
            tableBaseOperationBehaviorUnderTest._getRowAndColumnCount.returns(promiseMock);
            tableBaseOperationBehaviorUnderTest._cells();
            sinon.assert.calledOnce(tableBaseOperationBehaviorUnderTest._initTable);
            sinon.assert.calledWith(tableBaseOperationBehaviorUnderTest._initTable, 3, 5);
        });

        it("should call _initRowInTable if row is not null and column is null", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(3);
                }
            };
            tableBaseOperationBehaviorUnderTest._getColumnCount.returns(promiseMock);
            tableBaseOperationBehaviorUnderTest._cells(2);
            sinon.assert.calledOnce(tableBaseOperationBehaviorUnderTest._initRowInTable);
            sinon.assert.calledWith(tableBaseOperationBehaviorUnderTest._initRowInTable, 2, 3);
        });

        it("should call _createCell if row is not null and column is not null", function () {
            tableBaseOperationBehaviorUnderTest._cells(2, 3);
            sinon.assert.calledOnce(tableBaseOperationBehaviorUnderTest._createCell);
            sinon.assert.calledWith(tableBaseOperationBehaviorUnderTest._createCell, 2, 3);
        });
    });

    describe("_initTable method", function () {
        beforeEach(function () {
            sinon.stub(tableBaseOperationBehaviorUnderTest, "_initRowInTable");
        });

        afterEach(function () {
            tableBaseOperationBehaviorUnderTest._initRowInTable.restore();
        });

        it("should call _initRowInTable with correct parameters", function () {
            tableBaseOperationBehaviorUnderTest._initTable(3, 5);
            sinon.assert.callCount(tableBaseOperationBehaviorUnderTest._initRowInTable, 3);
            var i = 0;
            for (i = 0; i < 3; i++) {
                sinon.assert.calledWith(tableBaseOperationBehaviorUnderTest._initRowInTable, i, 5);
            }            
        });

        it("should return the array of values from _initRowInTable", function () {
            tableBaseOperationBehaviorUnderTest._initRowInTable.returns({});
            var res = tableBaseOperationBehaviorUnderTest._initTable(3, 5);
            assert.deepEqual(res, [{}, {}, {}]);
        });
    });

    describe("_initRowInTable method", function () {
        beforeEach(function () {
        });

        afterEach(function () {
        });

        it("should call _createCell with correct parameters", function () {
            tableBaseOperationBehaviorUnderTest._initRowInTable(3, 5);
            sinon.assert.callCount(tableBaseOperationBehaviorUnderTest._createCell, 5);
            var i = 0;
            for (i = 0; i < 5; i++) {
                sinon.assert.calledWith(tableBaseOperationBehaviorUnderTest._createCell, 3, i);
            }
        });

        it("should return the array of values from _createCell", function () {
            tableBaseOperationBehaviorUnderTest._createCell.returns({});
            var res = tableBaseOperationBehaviorUnderTest._initRowInTable(3, 5);
            assert.deepEqual(res, [{}, {}, {}, {}, {}]);
        });
    });
});
