// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/*
 * Created on 17/11/2015.
 */
var assert = require("assert");
var sinon = require("sinon");
var ObjectUtils = require("./../lib/object_utils.js").ObjectUtils;

describe("LocationInfoProvider Tests",function() {
    var LocationInfoProvider = ObjectUtils.mergeTestBehavior(require("../lib/location_info_provider.js").LocationInfoProvider);

    var locationInfoProviderUnderTest = null;

    beforeEach(function () {
        locationInfoProviderUnderTest = LocationInfoProvider;
        var promiseMock = {
            then: function(cb) {
                return cb([8,12]);
            }
        };
        locationInfoProviderUnderTest._getROProperties = sinon.stub();
        locationInfoProviderUnderTest._getROProperties.returns(promiseMock);
    });

    afterEach(function () {
        delete locationInfoProviderUnderTest._getROProperties;
    });

    describe("location",function() {
        it("should pass correct parameters to _getROProperties", function () {
            locationInfoProviderUnderTest.location();

            assert(locationInfoProviderUnderTest._getROProperties.calledOnce);
            assert(locationInfoProviderUnderTest._getROProperties.calledWith("x","y"));
        });
        it("should return correct structure", function () {
            var res = locationInfoProviderUnderTest.location();
            assert.equal(res.x, 8);
            assert.equal(res.y, 12);
        });
    });

    describe("absoluteLocation",function() {
        it("should pass correct parameters to _getROProperties", function () {
            locationInfoProviderUnderTest.absoluteLocation();
            assert(locationInfoProviderUnderTest._getROProperties.calledOnce);
            assert(locationInfoProviderUnderTest._getROProperties.calledWith("abs_x", "abs_y"));
        });
        it("should return correct structure", function () {
            var res = locationInfoProviderUnderTest.absoluteLocation();
            assert.equal(res.x, 8);
            assert.equal(res.y, 12);
        });
    });

    describe("size",function() {
        it("should pass correct parameters to _getROProperties", function () {
            locationInfoProviderUnderTest.size();
            assert(locationInfoProviderUnderTest._getROProperties.calledOnce);
            assert(locationInfoProviderUnderTest._getROProperties.calledWith("width", "height"));
        });
        it("should return correct structure", function () {
            var res = locationInfoProviderUnderTest.size();
            assert.equal(res.width, 8);
            assert.equal(res.height, 12);
        });
    });
});

describe("Location Description Behavior Tests", function () {

    var LocationDescriptionBehavior = require("../lib/location_info_provider.js").LocationDescriptionBehavior;
    var ObjectUtils = require("../lib/object_utils.js").ObjectUtils;
    var DescriptionBase = require("../lib/description_base.js");
    var locationDescUnderTest;

    beforeEach(function () {
        locationDescUnderTest = new DescriptionBase();
        locationDescUnderTest._init({
            technology: "Technology",
            leanftType: "TestObject"
        });

        ObjectUtils.extend(locationDescUnderTest, LocationDescriptionBehavior);
        //init grouped properties
        locationDescUnderTest.location({});
        locationDescUnderTest.absoluteLocation({});
        locationDescUnderTest.size({});
    });

    afterEach(function () {
    });

    describe("location method", function () {
        it("should return this - builder", function () {
            var res = locationDescUnderTest.location({});

            assert.strictEqual(res, locationDescUnderTest);
        });

        it("should add x to flatter when only x given", function () {
            locationDescUnderTest.location({
                x: 5
            });

            assert.strictEqual(locationDescUnderTest._properties["Location"].x, 5);
            assert(!("y" in locationDescUnderTest._properties["Location"]));
        });

        it("should add y to flatter when only y given", function () {
            locationDescUnderTest.location({
                y: 5
            });

            assert.strictEqual(locationDescUnderTest._properties["Location"].y, 5);
            assert(!("x" in locationDescUnderTest._properties["Location"]));
        });

        it("should add x and y to flatter when both x and y given", function () {
            locationDescUnderTest.location({
                x: 3,
                y: 5
            });

            assert.strictEqual(locationDescUnderTest._properties["Location"].x, 3);
            assert.strictEqual(locationDescUnderTest._properties["Location"].y, 5);
        });

        it("should have correct values if get after set", function () {
            locationDescUnderTest.location({
                x: 3,
                y: 5
            });

            var res = locationDescUnderTest.location();

            assert.strictEqual(res.x, 3);
            assert.strictEqual(res.y, 5);
        });

        it("should modify value of x and leave y as is modify value of x after its set", function () {
            locationDescUnderTest.location({
                x: 3,
                y: 5
            });

            locationDescUnderTest.location().x = 8;

            assert.strictEqual(locationDescUnderTest._properties["Location"].x, 8);
            assert.strictEqual(locationDescUnderTest._properties["Location"].y, 5);
        });

        it("should return an object without x or y but not null if get without set", function () {
            var res = locationDescUnderTest.location();

            assert.notStrictEqual(res, null);
            assert(!("x" in res));
            assert(!("y" in res));
        });

        it("should set the x value on the flatter if setting x without setting location value", function () {
            locationDescUnderTest.location().x = 5;

            var res = locationDescUnderTest.location();

            assert.notStrictEqual(res, null);
            assert.strictEqual(res.x, 5);
        });

        it("should not delete it but reset its value if setting location to null", function () {
            locationDescUnderTest.location(null);

            var res = locationDescUnderTest.location();

            assert.notStrictEqual(res, null);
            assert(!("x" in res));
            assert(!("y" in res));
        });

        it("should have correct keys map", function () {
            var res = locationDescUnderTest.location();

            assert.deepEqual(res._keysMap, {
                x: "x",
                y: "y"
            });
        });
    });

    describe("absoluteLocation method", function () {
        it("should return this - builder", function () {
            var res = locationDescUnderTest.absoluteLocation({});

            assert.strictEqual(res, locationDescUnderTest);
        });

        it("should add x to flatter when only x given", function () {
            locationDescUnderTest.absoluteLocation({
                x: 5
            });

            assert.strictEqual(locationDescUnderTest._properties["AbsoluteLocation"].x, 5);
            assert(!("y" in locationDescUnderTest._properties["AbsoluteLocation"]));
        });

        it("should add y to flatter when only y given", function () {
            locationDescUnderTest.absoluteLocation({
                y: 5
            });

            assert.strictEqual(locationDescUnderTest._properties["AbsoluteLocation"].y, 5);
            assert(!("x" in locationDescUnderTest._properties["AbsoluteLocation"]));
        });

        it("should add x and y to flatter when both x and y given", function () {
            locationDescUnderTest.absoluteLocation({
                x: 3,
                y: 5
            });

            assert.strictEqual(locationDescUnderTest._properties["AbsoluteLocation"].x, 3);
            assert.strictEqual(locationDescUnderTest._properties["AbsoluteLocation"].y, 5);
        });

        it("should have correct values if get after set", function () {
            locationDescUnderTest.absoluteLocation({
                x: 3,
                y: 5
            });

            var res = locationDescUnderTest.absoluteLocation();

            assert.strictEqual(res.x, 3);
            assert.strictEqual(res.y, 5);
        });

        it("should modify value of x and leave y as is if modify value of x after its set", function () {
            locationDescUnderTest.absoluteLocation({
                x: 3,
                y: 5
            });

            locationDescUnderTest.absoluteLocation().x = 8;

            assert.strictEqual(locationDescUnderTest._properties["AbsoluteLocation"].x, 8);
            assert.strictEqual(locationDescUnderTest._properties["AbsoluteLocation"].y, 5);
        });

        it("should return an object without x or y but not null if get without set ", function () {
            var res = locationDescUnderTest.absoluteLocation();

            assert.notStrictEqual(res, null);
            assert(!("x" in res));
            assert(!("y" in res));
        });

        it("should set the x value on the flatter, if setting x without setting absoluteLocation value", function () {
            locationDescUnderTest.absoluteLocation().x = 5;

            var res = locationDescUnderTest.absoluteLocation();

            assert.notStrictEqual(res, null);
            assert.strictEqual(res.x, 5);
        });

        it("should not delete it but reset its value if setting absoluteLocation to null", function () {
            locationDescUnderTest.absoluteLocation(null);

            var res = locationDescUnderTest.absoluteLocation();

            assert.notStrictEqual(res, null);
            assert(!("x" in res));
            assert(!("y" in res));
        });

        it("should have correct keys map", function () {
            var res = locationDescUnderTest.absoluteLocation();

            assert.deepEqual(res._keysMap, {
                x: "abs_x",
                y: "abs_y"
            });
        });
    });

    describe("size method", function () {
        it("should return this - builder", function () {
            var res = locationDescUnderTest.size({});

            assert.strictEqual(res, locationDescUnderTest);
        });
        it("should add width to flatter when only width given", function () {
            locationDescUnderTest.size({
                width: 5
            });

            assert.strictEqual(locationDescUnderTest._properties["Size"].width, 5);
            assert(!("height" in locationDescUnderTest._properties["Size"]));
        });
        it("should add height to flatter when only height given", function () {
            locationDescUnderTest.size({
                height: 5
            });

            assert.strictEqual(locationDescUnderTest._properties["Size"].height, 5);
            assert(!("width" in locationDescUnderTest._properties["Size"]));
        });

        it("should add width and height to flatter when both width and height given", function () {
            locationDescUnderTest.size({
                width: 3,
                height: 5
            });

            assert.strictEqual(locationDescUnderTest._properties["Size"].width, 3);
            assert.strictEqual(locationDescUnderTest._properties["Size"].height, 5);
        });

        it("should have correct values if get after set", function () {
            locationDescUnderTest.size({
                width: 3,
                height: 5
            });

            var res = locationDescUnderTest.size();

            assert.strictEqual(res.width, 3);
            assert.strictEqual(res.height, 5);
        });

        it("should modify value of width and leave height as is if modify value of width after its set", function () {
            locationDescUnderTest.size({
                width: 3,
                height: 5
            });

            locationDescUnderTest.size().width = 8;

            assert.strictEqual(locationDescUnderTest._properties["Size"].width, 8);
            assert.strictEqual(locationDescUnderTest._properties["Size"].height, 5);
        });

        it("should return an object without width or height but not null if get without set ", function () {
            var res = locationDescUnderTest.size();

            assert.notStrictEqual(res, null);
            assert(!("width" in res));
            assert(!("height" in res));
        });

        it("should set the width value on the flatter if setting width without setting size value", function () {
            locationDescUnderTest.size().width = 5;

            var res = locationDescUnderTest.size();

            assert.notStrictEqual(res, null);
            assert.strictEqual(res.width, 5);
        });

        it("should not delete it but reset its value if setting size to null", function () {
            locationDescUnderTest.size(null);

            var res = locationDescUnderTest.size();

            assert.notStrictEqual(res, null);
            assert(!("width" in res));
            assert(!("height" in res));
        });

        it("should have correct keys map", function () {
            var res = locationDescUnderTest.size();

            assert.deepEqual(res._keysMap, {
                width: "width",
                height: "height"
            });
        });
    });
});