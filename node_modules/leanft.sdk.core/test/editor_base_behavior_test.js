// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var ObjectUtils = require("./../lib/object_utils.js").ObjectUtils;

describe("Editor Base Test Object Behavior", function () {

    var EditorBaseTOBehavior = ObjectUtils.mergeTestBehavior(require("../lib/editor_base_behavior.js").EditorBaseTOBehavior);
    var editorTOUnderTest;

    beforeEach(function () {
        editorTOUnderTest = EditorBaseTOBehavior;
        editorTOUnderTest._getROProperty = sinon.stub();
        editorTOUnderTest._getROProperties = sinon.stub();
        editorTOUnderTest._executeWithEvents = sinon.stub();
    });

    afterEach(function () {
        delete editorTOUnderTest._getROProperty;
        delete editorTOUnderTest._getROProperties;
        delete editorTOUnderTest._executeWithEvents;
    });

    describe("select method", function () {
        it("should throw error if fromLine is undefined", function () {
            assert.throws(function () {
                editorTOUnderTest.select();
            });
        });

        it("should throw error if fromLine is null", function () {
            assert.throws(function () {
                editorTOUnderTest.select(null);
            });
        });

        it("should throw error if fromCharPos is undefined", function () {
            assert.throws(function () {
                editorTOUnderTest.select(0);
            });
        });

        it("should throw error if fromCharPos is null", function () {
            assert.throws(function () {
                editorTOUnderTest.select(0, null);
            });
        });

        it("should throw error if toLine is undefined", function () {
            assert.throws(function () {
                editorTOUnderTest.select(0, 0);
            });
        });

        it("should throw error if toLine is null", function () {
            assert.throws(function () {
                editorTOUnderTest.select(0, 0, null);
            });
        });

        it("should throw error if toCharPos is undefined", function () {
            assert.throws(function () {
                editorTOUnderTest.select(0, 0, 0);
            });
        });

        it("should throw error if toCharPos is null", function () {
            assert.throws(function () {
                editorTOUnderTest.select(0, 0, 0, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            editorTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = editorTOUnderTest.select(0, 0, 0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SetSelection' if parameters are all number", function () {
            editorTOUnderTest.select(1,2,3,4);
            sinon.assert.calledOnce(editorTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(editorTOUnderTest._executeWithEvents, sinon.match({ 0: 1, 1: 2, 2: 3, 3: 4 }), "SetSelection", 1,2,3,5);
        });

        it("should execute _executeWithEvents 'SetSelection' if parameters are all string", function () {
            editorTOUnderTest.select("1", "2", "3", "4");
            sinon.assert.calledOnce(editorTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(editorTOUnderTest._executeWithEvents, sinon.match({ 0: "1", 1: "2", 2: "3", 3: "4" }), "SetSelection", 1, 2, 3, 5);
        });

        it("should execute _executeWithEvents 'SetSelection' if parameters are strings and numbers", function () {
            editorTOUnderTest.select("1", 2, 3, "4");
            sinon.assert.calledOnce(editorTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(editorTOUnderTest._executeWithEvents, sinon.match({ 0: "1", 1: 2, 2: 3, 3: "4" }), "SetSelection", 1, 2, 3, 5);
        });
    });

    describe("cursorLine method", function () {

        it("should return the execution promise", function () {
            var executionPromise = {};
            editorTOUnderTest._getROProperty.returns(executionPromise);
            var res = editorTOUnderTest.cursorLine();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'line' with correct parameters", function () {
            editorTOUnderTest.cursorLine();
            sinon.assert.calledOnce(editorTOUnderTest._getROProperty);
            sinon.assert.calledWith(editorTOUnderTest._getROProperty, "line", sinon.match({}));
        });
    });

    describe("cursorColumn method", function () {

        it("should return the execution promise", function () {
            var executionPromise = {};
            editorTOUnderTest._getROProperty.returns(executionPromise);
            var res = editorTOUnderTest.cursorColumn();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'column' with correct parameters", function () {
            editorTOUnderTest.cursorColumn();
            sinon.assert.calledOnce(editorTOUnderTest._getROProperty);
            sinon.assert.calledWith(editorTOUnderTest._getROProperty, "column", sinon.match({}));
        });
    });

    describe("setCursorPosition method", function () {
        it("should throw error if line is undefined", function () {
            assert.throws(function () {
                editorTOUnderTest.setCursorPosition();
            });
        });

        it("should throw error if line is null", function () {
            assert.throws(function () {
                editorTOUnderTest.setCursorPosition(null);
            });
        });

        it("should throw error if charPos is undefined", function () {
            assert.throws(function () {
                editorTOUnderTest.setCursorPosition(0);
            });
        });

        it("should throw error if charPos is null", function () {
            assert.throws(function () {
                editorTOUnderTest.setCursorPosition(0, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            editorTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = editorTOUnderTest.setCursorPosition(0, 1);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SetCaretPos' if parameters are all number", function () {
            editorTOUnderTest.setCursorPosition(1, 2);
            sinon.assert.calledOnce(editorTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(editorTOUnderTest._executeWithEvents, sinon.match({ 0: 1, 1: 2 }), "SetCaretPos", 1, 2);
        });

        it("should execute _executeWithEvents 'SetCaretPos' if parameters are all string", function () {
            editorTOUnderTest.setCursorPosition("1", "2");
            sinon.assert.calledOnce(editorTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(editorTOUnderTest._executeWithEvents, sinon.match({ 0: "1", 1: "2" }), "SetCaretPos", 1, 2);
        });

        it("should execute _executeWithEvents 'SetCaretPos' if parameters are strings and numbers", function () {
            editorTOUnderTest.setCursorPosition("1", 2);
            sinon.assert.calledOnce(editorTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(editorTOUnderTest._executeWithEvents, sinon.match({ 0: "1", 1: 2 }), "SetCaretPos", 1, 2);
        });
    });
});
