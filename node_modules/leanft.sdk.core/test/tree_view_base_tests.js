// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/28/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var MouseButton = require("../lib/clickbehavior.js").MouseButton;

describe("Tree View Description Base", function () {
    var DescriptionBase = require("../lib/description_base.js");
    var ObjectUtils = require("../lib/object_utils.js").ObjectUtils;
    var TreeViewDescriptionBaseBehavior = require("../lib/tree_view_base.js").TreeViewDescriptionBaseBehavior;
    var treeViewDescUnderTest;

    beforeEach(function () {
        treeViewDescUnderTest = new DescriptionBase();
        treeViewDescUnderTest._init({
            technology: "Technology",
            leanftType: "TestObject"
        });

        ObjectUtils.extend(treeViewDescUnderTest, TreeViewDescriptionBaseBehavior);
    });

    describe("visibleNodes method", function () {
        it("should add 'all items' to _properties when value is given", function () {
            treeViewDescUnderTest.visibleNodes(["item1", "item2"]);
            assert.strictEqual(treeViewDescUnderTest._properties["all items"], "item1\nitem2");
        });

        //it("should add 'all items' to _properties when value is given using property bag", function () {
        //    treeViewDescUnderTest = TreeView({
        //        visibleNodes: ["item1", "item2"]
        //    });
        //    assert.strictEqual(treeViewDescUnderTest._properties["all items"], "item1\nitem2");
        //});

        it("should return this - builder pattern, when value is given", function () {
            var result = treeViewDescUnderTest.visibleNodes(["item1", "item2"]);
            assert.strictEqual(result, treeViewDescUnderTest);
        });

        it("should remove 'all items' from _properties when value is null", function () {
            treeViewDescUnderTest._properties["all items"] = "item1\nitem2";
            treeViewDescUnderTest.visibleNodes(null);
            assert(!("all items" in treeViewDescUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties when value is not given", function () {
            treeViewDescUnderTest._properties["all items"] = "item1\nitem2";
            var value = treeViewDescUnderTest.visibleNodes();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'all items' in _properties when get is called", function () {
            treeViewDescUnderTest._properties["all items"] = "item1\nitem2";
            treeViewDescUnderTest.visibleNodes();
            assert.strictEqual(treeViewDescUnderTest._properties["all items"], "item1\nitem2");
        });
    });

    describe("selectedNodes method", function () {
        it("should add 'selection' to _properties when value is given", function () {
            treeViewDescUnderTest.selectedNodes(["item1", "item2"]);
            assert.strictEqual(treeViewDescUnderTest._properties["selection"], "item1\nitem2");
        });

        //it("should add 'selection' to _properties when value is given using property bag", function () {
        //    treeViewDescUnderTest = TreeView({
        //        selectedNodes: ["item1", "item2"]
        //    });
        //    assert.strictEqual(treeViewDescUnderTest._properties["selection"], "item1\nitem2");
        //});

        it("should return this - builder pattern, when value is given", function () {
            var result = treeViewDescUnderTest.selectedNodes(["item1", "item2"]);
            assert.strictEqual(result, treeViewDescUnderTest);
        });

        it("should remove 'selection' from _properties when value is null", function () {
            treeViewDescUnderTest._properties["selection"] = "item1\nitem2";
            treeViewDescUnderTest.selectedNodes(null);
            assert(!("selection" in treeViewDescUnderTest._properties));
        });
        it("should return the value of 'selection' from _properties when value is not given", function () {
            treeViewDescUnderTest._properties["selection"] = "item1\nitem2";
            var value = treeViewDescUnderTest.selectedNodes();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'selection' in _properties when get is called", function () {
            treeViewDescUnderTest._properties["selection"] = "item1\nitem2";
            treeViewDescUnderTest.selectedNodes();
            assert.strictEqual(treeViewDescUnderTest._properties["selection"], "item1\nitem2");
        });
    });

    describe("nodesCount method", function () {
        it("should add 'items count' to _properties when value is given", function () {
            treeViewDescUnderTest.nodesCount(100);
            assert.strictEqual(treeViewDescUnderTest._properties["items count"], 100);
        });

        it("should add 'items count' to _properties when value is given in string", function () {
            treeViewDescUnderTest.nodesCount('100');
            assert.strictEqual(treeViewDescUnderTest._properties["items count"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescUnderTest.nodesCount(100);
            assert.strictEqual(result, treeViewDescUnderTest);
        });

        it("should remove 'items count' from _properties when value is null", function () {
            treeViewDescUnderTest._properties["items count"] = 100;
            treeViewDescUnderTest.nodesCount(null);
            assert(!("items count" in treeViewDescUnderTest._properties));
        });

        it("should return the value of 'items count' from _properties when value is not given", function () {
            treeViewDescUnderTest._properties["items count"] = 100;
            var result = treeViewDescUnderTest.nodesCount();
            assert.equal(result, 100);
        });
    });
});

describe("Tree View Test Object", function () {
    var ObjectUtils = require("../lib/object_utils.js").ObjectUtils;
    var TreeViewTOBaseBehavior = require("../lib/tree_view_base.js").TreeViewTOBaseBehavior;
    var treeViewTOBaseUnderTest;

    beforeEach(function () {
        treeViewTOBaseUnderTest = ObjectUtils.mergeTestBehavior(TreeViewTOBaseBehavior);
        treeViewTOBaseUnderTest._executeNotWrapped = sinon.stub();
        treeViewTOBaseUnderTest._executeWithEvents = sinon.stub();
    });

    afterEach(function () {
        delete treeViewTOBaseUnderTest._executeNotWrapped;
        delete treeViewTOBaseUnderTest._executeWithEvents;
    });

    describe("_activateWithButton method", function () {
        it("should throw error if node is undefined", function () {
            assert.throws(function () {
                treeViewTOBaseUnderTest._activateWithButton();
            });
        });

        it("should throw error if node is null", function () {
            assert.throws(function () {
                treeViewTOBaseUnderTest._activateWithButton(null);
            });
        });

        it("should throw error if node has no identifier", function () {
            assert.throws(function () {
                treeViewTOBaseUnderTest._activateWithButton({});
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeWithEvents.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._activateWithButton(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Activate' if node is a number", function () {
            treeViewTOBaseUnderTest._activateWithButton(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Activate", 10, 0);
        });

        it("should execute _executeWithEvents 'Activate' if node is a string", function () {
            treeViewTOBaseUnderTest._activateWithButton("identifier");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeWithEvents, sinon.match({ 0: "identifier" }), "Activate", "identifier", 0);
        });

        it("should execute _executeWithEvents 'Activate' if node is an object", function () {
            var node = {}; node._identifier = 10;
            treeViewTOBaseUnderTest._activateWithButton(node);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeWithEvents, sinon.match({ 0: { _identifier: 10 } }), "Activate", 10, 0);
        });

        it("should execute _executeWithEvents 'Activate' with Mouse Button Left if null", function () {
            var node = {}; node._identifier = 10;
            treeViewTOBaseUnderTest._activateWithButton(node, null);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeWithEvents, sinon.match({ 0: { _identifier: 10 } }), "Activate", 10, 0);
        });

        it("should execute _executeWithEvents 'Activate' with correct Mouse Button", function () {
            var node = {}; node._identifier = 10;
            treeViewTOBaseUnderTest._activateWithButton(node, MouseButton.right);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeWithEvents, sinon.match({ 0: { _identifier: 10 }, 1: "right" }), "Activate", 10, 1);
        });
    });

    describe("_selectWithButton method", function () {
        it("should throw error if node is undefined", function () {
            assert.throws(function () {
                treeViewTOBaseUnderTest._selectWithButton();
            });
        });

        it("should throw error if node is null", function () {
            assert.throws(function () {
                treeViewTOBaseUnderTest._selectWithButton(null);
            });
        });

        it("should throw error if node has no identifier", function () {
            assert.throws(function () {
                treeViewTOBaseUnderTest._selectWithButton({});
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeWithEvents.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._selectWithButton(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Select' if node is a number", function () {
            treeViewTOBaseUnderTest._selectWithButton(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Select", 10, 0);
        });

        it("should execute _executeWithEvents 'Select' if node is a string", function () {
            treeViewTOBaseUnderTest._selectWithButton("identifier");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeWithEvents, sinon.match({ 0: "identifier" }), "Select", "identifier", 0);
        });

        it("should execute _executeWithEvents 'Select' if node is an object", function () {
            var node = {}; node._identifier = 10;
            treeViewTOBaseUnderTest._selectWithButton(node);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeWithEvents, sinon.match({ 0: { _identifier: 10 } }), "Select", 10, 0);
        });


        it("should execute _executeWithEvents 'Select' with Mouse Button Left if null", function () {
            var node = {}; node._identifier = 10;
            treeViewTOBaseUnderTest._selectWithButton(node, null);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeWithEvents, sinon.match({ 0: { _identifier: 10 } }), "Select", 10, 0);
        });

        it("should execute _executeWithEvents 'Select' with correct Mouse Button", function () {
            var node = {}; node._identifier = 10;
            treeViewTOBaseUnderTest._selectWithButton(node, MouseButton.right);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeWithEvents, sinon.match({ 0: { _identifier: 10 }, 1: "right" }), "Select", 10, 1);
        });
    });

    describe("_collapseNode method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._collapseNode(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Collapse' with correct parameters, if input is number", function () {
            treeViewTOBaseUnderTest._collapseNode(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "Collapse", 10);
        });

        it("should execute _executeNotWrapped 'Collapse' with correct parameters, if input is string", function () {
            treeViewTOBaseUnderTest._collapseNode("Item1");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "Collapse", "Item1");
        });
    });

    describe("_expandNode method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._expandNode(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Expand' with correct parameters, if input is number", function () {
            treeViewTOBaseUnderTest._expandNode(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "Expand", 10);
        });

        it("should execute _executeNotWrapped 'Expand' with correct parameters, if input is string", function () {
            treeViewTOBaseUnderTest._expandNode("Item1");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "Expand", "Item1");
        });
    });

    describe("_expandAll method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._expandAll(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'ExpandAll' with correct parameters, if input is number", function () {
            treeViewTOBaseUnderTest._expandAll(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "ExpandAll", 10);
        });

        it("should execute _executeNotWrapped 'ExpandAll' with correct parameters, if input is string", function () {
            treeViewTOBaseUnderTest._expandAll("Item1");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "ExpandAll", "Item1");
        });
    });

    describe("_enableLabelEditingNode method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._enableLabelEditingNode(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'EditLabel' with correct parameters, if input is number", function () {
            treeViewTOBaseUnderTest._enableLabelEditingNode(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "EditLabel", 10);
        });

        it("should execute _executeNotWrapped 'EditLabel' with correct parameters, if input is string", function () {
            treeViewTOBaseUnderTest._enableLabelEditingNode("Item1");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "EditLabel", "Item1");
        });
    });

    describe("_isNodeExpanded method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._isNodeExpanded(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOBaseUnderTest._isNodeExpanded(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "expanded");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOBaseUnderTest._isNodeExpanded("Item1");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "expanded");
        });
    });

    describe("_getNodeFirstChildPath method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._isNodeExpanded(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOBaseUnderTest._getNodeFirstChildPath(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "firstchild");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOBaseUnderTest._getNodeFirstChildPath("Item1");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "firstchild");
        });
    });

    describe("_nodeHasChildren method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._nodeHasChildren(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOBaseUnderTest._nodeHasChildren(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "haschildren");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOBaseUnderTest._nodeHasChildren("Item1");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "haschildren");
        });
    });

    describe("_getNodeImageIndex method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._getNodeImageIndex(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOBaseUnderTest._getNodeImageIndex(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "imageindex");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOBaseUnderTest._getNodeImageIndex("Item1");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "imageindex");
        });
    });

    describe("_getNodeNextSiblingPath method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._getNodeNextSiblingPath(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOBaseUnderTest._getNodeNextSiblingPath(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "nextsibling");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOBaseUnderTest._getNodeNextSiblingPath("Item1");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "nextsibling");
        });
    });

    describe("_getNodeOverlayImageIndex method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._getNodeOverlayImageIndex(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOBaseUnderTest._getNodeOverlayImageIndex(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "overlayimage");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOBaseUnderTest._getNodeOverlayImageIndex("Item1");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "overlayimage");
        });
    });

    describe("_getNodeParentPath method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._getNodeParentPath(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOBaseUnderTest._getNodeParentPath(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "parent");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOBaseUnderTest._getNodeParentPath("Item1");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "parent");
        });
    });

    describe("_getNodePath method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._getNodePath(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOBaseUnderTest._getNodePath(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "path");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOBaseUnderTest._getNodePath("Item1");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "path");
        });
    });

    describe("_isNodeSelected method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._isNodeSelected(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOBaseUnderTest._isNodeSelected(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "selected");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOBaseUnderTest._isNodeSelected("Item1");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "selected");
        });
    });

    describe("_getNodeState method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._getNodeState(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOBaseUnderTest._getNodeState(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "state");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOBaseUnderTest._getNodeState("Item1");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "state");
        });
    });

    describe("_getNodeText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._getNodeText(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOBaseUnderTest._getNodeText(10);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "text");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOBaseUnderTest._getNodeText("Item1");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "text");
        });
    });

    describe("_setNodeState method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOBaseUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOBaseUnderTest._setNodeState(10, 2);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped with 'SetItemState' with correct parameters, if identifier is number", function () {
            treeViewTOBaseUnderTest._setNodeState(10, 2);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10, 1: 2 }), "SetItemState", 10, 2);
        });

        it("should execute _executeNotWrapped 'SetItemState' with correct parameters, if identifier is string", function () {
            treeViewTOBaseUnderTest._setNodeState("Item1", 2);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: "Item1", 1: 2 }), "SetItemState", "Item1", 2);
        });

        it("should execute _executeNotWrapped with 'SetItemState' with correct parameters, if state is number", function () {
            treeViewTOBaseUnderTest._setNodeState(10, 2);
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10, 1: 2 }), "SetItemState", 10, 2);
        });

        it("should execute _executeNotWrapped with 'SetItemState' with correct parameters, if state is string", function () {
            treeViewTOBaseUnderTest._setNodeState(10, "2");
            sinon.assert.calledOnce(treeViewTOBaseUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOBaseUnderTest._executeNotWrapped, sinon.match({ 0: 10, 1: "2" }), "SetItemState", 10, 2);
        });
    });
});
