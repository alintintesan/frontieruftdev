// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var Position = Core.Position;
var MouseButton = Core.MouseButton;

describe("TreeView Tests", function () {

    describe("TreeView Description", function () {

        var TreeView = require("../lib/tree_view.js").TreeView;
        var treeViewDescriptionUnderTest;

        beforeEach(function () {
            treeViewDescriptionUnderTest = new TreeView();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and LeanFT type", function () {
                treeViewDescriptionUnderTest = new TreeView();
                assert.deepEqual(treeViewDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "TreeView"
                });
            });
        });
    });

    describe("TreeView Test Object", function () {

        var TreeViewTO = require("../lib/tree_view.js").TreeViewTO;
        var treeViewTOUnderTest;

        beforeEach(function () {
            treeViewTOUnderTest = new TreeViewTO();
            sinon.stub(treeViewTOUnderTest, "_getROProperty");
            sinon.stub(treeViewTOUnderTest, "_executeWithEventsWithOptions");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                treeViewTOUnderTest.name();
                sinon.assert.calledOnce(treeViewTOUnderTest._getROProperty);
                sinon.assert.calledWith(treeViewTOUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                treeViewTOUnderTest._getROProperty.returns(promiseMock);
                var res = treeViewTOUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});