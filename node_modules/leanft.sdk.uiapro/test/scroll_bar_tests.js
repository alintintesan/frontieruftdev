// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ScrollBar Tests", function () {

    describe("ScrollBar Description", function () {
        var ScrollBar = require("../lib/scroll_bar").ScrollBar;
        var scrollBarDescriptionUnderTest;

        beforeEach(function () {
            scrollBarDescriptionUnderTest = ScrollBar();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'ScrollBar' LeanFT type", function () {
                scrollBarDescriptionUnderTest = new ScrollBar();
                assert.deepEqual(scrollBarDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "ScrollBar"
                });
            });
        });
    });

    describe("ScrollBar Test Object", function () {
        var ScrollBarTO = require("../lib/scroll_bar").ScrollBarTO;
        var scrollBarTestObjectUnderTest;

        beforeEach(function () {
            scrollBarTestObjectUnderTest = new ScrollBarTO();
            sinon.stub(scrollBarTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                scrollBarTestObjectUnderTest.name();
                sinon.assert.calledOnce(scrollBarTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(scrollBarTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                scrollBarTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = scrollBarTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});