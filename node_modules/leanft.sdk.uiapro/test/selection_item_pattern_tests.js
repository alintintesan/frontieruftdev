// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");
 
describe("SelectionItemPattern Test", function () {
    var SelectionItemPattern = require("../lib/patterns/selection_item_pattern.js").SelectionItemPattern;
    var name = "SelectionItemPattern";
    var selectionItemPatternUnderTest;
    var ownerMock;
    var promiseMock = { then: function (cb) { return cb();} };

    beforeEach(function () {
        ownerMock = {
            _executeCommand: sinon.stub(),
            notifyWithEvents: sinon.stub()
        };
        selectionItemPatternUnderTest = new SelectionItemPattern(ownerMock);
    });

    describe("isSelected method", function () {
        it("should execute _executeCommand 'IsSelected'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            selectionItemPatternUnderTest.isSelected();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("select method", function () {
        it("should execute command 'Select'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            selectionItemPatternUnderTest.select();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("addToSelection method", function () {
        it("should execute command 'AddToSelection'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            selectionItemPatternUnderTest.addToSelection();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("removeFromSelection method", function () {
        it("should execute command 'RemoveFromSelection'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            selectionItemPatternUnderTest.removeFromSelection();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });
});