// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Separator Tests", function () {

    describe("Separator Description", function () {
        var Separator = require("../lib/separator").Separator;
        var separatorDescriptionUnderTest;

        beforeEach(function () {
            separatorDescriptionUnderTest = Separator();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'Separator' LeanFT type", function () {
                separatorDescriptionUnderTest = new Separator();
                assert.deepEqual(separatorDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "Separator"
                });
            });
        });
    });

    describe("Separator Test Object", function () {
        var SeparatorTO = require("../lib/separator").SeparatorTO;
        var separatorTestObjectUnderTest;

        beforeEach(function () {
            separatorTestObjectUnderTest = new SeparatorTO();
            sinon.stub(separatorTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                separatorTestObjectUnderTest.name();
                sinon.assert.calledOnce(separatorTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(separatorTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                separatorTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = separatorTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});