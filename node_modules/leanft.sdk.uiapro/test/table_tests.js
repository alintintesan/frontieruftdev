// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var MouseButton = Core.MouseButton;
var Position = Core.Position;

describe("Table Tests", function () {

    describe("Table Description", function () {

        var Table = require("../lib/table.js").Table;
        var tableDescriptionUnderTest;

        beforeEach(function () {
            tableDescriptionUnderTest = new Table();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and LeanFT type", function () {
                tableDescriptionUnderTest = new Table();
                assert.deepEqual(tableDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "Table"
                });
            });
        });
    });

    describe("Table Test Object", function () {

        var TableTO = require("../lib/table.js").TableTO;
        var tableTOUnderTest;

        beforeEach(function () {
            tableTOUnderTest = new TableTO();
            sinon.stub(tableTOUnderTest, "_getROProperty");
            sinon.stub(tableTOUnderTest, "_executeWithEventsWithOptions");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                tableTOUnderTest.name();
                sinon.assert.calledOnce(tableTOUnderTest._getROProperty);
                sinon.assert.calledWith(tableTOUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                tableTOUnderTest._getROProperty.returns(promiseMock);
                var res = tableTOUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});