// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Slider Tests", function () {

    describe("Slider Description", function () {

        var Slider = require("../lib/slider.js").Slider;
        var sliderDescriptionUnderTest;

        beforeEach(function () {
            sliderDescriptionUnderTest = new Slider();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and LeanFT type", function () {
                sliderDescriptionUnderTest = new Slider();
                assert.deepEqual(sliderDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "Slider"
                });
            });
        });
    });

    describe("Slider Test Object", function () {

        var SliderTO = require("../lib/slider.js").SliderTO;
        var sliderTOUnderTest;

        beforeEach(function () {
            sliderTOUnderTest = new SliderTO();
            sinon.stub(sliderTOUnderTest, "_getROProperty");
            sinon.stub(sliderTOUnderTest, "_executeWithEvents");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                sliderTOUnderTest.name();
                sinon.assert.calledOnce(sliderTOUnderTest._getROProperty);
                sinon.assert.calledWith(sliderTOUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                sliderTOUnderTest._getROProperty.returns(promiseMock);
                var res = sliderTOUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});