// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Thumb Tests", function () {

    describe("Thumb Description", function () {
        var Thumb = require("../lib/thumb").Thumb;
        var thumbDescriptionUnderTest;

        beforeEach(function () {
            thumbDescriptionUnderTest = Thumb();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'Thumb' LeanFT type", function () {
                thumbDescriptionUnderTest = new Thumb();
                assert.deepEqual(thumbDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "Thumb"
                });
            });
        });
    });

    describe("Thumb Test Object", function () {
        var ThumbTO = require("../lib/thumb").ThumbTO;
        var thumbTestObjectUnderTest;

        beforeEach(function () {
            thumbTestObjectUnderTest = new ThumbTO();
            sinon.stub(thumbTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                thumbTestObjectUnderTest.name();
                sinon.assert.calledOnce(thumbTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(thumbTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                thumbTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = thumbTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});