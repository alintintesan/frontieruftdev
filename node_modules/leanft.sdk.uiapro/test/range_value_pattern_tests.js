// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");
 
describe("RangeValuePattern Test", function () {
    var RangeValuePattern = require("../lib/patterns/range_value_pattern.js").RangeValuePattern;
    var name = "RangeValuePattern";
    var rangeValuePatternUnderTest;
    var ownerMock;
    var promiseMock = { then: function (cb) { return cb();} };

    beforeEach(function () {
        ownerMock = {
            _executeCommand: sinon.stub(),
            notifyWithEvents: sinon.stub()
        };
        rangeValuePatternUnderTest = new RangeValuePattern(ownerMock);
    });

    describe("getMaximum method", function () {
        it("should execute _executeCommand 'GetMaximum'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            rangeValuePatternUnderTest.getMaximum();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getMinimum method", function () {
        it("should execute _executeCommand 'GetMinimum'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            rangeValuePatternUnderTest.getMinimum();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("isReadOnly method", function () {
        it("should execute _executeCommand 'IsReadOnly'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            rangeValuePatternUnderTest.isReadOnly();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getValue method", function () {
        it("should execute _executeCommand 'GetValue'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            rangeValuePatternUnderTest.getValue();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getLargeChange method", function () {
        it("should execute _executeCommand 'GetLargeChange'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            rangeValuePatternUnderTest.getLargeChange();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getSmallChange method", function () {
        it("should execute _executeCommand 'GetSmallChange'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            rangeValuePatternUnderTest.getSmallChange();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("setValue method", function () {
        it("should throw error if param not set", function () {
            assert.throws(function () {
                rangeValuePatternUnderTest.setValue();
            });
        });

        it("should throw error if param is null", function () {
            assert.throws(function () {
                rangeValuePatternUnderTest.setValue(null);
            });
        });

        it("should throw error if param is not string", function () {
            assert.throws(function () {
                rangeValuePatternUnderTest.setValue([1,2]);
            });
        });

        it("should execute command 'SetValue'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            rangeValuePatternUnderTest.setValue("some");
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });
});