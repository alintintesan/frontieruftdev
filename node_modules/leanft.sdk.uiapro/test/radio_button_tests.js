// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("RadioButton Tests", function () {

    describe("RadioButton Description", function () {

        var RadioButton = require("../lib/radio_button.js").RadioButton;
        var radioButtonDescriptionUnderTest;

        beforeEach(function () {
            radioButtonDescriptionUnderTest = new RadioButton();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and LeanFT type", function () {
                radioButtonDescriptionUnderTest = new RadioButton();
                assert.deepEqual(radioButtonDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "RadioButton"
                });
            });
        });
    });

    describe("RadioButton Test Object", function () {

        var RadioButtonTO = require("../lib/radio_button.js").RadioButtonTO;
        var radioButtonTOUnderTest;

        beforeEach(function () {
            radioButtonTOUnderTest = new RadioButtonTO();
            sinon.stub(radioButtonTOUnderTest, "_getROProperty");
            sinon.stub(radioButtonTOUnderTest, "_executeWithEvents");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                radioButtonTOUnderTest.name();
                sinon.assert.calledOnce(radioButtonTOUnderTest._getROProperty);
                sinon.assert.calledWith(radioButtonTOUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                radioButtonTOUnderTest._getROProperty.returns(promiseMock);
                var res = radioButtonTOUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});