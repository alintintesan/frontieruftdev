// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("StatusBar Tests", function () {

    describe("StatusBar Description", function () {
        var StatusBar = require("../lib/status_bar").StatusBar;
        var statusBarDescriptionUnderTest;

        beforeEach(function () {
            statusBarDescriptionUnderTest = StatusBar();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'StatusBar' LeanFT type", function () {
                statusBarDescriptionUnderTest = new StatusBar();
                assert.deepEqual(statusBarDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "StatusBar"
                });
            });
        });
    });

    describe("StatusBar Test Object", function () {
        var StatusBarTO = require("../lib/status_bar").StatusBarTO;
        var statusBarTestObjectUnderTest;

        beforeEach(function () {
            statusBarTestObjectUnderTest = new StatusBarTO();
            sinon.stub(statusBarTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                statusBarTestObjectUnderTest.name();
                sinon.assert.calledOnce(statusBarTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(statusBarTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                statusBarTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = statusBarTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});