// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Pane Tests", function () {

    describe("Pane Description", function () {
        var Pane = require("../lib/pane").Pane;
        var paneDescriptionUnderTest;

        beforeEach(function () {
            paneDescriptionUnderTest = Pane();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'Pane' LeanFT type", function () {
                paneDescriptionUnderTest = new Pane();
                assert.deepEqual(paneDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "Pane"
                });
            });
        });
    });

    describe("Pane Test Object", function () {
        var PaneTO = require("../lib/pane").PaneTO;
        var paneTestObjectUnderTest;

        beforeEach(function () {
            paneTestObjectUnderTest = new PaneTO();
            sinon.stub(paneTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                paneTestObjectUnderTest.name();
                sinon.assert.calledOnce(paneTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(paneTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                paneTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = paneTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});