// // (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
// /*
//  * Created on 11/23/2022.
//  */

// var assert = require("assert");
// var sinon = require("sinon");
// var Core = require("leanft.sdk.core");
// var Position = Core.Position;
// var MouseButton = Core.MouseButton;

// describe("UI Object Base Description", function () {

//     var UiObjectBaseDescription = require("../lib/ui_object_base.js").UiObjectBaseDescription;
//     var uiObjectBaseDescriptionUnderTest;

//     beforeEach(function () {
//         uiObjectBaseDescriptionUnderTest = new UiObjectBaseDescription();
//     });

//     describe("Constructor", function () {
//         it("should assign 'UIA Pro' and LeanFT type", function () {
//             uiObjectBaseDescriptionUnderTest = new UiObjectBaseDescription("Window");
//             assert.deepEqual(uiObjectBaseDescriptionUnderTest.leanFTType, {
//                 technology: "UIA Pro",
//                 leanftType: "Window"
//             });
//         });
//     });

//     describe("acceleratorKey method", function () {
//         it("should add 'acceleratorkey class' to _properties when value is given", function () {
//             uiObjectBaseDescriptionUnderTest.acceleratorKey("value");
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["acceleratorkey"], "value");
//         });

//         it("should return this - builder pattern when value is given", function () {
//             var result = uiObjectBaseDescriptionUnderTest.acceleratorKey("val");
//             assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
//         });

//         it("should remove 'acceleratorkey' from _properties when value is null", function () {
//             uiObjectBaseDescriptionUnderTest._properties["acceleratorkey"] = "value";
//             uiObjectBaseDescriptionUnderTest.acceleratorKey(null);
//             assert(!("acceleratorkey" in uiObjectBaseDescriptionUnderTest._properties));
//         });

//         it("should return the value of 'acceleratorkey' from _properties when value is not given", function () {
//             uiObjectBaseDescriptionUnderTest._properties["acceleratorkey"] = "val";
//             var result = uiObjectBaseDescriptionUnderTest.acceleratorKey();
//             assert.strictEqual(result, "val");
//         });
//     });

//     describe("accessKey method", function () {
//         it("should add 'accesskey' to _properties when value is given", function () {
//             uiObjectBaseDescriptionUnderTest.accessKey("val");
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["accesskey"], "val");
//         });

//         it("should return this - builder pattern when value is given", function () {
//             var result = uiObjectBaseDescriptionUnderTest.accessKey("val");
//             assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
//         });

//         it("should remove 'accesskey' from _properties when value is null", function () {
//             uiObjectBaseDescriptionUnderTest._properties["accesskey"] = "val";
//             uiObjectBaseDescriptionUnderTest.accessKey(null);
//             assert(!("accesskey" in uiObjectBaseDescriptionUnderTest._properties));
//         });

//         it("should return the value of 'accesskey' from _properties when value is not given", function () {
//             uiObjectBaseDescriptionUnderTest._properties["accesskey"] = "val";
//             var result = uiObjectBaseDescriptionUnderTest.accessKey();
//             assert.strictEqual(result, "val");
//         });
//     });

//     describe("isVisible method", function () {
//         it("should add 'visible' to _properties when value is given", function () {
//             uiObjectBaseDescriptionUnderTest.isVisible(true);
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["visible"], true);
//         });

//         it("should add 'visible' to _properties when value is given in string", function () {
//             uiObjectBaseDescriptionUnderTest.isVisible("true");
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["visible"], true);
//         });

//         it("should return this - builder pattern when value is given", function () {
//             var result = uiObjectBaseDescriptionUnderTest.isVisible(true);
//             assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
//         });

//         it("should remove 'visible' from _properties when value is null", function () {
//             uiObjectBaseDescriptionUnderTest._properties["visible"] = true;
//             uiObjectBaseDescriptionUnderTest.isVisible(null);
//             assert(!("visible" in uiObjectBaseDescriptionUnderTest._properties));
//         });

//         it("should return the value of 'visible' from _properties when value is not given", function () {
//             uiObjectBaseDescriptionUnderTest._properties["visible"] = true;
//             var result = uiObjectBaseDescriptionUnderTest.isVisible();
//             assert.strictEqual(result, true);
//         });
//     });

//     describe("isEnabled method", function () {
//         it("should add 'enabled' to _properties when value is given", function () {
//             uiObjectBaseDescriptionUnderTest.isEnabled(true);
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["enabled"], true);
//         });

//         it("should add 'enabled' to _properties when value is given in string", function () {
//             uiObjectBaseDescriptionUnderTest.isEnabled("true");
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["enabled"], true);
//         });

//         it("should return this - builder pattern when value is given", function () {
//             var result = uiObjectBaseDescriptionUnderTest.isEnabled(true);
//             assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
//         });

//         it("should remove 'enabled' from _properties when value is null", function () {
//             uiObjectBaseDescriptionUnderTest._properties["enabled"] = true;
//             uiObjectBaseDescriptionUnderTest.isEnabled(null);
//             assert(!("enabled" in uiObjectBaseDescriptionUnderTest._properties));
//         });

//         it("should return the value of 'enabled' from _properties when value is not given", function () {
//             uiObjectBaseDescriptionUnderTest._properties["enabled"] = true;
//             var result = uiObjectBaseDescriptionUnderTest.isEnabled();
//             assert.strictEqual(result, true);
//         });
//     });

//     describe("isFocused method", function () {
//         it("should add 'focused' to _properties when value is given", function () {
//             uiObjectBaseDescriptionUnderTest.isFocused(true);
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["focused"], true);
//         });

//         it("should add 'focused' to _properties when value is given in string", function () {
//             uiObjectBaseDescriptionUnderTest.isFocused("true");
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["focused"], true);
//         });

//         it("should return this - builder pattern when value is given", function () {
//             var result = uiObjectBaseDescriptionUnderTest.isFocused(true);
//             assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
//         });

//         it("should remove 'focused' from _properties when value is null", function () {
//             uiObjectBaseDescriptionUnderTest._properties["focused"] = true;
//             uiObjectBaseDescriptionUnderTest.isFocused(null);
//             assert(!("focused" in uiObjectBaseDescriptionUnderTest._properties));
//         });

//         it("should return the value of 'focused' from _properties when value is not given", function () {
//             uiObjectBaseDescriptionUnderTest._properties["focused"] = true;
//             var result = uiObjectBaseDescriptionUnderTest.isFocused();
//             assert.strictEqual(result, true);
//         });
//     });

//     describe("isFocusable method", function () {
//         it("should add 'focusable' to _properties when value is given", function () {
//             uiObjectBaseDescriptionUnderTest.isFocusable(true);
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["focusable"], true);
//         });

//         it("should add 'focusable' to _properties when value is given in string", function () {
//             uiObjectBaseDescriptionUnderTest.isFocusable("true");
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["focusable"], true);
//         });

//         it("should return this - builder pattern when value is given", function () {
//             var result = uiObjectBaseDescriptionUnderTest.isFocusable(true);
//             assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
//         });

//         it("should remove 'focusable' from _properties when value is null", function () {
//             uiObjectBaseDescriptionUnderTest._properties["focusable"] = true;
//             uiObjectBaseDescriptionUnderTest.isFocusable(null);
//             assert(!("focusable" in uiObjectBaseDescriptionUnderTest._properties));
//         });

//         it("should return the value of 'focused' from _properties when value is not given", function () {
//             uiObjectBaseDescriptionUnderTest._properties["focusable"] = true;
//             var result = uiObjectBaseDescriptionUnderTest.isFocusable();
//             assert.strictEqual(result, true);
//         });
//     });

//     describe("path method", function () {
//         it("should add 'path' to _properties when value is given", function () {
//             uiObjectBaseDescriptionUnderTest.path("path");
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["path"], "path");
//         });

//         it("should return this - builder pattern when value is given", function () {
//             var result = uiObjectBaseDescriptionUnderTest.path("path");
//             assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
//         });

//         it("should remove 'path' from _properties when value is null", function () {
//             uiObjectBaseDescriptionUnderTest._properties["path"] = "path";
//             uiObjectBaseDescriptionUnderTest.path(null);
//             assert(!("path" in uiObjectBaseDescriptionUnderTest._properties));
//         });

//         it("should return the value of 'path' from _properties when value is not given", function () {
//             uiObjectBaseDescriptionUnderTest._properties["path"] = "path";
//             var result = uiObjectBaseDescriptionUnderTest.path();
//             assert.strictEqual(result, "path");
//         });
//     });

//     describe("automationid method", function () {
//         it("should add 'automationid' to _properties when value is given", function () {
//             uiObjectBaseDescriptionUnderTest.automationId("val");
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["automationid"], "val");
//         });

//         it("should return this - builder pattern when value is given", function () {
//             var result = uiObjectBaseDescriptionUnderTest.automationId("vl");
//             assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
//         });

//         it("should remove 'automationid' from _properties when value is null", function () {
//             uiObjectBaseDescriptionUnderTest._properties["automationid"] = "val";
//             uiObjectBaseDescriptionUnderTest.automationId(null);
//             assert(!("automationid" in uiObjectBaseDescriptionUnderTest._properties));
//         });

//         it("should return the value of 'automationid' from _properties when value is not given", function () {
//             uiObjectBaseDescriptionUnderTest._properties["automationid"] = "val";
//             var result = uiObjectBaseDescriptionUnderTest.automationId();
//             assert.strictEqual(result, "val");
//         });
//     });

//     describe("controltype method", function () {
//         it("should add 'controltype' to _properties when value is given", function () {
//             uiObjectBaseDescriptionUnderTest.controlType("val");
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["controltype"], "val");
//         });

//         it("should return this - builder pattern when value is given", function () {
//             var result = uiObjectBaseDescriptionUnderTest.controlType("vl");
//             assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
//         });

//         it("should remove 'controltype' from _properties when value is null", function () {
//             uiObjectBaseDescriptionUnderTest._properties["controltype"] = "val";
//             uiObjectBaseDescriptionUnderTest.controlType(null);
//             assert(!("controltype" in uiObjectBaseDescriptionUnderTest._properties));
//         });

//         it("should return the value of 'controltype' from _properties when value is not given", function () {
//             uiObjectBaseDescriptionUnderTest._properties["controltype"] = "val";
//             var result = uiObjectBaseDescriptionUnderTest.controlType();
//             assert.strictEqual(result, "val");
//         });
//     });

//     describe("frameworkid method", function () {
//         it("should add 'frameworkid' to _properties when value is given", function () {
//             uiObjectBaseDescriptionUnderTest.frameworkId("val");
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["frameworkid"], "val");
//         });

//         it("should return this - builder pattern when value is given", function () {
//             var result = uiObjectBaseDescriptionUnderTest.frameworkId("vl");
//             assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
//         });

//         it("should remove 'frameworkid' from _properties when value is null", function () {
//             uiObjectBaseDescriptionUnderTest._properties["frameworkid"] = "val";
//             uiObjectBaseDescriptionUnderTest.frameworkId(null);
//             assert(!("frameworkid" in uiObjectBaseDescriptionUnderTest._properties));
//         });

//         it("should return the value of 'frameworkid' from _properties when value is not given", function () {
//             uiObjectBaseDescriptionUnderTest._properties["frameworkid"] = "val";
//             var result = uiObjectBaseDescriptionUnderTest.frameworkId();
//             assert.strictEqual(result, "val");
//         });
//     });

//     describe("text method", function () {
//         it("should add 'text' to _properties when value is given", function () {
//             uiObjectBaseDescriptionUnderTest.text("val");
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["text"], "val");
//         });

//         it("should return this - builder pattern when value is given", function () {
//             var result = uiObjectBaseDescriptionUnderTest.text("vl");
//             assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
//         });

//         it("should remove 'text' from _properties when value is null", function () {
//             uiObjectBaseDescriptionUnderTest._properties["text"] = "val";
//             uiObjectBaseDescriptionUnderTest.text(null);
//             assert(!("text" in uiObjectBaseDescriptionUnderTest._properties));
//         });

//         it("should return the value of 'text' from _properties when value is not given", function () {
//             uiObjectBaseDescriptionUnderTest._properties["text"] = "val";
//             var result = uiObjectBaseDescriptionUnderTest.text();
//             assert.strictEqual(result, "val");
//         });
//     });

//     describe("nativeClass method", function () {
//         it("should add 'nativeclass' to _properties when value is given", function () {
//             uiObjectBaseDescriptionUnderTest.nativeClass("NativeClass");
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["nativeclass"], "NativeClass");
//         });

//         it("should return this - builder pattern when value is given", function () {
//             var result = uiObjectBaseDescriptionUnderTest.nativeClass("NativeClass");
//             assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
//         });

//         it("should remove 'nativeclass' from _properties when value is null", function () {
//             uiObjectBaseDescriptionUnderTest._properties["nativeclass"] = "NativeClass";
//             uiObjectBaseDescriptionUnderTest.nativeClass(null);
//             assert(!("nativeclass" in uiObjectBaseDescriptionUnderTest._properties));
//         });

//         it("should return the value of 'nativeclass' from _properties when value is not given", function () {
//             uiObjectBaseDescriptionUnderTest._properties["nativeclass"] = "NativeClass";
//             var nativeClass = uiObjectBaseDescriptionUnderTest.nativeClass();
//             assert.strictEqual(nativeClass, "NativeClass");
//         });
//     });

//     describe("name method", function () {
//         it("should add 'name' to _properties when value is given", function () {
//             uiObjectBaseDescriptionUnderTest.name("val");
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["name"], "val");
//         });

//         it("should return this - builder pattern when value is given", function () {
//             var result = uiObjectBaseDescriptionUnderTest.name("vl");
//             assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
//         });

//         it("should remove 'name' from _properties when value is null", function () {
//             uiObjectBaseDescriptionUnderTest._properties["name"] = "val";
//             uiObjectBaseDescriptionUnderTest.name(null);
//             assert(!("name" in uiObjectBaseDescriptionUnderTest._properties));
//         });

//         it("should return the value of 'name' from _properties when value is not given", function () {
//             uiObjectBaseDescriptionUnderTest._properties["name"] = "val";
//             var result = uiObjectBaseDescriptionUnderTest.name();
//             assert.strictEqual(result, "val");
//         });
//     });

//     describe("helptext method", function () {
//         it("should add 'helptext' to _properties when value is given", function () {
//             uiObjectBaseDescriptionUnderTest.helpText("val");
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["helptext"], "val");
//         });

//         it("should return this - builder pattern when value is given", function () {
//             var result = uiObjectBaseDescriptionUnderTest.helpText("vl");
//             assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
//         });

//         it("should remove 'helptext' from _properties when value is null", function () {
//             uiObjectBaseDescriptionUnderTest._properties["name"] = "val";
//             uiObjectBaseDescriptionUnderTest.helpText(null);
//             assert(!("helptext" in uiObjectBaseDescriptionUnderTest._properties));
//         });

//         it("should return the value of 'helptext' from _properties when value is not given", function () {
//             uiObjectBaseDescriptionUnderTest._properties["helptext"] = "val";
//             var result = uiObjectBaseDescriptionUnderTest.helpText();
//             assert.strictEqual(result, "val");
//         });
//     });

//     describe("supportedPatterns method", function () {
//         var supportedPatternsArray = ["colHeader1", "colHeader2"];
//         it("should add 'supportedpatterns' to _properties when value is given", function () {
//             uiObjectBaseDescriptionUnderTest.supportedPatterns(supportedPatternsArray);
//             assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["supportedpatterns"], supportedPatternsArray.join(";"));
//         });

//         it("should return this - builder pattern when value is given", function () {
//             var result = uiObjectBaseDescriptionUnderTest.supportedPatterns(supportedPatternsArray);
//             assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
//         });

//         it("should remove 'supportedpatterns' from _properties when value is null", function () {
//             uiObjectBaseDescriptionUnderTest._properties["supportedpatterns"] = supportedPatternsArray;
//             uiObjectBaseDescriptionUnderTest.supportedPatterns(null);
//             assert(!("supportedpatterns" in uiObjectBaseDescriptionUnderTest._properties));
//         });

//         it("should return the value of 'supportedpatterns' from _properties when value is not given", function () {
//             uiObjectBaseDescriptionUnderTest._properties["supportedpatterns"] = supportedPatternsArray.join(";");
//             var result = uiObjectBaseDescriptionUnderTest.supportedPatterns();
//             assert.deepEqual(result, supportedPatternsArray);
//         });
//     });
// });

// describe("UI Object Base Test Object", function () {

//     var UiObjectBaseTO = require("../lib/ui_object_base.js").UiObjectBaseTO;
//     var uiObjectBaseTOUnderTest;
//     var promiseMock = { then: function (cb) { return cb();} };

//     beforeEach(function () {
//         uiObjectBaseTOUnderTest = new UiObjectBaseTO();
//         sinon.stub(uiObjectBaseTOUnderTest, "_getROProperty");
//         sinon.stub(uiObjectBaseTOUnderTest, "_executeWithEventsWithOptions");
//     });

//     describe("helpText method", function () {
//         it("should execute _getROProperty 'helptext'", function () {
//             uiObjectBaseTOUnderTest.helpText();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "helptext", sinon.match({}));
//         });

//         it("should return promise as is", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.helpText();
//             assert.strictEqual(res, promiseMock);
//         });
//     });

//     describe("path method", function () {
//         it("should execute _getROProperty 'path'", function () {
//             uiObjectBaseTOUnderTest.path();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "path", sinon.match({}));
//         });

//         it("should return promise as is", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.path();
//             assert.strictEqual(res, promiseMock);
//         });
//     });

//     describe("nativeClass method", function () {
//         it("should execute _getROProperty 'nativeclass'", function () {
//             uiObjectBaseTOUnderTest.nativeClass();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "nativeclass", sinon.match({}));
//         });

//         it("should return promise as is", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.nativeClass();
//             assert.strictEqual(res, promiseMock);
//         });
//     });

//     describe("isVisible method", function () {
//         it("should execute _getROProperty 'visible'", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             uiObjectBaseTOUnderTest.isVisible();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "visible", sinon.match({}));
//         });

//         it("should return the execution promise", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.isVisible();
//             assert.strictEqual(res, promiseMock);
//         });
//     });

//     describe("isFocusable method", function () {
//         it("should execute _getROProperty 'focusable'", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             uiObjectBaseTOUnderTest.isFocusable();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "focusable", sinon.match({}));
//         });

//         it("should return the execution promise", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.isFocusable();
//             assert.strictEqual(res, promiseMock);
//         });
//     });

//     describe("isEnabled method", function () {
//         it("should execute _getROProperty 'enabled'", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             uiObjectBaseTOUnderTest.isEnabled();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "enabled", sinon.match({}));
//         });

//         it("should return the execution promise", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.isEnabled();
//             assert.strictEqual(res, promiseMock);
//         });
//     });

//     describe("isFocused method", function () {
//         it("should execute _getROProperty 'focused'", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             uiObjectBaseTOUnderTest.isFocused();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "focused", sinon.match({}));
//         });

//         it("should return the execution promise", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.isFocused();
//             assert.strictEqual(res, promiseMock);
//         });
//     });

//     describe("handle method", function () {
//         it("should execute _getROProperty 'hwnd'", function () {
//             uiObjectBaseTOUnderTest.handle();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "hwnd", sinon.match({}));
//         });

//         it("should return promise as is", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.handle();
//             assert.strictEqual(res, promiseMock);
//         });
//     });

//     describe("name method", function () {
//         it("should execute _getROProperty 'name'", function () {
//             uiObjectBaseTOUnderTest.name();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "name", sinon.match({}));
//         });

//         it("should return promise as is", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.name();
//             assert.strictEqual(res, promiseMock);
//         });
//     });

//     describe("text method", function () {
//         it("should execute _getROProperty 'text'", function () {
//             uiObjectBaseTOUnderTest.text();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "text", sinon.match({}));
//         });

//         it("should return promise as is", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.text();
//             assert.strictEqual(res, promiseMock);
//         });
//     });

//     describe("supportedPatterns method", function () {
//         var supportedPatterns = "item;item";
//         var promiseMock = {
//             then: function (cb) {
//                 return cb(supportedPatterns);
//             }
//         };
//         it("should execute _getROProperty 'supportedpatterns'", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             uiObjectBaseTOUnderTest.supportedPatterns();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "supportedpatterns", sinon.match({}));
//         });

//         it("should return an array of items when promise returns a string", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.supportedPatterns();
//             assert.deepEqual(res, supportedPatterns.split(";"));
//         });
//     });

//     describe("frameworkId method", function () {
//         it("should execute _getROProperty 'frameworkid'", function () {
//             uiObjectBaseTOUnderTest.frameworkId();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "frameworkid", sinon.match({}));
//         });

//         it("should return promise as is", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.frameworkId();
//             assert.strictEqual(res, promiseMock);
//         });
//     });

//     describe("controlType method", function () {
//         it("should execute _getROProperty 'controltype'", function () {
//             uiObjectBaseTOUnderTest.controlType();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "controltype", sinon.match({}));
//         });

//         it("should return promise as is", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.controlType();
//             assert.strictEqual(res, promiseMock);
//         });
//     });

//     describe("automationId method", function () {
//         it("should execute _getROProperty 'automationid'", function () {
//             uiObjectBaseTOUnderTest.automationId();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "automationid", sinon.match({}));
//         });

//         it("should return promise as is", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.automationId();
//             assert.strictEqual(res, promiseMock);
//         });
//     });

//     describe("accessKey method", function () {
//         it("should execute _getROProperty 'accesskey'", function () {
//             uiObjectBaseTOUnderTest.accessKey();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "accesskey", sinon.match({}));
//         });

//         it("should return promise as is", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.accessKey();
//             assert.strictEqual(res, promiseMock);
//         });
//     });

//     describe("acceleratorKey method", function () {
//         it("should execute _getROProperty 'acceleratorkey'", function () {
//             uiObjectBaseTOUnderTest.acceleratorKey();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "acceleratorkey", sinon.match({}));
//         });

//         it("should return promise as is", function () {
//             uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
//             var res = uiObjectBaseTOUnderTest.acceleratorKey();
//             assert.strictEqual(res, promiseMock);
//         });
//     });

//     describe("click",function() {
//         it("should pass defaults when args is not given",function() {
//             uiObjectBaseTOUnderTest.click();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEventsWithOptions);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEventsWithOptions, sinon.match({}), sinon.match({}),
//                 "Click",
//                 -9999,-9999,
//                 0);
//         });

//         it("should pass defaults when args is null",function(){
//             uiObjectBaseTOUnderTest.click(null);
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEventsWithOptions);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEventsWithOptions, sinon.match({}), sinon.match({}),
//                 "Click",
//                 -9999,-9999,
//                 0);
//         });

//         it("should pass button arg and default location if only button arg is given",function() {
//             uiObjectBaseTOUnderTest.click({button: MouseButton.right});
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEventsWithOptions);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEventsWithOptions, sinon.match({0: {button: MouseButton.right}}), sinon.match({}),
//                 "Click",
//                 {
//                     Type: "Location",
//                     Offset: {
//                         Type: "Point",
//                         X: 0,
//                         Y: 0
//                     },
//                     Anchor: Position._convert(Position.center)
//                 },
//                 1);
//         });

//         it("should pass all args that are given",function() {
//             uiObjectBaseTOUnderTest.click({
//                 button: MouseButton.right,
//                 anchor: Position.bottomRight,
//                 offset: {x: 5, y: 8}
//             });
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEventsWithOptions);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEventsWithOptions, sinon.match({
//                     0: {
//                         button: MouseButton.right,
//                         anchor: Position.bottomRight,
//                         offset: {x: 5, y: 8}
//                     }
//                 }), sinon.match({}),
//                 "Click",
//                 {
//                     Type: "Location",
//                     Offset: {
//                         Type: "Point",
//                         X: 5,
//                         Y: 8
//                     },
//                     Anchor: Position._convert(Position.bottomRight)
//                 },
//                 1);
//         });
//     });

//     describe("setFocus method", function () {
//         it("should execute command 'SetFocus'", function () {
//             uiObjectBaseTOUnderTest.setFocus();
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEventsWithOptions);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEventsWithOptions, sinon.match({}), sinon.match({}), "SetFocus");
//         });

//         it("should return the execution promise", function () {
//             var executionPromise = {};
//             uiObjectBaseTOUnderTest._executeWithEventsWithOptions.returns(executionPromise);
//             var res = uiObjectBaseTOUnderTest.setFocus();
//             assert.strictEqual(res, executionPromise);
//         });
//     });

//     describe("sendKeys", function () {
//         var SendKeysHelper = Core.SendKeysHelper;
//         var Keys = Core.Keys;
//         var FunctionKeys = Core.FunctionKeys;
//         var KeysToNativeConsts = SendKeysHelper.keysToNativeConsts;

//         it("should throw error when parameter is not passed", function () {
//             assert.throws(function () {
//                 uiObjectBaseTOUnderTest.sendKeys();
//             });
//         });

//         it("should throw error if input is null", function () {
//             assert.throws(function () {
//                 uiObjectBaseTOUnderTest.sendKeys(null);
//             });
//         });

//         it("should pass correct string to _executeCommand with Keys/FunctionKeys", function () {
//             uiObjectBaseTOUnderTest.sendKeys("The " + Keys.return + "sample" + Keys.backspace + " text" + FunctionKeys.f1);
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEventsWithOptions);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEventsWithOptions, sinon.match({ 0: "The " + Keys.return + "sample" + Keys.backspace + " text" + FunctionKeys.f1 }), sinon.match({}), "Type", "The <__MicReturn>sample<__MicBack> text<__MicF1>");
//         });

//         it("should keep output string the same as input if without keys", function () {
//             uiObjectBaseTOUnderTest.sendKeys("some text");
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEventsWithOptions);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEventsWithOptions, sinon.match({ 0: "some text" }), sinon.match({}), "Type", "some text");
//         });

//         it("should keep output string the same as input if input contains only prefix", function () {
//             uiObjectBaseTOUnderTest.sendKeys("some <__ENTER text");
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEventsWithOptions);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEventsWithOptions, sinon.match({ 0: "some <__ENTER text" }), sinon.match({}), "Type", "some <__ENTER text");
//         });

//         it("should keep output string the same as input if input contains only suffix", function () {
//             uiObjectBaseTOUnderTest.sendKeys("some ENTER> text");
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEventsWithOptions);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEventsWithOptions, sinon.match({ 0: "some ENTER> text" }), sinon.match({}), "Type", "some ENTER> text");
//         });

//         it("should keep output string the same as input if input contains not legal key", function () {
//             uiObjectBaseTOUnderTest.sendKeys("some <__notlegalkey> text");
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEventsWithOptions);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEventsWithOptions, sinon.match({ 0: "some <__notlegalkey> text" }), sinon.match({}), "Type", "some <__notlegalkey> text");
//         });

//         it("should convert correctly if input with complex keys", function () {
//             var input = Keys.f2 + "some text" + Keys.right + "some more text" + Keys.home + "111";
//             var expected = "<__MicF2>some text<__MicRight>some more text<__MicHome>111";
//             uiObjectBaseTOUnderTest.sendKeys(input);
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEventsWithOptions);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEventsWithOptions, sinon.match({ 0: input }), sinon.match({}), "Type", expected);
//         });

//         it("should convert correctly if input with complex keys and not legal key", function () {
//             var input = Keys.f2 + "some text" + Keys.right + "<__NotLegalKey>" + Keys.home + "111";
//             var expected = "<__MicF2>some text<__MicRight><__NotLegalKey><__MicHome>111";
//             uiObjectBaseTOUnderTest.sendKeys(input);
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEventsWithOptions);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEventsWithOptions, sinon.match({ 0: input }), sinon.match({}), "Type", expected);
//         });

//         it("should convert correctly if input with complex keys and prefix without suffix", function () {
//             var input = Keys.f2 + "some text" + Keys.right + "<__NotLegalKey" + Keys.home + "111";
//             var expected = "<__MicF2>some text<__MicRight><__NotLegalKey<__MicHome>111";
//             uiObjectBaseTOUnderTest.sendKeys(input);
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEventsWithOptions);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEventsWithOptions, sinon.match({ 0: input }), sinon.match({}), "Type", expected);
//         });

//         it("should convert correctly if input with complex keys and suffix without prefix", function () {
//             var input = Keys.f2 + "some text" + Keys.right + "NotLegalKey>" + Keys.home + "111";
//             var expected = "<__MicF2>some text<__MicRight>NotLegalKey><__MicHome>111";
//             uiObjectBaseTOUnderTest.sendKeys(input);
//             sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEventsWithOptions);
//             sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEventsWithOptions, sinon.match({ 0: input }), sinon.match({}), "Type", expected);
//         });

//         it("should convert correctly for all keys", function () {
//             Object.keys(KeysToNativeConsts).forEach(function (key) {
//                 uiObjectBaseTOUnderTest.sendKeys(key);
//                 sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEventsWithOptions, sinon.match({ 0: key }), sinon.match({}), "Type", KeysToNativeConsts[key]);
//             }, this);
//         });
//     });

//     describe("getPattern method", function () {
//         var PatternType = require("../lib/ui_object_base.js").PatternType;
//         var PatternFactory = require("../lib/ui_object_base.js").PatternFactory;

//         it("should throw error when pattern unknown", function () {
//             assert.throws(function () {
//                 uiObjectBaseTOUnderTest.getPattern("somePattern");
//             });
//         });

//         it("should return correctly for all patterns", function () {
//             Object.keys(PatternType).forEach(function (key) {
//                 var result = uiObjectBaseTOUnderTest.getPattern(key);
//                 assert.deepEqual(result, PatternFactory[PatternType[key]](uiObjectBaseTOUnderTest));
//             }, this);
//         });

//         it("should return correctly for PatternType.scrollItem patterns", function () {
//             var result = uiObjectBaseTOUnderTest.getPattern(PatternType.scrollItem);
//             assert.deepEqual(result, PatternFactory[PatternType.scrollItem](uiObjectBaseTOUnderTest));

//         });
//     });
// });