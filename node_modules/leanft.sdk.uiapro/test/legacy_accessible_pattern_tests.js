// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("LegacyAccessiblePattern Test", function () {
    var LegacyAccessiblePattern = require("../lib/patterns/legacy_accessible_pattern.js").LegacyAccessiblePattern;
    var name = "LegacyIAccessiblePattern";
    var legacyPatternUnderTest;
    var ownerMock;
    var promiseMock = { then: function (cb) { return cb; } };

    beforeEach(function () {
        ownerMock = {
            _executeCommand: sinon.stub()
        };
        legacyPatternUnderTest = new LegacyAccessiblePattern(ownerMock);
    });

    describe("getChildId method", function () {
        it("should execute _executeCommand 'GetChildId'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            legacyPatternUnderTest.getChildId();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getDefaultOperation method", function () {
        it("should execute _executeCommand 'GetDefaultOperation'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            legacyPatternUnderTest.getDefaultOperation();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getDescription method", function () {
        it("should execute _executeCommand 'GetDescription'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            legacyPatternUnderTest.getDescription();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getHelp method", function () {
        it("should execute _executeCommand 'GetHelp'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            legacyPatternUnderTest.getHelp();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getKeyboardShortcut method", function () {
        it("should execute _executeCommand 'GetKeyboardShortcut'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            legacyPatternUnderTest.getKeyboardShortcut();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getName method", function () {
        it("should execute _executeCommand 'GetName'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            legacyPatternUnderTest.getName();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getRole method", function () {
        it("should execute _executeCommand 'GetRole'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            legacyPatternUnderTest.getRole();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getState method", function () {
        it("should execute _executeCommand 'GetState'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            legacyPatternUnderTest.getState();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getValue method", function () {
        it("should execute _executeCommand 'GetValue'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            legacyPatternUnderTest.getValue();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getSelectedChildren method", function () {
        it("should execute _executeCommand 'GetSelectedChildren'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            legacyPatternUnderTest.getSelectedChildren();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("select method", function () {
        it("should throw error if params not set", function () {
            assert.throws(function () {
                legacyPatternUnderTest.select();
            });
        });

        it("should throw error if item is null", function () {
            assert.throws(function () {
                legacyPatternUnderTest.select(null);
            });
        });
        it("should execute _executeCommand 'Select'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            legacyPatternUnderTest.select(1);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("setSecure method", function () {
        it("should throw error if params not set", function () {
            assert.throws(function () {
                legacyPatternUnderTest.setSecure();
            });
        });

        it("should throw error if item is null", function () {
            assert.throws(function () {
                legacyPatternUnderTest.setSecure(null);
            });
        });
        it("should execute _executeCommand 'SetValue'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            legacyPatternUnderTest.setSecure(1);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("setValue method", function () {
        it("should throw error if params not set", function () {
            assert.throws(function () {
                legacyPatternUnderTest.setValue();
            });
        });

        it("should throw error if item is null", function () {
            assert.throws(function () {
                legacyPatternUnderTest.setValue(null);
            });
        });
        it("should execute _executeCommand 'SetValue'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            legacyPatternUnderTest.setValue(1);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("performDefaultOperation method", function () {
        it("should execute _executeCommand 'PerformDefaultOperation'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            legacyPatternUnderTest.performDefaultOperation();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });
});