// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("TextPattern Test", function () {
    var TextPattern = require("../lib/patterns/text_pattern.js").TextPattern;
    var name = "TextPattern";
    var textPatternUnderTest;
    var ownerMock;
    var promiseMock = { then: function (cb) { return cb; } };

    beforeEach(function () {
        ownerMock = {
            _executeCommand: sinon.stub(),
            notifyWithEvents: sinon.stub()
        };
        textPatternUnderTest = new TextPattern(ownerMock);
    });

    describe("text method", function () {
        it("should execute _executeCommand 'GetText'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            textPatternUnderTest.text();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("supportedTextSelection method", function () {
        it("should execute _executeCommand 'SupportedTextSelection'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            textPatternUnderTest.supportedTextSelection();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("clearSelection method", function () {
        it("should execute _executeCommand 'ClearSelection'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            textPatternUnderTest.clearSelection();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("scrollIntoView method", function () {
        it("should execute _executeCommand 'ScrollIntoView'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            textPatternUnderTest.scrollIntoView(1);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("select method", function () {
        it("should execute _executeCommand 'Select'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            textPatternUnderTest.select(1);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("selectAll method", function () {
        it("should execute _executeCommand 'SelectAll'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            textPatternUnderTest.selectAll();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });
});