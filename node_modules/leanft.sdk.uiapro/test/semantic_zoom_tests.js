// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("SemanticZoom Tests", function () {

    describe("SemanticZoom Description", function () {
        var SemanticZoom = require("../lib/semantic_zoom").SemanticZoom;
        var semanticZoomDescriptionUnderTest;

        beforeEach(function () {
            semanticZoomDescriptionUnderTest = SemanticZoom();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'SemanticZoom' LeanFT type", function () {
                semanticZoomDescriptionUnderTest = new SemanticZoom();
                assert.deepEqual(semanticZoomDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "SemanticZoom"
                });
            });
        });
    });

    describe("SemanticZoom Test Object", function () {
        var SemanticZoomTO = require("../lib/semantic_zoom").SemanticZoomTO;
        var semanticZoomTestObjectUnderTest;

        beforeEach(function () {
            semanticZoomTestObjectUnderTest = new SemanticZoomTO();
            sinon.stub(semanticZoomTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                semanticZoomTestObjectUnderTest.name();
                sinon.assert.calledOnce(semanticZoomTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(semanticZoomTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                semanticZoomTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = semanticZoomTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});