// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ProgressBar Tests", function () {

    describe("ProgressBar Description", function () {
        var ProgressBar = require("../lib/progress_bar").ProgressBar;
        var progressBarDescriptionUnderTest;

        beforeEach(function () {
            progressBarDescriptionUnderTest = ProgressBar();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'ProgressBar' LeanFT type", function () {
                progressBarDescriptionUnderTest = new ProgressBar();
                assert.deepEqual(progressBarDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "ProgressBar"
                });
            });
        });
    });

    describe("ProgressBar Test Object", function () {
        var ProgressBarTO = require("../lib/progress_bar").ProgressBarTO;
        var progressBarTestObjectUnderTest;

        beforeEach(function () {
            progressBarTestObjectUnderTest = new ProgressBarTO();
            sinon.stub(progressBarTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                progressBarTestObjectUnderTest.name();
                sinon.assert.calledOnce(progressBarTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(progressBarTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                progressBarTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = progressBarTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});