// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("GridItem Tests", function () {

    describe("GridItem Description", function () {
        var GridItem = require("../lib/grid_item").GridItem;
        var gridItemDescriptionUnderTest;

        beforeEach(function () {
            gridItemDescriptionUnderTest = GridItem();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'GridItem' LeanFT type", function () {
                gridItemDescriptionUnderTest = new GridItem();
                assert.deepEqual(gridItemDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "GridItem"
                });
            });
        });
    });

    describe("GridItem Test Object", function () {
        var GridItemTO = require("../lib/grid_item").GridItemTO;
        var gridItemTestObjectUnderTest;

        beforeEach(function () {
            gridItemTestObjectUnderTest = new GridItemTO();
            sinon.stub(gridItemTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                gridItemTestObjectUnderTest.name();
                sinon.assert.calledOnce(gridItemTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(gridItemTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                gridItemTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = gridItemTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});