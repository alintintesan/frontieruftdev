// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ExpandCollapsePattern Test", function () {
    var ExpandCollapsePattern = require("../lib/patterns/expand_collapse_pattern.js").ExpandCollapsePattern;
    var name = "ExpandCollapsePattern";
    var expandCollapsePatternUnderTest;
    var ownerMock;
    var promiseMock = { then: function (cb) { return cb(); } };

    beforeEach(function () {
        ownerMock = {
            _executeCommand: sinon.stub(),
            notifyWithEvents: sinon.stub()
        };
        expandCollapsePatternUnderTest = new ExpandCollapsePattern(ownerMock);
    });

    describe("getExpandCollapseState method", function () {
        it("should execute _executeCommand 'GetExpandCollapseState'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            expandCollapsePatternUnderTest.getExpandCollapseState();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });
    
    describe("expand method", function () {
        it("should execute command 'Expand'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            expandCollapsePatternUnderTest.expand();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("collapse method", function () {
        it("should execute command 'Collapse'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            expandCollapsePatternUnderTest.collapse();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });
});