// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Spinner Tests", function () {

    describe("Spinner Description", function () {
        var Spinner = require("../lib/spinner").Spinner;
        var spinnerDescriptionUnderTest;

        beforeEach(function () {
            spinnerDescriptionUnderTest = Spinner();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'Spinner' LeanFT type", function () {
                spinnerDescriptionUnderTest = new Spinner();
                assert.deepEqual(spinnerDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "Spinner"
                });
            });
        });
    });

    describe("Spinner Test Object", function () {
        var SpinnerTO = require("../lib/spinner").SpinnerTO;
        var spinnerTestObjectUnderTest;

        beforeEach(function () {
            spinnerTestObjectUnderTest = new SpinnerTO();
            sinon.stub(spinnerTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                spinnerTestObjectUnderTest.name();
                sinon.assert.calledOnce(spinnerTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(spinnerTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                spinnerTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = spinnerTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});