// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");
 
describe("ScrollPattern Test", function () {
    var ScrollPattern = require("../lib/patterns/scroll_pattern.js").ScrollPattern;
    var ScrollAmount = require("../lib/patterns/scroll_pattern.js").ScrollAmount;
    var name = "ScrollPattern";
    var scrollPatternUnderTest;
    var ownerMock;
    var promiseMock = { then: function (cb) { return cb();} };

    beforeEach(function () {
        ownerMock = {
            _executeCommand: sinon.stub(),
            notifyWithEvents: sinon.stub()
        };
        scrollPatternUnderTest = new ScrollPattern(ownerMock);
    });

    describe("canScrollHorizontally method", function () {
        it("should execute _executeCommand 'CanScrollHorizontally'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            scrollPatternUnderTest.canScrollHorizontally();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("canScrollVertically method", function () {
        it("should execute _executeCommand 'CanScrollVertically'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            scrollPatternUnderTest.canScrollVertically();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getVerticalViewSize method", function () {
        it("should execute _executeCommand 'GetVerticalViewSize'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            scrollPatternUnderTest.getVerticalViewSize();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getHorizontalViewSize method", function () {
        it("should execute _executeCommand 'GetHorizontalViewSize'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            scrollPatternUnderTest.getHorizontalViewSize();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getVerticalScrollPercent method", function () {
        it("should execute _executeCommand 'GetVerticalScrollPercent'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            scrollPatternUnderTest.getVerticalScrollPercent();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);;
        });
    });

    describe("getHorizontalScrollPercent method", function () {
        it("should execute _executeCommand 'GetHorizontalScrollPercent'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            scrollPatternUnderTest.getHorizontalScrollPercent();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("scroll method", function () {
        it("should execute _executeCommand 'Scroll'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            scrollPatternUnderTest.scroll(ScrollAmount.largeDecrement, ScrollAmount.largeDecrement);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("scrollHorizontal method", function () {
        it("should execute _executeCommand 'ScrollHorizontal'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            scrollPatternUnderTest.scrollHorizontal(ScrollAmount.largeDecrement);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("scrollVertical method", function () {
        it("should execute _executeCommand 'ScrollVertical'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            scrollPatternUnderTest.scrollVertical(ScrollAmount.largeDecrement);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("setScrollPercent method", function () {
        it("should execute _executeCommand 'SetScrollPercent'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            scrollPatternUnderTest.setScrollPercent(15, 20);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("setHorizontalScrollPercent method", function () {
        it("should execute _executeCommand 'SetHorizontalScrollPercent'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            scrollPatternUnderTest.setHorizontalScrollPercent(15);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("setVerticalScrollPercent method", function () {
        it("should execute _executeCommand 'SetVerticalScrollPercent'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            scrollPatternUnderTest.setVerticalScrollPercent(20);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });
});