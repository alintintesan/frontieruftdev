// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("TabItem Tests", function () {

    describe("TabItem Description", function () {
        var TabItem = require("../lib/tab_item").TabItem;
        var tabItemDescriptionUnderTest;

        beforeEach(function () {
            tabItemDescriptionUnderTest = TabItem();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'TabItem' LeanFT type", function () {
                tabItemDescriptionUnderTest = new TabItem();
                assert.deepEqual(tabItemDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "TabItem"
                });
            });
        });
    });

    describe("TabItem Test Object", function () {
        var TabItemTO = require("../lib/tab_item").TabItemTO;
        var tabItemTestObjectUnderTest;

        beforeEach(function () {
            tabItemTestObjectUnderTest = new TabItemTO();
            sinon.stub(tabItemTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                tabItemTestObjectUnderTest.name();
                sinon.assert.calledOnce(tabItemTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(tabItemTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                tabItemTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = tabItemTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});