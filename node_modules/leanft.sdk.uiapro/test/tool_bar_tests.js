// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ToolBar Tests", function () {

    describe("ToolBar Description", function () {
        var ToolBar = require("../lib/tool_bar").ToolBar;
        var toolBarDescriptionUnderTest;

        beforeEach(function () {
            toolBarDescriptionUnderTest = ToolBar();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'ToolBar' LeanFT type", function () {
                toolBarDescriptionUnderTest = new ToolBar();
                assert.deepEqual(toolBarDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "ToolBar"
                });
            });
        });
    });

    describe("ToolBar Test Object", function () {
        var ToolBarTO = require("../lib/tool_bar").ToolBarTO;
        var toolBarTestObjectUnderTest;

        beforeEach(function () {
            toolBarTestObjectUnderTest = new ToolBarTO();
            sinon.stub(toolBarTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                toolBarTestObjectUnderTest.name();
                sinon.assert.calledOnce(toolBarTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(toolBarTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                toolBarTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = toolBarTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});