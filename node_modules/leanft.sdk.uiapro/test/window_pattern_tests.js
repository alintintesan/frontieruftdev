// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("WindowPattern Test", function () {
    var WindowPattern = require("../lib/patterns/window_pattern.js").WindowPattern;
    var name = "WindowPattern";
    var windowPatternUnderTest;
    var ownerMock;
    var promiseMock = { then: function (cb) { return cb; } };

    beforeEach(function () {
        ownerMock = {
            _executeCommand: sinon.stub(),
            notifyWithEvents: sinon.stub()
        };
        windowPatternUnderTest = new WindowPattern(ownerMock);
    });

    describe("canMaximize method", function () {
        it("should execute _executeCommand 'CanMaximize'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            windowPatternUnderTest.canMaximize();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("canMinimize method", function () {
        it("should execute _executeCommand 'CanMinimize'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            windowPatternUnderTest.canMinimize();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("isModal method", function () {
        it("should execute _executeCommand 'IsModal'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            windowPatternUnderTest.isModal();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });
});