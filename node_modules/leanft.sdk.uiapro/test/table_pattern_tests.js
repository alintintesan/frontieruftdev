// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");
 
describe("TablePattern Test", function () {
    var TablePattern = require("../lib/patterns/table_pattern.js").TablePattern;
    var name = "TablePattern";
    var tablePatternUnderTest;
    var ownerMock;
    var promiseMock = { then: function (cb) { return cb; } };

    beforeEach(function () {
        ownerMock = {
            _executeCommand: sinon.stub(),
            notifyWithEvents: sinon.stub()
        };
        tablePatternUnderTest = new TablePattern(ownerMock);
    });

    describe("getColumnHeaders method", function () {
        it("should execute _executeCommand 'GetColumnHeaders'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            tablePatternUnderTest.getColumnHeaders();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getRowHeaders method", function () {
        it("should execute _getROProperty 'GetRowHeaders'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            tablePatternUnderTest.getRowHeaders();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getPrimaryTraversalDirection method", function () {
        it("should execute _executeCommand 'GetPrimaryTraversalDirectio'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            tablePatternUnderTest.getPrimaryTraversalDirection();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });
});