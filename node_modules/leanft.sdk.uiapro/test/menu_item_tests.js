// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("MenuItem Tests", function () {

    describe("MenuItem Description", function () {
        var MenuItem = require("../lib/menu_item").MenuItem;
        var menuItemDescriptionUnderTest;

        beforeEach(function () {
            menuItemDescriptionUnderTest = MenuItem();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'MenuItem' LeanFT type", function () {
                menuItemDescriptionUnderTest = new MenuItem();
                assert.deepEqual(menuItemDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "MenuItem"
                });
            });
        });
    });

    describe("MenuItem Test Object", function () {
        var MenuItemTO = require("../lib/menu_item").MenuItemTO;
        var menuItemTestObjectUnderTest;

        beforeEach(function () {
            menuItemTestObjectUnderTest = new MenuItemTO();
            sinon.stub(menuItemTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                menuItemTestObjectUnderTest.name();
                sinon.assert.calledOnce(menuItemTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(menuItemTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                menuItemTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = menuItemTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});