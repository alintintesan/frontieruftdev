// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */
var assert = require("assert");
var sinon = require("sinon");

describe("UiObjectBase Tests", function () {

    describe("UiObjectBase Description", function () {

        var UiObjectBaseDescription = require("../lib/ui_object_base").UiObjectBaseDescription;
        var uiObjectBaseDescriptionUnderTest;

        beforeEach(function () {
            uiObjectBaseDescriptionUnderTest = new UiObjectBaseDescription();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and LeanFT type", function () {
                uiObjectBaseDescriptionUnderTest = new UiObjectBaseDescription("leanftType");
                assert.deepEqual(uiObjectBaseDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "leanftType"
                });
            });
        });

        describe("x method", function () {
            it("should add 'x' to _properties when value is given as number", function () {
                uiObjectBaseDescriptionUnderTest.x(1);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["x"], 1);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.x(1);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'x' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["x"] = 1;
                uiObjectBaseDescriptionUnderTest.x(null);
                assert(!("x" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'x' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["x"] = 1;
                var result = uiObjectBaseDescriptionUnderTest.x();
                assert.strictEqual(result, 1);
            });
        });

        describe("y method", function () {
            it("should add 'y' to _properties when value is given as number", function () {
                uiObjectBaseDescriptionUnderTest.y(1);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["y"], 1);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.y(1);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'y' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["y"] = 1;
                uiObjectBaseDescriptionUnderTest.y(null);
                assert(!("y" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'y' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["y"] = 1;
                var result = uiObjectBaseDescriptionUnderTest.y();
                assert.strictEqual(result, 1);
            });
        });

        describe("absX method", function () {
            it("should add 'absX' to _properties when value is given as number", function () {
                uiObjectBaseDescriptionUnderTest.absX(1);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["absx"], 1);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.absX(1);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'absX' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["absx"] = 1;
                uiObjectBaseDescriptionUnderTest.absX(null);
                assert(!("absX" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'absX' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["absX"] = 1;
                var result = uiObjectBaseDescriptionUnderTest.absX();
                assert.strictEqual(result, 1);
            });
        });

        describe("absY method", function () {
            it("should add 'absY' to _properties when value is given as number", function () {
                uiObjectBaseDescriptionUnderTest.absY(1);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["absy"], 1);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.absY(1);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'absY' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["absy"] = 1;
                uiObjectBaseDescriptionUnderTest.absY(null);
                assert(!("absY" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'absY' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["absY"] = 1;
                var result = uiObjectBaseDescriptionUnderTest.absY();
                assert.strictEqual(result, 1);
            });
        });

        describe("width method", function () {
            it("should add 'width' to _properties when value is given as number", function () {
                uiObjectBaseDescriptionUnderTest.width(1);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["width"], 1);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.width(1);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'width' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["width"] = 1;
                uiObjectBaseDescriptionUnderTest.width(null);
                assert(!("width" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'width' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["width"] = 1;
                var result = uiObjectBaseDescriptionUnderTest.width();
                assert.strictEqual(result, 1);
            });
        });

        describe("height method", function () {
            it("should add 'height' to _properties when value is given as number", function () {
                uiObjectBaseDescriptionUnderTest.height(1);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["height"], 1);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.height(1);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'height' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["height"] = 1;
                uiObjectBaseDescriptionUnderTest.height(null);
                assert(!("height" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'height' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["height"] = 1;
                var result = uiObjectBaseDescriptionUnderTest.height();
                assert.strictEqual(result, 1);
            });
        });

        describe("processName method", function () {
            it("should add 'processName' to _properties when value is given as string", function () {
                uiObjectBaseDescriptionUnderTest.processName("processName");
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["processname"], "processName");
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.processName("processName");
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'processName' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["processname"] = "processName";
                uiObjectBaseDescriptionUnderTest.acceleratorKey(null);
                assert(!("processName" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'processName' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["processName"] = "processName";
                var result = uiObjectBaseDescriptionUnderTest.processName();
                assert.strictEqual(result, "processName");
            });
        });

        describe("processId method", function () {
            it("should add 'processId' to _properties when value is given as number", function () {
                uiObjectBaseDescriptionUnderTest.processId(1);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["processid"], 1);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.processId(1);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'processId' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["processid"] = 1;
                uiObjectBaseDescriptionUnderTest.processId(null);
                assert(!("processId" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'processId' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["processId"] = 1;
                var result = uiObjectBaseDescriptionUnderTest.processId();
                assert.strictEqual(result, 1);
            });
        });

         describe("hasKeyBoardFocus method", function () {
            it("should add 'hasKeyBoardFocus' to _properties when value is given as boolean", function () {
                uiObjectBaseDescriptionUnderTest.hasKeyBoardFocus(true);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["haskeyboardfocus"], true);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.hasKeyBoardFocus(true);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'hasKeyBoardFocus' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["hasKeyBoardFocus"] = true;
                uiObjectBaseDescriptionUnderTest.hasKeyBoardFocus(null);
                assert(!("haskeyboardfocus" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'haskeyboardfocus' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["haskeyboardfocus"] = true;
                var result = uiObjectBaseDescriptionUnderTest.hasKeyBoardFocus();
                assert.strictEqual(result, true);
            });
        });

        describe("isEnabled method", function () {
            it("should add 'isEnabled' to _properties when value is given as boolean", function () {
                uiObjectBaseDescriptionUnderTest.isEnabled(true);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["isenabled"], true);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.isEnabled(true);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'isEnabled' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["isEnabled"] = true;
                uiObjectBaseDescriptionUnderTest.isEnabled(null);
                assert(!("isenabled" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'isEnabled' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["isEnabled"] = true;
                var result = uiObjectBaseDescriptionUnderTest.isEnabled();
                assert.strictEqual(result, true);
            });
        });

        describe("isKeyboardFocusable method", function () {
            it("should add 'isKeyboardFocusable' to _properties when value is given as boolean", function () {
                uiObjectBaseDescriptionUnderTest.isKeyboardFocusable(true);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["iskeyboardfocusable"], true);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.isKeyboardFocusable(true);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'isKeyboardFocusable' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["isKeyboardFocusable"] = true;
                uiObjectBaseDescriptionUnderTest.isKeyboardFocusable(null);
                assert(!("isenabled" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'isKeyboardFocusable' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["isKeyboardFocusable"] = true;
                var result = uiObjectBaseDescriptionUnderTest.isKeyboardFocusable();
                assert.strictEqual(result, true);
            });
        });

        describe("isOffScreen method", function () {
            it("should add 'isOffScreen' to _properties when value is given as boolean", function () {
                uiObjectBaseDescriptionUnderTest.isOffScreen(true);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["isoffscreen"], true);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.isOffScreen(true);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'isOffScreen' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["isOffScreen"] = true;
                uiObjectBaseDescriptionUnderTest.isOffScreen(null);
                assert(!("isenabled" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'isOffScreen' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["isOffScreen"] = true;
                var result = uiObjectBaseDescriptionUnderTest.isOffScreen();
                assert.strictEqual(result, true);
            });
        });

        describe("isPassword method", function () {
            it("should add 'isPassword' to _properties when value is given as boolean", function () {
                uiObjectBaseDescriptionUnderTest.isPassword(true);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["ispassword"], true);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.isPassword(true);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'isPassword' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["isPassword"] = true;
                uiObjectBaseDescriptionUnderTest.isPassword(null);
                assert(!("ispassword" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'isPassword' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["isPassword"] = true;
                var result = uiObjectBaseDescriptionUnderTest.isPassword();
                assert.strictEqual(result, true);
            });
        });

        describe("status method", function () {
            it("should add 'status' to _properties when value is given as string", function () {
                uiObjectBaseDescriptionUnderTest.status("status");
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["status"], "status");
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.status("status");
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'status' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["status"] = "status";
                uiObjectBaseDescriptionUnderTest.status(null);
                assert(!("status" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'status' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["status"] = "status";
                var result = uiObjectBaseDescriptionUnderTest.status();
                assert.strictEqual(result, "status");
            });
        });

        describe("acceleratorKey method", function () {
            it("should add 'acceleratorkey' to _properties when value is given as string", function () {
                uiObjectBaseDescriptionUnderTest.acceleratorKey("acceleratorKey");
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["acceleratorkey"], "acceleratorKey");
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.acceleratorKey("acceleratorKey");
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'acceleratorkey' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["acceleratorkey"] = "acceleratorKey";
                uiObjectBaseDescriptionUnderTest.acceleratorKey(null);
                assert(!("acceleratorkey" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'acceleratorkey' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["acceleratorkey"] = "acceleratorKey";
                var result = uiObjectBaseDescriptionUnderTest.acceleratorKey();
                assert.strictEqual(result, "acceleratorKey");
            });
        });

        describe("path method", function () {
            it("should add 'path' to _properties when value is given as string", function () {
                uiObjectBaseDescriptionUnderTest.path("path");
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["path"], "path");
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.path("path");
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'path' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["path"] = "path";
                uiObjectBaseDescriptionUnderTest.path(null);
                assert(!("path" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'path' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["path"] = "path";
                var result = uiObjectBaseDescriptionUnderTest.path();
                assert.strictEqual(result, "path");
            });
        });

        describe("accessKey method", function () {
            var accessKey = "accessKey";
            it("should add 'accesskey' to _properties when value is given as string", function () {
                uiObjectBaseDescriptionUnderTest.accessKey(accessKey);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["accesskey"], accessKey);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.accessKey(accessKey);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'accesskey' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["accesskey"] = accessKey;
                uiObjectBaseDescriptionUnderTest.accessKey(null);
                assert(!("accesskey" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'accesskey' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["accesskey"] = accessKey;
                var result = uiObjectBaseDescriptionUnderTest.accessKey();
                assert.strictEqual(result, accessKey);
            });
        });

        describe("automationId method", function () {
            var automationId = "automationId";
            it("should add 'automationid' to _properties when value is given as string", function () {
                uiObjectBaseDescriptionUnderTest.automationId(automationId);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["automationid"], automationId);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.automationId(automationId);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'automationid' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["automationid"] = automationId;
                uiObjectBaseDescriptionUnderTest.automationId(null);
                assert(!("automationid" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'automationid' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["automationid"] = automationId;
                var result = uiObjectBaseDescriptionUnderTest.automationId();
                assert.strictEqual(result, automationId);
            });
        });

        describe("controlType method", function () {
            var controlType = "controlType";
            it("should add 'controltype' to _properties when value is given as string ", function () {
                uiObjectBaseDescriptionUnderTest.controlType(controlType);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["controltype"], controlType);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.controlType(controlType);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'controltype' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["controltype"] = controlType;
                uiObjectBaseDescriptionUnderTest.controlType(null);
                assert(!("controltype" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'controltype' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["controltype"] = controlType;
                var result = uiObjectBaseDescriptionUnderTest.controlType();
                assert.strictEqual(result, controlType);
            });
        });

        describe("frameworkId method", function () {
            var frameworkId = "frameworkId";
            it("should add 'frameworkid' to _properties when value is given as string ", function () {
                uiObjectBaseDescriptionUnderTest.frameworkId(frameworkId);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["frameworkid"], frameworkId);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.frameworkId(frameworkId);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'frameworkid' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["frameworkid"] = frameworkId;
                uiObjectBaseDescriptionUnderTest.frameworkId(null);
                assert(!("frameworkid" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'frameworkid' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["frameworkid"] = frameworkId;
                var result = uiObjectBaseDescriptionUnderTest.frameworkId();
                assert.strictEqual(result, frameworkId);
            });
        });

        describe("supportedPatterns method", function () {
            var supportedPatterns = ["p1", "p2", "p3"];
            var supportedPatternsJoined = supportedPatterns.join(";");

            it("should add 'supportedpatterns' to _properties when value is given as string ", function () {
                uiObjectBaseDescriptionUnderTest.supportedPatterns(supportedPatterns);
                assert.deepEqual(uiObjectBaseDescriptionUnderTest._properties["supportedpatterns"], supportedPatternsJoined);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.supportedPatterns(supportedPatterns);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'supportedpatterns' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["supportedpatterns"] = supportedPatternsJoined;
                uiObjectBaseDescriptionUnderTest.supportedPatterns(null);
                assert(!("supportedpatterns" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'supportedpatterns' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["supportedpatterns"] = supportedPatternsJoined;
                var result = uiObjectBaseDescriptionUnderTest.supportedPatterns();
                assert.deepEqual(result, supportedPatterns);
            });
        });

        describe("nativeClass method", function () {
            var nativeClass = "nativeClass";
            it("should add 'nativeclass' to _properties when value is given as string ", function () {
                uiObjectBaseDescriptionUnderTest.nativeClass(nativeClass);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["nativeclass"], nativeClass);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.nativeClass(nativeClass);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'nativeclass' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["nativeclass"] = nativeClass;
                uiObjectBaseDescriptionUnderTest.nativeClass(null);
                assert(!("nativeclass" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'nativeclass' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["nativeclass"] = nativeClass;
                var result = uiObjectBaseDescriptionUnderTest.nativeClass();
                assert.strictEqual(result, nativeClass);
            });
        });

        describe("name method", function () {
            var name = "name";
            it("should add 'name' to _properties when value is given as string ", function () {
                uiObjectBaseDescriptionUnderTest.name(name);
                assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["name"], name);
            });

            it("should return this - builder pattern when value is given", function () {
                var result = uiObjectBaseDescriptionUnderTest.name(name);
                assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
            });

            it("should remove 'name' from _properties when value is null", function () {
                uiObjectBaseDescriptionUnderTest._properties["name"] = name;
                uiObjectBaseDescriptionUnderTest.name(null);
                assert(!("name" in uiObjectBaseDescriptionUnderTest._properties));
            });

            it("should return the value of 'name' from _properties when value is not given", function () {
                uiObjectBaseDescriptionUnderTest._properties["name"] = name;
                var result = uiObjectBaseDescriptionUnderTest.name();
                assert.strictEqual(result, name);
            });
        });
    });

    describe("UiObjectBase Test Object", function () {
        var Core = require("leanft.sdk.core");
        var UiObjectBaseTO = require("../lib/ui_object_base").UiObjectBaseTO;
        var uiObjectTOUnderTest;
        var promiseMock = { then: function (cb) { return cb(); } };

        beforeEach(function () {
            uiObjectTOUnderTest = new UiObjectBaseTO();
            sinon.stub(uiObjectTOUnderTest, "_getROProperty");
            sinon.stub(uiObjectTOUnderTest, "_executeWithEventsWithOptions");
            sinon.stub(uiObjectTOUnderTest, "_getROProperties");
        });

        describe("x method", function () {
            it("should execute _getROProperty 'x'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.x();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "x", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.x();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("y method", function () {
            it("should execute _getROProperty 'y'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.y();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "y", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.y();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("absX method", function () {
            it("should execute _getROProperty 'absX'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.absX();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "absx", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.absX();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("absY method", function () {
            it("should execute _getROProperty 'absY'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.absY();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "absy", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.absY();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("width method", function () {
            it("should execute _getROProperty 'width'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.width();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "width", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.width();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("height method", function () {
            it("should execute _getROProperty 'height'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.height();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "height", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.height();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("processName method", function () {
            it("should execute _getROProperty 'processName'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.processName();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "processname", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.processName();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("processId method", function () {
            it("should execute _getROProperty 'processId'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.processId();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "processid", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.processId();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("hasKeyBoardFocus method", function () {
            it("should execute _getROProperty 'hasKeyBoardFocus'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.hasKeyBoardFocus();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "haskeyboardfocus", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.hasKeyBoardFocus();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("isKeyBoardFocusable method", function () {
            it("should execute _getROProperty 'isKeyBoardFocusable'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.isKeyboardFocusable();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "iskeyboardfocusable", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.isKeyboardFocusable();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("isOffScreen method", function () {
            it("should execute _getROProperty 'isOffScreen'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.isOffScreen();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "isoffscreen", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.isOffScreen();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("isPassword method", function () {
            it("should execute _getROProperty 'isPassword'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.isPassword();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "ispassword", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.isPassword();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("status method", function () {
            it("should execute _getROProperty 'status'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.status();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "status", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.status();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("acceleratorKey method", function () {
            it("should execute _getROProperty 'acceleratorkey'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.acceleratorKey();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "acceleratorkey", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.acceleratorKey();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("accessKey method", function () {
            it("should execute _getROProperty 'accesskey'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.accessKey();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "accesskey", sinon.match({}));
            });

            it("should return promise as is", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.accessKey();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("automationId method", function () {
            it("should execute _getROProperty 'automationid'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.automationId();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "automationid", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.automationId();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("controlType method", function () {
            it("should execute _getROProperty 'controltype'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.controlType();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "controltype", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.controlType();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("frameworkId method", function () {
            it("should execute _getROProperty 'frameworkid'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.frameworkId();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "frameworkid", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.frameworkId();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("supportedPatterns method", function () {
            it("should execute _getROProperty 'supportedpatterns'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.supportedPatterns();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "supportedpatterns", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.supportedPatterns();
                assert.deepEqual(res, []);
            });
        });

        describe("path method", function () {
            it("should execute _getROProperty 'path'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.path();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "path", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.path();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("nativeClass method", function () {
            it("should execute _getROProperty 'nativeclass'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.nativeClass();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "nativeclass", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.nativeClass();
                assert.strictEqual(res, promiseMock);
            });
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                uiObjectTOUnderTest.name();
                sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
                sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return the execution promise", function () {
                uiObjectTOUnderTest._getROProperty.returns(promiseMock);
                var res = uiObjectTOUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});