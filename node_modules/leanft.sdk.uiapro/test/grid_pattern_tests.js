// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("GridPattern Test", function () {
    var GridPattern = require("../lib/patterns/grid_pattern.js").GridPattern;
    var name = "GridPattern";
    var gridPatternUnderTest;
    var ownerMock;
    var promiseMock = { then: function (cb) { return cb();} };

    beforeEach(function () {
        ownerMock = {
            _executeCommand: sinon.stub(),
            notifyWithEvents: sinon.stub()
        };
        gridPatternUnderTest = new GridPattern(ownerMock);
    });

    describe("columnCount method", function () {
        it("should execute _executeCommand 'ColumnCount'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            gridPatternUnderTest.columnCount();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("rowCount method", function () {
        it("should execute _executeCommand 'RowCount'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            gridPatternUnderTest.rowCount();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("activateCell method", function () {
        it("should throw error if params not set", function () {
            assert.throws(function () {
                gridPatternUnderTest.activateCell();
            });
        });

        it("should throw error if only 1 param set", function () {
            assert.throws(function () {
                gridPatternUnderTest.activateCell(2);
            });
        });

        it("should throw error if param1 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.activateCell(null, 2);
            });
        });

        it("should throw error if param2 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.activateCell(1, null);
            });
        });

        it("should throw error if one param is not number", function () {
            assert.throws(function () {
                gridPatternUnderTest.activateCell({1:3}, 2);
            });
        });

        it("should execute command 'ActivateCell'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            gridPatternUnderTest.activateCell(1, 2);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("addCellToSelection method", function () {
        it("should throw error if params not set", function () {
            assert.throws(function () {
                gridPatternUnderTest.addCellToSelection();
            });
        });

        it("should throw error if only 1 param set", function () {
            assert.throws(function () {
                gridPatternUnderTest.addCellToSelection(2);
            });
        });

        it("should throw error if param1 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.addCellToSelection(null, 2);
            });
        });

        it("should throw error if param2 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.addCellToSelection(1, null);
            });
        });

        it("should throw error if one param is not number", function () {
            assert.throws(function () {
                gridPatternUnderTest.addCellToSelection({1:3}, 2);
            });
        });

        it("should execute command 'AddCellToSelection'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            gridPatternUnderTest.addCellToSelection(1, 2);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("addRowToSelection method", function () {
        it("should throw error if params not set", function () {
            assert.throws(function () {
                gridPatternUnderTest.addRowToSelection();
            });
        });

        it("should throw error if no param set", function () {
            assert.throws(function () {
                gridPatternUnderTest.addRowToSelection();
            });
        });

        it("should throw error if param1 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.addRowToSelection(null);
            });
        });

        it("should throw error if one param is not number", function () {
            assert.throws(function () {
                gridPatternUnderTest.addRowToSelection({1:3});
            });
        });

        it("should execute command 'AddRowToSelection'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            gridPatternUnderTest.addRowToSelection(1);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("clickCell method", function () {
        it("should throw error if params not set", function () {
            assert.throws(function () {
                gridPatternUnderTest.clickCell();
            });
        });

        it("should throw error if only 1 param set", function () {
            assert.throws(function () {
                gridPatternUnderTest.clickCell(2);
            });
        });

        it("should throw error if param1 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.clickCell(null, 2);
            });
        });

        it("should throw error if param2 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.clickCell(1, null);
            });
        });

        it("should throw error if one param is not number", function () {
            assert.throws(function () {
                gridPatternUnderTest.clickCell({1:3}, 2);
            });
        });

        it("should execute command 'ClickCell'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            gridPatternUnderTest.clickCell(1, 2);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getCell method", function () {
        it("should throw error if params not set", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCell();
            });
        });

        it("should throw error if only 1 param set", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCell(2);
            });
        });

        it("should throw error if param1 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCell(null, 2);
            });
        });

        it("should throw error if param2 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCell(1, null);
            });
        });

        it("should throw error if one param is not number", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCell({1:3}, 2);
            });
        });

        it("should execute command 'GetCell'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            gridPatternUnderTest.getCell(1, 2);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getCellName method", function () {
        it("should throw error if params not set", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCellName();
            });
        });

        it("should throw error if only 1 param set", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCellName(2);
            });
        });

        it("should throw error if param1 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCellName(null, 2);
            });
        });

        it("should throw error if param2 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCellName(1, null);
            });
        });

        it("should throw error if one param is not number", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCellName({1:3}, 2);
            });
        });

        it("should execute command 'GetCellName'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            gridPatternUnderTest.getCellName(1, 2);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getCellText method", function () {
        it("should throw error if params not set", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCellText();
            });
        });

        it("should throw error if only 1 param set", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCellText(2);
            });
        });

        it("should throw error if param1 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCellText(null, 2);
            });
        });

        it("should throw error if param2 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCellText(1, null);
            });
        });

        it("should throw error if one param is not number", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCellText({1:3}, 2);
            });
        });

        it("should execute command 'GetCellText'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            gridPatternUnderTest.getCellText(1, 2);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("getCellValue method", function () {
        it("should throw error if params not set", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCellValue();
            });
        });

        it("should throw error if only 1 param set", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCellValue(2);
            });
        });

        it("should throw error if param1 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCellValue(null, 2);
            });
        });

        it("should throw error if param2 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCellValue(1, null);
            });
        });

        it("should throw error if one param is not number", function () {
            assert.throws(function () {
                gridPatternUnderTest.getCellValue({1:3}, 2);
            });
        });

        it("should execute command 'GetCellValue'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            gridPatternUnderTest.getCellValue(1, 2);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("selectCell method", function () {
        it("should throw error if params not set", function () {
            assert.throws(function () {
                gridPatternUnderTest.selectCell();
            });
        });

        it("should throw error if only 1 param set", function () {
            assert.throws(function () {
                gridPatternUnderTest.selectCell(2);
            });
        });

        it("should throw error if param1 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.selectCell(null, 2);
            });
        });

        it("should throw error if param2 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.selectCell(1, null);
            });
        });

        it("should throw error if one param is not number", function () {
            assert.throws(function () {
                gridPatternUnderTest.selectCell({1:3}, 2);
            });
        });

        it("should execute command 'SelectCell'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            gridPatternUnderTest.selectCell(1, 2);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("selectRow method", function () {
        it("should throw error if params not set", function () {
            assert.throws(function () {
                gridPatternUnderTest.selectRow();
            });
        });

        it("should throw error if param1 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.selectRow(null);
            });
        });

        it("should throw error if one param is not number", function () {
            assert.throws(function () {
                gridPatternUnderTest.selectRow({1:3});
            });
        });

        it("should execute command 'SelectRow'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            gridPatternUnderTest.selectRow(1);
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("setCellValue method", function () {
        it("should throw error if params not set", function () {
            assert.throws(function () {
                gridPatternUnderTest.setCellValue();
            });
        });

        it("should throw error if only 1 param set", function () {
            assert.throws(function () {
                gridPatternUnderTest.setCellValue(2);
            });
        });

        it("should throw error if only 2 params set", function () {
            assert.throws(function () {
                gridPatternUnderTest.setCellValue(1, 2);
            });
        });

        it("should throw error if param1 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.setCellValue(null, 2, '3');
            });
        });

        it("should throw error if param2 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.setCellValue(1, null, '3');
            });
        });

        it("should throw error if param3 is null", function () {
            assert.throws(function () {
                gridPatternUnderTest.setCellValue(1, 2, null);
            });
        });

        it("should throw error if one param is not number", function () {
            assert.throws(function () {
                gridPatternUnderTest.setCellValue({1:3}, 2, '3');
            });
        });

        it("should execute command 'SetCellValue'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            gridPatternUnderTest.setCellValue(1, 2, '3');
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });
});