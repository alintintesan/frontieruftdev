// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ListItem Tests", function () {

    describe("ListItem Description", function () {
        var ListItem = require("../lib/list_item").ListItem;
        var listItemDescriptionUnderTest;

        beforeEach(function () {
            listItemDescriptionUnderTest = ListItem();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'ListItem' LeanFT type", function () {
                listItemDescriptionUnderTest = new ListItem();
                assert.deepEqual(listItemDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "ListItem"
                });
            });
        });
    });

    describe("ListItem Test Object", function () {
        var ListItemTO = require("../lib/list_item").ListItemTO;
        var listItemTestObjectUnderTest;

        beforeEach(function () {
            listItemTestObjectUnderTest = new ListItemTO();
            sinon.stub(listItemTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                listItemTestObjectUnderTest.name();
                sinon.assert.calledOnce(listItemTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(listItemTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                listItemTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = listItemTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});