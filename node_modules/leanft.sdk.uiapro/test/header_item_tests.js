// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("HeaderItem Tests", function () {

    describe("HeaderItem Description", function () {
        var HeaderItem = require("../lib/header_item").HeaderItem;
        var headerItemDescriptionUnderTest;

        beforeEach(function () {
            headerItemDescriptionUnderTest = HeaderItem();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'HeaderItem' LeanFT type", function () {
                headerItemDescriptionUnderTest = new HeaderItem();
                assert.deepEqual(headerItemDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "HeaderItem"
                });
            });
        });
    });

    describe("HeaderItem Test Object", function () {
        var HeaderItemTO = require("../lib/header_item").HeaderItemTO;
        var headerItemTestObjectUnderTest;

        beforeEach(function () {
            headerItemTestObjectUnderTest = new HeaderItemTO();
            sinon.stub(headerItemTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                headerItemTestObjectUnderTest.name();
                sinon.assert.calledOnce(headerItemTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(headerItemTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                headerItemTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = headerItemTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});