// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Button Tests", function () {

    describe("Button Description", function () {
        var Button = require("../lib/button").Button;
        var buttonDescriptionUnderTest;

        beforeEach(function () {
            buttonDescriptionUnderTest = Button();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'Button' LeanFT type", function () {
                buttonDescriptionUnderTest = new Button();
                assert.deepEqual(buttonDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "Button"
                });
            });
        });
    });

    describe("Button Test Object", function () {
        var ButtonTO = require("../lib/button").ButtonTO;
        var buttonTestObjectUnderTest;

        beforeEach(function () {
            buttonTestObjectUnderTest = new ButtonTO();
            sinon.stub(buttonTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                buttonTestObjectUnderTest.name();
                sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                buttonTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = buttonTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});