// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Window Tests", function () {

    describe("Window Description", function () {

        var Window = require("../lib/window.js").Window;
        var windowDescriptionUnderTest;

        beforeEach(function () {
            windowDescriptionUnderTest = new Window();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and LeanFT type", function () {
                windowDescriptionUnderTest = new Window();
                assert.deepEqual(windowDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "Window"
                });
            });
        });
    });

    describe("Window Test Object", function () {
        var Core = require("leanft.sdk.core");
        var WindowTO = require("../lib/window.js").WindowTO;
        var windowTOUnderTest;
        var promiseMock = { then: function (cb) { return cb(); } };

        beforeEach(function () {
            windowTOUnderTest = new WindowTO();
            sinon.stub(windowTOUnderTest, "_getROProperty");
            sinon.stub(windowTOUnderTest, "_executeWithEventsWithOptions");
            sinon.stub(windowTOUnderTest, "_getROProperties");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                windowTOUnderTest.name();
                sinon.assert.calledOnce(windowTOUnderTest._getROProperty);
                sinon.assert.calledWith(windowTOUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                windowTOUnderTest._getROProperty.returns(promiseMock);
                var res = windowTOUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});