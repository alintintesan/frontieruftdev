// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ToolTip Tests", function () {

    describe("ToolTip Description", function () {
        var ToolTip = require("../lib/tool_tip").ToolTip;
        var toolTipDescriptionUnderTest;

        beforeEach(function () {
            toolTipDescriptionUnderTest = ToolTip();
        });

        describe("Constructor", function () {
            it("should assign 'UIAPro' and 'ToolTip' LeanFT type", function () {
                toolTipDescriptionUnderTest = new ToolTip();
                assert.deepEqual(toolTipDescriptionUnderTest.leanFTType, {
                    technology: "UIAPro",
                    leanftType: "ToolTip"
                });
            });
        });
    });

    describe("ToolTip Test Object", function () {
        var ToolTipTO = require("../lib/tool_tip").ToolTipTO;
        var toolTipTestObjectUnderTest;

        beforeEach(function () {
            toolTipTestObjectUnderTest = new ToolTipTO();
            sinon.stub(toolTipTestObjectUnderTest, "_getROProperty");
        });

        describe("name method", function () {
            it("should execute _getROProperty 'name'", function () {
                toolTipTestObjectUnderTest.name();
                sinon.assert.calledOnce(toolTipTestObjectUnderTest._getROProperty);
                sinon.assert.calledWith(toolTipTestObjectUnderTest._getROProperty, "name", sinon.match({}));
            });

            it("should return promise as is", function () {
                var promiseMock = { then: function (cb) { return cb(); } };
                toolTipTestObjectUnderTest._getROProperty.returns(promiseMock);
                var res = toolTipTestObjectUnderTest.name();
                assert.strictEqual(res, promiseMock);
            });
        });
    });
});