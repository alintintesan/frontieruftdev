// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var CheckedState = Core.CheckedState;
 
describe("TogglePattern Test", function () {
    var TogglePattern = require("../lib/patterns/toggle_pattern.js").TogglePattern;
    var name = "TogglePattern";
    var togglePatternUnderTest;
    var ownerMock;
    var promiseMock = { then: function (cb) { return cb; } };

    beforeEach(function () {
        ownerMock = {
            _executeCommand: sinon.stub(),
            notifyWithEvents: sinon.stub()
        };
        togglePatternUnderTest = new TogglePattern(ownerMock);
    });

    describe("getToggleState method", function () {
        it("should execute _executeCommand 'GetToggleState'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            togglePatternUnderTest.getToggleState();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });

    describe("toggle method", function () {
        it("should execute command 'Toggle'", function () {
            ownerMock._executeCommand.returns(promiseMock);
            togglePatternUnderTest.toggle();
            sinon.assert.calledOnce(ownerMock._executeCommand);
            sinon.assert.calledWith(ownerMock._executeCommand, name);
        });
    });
});