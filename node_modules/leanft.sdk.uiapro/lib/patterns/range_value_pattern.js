// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;
var Convert = Core.Convert;

/**
 * The UIA Pro RangeValue pattern.
 * @class RangeValuePattern
 * @mixes UIAPro.RangeValuePatternBehavior._properties
 * @mixes UIAPro.RangeValuePatternBehavior._methods
 * @memberof UIAPro
 */
function RangeValuePattern(owner) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(RangeValuePatternBehavior);
    this._owner = owner;
    this._name = RangeValuePattern.name;
}

RangeValuePattern.prototype = {
    _owner: null
};

/**
 * The methods and properties of RangeValuePattern object
 * @memberof UIAPro
 * @ignore
 */
var RangeValuePatternBehavior = {
    /**
     * @memberof UIAPro.RangeValuePatternBehavior
     * @ignore
     */
    _properties: {
        /**
         * Checks which value is the highest in the allowed range.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the highest in the allowed range.
         * @memberof UIAPro.RangeValuePattern#
         */
        getMaximum: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetMaximum();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getMaximum" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Checks which value is the lowest in the allowed range.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the lowest in the allowed range.
         * @memberof UIAPro.RangeValuePattern#
         */
        getMinimum: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetMinimum();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getMinimum" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Checks if the value of a UIA Pro element is read-only.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object is read-only or not.
         * @memberof UIAPro.RangeValuePattern#
         */
        isReadOnly: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.IsReadOnly();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "isReadOnly" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Returns the value of the UIA Pro element.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's value.
         * @memberof UIAPro.RangeValuePattern#
         */
        getValue: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetValue();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getValue" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Returns the control-specific large-change value which is added to or subtracted from the value property when performing large increments or decrements.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's largeChange value.
         * @memberof UIAPro.RangeValuePattern#
         */
        getLargeChange: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetLargeChange();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getLargeChange" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Returns the small-change value, unique to the UIA Pro element, which is added to or subtracted from the elements value property when performing large increments or decrements.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's smallChange value.
         * @memberof UIAPro.RangeValuePattern#
         */
        getSmallChange: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetSmallChange();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getSmallChange" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    },

    /**
     * @memberof UIAPro.RangeValuePatternBehavior
     * @ignore
     */
    _methods: {
        /**
         * Sets the value of the control.
         * @function
         * @param {string} value sets the value in the object.
         * @returns {Promise<void>} a promise that is fulfilled when the setValue operation ends.
         * @memberof UIAPro.RangeValuePattern#
         */
        setValue: function (value) {
            if (value === null)
                throw new Error("You must pass parameter value.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.SetValue(Convert.toString(value));
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "setValue" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    }
};

module.exports.RangeValuePattern = RangeValuePattern;