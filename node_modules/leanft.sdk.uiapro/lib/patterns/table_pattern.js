// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * Contains values that specify whether data in a table should be read primarily by row or by column.
 * @typedef {UIAPro.TableTraversalDirection} TableTraversalDirection
 * @property {string} rowByRow Specifies that data in the table should be read column by column.
 * @property {string} columnByColumn Specifies that the best way to present the data is indeterminate.
 * @property {string} indeterminate Specifies that data in the table should be read row by row.
 * @memberof UIAPro
 */
var TableTraversalDirection = {
    /**
     * @type {string}
     */
    rowByRow: "rowByRow",
    /**
     * @type {string}
     */
    columnByColumn: "columnByColumn",
    /**
     * @type {string}
     */
    indeterminate: "indeterminate",
    /**
     * @ignore
     */
    _tableTraversalDirectionToNative: {
        0: "rowByRow",
        1: "columnByColumn",
        2: "indeterminate"
    },
    /**
     * @param {number} traversalDirection
     * @returns {*}
     * @ignore
     */
    _convertToTableTraversalDirection: function (traversalDirection) {
        return TableTraversalDirection._tableTraversalDirectionToNative[traversalDirection];
    }
};

/**
 * The UIA Pro Table pattern.
 * @class TablePattern
 * @mixes UIAPro.GridPatternBehavior._properties
 * @mixes UIAPro.GridPatternBehavior._methods
 * @mixes UIAPro.TablePatternBehavior._properties
 * @memberof UIAPro
 */
function TablePattern(owner) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(TablePatternBehavior);
    this._owner = owner;
    this._name = TablePattern.name;
}

TablePattern.prototype = {
    _owner: null
};

/**
 * The properties of TablePattern object
 * @memberof UIAPro
 * @ignore
 */
var TablePatternBehavior = {
    /**
     * @memberof UIAPro.TablePatternBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns a collection with all the column headers in a table.
         * @function
         * @returns {Promise<Array<Promise<UiObject>>>} a promise that is fulfilled with an array of promises that consist of the columnsHeaders items of the object.
         * @memberof UIAPro.TablePattern#
         */
        getColumnHeaders: function () {
            return this._owner._executeCommand(this._name).then(function (pattern) {
                return pattern.GetColumnHeaders().then(function (result) {
                    if (result === null)
                        throw new Error("Headers result could not be processed.");

                    return result.Count().then(function (count) {
                        var columnHeaders = [];

                        if (count === null) {
                            throw new Error("Headers result could not be processed.");
                        }

                        for (var i = 0; i < count; i++) {
                            columnHeaders.push(result.Item(i));
                        }

                        return columnHeaders;
                    });
                });
            });
        },
        /**
         * Returns a collection with all the row headers in a table.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the rowHeaders of the object.
         * @memberof UIAPro.TablePattern#
         */
        getRowHeaders: function () {
            return this._owner._executeCommand(this._name).then(function (pattern) {
                return pattern.GetRowHeaders().then(function (result) {
                    if (result === null)
                        throw new Error("Headers result could not be processed.");

                    return result.Count().then(function (count) {
                        var rowHeaders = [];

                        if (count === null) {
                            throw new Error("Headers result could not be processed.");
                        }

                        for (var i = 0; i < count; i++) {
                            rowHeaders.push(result.Item(i));
                        }

                        return rowHeaders;
                    });
                });
            });
        },
        /**
         * Returns the primary direction of traversal for the table.
         * @function
         * @returns {Promise<UIAPro.TableTraversalDirection>} a promise that is fulfilled with the primaryTraversalDirection of the object.
         * @memberof UIAPro.TablePattern#
         */
        getPrimaryTraversalDirection: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetPrimaryTraversalDirection().then(function (result) {
                        return TableTraversalDirection._convertToTableTraversalDirection(result);
                    });
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getPrimaryTraversalDirection" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    }
};

module.exports.TablePattern = TablePattern;
module.exports.TableTraversalDirection = TableTraversalDirection;