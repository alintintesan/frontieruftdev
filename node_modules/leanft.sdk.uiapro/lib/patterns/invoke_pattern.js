// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * The UIA Pro Invoke pattern.
 * @class InvokePattern
 * @mixes UIAPro.InvokePatternBehavior._methods
 * @memberof UIAPro
 */
function InvokePattern(owner) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(InvokePatternBehavior);
    this._owner = owner;
    this._name = InvokePattern.name;
}

InvokePattern.prototype = {
    _owner: null
};

/**
 * The methods of InvokePattern object
 * @memberof UIAPro
 * @ignore
 */
var InvokePatternBehavior = {
    /**
     * @memberof UIAPro.InvokePatternBehavior
     * @ignore
     */
    _methods: {
        /**
         * Sends a request to activate a control and initiate its single, unambiguous action.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the invoke operation ends.
         * @memberof UIAPro.InvokePattern#
         */
        invoke: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.Invoke();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "invoke" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    }
};

module.exports.InvokePattern = InvokePattern;