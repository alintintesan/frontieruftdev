// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;
var CheckedState = Core.CheckedState;

/**
 * The UIA Pro Toggle pattern.
 * @class TogglePattern
 * @mixes UIAPro.TogglePatternBehavior._properties
 * @mixes UIAPro.TogglePatternBehavior._methods
 * @memberof UIAPro
 */
function TogglePattern(owner) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(TogglePatternBehavior);
    this._owner = owner;
    this._name = TogglePattern.name;
}

TogglePattern.prototype = {
    _owner: null
};

/**
 * The properties of TogglePattern object
 * @memberof UIAPro
 * @ignore
 */
var TogglePatternBehavior = {
    /**
     * @memberof UIAPro.TogglePatternBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the toggle state of the object.
         * Possible values: {@link CheckedState}
         * @function
         * @returns {Promise<CheckedState>} a promise that is fulfilled with the state of the object.
         * @memberof UIAPro.TogglePattern#
         */
        getToggleState: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetToggleState().then(function (result) {
                        return CheckedState._nativeToCheckedState4DotNet(result);
                    });
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getToggleState" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    },
    /**
     * @memberof UIAPro.TogglePatternBehavior
     * @ignore
     */
    _methods: {
        /**
         * Cycles through the toggle states of an object.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the toggle operation ends.
         * @memberof UIAPro.TogglePattern#
         */
        toggle: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.Toggle();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "toggle" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    }
};

module.exports.TogglePattern = TogglePattern;