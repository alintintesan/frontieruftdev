// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * The UIA Pro GridItem pattern.
 * @class GridItemPattern
 * @mixes UIAPro.GridItemPatternBehavior._properties
 * @memberof UIAPro
 */
function GridItemPattern(owner) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(GridItemPatternBehavior);
    this._owner = owner;
    this._name = GridItemPattern.name;
}

GridItemPattern.prototype = {
    _owner: null
};

/**
 * The properties of GridItemPattern object
 * @memberof UIAPro
 * @ignore
 */
var GridItemPatternBehavior = {
    /**
     * @memberof UIAPro.GridItemPatternBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the 0-based ordinal number of the column that contains a cell or item.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the ordinal number of the column that contains a cell or item.
         * @memberof UIAPro.GridItemPattern#
         */
        getColumnIndex: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetColumnIndex();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getColumnIndex" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Returns the 0-based ordinal number of the row that contains a cell or item.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the ordinal number of the row that contains a cell or item.
         * @memberof UIAPro.GridItemPattern#
         */
        getRowIndex: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetRowIndex();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getRowIndex" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Returns the number of columns spanned by a cell or item.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns spanned by a cell or item.
         * @memberof UIAPro.GridItemPattern#
         */
        getSpannedColumns: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetSpannedColumns();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getSpannedColumns" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Returns the number of rows spanned by a cell or item.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of rows spanned by a cell or item.
         * @memberof UIAPro.GridItemPattern#
         */
        getSpannedRows: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetSpannedRows();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getSpannedRows" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Returns an AutomationElement that supports {@link UIAPro.GridPattern} and represents the container of a cell or item.
         * @function
         * @returns {Promise<Object>} a promise that is fulfilled with a UIA Pro element.
         * @memberof UIAPro.GridItemPattern#
         */
        getContainingGrid: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetContainingGrid();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getContainingGrid" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    }
};

module.exports.GridItemPattern = GridItemPattern;
module.exports.GridItemPatternBehavior = GridItemPatternBehavior;