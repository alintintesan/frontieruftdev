// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * The UIA Pro Selection pattern used for selection container controls such as list boxes and combo boxes.
 * @class SelectionPattern
 * @mixes UIAPro.SelectionPatternBehavior._properties
 * @mixes UIAPro.SelectionPatternBehavior._methods
 * @memberof UIAPro
 */
function SelectionPattern(owner) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(SelectionPatternBehavior);
    this._owner = owner;
    this._name = SelectionPattern.name;
}

SelectionPattern.prototype = {
    _owner: null
};

/**
 * The methods and properties of SelectionPattern object
 * @memberof UIAPro
 * @ignore
 */
var SelectionPatternBehavior = {
    /**
     * @memberof UIAPro.SelectionPatternBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the list of items that are selected in the object.
         * @function
         * @returns {Promise<Array<Promise<UiObject>>>} a promise that is fulfilled with an array of promises that consist of the selected items of the object.
         * @memberof UIAPro.SelectionPattern#
         */
        getSelectedChildren: function () {
            return this._owner._executeCommand(this._name).then(function (pattern) {
                return pattern.GetSelectedChildren().then(function (result) {
                    if (result === null)
                        throw new Error("Items result could not be processed.");

                    return result.Count().then(function (count) {
                        var selectedChildren = [];

                        if (count === null) {
                            throw new Error("Items result could not be processed.");
                        }

                        for (var i = 0; i < count; i++) {
                            selectedChildren.push(result.Item(i));
                        }

                        return selectedChildren;
                    });
                });
            });
        }
    },

    /**
     * @memberof UIAPro.SelectionPatternBehavior
     * @ignore
     */
    _methods: {
        /**
         * Indicates whether multiple items in the container can be selected at once.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled when the select operation ends.
         * @memberof UIAPro.SelectionPattern#
         */
        canSelectMultipleItems: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.CanSelectMultipleItems();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "canSelectMultipleItems" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Gets a value that specifies whether the container requires at least one child item to be selected.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled when the select operation ends.
         * @memberof UIAPro.SelectionPattern#
         */
        isSelectionRequired: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.IsSelectionRequired();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "isSelectionRequired" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    }
};

module.exports.SelectionPattern = SelectionPattern;