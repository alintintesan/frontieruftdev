// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * The possible states of a collapsible element.
 * @typedef {UIAPro.ExpandCollapseState} ExpandCollapseState
 * 
 * @property {string} collapsed No child nodes, controls, or content of the UI Automation element are displayed.
 * @property {string} expanded All child nodes, controls or content of the UI Automation element are displayed.
 * @property {string} partiallyExpanded Some, but not all, child nodes, controls, or content of the UI Automation element are displayed.
 * @property {string} leafNode The UI Automation element has no child nodes, controls, or content to display.
 */
var ExpandCollapseState = {
    /**
     * @type {string}
     */
    collapsed: "collapsed",
    /**
     * @type {string}
     */
    expanded: "expanded",
    /**
     * @type {string}
     */
    partiallyExpanded: "partiallyExpanded",
    /**
     * @type {string}
     */
    leafNode: "leafNode",

    /**
     * @ignore
     */
    _convertToExpandCollapseJsSDK: {
        0: "collapsed",
        1: "expanded",
        2: "partiallyExpanded",
        3: "leafNode"
    },

    /**
     * @ignore
     */
    _expandCollapseStateToJsSdk: function (state) {
        return ExpandCollapseState._convertToExpandCollapseJsSDK[state];
    }
};

/**
 * The UIA Pro ExpandCollapse pattern.
 * @class ExpandCollapsePattern
 * @mixes UIAPro.ExpandCollapsePatternBehavior._properties
 * @mixes UIAPro.ExpandCollapsePatternBehavior._methods
 * @memberof UIAPro
 */
function ExpandCollapsePattern(owner) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(ExpandCollapsePatternBehavior);
    this._owner = owner;
    this._name = ExpandCollapsePattern.name;
}

ExpandCollapsePattern.prototype = {
    _owner: null
};

/**
 * The methods and properties of ExpandCollapsePattern object.
 * @memberof UIAPro
 * @ignore
 */
var ExpandCollapsePatternBehavior = {
    /**
     * @memberof UIAPro.ExpandCollapsePatternBehavior
     * @ignore
     */
    _properties: {
        /**
         * Retrieves the state of the expander.
         * @function
         * @returns {Promise<ExpandCollapseState>} a promise that is fulfilled with the expanded state.
         * @memberof UIAPro.ExpandCollapsePattern#
         */
        getExpandCollapseState: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetExpandCollapseState().then(function (result) {
                        return ExpandCollapseState._expandCollapseStateToJsSdk(result);
                    });
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getExpandCollapseState" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    },

    /**
     * @memberof UIAPro.ExpandCollapsePatternBehavior
     * @ignore
     */
    _methods: {
        /**
         * Expands the element.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the expand operation ends.
         * @memberof UIAPro.ExpandCollapsePattern#
         */
        expand: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.Expand();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "expand" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Collapses the element.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the collapse operation ends.
         * @memberof UIAPro.ExpandCollapsePattern#
         */
        collapse: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.Collapse();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "collapse" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    }
};

module.exports.ExpandCollapsePattern = ExpandCollapsePattern;
module.exports.ExpandCollapseState = ExpandCollapseState;