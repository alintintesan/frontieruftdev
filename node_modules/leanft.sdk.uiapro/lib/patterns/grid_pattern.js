// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var Core = require("leanft.sdk.core");
var MouseButton = Core.MouseButton;
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * The UIA Pro Grid pattern.
 * @class GridPattern
 * @mixes UIAPro.GridPatternBehavior._properties
 * @mixes UIAPro.GridPatternBehavior._methods
 * @memberof UIAPro
 */
function GridPattern(owner) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(GridPatternBehavior);
    this._owner = owner;
    this._name = GridPattern.name;
}

GridPattern.prototype = {
    _owner: null
};

/**
 * The methods and properties of GridPattern object
 * @memberof UIAPro
 * @ignore
 */
var GridPatternBehavior = {
    /**
     * @memberof UIAPro.GridPatternBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the number of columns in a grid.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns.
         * @memberof UIAPro.GridPattern#
         */
        columnCount: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetColumnCount();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "columnCount" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Returns the total number of rows in a grid.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the total number of rows.
         * @memberof UIAPro.GridPattern#
         */
        rowCount: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetRowCount();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "rowCount" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    },
    _methods: {
        /**
         * Activates (double-clicks) the specified cell in grid.
         * @param {number} row the 0-based ordinal number of the row of interest.
         * @param {number} column the 0-based ordinal number of the column of interest.
         * @function
         * @returns {Promise<void>}
         * @memberof UIAPro.GridPattern#
         */
        activateCell: function (row, column) {
            if (row === null)
                throw new Error("ArgumentException: row is required.");
            if (column === null)
                throw new Error("ArgumentException: column is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.ActivateCell(row, column);
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "activateCell" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },

        /**
         * Selects a cell in addition to previously selected cells.
         * @param {number} row the 0-based ordinal number of the row of interest.
         * @param {number} column the 0-based ordinal number of the column of interest.
         * @function
         * @returns {Promise<void>}
         * @memberof UIAPro.GridPattern#
         */
        addCellToSelection: function (row, column) {
            if (row === null)
                throw new Error("ArgumentException: row is required.");
            if (column === null)
                throw new Error("ArgumentException: column is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.AddCellToSelection(row, column);
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "addCellToSelection" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },

        /**
         * Selects a row in addition to previously selected rows.
         * @param {number} row the 0-based ordinal number of the row of interest.
         * @function
         * @returns {Promise<void>}
         * @memberof UIAPro.GridPattern#
         */
        addRowToSelection: function (row) {
            if (row === null)
                throw new Error("ArgumentException: row is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.AddRowToSelection(row);
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "addRowToSelection" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },

        /**
         * Clicks a specified cell in grid.
         * @param {number} row the 0-based ordinal number of the row of interest.
         * @param {number} column the 0-based ordinal number of the column of interest.
         * @param {MouseButton} mouseButton the mouse button to be used for this operation.
         * @function
         * @returns {Promise<void>}
         * @memberof UIAPro.GridPattern#
         */
        clickCell: function (row, column, mouseButton) {
            if (row === null)
                throw new Error("ArgumentException: row is required.");
            if (column === null)
                throw new Error("ArgumentException: column is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.ClickCell(row, column, MouseButton._convert(mouseButton));
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "clickCell" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },

        /**
         * Retrieves a UIAPro cell object representing an item in the grid.
         * @param {number} row the 0-based ordinal number of the row of interest.
         * @param {number} column the 0-based ordinal number of the column of interest.
         * @function
         * @returns {Promise<UIAPro.UiObject>} a promise that is fulfilled with an UIAPro cell object.
         * @memberof UIAPro.GridPattern#
         */
        getCell: function (row, column) {
            if (row === null)
                throw new Error("ArgumentException: row is required.");
            if (column === null)
                throw new Error("ArgumentException: column is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetCell(row, column);
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getCell" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },

        /**
         * Retrieves the name of a cell in the grid.
         * @param {number} row the 0-based ordinal number of the row of interest.
         * @param {number} column the 0-based ordinal number of the column of interest.
         * @function
         * @returns {Promise<string>}
         * @memberof UIAPro.GridPattern#
         */
        getCellName: function (row, column) {
            if (row === null)
                throw new Error("ArgumentException: row is required.");
            if (column === null)
                throw new Error("ArgumentException: column is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetCellName(row, column);
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getCellName" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },

        /**
         * Retrieves the text of a cell in the grid.
         * @param {number} row the 0-based ordinal number of the row of interest.
         * @param {number} column the 0-based ordinal number of the column of interest.
         * @function
         * @returns {Promise<string>}
         * @memberof UIAPro.GridPattern#
         */
        getCellText: function (row, column) {
            if (row === null)
                throw new Error("ArgumentException: row is required.");
            if (column === null)
                throw new Error("ArgumentException: column is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetCellText(row, column);
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getCellText" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },

        /**
         * Retrieves the value of a cell in the grid.
         * @param {number} row the 0-based ordinal number of the row of interest.
         * @param {number} column the 0-based ordinal number of the column of interest.
         * @function
         * @returns {Promise<string>}
         * @memberof UIAPro.GridPattern#
         */
        getCellValue: function (row, column) {
            if (row === null)
                throw new Error("ArgumentException: row is required.");
            if (column === null)
                throw new Error("ArgumentException: column is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetCellValue(row, column);
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getCellValue" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },

        /**
         * Selects a cell in the grid.
         * @param {number} row the 0-based ordinal number of the row of interest.
         * @param {number} column the 0-based ordinal number of the column of interest.
         * @function
         * @returns {Promise<void>}
         * @memberof UIAPro.GridPattern#
         */
        selectCell: function (row, column) {
            if (row === null)
                throw new Error("ArgumentException: row is required.");
            if (column === null)
                throw new Error("ArgumentException: column is required.");
            
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.SelectCell(row, column);
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "selectCell" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },

        /**
         * Selects a row in the grid.
         * @param {number} row the 0-based ordinal number of the row of interest.
         * @function
         * @returns {Promise<void>}
         * @memberof UIAPro.GridPattern#
         */
        selectRow: function (row) {
            if (row === null)
                throw new Error("ArgumentException: row is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.SelectRow(row);
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "selectRow" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },

        /**
         * Sets a value of a cell in the grid.
         * @param {number} row the 0-based ordinal number of the row of interest.
         * @param {number} column the 0-based ordinal number of the column of interest.
         * @param {string} value the value to set.
         * @function
         * @returns {Promise<void>}
         * @memberof UIAPro.GridPattern#
         */
        setCellValue: function (row, column, value) {
            if (row === null)
                throw new Error("ArgumentException: row is required.");
            if (column === null)
                throw new Error("ArgumentException: column is required.");
            if (value === null)
                throw new Error("ArgumentException: value is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.SetCellValue(row, column, value);
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "setCellValue" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
    }
};

module.exports.GridPattern = GridPattern;
module.exports.GridPatternBehavior = GridPatternBehavior;