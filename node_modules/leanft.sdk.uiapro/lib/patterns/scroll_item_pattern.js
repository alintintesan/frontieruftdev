// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * The UIA Pro ScrollItem pattern.
 * @class ScrollItemPattern
 * @mixes UIAPro.ScrollItemPatternBehavior._methods
 * @memberof UIAPro
 */
function ScrollItemPattern(owner) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(ScrollItemPatternBehavior);
    this._owner = owner;
    this._name = ScrollItemPattern.name;
}

ScrollItemPattern.prototype = {
    _owner: null
};

/**
 * The methods of ScrollItemPattern object
 * @memberof UIAPro
 * @ignore
 */
var ScrollItemPatternBehavior = {
    /**
     * @memberof UIAPro.ScrollItemPatternBehavior
     * @ignore
     */
    _methods: {
        /**
         * Scrolls the content area in order to display the control within the visible region.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the invoke operation ends.
         * @memberof UIAPro.ScrollItemPattern#
         */
        scrollIntoView: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.ScrollIntoView();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "scrollIntoView" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    }
};

module.exports.ScrollItemPattern = ScrollItemPattern;