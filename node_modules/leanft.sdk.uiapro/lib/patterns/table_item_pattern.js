// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;
var GridItemPatternBehavior = require("./grid_item_pattern.js").GridItemPatternBehavior;
/**
 * The UIA Pro TableItem pattern.
 * @class TableItemPattern
 * @mixes UIAPro.GridItemPatternBehavior._properties
 * @mixes UIAPro.TableItemPatternBehavior._properties
 * @memberof UIAPro
 */
function TableItemPattern(owner) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(GridItemPatternBehavior);
    this._mergeBehavior(TableItemPatternBehavior);
    this._owner = owner;
    this._name = TableItemPattern.name;
}

TableItemPattern.prototype = {
    _owner: null
};

/**
 * The properties of TableItemPattern object
 * @memberof UIAPro
 * @ignore
 */
var TableItemPatternBehavior = {
    /**
     * @memberof UIAPro.TableItemPatternBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the column headers associated with a table item or cell.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the columnHeaders of the object.
         * @memberof UIAPro.TableItemPattern#
         */
        getColumnHeaderItems: function () {
            return this._owner._executeCommand(this._name).then(function (pattern) {
                return pattern.GetColumnHeaderItems().then(function (result) {
                    if (result === null)
                        throw new Error("Headers result could not be processed.");

                    return result.Count().then(function (count) {
                        var columnHeaderItems = [];

                        if (count === null) {
                            throw new Error("Headers result could not be processed.");
                        }

                        for (var i = 0; i < count; i++) {
                            columnHeaderItems.push(result.Item(i));
                        }

                        return columnHeaderItems;
                    });
                });
            });
        },
        /**
         * Returns the row headers associated with a table item or cell.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the rowHeaders of the object.
         * @memberof UIAPro.TableItemPattern#
         */
        getRowHeaderItems: function () {
            return this._owner._executeCommand(this._name).then(function (pattern) {
                return pattern.GetRowHeaderItems().then(function (result) {
                    if (result === null)
                        throw new Error("Headers result could not be processed.");

                    return result.Count().then(function (count) {
                        var rowHeaderItems = [];

                        if (count === null) {
                            throw new Error("Headers result could not be processed.");
                        }

                        for (var i = 0; i < count; i++) {
                            rowHeaderItems.push(result.Item(i));
                        }

                        return rowHeaderItems;
                    });
                });
            });
        }
    }
};

module.exports.TableItemPattern = TableItemPattern;