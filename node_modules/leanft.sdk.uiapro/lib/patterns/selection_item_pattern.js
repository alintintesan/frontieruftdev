// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;
var Convert = Core.Convert;

/**
 * The UIA Pro SelectionItem pattern used for individual items in selection container controls such as list boxes and combo boxes.
 * @class SelectionItemPattern
 * @mixes UIAPro.SelectionItemPatternBehavior._properties
 * @mixes UIAPro.SelectionItemPatternBehavior._methods
 * @memberof UIAPro
 */
function SelectionItemPattern(owner) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(SelectionItemPatternBehavior);
    this._owner = owner;
    this._name = SelectionItemPattern.name;
}

SelectionItemPattern.prototype = {
    _owner: null
};

/**
 * The methods and properties of SelectionItemPattern object
 * @memberof UIAPro
 * @ignore
 */
var SelectionItemPatternBehavior = {
    /**
     * @memberof UIAPro.SelectionItemPatternBehavior
     * @ignore
     */
    _properties: {
        /**
         * Checks if an item is selected.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object is selected or not.
         * @memberof UIAPro.SelectionItemPattern#
         */
        isSelected: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.IsSelected();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "isSelected" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    },

    /**
     * @memberof UIAPro.SelectionItemPatternBehavior
     * @ignore
     */
    _methods: {
        /**
         * Deselects any selected items and then selects the current element.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         * @memberof UIAPro.SelectionItemPattern#
         */
        select: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.Select();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "select" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Adds the current element to the collection of selected items.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the addToSelection operation ends.
         * @memberof UIAPro.SelectionItemPattern#
         */
        addToSelection: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.AddToSelection();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "addToSelection" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Removes the current element from the collection of selected items.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the removeFromSelection operation ends.
         * @memberof UIAPro.SelectionItemPattern#
         */
        removeFromSelection: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.RemoveFromSelection();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "removeFromSelection" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    }
};

module.exports.SelectionItemPattern = SelectionItemPattern;