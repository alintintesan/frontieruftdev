// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * Contains values that specify whether a text provider supports selection and, if so, whether it supports a single, continuous selection or multiple, disjointed selections.
 * @typedef {UIAPro.SupportedTextSelection} SupportedTextSelection
 * @property {string} multiple Supports multiple, disjoint text selections.
 * @property {string} none Does not support text selections.
 * @property {string} single Supports a single, continuous text selection.
 * @memberof UIAPro
 */
var SupportedTextSelection = {
    /**
     * @type {string}
     */
    multiple: "multiple",
    /**
     * @type {string}
     */
    none: "none",
    /**
     * @type {string}
     */
    single: "single",

    /**
     * @ignore
     */
    _supportedTextSelectionToNative: {
        single: 1,
        multiple: 2,
        none: 0
    },

    /**
     * @ignore
     */
    _nativeToSupportedTextSelection: {
        0: "none",
        1: "single",
        2: "multiple"
    },
    /**
     * @param {UIAPro.SupportedTextSelection} textSelection
     * @returns {*}
     * @ignore
     */
    _convertToNative: function (textSelection) {
        return SupportedTextSelection._supportedTextSelectionToNative[textSelection.toLowerCase()];
    },
    /**
     * @param {number} textSelection
     * @returns {*}
     * @ignore
     */
    _convertToSupportedTextSelection: function (textSelection) {
        return SupportedTextSelection._nativeToSupportedTextSelection[textSelection];
    }
};

/**
 * Represents pre-defined units of text for the purposes of navigation within a document.
 * @typedef {UIAPro.TextUnit} TextUnit
 * @property {string} line Specifies that the text unit is one line in length.
 * @property {string} page Specifies that the text unit is one document-specific page in length.
 * @memberof UIAPro
 */
var TextUnit = {
    /**
     * @type {string}
     */
    line: "line",
    /**
     * @type {string}
     */
    page: "page",

    /**
     * @ignore
     */
    _textUnitToNative: {
        line: 0,
        page: 1,
    },

    /**
     * @param {UIAPro.TextUnit} textUnit
     * @returns {*}
     * @ignore
     */
    _convertToNative: function (textUnit) {
        return TextUnit._textUnitToNative[textUnit.toLowerCase()];
    }
};

/**
 * Represents pre-defined units of direction for the purposes of navigation within a document.
 * @typedef {UIAPro.Direction} Direction
 * @property {string} forward Specifies that the direction is forward.
 * @property {string} backward Specifies that the direction is backward.
 * @memberof UIAPro
 */
var Direction = {
    /**
     * @type {string}
     */
    forward: "forward",
    /**
     * @type {string}
     */
    backward: "backward",

    /**
     * @ignore
     */
    _directionToNative: {
        forward: 0,
        backward: 1,
    },

    /**
     * @param {UIAPro.Direction} direction
     * @returns {*}
     * @ignore
     */
    _convertToNative: function (direction) {
        return Direction._directionToNative[direction.toLowerCase()];
    }
};

/**
 * Represents pre-defined units of alignment.
 * @typedef {UIAPro.Alignment} Alignment
 * @property {string} top Specifies that the alignment is on the top.
 * @property {string} bottom Specifies that the alignment is on the bottom.
 * @memberof UIAPro
 */
var Alignment = {
    /**
     * @type {string}
     */
    top: "top",
    /**
     * @type {string}
     */
    bottom: "bottom",

    /**
     * @ignore
     */
    _alignmentToNative: {
        top: 0,
        bottom: 1,
    },

    /**
     * @param {UIAPro.Alignment} alignment
     * @returns {*}
     * @ignore
     */
    _convertToNative: function (alignment) {
        return Alignment._alignmentToNative[alignment.toLowerCase()];
    }
};

/**
 * The UIA Pro Text pattern.
 * @class TextPattern
 * @mixes UIAPro.TextPatternBehavior._properties
 * @memberof UIAPro
 */
function TextPattern(owner) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(TextPatternBehavior);
    this._owner = owner;
    this._name = TextPattern.name;
}

TextPattern.prototype = {
    _owner: null
};

/**
 * The properties of TextPattern object
 * @memberof UIAPro
 * @ignore
 */
var TextPatternBehavior = {
    /**
     * @memberof UIAPro.TextPatternBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the object text.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's text.
         * @memberof UIAPro.TextPattern#
         */
        text: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetText();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "text" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Returns the visible object text.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's visible text.
         * @memberof UIAPro.TextPattern#
         */
        visibleText: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetVisibleText();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "visibleText" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Gets the object's selected text, or an empty string if no text is selected.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's visible text.
         * @memberof UIAPro.TextPattern#
         */
        selection: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetSelection();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "selection" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Returns the string that specifies what type of selection the text provider supports.
         * @function
         * @returns {Promise<UIAPro.SupportedTextSelection>} a promise that is fulfilled with the supportedTextSelection of the object.
         * @memberof UIAPro.TextPattern#
         */
        supportedTextSelection: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetSupportedSelectionMode().then(function (result) {
                        return SupportedTextSelection._convertToSupportedTextSelection(result);
                    });
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "supportedTextSelection" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    },
    /**
     * @memberof UIAPro.TextPatternBehavior
     * @ignore
     */
    _methods: {
        /**
         * Clears any text selections in the object.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         * @memberof UIAPro.TextPatternBehavior#
         */
        clearSelection: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.ClearSelection();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "clearSelection" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Scrolls into view.
         * @function
         * @param {number} numberOfUnits 0-based index.
         * @param {TextUnit} unitType default 'line'.
         * @param {Direction} direction default 'forward'.
         * @param {Alignment} alignment default 'top'.
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         * @memberof UIAPro.TextPatternBehavior#
         */
        scrollIntoView: function (numberOfUnits, unitType, direction, alignment) {
            if (!unitType) unitType = "line";
            if (!direction) direction = "forward";
            if (!alignment) alignment = "top";

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.ScrollIntoView(
                        numberOfUnits,
                        TextUnit._convertToNative(unitType),
                        Direction._convertToNative(direction),
                        Alignment._convertToNative(alignment)
                    );
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "scrollIntoView" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Selects the specified text in the object.
         * @function
         * @param {number} start 0 based index position of the selection begin.
         * @param {number} length number of characters to be selected. If not specified all remaining text will be selected, default null.
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         * @memberof UIAPro.TextPatternBehavior#
         */
        select: function (start, length) {
            if (!length) length = null;

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.Select(start, length);
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "select" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Selects all of the object’s text.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         * @memberof UIAPro.TextPatternBehavior#
         */
        selectAll: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.SelectAll();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "selectAll" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
    }
};

module.exports.TextPattern = TextPattern;
module.exports.SupportedTextSelection = SupportedTextSelection;
module.exports.TextUnit = TextUnit;
module.exports.Direction = Direction;
module.exports.Alignment = Alignment;