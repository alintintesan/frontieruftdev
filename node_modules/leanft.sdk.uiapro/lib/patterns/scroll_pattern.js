// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * Contains values used by {@link UIAPro.ScrollPattern} to indicate the direction and distance to scroll.
 * @typedef {UIAPro.ScrollAmount} ScrollAmount
 * @property {string} smallIncrement  Specifies that scrolling is done in small increments, equivalent to pressing an
 * arrow key or clicking the arrow button on a scrollbar.
 * @property {string} largeIncrement Specifies that scrolling is done in large increments, equivalent to a PageDown or
 * clicking on the track of a scrollbar component.
 * If a PageDown is not a relevant amount for the control and/or no scrollbar exists, the value represents an amount
 * equal to the current visible region.
 * @property {string} smallDecrement Specifies that scrolling is done in small decrements, equivalent to pressing an
 * arrow key or clicking the arrow button on a scrollbar.
 * @property {string} largeDecrement Specifies that scrolling is done in large decrements, equivalent to PageUp
 * or clicking on a blank part of a scrollbar.
 * If PageUp is not a relevant amount for the control and/or no scrollbar exists, the value represents an amount
 * equal to the current visible window.
 *
 * @memberof UIAPro
 */
var ScrollAmount = {
    /**
     * @type {string}
     */
    smallIncrement: "smallIncrement",
    /**
     * @type {string}
     */
    largeIncrement: "largeIncrement",
    /**
     * @type {string}
     */
    smallDecrement: "smallDecrement",
    /**
     * @type {string}
     */
    largeDecrement: "largeDecrement",
    /**
     * @ignore
     */
    _convertToUFT: {
        smallIncrement: 0,
        largeIncrement: 1,
        smallDecrement: 2,
        largeDecrement: 3
    },

    /**
     * @param {UIAPro.ScrollAmount} amount
     * @returns {*}
     * @ignore
     */
    _convert: function (amount) {
        return ScrollAmount._convertToUFT[amount.toLowerCase()];
    }
};

/**
 * The UIA Pro Scroll pattern.
 * @class ScrollPattern
 * @mixes UIAPro.ScrollPatternBehavior._properties
 * @mixes UIAPro.ScrollPatternBehavior._methods
 * @memberof UIAPro
 */
function ScrollPattern(owner) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(ScrollPatternBehavior);
    this._owner = owner;
    this._name = ScrollPattern.name;
}

ScrollPattern.prototype = {
    _owner: null
};

/**
 * The methods and properties of ScrollPattern object
 * @memberof UIAPro
 * @ignore
 */
var ScrollPatternBehavior = {
    /**
     * @memberof UIAPro.ScrollPatternBehavior
     * @ignore
     */
    _properties: {
        /**
         * Indicates whether the UIA Pro element can scroll horizontally.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object is horizontally scrollable or not.
         * @memberof UIAPro.ScrollPattern#
         */
        canScrollHorizontally: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.CanScrollHorizontally();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "canScrollHorizontally" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Indicates whether the UIA Pro element can scroll vertically.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object is vertically scrollable or not.
         * @memberof UIAPro.ScrollPattern#
         */
        canScrollVertically: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.CanScrollVertically();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "canScrollVertically" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Returns the current vertical view size.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's current vertical view size value.
         * @memberof UIAPro.ScrollPattern#
         */
        getVerticalViewSize: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetVerticalViewSize();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getVerticalViewSize" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Returns the current horizontal view size.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's current horizontal view size value.
         * @memberof UIAPro.ScrollPattern#
         */
        getHorizontalViewSize: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetHorizontalViewSize();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getHorizontalViewSize" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Returns the current vertical scroll position.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's current vertical scroll position value.
         * @memberof UIAPro.ScrollPattern#
         */
        getVerticalScrollPercent: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetVerticalScrollPercent();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getVerticalScrollPercent" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Returns the current horizontal scroll position.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's current horizontal scroll position value.
         * @memberof UIAPro.ScrollPattern#
         */
        getHorizontalScrollPercent: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetHorizontalScrollPercent();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getHorizontalScrollPercent" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    },

    /**
     * @memberof UIAPro.ScrollPatternBehavior
     * @ignore
     */
    _methods: {
        /**
         * Scrolls the view according to the values provided in the parameters.
         * @function
         * @param {ScrollAmount} horizontalAmount the horizontal scroll amount.
         * @param {ScrollAmount} verticalAmount the vertical scroll amount.
         * @returns {Promise<void>} a promise that is fulfilled.
         * @memberof UIAPro.ScrollPattern#
         */
        scroll: function (horizontalAmount, verticalAmount) {
            if (horizontalAmount === null)
                throw new Error("ArgumentException: horizontalAmount is required.");

            if (verticalAmount === null)
                throw new Error("ArgumentException: verticalAmount is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.Scroll(ScrollAmount._convert(horizontalAmount), ScrollAmount._convert(verticalAmount));
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "scroll" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Scrolls the view horizontally according to the value provided in the parameter.
         * @function
         * @param {ScrollAmount} horizontalAmount the horizontal scroll amount.
         * @returns {Promise<void>} a promise that is fulfilled.
         * @memberof UIAPro.ScrollPattern#
         */
        scrollHorizontal: function (horizontalAmount) {
            if (horizontalAmount === null)
                throw new Error("ArgumentException: horizontalAmount is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.ScrollHorizontal(ScrollAmount._convert(horizontalAmount));
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "scrollHorizontal" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Scrolls the view vertically according to the value provided in the parameter.
         * @function
         * @param {ScrollAmount} verticalAmount the vertical scroll amount.
         * @returns {Promise<void>} a promise that is fulfilled.
         * @memberof UIAPro.ScrollPattern#
         */
        scrollVertical: function (verticalAmount) {
            if (verticalAmount === null)
                throw new Error("ArgumentException: verticalAmount is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.ScrollVertical(ScrollAmount._convert(verticalAmount));
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "scrollVertical" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Sets the scroll percent of the view.
         * @function
         * @param {number} horizontalPercent the horizontal scroll percent.
         * @param {number} verticalPercent the vertical scroll percent.
         * @returns {Promise<void>} a promise that is fulfilled.
         * @memberof UIAPro.ScrollPattern#
         */
        setScrollPercent: function (horizontalPercent, verticalPercent) {
            if (horizontalPercent === null)
                throw new Error("ArgumentException: horizontalPercent is required.");

            if (verticalPercent === null)
                throw new Error("ArgumentException: verticalPercent is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.SetScrollPercent(horizontalPercent, verticalPercent);
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "setScrollPercent" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Sets the horizontal scroll percent of the view.
         * @function
         * @param {number} horizontalPercent the horizontal scroll percent.
         * @returns {Promise<void>} a promise that is fulfilled.
         * @memberof UIAPro.ScrollPattern#
         */
        setHorizontalScrollPercent: function (horizontalPercent) {
            if (horizontalPercent === null)
                throw new Error("ArgumentException: horizontalPercent is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.SetHorizontalScrollPercent(horizontalPercent);
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "setHorizontalScrollPercent" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Sets the vertical scroll percent of the view.
         * @function
         * @param {number} verticalPercent the vertical scroll percent.
         * @returns {Promise<void>} a promise that is fulfilled.
         * @memberof UIAPro.ScrollPattern#
         */
        setVerticalScrollPercent: function (verticalPercent) {
            if (verticalPercent === null)
                throw new Error("ArgumentException: verticalPercent is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.SetVerticalScrollPercent(horizontalPercent, verticalPercent);
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "setVerticalScrollPercent" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    }
};

module.exports.ScrollPattern = ScrollPattern;
module.exports.ScrollAmount = ScrollAmount;