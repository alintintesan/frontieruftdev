// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;
var Convert = Core.Convert;

/**
 * Constant values used to specify how an accessible object becomes selected or takes the focus.
 * @typedef {UIAPro.SelectOptions} SelectOptions
 * 
 * @property {string} takeFocus Sets the focus to the object and makes it the selection anchor. Used by itself, this flag does not alter the selection. 
 * The effect is similar to moving the focus manually by pressing an ARROW key while holding down the CTRL key in Windows Explorer or in any multiple-selection list box.
 * 
 * @property {string} takeSelection Selects the object and removes the selection from all other objects in the container. 
 * Unless it is combined with {@link UIAPro.SelectOptions.takeFocus}, this flag does not change the focus or the selection anchor. 
 * The {@link UIAPro.SelectOptions.takeSelection} | {@link UIAPro.SelectOptions.takeFocus} combination is equivalent to single-clicking an item in Windows Explorer.
 * 
 * @property {string} extendSelection Alters the selection so that all objects between the selection anchor and this object take on the anchor object's selection state.
 * If the anchor object is not selected, the objects are removed from the selection.
 * If the anchor object is selected, the selection is extended to include this object and all the objects in between.
 * Set the selection state by combining this flag with {@link UIAPro.SelectOptions.addSelection} or {@link UIAPro.SelectOptions.removeSelection}.
 * Unless it is combined with {@link UIAPro.SelectOptions.takeFocus}, this flag does not change the focus or the selection anchor.
 * The {@link UIAPro.SelectOptions.extendSelection} | {@link UIAPro.SelectOptions.takeFocus} combination is equivalent to adding an item to a selection manually
 * by holding down the SHIFT key and clicking an unselected object in Windows Explorer.
 * This flag is not combined with {@link UIAPro.SelectOptions.takeSelection}.
 * 
 * @property {string} addSelection Adds the object to the current selection; possible result is a noncontiguous selection.
 * Unless it is combined with {@link UIAPro.SelectOptions.takeFocus}, this flag does not change the focus or the selection anchor.
 * The {@link UIAPro.SelectOptions.addSelection} | {@link UIAPro.SelectOptions.takeFocus} combination is equivalent to adding an item to a selection
 * manually by holding down the CTRL key and clicking an unselected object in Windows Explorer.
 * This flag is not combined with {@link UIAPro.SelectOptions.removeSelection} or {@link UIAPro.SelectOptions.takeSelection}.
 * 
 * @property {string} removeSelection Removes the object from the current selection; possible result is a noncontiguous selection.
 * Unless it is combined with {@link UIAPro.SelectOptions.takeFocus}, this flag does not change the focus or the selection anchor.
 * The {@link UIAPro.SelectOptions.removeSelection} | {@link UIAPro.SelectOptions.takeFocus} combination is equivalent to removing an item from a selection manually,
 * by holding down the CTRL key while clicking a selected object in Windows Explorer.
 * This flag is not combined with {@link UIAPro.SelectOptions.addSelection} or {@link UIAPro.SelectOptions.takeSelection}.
 * 
 * @memberof UIAPro
 */
var SelectOptions = {
    /**
     * @type {string}
     */
    takeFocus: "takeFocus",

    /**
     * @type {string}
     */
    takeSelection: "takeSelection",

    /**
     * @type {string}
     */
    extendSelection: "extendSelection",

    /**
     * @type {string}
     */
    addSelection: "addSelection",

    /**
     * @type {string}
     */
    removeSelection: "removeSelection",

    /**
     * @ignore
     */
    _selectOptionsToNative: {
        takeFocus: 0x1,
        takeSelection: 0x2,
        extendSelection: 0x4,
        addSelection: 0x8,
        removeSelection: 0x10,
    },

    /**
     * @param {UIAPro.SelectOptions} option
     * @returns {*}
     * @ignore
     */
    _convertToNative: function (option) {
        return SelectOptions._selectOptionsToNative[option];
    }
};

/**
 * Describe the roles of various UI objects in an application.
 * @typedef {UIAPro.AccessibleRole} AccessibleRole
 * 
 * @property {string} titleBar The object represents a title or caption bar for a window.
 * 
 * @property {string} menuBar The object represents the menu bar (positioned beneath the title bar of a window) from which users select menus.
 * 
 * @property {string} scrollBar The object represents a vertical or horizontal scroll bar, which is part of the client area or is used in a control.
 * 
 * @property {string} grip The object represents a special mouse pointer that allows a user to manipulate user interface elements such as windows.
 * One example of this involves resizing a window by dragging its lower-right corner.
 * 
 * @property {string} sound The object represents a system sound, which is associated with various system events.
 * 
 * @property {string} cursor The object represents the system's mouse pointer.
 * 
 * @property {string} caret The object represents the system's caret.
 * 
 * @property {string} alert The object represents an alert or a condition that a user should be notified about. 
 * This role is used only for objects that embody an alert but are not associated with another user interface element, such as a message box, graphic, text, or sound.
 * 
 * @property {string} window The object represents the window frame, which contains child objects such as a title bar, client, and other objects of a window.
 * 
 * @property {string} client The object represents a window's client area. 
 * Microsoft Active Accessibility uses this role as a default if there is a question about the role of a UI element.
 * 
 * @property {string} menuPopup The object represents a menu: a list of options, each with a specific action. 
 * All menu types must have a role, including the drop-down menus which are displayed when selected from a menu bar; 
 * and shortcut menus, which are displayed by clicking the right mouse button.
 * 
 * @property {string} menuItem The object represents a menu item: an menu entry that the user can choose to carry out a command, select an option, or display another menu. 
 * Functionally, a menu item is equivalent to a push button, a radio button, a check box, or a menu.
 * 
 * @property {string} toolTip The object represents a tooltip that provides helpful hints.
 * 
 * @property {string} application The object represents a main window for an application.
 * 
 * @property {string} document The object represents a document window. 
 * A document window is always contained within an application window.
 * This role applies only to MDI windows and refers to the object that contains the MDI title bar.
 * 
 * @property {string} pane The object represents a pane within a frame or a document window.
 * Thus, panes represent a grouping level that is lower than frames or document windows, but higher than individual controls.
 * The user navigates between panes by pressing TAB, F6, or CTRL+TAB, depending on the context.
 * 
 * @property {string} chart The object represents a graphical image used to chart data.
 * 
 * @property {string} dialog The object represents a dialog box or message box.
 * 
 * @property {string} border The object represents a window border.
 * The entire border is represented by a single object rather than by separate objects for each side.
 * 
 * @property {string} grouping The object logically groups other objects.
 * There is not always a parent-child relationship between the grouping object and the objects it contains.
 * 
 * @property {string} separator The object is used to visually divide a space into two regions.
 * Examples of separator objects include a separator menu item, and a bar that divides split panes within a window.
 * 
 * @property {string} toolBar The object represents a toolbar, which is a grouping of controls that provides easy access to frequently used features.
 * 
 * @property {string} statusBar The object represents a status bar, which is an area at the bottom of a window and which displays information about the current operation, 
 * state of the application, or selected object. The status bar has multiple fields, which display different kinds of information.
 * 
 * @property {string} table The object represents a table that contains rows and columns of cells, and, optionally, row headers and column headers.
 * 
 * @property {string} columnHeader The object represents a column header, providing a visual label for a column in a table.
 * 
 * @property {string} rowHeader The object represents a row header, which provides a visual label for a table row.
 * 
 * @property {string} column The object represents a column of cells within a table.
 * 
 * @property {string} row The object represents a row of cells within a table.
 * 
 * @property {string} cell The object represents a cell within a table.
 * 
 * @property {string} link The object represents a link to something else. This object might look like text or a graphic, but it acts like a button.
 * 
 * @property {string} helpBalloon The object displays a help topic in the form of a tooltip or help balloon.
 * 
 * @property {string} character The object represents a cartoon-like graphic object, such as Microsoft Office Assistant, which is displayed to provide help to users of an application.
 * 
 * @property {string} list The object represents a list box, allowing the user to select one or more items.
 * 
 * @property {string} listItem The object represents an item in a list box or in the list portion of a combo box, drop-down list box, or drop-down combo box.
 * 
 * @property {string} outline The object represents an outline or a tree structure, such as a tree view control, 
 * that displays a hierarchical list and allows the user to expand and collapse branches.
 * 
 * @property {string} outlineItem The object represents an item that navigates like an outline item.
 * The UP and DOWN ARROW keys are used to navigate through the outline.
 * However, instead of expanding and collapsing when the LEFT and RIGHT ARROW key is pressed, 
 * these menus expand or collapse when the SPACEBAR or ENTER key is pressed and the item has focus. 
 * 
 * @property {string} pageTab The object represents a page tab. The only child of a page tab control is a ROLE_SYSTEM_GROUPING object that has the contents of the associated page.
 * 
 * @property {string} propertyPage The object represents a property sheet.
 * 
 * @property {string} indicator The object represents an indicator, such as a pointer graphic, that points to the current item.
 * 
 * @property {string} graphic The object represents a picture.
 * 
 * @property {string} staticText The object represents read-only text, such as labels for other controls or instructions in a dialog box. Static text cannot be modified or selected.
 * 
 * @property {string} text The object represents selectable text that allows edits or is designated as read-only.
 * 
 * @property {string} pushButton The object represents a push-button control.
 * 
 * @property {string} checkButton The object represents a check box control: an option that is selected or cleared independently of other options.
 * 
 * @property {string} radioButton The object represents an option button (formerly, a radio button). It is one of a group of mutually exclusive options.
 * All objects that share the same parent and that have this attribute are assumed to be part of a single mutually exclusive group.
 * To divide these objects into separate groups, use ROLE_SYSTEM_GROUPING objects.
 * 
 * @property {string} comboBox The object represents a combo box: an edit control with an associated list box that provides a set of predefined choices.
 * 
 * @property {string} dropList The object represents the calendar control, SysDateTimePick32.
 * The Microsoft Active Accessibility runtime component uses this role to indicate that either a date or a calendar control has been found.
 * 
 * @property {string} progressBar The object represents a progress bar, which dynamically shows how much of an operation in progress has completed. This control takes no user input.
 * 
 * @property {string} dial The object represents a dial or knob.
 * 
 * @property {string} hotKeyField The object represents a keyboard shortcut field that allows the user to enter a combination or sequence of keystrokes.
 * 
 * @property {string} slider The object represents a slider, which allows the user to adjust a setting in particular increments between minimum and maximum values.
 * 
 * @property {string} spinButton The object represents a spin box, 
 * which is a control that allows the user to increment or decrement the value displayed in a separate "buddy" control that is associated with the spin box.
 * 
 * @property {string} diagram The object represents a graphical image that is used to diagram data.
 * 
 * @property {string} animation The object represents an animation control whose content changes over time, such as a control that displays a series of bitmap frames.
 * Animation controls are displayed when files are copied or when some other time-consuming task is performed.
 * 
 * @property {string} equation The object represents a mathematical equation.
 * 
 * @property {string} buttonDropDown The object represents a button that expands a list of items.
 * 
 * @property {string} buttonMenu The object represents a button that expands a menu.
 * 
 * @property {string} buttonDropDownGrid The object represents a button that expands a grid.
 * 
 * @property {string} whiteSpace The object represents blank space between other objects.
 * 
 * @property {string} pageTabList The object represents a container of page tab controls.
 * 
 * @property {string} clock The object represents a control that displays time.
 * 
 * @property {string} splitButton The object represents a button on a toolbar that has a drop-down list icon that is directly adjacent to the button.
 * 
 * @property {string} ipAddress The object represents an edit control that is designed for an IP address.
 * The edit control is divided into sections, each for a specific part of the IP address.
 * 
 * @property {string} outlineButton The object represents an item that navigates like an outline item.
 * The UP and DOWN ARROW keys are used to navigate through the outline.
 * However, instead of expanding and collapsing when the LEFT and RIGHT ARROW key is pressed, 
 * these menus expand or collapse when the SPACEBAR or ENTER key is pressed and the item has focus. 
 * 
 * @memberof UIAPro
 */
var AccessibleRole = {
    /**
     * @type {string}
     */
    titleBar: "titleBar",

    /**
     * @type {string}
     */
    menuBar: "menuBar",

    /**
     * @type {string}
     */
    scrollBar: "scrollBar",

    /**
     * @type {string}
     */
    grip: "grip",

    /**
     * @type {string}
     */
    sound: "sound",

    /**
     * @type {string}
     */
    cursor: "cursor",

    /**
     * @type {string}
     */
    caret: "caret",

    /**
     * @type {string}
     */
    prop: "prop",

    /**
     * @type {string}
     */
    alert: "alert",

    /**
     * @type {string}
     */
    window: "window",

    /**
     * @type {string}
     */
    client: "client",

    /**
     * @type {string}
     */
    menuPopup: "menuPopup",

    /**
     * @type {string}
     */
    menuItem: "menuItem",

    /**
     * @type {string}
     */
    application: "application",

    /**
     * @type {string}
     */
    document: "document",

    /**
     * @type {string}
     */
    pane: "pane",

    /**
     * @type {string}
     */
    chart: "chart",

    /**
     * @type {string}
     */
    dialog: "dialog",

    /**
     * @type {string}
     */
    border: "border",

    /**
     * @type {string}
     */
    grouping: "grouping",

    /**
     * @type {string}
     */
    separator: "separator",

    /**
     * @type {string}
     */
    toolBar: "toolBar",

    /**
     * @type {string}
     */
    statusBar: "statusBar",

    /**
     * @type {string}
     */
    table: "table",

    /**
     * @type {string}
     */
    columnHeader: "columnHeader",

    /**
     * @type {string}
     */
    rowHeader: "rowHeader",

    /**
     * @type {string}
     */
    column: "column",

    /**
     * @type {string}
     */
    row: "row",

    /**
     * @type {string}
     */
    cell: "cell",

    /**
     * @type {string}
     */
    link: "link",

    /**
     * @type {string}
     */
    helpBalloon: "helpBalloon",

    /**
     * @type {string}
     */
    character: "character",

    /**
     * @type {string}
     */
    list: "list",

    /**
     * @type {string}
     */
    listItem: "listItem",

    /**
     * @type {string}
     */
    outline: "outline",

    /**
     * @type {string}
     */
    outlineItem: "outlineItem",

    /**
     * @type {string}
     */
    pageTab: "pageTab",

    /**
     * @type {string}
     */
    propertyPage: "propertyPage",

    /**
     * @type {string}
     */
    indicator: "indicator",

    /**
     * @type {string}
     */
    graphic: "graphic",

    /**
     * @type {string}
     */
    staticText: "staticText",

    /**
     * @type {string}
     */
    text: "text",

    /**
     * @type {string}
     */
    pushButton: "pushButton",

    /**
     * @type {string}
     */
    checkButton: "checkButton",

    /**
     * @type {string}
     */
    radioButton: "radioButton",

    /**
    * @type {string}
    */
    comboBox: "comboBox",

    /**
   * @type {string}
   */
    dropList: "dropList",

    /**
    * @type {string}
    */
    progressBar: "progressBar",

    /**
   * @type {string}
   */
    dial: "dial",

    /**
    * @type {string}
    */
    hotKeyField: "hotKeyField",

    /**
   * @type {string}
   */
    slider: "slider",

    /**
    * @type {string}
    */
    spinButton: "spinButton",

    /**
   * @type {string}
   */
    diagram: "diagram",

    /**
    * @type {string}
    */
    animation: "animation",

    /**
   * @type {string}
   */
    equation: "equation",

    /**
    * @type {string}
    */
    buttonDropDown: "buttonDropDown",

    /**
    * @type {string}
    */
    buttonMenu: "buttonMenu",

    /**
    * @type {string}
    */
    buttonDropDownGrid: "buttonDropDownGrid",

    /**
    * @type {string}
    */
    whiteSpace: "whiteSpace",

    /**
    * @type {string}
    */
    pageTabList: "pageTabList",

    /**
    * @type {string}
    */
    clock: "clock",

    /**
    * @type {string}
    */
    splitButton: "splitButton",

    /**
    * @type {string}
    */
    ipAddress: "ipAddress",

    /**
    * @type {string}
    */
    outlineButton: "outlineButton",

    /**
     * @ignore
     */
    _nativeToAccessibleRole: {
        1: "titleBar",
        2: "menuBar",
        3: "scrollBar",
        4: "grip",
        5: "sound",
        6: "cursor",
        7: "caret",
        8: "alert",
        9: "window",
        10: "client",
        11: "menuPopup",
        12: "menuItem",
        13: "toolTip",
        14: "application",
        15: "document",
        16: "pane",
        17: "chart",
        18: "dialog",
        19: "border",
        20: "grouping",
        21: "separator",
        22: "toolBar",
        23: "statusBar",
        24: "table",
        25: "columnHeader",
        26: "rowHeader",
        27: "column",
        28: "row",
        29: "cell",
        30: "link",
        31: "helpBalloon",
        32: "character",
        33: "list",
        34: "listItem",
        35: "outline",
        36: "outlineItem",
        37: "pageTab",
        38: "propertyPage",
        39: "indicator",
        40: "graphic",
        41: "staticText",
        42: "text",
        43: "pushButton",
        44: "checkButton",
        45: "radioButton",
        46: "comboBox",
        47: "dropList",
        48: "progressBar",
        49: "dial",
        50: "hotKeyField",
        51: "slider",
        52: "spinButton",
        53: "diagram",
        54: "animation",
        55: "equation",
        56: "buttonDropDown",
        57: "buttonMenu",
        58: "buttonDropDownGrid",
        59: "whiteSpace",
        60: "pageTabList",
        61: "clock",
        62: "splitButton",
        63: "ipAddress",
        64: "outlineButton"
    },

    /**
     * @param {AccessibleRole} role
     * @returns {*}
     * @ignore
     */
    _convertToAccessibleRole: function (role) {
        return AccessibleRole._nativeToAccessibleRole[role];
    }
};

/**
 * Describe the state of objects in an application UI.
 * @typedef {UIAPro.AccessibleRole} AccessibleState
 * 
 * @property {string} unavailable The object is unavailable.
 * 
 * @property {string} selected The object is selected.
 * 
 * @property {string} focused The object has the keyboard focus.
 * Do not confuse object focus with object selection.
 * For more information, see Selection and Focus Properties and Methods. 
 * For objects with this object state, send the EVENT_OBJECT_SHOW or EVENT_OBJECT_HIDE WinEvents to notify client applications about state changes. 
 * Do not use EVENT_OBJECT_STATECHANGE.
 * 
 * @property {string} pressed The object is pressed.
 * 
 * @property {string} checked The object's check box is selected.
 * 
 * @property {string} mixed Indicates that the state of a three-state check box or toolbar button is not determined.
 * The check box is neither selected nor cleared and is therefore in the third or mixed state.
 * 
 * @property {string} readOnly The object is designated read-only.
 * 
 * @property {string} hotTracked The object is hot-tracked by the mouse, which means that the object's appearance has changed to indicate that the mouse pointer is located over it.
 * 
 * @property {string} default This state represents the default button in a window.
 * 
 * @property {string} expanded The object's children that have the {@link UIAPro.AccessibleRole.outlineItem} role are displayed.
 * 
 * @property {string} collapsed The object's children that have the {@link UIAPro.AccessibleRole.outlineItem} role are hidden.
 * 
 * @property {string} busy The control cannot accept input at this time.
 * 
 * @property {string} floating The object is not clipped to the boundary of its parent object, and it does not move automatically when the parent moves.
 * 
 * @property {string} marqueed The object represents a main window for an application.
 * 
 * @property {string} animated The object's appearance changes rapidly or constantly.
 * Graphics that are animated occasionally are described as {@link UIAPro.AccessibleRole.graphic} with the State property set to {@link UIAPro.AccessibleState.animated}.
 * This state is used to indicate that the object's location is changing.
 * 
 * @property {string} invisible The object is programmatically hidden.
 * For example, menu itmes are programmatically hidden until a user activates the menu.
 * Because objects with this state are not available to users, client applications must not communicate information about the object to users.
 * However, if client applications find an object with this state, they should check whether {@link UIAPro.AccessibleState.offScreen} is also set.
 * If this second state is defined, clients can communicate the information about the object to users.
 * For example, a list box can have both {@link UIAPro.AccessibleState.invisible} and {@link UIAPro.AccessibleState.offScreen} set.
 * In this case, the client application can communicate all items in the list to users.
 * If a client application is navigating through an IAccessible tree and encounters a parent object that is invisible,
 * Microsoft Active Accessibility will not expose information about any possible children of the parent as long as the parent is invisible.
 * 
 * @property {string} offScreen The object is clipped or has scrolled out of view, but it is not programmatically hidden.
 * If the user makes the viewport larger, more of the object will be visible on the computer screen.
 * 
 * @property {string} sizeable The object can be resized. For example, a user could change the size of a window by dragging it by the border.
 * 
 * @property {string} moveable Indicates that the object can be moved.
 * For example, a user can click the object's title bar and drag the object to a new location.
 * 
 * @property {string} selfVoicing The object or child uses text-to-speech (TTS) technology for description purposes.
 * When an object with this state has the focus, a speech-based accessibility aid does not announce information because the object automatically announces it.
 * 
 * @property {string} focusable The object is on the active window and is ready to receive keyboard focus.
 * 
 * @property {string} selectable The object accepts selection.
 * 
 * @property {string} linked Indicates that the object is formatted as a hyperlink. The object's role will usually be {@link UIAPro.AccessibleRole.text}.
 * 
 * @property {string} traversed The object is a hyperlink that has been visited (previously clicked) by a user.
 * 
 * @property {string} multiSelectable Indicates that the object accepts multiple selected items; that is, {@link UIAPro.SelectOptions.addSelection} for the IAccessible::accSelect method is valid.
 * 
 * @property {string} extendSelectable Indicates that an object extends its selection by using {@link UIAPro.SelectOptions.extendSelection} in the IAccessible::accSelect method.
 * 
 * @property {string} alertLow Indicates low-priority information that is not important to the user.
 * This state is used, for example, when Word changes the appearance of the TipWizard button on its toolbar to indicate that it has a hint for the user.
 * 
 * @property {string} alertMedium Indicates important information that is not conveyed immediately to the user.
 * For example, when a battery is starting to reach a low level, a level indicator generates a medium-level alert.
 * A blind access tool then generates a sound to let the user know that important information is available, without actually interrupting the user's work.
 * The user could then query the alert information when convenient.
 * 
 * @property {string} alertHigh Indicates important information to be immediately conveyed to the user.
 * For example, when a battery reaches a critically low level, a level indicator generates a high-level alert.
 * As a result, a blind access tool immediately announces this information to the user, and a screen magnification program scrolls the screen so that the battery indicator is in view.
 * This state is also appropriate for any prompt or operation that must be completed before the user can continue.
 * 
 * @property {string} protected The object is a password-protected edit control.
 * 
 * @memberof UIAPro
 */
var AccessibleState = {
    /**
     * @type {string}
     */
    unavailable: "unavailable",

    /**
     * @type {string}
     */
    selected: "selected",

    /**
     * @type {string}
     */
    focused: "focused",

    /**
     * @type {string}
     */
    pressed: "pressed",

    /**
     * @type {string}
     */
    checked: "checked",

    /**
     * @type {string}
     */
    mixed: "mixed",

    /**
     * @type {string}
     */
    readOnly: "readOnly",

    /**
     * @type {string}
     */
    hotTracked: "hotTracked",

    /**
     * @type {string}
     */
    default: "default",

    /**
     * @type {string}
     */
    expanded: "expanded",

    /**
     * @type {string}
     */
    collapsed: "collapsed",

    /**
     * @type {string}
     */
    busy: "busy",

    /**
     * @type {string}
     */
    floating: "floating",

    /**
     * @type {string}
     */
    marqueed: "marqueed",

    /**
     * @type {string}
     */
    animated: "animated",

    /**
     * @type {string}
     */
    invisible: "invisible",

    /**
     * @type {string}
     */
    offScreen: "offScreen",

    /**
     * @type {string}
     */
    sizeable: "sizeable",

    /**
     * @type {string}
     */
    moveable: "moveable",

    /**
     * @type {string}
     */
    selfVoicing: "selfVoicing",

    /**
     * @type {string}
     */
    focusable: "focusable",

    /**
     * @type {string}
     */
    selectable: "selectable",

    /**
     * @type {string}
     */
    linked: "linked",

    /**
     * @type {string}
     */
    traversed: "traversed",

    /**
     * @type {string}
     */
    multiSelectable: "multiSelectable",

    /**
     * @type {string}
     */
    extendSelectable: "extendSelectable",

    /**
     * @type {string}
     */
    alertLow: "alertLow",

    /**
     * @type {string}
     */
    alertMedium: "alertMedium",

    /**
     * @type {string}
     */
    alertHigh: "alertHigh",

    /**
     * @type {string}
     */
    protected: "protected",

    /**
     * @ignore
     */
    _nativeToAccessibleState: {
        0x00000001: "unavailable",
        0x00000002: "selected",
        0x00000004: "focused",
        0x00000008: "pressed",
        0x00000010: "checked",
        0x00000020: "mixed",
        0x00000040: "readOnly",
        0x00000080: "hotTracked",
        0x00000100: "default",
        0x00000200: "expanded",
        0x00000400: "collapsed",
        0x00000800: "busy",
        0x00001000: "floating",
        0x00002000: "marqueed",
        0x00004000: "animated",
        0x00008000: "invisible",
        0x00010000: "offScreen",
        0x00020000: "sizeable",
        0x00040000: "moveable",
        0x00080000: "selfVoicing",
        0x00100000: "focusable",
        0x00200000: "selectable",
        0x00400000: "linked",
        0x00800000: "traversed",
        0x01000000: "multiSelectable",
        0x02000000: "extendSelectable",
        0x04000000: "alertLow",
        0x08000000: "alertMedium",
        0x10000000: "alertHigh",
        0x20000000: "protected"
    },

    /**
     * @param {AccessibleState} state
     * @returns {*}
     * @ignore
     */
    _convertToAccessibleState: function (state) {
        return AccessibleState._nativeToAccessibleState[state];
    }
};

/**
 * The UIA Pro Legacy pattern.
 * @class LegacyAccessiblePattern
 * @mixes UIAPro.LegacyAccessiblePatternBehavior._properties
 * @mixes UIAPro.LegacyAccessiblePatternBehavior._methods
 * @memberof UIAPro
 */
function LegacyAccessiblePattern(owner) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(LegacyAccessiblePatternBehavior);
    this._owner = owner;
    this._name = "LegacyIAccessiblePattern";
}

LegacyAccessiblePattern.prototype = {
    _owner: null
};

/**
 * The methods and properties of LegacyAccessiblePattern object
 * @memberof UIAPro
 * @ignore
 */
var LegacyAccessiblePatternBehavior = {
    /**
     * @memberof UIAPro.LegacyAccessiblePatternBehavior
     * @ignore
     */
    _properties: {
        /**
         * Retrieves the Microsoft Active Accessibility child identifier for the current object.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the child id.
         * @memberof UIAPro.LegacyAccessiblePattern#
         */
        getChildId: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetChildId();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getChildId" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Retrieves the Microsoft Active Accessibility default action for the current object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the default action.
         * @memberof UIAPro.LegacyAccessiblePattern#
         */
        getDefaultOperation: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetDefaultOperation();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getDefaultOperation" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Retrieves the Microsoft Active Accessibility description for the current object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the description.
         * @memberof UIAPro.LegacyAccessiblePattern#
         */
        getDescription: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetDescription();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getDescription" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Retrieves the Microsoft Active Accessibility help string for the current object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the help string.
         * @memberof UIAPro.LegacyAccessiblePattern#
         */
        getHelp: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetHelp();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getHelp" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Retrieves the Microsoft Active Accessibility keyboard shortcut for the current object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the keyboard shortcut.
         * @memberof UIAPro.LegacyAccessiblePattern#
         */
        getKeyboardShortcut: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetKeyboardShortcut();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getKeyboardShortcut" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Retrieves the Microsoft Active Accessibility name for the current object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name.
         * @memberof UIAPro.LegacyAccessiblePattern#
         */
        getName: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetName();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getName" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Retrieves the Microsoft Active Accessibility role for the current object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the role.
         * @memberof UIAPro.LegacyAccessiblePattern#
         */
        getRole: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetRole().then(function (result) {
                        return AccessibleRole._convertToAccessibleRole(result);
                    });
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getRole" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Retrieves the Microsoft Active Accessibility state for the current object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the state.
         * @memberof UIAPro.LegacyAccessiblePattern#
         */
        getState: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetState().then(function (result) {
                        return AccessibleState._convertToAccessibleState(result);
                    });
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getState" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Retrieves the Microsoft Active Accessibility value for the current object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the value.
         * @memberof UIAPro.LegacyAccessiblePattern#
         */
        getValue: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.GetValue();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "getValue" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
    },
    /**
     * @memberof UIAPro.LegacyAccessiblePatternBehavior
     * @ignore
     */
    _methods: {
        /**
         * Retrieves the Microsoft Active Accessibility selected children of the current object.
         * @function
         * @returns {Promise<Array<Promise<UiObject>>>} a promise that is fulfilled with an array of promises that consist of the selected items of the object.
         * @memberof UIAPro.LegacyAccessiblePattern#
         */
        getSelectedChildren: function () {
            return this._owner._executeCommand(this._name).then(function (pattern) {
                return pattern.GetSelectedChildren().then(function (result) {
                    if (result === null)
                        throw new Error("Items result could not be processed.");

                    return result.Count().then(function (count) {
                        var selectedChildren = [];

                        if (count === null) {
                            throw new Error("Items result could not be processed.");
                        }

                        for (var i = 0; i < count; i++) {
                            selectedChildren.push(result.Item(i));
                        }

                        return selectedChildren;
                    });
                });
            });
        },
        /**
         * Selects the element.
         * @function
         * @param {SelectOptions} selectOptions The flag to use when selecting the element.
         * @returns {Promise<void>} a promise that is fulfilled.
         * @memberof UIAPro.LegacyAccessiblePattern#
         */
        select: function (selectOptions) {
            if (selectOptions === null)
                throw new Error("ArgumentException: selectOption is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.Select(SelectOptions._convertToNative(selectOptions));
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "select" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Sets the encrypted Microsoft Active Accessibility value for the current object.
         * @function
         * @param {string} value required.
         * @returns {Promise<void>} a promise that is fulfilled.
         * @memberof UIAPro.LegacyAccessiblePattern#
         */
        setSecure: function (value) {
            if (value === null)
                throw new Error("ArgumentException: value is required.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.SetSecureValue(Convert.toString(value));
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "setSecure" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Sets the Microsoft Active Accessibility value for the current object.
         * @function
         * @param {string} value required.
         * @returns {Promise<void>} a promise that is fulfilled.
         * @memberof UIAPro.LegacyAccessiblePattern#
         */
        setValue: function (value) {
            if (value === null)
                throw new Error("You must pass parameter value.");

            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.SetValue(Convert.toString(value));
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "setValue" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        },
        /**
         * Performs the default operation on the control.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled.
         * @memberof UIAPro.LegacyAccessiblePattern#
         */
        performDefaultOperation: function () {
            var self = this;
            var caleeArguments = arguments;

            return this._owner._executeCommand(this._name).then(function (pattern) {
                var patternOperation = function () {
                    return pattern.PerformDefaultOperation();
                };

                var options = { sender: self._owner, onError: true, calleeArguments: caleeArguments, type: "TestObject", name: "performDefaultOperation" };
                return self._owner.notifyWithEvents(patternOperation, arguments, options);
            });
        }
    },
};

module.exports.LegacyAccessiblePattern = LegacyAccessiblePattern;
module.exports.LegacyAccessiblePatternBehavior = LegacyAccessiblePatternBehavior;
module.exports.SelectOptions = SelectOptions;
module.exports.AccessibleRole = AccessibleRole;
module.exports.AccessibleState = AccessibleState;