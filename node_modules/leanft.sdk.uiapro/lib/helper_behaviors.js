// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var StringUtils = Core.StringUtils;
var MouseButton = Core.MouseButton;
var Location = Core.Location;
var StringUtils = Core.StringUtils;

/**
 * @memberof UIAPro
 * @ignore
 */
var FieldDescriptionBehavior = {
    /**
     * Indicates whether this object is read-only.
     * This property is available only if the value and range value patterns are implemented for this object.
     * @param {boolean} [isReadOnly] When provided, this method acts as a setter and sets the isReadOnly value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isReadOnly value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isReadOnly: function (isReadOnly) {
        return this._propertyHandler("isreadonly", isReadOnly, Convert.toBool);
    },
    /**
     * The value of the text in the field.
     * This property is available only if the value and range value patterns are implemented for this object.
     * @param {string} [value] When provided, this method acts as a setter and sets the value value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored value value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    value: function (value) {
        return this._simplePropertyHandler("value", value, Convert.toString);
    }
};

/**
 * @memberof UIAPro
 * @ignore
 */
var FieldInfoBehavior = {
    /**
     * @ignore
     * @memberof UIAPro.FieldInfoBehavior
     */
    _properties: {
        /**
         * Checks if the object is read-only.
         * This property is available only if the value and range value patterns are implemented for this object.
         * @returns {Promise<boolean>} a promise this is fulfilled with an indication of whether this field is read-only.
         * @function
         */
        isReadOnly: {
            wiredName: "isreadonly"
        },
        /**
         * Returns the value of the text in the field.
         * This property is available only if the value and range value patterns are implemented for this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's value.
         */
        value: {
        }
    }
};

/**
 * @memberof UIAPro
 * @ignore
 */
var SelectionDescriptionBehavior = {
    /**
     * Indicates whether the object supports multiple item selection.
     * This property is available only if the selection pattern is implemented for this object.
     * @param {boolean} [canSelectMultiple] When provided, this method acts as a setter and sets the canSelectMultiple value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored canSelectMultiple value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    canSelectMultiple: function (canSelectMultiple) {
        return this._propertyHandler("canselectmultiple", canSelectMultiple, Convert.toBool);
    },
    /**
     * The list of items that are selected in the object.
     * This property is available only if the selection pattern is implemented for this object.
     * @param {string[]} [selectedItems] When provided, this method acts as a setter and sets the selectedItems.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the selectedItems;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedItems: function (selectedItems) {
        return this._propertyHandler("selection", selectedItems, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    }
};

/**
* @memberof UIAPro
* @ignore
*/
var SelectionInfoBehavior = {
    /**
     * @ignore
     * @memberof UIAPro.SelectionInfoBehavior
     */
    _properties: {
        /**
         * Checks if the object supports multiple item selection.
         * This property is available only if the selection pattern is implemented for this object.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object can select multiple items or not.
         */
        canSelectMultiple: {
            wiredName: "canselectmultiple"
        },
        /**
         * Returns the list of items that are selected in the object.
         * This property is available only if the selection pattern is implemented for this object.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the selected items of the object.
         */
        selectedItems: {
            wiredName: "selection",
            getter: function () {
                return this._getROProperty("selection", arguments).then(function (res) {
                    return StringUtils.isNullOrEmpty(res) ? [] : res.split(";");
                });
            }
        }
    }
};

/**
 * @memberof UIAPro
 * @ignore
 */
var ActivateInfoBehavior = {
    /**
     * @ignore
     * @memberof UIAPro.ActivateInfoBehavior
     */
    _methods: {
        /**
         * Activates the object by double-clicking it using the definitions from the supplied args object.
         * If you do not provide the args object, a double-click operation is performed in the center of the object using the left mouse button.
         * @function
         * @param {Object} [args] The arguments for the activate operation.
         * @param {MouseButton} [args.button = MouseButton.left] The mouse button to use for the activate operation.
         * @param {Position} [args.anchor = Position.center] The anchor location within the object.
         * @param {Object} [args.offset] The offset from the anchor position.
         * @param {number} [args.offset.x = 0] The x-coordinate of the offset.
         * @param {number} [args.offset.y = 0] The y-coordinate of the offset.
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         */
        activate: function (args) {
            var options = { executeType: "voidCommand" };
            if (!args) {
                return this._executeWithEventsWithOptions(arguments, options, "Activate", -9999, -9999, MouseButton._convert(MouseButton.left));
            } else {
                var button = args.button || MouseButton.left;
                return this._executeWithEventsWithOptions(arguments, options, "Activate", new Location(args), MouseButton._convert(button));
            }
        }
    }
};

/**
 * @ignore
 * @memberof UIAPro
 */
var HelperFuncs = {
    getItemsFromNativeObject: function (separator) {
        return function (nativeObject) {
            if (nativeObject == null)
                throw new Error("Items result could not be processed.");
            if (nativeObject.Name) {
                return nativeObject.Name.then(function (res) {
                    return StringUtils.isNullOrEmpty(res) ? [] : res.split(separator).filter(function (item) {
                        return !StringUtils.isNullOrEmpty(item);
                    });
                });
            }
            //No item returned
            return [];
        }.bind(this);
    },
};

module.exports.FieldDescriptionBehavior = FieldDescriptionBehavior;
module.exports.FieldInfoBehavior = FieldInfoBehavior;
module.exports.SelectionDescriptionBehavior = SelectionDescriptionBehavior;
module.exports.SelectionInfoBehavior = SelectionInfoBehavior;
module.exports.ActivateInfoBehavior = ActivateInfoBehavior;
module.exports.HelperFuncs = HelperFuncs;