// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2022.
 */
var Core = require("leanft.sdk.core");
var ClickBehavior = Core.ClickBehavior;
var SendKeysBehavior = Core.SendKeysBehavior;
var HelperBehaviors = require("./helper_behaviors.js");
var ActivateInfoBehavior = HelperBehaviors.ActivateInfoBehavior;
var TestObjectBase = Core.TestObjectBase;
var DescriptionBase = Core.DescriptionBase;
var ObjUtils = Core.ObjectUtils;
var StringUtils = Core.StringUtils;
var ArrayUtils = Core.ArrayUtils;
var ObjectUtils = Core.ObjectUtils;
var ExpandCollapsePattern = require("./patterns/expand_collapse_pattern.js").ExpandCollapsePattern;
var GridItemPattern = require("./patterns/grid_item_pattern.js").GridItemPattern;
var GridPattern = require("./patterns/grid_pattern.js").GridPattern;
var InvokePattern = require("./patterns/invoke_pattern.js").InvokePattern;
var LegacyAccessiblePattern = require("./patterns/legacy_accessible_pattern.js").LegacyAccessiblePattern;
var ValuePattern = require("./patterns/value_pattern.js").ValuePattern;
var RangeValuePattern = require("./patterns/range_value_pattern.js").RangeValuePattern;
var ScrollItemPattern = require("./patterns/scroll_item_pattern.js").ScrollItemPattern;
var ScrollPattern = require("./patterns/scroll_pattern.js").ScrollPattern;
var SelectionItemPattern = require("./patterns/selection_item_pattern.js").SelectionItemPattern;
var SelectionPattern = require("./patterns/selection_pattern.js").SelectionPattern;
var TableItemPattern = require("./patterns/table_item_pattern.js").TableItemPattern;
var TablePattern = require("./patterns/table_pattern.js").TablePattern;
var TextPattern = require("./patterns/text_pattern.js").TextPattern;
var TogglePattern = require("./patterns/toggle_pattern.js").TogglePattern;
var WindowPattern = require("./patterns/window_pattern.js").WindowPattern;

/**
 * UIAPro namespace
 * @namespace UIAPro
 */

/**
 * @typedef {UIAPro.PatternType} PatternType - The UIA Pro control patterns supported by UFT Developer.
 * @property {string} expandCollapse A UIA Pro [ExpandCollapse]{@link UIAPro.ExpandCollapsePattern} pattern.
 * @property {string} gridItem A UIA Pro [GridItem]{@link UIAPro.GridItemPattern} pattern.
 * @property {string} grid A UIA Pro [Grid]{@link UIAPro.GridPattern} pattern.
 * @property {string} invoke A UIA Pro [Invoke]{@link UIAPro.InvokePattern} pattern.
 * @property {string} legacyAccessible A UIA Pro [LegacyAccessible]{@link UIAPro.LegacyAccessiblePattern} pattern.
 * @property {string} value A UIA Pro [Value]{@link UIAPro.ValuePattern} pattern.
 * @property {string} rangeValue A UIA Pro [RangeValue]{@link UIAPro.RangeValuePattern} pattern.
 * @property {string} scrollItem  A UIA Pro [ScrollItem]{@link UIAPro.ScrollItemPattern} pattern.
 * @property {string} scroll A UIA Pro [Scroll]{@link UIAPro.ScrollPattern} pattern.
 * @property {string} selectionItem A UIA Pro [SelectionItem]{@link UIAPro.SelectionItemPattern} pattern.
 * @property {string} selection A UIA Pro [Selection]{@link UIAPro.SelectionPattern} pattern.
 * @property {string} tableItem A UIA Pro [TableItem]{@link UIAPro.TableItemPattern} pattern.
 * @property {string} table A UIA Pro [Table]{@link UIAPro.TablePattern} pattern.
 * @property {string} text A UIA Pro [Text]{@link UIAPro.TextPattern} pattern.
 * @property {string} toggle A UIA Pro [Toggle]{@link UIAPro.TogglePattern} pattern.
 * @property {string} window A UIA Pro [Window]{@link UIAPro.WindowPattern} pattern.
 * @memberof UIAPro
 */
var PatternType = {
    /*
     * A UIA Pro ExpandCollapse pattern.
     * @type {string}
     */
    expandCollapse: "expandcollapse",
    /*
     * A UIA Pro GridItem pattern.
     * @type {string}
     */
    gridItem: "griditem",
    /*
     * A UIA Pro Grid pattern.
     * @type {string}
     */
    grid: "grid",
    /*
     * A UIA Pro Invoke pattern.
     * @type {string}
     */
    invoke: "invoke",
    /*
     * A UIA Pro LegacyAccessible pattern.
     * @type {string}
     */
    legacyAccessible: "legacyaccessible",
    /*
     * A UIA Pro Value pattern.
     * @type {string}
     */
    value: "value",
    /*
     * A UIA Pro RangeValue pattern.
     * @type {string}
     */
    rangeValue: "rangevalue",
    /*
    * A UIA Pro ScrollItem pattern.
    * @type {string}
    */
    scrollItem: "scrollitem",
    /*
    * A UIA Pro Scroll pattern.
    * @type {string}
    */
    scroll: "scroll",
    /*
     * A UIA Pro SelectionItem pattern.
     * @type {string}
     */
    selectionItem: "selectionitem",
    /*
     * A UIA Pro Selection pattern.
     * @type {string}
     */
    selection: "selection",
    /*
     * A UIA Pro TableItem pattern.
     * @type {string}
     */
    tableItem: "tableitem",
    /*
    * A UIA Pro Table pattern.
    * @type {string}
    */
    table: "table",
    /*
    * A UIA Pro Text pattern.
    * @type {string}
    */
    text: "text",
    /*
    * A UIA Pro Toggle pattern.
    * @type {string}
    */
    toggle: "toggle",
    /*
    * A UIA Pro Window pattern.
    * @type {string}
    */
    window: "window"
};

var PatternFactory = {
    "expandcollapse": function (testObject) { return new ExpandCollapsePattern(testObject); },
    "griditem": function (testObject) { return new GridItemPattern(testObject); },
    "grid": function (testObject) { return new GridPattern(testObject); },
    "invoke": function (testObject) { return new InvokePattern(testObject); },
    "value": function (testObject) { return new ValuePattern(testObject); },
    "legacyaccessible": function (testObject) { return new LegacyAccessiblePattern(testObject); },
    "rangevalue": function (testObject) { return new RangeValuePattern(testObject); },
    "scrollitem": function (testObject) { return new ScrollItemPattern(testObject); },
    "scroll": function (testObject) { return new ScrollPattern(testObject); },
    "selectionitem": function (testObject) { return new SelectionItemPattern(testObject); },
    "selection": function (testObject) { return new SelectionPattern(testObject); },
    "tableitem": function (testObject) { return new TableItemPattern(testObject); },
    "table": function (testObject) { return new TablePattern(testObject); },
    "text": function (testObject) { return new TextPattern(testObject); },
    "toggle": function (testObject) { return new TogglePattern(testObject); },
    "window": function (testObject) { return new WindowPattern(testObject); }
};

/**
 * UiObjectBaseDescription - the base description for all UIAPro elements.
 * @class UiObjectBaseDescription
 * @extends DescriptionBase
 * @memberof UIAPro
 * @ignore
 */
function UiObjectBaseDescription(leanFTType) {
    this._init({
        technology: "UIAPro",
        leanftType: leanFTType
    });
}

/**
 * @ignore
 */
ObjUtils.inherit(UiObjectBaseDescription, DescriptionBase, {
    /**
     * The object's x-coordinate (left) relative to the parent object (in pixels).
     * @param {number} [x] When provided, this method acts as a setter and sets the x value.
     * @returns {number | Description} The current stored x value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    x: function (x) {
        return this._simplePropertyHandler("x", x);
    },
    /**
     * The object's y-coordinate (top) relative to the parent object (in pixels).
     * @param {number} [y] When provided, this method acts as a setter and sets the y value.
     * @returns {number | Description} The current stored y value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    y: function (y) {
        return this._simplePropertyHandler("y", y);
    },
    /**
     * The object's absolute x-coordinate (left) relative to the parent object (in pixels).
     * @param {number} [absX] When provided, this method acts as a setter and sets the absX value.
     * @returns {number | Description} The current stored absX value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    absX: function (absX) {
        return this._simplePropertyHandler("absx", absX);
    },
    /**
     * The object's absolute y-coordinate (top) relative to the parent object (in pixels).
     * @param {number} [absY] When provided, this method acts as a setter and sets the absY value.
     * @returns {number | Description} The current stored absY value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    absY: function (absY) {
        return this._simplePropertyHandler("absy", absY);
    },
    /**
     * The object's width (in pixels).
     * @param {number} [width] When provided, this method acts as a setter and sets the width value.
     * @returns {number | Description} The current stored width value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    width: function (width) {
        return this._simplePropertyHandler("width", width);
    },
    /**
     * The object's height (in pixels).
     * @param {number} [height] When provided, this method acts as a setter and sets the height value.
     * @returns {number | Description} The current stored height value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
    */
    height: function (height) {
        return this._simplePropertyHandler("height", height);
    },
    /**
     * The UIAutomation object process name.
     * @param {string} [processName] When provided, this method acts as a setter and sets the processName value.
     * @returns {string | Description} The current stored processName value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    processName: function (processName) {
        return this._simplePropertyHandler("processname", processName);
    },
    /**
     * The UIAutomation object process id.
     * @param {number} [processId] When provided, this method acts as a setter and sets the processId value.
     * @returns {number | Description} The current stored processId value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    processId: function (processId) {
        return this._simplePropertyHandler("processid", processId);
    },
    /**
     * Indicates whether the object has keyboard focus.
     * @param {boolean} [hasKeyBoardFocus] When provided, this method acts as a setter and sets the hasKeyBoardFocus value.
     * @returns {boolean | Description} The current stored hasKeyBoardFocus value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    hasKeyBoardFocus: function (hasKeyBoardFocus) {
        return this._simplePropertyHandler("haskeyboardfocus", hasKeyBoardFocus);
    },
    /**
     * The run-time object's window handle.
     * @param {number} [handle] When provided, this method acts as a setter and sets the handle value.
     * @returns {number | Description} The current stored handle value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    handle: function (handle) {
        return this._simplePropertyHandler("handle", handle);
    },
    /**
     * Indicates whether the object is enabled.
     * @param {boolean} [isEnabled] When provided, this method acts as a setter and sets the isEnabled value.
     * @returns {boolean | Description} The current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    isEnabled: function (isEnabled) {
        return this._simplePropertyHandler("isenabled", isEnabled);
    },
    /**
     * Indicates whether the object can accept keyboard focus.
     * @param {boolean} [isKeyboardFocusable] When provided, this method acts as a setter and sets the isKeyboardFocusable value.
     * @returns {boolean | Description} The current stored isKeyboardFocusable value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    isKeyboardFocusable: function (isKeyboardFocusable) {
        return this._simplePropertyHandler("iskeyboardfocusable", isKeyboardFocusable);
    },
    /**
     * Indicates whether the object is Offscreen.
     * @param {boolean} [isOffScreen] When provided, this method acts as a setter and sets the isOffScreen value.
     * @returns {boolean | Description} The current stored isOffScreen value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    isOffScreen: function (isOffScreen) {
        return this._simplePropertyHandler("isoffscreen", isOffScreen);
    },
    /**
     * Indicates whether the object contains protected content or a password.
     * @param {boolean} [isPassword] When provided, this method acts as a setter and sets the isPassword value.
     * @returns {boolean | Description} The current stored isPassword value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    isPassword: function (isPassword) {
        return this._simplePropertyHandler("ispassword", isPassword);
    },
    /**
     * Describes the status of the current object. For example, an item associated with a contact in a messaging application might be "Busy" or "Connected".
     * @param {string} [status] When provided, this method acts as a setter and sets the status value.
     * @returns {string | Description} The current stored status value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    status: function (status) {
        return this._simplePropertyHandler("status", status);
    },
    /**
     * The sequence of key combinations that invoke an action associated with the element.
     * @param {string} [acceleratorKey] When provided, this method acts as a setter and sets the acceleratorKey value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored acceleratorKey value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    acceleratorKey: function (acceleratorKey) {
        return this._simplePropertyHandler("acceleratorkey", acceleratorKey);
    },
    /**
     * The character that is used to activate the object.
     * @param {string} [accessKey] When provided, this method acts as a setter and sets the accessKey value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored accessKey value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    accessKey: function (accessKey) {
        return this._simplePropertyHandler("accesskey", accessKey);
    },
    /**
     * The ID for an object that is unique among siblings within its container.
     * @param {string} [automationId] When provided, this method acts as a setter and sets the automationId value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored automationId value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    automationId: function (automationId) {
        return this._simplePropertyHandler("automationid", automationId);
    },
    /**
     * The UIAPro type for the object.
     * @param {string} [controlType] When provided, this method acts as a setter and sets the controlType value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored controlType value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    controlType: function (controlType) {
        return this._simplePropertyHandler("controltype", controlType);
    },
    /**
     * The name of the UI framework, such as Win32, WinForm, or DirectUI.
     * @param {string} [frameworkId] When provided, this method acts as a setter and sets the frameworkId value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored frameworkId value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    frameworkId: function (frameworkId) {
        return this._simplePropertyHandler("frameworkid", frameworkId);
    },
    /**
     * The list of patterns supported for the test object.
     * @param {string[]} [supportedPatterns] When provided, this method acts as a setter and sets the supportedPatterns value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored supportedPatterns value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    supportedPatterns: function (supportedPatterns) {
        return this._propertyHandler("supportedpatterns", supportedPatterns, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    },
    /**
     * The path in the application's object hierarchy, separated by semicolons. Objects in the path are represented by their name or automationId property values.
     * @param {string} [path] When provided, this method acts as a setter and sets the path value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored path value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    path: function (path) {
        return this._simplePropertyHandler("path", path);
    },
    /**
     * The class name assigned to the test object.
     * @param {string} [nativeClass] When provided, this method acts as a setter and sets the nativeClass value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored nativeClass value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    nativeClass: function (nativeClass) {
        return this._simplePropertyHandler("nativeclass", nativeClass);
    },
    /**
     * The name of the control.
     * @param {string} [name] When provided, this method acts as a setter and sets the name value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored name value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof UIAPro.UiObjectBaseDescription#
     */
    name: function (name) {
        return this._simplePropertyHandler("name", name);
    }
});

/**
 * @class UiObjectBaseTO
 * @param nativeClass
 * @param session
 * @param description
 * @constructor
 * @extends TestObjectBase
 * @mixes ClickBehavior._methods
 * @mixes SendKeysBehavior._methods
 * @mixes ActivateInfoBehavior._methods
 * @mixes UIAPro.UiObjectBaseTOBehavior._properties
 * @mixes UIAPro.UiObjectBaseTOBehavior._methods
 * @abstract
 * @memberof UIAPro
 * @ignore
 */
function UiObjectBaseTO(nativeClass, session, description) {
    this._init(nativeClass, session, description);

    this._mergeBehavior(ClickBehavior);
    this._mergeBehavior(SendKeysBehavior);
    this._mergeBehavior(ActivateInfoBehavior);
    this._mergeBehavior(UiObjectBaseTOBehavior);
}

/**
 * @ignore
 */
ObjUtils.inherit(UiObjectBaseTO, TestObjectBase, {
});

/**
 * @memberof UIAPro
 * @ignore
 */
var UiObjectBaseTOBehavior = {
    /**
     * @ignore
     * @memberof UIAPro.UiObjectBaseTOBehavior
     */
    _properties: {
        /**
         * Returns the object's x-coordinate (left) relative to the parent object (in pixels).
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with x-coordinate (left) relative to the parent object (in pixels).
         */
        x: {
            wiredName: "x"
        },
        /**
         * Returns the object's y-coordinate (top) relative to the parent object (in pixels).
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with y-coordinate (top) relative to the parent object (in pixels).
         */
        y: {
            wiredName: "y"
        },
        /**
         * Returns the object's absolute x-coordinate (left) relative to the parent object (in pixels).
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with absolute x-coordinate (left) relative to the parent object (in pixels).
         */
        absX: {
            wiredName: "absx"
        },
        /**
         * Returns the object's absolute y-coordinate (top) relative to the parent object (in pixels).
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with absolute y-coordinate (top) relative to the parent object (in pixels).
         */
        absY: {
            wiredName: "absy"
        },
        /**
         * Returns the object's width (in pixels).
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the value of the object's width (in pixels).
         */
        width: {},
        /**
         * Returns the object's height (in pixels).
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the value of the object's height (in pixels).
         */
        height: {},
        /**
         * Returns the UIAutomation object process name.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the value of the UIAutomation object process name.
         */
        processName: {
            wiredName: "processname"
        },
        /**
         * Returns the UIAutomation object process id.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the value of the UIAutomation object process id.
         */
        processId: {
            wiredName: "processid"
        },
        /**
         * Returns a value that indicates whether the object has keyboard focus.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a value that indicates whether the object has keyboard focus.
         */
        hasKeyBoardFocus: {
            wiredName: "haskeyboardfocus"
        },
        /**
         * Returns a value that indicates whether the object is enabled.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a value that indicates whether the object is enabled.
         */
        isEnabled: {
            wiredName: "isenabled"
        },
        /**
         * Returns a value that indicates whether the object can accept keyboard focus.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a value that indicates whether the object can accept keyboard focus.
         */
        isKeyboardFocusable: {
            wiredName: "iskeyboardfocusable"
        },
        /**
         * Returns a value that indicates whether the object is Offscreen.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a value that indicates whether the object is Offscreen.
         */
        isOffScreen: {
            wiredName: "isoffscreen"
        },
        /**
         * Returns a value that indicates whether the object contains protected content or a password.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with a value that indicates whether the object contains protected content or a password.
         */
        isPassword: {
            wiredName: "ispassword"
        },
        /**
         * Returns a value that describes a status of the current object. 
         * For example, an item associated with a contact in a messaging application might be "Busy" or "Connected".
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with a value that describes a status of the current object.
         */
        status: {},
        /**
         * Returns the object's handle.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's handle.
         */
        handle: {
            wiredName: "hwnd"
        },
        /**
         * Returns the native class of the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's native class.
         */
        nativeClass: {
            wiredName: "nativeclass"
        },
        /**
         * Returns the name of the control.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's name.
         */
        name: {},
        /**
         * Returns the path in the application's object hierarchy, separated by semicolons. Objects in the path are represented by their name or automationId property values.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's path.
         */
        path: {},
        /**
         * Returns the list of patterns supported by the object in the application.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the object's supported patterns.
         */
        supportedPatterns: {
            wiredName: "supportedpatterns",
            getter: function () {
                return this._getROProperty("supportedpatterns", arguments).then(function (res) {
                    return StringUtils.isNullOrEmpty(res) ? [] : res.split(";");
                });
            }
        },
        /**
         * Returns the name of the UI framework, such as Win32, WinForm, or DirectUI.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's framework id.
         */
        frameworkId: {
            wiredName: "frameworkid"
        },
        /**
         * Returns the UIAPro type for the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's control type.
         */
        controlType: {
            wiredName: "controltype"
        },
        /**
         * Returns the ID for an object that is unique among siblings within its container.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's automation id.
         */
        automationId: {
            wiredName: "automationid"
        },
        /**
         * Returns the character that is used to activate the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's access key.
         */
        accessKey: {
            wiredName: "accesskey"
        },
        /**
         * Returns the sequence of key combinations that invoke an action associated with the element.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's accelerator key.
         */
        acceleratorKey: {
            wiredName: "acceleratorkey"
        }
    },

    /**
     * @ignore
     * @memberof UIAPro.UiObjectBaseTOBehavior
     */
    _methods: {
        /**
         * Returns the expand collapse pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {ExpandCollapsePattern} The UIA Pro expand collapse pattern.
         */
        expandCollapsePattern: function () {
            return this._getPattern(PatternType.expandCollapse);
        },
        /**
         * Returns the grid item pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {GridItemPattern} The UIA Pro grid item pattern.
         */
        gridItemPattern: function () {
            return this._getPattern(PatternType.gridItem);
        },
        /**
         * Returns the grid pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {GridPattern} The UIA Pro grid pattern.
         */
        gridPattern: function () {
            return this._getPattern(PatternType.grid);
        },
        /**
         * Returns the invoke pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {InvokePattern} The UIA Pro invoke pattern.
         */
        invokePattern: function () {
            return this._getPattern(PatternType.invoke);
        },
        /**
         * Returns the legacy accessible pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {LegacyAccessiblePattern} The UIA Pro legacy accessible pattern.
         */
        legacyAccessiblePattern: function () {
            return this._getPattern(PatternType.legacyAccessible);
        },
        /**
         * Returns the range value pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {RangeValuePattern} The UIA Pro range value pattern.
         */
        rangeValuePattern: function () {
            return this._getPattern(PatternType.rangeValue);
        },
        /**
         * Returns the scroll item pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {ScrollItemPattern} The UIA Pro scroll item pattern.
         */
        scrollItemPattern: function () {
            return this._getPattern(PatternType.scrollItem);
        },
        /**
         * Returns the scroll pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {ScrollPattern} The UIA Pro scroll pattern.
         */
        scrollPattern: function () {
            return this._getPattern(PatternType.scroll);
        },
        /**
         * Returns the selection item pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {SelectionItemPattern} The UIA Pro selection item pattern.
         */
        selectionItemPattern: function () {
            return this._getPattern(PatternType.selectionItem);
        },
        /**
         * Returns the selection pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {SelectionPattern} The UIA Pro selection pattern.
         */
        selectionPattern: function () {
            return this._getPattern(PatternType.selection);
        },
        /**
         * Returns the table item pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {TableItemPattern} The UIA Pro table item pattern.
         */
        tableItemPattern: function () {
            return this._getPattern(PatternType.tableItem);
        },
        /**
         * Returns the table pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {TablePattern} The UIA Pro table pattern.
         */
        tablePattern: function () {
            return this._getPattern(PatternType.table);
        },
        /**
         * Returns the text pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {TextPattern} The UIA Pro text pattern.
         */
        textPattern: function () {
            return this._getPattern(PatternType.text);
        },
        /**
         * Returns the toggle pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {TogglePattern} The UIA Pro toggle pattern.
         */
        togglePattern: function () {
            return this._getPattern(PatternType.toggle);
        },
        /**
         * Returns the value pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {ValuePattern} The UIA Pro value pattern.
         */
        valuePattern: function () {
            return this._getPattern(PatternType.value);
        },
        /**
         * Returns the window pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @returns {WindowPattern} The UIA Pro window pattern.
         */
        windowPattern: function () {
            return this._getPattern(PatternType.window);
        }
    },
    /**
     * @ignore
     * @memberof UIAPro.UiObjectBaseTOBehavior
     */
    _helpers: {
        /**
         * Handles the execution of the SDK operations with report event handling and sending the currently executing function name.
         * @param {arguments} originalArgumentsObject The calling method arguments object instance.
         * @param {Object} options The options to execute with events.
         * @param {string} options.executeType  The function to execute. If not passed the default function is _executeCommand
         * @param {string} options.name  The name of the method.
         * @param {function} options.processResult  process result before report.
         * @param {function} options.onError  report only on error or not.
         * @private
         */
        _executeWithEventsWithOptions: function (originalArgumentsObject, options) {
            var args = ArrayUtils.toArray(arguments);
            args.splice(0, 2);

            var funcToExecute;
            var executeType = options.executeType || "";
            switch (executeType.toLowerCase()) {
                case "voidcommand":
                    funcToExecute = this._executeVoidCommand;
                    break;
                default:
                    funcToExecute = this._executeCommand;
            }

            var exec = function (id) {
                args.push(this._notifyAdditionalData.bind(this, id));
                return funcToExecute.apply(this, args).then(options.processResult || ObjectUtils.identity);
            }.bind(this);
            var option = { sender: this, onError: Boolean(options.onError), calleeArguments: originalArgumentsObject, type: "TestObject", name: options.name };
            return this.notifyWithEvents(exec, args, option);
        },
        /**
         * Returns the pattern class of the test object, providing access to the relevant methods and properties.
         * @function
         * @param {UIAPro.PatternType} patternType The type of the pattern. Possible values: {@link UIAPro.PatternType}
         * @returns {Object} The UIA Pro control pattern.
         */
        _getPattern: function (patternType) {
            var patternCreator = PatternFactory[patternType.toLowerCase()];
            if (patternCreator) {
                return patternCreator(this);
            }

            throw new Error("Pattern unknown.");
        },
    }
};

module.exports.UiObjectBaseDescription = UiObjectBaseDescription;
module.exports.UiObjectBaseTO = UiObjectBaseTO;
module.exports.PatternType = PatternType;
module.exports.PatternFactory = PatternFactory;