// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;

describe("Checked Description", function () {

    var CheckedDescriptionBehavior = require("../lib/checked_behavior.js").CheckedDescriptionBehaviour;
    var SapGuiBaseDescription = require("../lib/sapgui_object_base.js").SapGuiBaseDescription;
    var checkedDescriptionUnderTest;

    beforeEach(function () {
        checkedDescriptionUnderTest = new SapGuiBaseDescription();
        Core.ObjectUtils.extend(checkedDescriptionUnderTest, CheckedDescriptionBehavior);
    });

    describe("attachedText method", function () {
        it("should add 'AttachedText' to _properties when value is given", function () {
            checkedDescriptionUnderTest.attachedText("SomeText");
            assert.strictEqual(checkedDescriptionUnderTest._properties["AttachedText"], "SomeText");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = checkedDescriptionUnderTest.attachedText("SomeText");
            assert.strictEqual(result, checkedDescriptionUnderTest);
        });

        it("should remove 'AttachedText' from _properties when value is null", function () {
            checkedDescriptionUnderTest._properties["AttachedText"] = "SomeText";
            checkedDescriptionUnderTest.attachedText(null);
            assert(!("AttachedText" in checkedDescriptionUnderTest._properties));
        });

        it("should return the value of 'AttachedText' from _properties when value is not given", function () {
            checkedDescriptionUnderTest._properties["AttachedText"] = "SomeText";
            var value = checkedDescriptionUnderTest.attachedText();
            assert.strictEqual(value, "SomeText");
        });
    });

    describe("isEnabled method", function () {
        it("should add 'Enabled' to _properties when value is given", function () {
            checkedDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(checkedDescriptionUnderTest._properties["Enabled"], true);
        });

        it("should add 'Enabled' to _properties when value is given in string", function () {
            checkedDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(checkedDescriptionUnderTest._properties["Enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkedDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(result, checkedDescriptionUnderTest);
        });

        it("should remove 'Enabled' from _properties when value is null", function () {
            checkedDescriptionUnderTest._properties["Enabled"] = true;
            checkedDescriptionUnderTest.isEnabled(null);
            assert(!("Enabled" in checkedDescriptionUnderTest._properties));
        });

        it("should return the value of 'Enabled' from _properties when value is not given", function () {
            checkedDescriptionUnderTest._properties["Enabled"] = true;
            var result = checkedDescriptionUnderTest.isEnabled();
            assert.equal(result, true);
        });
    });

    describe("isChecked method", function () {
        it("should add 'Selected' to _properties when value is given", function () {
            checkedDescriptionUnderTest.isChecked(true);
            assert.strictEqual(checkedDescriptionUnderTest._properties["Selected"], true);
        });

        it("should add 'Selected' to _properties when value is given in string", function () {
            checkedDescriptionUnderTest.isChecked("true");
            assert.strictEqual(checkedDescriptionUnderTest._properties["Selected"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkedDescriptionUnderTest.isChecked(true);
            assert.strictEqual(result, checkedDescriptionUnderTest);
        });

        it("should remove 'Selected' from _properties when value is null", function () {
            checkedDescriptionUnderTest._properties["Selected"] = true;
            checkedDescriptionUnderTest.isChecked(null);
            assert(!("Selected" in checkedDescriptionUnderTest._properties));
        });

        it("should return the value of 'Selected' from _properties when value is not given", function () {
            checkedDescriptionUnderTest._properties["Selected"] = true;
            var result = checkedDescriptionUnderTest.isChecked();
            assert.equal(result, true);
        });
    });
});


describe("Checked Test Object", function () {
    var Core = require("leanft.sdk.core");
    var CheckedTOBehavior = ObjectUtils.mergeTestBehavior(require("../lib/checked_behavior.js").CheckedTOBehavior);
    var SapGuiBaseTO = require("../lib/sapgui_object_base.js").SapGuiBaseTO;
    var checkedTestObjectUnderTest;

    beforeEach(function () {
        checkedTestObjectUnderTest = new SapGuiBaseTO();
        Core.ObjectUtils.extend(checkedTestObjectUnderTest, CheckedTOBehavior);
        checkedTestObjectUnderTest._getROProperty = sinon.stub();
        checkedTestObjectUnderTest._executeWithEvents = sinon.stub();
    });

    afterEach(function () {
        delete checkedTestObjectUnderTest._getROProperty;
        delete checkedTestObjectUnderTest._executeWithEvents;
    });

    describe("attachedText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            checkedTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = checkedTestObjectUnderTest.attachedText();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'AttachedText' with correct parameters", function () {
            checkedTestObjectUnderTest.attachedText();
            sinon.assert.calledOnce(checkedTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkedTestObjectUnderTest._getROProperty, "AttachedText", sinon.match({}));
        });
    });

    describe("isEnabled method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            checkedTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = checkedTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _getROProperty 'Enabled'", function () {
            checkedTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(checkedTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkedTestObjectUnderTest._getROProperty, "Enabled", sinon.match({}));
        });
    });

    describe("isChecked method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            checkedTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = checkedTestObjectUnderTest.isChecked();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _getROProperty 'Selected'", function () {
            checkedTestObjectUnderTest.isChecked();
            sinon.assert.calledOnce(checkedTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkedTestObjectUnderTest._getROProperty, "Selected", sinon.match({}));
        });
    });

    describe("setFocus method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            checkedTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = checkedTestObjectUnderTest.setFocus();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SetFocus'", function () {
            checkedTestObjectUnderTest.setFocus();
            sinon.assert.calledOnce(checkedTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(checkedTestObjectUnderTest._executeWithEvents, sinon.match({}), "SetFocus");
        });
    });
});
