// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var sinon = require("sinon");
var assert = require("assert");

describe("Gui Session Description", function () {

    var GuiSession = require("../lib/gui_session.js").GuiSession;
    var guiSessionDescUnderTest;

    beforeEach(function () {
        guiSessionDescUnderTest = GuiSession();

    });

    describe("id method", function () {
        it("should add 'Id' to _properties when value is given", function () {
            guiSessionDescUnderTest.id("id1");
            assert.strictEqual(guiSessionDescUnderTest._properties["Id"], "id1");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = guiSessionDescUnderTest.id("id1");
            assert.strictEqual(result, guiSessionDescUnderTest);
        });

        it("should remove 'Id' from _properties when value is null", function () {
            guiSessionDescUnderTest._properties["Id"] = "id1";
            guiSessionDescUnderTest.id(null);
            assert(!("Id" in guiSessionDescUnderTest._properties));
        });

        it("should return the value of 'Id' from _properties when value is not given", function () {
            guiSessionDescUnderTest._properties["Id"] = "id1";
            var value = guiSessionDescUnderTest.id();
            assert.strictEqual(value, "id1");
        });

    });

    describe("name method", function () {
        it("should add 'Name' to _properties when value is given", function () {
            guiSessionDescUnderTest.name("Gui Session");
            assert.strictEqual(guiSessionDescUnderTest._properties["Name"], "Gui Session");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = guiSessionDescUnderTest.name("Gui Session");
            assert.strictEqual(result, guiSessionDescUnderTest);
        });

        it("should remove 'Name' from _properties when value is null", function () {
            guiSessionDescUnderTest._properties["Name"] = "Gui Session";
            guiSessionDescUnderTest.name(null);
            assert(!("Name" in guiSessionDescUnderTest._properties));
        });

        it("should return the value of 'Name' from _properties when value is not given", function () {
            guiSessionDescUnderTest._properties["Name"] = "Gui Session";
            var value = guiSessionDescUnderTest.name();
            assert.strictEqual(value, "Gui Session");
        });
    });

    describe("applicationServer method", function () {
        it("should add 'ApplicationServer' to _properties when value is given", function () {
            guiSessionDescUnderTest.applicationServer("Application Server");
            assert.strictEqual(guiSessionDescUnderTest._properties["ApplicationServer"], "Application Server");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = guiSessionDescUnderTest.applicationServer("Application Server");
            assert.strictEqual(result, guiSessionDescUnderTest);
        });

        it("should remove 'ApplicationServer' from _properties when value is null", function () {
            guiSessionDescUnderTest._properties["ApplicationServer"] = "Application Server";
            guiSessionDescUnderTest.applicationServer(null);
            assert(!("ApplicationServer" in guiSessionDescUnderTest._properties));
        });
        it("should return the value of 'ApplicationServer' from _properties when value is not given", function () {
            guiSessionDescUnderTest._properties["ApplicationServer"] = "Application Server";
            var value = guiSessionDescUnderTest.applicationServer();
            assert.strictEqual(value, "Application Server");
        });
    });

    describe("client method", function () {
        it("should add 'Client' to _properties when value is given", function () {
            guiSessionDescUnderTest.client("Client1");
            assert.strictEqual(guiSessionDescUnderTest._properties["Client"], "Client1");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = guiSessionDescUnderTest.client("Client1");
            assert.strictEqual(result, guiSessionDescUnderTest);
        });

        it("should remove 'Client' from _properties when value is null", function () {
            guiSessionDescUnderTest._properties["Client"] = "Client1";
            guiSessionDescUnderTest.client(null);
            assert(!("Client" in guiSessionDescUnderTest._properties));
        });
        it("should return the value of 'Client' from _properties when value is not given", function () {
            guiSessionDescUnderTest._properties["Client"] = "Client1";
            var value = guiSessionDescUnderTest.client();
            assert.strictEqual(value, "Client1");
        });
    });

    describe("language method", function () {
        it("should add 'Language' to _properties when value is given", function () {
            guiSessionDescUnderTest.language("vietnamese");
            assert.strictEqual(guiSessionDescUnderTest._properties["Language"], "vietnamese");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = guiSessionDescUnderTest.language("vietnamese");
            assert.strictEqual(result, guiSessionDescUnderTest);
        });

        it("should remove 'Language' from _properties when value is null", function () {
            guiSessionDescUnderTest._properties["Language"] = "vietnamese";
            guiSessionDescUnderTest.language(null);
            assert(!("Language" in guiSessionDescUnderTest._properties));
        });
        it("should return the value of 'Language' from _properties when value is not given", function () {
            guiSessionDescUnderTest._properties["Language"] = "vietnamese";
            var value = guiSessionDescUnderTest.language();
            assert.strictEqual(value, "vietnamese");
        });
    });

    describe("systemName method", function () {
        it("should add 'SystemName' to _properties when value is given", function () {
            guiSessionDescUnderTest.systemName("System Name");
            assert.strictEqual(guiSessionDescUnderTest._properties["SystemName"], "System Name");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = guiSessionDescUnderTest.systemName("System Name");
            assert.strictEqual(result, guiSessionDescUnderTest);
        });

        it("should remove 'SystemName' from _properties when value is null", function () {
            guiSessionDescUnderTest._properties["SystemName"] = "System Name";
            guiSessionDescUnderTest.systemName(null);
            assert(!("SystemName" in guiSessionDescUnderTest._properties));
        });
        it("should return the value of 'SystemName' from _properties when value is not given", function () {
            guiSessionDescUnderTest._properties["SystemName"] = "System Name";
            var value = guiSessionDescUnderTest.systemName();
            assert.strictEqual(value, "System Name");
        });
    });

    describe("user method", function () {
        it("should add 'User' to _properties when value is given", function () {
            guiSessionDescUnderTest.user("User1");
            assert.strictEqual(guiSessionDescUnderTest._properties["User"], "User1");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = guiSessionDescUnderTest.user("User1");
            assert.strictEqual(result, guiSessionDescUnderTest);
        });

        it("should remove 'User' from _properties when value is null", function () {
            guiSessionDescUnderTest._properties["User"] = "User1";
            guiSessionDescUnderTest.user(null);
            assert(!("User" in guiSessionDescUnderTest._properties));
        });
        it("should return the value of 'User' from _properties when value is not given", function () {
            guiSessionDescUnderTest._properties["User"] = "User1";
            var value = guiSessionDescUnderTest.user();
            assert.strictEqual(value, "User1");
        });
    });

    describe("codePage method", function () {
        it("should add 'CodePage' to _properties when value is given", function () {
            guiSessionDescUnderTest.codePage(100);
            assert.strictEqual(guiSessionDescUnderTest._properties["CodePage"], 100);
        });

        it("should add 'CodePage' to _properties when value is given in string", function () {
            guiSessionDescUnderTest.codePage('100');
            assert.strictEqual(guiSessionDescUnderTest._properties["CodePage"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = guiSessionDescUnderTest.codePage(100);
            assert.strictEqual(result, guiSessionDescUnderTest);
        });

        it("should remove 'CodePage' from _properties when value is null", function () {
            guiSessionDescUnderTest._properties["CodePage"] = 100;
            guiSessionDescUnderTest.codePage(null);
            assert(!("CodePage" in guiSessionDescUnderTest._properties));
        });

        it("should return the value of 'CodePage' from _properties when value is not given", function () {
            guiSessionDescUnderTest._properties["CodePage"] = 100;
            var result = guiSessionDescUnderTest.codePage();
            assert.equal(result, 100);
        });
    });

    describe("systemNumber method", function () {
        it("should add 'SystemNumber' to _properties when value is given", function () {
            guiSessionDescUnderTest.systemNumber(100);
            assert.strictEqual(guiSessionDescUnderTest._properties["SystemNumber"], 100);
        });

        it("should add 'SystemNumber' to _properties when value is given in string", function () {
            guiSessionDescUnderTest.systemNumber('100');
            assert.strictEqual(guiSessionDescUnderTest._properties["SystemNumber"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = guiSessionDescUnderTest.systemNumber(100);
            assert.strictEqual(result, guiSessionDescUnderTest);
        });

        it("should remove 'SystemNumber' from _properties when value is null", function () {
            guiSessionDescUnderTest._properties["SystemNumber"] = 100;
            guiSessionDescUnderTest.systemNumber(null);
            assert(!("SystemNumber" in guiSessionDescUnderTest._properties));
        });

        it("should return the value of 'SystemNumber' from _properties when value is not given", function () {
            guiSessionDescUnderTest._properties["SystemNumber"] = 100;
            var result = guiSessionDescUnderTest.systemNumber();
            assert.equal(result, 100);
        });
    });
});

describe("GuiSession Test Object", function () {

    var GuiSessionTO = require("../lib/gui_session.js").GuiSessionTO;
    var ComponentType = require("../lib/component_type.js").ComponentType;
    var guiSessionTOUnderTest;

    beforeEach(function () {
        guiSessionTOUnderTest = new GuiSessionTO();
        sinon.stub(guiSessionTOUnderTest, "_getROProperty");
        sinon.stub(guiSessionTOUnderTest, "_executeWithEvents");
        sinon.stub(guiSessionTOUnderTest, "_executeCommand");
    });

    describe("type method", function () {
        beforeEach(function () {
            sinon.stub(ComponentType, "_nativeToComponentType");
        });

        afterEach(function () {
            ComponentType._nativeToComponentType.restore();
        });

        it("should call 'ComponentType._nativeToComponentType'", function () {
            var executionPromise = {
                then: function (cb) {
                    return cb(80);
                }
            };
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            guiSessionTOUnderTest.type();
            sinon.assert.calledOnce(ComponentType._nativeToComponentType);
            sinon.assert.calledWith(ComponentType._nativeToComponentType, 80);
        });

        it("should return correct value if 'ComponentType._nativeToComponentType' is called", function () {
            var executionPromise = {
                then: function (cb) {
                    return cb(80);
                }
            };
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            ComponentType._nativeToComponentType.returns("tablecontrol");
            var res = guiSessionTOUnderTest.type();
            assert.strictEqual(res, "tablecontrol");
        });


        it("should execute _getROProperty 'type' with correct parameters", function () {
            var executionPromise = {
                then: function (cb) {
                    return cb(80);
                }
            };
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            guiSessionTOUnderTest.type();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "GuiComponentType", sinon.match({}));
        });
    });

    describe("id method", function () {

        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.id();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'id' with correct parameters", function () {
            guiSessionTOUnderTest.id();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "Id", sinon.match({}));
        });
    });

    describe("name method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.name();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'name' with correct parameters", function () {
            guiSessionTOUnderTest.name();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "Name", sinon.match({}));
        });
    });

    describe("activeWindow method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.activeWindow();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'activeWindow' with correct parameters", function () {
            guiSessionTOUnderTest.activeWindow();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "ActiveWindow", sinon.match({}));
        });
    });

    describe("applicationServer method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.applicationServer();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'applicationServer' with correct parameters", function () {
            guiSessionTOUnderTest.applicationServer();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "ApplicationServer", sinon.match({}));
        });
    });

    describe("client method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.client();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'client' with correct parameters", function () {
            guiSessionTOUnderTest.client();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "Client", sinon.match({}));
        });
    });

    describe("codePage method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.codePage();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'codePage' with correct parameters", function () {
            guiSessionTOUnderTest.codePage();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "CodePage", sinon.match({}));
        });
    });

    describe("flushes method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.flushes();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'flushes' with correct parameters", function () {
            guiSessionTOUnderTest.flushes();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "Flushes", sinon.match({}));
        });
    });

    describe("group method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.group();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'group' with correct parameters", function () {
            guiSessionTOUnderTest.group();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "Group", sinon.match({}));
        });
    });

    describe("interpretationTime method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.interpretationTime();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'group' with correct parameters", function () {
            guiSessionTOUnderTest.interpretationTime();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "InterpretationTime", sinon.match({}));
        });
    });

    describe("language method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.language();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'language' with correct parameters", function () {
            guiSessionTOUnderTest.language();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "Language", sinon.match({}));
        });
    });

    describe("messageServer method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.messageServer();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'messageServer' with correct parameters", function () {
            guiSessionTOUnderTest.messageServer();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "MessageServer", sinon.match({}));
        });
    });

    describe("program method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.program();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'messageServer' with correct parameters", function () {
            guiSessionTOUnderTest.program();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "Program", sinon.match({}));
        });
    });

    describe("responseTime method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.responseTime();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'responseTime' with correct parameters", function () {
            guiSessionTOUnderTest.responseTime();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "ResponseTime", sinon.match({}));
        });
    });

    describe("roundTrips method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.roundTrips();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'roundTrips' with correct parameters", function () {
            guiSessionTOUnderTest.roundTrips();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "RoundTrips", sinon.match({}));
        });
    });

    describe("screenNumber method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.screenNumber();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'screenNumber' with correct parameters", function () {
            guiSessionTOUnderTest.screenNumber();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "ScreenNumber", sinon.match({}));
        });
    });

    describe("systemName method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.systemName();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'systemName' with correct parameters", function () {
            guiSessionTOUnderTest.systemName();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "SystemName", sinon.match({}));
        });
    });

    describe("systemNumber method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.systemNumber();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'systemNumber' with correct parameters", function () {
            guiSessionTOUnderTest.systemNumber();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "SystemNumber", sinon.match({}));
        });
    });

    describe("transaction method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.transaction();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'transaction' with correct parameters", function () {
            guiSessionTOUnderTest.transaction();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "Transaction", sinon.match({}));
        });
    });


    describe("user method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._getROProperty.returns(executionPromise);
            var res = guiSessionTOUnderTest.user();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'user' with correct parameters", function () {
            guiSessionTOUnderTest.user();
            sinon.assert.calledOnce(guiSessionTOUnderTest._getROProperty);
            sinon.assert.calledWith(guiSessionTOUnderTest._getROProperty, "User", sinon.match({}));
        });
    });

    describe("close method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = guiSessionTOUnderTest.close();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Close' with correct parameters", function () {
            guiSessionTOUnderTest.close();
            sinon.assert.calledOnce(guiSessionTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(guiSessionTOUnderTest._executeWithEvents, sinon.match({ }), "Close");
        });
    });

    describe("sync method", function () {
        it("should execute command 'Sync' if there is no timeout", function () {
            guiSessionTOUnderTest.sync();
            sinon.assert.calledOnce(guiSessionTOUnderTest._executeCommand);
            sinon.assert.calledWith(guiSessionTOUnderTest._executeCommand, "Sync");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._executeCommand.returns(executionPromise);
            var res = guiSessionTOUnderTest.sync();
            assert.equal(res, executionPromise);
        });

        it("should execute command 'Sync' if timeout is null", function () {
            guiSessionTOUnderTest.sync(null);
            sinon.assert.calledOnce(guiSessionTOUnderTest._executeCommand);
            sinon.assert.calledWith(guiSessionTOUnderTest._executeCommand, "Sync");
        });

        it("should execute the 'Sync' command with timeout value is defined as number", function(){
            guiSessionTOUnderTest.sync(5000);
            sinon.assert.calledOnce(guiSessionTOUnderTest._executeCommand);
            sinon.assert.calledWith(guiSessionTOUnderTest._executeCommand, "Sync", 5000);
        });

        it("should execute the 'Sync' command with timeout value is defined as string", function(){
            guiSessionTOUnderTest.sync("5000");
            sinon.assert.calledOnce(guiSessionTOUnderTest._executeCommand);
            sinon.assert.calledWith(guiSessionTOUnderTest._executeCommand, "Sync", 5000);
        });
    });

    describe("reset method", function () {
        it("should execute command 'Reset' if there is no transaction code", function () {
            guiSessionTOUnderTest.reset();
            sinon.assert.calledOnce(guiSessionTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(guiSessionTOUnderTest._executeWithEvents, sinon.match({}), "Reset");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            guiSessionTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = guiSessionTOUnderTest.reset();
            assert.equal(res, executionPromise);
        });

        it("should execute command 'Reset' if transaction code is null", function () {
            guiSessionTOUnderTest.reset(null);
            sinon.assert.calledOnce(guiSessionTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(guiSessionTOUnderTest._executeWithEvents, sinon.match({}), "Reset");
        });

        it("should execute command 'Reset' with correct parameters", function () {
            guiSessionTOUnderTest.reset("reset");
            sinon.assert.calledOnce(guiSessionTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(guiSessionTOUnderTest._executeWithEvents, sinon.match({0: "reset"}), "Reset");
        });
    });

    describe("unsupported methods", function() {
        beforeEach(function () {
            sinon.stub(guiSessionTOUnderTest, "_throwUnsupportedErrorAsync");
        });

        ["highlight", "snapshot"].forEach(function(methodName) {
            it("should not support " + methodName, function() {
                var promiseMock = {};
                guiSessionTOUnderTest._throwUnsupportedErrorAsync.returns(promiseMock);

                var res = guiSessionTOUnderTest._throwUnsupportedErrorAsync();
                assert(guiSessionTOUnderTest._throwUnsupportedErrorAsync.calledOnce);
                assert.deepEqual(res, promiseMock);
            });
        });
    });
});
