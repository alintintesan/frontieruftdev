// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Button Description", function () {

    var Button = require("../lib/button.js").Button;
    var buttonDescriptionUnderTest;

    beforeEach(function () {
        buttonDescriptionUnderTest = Button();
    });

    describe("Constructor", function () {
        it("should assign 'SAPGUI' and 'Button' LeanFT type", function () {
            buttonDescriptionUnderTest = new Button();
            assert.deepEqual(buttonDescriptionUnderTest.leanFTType, {
                technology: "SAPGUI",
                leanftType: "Button"
            });
        });
    });

    describe("tooltip method", function () {
        it("should add 'Tooltip' to _properties when value is given", function () {
            buttonDescriptionUnderTest.tooltip("Tooltip");
            assert.strictEqual(buttonDescriptionUnderTest._properties["Tooltip"], "Tooltip");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = buttonDescriptionUnderTest.tooltip("Tooltip");
            assert.strictEqual(result, buttonDescriptionUnderTest);
        });

        it("should remove 'Tooltip' from _properties when value is null", function () {
            buttonDescriptionUnderTest._properties["Tooltip"] = "Tooltip";
            buttonDescriptionUnderTest.tooltip(null);
            assert(!("Tooltip" in buttonDescriptionUnderTest._properties));
        });

        it("should return the value of 'Tooltip' from _properties when value is not given", function () {
            buttonDescriptionUnderTest._properties["Tooltip"] = "Tooltip";
            var value = buttonDescriptionUnderTest.tooltip();
            assert.strictEqual(value, "Tooltip");
        });
    });

    describe("containerName method", function () {
        it("should add 'ContainerName' to _properties when value is given", function () {
            buttonDescriptionUnderTest.containerName("SomeName");
            assert.strictEqual(buttonDescriptionUnderTest._properties["ContainerName"], "SomeName");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = buttonDescriptionUnderTest.containerName("SomeName");
            assert.strictEqual(result, buttonDescriptionUnderTest);
        });

        it("should remove 'ContainerName' from _properties when value is null", function () {
            buttonDescriptionUnderTest._properties["ContainerName"] = "SomeName";
            buttonDescriptionUnderTest.containerName(null);
            assert(!("ContainerName" in buttonDescriptionUnderTest._properties));
        });

        it("should return the value of 'ContainerName' from _properties when value is not given", function () {
            buttonDescriptionUnderTest._properties["ContainerName"] = "SomeName";
            var value = buttonDescriptionUnderTest.containerName();
            assert.strictEqual(value, "SomeName");
        });
    });

    describe("text method", function () {
        it("should add 'Text' to _properties when value is given", function () {
            buttonDescriptionUnderTest.text("SomeText");
            assert.strictEqual(buttonDescriptionUnderTest._properties["Text"], "SomeText");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = buttonDescriptionUnderTest.text("SomeText");
            assert.strictEqual(result, buttonDescriptionUnderTest);
        });

        it("should remove 'Text' from _properties when value is null", function () {
            buttonDescriptionUnderTest._properties["ContainerName"] = "SomeText";
            buttonDescriptionUnderTest.text(null);
            assert(!("Text" in buttonDescriptionUnderTest._properties));
        });

        it("should return the value of 'Text' from _properties when value is not given", function () {
            buttonDescriptionUnderTest._properties["Text"] = "SomeText";
            var value = buttonDescriptionUnderTest.text();
            assert.strictEqual(value, "SomeText");
        });
    });

    describe("isEnabled method", function () {
        it("should add 'Enabled' to _properties when value is given", function () {
            buttonDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(buttonDescriptionUnderTest._properties["Enabled"], true);
        });

        it("should add 'Enabled' to _properties when value is given in string", function () {
            buttonDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(buttonDescriptionUnderTest._properties["Enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = buttonDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(result, buttonDescriptionUnderTest);
        });

        it("should remove 'Enabled' from _properties when value is null", function () {
            buttonDescriptionUnderTest._properties["Enabled"] = true;
            buttonDescriptionUnderTest.isEnabled(null);
            assert(!("Enabled" in buttonDescriptionUnderTest._properties));
        });

        it("should return the value of 'Enabled' from _properties when value is not given", function () {
            buttonDescriptionUnderTest._properties["Enabled"] = true;
            var result = buttonDescriptionUnderTest.isEnabled();
            assert.equal(result, true);
        });
    });
});

describe("Button Test Object", function () {
    var ButtonTO = require("../lib/button.js").ButtonTO;
    var buttonTestObjectUnderTest;

    beforeEach(function () {
        buttonTestObjectUnderTest = new ButtonTO();
        sinon.stub(buttonTestObjectUnderTest, "_getROProperty");
        sinon.stub(buttonTestObjectUnderTest, "_executeWithEvents");
    });

    describe("containerName method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            buttonTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = buttonTestObjectUnderTest.containerName();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'ContainerName' with correct parameters", function () {
            buttonTestObjectUnderTest.containerName();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "ContainerName", sinon.match({}));
        });
    });

    describe("text method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            buttonTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = buttonTestObjectUnderTest.text();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Text' with correct parameters", function () {
            buttonTestObjectUnderTest.text();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "Text", sinon.match({}));
        });
    });

    describe("tooltip method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            buttonTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = buttonTestObjectUnderTest.tooltip();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Tooltip' with correct parameters", function () {
            buttonTestObjectUnderTest.tooltip();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "Tooltip", sinon.match({}));
        });
    });

    describe("isEnabled method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            buttonTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = buttonTestObjectUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _getROProperty 'Enabled'", function () {
            buttonTestObjectUnderTest.isEnabled();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "Enabled", sinon.match({}));
        });
    });

    describe("click method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            buttonTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = buttonTestObjectUnderTest.click();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Click'", function () {
            buttonTestObjectUnderTest.click();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(buttonTestObjectUnderTest._executeWithEvents, sinon.match({}), "Click");
        });
    });

    describe("setFocus method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            buttonTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = buttonTestObjectUnderTest.setFocus();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SetFocus'", function () {
            buttonTestObjectUnderTest.setFocus();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(buttonTestObjectUnderTest._executeWithEvents, sinon.match({}), "SetFocus");
        });
    });
});
