// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("OKCode Description", function () {
    var OKCode = require("../lib/ok_code.js").OKCode;
    var okCodeDescriptionUnderTest;

    beforeEach(function () {
        okCodeDescriptionUnderTest = OKCode();
    });

    describe("Constructor", function () {
        it("should assign 'SAPGUI' and 'OKCode' LeanFT type", function () {
            okCodeDescriptionUnderTest = new OKCode();
            assert.deepEqual(okCodeDescriptionUnderTest.leanFTType, {
                technology: "SAPGUI",
                leanftType: "OKCode"
            });
        });
    });

    describe("value method", function () {
        it("should add 'value' to _properties when value is given", function () {
            okCodeDescriptionUnderTest.value("OKCodeValue");
            assert.strictEqual(okCodeDescriptionUnderTest._properties["value"], "OKCodeValue");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = okCodeDescriptionUnderTest.value("OKCodeValue");
            assert.strictEqual(result, okCodeDescriptionUnderTest);
        });

        it("should remove 'value' from _properties when value is null", function () {
            okCodeDescriptionUnderTest._properties["value"] = "OKCodeValue";
            okCodeDescriptionUnderTest.value(null);
            assert(!("value" in okCodeDescriptionUnderTest._properties));
        });

        it("should return the value of 'value' from _properties when value is not given", function () {
            okCodeDescriptionUnderTest._properties["value"] = "OKCodeValue";
            var value = okCodeDescriptionUnderTest.value();
            assert.strictEqual(value, "OKCodeValue");
        });
    });
});

describe("OKCode Test Object", function () {
    var OKCodeTO = require("../lib/ok_code.js").OKCodeTO;
    var okCodeTestObjectUnderTest;

    beforeEach(function () {
        okCodeTestObjectUnderTest = new OKCodeTO();
        sinon.stub(okCodeTestObjectUnderTest, "_getROProperty");
        sinon.stub(okCodeTestObjectUnderTest, "_executeWithEvents");
    });

    describe("value method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            okCodeTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = okCodeTestObjectUnderTest.value();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'value' with correct parameters", function () {
            okCodeTestObjectUnderTest.value();
            sinon.assert.calledOnce(okCodeTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(okCodeTestObjectUnderTest._getROProperty, "value", sinon.match({}));
        });
    });

    describe("setValue method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            okCodeTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = okCodeTestObjectUnderTest.setValue("OKCodeValue");
            assert.equal(res, executionPromise);
        });

        it("should throw error if position is undefined", function () {
            assert.throws(function () {
                okCodeTestObjectUnderTest.setValue();
            });
        });

        it("should throw error if position is null", function () {
            assert.throws(function () {
                okCodeTestObjectUnderTest.setValue(null);
            });
        });

        it("should execute _executeWithEvents 'Set' if position is defined", function () {
            okCodeTestObjectUnderTest.setValue("OKCodeValue");
            sinon.assert.calledOnce(okCodeTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(okCodeTestObjectUnderTest._executeWithEvents, sinon.match({ 0: "OKCodeValue"}), "Set", "OKCodeValue");
        });
    });
});
