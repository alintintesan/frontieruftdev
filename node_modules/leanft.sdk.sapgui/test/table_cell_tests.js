// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/15/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("Table Cell", function () {

    var TableCell = require("../lib/table_cell.js").TableCell;
    var tableCellUnderTest;
    var owner;

    beforeEach(function () {
        owner = { owner: "Owner", _getCellLength: sinon.stub(), _rowTransform: sinon.stub(), _columnTransform: sinon.stub(), _executeWithEventsOnItem: sinon.stub() };
        owner._rowTransform.returns(11);
        owner._columnTransform.returns("#1");
        tableCellUnderTest = new TableCell(owner, 10, 1);
    });

    afterEach(function () {
        delete owner._getCellLength;
        delete owner._rowTransform;
        delete owner._columnTransform;
        delete owner._executeWithEventsOnItem;
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            assert.deepEqual(tableCellUnderTest._ownerTable, owner);
            assert.strictEqual(tableCellUnderTest._rowNumber, 11);
            assert.strictEqual(tableCellUnderTest._columnIdentifier, "#1");
        });        
    });

    describe("length method", function () {
        it("should execute _getCellLength with correct parameter", function () {
            tableCellUnderTest.length();
            sinon.assert.calledOnce(tableCellUnderTest._ownerTable._getCellLength);
            sinon.assert.calledWith(tableCellUnderTest._ownerTable._getCellLength, 11, "#1");
        });

        it("should return number if _getCellLength returns number", function () {
            tableCellUnderTest._ownerTable._getCellLength.returns(20);;
            var res = tableCellUnderTest.length();
            assert.strictEqual(res, 20);
        });
    });    
});
