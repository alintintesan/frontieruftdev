// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/15/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("APO Grid Cell", function () {

    var APOGridCell = require("../lib/apogrid_cell.js").APOGridCell;
    var apoGridCellUnderTest;
    var owner;

    beforeEach(function () {
        owner = { owner: "Owner", _rowTransform: sinon.stub(), _columnTransform: sinon.stub(), _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub() };
        owner._rowTransform.returns(11);
        owner._columnTransform.returns("#1");
        apoGridCellUnderTest = new APOGridCell(owner, 10, 1);
        apoGridCellUnderTest._executeWithEventsOnItem = sinon.stub();
        apoGridCellUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    afterEach(function () {
        delete owner._rowTransform;
        delete owner._columnTransform;
        delete owner._executeWithEventsOnItem;
        delete apoGridCellUnderTest._executeWithEventsOnItem;
        delete apoGridCellUnderTest._executeWithEventsOnItemOnError;
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            assert.deepEqual(apoGridCellUnderTest._ownerTable, owner);
            assert.strictEqual(apoGridCellUnderTest._rowNumber, 11);
            assert.strictEqual(apoGridCellUnderTest._columnIdentifier, "#1");
        });        
    });

    describe("value method", function () {
        it("should execute _getCellData with correct parameter", function () {
            apoGridCellUnderTest._ownerTable._getCellData = sinon.stub();
            apoGridCellUnderTest.value();
            sinon.assert.calledOnce(apoGridCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(apoGridCellUnderTest._executeWithEventsOnItemOnError, apoGridCellUnderTest._ownerTable._getCellData, 11, "#1");
        });

        it("should return string if _getCellData returns string", function () {
            apoGridCellUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns("value");;
            var res = apoGridCellUnderTest.value();
            assert.strictEqual(res, "value");
        });
    });

    describe("isEditable method", function () {
        it("should execute _isCellEditable with correct parameter", function () {
            apoGridCellUnderTest._ownerTable._getCellData = sinon.stub();
            apoGridCellUnderTest.isEditable();
            sinon.assert.calledOnce(apoGridCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(apoGridCellUnderTest._executeWithEventsOnItemOnError, apoGridCellUnderTest._ownerTable._isCellEditable, 11, "#1");
        });

        it("should return bool if _isCellEditable returns bool", function () {
            apoGridCellUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = apoGridCellUnderTest.isEditable();
            assert.strictEqual(res, true);
        });
    });

    describe("format method", function () {
        it("should execute _getCellFormat with correct parameter", function () {
            apoGridCellUnderTest._ownerTable._getCellFormat = sinon.stub();
            apoGridCellUnderTest.format();
            sinon.assert.calledOnce(apoGridCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(apoGridCellUnderTest._executeWithEventsOnItemOnError, apoGridCellUnderTest._ownerTable._getCellFormat, 11, "#1");
        });

        it("should return string if _getCellFormat returns string", function () {
            apoGridCellUnderTest._executeWithEventsOnItemOnError = sinon.stub().returns("format");;
            var res = apoGridCellUnderTest.format();
            assert.strictEqual(res, "format");
        });
    });

    describe("selectMenuItem method", function () {
        it("should throw error if menuItem is undefined", function () {
            assert.throws(function () {
                apoGridCellUnderTest.selectMenuItem();
            });
        });

        it("should throw error if menuItem is null", function () {
            assert.throws(function () {
                apoGridCellUnderTest.selectMenuItem(null);
            });
        });

        it("should execute _selectCellMenuItem with correct parameter", function () {
            apoGridCellUnderTest.selectMenuItem("Menu");
            sinon.assert.calledOnce(apoGridCellUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(apoGridCellUnderTest._executeWithEventsOnItem, apoGridCellUnderTest._ownerTable._selectCellMenuItem, 11, "#1", "Menu");
        });

        it("should return the promise execution", function () {
            var promiseMock = {};
            apoGridCellUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = apoGridCellUnderTest.selectMenuItem("Menu");
            assert.equal(res, promiseMock);
        });
    });

    describe("setValue method", function () {
        it("should throw error if value is undefined", function () {
            assert.throws(function () {
                apoGridCellUnderTest.setValue();
            });
        });

        it("should throw error if value is null", function () {
            assert.throws(function () {
                apoGridCellUnderTest.setValue(null);
            });
        });

        it("should execute _setCellData with correct parameter", function () {
            apoGridCellUnderTest.setValue("Data");
            sinon.assert.calledOnce(apoGridCellUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(apoGridCellUnderTest._executeWithEventsOnItem, apoGridCellUnderTest._ownerTable._setCellData, 11, "#1", "Data");
        });

        it("should return the promise execution", function () {
            var promiseMock = {};
            apoGridCellUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = apoGridCellUnderTest.setValue("Data");
            assert.equal(res, promiseMock);
        });
    });
});
