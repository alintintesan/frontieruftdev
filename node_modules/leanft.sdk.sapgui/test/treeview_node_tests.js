// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/15/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("Tree View Node", function () {

    var TreeViewNode = require("../lib/treeview_node.js").TreeViewNode;
    var treeViewNodeUnderTest;
    var owner;

    beforeEach(function () {
        owner = { owner: "Owner", _executeWithEventsOnItem: sinon.stub() };
        owner._itemTransform = function (item) {
            if (typeof item === 'number')
                return "#" + (item + 1);
            return item;
        };
        treeViewNodeUnderTest = new TreeViewNode(owner, "Path");
        treeViewNodeUnderTest._executeWithEventsOnItem = sinon.stub();
    });

    afterEach(function () {
        delete treeViewNodeUnderTest._executeWithEventsOnItem;
        delete owner._executeWithEventsOnItem;
        delete owner._itemTransform;
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            assert.deepEqual(treeViewNodeUnderTest._ownerTreeView, owner);
            assert.strictEqual(treeViewNodeUnderTest._path, "Path");            
        });        
    });

    describe("path method", function () {
        it("should return correct values", function () {
            var res = treeViewNodeUnderTest.path();
            assert.strictEqual(res, "Path");            
        });
    });

    describe("collapse method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.collapse();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _collapseNode with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._collapseNode = sinon.stub();
            treeViewNodeUnderTest.collapse();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._collapseNode, "Path");
        });
    });

    describe("expand method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.expand();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _expandNode with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._expandNode = sinon.stub();
            treeViewNodeUnderTest.expand();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._expandNode, "Path");
        });
    });

    describe("clickButton method", function () {
        it("should throw error if itemOrIndex is undefined", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.clickButton();
            });
        });

        it("should throw error if itemOrIndex is null", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.clickButton(null);
            });
        });

        it("should execute _clickButton with correct parameter if itemOrIndex type is number", function () {
            treeViewNodeUnderTest._ownerTreeView._clickButton = sinon.stub();
            treeViewNodeUnderTest.clickButton(1);
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._clickButton, "Path", "#2");
        });

        it("should execute _clickButton with correct parameter if itemOrIndex type is string", function () {
            treeViewNodeUnderTest._ownerTreeView._clickButton = sinon.stub();
            treeViewNodeUnderTest.clickButton("Item");
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._clickButton, "Path", "Item");
        });

        it("should return the execution promise", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.clickButton(1);
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("clickLink method", function () {
        it("should throw error if itemOrIndex is undefined", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.clickLink();
            });
        });

        it("should throw error if itemOrIndex is null", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.clickLink(null);
            });
        });

        it("should execute _clickLink with correct parameter if itemOrIndex type is number", function () {
            treeViewNodeUnderTest._ownerTreeView._clickLink = sinon.stub();
            treeViewNodeUnderTest.clickLink(1);
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._clickLink, "Path", "#2");
        });

        it("should execute _clickLink with correct parameter if itemOrIndex type is string", function () {
            treeViewNodeUnderTest._ownerTreeView._clickLink = sinon.stub();
            treeViewNodeUnderTest.clickLink("Item");
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._clickLink, "Path", "Item");
        });

        it("should return the execution promise", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.clickLink(1);
            assert.strictEqual(res, promiseMock);
        });
    });


    describe("openItemContextMenu method", function () {
        it("should throw error if item is undefined", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.openItemContextMenu();
            });
        });

        it("should throw error if item is null", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.openItemContextMenu(null);
            });
        });

        it("should execute _openItemContextMenu with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._openItemContextMenu = sinon.stub();
            treeViewNodeUnderTest.openItemContextMenu("Item");
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._openItemContextMenu, "Path", "Item");
        });

        it("should return the execution promise", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.openItemContextMenu("Item");
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("openContextMenu method", function () {
        it("should execute _openNodeContextMenu with correct parameter", function () {
            treeViewNodeUnderTest._ownerTreeView._openNodeContextMenu = sinon.stub();
            treeViewNodeUnderTest.openContextMenu();
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._openNodeContextMenu, "Path");
        });

        it("should return the execution promise", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.openContextMenu();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("setCheckBoxState method", function () {
        it("should throw error if itemOrIndex is undefined", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.setCheckBoxState();
            });
        });

        it("should throw error if itemOrIndex is null", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.setCheckBoxState(null);
            });
        });

        it("should throw error if state is undefined", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.setCheckBoxState(1);
            });
        });

        it("should throw error if state is null", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.setCheckBoxState(1, null);
            });
        });

        it("should execute _setCheckBoxState with correct parameter if itemOrIndex is number", function () {
            treeViewNodeUnderTest._ownerTreeView._setCheckBoxState = sinon.stub();
            treeViewNodeUnderTest.setCheckBoxState(1, true);
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._setCheckBoxState, "Path", "#2", true);
        });

        it("should execute _setCheckBoxState with correct parameter if itemOrIndex is string", function () {
            treeViewNodeUnderTest._ownerTreeView._setCheckBoxState = sinon.stub();
            treeViewNodeUnderTest.setCheckBoxState("Item", true);
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._setCheckBoxState, "Path", "Item", true);
        });

        it("should execute _setCheckBoxState with correct parameter if string is string", function () {
            treeViewNodeUnderTest._ownerTreeView._setCheckBoxState = sinon.stub();
            treeViewNodeUnderTest.setCheckBoxState("Item", "true");
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._setCheckBoxState, "Path", "Item", true);
        });

        it("should return the execution promise", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.setCheckBoxState(1, true);
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("select method", function () {
        it("should throw error if itemOrIndex is undefined", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.select();
            });
        });

        it("should throw error if itemOrIndex is null", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.select(null);
            });
        });

        it("should execute _select with correct parameter if itemOrIndex type is number", function () {
            treeViewNodeUnderTest._ownerTreeView._selectItem = sinon.stub();
            treeViewNodeUnderTest.select(1);
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._selectItem, "Path", "#2");
        });

        it("should execute _select with correct parameter if itemOrIndex type is string", function () {
            treeViewNodeUnderTest._ownerTreeView._selectItem = sinon.stub();
            treeViewNodeUnderTest.select("Item");
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._selectItem, "Path", "Item");
        });

        it("should return the execution promise", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.select(1);
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("activateItem method", function () {
        it("should throw error if itemOrIndex is undefined", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.activateItem();
            });
        });

        it("should throw error if itemOrIndex is null", function () {
            assert.throws(function () {
                treeViewNodeUnderTest.activateItem(null);
            });
        });

        it("should execute _activateItem with correct parameter if itemOrIndex type is number", function () {
            treeViewNodeUnderTest._ownerTreeView._activateItem = sinon.stub();
            treeViewNodeUnderTest.activateItem(1);
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._activateItem, "Path", "#2");
        });

        it("should execute _activateItem with correct parameter if itemOrIndex type is string", function () {
            treeViewNodeUnderTest._ownerTreeView._activateItem = sinon.stub();
            treeViewNodeUnderTest.activateItem("Item");
            sinon.assert.calledOnce(treeViewNodeUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(treeViewNodeUnderTest._executeWithEventsOnItem, treeViewNodeUnderTest._ownerTreeView._activateItem, "Path", "Item");
        });

        it("should return the execution promise", function () {
            var promiseMock = {};
            treeViewNodeUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = treeViewNodeUnderTest.activateItem(1);
            assert.strictEqual(res, promiseMock);
        });
    });
});
