// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("StatusBar Description", function () {

    var ToolBar = require("../lib/tool_bar.js").ToolBar;
    var toolBarDescriptionUnderTest;

    beforeEach(function () {
        toolBarDescriptionUnderTest = ToolBar();
    });

    describe("Constructor", function () {
        it("should assign 'SAPGUI' and 'ToolBar' LeanFT type", function () {
            toolBarDescriptionUnderTest = new ToolBar();
            assert.deepEqual(toolBarDescriptionUnderTest.leanFTType, {
                technology: "SAPGUI",
                leanftType: "ToolBar"
            });
        });
    });

    describe("isEnabled method", function () {
        it("should add 'Enabled' to _properties when value is given", function () {
            toolBarDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(toolBarDescriptionUnderTest._properties["Enabled"], true);
        });

        it("should add 'Enabled' to _properties when value is given in string", function () {
            toolBarDescriptionUnderTest.isEnabled("true");
            assert.strictEqual(toolBarDescriptionUnderTest._properties["Enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = toolBarDescriptionUnderTest.isEnabled(true);
            assert.strictEqual(result, toolBarDescriptionUnderTest);
        });

        it("should remove 'Enabled' from _properties when value is null", function () {
            toolBarDescriptionUnderTest._properties["Enabled"] = true;
            toolBarDescriptionUnderTest.isEnabled(null);
            assert(!("Enabled" in toolBarDescriptionUnderTest._properties));
        });

        it("should return the value of 'Enabled' from _properties when value is not given", function () {
            toolBarDescriptionUnderTest._properties["Enabled"] = true;
            var result = toolBarDescriptionUnderTest.isEnabled();
            assert.equal(result, true);
        });
    });
});

describe("StatusBar Test Object", function () {
    var ToolBarTO = require("../lib/tool_bar.js").ToolBarTO;
    var toolBarTOUnderTest;

    beforeEach(function () {
        toolBarTOUnderTest = new ToolBarTO();
        sinon.stub(toolBarTOUnderTest, "_getROProperty");
        sinon.stub(toolBarTOUnderTest, "_executeWithEvents");
    });

    describe("isEnabled method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            toolBarTOUnderTest._getROProperty.returns(promiseMock);
            var res = toolBarTOUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _getROProperty 'Enabled'", function () {
            toolBarTOUnderTest.isEnabled();
            sinon.assert.calledOnce(toolBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(toolBarTOUnderTest._getROProperty, "Enabled", sinon.match({}));
        });
    });

    describe("pressButton method", function () {
        it("should throw error if button ID is undefined", function () {
            assert.throws(function () {
                toolBarTOUnderTest.pressButton();
            });
        });

        it("should throw error if button ID is null", function () {
            assert.throws(function () {
                toolBarTOUnderTest.pressButton(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = toolBarTOUnderTest.pressButton("id1");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'PressButton' if button ID is defined", function () {
            toolBarTOUnderTest.pressButton("id1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEvents, sinon.match({ 0: "id1" }), "PressButton", "id1");
        });
    });

    describe("pressContextButton method", function () {
        it("should throw error if button ID is undefined", function () {
            assert.throws(function () {
                toolBarTOUnderTest.pressContextButton();
            });
        });

        it("should throw error if button ID is null", function () {
            assert.throws(function () {
                toolBarTOUnderTest.pressContextButton(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = toolBarTOUnderTest.pressContextButton("id1");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'PressContextButton' if button ID is defined", function () {
            toolBarTOUnderTest.pressContextButton("id1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEvents, sinon.match({ 0: "id1" }), "PressContextButton", "id1");
        });
    });


    describe("selectMenuItem method", function () {
        it("should throw error if path is undefined", function () {
            assert.throws(function () {
                toolBarTOUnderTest.selectMenuItem();
            });
        });

        it("should throw error if path is null", function () {
            assert.throws(function () {
                toolBarTOUnderTest.selectMenuItem(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = toolBarTOUnderTest.selectMenuItem("menu1");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SelectMenuItem' if path is a number", function () {
            toolBarTOUnderTest.selectMenuItem(1);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEvents, sinon.match({ 0: 1 }), "SelectMenuItem", 2);
        });

        it("should execute _executeWithEvents 'SelectMenuItem' if path is a string", function () {
            toolBarTOUnderTest.selectMenuItem("path1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEvents, sinon.match({ 0: "path1" }), "SelectMenuItem", "path1");
        });
    });

    describe("selectMenuItemById method", function () {
        it("should throw error if id is undefined", function () {
            assert.throws(function () {
                toolBarTOUnderTest.selectMenuItemById();
            });
        });

        it("should throw error if id is null", function () {
            assert.throws(function () {
                toolBarTOUnderTest.selectMenuItemById(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = toolBarTOUnderTest.selectMenuItemById("id1");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SelectMenuItemById' if id is defined", function () {
            toolBarTOUnderTest.selectMenuItemById("id1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEvents, sinon.match({ 0: "id1" }), "SelectMenuItemById", "id1");
        });
    });

    describe("buildMenuPath method", function () {
        beforeEach(function () {
            sinon.stub(toolBarTOUnderTest, "_buildMenuPath");
        });

        afterEach(function () {
            toolBarTOUnderTest._buildMenuPath.restore();
        });

        it("should execute _buildMenuPath with correct parameters", function () {
            toolBarTOUnderTest.buildMenuPath(1,2,3,4, "Item");
            sinon.assert.calledOnce(toolBarTOUnderTest._buildMenuPath);
            sinon.assert.calledWith(toolBarTOUnderTest._buildMenuPath, 1, 2, 3, 4, "Item");
        });
    });
});
