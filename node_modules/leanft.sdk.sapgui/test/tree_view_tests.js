// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/15/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var MouseButton = Core.MouseButton;

describe("TreeView Description", function () {

    var TreeView = require("../lib/tree_view.js").TreeView;
    var TreeType = require("../lib/tree_view.js").TreeType;
    var TreeSelectionMode = require("../lib/tree_view.js").TreeSelectionMode;
    var treeViewDescUnderTest;

    beforeEach(function () {
        treeViewDescUnderTest = TreeView();
    });

    describe("isEnabled method", function () {
        it("should add 'Enabled' to _properties when value is given", function () {
            treeViewDescUnderTest.isEnabled(true);
            assert.strictEqual(treeViewDescUnderTest._properties["Enabled"], true);
        });

        it("should add 'Enabled' to _properties when value is given in string", function () {
            treeViewDescUnderTest.isEnabled("true");
            assert.strictEqual(treeViewDescUnderTest._properties["Enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescUnderTest.isEnabled(true);
            assert.strictEqual(result, treeViewDescUnderTest);
        });

        it("should remove 'Enabled' from _properties when value is null", function () {
            treeViewDescUnderTest._properties["Enabled"] = true;
            treeViewDescUnderTest.isEnabled(null);
            assert(!("Enabled" in treeViewDescUnderTest._properties));
        });

        it("should return the value of 'Enabled' from _properties when value is not given", function () {
            treeViewDescUnderTest._properties["Enabled"] = true;
            var result = treeViewDescUnderTest.isEnabled();
            assert.equal(result, true);
        });
    });

    describe("selectionMode method", function () {
        it("should add 'SelectionMode' to _properties when value is given", function () {
            treeViewDescUnderTest.selectionMode(TreeSelectionMode.treeSelectNodeSingle);
            assert.strictEqual(treeViewDescUnderTest._properties["SelectionMode"], "TreeSelectNodeSingle");
        });

        it("should add 'SelectionMode' to _properties when value is given in string", function () {
            treeViewDescUnderTest.selectionMode("TreeSelectNodeSingle");
            assert.strictEqual(treeViewDescUnderTest._properties["SelectionMode"], "TreeSelectNodeSingle");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescUnderTest.selectionMode(TreeSelectionMode.treeSelectNodeSingle);
            assert.strictEqual(result, treeViewDescUnderTest);
        });

        it("should remove 'SelectionMode' from _properties when value is null", function () {
            treeViewDescUnderTest._properties["SelectionMode"] = "TreeSelectNodeSingle";
            treeViewDescUnderTest.selectionMode(null);
            assert(!("SelectionMode" in treeViewDescUnderTest._properties));
        });

        it("should return the value of 'SelectionMode' from _properties when value is not given", function () {
            treeViewDescUnderTest._properties["SelectionMode"] = "TreeSelectNodeSingle";
            var result = treeViewDescUnderTest.selectionMode();
            assert.equal(result, "treeselectnodesingle");
        });
    });

    describe("treeType method", function () {
        it("should add 'TreeType' to _properties when value is given", function () {
            treeViewDescUnderTest.treeType(TreeType.simpleTree);
            assert.strictEqual(treeViewDescUnderTest._properties["TreeType"], "SapSimpleTree");
        });

        it("should add 'TreeType' to _properties when value is given in string", function () {
            treeViewDescUnderTest.treeType("SimpleTree");
            assert.strictEqual(treeViewDescUnderTest._properties["TreeType"], "SapSimpleTree");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescUnderTest.treeType(TreeType.simpleTree);
            assert.strictEqual(result, treeViewDescUnderTest);
        });

        it("should remove 'TreeType' from _properties when value is null", function () {
            treeViewDescUnderTest._properties["TreeType"] = "SapSimpleTree";
            treeViewDescUnderTest.treeType(null);
            assert(!("TreeType" in treeViewDescUnderTest._properties));
        });

        it("should return the value of 'TreeType' from _properties when value is not given", function () {
            treeViewDescUnderTest._properties["TreeType"] = "SapSimpleTree";
            var result = treeViewDescUnderTest.treeType();
            assert.equal(result, "simpletree");
        });
    });

    describe("selectedItem method", function () {
        it("should add 'SelectedItem' to _properties when value is given", function () {
            treeViewDescUnderTest.selectedItem("selected");
            assert.strictEqual(treeViewDescUnderTest._properties["SelectedItem"], "selected");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescUnderTest.selectedItem("selected");
            assert.strictEqual(result, treeViewDescUnderTest);
        });

        it("should remove 'SelectedItem' from _properties when value is null", function () {
            treeViewDescUnderTest._properties["SelectedItem"] = "selected";
            treeViewDescUnderTest.selectedItem(null);
            assert(!("SelectedItem" in treeViewDescUnderTest._properties));
        });

        it("should return the value of 'SelectedItem' from _properties when value is not given", function () {
            treeViewDescUnderTest._properties["SelectedItem"] = "selected";
            var selected = treeViewDescUnderTest.selectedItem();
            assert.equal(selected, "selected");
        });
    });

    describe("selectedNodePath method", function () {
        it("should add 'SelectedNode' to _properties when value is given", function () {
            treeViewDescUnderTest.selectedNodePath("selected");
            assert.strictEqual(treeViewDescUnderTest._properties["SelectedNode"], "selected");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescUnderTest.selectedNodePath("selected");
            assert.strictEqual(result, treeViewDescUnderTest);
        });

        it("should remove 'SelectedNode' from _properties when value is null", function () {
            treeViewDescUnderTest._properties["SelectedNode"] = "selected";
            treeViewDescUnderTest.selectedNodePath(null);
            assert(!("SelectedNode" in treeViewDescUnderTest._properties));
        });

        it("should return the value of 'SelectedNode' from _properties when value is not given", function () {
            treeViewDescUnderTest._properties["SelectedNode"] = "selected";
            var selected = treeViewDescUnderTest.selectedNodePath();
            assert.equal(selected, "selected");
        });
    });
    
});

describe("Tree View Test Object", function () {

    var TreeViewTO = require("../lib/tree_view.js").TreeViewTO;
    var TreeViewNode = require("../lib/treeview_node.js").TreeViewNode;
    var treeViewTOUnderTest;

    var removeExecutorMethods = function (array) {
        array.map(function (item) {
            delete item._executeWithEventsOnItem;
            delete item._executeWithEventsOnItemOnError;
        });
        return array;
    };

    beforeEach(function () {
        treeViewTOUnderTest = new TreeViewTO();
        sinon.stub(treeViewTOUnderTest, "_executeWithEvents");
        sinon.stub(treeViewTOUnderTest, "_getROProperty");
        sinon.stub(treeViewTOUnderTest, "_executeNotWrapped");
    });

    afterEach(function () {
        treeViewTOUnderTest._executeWithEvents.restore();
        treeViewTOUnderTest._getROProperty.restore();
        treeViewTOUnderTest._executeNotWrapped.restore();        
    });

    describe("isEnabled method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTOUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _getROProperty 'Enabled'", function () {
            treeViewTOUnderTest.isEnabled();
            sinon.assert.calledOnce(treeViewTOUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTOUnderTest._getROProperty, "Enabled", sinon.match({}));
        });
    });

    describe("selectedItem method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTOUnderTest.selectedItem();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _getROProperty 'SelectedItem'", function () {
            treeViewTOUnderTest.selectedItem();
            sinon.assert.calledOnce(treeViewTOUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTOUnderTest._getROProperty, "SelectedItem", sinon.match({}));
        });
    });

    describe("selectedNodePath method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTOUnderTest.selectedNodePath();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _getROProperty 'SelectedItem'", function () {
            treeViewTOUnderTest.selectedNodePath();
            sinon.assert.calledOnce(treeViewTOUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTOUnderTest._getROProperty, "SelectedNode", sinon.match({}));
        });
    });

    describe("selectionMode method", function () {

        it("should execute _getROProperty 'SelectionMode' with correct parameters", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("treeselectnodesingle");
                }
            };
            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            treeViewTOUnderTest.selectionMode();
            sinon.assert.calledOnce(treeViewTOUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTOUnderTest._getROProperty, "SelectionMode");
        });

        it("should return the correct TreeSelectionMode", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("TreeSelectNodeSingle");
                }
            };
            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTOUnderTest.selectionMode();

            assert.equal(res, "treeselectnodesingle");
        });
    });

    describe("treeType method", function () {

        it("should execute _getROProperty 'TreeType' with correct parameters", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("SapSimpleTree");
                }
            };
            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            treeViewTOUnderTest.treeType();
            sinon.assert.calledOnce(treeViewTOUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTOUnderTest._getROProperty, "TreeType");
        });

        it("should return the correct TreeType", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("SapSimpleTree");
                }
            };
            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTOUnderTest.treeType();

            assert.equal(res, "simpletree");
        });
    });

    describe("getNode method", function () {
        beforeEach(function () {
            sinon.stub(treeViewTOUnderTest, "_createItem");
        });

        afterEach(function () {
            treeViewTOUnderTest._createItem.restore();
        });

        it("should return null if path is undefined", function () {
            var res = treeViewTOUnderTest.getNode();
            assert.strictEqual(res, null);
        });

        it("should return null if path is null", function () {
            var res = treeViewTOUnderTest.getNode(null);
            assert.strictEqual(res, null);
        });

        it("should execute _createItem with correct parameters", function () {
            treeViewTOUnderTest.getNode("Item");
            sinon.assert.calledOnce(treeViewTOUnderTest._createItem);
            sinon.assert.calledWith(treeViewTOUnderTest._createItem, "Item");
        });
    });

    describe("activateNode method", function () {
        it("should throw error if nodeOrPath is undefined", function () {
            assert.throws(function () {
                treeViewTOUnderTest.activateNode();
            });
        });

        it("should throw error if nodeOrPath is null", function () {
            assert.throws(function () {
                treeViewTOUnderTest.activateNode(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = treeViewTOUnderTest.activateNode("Node");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'ActivateNode' if node is a string", function () {
            treeViewTOUnderTest.activateNode("identifier");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: "identifier" }), "ActivateNode", "identifier");
        });

        it("should execute _executeWithEvents 'ActivateNode' if node is an object", function () {
            var node = {}; node._path = "Path";
            treeViewTOUnderTest.activateNode(node);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: node }), "ActivateNode", "Path");
        });
    });

    describe("clickColumn method", function () {
        it("should throw error if columnOrIndex is undefined", function () {
            assert.throws(function () {
                treeViewTOUnderTest.clickColumn();
            });
        });

        it("should throw error if columnOrIndex is null", function () {
            assert.throws(function () {
                treeViewTOUnderTest.clickColumn(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = treeViewTOUnderTest.clickColumn(1);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'ClickColumn' if columnOrIndex is a string", function () {
            treeViewTOUnderTest.clickColumn("Column");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: "Column" }), "ClickColumn", "Column");
        });

        it("should execute _executeWithEvents 'ClickColumn' if columnOrIndex is an integer", function () {
            treeViewTOUnderTest.clickColumn(1);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: 1 }), "ClickColumn", "#2");
        });
    });

    describe("_itemTransform method", function () {
        it("should return the correct item if the item is number", function () {
            var res = treeViewTOUnderTest._itemTransform(1);
            assert.strictEqual(res, "#2");
        });

        it("should return the item as it is if the item is string", function () {
            var res = treeViewTOUnderTest._itemTransform("Item");
            assert.strictEqual(res, "Item");
        });
    });

    describe("selectNode method", function () {
        it("should throw error if nodeOrPath is undefined", function () {
            assert.throws(function () {
                treeViewTOUnderTest.selectNode();
            });
        });

        it("should throw error if nodeOrPath is null", function () {
            assert.throws(function () {
                treeViewTOUnderTest.selectNode(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = treeViewTOUnderTest.selectNode("Node");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SelectNode' if node is a string", function () {
            treeViewTOUnderTest.selectNode("identifier");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: "identifier" }), "SelectNode", "identifier");
        });

        it("should execute _executeWithEvents 'SelectNode' if node is an object", function () {
            var node = {}; node._path = "Path";
            treeViewTOUnderTest.selectNode(node);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: node }), "SelectNode", "Path");
        });
    });

    describe("openContextMenu method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = treeViewTOUnderTest.openContextMenu();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'OpenContextMenu' with correct parameters", function () {
            treeViewTOUnderTest.openContextMenu();
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({}), "OpenContextMenu");
        });
    });

    describe("openHeaderContextMenu method", function () {
        it("should throw error if columnOrIndex is undefined", function () {
            assert.throws(function () {
                treeViewTOUnderTest.openHeaderContextMenu();
            });
        });

        it("should throw error if columnOrIndex is null", function () {
            assert.throws(function () {
                treeViewTOUnderTest.openHeaderContextMenu(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = treeViewTOUnderTest.openHeaderContextMenu(1);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'OpenHeaderContextMenu' if columnOrIndex is a string", function () {
            treeViewTOUnderTest.openHeaderContextMenu("Column");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: "Column" }), "OpenHeaderContextMenu", "Column");
        });

        it("should execute _executeWithEvents 'OpenHeaderContextMenu' if columnOrIndex is an integer", function () {
            treeViewTOUnderTest.openHeaderContextMenu(1);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: 1 }), "OpenHeaderContextMenu", "#2");
        });
    });

    describe("selectMenuItemById method", function () {
        it("should throw error if menuItemId is undefined", function () {
            assert.throws(function () {
                treeViewTOUnderTest.selectMenuItemById();
            });
        });

        it("should throw error if menuItemId is null", function () {
            assert.throws(function () {
                treeViewTOUnderTest.selectMenuItemById(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = treeViewTOUnderTest.selectMenuItemById("Menu");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SelectMenuItemById' with correct parameters", function () {
            treeViewTOUnderTest.selectMenuItemById("Menu");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: "Menu" }), "SelectMenuItemById", "Menu");
        });
    });

    describe("pressEnter method", function () {

        it("should execute _executeWithEvents 'PressEnter' with correct parameters", function () {
            treeViewTOUnderTest.pressEnter();
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({}), "PressEnter");
        });

        it("should return the promise execution", function () {
            var promiseMock = {};
            treeViewTOUnderTest._executeWithEvents.returns(promiseMock);
            var res = treeViewTOUnderTest.pressEnter();
            assert.equal(res, promiseMock);
        });
    });

    describe("buildNodePath method", function () {
        beforeEach(function () {
            sinon.stub(treeViewTOUnderTest, "_buildMenuPath");
        });

        afterEach(function () {
            treeViewTOUnderTest._buildMenuPath.restore();
        });

        it("should execute _buildMenuPath with correct parameters", function () {
            treeViewTOUnderTest.buildNodePath(1,2,3,4, "Item");
            sinon.assert.calledOnce(treeViewTOUnderTest._buildMenuPath);
            sinon.assert.calledWith(treeViewTOUnderTest._buildMenuPath, 1, 2, 3, 4, "Item");
        });
    });

    describe("_collapseNode method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._collapseNode("Path");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Collapse' with correct parameters", function () {
            treeViewTOUnderTest._collapseNode("Path");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Path" }), "Collapse", "Path");
        });
    });

    describe("_expandNode method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._expandNode("Path");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Expand' with correct parameters", function () {
            treeViewTOUnderTest._expandNode("Path");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Path" }), "Expand", "Path");
        });
    });

    describe("_clickButton method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._clickButton("Path", "Item");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'ClickButton' with correct parameters", function () {
            treeViewTOUnderTest._clickButton("Path", "Item");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Path", 1: "Item" }), "ClickButton", "Path", "Item");
        });
    });

    describe("_clickLink method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._clickLink("Path", "Item");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'ClickLink' with correct parameters", function () {
            treeViewTOUnderTest._clickLink("Path", "Item");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Path", 1: "Item" }), "ClickLink", "Path", "Item");
        });
    });

    describe("_openItemContextMenu method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._openItemContextMenu("Path", "Item");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'OpenItemContextMenu' with correct parameters", function () {
            treeViewTOUnderTest._openItemContextMenu("Path", "Item");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Path", 1: "Item" }), "OpenItemContextMenu", "Path", "Item");
        });
    });

    describe("_openNodeContextMenu method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._openNodeContextMenu("Path");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'OpenNodeContextMenu' with correct parameters", function () {
            treeViewTOUnderTest._openNodeContextMenu("Path");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Path" }), "OpenNodeContextMenu", "Path");
        });
    });

    describe("_setCheckBoxState method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._setCheckBoxState("Path", "Item", true);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Set' with correct parameters", function () {
            treeViewTOUnderTest._setCheckBoxState("Path", "Item", true);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Path", 1: "Item", 2: true }), "Set", "Path", "Item", "ON");
        });
    });

    describe("_selectItem method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._selectItem("Path", "Item");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'SelectItem' with correct parameters", function () {
            treeViewTOUnderTest._selectItem("Path", "Item");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Path", 1: "Item" }), "SelectItem", "Path", "Item");
        });
    });

    describe("_activateItem method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._activateItem("Path", "Item");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'ActivateItem' with correct parameters", function () {
            treeViewTOUnderTest._activateItem("Path", "Item");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Path", 1: "Item" }), "ActivateItem", "Path", "Item");
        });
    });

    describe("_createItem method", function () {
        it("should return the TreeViewNode with correct values", function () {
            var res = treeViewTOUnderTest._createItem("Path");
            assert.strictEqual(res._path, "Path");
            assert.strictEqual(res._ownerTreeView, treeViewTOUnderTest);
        });
    });
    
});
