// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/15/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("Grid Cell", function () {

    var GridCell = require("../lib/grid_cell.js").GridCell;
    var gridCellUnderTest;
    var owner;

    beforeEach(function () {
        owner = { owner: "Owner", _setCheckBox: sinon.stub(), _rowTransform: sinon.stub(), _columnTransform: sinon.stub(), _executeWithEventsOnItem: sinon.stub() };
        owner._rowTransform.returns(11);
        owner._columnTransform.returns("#1");
        gridCellUnderTest = new GridCell(owner, 10, 1);
        sinon.stub(gridCellUnderTest, "_executeWithEventsOnItem");
    });

    afterEach(function () {
        delete owner._setCheckBox;
        delete owner._rowTransform;
        delete owner._columnTransform;
        delete owner._executeWithEventsOnItem;
        gridCellUnderTest._executeWithEventsOnItem.restore();
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            assert.deepEqual(gridCellUnderTest._ownerTable, owner);
            assert.strictEqual(gridCellUnderTest._rowNumber, 11);
            assert.strictEqual(gridCellUnderTest._columnIdentifier, "#1");
        });        
    });

    describe("setCheckBox method", function () {
        it("should throw error if state is undefined", function () {
            assert.throws(function () {
                gridCellUnderTest.setCheckBox();
            });
        });

        it("should throw error if state is null", function () {
            assert.throws(function () {
                gridCellUnderTest.setCheckBox(null);
            });
        });

        it("should execute _setCheckBox with correct parameter if state type is boolean", function () {
            gridCellUnderTest.setCheckBox(true);
            sinon.assert.calledOnce(gridCellUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(gridCellUnderTest._executeWithEventsOnItem, gridCellUnderTest._ownerTable._setCheckBox, 11, "#1", true);
        });

        it("should execute _setCheckBox with correct parameter if state type is string", function () {
            gridCellUnderTest.setCheckBox("true");
            sinon.assert.calledOnce(gridCellUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(gridCellUnderTest._executeWithEventsOnItem, gridCellUnderTest._ownerTable._setCheckBox, 11, "#1", true);
        });

        it("should return the promise execution", function () {
            var promiseMock = {};
            gridCellUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = gridCellUnderTest.setCheckBox("true");
            assert.equal(res, promiseMock);
        });
    });    
});
