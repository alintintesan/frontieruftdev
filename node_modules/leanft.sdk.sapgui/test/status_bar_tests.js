// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("StatusBar Description", function () {

    var StatusBar = require("../lib/status_bar.js").StatusBar;
    var StatusBarMessageType = require("../lib/status_bar.js").StatusBarMessageType;
    var statusBarDescriptionUnderTest;

    beforeEach(function () {
        statusBarDescriptionUnderTest = StatusBar();
    });

    describe("Constructor", function () {
        it("should assign 'SAPGUI' and 'StatusBar' LeanFT type", function () {
            statusBarDescriptionUnderTest = new StatusBar();
            assert.deepEqual(statusBarDescriptionUnderTest.leanFTType, {
                technology: "SAPGUI",
                leanftType: "StatusBar"
            });
        });
    });

    describe("text method", function () {
        it("should add 'Text' to _properties when value is given", function () {
            statusBarDescriptionUnderTest.text("SomeText");
            assert.strictEqual(statusBarDescriptionUnderTest._properties["Text"], "SomeText");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = statusBarDescriptionUnderTest.text("SomeText");
            assert.strictEqual(result, statusBarDescriptionUnderTest);
        });

        it("should remove 'Text' from _properties when value is null", function () {
            statusBarDescriptionUnderTest._properties["ContainerName"] = "SomeText";
            statusBarDescriptionUnderTest.text(null);
            assert(!("Text" in statusBarDescriptionUnderTest._properties));
        });

        it("should return the value of 'Text' from _properties when value is not given", function () {
            statusBarDescriptionUnderTest._properties["Text"] = "SomeText";
            var value = statusBarDescriptionUnderTest.text();
            assert.strictEqual(value, "SomeText");
        });
    });

    describe("isMessageAsPopup method", function () {
        it("should add 'MessageAsPopup' to _properties when value is given", function () {
            statusBarDescriptionUnderTest.isMessageAsPopup(true);
            assert.strictEqual(statusBarDescriptionUnderTest._properties["MessageAsPopup"], true);
        });

        it("should add 'MessageAsPopup' to _properties when value is given in string", function () {
            statusBarDescriptionUnderTest.isMessageAsPopup("true");
            assert.strictEqual(statusBarDescriptionUnderTest._properties["MessageAsPopup"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = statusBarDescriptionUnderTest.isMessageAsPopup(true);
            assert.strictEqual(result, statusBarDescriptionUnderTest);
        });

        it("should remove 'MessageAsPopup' from _properties when value is null", function () {
            statusBarDescriptionUnderTest._properties["MessageAsPopup"] = true;
            statusBarDescriptionUnderTest.isMessageAsPopup(null);
            assert(!("MessageAsPopup" in statusBarDescriptionUnderTest._properties));
        });

        it("should return the value of 'MessageAsPopup' from _properties when value is not given", function () {
            statusBarDescriptionUnderTest._properties["MessageAsPopup"] = true;
            var result = statusBarDescriptionUnderTest.isMessageAsPopup();
            assert.equal(result, true);
        });
    });

    describe("messageId method", function () {
        it("should add 'MessageId' to _properties when value is given", function () {
            statusBarDescriptionUnderTest.messageId("StatusMessageId");
            assert.strictEqual(statusBarDescriptionUnderTest._properties["MessageId"], "StatusMessageId");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = statusBarDescriptionUnderTest.messageId("StatusMessageId");
            assert.strictEqual(result, statusBarDescriptionUnderTest);
        });

        it("should remove 'MessageId' from _properties when value is null", function () {
            statusBarDescriptionUnderTest._properties["MessageId"] = "StatusMessageId";
            statusBarDescriptionUnderTest.messageId(null);
            assert(!("MessageId" in statusBarDescriptionUnderTest._properties));
        });

        it("should return the value of 'MessageId' from _properties when value is not given", function () {
            statusBarDescriptionUnderTest._properties["MessageId"] = "StatusMessageId";
            var value = statusBarDescriptionUnderTest.messageId();
            assert.strictEqual(value, "StatusMessageId");
        });
    });
    
    describe("messageNumber method", function () {
        it("should add 'MessageNumber' to _properties when value is given", function () {
            statusBarDescriptionUnderTest.messageNumber("StatusMessageNumber");
            assert.strictEqual(statusBarDescriptionUnderTest._properties["MessageNumber"], "StatusMessageNumber");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = statusBarDescriptionUnderTest.messageNumber("StatusMessageNumber");
            assert.strictEqual(result, statusBarDescriptionUnderTest);
        });

        it("should remove 'MessageNumber' from _properties when value is null", function () {
            statusBarDescriptionUnderTest._properties["MessageNumber"] = "StatusMessageNumber";
            statusBarDescriptionUnderTest.messageNumber(null);
            assert(!("MessageNumber" in statusBarDescriptionUnderTest._properties));
        });

        it("should return the value of 'MessageNumber' from _properties when value is not given", function () {
            statusBarDescriptionUnderTest._properties["MessageNumber"] = "StatusMessageNumber";
            var value = statusBarDescriptionUnderTest.messageNumber();
            assert.strictEqual(value, "StatusMessageNumber");
        });
    });

    describe("messageType method", function () {
        it("should add 'MessageType' to _properties when value is given as string", function () {
            statusBarDescriptionUnderTest.messageType("success");
            assert.equal(statusBarDescriptionUnderTest._properties["MessageType"], "success");
        });

        it("should add 'MessageType' to _properties when value is given with a message type", function () {
            statusBarDescriptionUnderTest.messageType(StatusBarMessageType.success);
            assert.equal(statusBarDescriptionUnderTest._properties["MessageType"], "success");
        });

        it("should return this - builder pattern when value is given", function () {
            var res = statusBarDescriptionUnderTest.messageType(StatusBarMessageType.success);
            assert.strictEqual(res, statusBarDescriptionUnderTest);
        });

        it("should remove 'MessageType' from _properties when value is null", function () {
            statusBarDescriptionUnderTest._properties["MessageType"] = "success";
            statusBarDescriptionUnderTest.messageType(null);
            assert(!("MessageType" in statusBarDescriptionUnderTest._properties));
        });

        it("should return the value of 'MessageType' from _properties when value is not given", function () {
            statusBarDescriptionUnderTest._properties["MessageType"] = "success";
            var result = statusBarDescriptionUnderTest.messageType();
            assert.equal(result, StatusBarMessageType.success);
        });
    });

});

describe("StatusBar Test Object", function () {
    var StatusBarTO = require("../lib/status_bar.js").StatusBarTO;
    var StatusBarMessageType = require("../lib/status_bar.js").StatusBarMessageType;
    var statusBarTOUnderTest;

    beforeEach(function () {
        statusBarTOUnderTest = new StatusBarTO();
        sinon.stub(statusBarTOUnderTest, "_getROProperty");
    });
    
    describe("isMessageAsPopup method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            statusBarTOUnderTest._getROProperty.returns(promiseMock);
            var res = statusBarTOUnderTest.isMessageAsPopup();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _getROProperty 'MessageAsPopup'", function () {
            statusBarTOUnderTest.isMessageAsPopup();
            sinon.assert.calledOnce(statusBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTOUnderTest._getROProperty, "MessageAsPopup", sinon.match({}));
        });
    });

    describe("messageId method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            statusBarTOUnderTest._getROProperty.returns(executionPromise);
            var res = statusBarTOUnderTest.messageId();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'MessageId' with correct parameters", function () {
            statusBarTOUnderTest.messageId();
            sinon.assert.calledOnce(statusBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTOUnderTest._getROProperty, "MessageId", sinon.match({}));
        });
    });

    describe("messageNumber method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            statusBarTOUnderTest._getROProperty.returns(executionPromise);
            var res = statusBarTOUnderTest.messageNumber();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'MessageNumber' with correct parameters", function () {
            statusBarTOUnderTest.messageNumber();
            sinon.assert.calledOnce(statusBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTOUnderTest._getROProperty, "MessageNumber", sinon.match({}));
        });
    });

    describe("text method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            statusBarTOUnderTest._getROProperty.returns(executionPromise);
            var res = statusBarTOUnderTest.text();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Text' with correct parameters", function () {
            statusBarTOUnderTest.text();
            sinon.assert.calledOnce(statusBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTOUnderTest._getROProperty, "Text", sinon.match({}));
        });
    });

    describe("messageType method", function () {
        beforeEach(function () {
            sinon.stub(StatusBarMessageType, "_nativeToStatusBarMessageType");
        });

        afterEach(function () {
            StatusBarMessageType._nativeToStatusBarMessageType.restore();
        });

        it("should call 'StatusBarMessageType._nativeToStatusBarMessageType'", function () {
            var executionPromise = {
                then: function (cb) {
                    return cb("E");
                }
            };
            statusBarTOUnderTest._getROProperty.returns(executionPromise);
            statusBarTOUnderTest.messageType();
            sinon.assert.calledOnce(StatusBarMessageType._nativeToStatusBarMessageType);
            sinon.assert.calledWith(StatusBarMessageType._nativeToStatusBarMessageType, "E");
        });

        it("should return correct value if 'StatusBarMessageType._nativeToStatusBarMessageType' is called", function () {
            var executionPromise = {
                then: function (cb) {
                    return cb("E");
                }
            };
            statusBarTOUnderTest._getROProperty.returns(executionPromise);
            StatusBarMessageType._nativeToStatusBarMessageType.returns("error");
            var res = statusBarTOUnderTest.messageType();
            assert.strictEqual(res, "error");
        });

        it("should execute _getROProperty 'MessageType' with correct parameters", function () {
            var executionPromise = {
                then: function (cb) {
                    return cb("E");
                }
            };
            statusBarTOUnderTest._getROProperty.returns(executionPromise);
            statusBarTOUnderTest.messageType();
            sinon.assert.calledOnce(statusBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(statusBarTOUnderTest._getROProperty, "MessageType", sinon.match({}));
        });
    });
});
