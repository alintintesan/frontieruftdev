// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/04/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;

describe("CellBaseOperationsBehavior", function () {

    var CellBaseOperationsBehavior = require("../lib/table_cell_base.js").CellBaseOperationsBehavior;
    var cellBaseOperationsBehaviorUnderTest;
    var owner;

    beforeEach(function () {
        owner = { owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _getCellLength: sinon.stub(), _getCellData: sinon.stub(), _isCellEditable: sinon.stub() };
        cellBaseOperationsBehaviorUnderTest = ObjectUtils.mergeTestBehavior(CellBaseOperationsBehavior);
        cellBaseOperationsBehaviorUnderTest._rowNumber = 10;
        cellBaseOperationsBehaviorUnderTest._columnIdentifier = "#1";
        cellBaseOperationsBehaviorUnderTest._ownerTable = owner;
        cellBaseOperationsBehaviorUnderTest._executeWithEventsOnItem = sinon.stub();        
    });

    afterEach(function () {
        delete cellBaseOperationsBehaviorUnderTest._executeWithEventsOnItem;
        delete owner._executeWithEventsOnItem;
        delete owner._getCellLength;
        delete owner._getCellData;
        delete owner._isCellEditable;
    });


    describe("value method", function () {
        it("should execute _getCellData with correct parameter", function () {
            cellBaseOperationsBehaviorUnderTest.value();
            sinon.assert.calledOnce(cellBaseOperationsBehaviorUnderTest._ownerTable._getCellData);
            sinon.assert.calledWith(cellBaseOperationsBehaviorUnderTest._ownerTable._getCellData, 10, "#1");
        });

        it("should return string if _getCellLength returns string", function () {
            cellBaseOperationsBehaviorUnderTest._ownerTable._getCellData.returns("value");;
            var res = cellBaseOperationsBehaviorUnderTest.value();
            assert.strictEqual(res, "value");
        });
    });

    describe("isEditable method", function () {
        it("should execute _isCellEditable with correct parameter", function () {
            cellBaseOperationsBehaviorUnderTest.isEditable();
            sinon.assert.calledOnce(cellBaseOperationsBehaviorUnderTest._ownerTable._isCellEditable);
            sinon.assert.calledWith(cellBaseOperationsBehaviorUnderTest._ownerTable._isCellEditable, 10, "#1");
        });

        it("should return bool if _isCellEditable returns bool", function () {
            cellBaseOperationsBehaviorUnderTest._ownerTable._isCellEditable.returns(true);;
            var res = cellBaseOperationsBehaviorUnderTest.isEditable();
            assert.strictEqual(res, true);
        });
    });

    describe("openPossibleEntries method", function () {
        it("should execute _openPossibleEntries with correct parameter", function () {
            cellBaseOperationsBehaviorUnderTest._ownerTable._openPossibleEntries = sinon.stub();
            cellBaseOperationsBehaviorUnderTest.openPossibleEntries();
            sinon.assert.calledOnce(cellBaseOperationsBehaviorUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(cellBaseOperationsBehaviorUnderTest._executeWithEventsOnItem, cellBaseOperationsBehaviorUnderTest._ownerTable._openPossibleEntries, 10, "#1");
        });
    });

    describe("click method", function () {
        it("should execute _clickCell with correct parameter", function () {
            cellBaseOperationsBehaviorUnderTest._ownerTable._clickCell = sinon.stub();
            cellBaseOperationsBehaviorUnderTest.click();
            sinon.assert.calledOnce(cellBaseOperationsBehaviorUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(cellBaseOperationsBehaviorUnderTest._executeWithEventsOnItem, cellBaseOperationsBehaviorUnderTest._ownerTable._clickCell, 10, "#1");
        });
    });

    describe("setValue method", function () {
        it("should throw error if value is undefined", function () {
            assert.throws(function () {
                cellBaseOperationsBehaviorUnderTest.setValue();
            });
        });

        it("should throw error if value is null", function () {
            assert.throws(function () {
                cellBaseOperationsBehaviorUnderTest.setValue(null);
            });
        });

        it("should execute _openPossibleEntries with correct parameter", function () {
            cellBaseOperationsBehaviorUnderTest._ownerTable._setCellData = sinon.stub();
            cellBaseOperationsBehaviorUnderTest.setValue("value");
            sinon.assert.calledOnce(cellBaseOperationsBehaviorUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(cellBaseOperationsBehaviorUnderTest._executeWithEventsOnItem, cellBaseOperationsBehaviorUnderTest._ownerTable._setCellData, 10, "#1", "value");
        });
    });
});
