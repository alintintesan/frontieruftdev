// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("TabControl Description", function () {

    var TabControl = require("../lib/tab_control.js").TabControl;
    var tabControlDescUnderTest;

    beforeEach(function () {
        tabControlDescUnderTest = TabControl();
    });

    describe("Constructor", function () {
        it("should assign 'SAPGUI' and 'TabControl' LeanFT type", function () {
            tabControlDescUnderTest = new TabControl();
            assert.deepEqual(tabControlDescUnderTest.leanFTType, {
                technology: "SAPGUI",
                leanftType: "TabControl"
            });
        });
    });

    describe("tooltip method", function () {
        it("should add 'Tooltip' to _properties when value is given", function () {
            tabControlDescUnderTest.tooltip("Tooltip");
            assert.strictEqual(tabControlDescUnderTest._properties["Tooltip"], "Tooltip");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = tabControlDescUnderTest.tooltip("Tooltip");
            assert.strictEqual(result, tabControlDescUnderTest);
        });

        it("should remove 'Tooltip' from _properties when value is null", function () {
            tabControlDescUnderTest._properties["Tooltip"] = "Tooltip";
            tabControlDescUnderTest.tooltip(null);
            assert(!("Tooltip" in tabControlDescUnderTest._properties));
        });

        it("should return the value of 'Tooltip' from _properties when value is not given", function () {
            tabControlDescUnderTest._properties["Tooltip"] = "Tooltip";
            var value = tabControlDescUnderTest.tooltip();
            assert.strictEqual(value, "Tooltip");
        });
    });


    describe("text method", function () {
        it("should add 'Text' to _properties when value is given", function () {
            tabControlDescUnderTest.text("SomeText");
            assert.strictEqual(tabControlDescUnderTest._properties["Text"], "SomeText");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = tabControlDescUnderTest.text("SomeText");
            assert.strictEqual(result, tabControlDescUnderTest);
        });

        it("should remove 'Text' from _properties when value is null", function () {
            tabControlDescUnderTest._properties["ContainerName"] = "SomeText";
            tabControlDescUnderTest.text(null);
            assert(!("Text" in tabControlDescUnderTest._properties));
        });

        it("should return the value of 'Text' from _properties when value is not given", function () {
            tabControlDescUnderTest._properties["Text"] = "SomeText";
            var value = tabControlDescUnderTest.text();
            assert.strictEqual(value, "SomeText");
        });
    });

    describe("isEnabled method", function () {
        it("should add 'Enabled' to _properties when value is given", function () {
            tabControlDescUnderTest.isEnabled(true);
            assert.strictEqual(tabControlDescUnderTest._properties["Enabled"], true);
        });

        it("should add 'Enabled' to _properties when value is given in string", function () {
            tabControlDescUnderTest.isEnabled("true");
            assert.strictEqual(tabControlDescUnderTest._properties["Enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tabControlDescUnderTest.isEnabled(true);
            assert.strictEqual(result, tabControlDescUnderTest);
        });

        it("should remove 'Enabled' from _properties when value is null", function () {
            tabControlDescUnderTest._properties["Enabled"] = true;
            tabControlDescUnderTest.isEnabled(null);
            assert(!("Enabled" in tabControlDescUnderTest._properties));
        });

        it("should return the value of 'Enabled' from _properties when value is not given", function () {
            tabControlDescUnderTest._properties["Enabled"] = true;
            var result = tabControlDescUnderTest.isEnabled();
            assert.equal(result, true);
        });
    });

    describe("selectedTab method", function () {
        it("should add 'SelectedItem' to _properties when value is given", function () {
            tabControlDescUnderTest.selectedTab("Tab1");
            assert.strictEqual(tabControlDescUnderTest._properties["SelectedItem"], "Tab1");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = tabControlDescUnderTest.selectedTab("Tab1");
            assert.strictEqual(result, tabControlDescUnderTest);
        });

        it("should remove 'SelectedItem' from _properties when value is null", function () {
            tabControlDescUnderTest._properties["SelectedItem"] = "Tab1";
            tabControlDescUnderTest.selectedTab(null);
            assert(!("SelectedItem" in tabControlDescUnderTest._properties));
        });

        it("should return the value of 'SelectedItem' from _properties when value is not given", function () {
            tabControlDescUnderTest._properties["SelectedItem"] = "Tab1";
            var value = tabControlDescUnderTest.selectedTab();
            assert.strictEqual(value, "Tab1");
        });
    });
});

describe("TabControl Test Object", function () {
    var TabControlTO = require("../lib/tab_control.js").TabControlTO;
    var tabControlTOUnderTest;

    beforeEach(function () {
        tabControlTOUnderTest = new TabControlTO();
        sinon.stub(tabControlTOUnderTest, "_getROProperty");
        sinon.stub(tabControlTOUnderTest, "_executeWithEvents");
    });

    describe("text method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tabControlTOUnderTest._getROProperty.returns(executionPromise);
            var res = tabControlTOUnderTest.text();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Text' with correct parameters", function () {
            tabControlTOUnderTest.text();
            sinon.assert.calledOnce(tabControlTOUnderTest._getROProperty);
            sinon.assert.calledWith(tabControlTOUnderTest._getROProperty, "Text", sinon.match({}));
        });
    });

    describe("tooltip method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tabControlTOUnderTest._getROProperty.returns(executionPromise);
            var res = tabControlTOUnderTest.tooltip();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Tooltip' with correct parameters", function () {
            tabControlTOUnderTest.tooltip();
            sinon.assert.calledOnce(tabControlTOUnderTest._getROProperty);
            sinon.assert.calledWith(tabControlTOUnderTest._getROProperty, "Tooltip", sinon.match({}));
        });
    });

    describe("isEnabled method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            tabControlTOUnderTest._getROProperty.returns(promiseMock);
            var res = tabControlTOUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _getROProperty 'Enabled'", function () {
            tabControlTOUnderTest.isEnabled();
            sinon.assert.calledOnce(tabControlTOUnderTest._getROProperty);
            sinon.assert.calledWith(tabControlTOUnderTest._getROProperty, "Enabled", sinon.match({}));
        });
    });

    describe("selectedTab method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tabControlTOUnderTest._getROProperty.returns(executionPromise);
            var res = tabControlTOUnderTest.selectedTab();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'SelectedItem' with correct parameters", function () {
            tabControlTOUnderTest.selectedTab();
            sinon.assert.calledOnce(tabControlTOUnderTest._getROProperty);
            sinon.assert.calledWith(tabControlTOUnderTest._getROProperty, "SelectedItem", sinon.match({}));
        });
    });

    describe("select method", function () {
        it("should throw error if tab is undefined", function () {
            assert.throws(function () {
                tabControlTOUnderTest.select();
            });
        });

        it("should throw error if tab is null", function () {
            assert.throws(function () {
                tabControlTOUnderTest.select(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tabControlTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = tabControlTOUnderTest.select("tab10");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Select' if tab is a number", function () {
            tabControlTOUnderTest.select(10);
            sinon.assert.calledOnce(tabControlTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Select", "#11");
        });

        it("should execute _executeWithEvents 'Select' if tab is a string", function () {
            tabControlTOUnderTest.select("tab10");
            sinon.assert.calledOnce(tabControlTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTOUnderTest._executeWithEvents, sinon.match({ 0: "tab10" }), "Select", "tab10");
        });
    });

    describe("setFocus method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tabControlTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = tabControlTOUnderTest.setFocus();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SetFocus'", function () {
            tabControlTOUnderTest.setFocus();
            sinon.assert.calledOnce(tabControlTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(tabControlTOUnderTest._executeWithEvents, sinon.match({}), "SetFocus");
        });
    });
});
