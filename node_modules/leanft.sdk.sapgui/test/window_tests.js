// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var ScrollOrientation = Core.ScrollOrientation;

describe("Window Description", function () {

    var Window = require("../lib/window.js").Window;
    var windowDescriptionUnderTest;

    beforeEach(function () {
        windowDescriptionUnderTest = Window();
    });

    describe("Constructor", function () {
        it("should assign 'SAPGUI' and 'Window' LeanFT type", function () {
            windowDescriptionUnderTest = new Window();
            assert.deepEqual(windowDescriptionUnderTest.leanFTType, {
                technology: "SAPGUI",
                leanftType: "Window"
            });
        });
    });

    describe("text method", function () {
        it("should add 'Text' to _properties when value is given", function () {
            windowDescriptionUnderTest.text("SAPGUIWindowText");
            assert.strictEqual(windowDescriptionUnderTest._properties["Text"], "SAPGUIWindowText");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = windowDescriptionUnderTest.text("SAPGUIWindowText");
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'Text' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["Text"] = "SAPGUIWindowText";
            windowDescriptionUnderTest.text(null);
            assert(!("Text" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'Text' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["Text"] = "SAPGUIWindowText";
            var value = windowDescriptionUnderTest.text();
            assert.strictEqual(value, "SAPGUIWindowText");
        });
    });

    describe("workingPaneSize method", function () {
        it("should return this - builder", function () {
            var res = windowDescriptionUnderTest.workingPaneSize({});
            assert.strictEqual(res, windowDescriptionUnderTest);
        });

        it("should add width to flatter when only width given", function () {
            windowDescriptionUnderTest.workingPaneSize({
                width: 5
            });

            assert.strictEqual(windowDescriptionUnderTest._properties["WorkingPaneSize"].width, 5);
            assert(!("height" in windowDescriptionUnderTest._properties["WorkingPaneSize"]));
        });

        it("should add height to flatter when only height given", function () {
            windowDescriptionUnderTest.workingPaneSize({
                height: 5
            });

            assert.strictEqual(windowDescriptionUnderTest._properties["WorkingPaneSize"].height, 5);
            assert(!("width" in windowDescriptionUnderTest._properties["WorkingPaneSize"]));
        });

        it("should add width and height to flatter when both width and height given", function () {
            windowDescriptionUnderTest.workingPaneSize({
                "width": 3,
                "height": 5
            });

            assert.strictEqual(windowDescriptionUnderTest._properties["WorkingPaneSize"].width, 3);
            assert.strictEqual(windowDescriptionUnderTest._properties["WorkingPaneSize"].height, 5);
        });

        it("should have correct values if get after set", function () {
            windowDescriptionUnderTest.workingPaneSize({
                width: 3,
                height: 5
            });

            var res = windowDescriptionUnderTest.workingPaneSize();

            assert.strictEqual(res.width, 3);
            assert.strictEqual(res.height, 5);
        });

        it("should modify value of width and leave height as is if modify value of width after its set", function () {
            windowDescriptionUnderTest.workingPaneSize({
                width: 3,
                height: 5
            });

            windowDescriptionUnderTest.workingPaneSize().width = 8;

            assert.strictEqual(windowDescriptionUnderTest._properties["WorkingPaneSize"].width, 8);
            assert.strictEqual(windowDescriptionUnderTest._properties["WorkingPaneSize"].height, 5);
        });

        it("should return an object without width or height but not null if get without set ", function () {
            var res = windowDescriptionUnderTest.workingPaneSize();

            assert.notStrictEqual(res, null);
            assert(!("width" in res));
            assert(!("height" in res));
        });

        it("should set the width value on the flatter if setting width without setting size value", function () {
            windowDescriptionUnderTest.workingPaneSize().width = 5;

            var res = windowDescriptionUnderTest.workingPaneSize();

            assert.notStrictEqual(res, null);
            assert.strictEqual(res.width, 5);
        });

        it("should not delete it but reset its value if setting size to null", function () {
            windowDescriptionUnderTest.workingPaneSize(null);

            var res = windowDescriptionUnderTest.workingPaneSize();

            assert.notStrictEqual(res, null);
            assert(!("width" in res));
            assert(!("height" in res));
        });

        it("should have correct keys map", function () {
            var res = windowDescriptionUnderTest.workingPaneSize();

            assert.deepEqual(res._keysMap, {
                width: "WorkingPaneWidth",
                height: "WorkingPaneHeight"
            });
        });
    });

    describe("isMinimized method", function () {
        it("should add 'Iconic' to _properties when value is given", function () {
            windowDescriptionUnderTest.isMinimized(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["Iconic"], true);
        });

        it("should add 'Iconic' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isMinimized("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["Iconic"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isMinimized(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'Iconic' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["Iconic"] = true;
            windowDescriptionUnderTest.isMinimized(null);
            assert(!("Iconic" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'Iconic' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["Iconic"] = true;
            var result = windowDescriptionUnderTest.isMinimized();
            assert.equal(result, true);
        });
    });

    describe("transaction method", function () {
        it("should add 'Transaction' to _properties when value is given", function () {
            windowDescriptionUnderTest.transaction("SAPGUITransaction");
            assert.strictEqual(windowDescriptionUnderTest._properties["Transaction"], "SAPGUITransaction");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = windowDescriptionUnderTest.transaction("SAPGUITransaction");
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'Transaction' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["Transaction"] = "SAPGUITransaction";
            windowDescriptionUnderTest.transaction(null);
            assert(!("Transaction" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'Transaction' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["Transaction"] = "SAPGUITransaction";
            var value = windowDescriptionUnderTest.transaction();
            assert.strictEqual(value, "SAPGUITransaction");
        });
    });

    describe("screenNumber method", function () {
        it("should add 'ScreenNumber' to _properties when value is given", function () {
            windowDescriptionUnderTest.screenNumber(100);
            assert.strictEqual(windowDescriptionUnderTest._properties["ScreenNumber"], 100);
        });

        it("should add 'ScreenNumber' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.screenNumber("100");
            assert.strictEqual(windowDescriptionUnderTest._properties["ScreenNumber"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.screenNumber(100);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'ScreenNumber' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["ScreenNumber"] = 100;
            windowDescriptionUnderTest.screenNumber(null);
            assert(!("ScreenNumber" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'ScreenNumber' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["ScreenNumber"] = 100;
            var result = windowDescriptionUnderTest.screenNumber();
            assert.equal(result, 100);
        });
    });

    describe("program method", function () {
        it("should add 'Program' to _properties when value is given", function () {
            windowDescriptionUnderTest.program("SAPGUIProgram");
            assert.strictEqual(windowDescriptionUnderTest._properties["Program"], "SAPGUIProgram");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = windowDescriptionUnderTest.program("SAPGUIProgram");
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'Program' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["Program"] = "SAPGUIProgram";
            windowDescriptionUnderTest.program(null);
            assert(!("Program" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'Program' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["Program"] = "SAPGUIProgram";
            var value = windowDescriptionUnderTest.program();
            assert.strictEqual(value, "SAPGUIProgram");
        });
    });
});

describe("Window Test Object", function () {
    var Core = require("leanft.sdk.core");
   // var MouseButton = Core.MouseButton;
    var WindowTO = require("../lib/window.js").WindowTO;
    var windowTestObjectUnderTest;

    beforeEach(function () {
        windowTestObjectUnderTest = new WindowTO();
        sinon.stub(windowTestObjectUnderTest, "_getROProperty");
        sinon.stub(windowTestObjectUnderTest, "_executeWithEvents");
        sinon.stub(windowTestObjectUnderTest, "_getROProperties");
    });

    afterEach(function () {
    });

    describe("text method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            windowTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = windowTestObjectUnderTest.text();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Text' with correct parameters", function () {
            windowTestObjectUnderTest.text();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "Text", sinon.match({}));
        });
    });

    describe("workingPaneSize method", function () {
        it("should query the properties 'WorkingPaneWidth', 'WorkingPaneHeight'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([100,200]);
                }
            };
            windowTestObjectUnderTest._getROProperties.returns(promiseMock);
            windowTestObjectUnderTest.workingPaneSize();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperties);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperties, "WorkingPaneWidth", "WorkingPaneHeight");
        });
        it("should return full workingPaneSize", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([100,200]);
                }
            };
            windowTestObjectUnderTest._getROProperties.returns(promiseMock);
            var res = windowTestObjectUnderTest.workingPaneSize();
            assert.deepEqual(res, {
                width: 100,
                height: 200,
            });
        });
    });

    describe("isMinimized method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.isMinimized();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _getROProperty 'Iconic'", function () {
            windowTestObjectUnderTest.isMinimized();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "Iconic", sinon.match({}));
        });
    });

    describe("transaction method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            windowTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = windowTestObjectUnderTest.transaction();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Transaction' with correct parameters", function () {
            windowTestObjectUnderTest.transaction();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "Transaction", sinon.match({}));
        });
    });

    describe("screenNumber method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            windowTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = windowTestObjectUnderTest.screenNumber();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'ScreenNumber' with correct parameters", function () {
            windowTestObjectUnderTest.screenNumber();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "ScreenNumber", sinon.match({}));
        });
    });

    describe("program method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            windowTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = windowTestObjectUnderTest.program();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Program' with correct parameters", function () {
            windowTestObjectUnderTest.program();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "Program", sinon.match({}));
        });
    });

    describe("scroll method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            windowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = windowTestObjectUnderTest.scroll(ScrollOrientation.horizontalScroll, 50);
            assert.equal(res, executionPromise);
        });

        it("should throw error if orientation is undefined", function () {
            assert.throws(function () {
                windowTestObjectUnderTest.scroll();
            });
        });

        it("should throw error if orientation is null", function () {
            assert.throws(function () {
                windowTestObjectUnderTest.scroll(null);
            });
        });

        it("should throw error if position is undefined", function () {
            assert.throws(function () {
                windowTestObjectUnderTest.scroll(ScrollOrientation.verticalScroll);
            });
        });

        it("should throw error if position is null", function () {
            assert.throws(function () {
                windowTestObjectUnderTest.scroll(ScrollOrientation.verticalScroll, null);
            });
        });

        it("should execute command 'VerticalScrollbarPosition' if orientation is ScrollOrientation.verticalScroll", function () {
            windowTestObjectUnderTest.scroll(ScrollOrientation.verticalScroll, 100);
            sinon.assert.calledOnce(windowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTestObjectUnderTest._executeWithEvents, sinon.match({ 0: ScrollOrientation.verticalScroll, 1: 100 }), "VerticalScrollbarPosition", 100);
        });

        it("should execute command 'HorizontalScrollbarPosition' if orientation is ScrollOrientation.horizontalScroll", function () {
            windowTestObjectUnderTest.scroll(ScrollOrientation.horizontalScroll, 100);
            sinon.assert.calledOnce(windowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTestObjectUnderTest._executeWithEvents, sinon.match({ 0: ScrollOrientation.horizontalScroll, 1: 100 }), "HorizontalScrollbarPosition", 100);
        });

        it("should execute command 'VerticalScrollbarPosition' if orientation is ScrollOrientation.verticalScroll and position is defined as string", function () {
            windowTestObjectUnderTest.scroll(ScrollOrientation.verticalScroll, "100");
            sinon.assert.calledOnce(windowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTestObjectUnderTest._executeWithEvents, sinon.match({ 0: ScrollOrientation.verticalScroll, 1: "100" }), "VerticalScrollbarPosition", 100);
        });
    });

    describe("activate method", function () {
        it("should execute _executeWithEvents 'Activate'", function () {
            windowTestObjectUnderTest.activate();
            sinon.assert.calledOnce(windowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTestObjectUnderTest._executeWithEvents, sinon.match({}), "Activate");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            windowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = windowTestObjectUnderTest.activate();
            assert.equal(res, executionPromise);
        });
    });
    
    describe("selectMenuItemById method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            windowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = windowTestObjectUnderTest.selectMenuItemById(50);
            assert.equal(res, executionPromise);
        });

        it("should throw error if menu ID is undefined", function () {
            assert.throws(function () {
                windowTestObjectUnderTest.selectMenuItemById();
            });
        });

        it("should throw error if menu ID is null", function () {
            assert.throws(function () {
                windowTestObjectUnderTest.selectMenuItemById(null);
            });
        });

        it("should execute _executeWithEvents 'SelectMenuItemById' if menuItem Id is defined", function () {
            windowTestObjectUnderTest.selectMenuItemById("50");
            sinon.assert.calledOnce(windowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTestObjectUnderTest._executeWithEvents, sinon.match({ 0: "50" }), "SelectMenuItemById", "50");
        });
    });

    describe("sendKey method", function () {
        var SapFunctionKey = require("../lib/sap_function_key.js").SapFunctionKey;

        beforeEach(function () {
            sinon.stub(SapFunctionKey, "_sapFunctionKeyToNative");
        });

        afterEach(function () {
            SapFunctionKey._sapFunctionKeyToNative.restore();
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            windowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = windowTestObjectUnderTest.sendKey("f10");
            assert.equal(res, executionPromise);
        });

        it("should throw error if key is undefined", function () {
            assert.throws(function () {
                windowTestObjectUnderTest.sendKey();
            });
        });

        it("should throw error if key is null", function () {
            assert.throws(function () {
                windowTestObjectUnderTest.sendKey(null);
            });
        });

        it("should call 'SapFunctionKey._sapFunctionKeyToNative' with correct parameters", function () {
            windowTestObjectUnderTest.sendKey("f10");
            sinon.assert.calledOnce(SapFunctionKey._sapFunctionKeyToNative);
            sinon.assert.calledWith(SapFunctionKey._sapFunctionKeyToNative, "f10");
        });

        it("should execute '_executeWithEvents' SendKey with correct parameters", function () {
            SapFunctionKey._sapFunctionKeyToNative.returns(10);
            windowTestObjectUnderTest.sendKey("f10");
            sinon.assert.calledOnce(windowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTestObjectUnderTest._executeWithEvents, sinon.match({ 0: "f10" }), "SendKey", 10);
        });

        it("should execute '_executeWithEvents' SendKey with key is enum in SapFunctionKey", function () {
            SapFunctionKey._sapFunctionKeyToNative.returns(10);
            windowTestObjectUnderTest.sendKey(SapFunctionKey.f10);
            sinon.assert.calledOnce(windowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTestObjectUnderTest._executeWithEvents, sinon.match({ 0: "f10" }), "SendKey", 10);
        });
    });

});
