// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var sinon = require("sinon");
var assert = require("assert");
var GuiSessionFactory = require("../lib/gui_session_factory.js").GuiSessionFactory;
var GuiSession = require("../lib/gui_session.js").GuiSession;
var GuiSessionTO = require("../lib/gui_session.js").GuiSessionTO;


describe("GuiSessionFactory",function(){
    var guiSessionFactoryUnderTest;
    var sessionMock;
    beforeEach(function(){
        sinon.stub(GuiSessionTO.prototype.__super,"$");
        sessionMock = {
            _communication: {
                send: sinon.stub()
            },
            fireEvent: sinon.stub(),
            _promiseManager: {wrapPromiseFunctionWithNotifyEvents: function () {} }
        };

        sinon.stub(sessionMock._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
        guiSessionFactoryUnderTest = new GuiSessionFactory(sessionMock);
    });

    afterEach(function(){
        GuiSessionTO.prototype.__super.$.restore();
    })

    describe("_createDataToLaunchSession method",function(){
        it("should throw error if client is null but username and password are not null", function () {
            assert.throws(function () {
                guiSessionFactoryUnderTest._createDataToLaunchSession(null, "user", "password");
            });
        });

        it("should throw error if client and username are null but password is not null", function () {
            assert.throws(function () {
                guiSessionFactoryUnderTest._createDataToLaunchSession(null, null, "password");
            });
        });

        it("should throw error if client is not null but and username and password are null", function () {
            assert.throws(function () {
                guiSessionFactoryUnderTest._createDataToLaunchSession("client", null, null);
            });
        });

        it("should throw error if client and username are not null but password is null", function () {
            assert.throws(function () {
                guiSessionFactoryUnderTest._createDataToLaunchSession("client", "username", null);
            });
        });

        it("should return the value from _createDataToLaunchSession when values are null", function () {
            var result = guiSessionFactoryUnderTest._createDataToLaunchSession(null, null, null);
            var expected = {
                "type": "SAPGuiSession",
                "launch info": {
                    "LaunchType": "Connection Only"
                }
            };
            assert.deepEqual(result, expected);
        });

        it("should return the value from _createDataToLaunchSession when values are not given", function () {
            var result = guiSessionFactoryUnderTest._createDataToLaunchSession();
            var expected = {
                "type": "SAPGuiSession",
                "launch info": {
                    "LaunchType": "Connection Only"
                }
            };
            assert.deepEqual(result, expected);
        });

        it("should return the value from _createDataToLaunchSession when values are given", function () {
            var result = guiSessionFactoryUnderTest._createDataToLaunchSession("client", "username", "password", "jp");
            var expected = {
                "type": "SAPGuiSession",
                "launch info": {
                    "LaunchType": "AutoLogon",
                    "client": "client",
                    "user": "username",
                    "password": "password",
                    "language": "jp"
                }
            };
            assert.deepEqual(result, expected);
        });

        it("should return the value of language is 'en' from _createDataToLaunchSession when value of language is not given", function () {
            var result = guiSessionFactoryUnderTest._createDataToLaunchSession("client", "username", "password");
            var expected = {
                "type": "SAPGuiSession",
                "launch info": {
                    "LaunchType": "AutoLogon",
                    "client": "client",
                    "user": "username",
                    "password": "password",
                    "language": "en"
                }
            };
            assert.deepEqual(result, expected);
        });
    });

    describe("launch method",function(){
        var launchPromise;
        var funcPromise;
        beforeEach(function(){
            launchPromise = {
                then: sinon.stub()
            };
            funcPromise = {
                then: sinon.stub()
            };
            sessionMock._communication.send.returns(launchPromise);
            launchPromise.then.returns(funcPromise);
        });

        it("should throw error if serverDescription is undefined", function () {
            assert.throws(function () {
                guiSessionFactoryUnderTest.launch();
            });
        });

        it("should throw error if serverDescription is null", function () {
            assert.throws(function () {
                guiSessionFactoryUnderTest.launch(null);
            });
        });

        it("should send the launch message if only serverDescription is defined",function(){
            guiSessionFactoryUnderTest.launch("ServerDescription");
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "LaunchApplication", {
                "type": "SAPGuiSession",
                "launch info": {
                    "ServerDescription": "ServerDescription",
                    "LaunchType": "Connection Only"
                }
            });

        });

        it("should send the launch message if all parameters are defined",function(){
            guiSessionFactoryUnderTest.launch("ServerDescription", "client", "username", "password", "en");
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "LaunchApplication", {
                "type": "SAPGuiSession",
                "launch info": {
                    "ServerDescription": "ServerDescription",
                    "LaunchType": "AutoLogon",
                    "client": "client",
                    "user": "username",
                    "password": "password",
                    "language": "en"
                }
            });
        });

        it("should throw error in case the launch result is null",function(){
            launchPromise.then = function(cb) {
                 return cb(null);
            };
            assert.throws(function(){
                guiSessionFactoryUnderTest.launch("ServerDescription");
            });
        });

        it("should create a new gui session with the given cookie",function(){
            guiSessionFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };

            launchPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42
                });
            };

            funcPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            var res = guiSessionFactoryUnderTest.launch("ServerDescription");
            assert(res instanceof GuiSessionTO);
            assert.strictEqual(res._cookie,42);
        });

        it("should return the execution promise",function(){
            var promiseMock = {};
            sinon.stub(guiSessionFactoryUnderTest, "notifyWithEvents");
            guiSessionFactoryUnderTest.notifyWithEvents.returns(promiseMock);
            var res = guiSessionFactoryUnderTest.launch("ServerDescription");
            assert.strictEqual(res, promiseMock);
        });

        it("should add the applicationInfo to gui session",function(){
            launchPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42,
                    Properties: {id:"1"}
                });
            };

            var res = guiSessionFactoryUnderTest.launch("ServerDescription");
            assert.deepEqual(res._applicationInfo,{id:"1"});
        });
    });

    describe("launchByIP method",function(){
        var launchPromise;
        var funcPromise;
        beforeEach(function(){
            launchPromise = {
                then: sinon.stub()
            };
            funcPromise = {
                then: sinon.stub()
            };
            sessionMock._communication.send.returns(launchPromise);
            launchPromise.then.returns(funcPromise);
        });

        it("should throw error if serverIP is undefined", function () {
            assert.throws(function () {
                guiSessionFactoryUnderTest.launchByIP();
            });
        });

        it("should throw error if serverIP is null", function () {
            assert.throws(function () {
                guiSessionFactoryUnderTest.launchByIP(null);
            });
        });

        it("should send the launchByIP message if only serverIP is defined",function(){
            guiSessionFactoryUnderTest.launchByIP("serverIP");
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "LaunchApplication", {
                "type": "SAPGuiSession",
                "launch info": {
                    "IP": "serverIP",
                    "LaunchType": "Connection Only",
                    "SystemNumber": 0
                }
            });
        });

        it("should send the launchByIP message if all values are defined correctly",function(){
            guiSessionFactoryUnderTest.launchByIP("serverIP", "client", "username", "password", 1, "en");

            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "LaunchApplication", {
                "type": "SAPGuiSession",
                "launch info": {
                    "IP": "serverIP",
                    "LaunchType": "AutoLogon",
                    "client": "client",
                    "user": "username",
                    "password": "password",
                    "language": "en",
                    "SystemNumber": 1
                }
            });
        });

        it("should throw error in case the launchByIP result is null",function(){
            launchPromise.then = function(cb) {
                return cb(null);
            };
            assert.throws(function(){
                guiSessionFactoryUnderTest.launchByIP("serverIP");
            });
        });

        it("should create a new gui session with the given cookie",function(){
            guiSessionFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };
            launchPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42
                });
            };

            var res = guiSessionFactoryUnderTest.launchByIP("serverIP");
            assert(res instanceof GuiSessionTO);
            assert.strictEqual(res._cookie,42);
        });

        it("should return the execution promise",function(){
            var promiseMock = {};
            sinon.stub(guiSessionFactoryUnderTest, "notifyWithEvents");
            guiSessionFactoryUnderTest.notifyWithEvents.returns(promiseMock);
            var res = guiSessionFactoryUnderTest.launchByIP("serverIP");
            assert.strictEqual(res, promiseMock);
        });

        it("should add the applicationInfo to gui session",function(){
            launchPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42,
                    Properties: {id:"1"}
                });
            };

            var res = guiSessionFactoryUnderTest.launchByIP("ServerDescription");
            assert.deepEqual(res._applicationInfo,{id:"1"});
        });
    });

    describe("attach method",function(){
        var attachPromise;
        var funcPromise;
        beforeEach(function(){
            attachPromise = {
                then: sinon.stub()
            };
            funcPromise = {
                then: sinon.stub()
            };
            sessionMock._communication.send.returns(attachPromise);
            sessionMock.fireEvent.returns(attachPromise);
            attachPromise.then.returns(funcPromise);
        });

        it("should send the attach message in case no description was provided",function(){
            guiSessionFactoryUnderTest.attach();
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "AttachApplication", {
                "type": "SAPGuiSession",
                "launch info": {
                    Object:{
                                            Class: "SAPGuiSession",
                    Description: {
                        Properties: {},
                        Index: null,
                        VRI: undefined
                    },
                    Parent: null


                    }
                }
            });
        });

        it("should send the attach message in case GuiSession description is provided as property bag", function () {
            guiSessionFactoryUnderTest.attach({});
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "AttachApplication", {
                "type": "SAPGuiSession",
                "launch info": {
                    Object: {
                        Class: "SAPGuiSession",
                        Description: {
                            Properties: {},
                            Index: null,
                            VRI: undefined
                        },
                        Parent: null

                    }
                }
            });
        });

        it("should send the attach message after converting the GuiSession description to JSON", function () {
            var guiSession = GuiSession();
            sinon.stub(guiSession, "_toJSON").returns("SomeValue");
            guiSessionFactoryUnderTest.attach(guiSession);

            sinon.assert.calledOnce(guiSession._toJSON);
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "AttachApplication", {
                "type": "SAPGuiSession",
                "launch info": {
                    Object: {
                        Class: "SAPGuiSession",
                        Description: "SomeValue",
                        Parent: null

                    }
                }
            });
        });

        it("should throw error in case the attach result is null",function(){
            attachPromise.then = function(cb) {
                return cb(null);
            };
            assert.throws(function(){
                guiSessionFactoryUnderTest.attach();
            });
        });

        it("should create a new GuiSessionTO with the given cookie",function(){
            guiSessionFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };
            attachPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            var res = guiSessionFactoryUnderTest.attach();
            assert(res instanceof GuiSessionTO);
            assert.strictEqual(res._cookie,42);
        });

        it("should return the execution promise",function(){
            var promiseMock = {};
            sinon.stub(guiSessionFactoryUnderTest, "notifyWithEvents");
            guiSessionFactoryUnderTest.notifyWithEvents.returns(promiseMock);
            var res = guiSessionFactoryUnderTest.attach();
            assert.strictEqual(res, promiseMock);
        });

        it("should add the applicationInfo to gui session",function(){
            attachPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42,
                    Properties: {id:"1"}
                });
            };
            var guiSession = GuiSession();
            sinon.stub(guiSession,"_toJSON").returns("SomeValue");
            var res = guiSessionFactoryUnderTest.attach(guiSession);
            assert.deepEqual(res._applicationInfo,{id:"1"});
        });
    });

    describe("openSessions method",function(){
        var openSessionsPromise;
        var funcPromise;
        beforeEach(function(){
            openSessionsPromise = {
                then: sinon.stub()
            };
            funcPromise = {
                then: sinon.stub()
            };
            sessionMock._communication.send.returns(openSessionsPromise);
            sessionMock.fireEvent.returns(openSessionsPromise);
            openSessionsPromise.then.returns(funcPromise);
        });

        it("should execute openSessions method in case no description was provided", function () {
            guiSessionFactoryUnderTest.openSessions();
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "GetAllOpenApplication", {
                "type": "SAPGuiSession",
                "launch info": {
                    Object: {
                        Class: "SAPGuiSession",
                        Description: {
                            Properties: {},
                            Index: null,
                            VRI: undefined
                        },
                        Parent: null

                    }
                }
            });
        });

        it("should execute openSessions method in case GuiSession description is provided as property bag", function () {
            var expectedMessage = {
                "type": "SAPGuiSession",
                "launch info": {
                    Object: {
                        Class: "SAPGuiSession",
                        Description: {
                            Properties: {},
                            Index: null,
                            VRI: undefined
                        },
                        Parent: null

                    }
                }
            };

            guiSessionFactoryUnderTest.openSessions({});
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "GetAllOpenApplication", {
                "type": "SAPGuiSession",
                "launch info": {
                    Object: {
                        Class: "SAPGuiSession",
                        Description: {
                            Properties: {},
                            Index: null,
                            VRI: undefined
                        },
                        Parent: null

                    }
                }
            });
        });

        it("should execute openSessions method after converting the GuiSession description to JSON", function () {
            var guiSession = GuiSession();
            sinon.stub(guiSession, "_toJSON").returns("SomeValue");
            guiSessionFactoryUnderTest.openSessions(guiSession);
            sinon.assert.calledOnce(guiSession._toJSON);
            sinon.assert.calledOnce(sessionMock._communication.send);
            sinon.assert.calledWith(sessionMock._communication.send, "GetAllOpenApplication", {
                "type": "SAPGuiSession",
                "launch info": {
                    Object: {
                        Class: "SAPGuiSession",
                        Description: "SomeValue",
                        Parent: null

                    }
                }
            });
        });

        it("should throw error in case the openSessions result is null",function(){
            openSessionsPromise.then = function(cb) {
                return cb(null);
            };
            assert.throws(function(){
                guiSessionFactoryUnderTest.openSessions();
            });
        });

        it("should throw error in case the openSessions result is missing Result field",function(){
            openSessionsPromise.then = function(cb) {
                return cb({});
            };
            assert.throws(function(){
                guiSessionFactoryUnderTest.openSessions();
            });
        });

        it("should return empty array in case the Result field is null",function(){
            guiSessionFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };

            openSessionsPromise.then = function(fullfill){
                return fullfill({Result:null});
            };
            var res = guiSessionFactoryUnderTest.openSessions();

            assert(Array.isArray(res));
            assert.strictEqual(res.length,0);
        });


        it("should create an array of GuiSession from the given result",function(){
            guiSessionFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };

            openSessionsPromise.then = function(fullfill){
                return fullfill({
                    Result: [
                        {ServerCookie:1},
                        {ServerCookie:2}
                    ]
                });
            };
            var res = guiSessionFactoryUnderTest.openSessions();
            assert(Array.isArray(res));
            res.forEach(function(guiSession,index){
                assert(guiSession instanceof GuiSessionTO);
                assert.strictEqual(guiSession._cookie,index + 1);
            });
        });

        it("should return the execution promise",function(){
            var promiseMock = {};
            sinon.stub(guiSessionFactoryUnderTest, "notifyWithEvents");
            guiSessionFactoryUnderTest.notifyWithEvents.returns(promiseMock);
            var res = guiSessionFactoryUnderTest.openSessions();
            assert.strictEqual(res, promiseMock);
        });

        it("should add the applicationInfo to gui session",function(){
            openSessionsPromise.then = function(fullfill){
                return fullfill({
                    Result: [
                        {ServerCookie:1,Properties: {version:"Chrome 53.0"}},
                        {ServerCookie:2,Properties: {version:"Chrome 53.0"}}
                    ]
                });
            };
            var res = guiSessionFactoryUnderTest.openSessions();
            assert(Array.isArray(res));
            res.forEach(function(guiSession,index){
                assert(guiSession instanceof GuiSessionTO);
                assert.strictEqual(guiSession._cookie,index + 1);
            });

            res.forEach(function(guiSession,index){
                assert.deepEqual(guiSession._applicationInfo,{version:"Chrome 53.0"});
            });


        });
    });
});