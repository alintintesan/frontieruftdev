// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/04/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("Table Tests", function () {

    var Table = require("../lib/table.js").Table;
    var TableSelectionMode = require("../lib/table.js").TableSelectionMode;
    var tableUnderTest;

    beforeEach(function () {
        tableUnderTest = Table();
    });

    describe("columnSelectionMode method", function () {
        it("should add 'columnselectmode' to _properties when value is given", function () {
            tableUnderTest.columnSelectionMode(TableSelectionMode.noSelection);
            assert.strictEqual(tableUnderTest._properties["columnselectmode"], "No Selection");
        });

        it("should add 'columnselectmode' to _properties when value is given in string", function () {
            tableUnderTest.columnSelectionMode("noselection");
            assert.strictEqual(tableUnderTest._properties["columnselectmode"], "No Selection");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tableUnderTest.columnSelectionMode(TableSelectionMode.noSelection);
            assert.strictEqual(result, tableUnderTest);
        });

        it("should remove 'columnselectmode' from _properties when value is null", function () {
            tableUnderTest._properties["columnselectmode"] = "No Selection";
            tableUnderTest.columnSelectionMode(null);
            assert(!("columnselectmode" in tableUnderTest._properties));
        });

        it("should return the value of 'columnselectmode' from _properties when value is not given", function () {
            tableUnderTest._properties["columnselectmode"] = "No Selection";
            var result = tableUnderTest.columnSelectionMode();
            assert.equal(result, "noselection");
        });
    });

    describe("rowSelectionMode method", function () {
        it("should add 'rowselectmode' to _properties when value is given", function () {
            tableUnderTest.rowSelectionMode(TableSelectionMode.noSelection);
            assert.strictEqual(tableUnderTest._properties["rowselectmode"], "No Selection");
        });

        it("should add 'rowselectmode' to _properties when value is given in string", function () {
            tableUnderTest.rowSelectionMode("noselection");
            assert.strictEqual(tableUnderTest._properties["rowselectmode"], "No Selection");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tableUnderTest.rowSelectionMode(TableSelectionMode.noSelection);
            assert.strictEqual(result, tableUnderTest);
        });

        it("should remove 'rowselectmode' from _properties when value is null", function () {
            tableUnderTest._properties["rowselectmode"] = "No Selection";
            tableUnderTest.rowSelectionMode(null);
            assert(!("rowselectmode" in tableUnderTest._properties));
        });

        it("should return the value of 'rowselectmode' from _properties when value is not given", function () {
            tableUnderTest._properties["rowselectmode"] = "No Selection";
            var result = tableUnderTest.rowSelectionMode();
            assert.equal(result, "noselection");
        });
    });
});

describe("TableTO Tests", function () {

    var TableTO = require("../lib/table.js").TableTO;
    var TableCell = require("../lib/table_cell.js").TableCell;
    var tableTOUnderTest;

    beforeEach(function () {
        tableTOUnderTest = new TableTO();
        sinon.stub(tableTOUnderTest, "_getROPropertyWithoutEvents");
        sinon.stub(tableTOUnderTest, "_executeWithEvents");
        sinon.stub(tableTOUnderTest, "_executeWithEventsOnError");
    });

    afterEach(function () {
        tableTOUnderTest._getROPropertyWithoutEvents.restore();
        tableTOUnderTest._executeWithEvents.restore();
        tableTOUnderTest._executeWithEventsOnError.restore();
    });

    describe("_createCell method", function () {

        it("should return the correct TableCell", function () {
            var cell = tableTOUnderTest._createCell(2, 3);
            assert.strictEqual(cell._ownerTable, tableTOUnderTest);
            assert.equal(cell._rowNumber, 3);
            assert.equal(cell._columnIdentifier, "#4");
        });
    });

    describe("columnSelectionMode method", function () {

        it("should execute _getROPropertyWithoutEvents 'columnselectmode' with correct parameters", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("No Selection");
                }
            };
            tableTOUnderTest._getROPropertyWithoutEvents.returns(promiseMock);
            tableTOUnderTest.columnSelectionMode();
            sinon.assert.calledOnce(tableTOUnderTest._getROPropertyWithoutEvents);
            sinon.assert.calledWith(tableTOUnderTest._getROPropertyWithoutEvents, "columnselectmode");
        });

        it("should return the correct TableSelectionMode", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("No Selection");
                }
            };
            tableTOUnderTest._getROPropertyWithoutEvents.returns(promiseMock);
            var res = tableTOUnderTest.columnSelectionMode();

            assert.equal(res, "noselection");
        });
    });

    describe("rowSelectionMode method", function () {

        it("should execute _getROPropertyWithoutEvents 'rowselectmode' with correct parameters", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("No Selection");
                }
            };
            tableTOUnderTest._getROPropertyWithoutEvents.returns(promiseMock);
            tableTOUnderTest.rowSelectionMode();
            sinon.assert.calledOnce(tableTOUnderTest._getROPropertyWithoutEvents);
            sinon.assert.calledWith(tableTOUnderTest._getROPropertyWithoutEvents, "rowselectmode");
        });

        it("should return the correct TableSelectionMode", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("No Selection");
                }
            };
            tableTOUnderTest._getROPropertyWithoutEvents.returns(promiseMock);
            var res = tableTOUnderTest.rowSelectionMode();

            assert.equal(res, "noselection");
        });
    });

    describe("selectAllColumns method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = tableTOUnderTest.selectAllColumns();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'selectAllColumns'", function () {
            tableTOUnderTest.selectAllColumns();
            sinon.assert.calledOnce(tableTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTOUnderTest._executeWithEvents, sinon.match({}), "SelectAllColumns");
        });
    });

    describe("pressSettingsButton method", function () {

        it("should execute _executeWithEvents 'PressSettingsButton' with correct parameters", function () {
            tableTOUnderTest.pressSettingsButton();
            sinon.assert.calledOnce(tableTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTOUnderTest._executeWithEvents, sinon.match({}), "PressSettingsButton");
        });

        it("should return the promise execution", function () {
            var promiseMock = {};
            tableTOUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTOUnderTest.pressSettingsButton();
            assert.equal(res, promiseMock);
        });
    });

    describe("isValidRow method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                tableTOUnderTest.isValidRow();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                tableTOUnderTest.isValidRow(null);
            });
        });

        it("should execute _executeWithEventsOnError 'ValidRow' with correct parameters if the input is number", function () {
            tableTOUnderTest.isValidRow(10);
            sinon.assert.calledOnce(tableTOUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(tableTOUnderTest._executeWithEventsOnError, sinon.match({ 0: 10 }), "ValidRow", 11);
        });

        it("should execute _executeWithEventsOnError 'ValidRow' with correct parameters if the input is string", function () {
            tableTOUnderTest.isValidRow("10");
            sinon.assert.calledOnce(tableTOUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(tableTOUnderTest._executeWithEventsOnError, sinon.match({ 0: "10" }), "ValidRow", 11);
        });

        it("should return the promise execution", function () {
            var promiseMock = {};
            tableTOUnderTest._executeWithEventsOnError.returns(promiseMock);
            var res = tableTOUnderTest.isValidRow(10);
            assert.equal(res, promiseMock);
        });    
    });
});
