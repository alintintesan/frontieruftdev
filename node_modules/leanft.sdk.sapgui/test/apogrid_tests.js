// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/04/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("APOGridTO Tests", function () {

    var APOGridTO = require("../lib/apogrid.js").APOGridTO;
    var APOGridCell = require("../lib/apogrid_cell.js").APOGridCell;
    var apoGridTOUnderTest;

    beforeEach(function () {
        apoGridTOUnderTest = new APOGridTO();
        sinon.stub(apoGridTOUnderTest, "_executeNotWrapped");
        sinon.stub(apoGridTOUnderTest, "_executeWithEvents");
        sinon.stub(apoGridTOUnderTest, "_getROProperty");
        
    });

    afterEach(function () {
        apoGridTOUnderTest._executeNotWrapped.restore();
        apoGridTOUnderTest._executeWithEvents.restore();
        apoGridTOUnderTest._getROProperty.restore();
    });

    describe("_createCell method", function () {

        it("should return the correct APOGridCell", function () {
            var cell = apoGridTOUnderTest._createCell(2, 3);
            assert.strictEqual(cell._ownerTable, apoGridTOUnderTest);
            assert.equal(cell._rowNumber, 3);
            assert.equal(cell._columnIdentifier, "#4");
        });
    });

    describe("clearSelection method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            apoGridTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = apoGridTOUnderTest.clearSelection();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'ClearSelection'", function () {
            apoGridTOUnderTest.clearSelection();
            sinon.assert.calledOnce(apoGridTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(apoGridTOUnderTest._executeWithEvents, sinon.match({}), "ClearSelection");
        });
    });

    describe("deselectCell method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                apoGridTOUnderTest.deselectCell();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                apoGridTOUnderTest.deselectCell(null);
            });
        });

        it("should throw error if columnIndexOrName is undefined", function () {
            assert.throws(function () {
                apoGridTOUnderTest.deselectCell(1);
            });
        });

        it("should throw error if columnIndexOrName is null", function () {
            assert.throws(function () {
                apoGridTOUnderTest.deselectCell(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            apoGridTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = apoGridTOUnderTest.deselectCell(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'DeselectCell' if row is a number and columnIndexOrName is a number", function () {
            apoGridTOUnderTest.deselectCell(10, 10);
            sinon.assert.calledOnce(apoGridTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(apoGridTOUnderTest._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "DeselectCell", 11, "#11");
        });

        it("should execute _executeWithEvents 'DeselectCell' if row is a string and columnIndexOrName is a string", function () {
            apoGridTOUnderTest.deselectCell("10", "Column");
            sinon.assert.calledOnce(apoGridTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(apoGridTOUnderTest._executeWithEvents, sinon.match({ 0: "10", 1: "Column" }), "DeselectCell", 11, "Column");
        });
    });

    describe("selectColumnMenuItem method", function () {
        it("should throw error if columnIndexOrName is undefined", function () {
            assert.throws(function () {
                apoGridTOUnderTest.selectColumnMenuItem();
            });
        });

        it("should throw error if columnIndexOrName is null", function () {
            assert.throws(function () {
                apoGridTOUnderTest.selectColumnMenuItem(null);
            });
        });

        it("should throw error if menuItemPath is undefined", function () {
            assert.throws(function () {
                apoGridTOUnderTest.selectColumnMenuItem(1);
            });
        });

        it("should throw error if menuItemPath is null", function () {
            assert.throws(function () {
                apoGridTOUnderTest.selectColumnMenuItem(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            apoGridTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = apoGridTOUnderTest.selectColumnMenuItem(1, "Menu");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SelectColumnMenuItem' if columnIndexOrName is a number", function () {
            apoGridTOUnderTest.selectColumnMenuItem(1, "Menu");
            sinon.assert.calledOnce(apoGridTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(apoGridTOUnderTest._executeWithEvents, sinon.match({ 0: 1, 1: "Menu" }), "SelectColumnMenuItem", "#2", "Menu");
        });

        it("should execute _executeWithEvents 'SelectColumnMenuItem' if columnIndexOrName is a string", function () {
            apoGridTOUnderTest.selectColumnMenuItem("Column", "Menu");
            sinon.assert.calledOnce(apoGridTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(apoGridTOUnderTest._executeWithEvents, sinon.match({ 0: "Column", 1: "Menu" }), "SelectColumnMenuItem", "Column", "Menu");
        });
    });

    describe("_getCellFormat method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            apoGridTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = apoGridTOUnderTest._getCellFormat(1, "column");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetCellFormat' with correct parameters", function () {
            apoGridTOUnderTest._getCellFormat(1, "column");
            sinon.assert.calledOnce(apoGridTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(apoGridTOUnderTest._executeNotWrapped, sinon.match({}), "GetCellFormat", 1, "column");
        });
    });

    describe("_selectCellMenuItem method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            apoGridTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = apoGridTOUnderTest._selectCellMenuItem(1, "column", "Menu");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeCommand 'SelectCellMenuItem' with correct parameters", function () {
            apoGridTOUnderTest._selectCellMenuItem(1, "column", "Menu");
            sinon.assert.calledOnce(apoGridTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(apoGridTOUnderTest._executeNotWrapped, sinon.match({}), "SelectCellMenuItem", 1, "column");
        });
    });

    describe("_getCellData method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            apoGridTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = apoGridTOUnderTest._getCellData(1, "column");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeCommand 'GetCellData' with correct parameters", function () {
            apoGridTOUnderTest._getCellData(1, "column");
            sinon.assert.calledOnce(apoGridTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(apoGridTOUnderTest._executeNotWrapped, sinon.match({}), "GetCellData", 1, "column");
        });
    });

    describe("_isCellEditable method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            apoGridTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = apoGridTOUnderTest._isCellEditable(1, "column");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeCommand 'IsCellEditable' with correct parameters", function () {
            apoGridTOUnderTest._isCellEditable(1, "column");
            sinon.assert.calledOnce(apoGridTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(apoGridTOUnderTest._executeNotWrapped, sinon.match({}), "IsCellEditable", 1, "column");
        });
    });
});
