// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;

describe("Items Description", function () {

    var ItemsDescriptionBehavior = require("../lib/items_behavior.js").ItemsDescriptionBehavior;
    var SapGuiBaseDescription = require("../lib/sapgui_object_base.js").SapGuiBaseDescription;
    var itemsDescriptionUnderTest;

    beforeEach(function () {
        itemsDescriptionUnderTest = new SapGuiBaseDescription();
        Core.ObjectUtils.extend(itemsDescriptionUnderTest, ItemsDescriptionBehavior);
    });

    describe("_itemsCount method", function () {
        it("should add 'ItemsCount' to _properties when value is given", function () {
            itemsDescriptionUnderTest._itemsCount(10);
            assert.strictEqual(itemsDescriptionUnderTest._properties["ItemsCount"], 10);
        });

        it("should add 'ItemsCount' to _properties when value is given in string", function () {
            itemsDescriptionUnderTest._itemsCount("10");
            assert.strictEqual(itemsDescriptionUnderTest._properties["ItemsCount"], 10);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = itemsDescriptionUnderTest._itemsCount(10);
            assert.strictEqual(result, itemsDescriptionUnderTest);
        });

        it("should remove 'ItemsCount' from _properties when value is null", function () {
            itemsDescriptionUnderTest._properties["ItemsCount"] = 10;
            itemsDescriptionUnderTest._itemsCount(null);
            assert(!("ItemsCount" in itemsDescriptionUnderTest._properties));
        });

        it("should return the value of 'ItemsCount' from _properties when value is not given", function () {
            itemsDescriptionUnderTest._properties["ItemsCount"] = 10;
            var result = itemsDescriptionUnderTest._itemsCount();
            assert.equal(result, 10);
        });
    });

    describe("_items method", function () {
        it("should add 'AllItems' to _properties when value is given", function () {
            itemsDescriptionUnderTest._items(["item1", "item2"]);
            assert.strictEqual(itemsDescriptionUnderTest._properties["AllItems"], "item1;item2");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = itemsDescriptionUnderTest._items(["item1", "item2"]);
            assert.strictEqual(result, itemsDescriptionUnderTest);
        });

        it("should remove 'AllItems' from _properties when value is null", function () {
            itemsDescriptionUnderTest._properties["AllItems"] = "item1;item2";
            itemsDescriptionUnderTest._items(null);
            assert(!("AllItems" in itemsDescriptionUnderTest._properties));
        });
        
        it("should return the value of 'AllItems' from _properties when value is not given", function () {
            itemsDescriptionUnderTest._properties["AllItems"] = "item1;item2";
            var value = itemsDescriptionUnderTest._items();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'AllItems' in _properties when get is called", function () {
            itemsDescriptionUnderTest._properties["AllItems"] = "item1;item2";
            itemsDescriptionUnderTest._items();
            assert.strictEqual(itemsDescriptionUnderTest._properties["AllItems"], "item1;item2");
        });
    });

});

describe("Items Test Object", function () {
    var ItemsTOBehavior = ObjectUtils.mergeTestBehavior(require("../lib/items_behavior.js").ItemsTOBehavior);
    var SapGuiBaseTO = require("../lib/sapgui_object_base.js").SapGuiBaseTO;
    var itemsTOUnderTest;

    beforeEach(function () {
        itemsTOUnderTest = new SapGuiBaseTO();
        Core.ObjectUtils.extend(itemsTOUnderTest, ItemsTOBehavior);
        sinon.stub(itemsTOUnderTest, "_getROProperty");
    });

    describe("items method", function () {
        it("should query the property 'AllItems'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1;Item2");
                }
            };
            itemsTOUnderTest._getROProperty.returns(promiseMock);
            itemsTOUnderTest._items();
            sinon.assert.calledOnce(itemsTOUnderTest._getROProperty);
            sinon.assert.calledWith(itemsTOUnderTest._getROProperty, "AllItems");
        });

        it("should return empty list if returns from _getROProperty is empty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb();
                }
            };

            itemsTOUnderTest._getROProperty.returns(promiseMock);
            var res = itemsTOUnderTest._items();
            assert.deepEqual(res, []);
        });

        it("should return empty list if returns from _getROProperty is null", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(null);
                }
            };

            itemsTOUnderTest._getROProperty.returns(promiseMock);
            var res = itemsTOUnderTest._items();
            assert.deepEqual(res, []);
        });

        it("should return a list  with items if items returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1;Item2;");
                }
            };

            itemsTOUnderTest._getROProperty.returns(promiseMock);
            var res = itemsTOUnderTest._items();
            assert.deepEqual(res, ["Item1", "Item2"]);
        });
    });
});
