// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/04/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("Grid Tests", function () {

    var Grid = require("../lib/grid.js").Grid;
    var GridSelectionMode = require("../lib/grid.js").GridSelectionMode;
    var gridUnderTest;

    beforeEach(function () {
        gridUnderTest = Grid();
    });

    describe("selectionMode method", function () {
        it("should add 'SelectionMode' to _properties when value is given", function () {
            gridUnderTest.selectionMode(GridSelectionMode.rowsAndColumns);
            assert.strictEqual(gridUnderTest._properties["SelectionMode"], "RowsAndColumns");
        });

        it("should add 'SelectionMode' to _properties when value is given in string", function () {
            gridUnderTest.selectionMode("RowsAndColumns");
            assert.strictEqual(gridUnderTest._properties["SelectionMode"], "RowsAndColumns");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = gridUnderTest.selectionMode(GridSelectionMode.rowsAndColumns);
            assert.strictEqual(result, gridUnderTest);
        });

        it("should remove 'SelectionMode' from _properties when value is null", function () {
            gridUnderTest._properties["SelectionMode"] = "RowsAndColumns";
            gridUnderTest.selectionMode(null);
            assert(!("SelectionMode" in gridUnderTest._properties));
        });

        it("should return the value of 'SelectionMode' from _properties when value is not given", function () {
            gridUnderTest._properties["SelectionMode"] = "RowsAndColumns";
            var result = gridUnderTest.selectionMode();
            assert.equal(result, "rowsandcolumns");
        });
    });    
});

describe("GridTO Tests", function () {

    var GridTO = require("../lib/grid.js").GridTO;
    var GridCell = require("../lib/grid_cell.js").GridCell;
    var gridTOUnderTest;

    beforeEach(function () {
        gridTOUnderTest = new GridTO();
        sinon.stub(gridTOUnderTest, "_executeNotWrapped");
        sinon.stub(gridTOUnderTest, "_executeWithEvents");
        sinon.stub(gridTOUnderTest, "_getROProperty");
        
    });

    afterEach(function () {
        gridTOUnderTest._executeNotWrapped.restore();
        gridTOUnderTest._executeWithEvents.restore();
        gridTOUnderTest._getROProperty.restore();
    });

    describe("_createCell method", function () {

        it("should return the correct GridCell", function () {
            var cell = gridTOUnderTest._createCell(2, 3);
            assert.strictEqual(cell._ownerTable, gridTOUnderTest);
            assert.equal(cell._rowNumber, 3);
            assert.equal(cell._columnIdentifier, "#4");
        });
    });

    describe("selectionMode method", function () {

        it("should execute _getROProperty 'SelectionMode' with correct parameters", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("RowsAndColumns");
                }
            };
            gridTOUnderTest._getROProperty.returns(promiseMock);
            gridTOUnderTest.selectionMode();
            sinon.assert.calledOnce(gridTOUnderTest._getROProperty);
            sinon.assert.calledWith(gridTOUnderTest._getROProperty, "SelectionMode");
        });

        it("should return the correct GridSelectionMode", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("RowsAndColumns");
                }
            };
            gridTOUnderTest._getROProperty.returns(promiseMock);
            var res = gridTOUnderTest.selectionMode();

            assert.equal(res, "rowsandcolumns");
        });
    });

    describe("firstVisibleRow method", function () {
        beforeEach(function () {
            gridTOUnderTest._initRowInTable = sinon.stub();
            sinon.stub(gridTOUnderTest, "_getColumnCount");
        });

        afterEach(function () {
            delete gridTOUnderTest._initRowInTable;
            gridTOUnderTest._getColumnCount.restore();

        });

        it("should execute _getROProperty with 'FirstVisibleRow'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(1);
                }
            };
            gridTOUnderTest._getROProperty.returns(promiseMock);
            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            gridTOUnderTest._getColumnCount.returns(promiseMock2);
            gridTOUnderTest.firstVisibleRow();
            sinon.assert.calledOnce(gridTOUnderTest._getROProperty);
            sinon.assert.calledWith(gridTOUnderTest._getROProperty, "FirstVisibleRow", sinon.match({}));
        });

        it("should return null is there is no row", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(0);
                }
            };
            gridTOUnderTest._getROProperty.returns(promiseMock);
            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            gridTOUnderTest._getColumnCount.returns(promiseMock2);

            var res = gridTOUnderTest.firstVisibleRow();
            assert.equal(res, null);
        });

        it("should return null is the return value of getROProperty is null", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(null);
                }
            };
            gridTOUnderTest._getROProperty.returns(promiseMock);
            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            gridTOUnderTest._getColumnCount.returns(promiseMock2);

            var res = gridTOUnderTest.firstVisibleRow();
            assert.equal(res, null);
        });

        it("should execute _getColumnCount is there is a row", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(1);
                }
            };
            gridTOUnderTest._getROProperty.returns(promiseMock);
            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            gridTOUnderTest._getColumnCount.returns(promiseMock2);

            gridTOUnderTest.firstVisibleRow();
            sinon.assert.calledOnce(gridTOUnderTest._getColumnCount);
            sinon.assert.calledWith(gridTOUnderTest._getColumnCount);
        });

        it("should execute _initRowInTable with correct parameters is there is a row", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(0);
                }
            };
            gridTOUnderTest._getROProperty.returns(promiseMock);

            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            gridTOUnderTest._getColumnCount.returns(promiseMock2);


            gridTOUnderTest.firstVisibleRow();
            sinon.assert.calledOnce(gridTOUnderTest._initRowInTable);
            sinon.assert.calledWith(gridTOUnderTest._initRowInTable, 0, 2);
        });        
    });

    describe("activateColumn method", function () {
        it("should throw error if columnIndexOrName is undefined", function () {
            assert.throws(function () {
                gridTOUnderTest.activateColumn();
            });
        });

        it("should throw error if columnIndexOrName is null", function () {
            assert.throws(function () {
                gridTOUnderTest.activateColumn(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            gridTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = gridTOUnderTest.activateColumn(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'ActivateColumn' if columnIndexOrName is a number", function () {
            gridTOUnderTest.activateColumn(10);
            sinon.assert.calledOnce(gridTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(gridTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "ActivateColumn", "#11");
        });

        it("should execute _executeWithEvents 'ActivateColumn' if columnIndexOrName is a string", function () {
            gridTOUnderTest.activateColumn("Column");
            sinon.assert.calledOnce(gridTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(gridTOUnderTest._executeWithEvents, sinon.match({ 0: "Column" }), "ActivateColumn", "Column");
        });
    });

    describe("activateRow method", function () {
        it("should throw error if rowIndex is undefined", function () {
            assert.throws(function () {
                gridTOUnderTest.activateRow();
            });
        });

        it("should throw error if rowIndex is null", function () {
            assert.throws(function () {
                gridTOUnderTest.activateRow(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            gridTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = gridTOUnderTest.activateRow(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'ActivateRow' if row is a number", function () {
            gridTOUnderTest.activateRow(10);
            sinon.assert.calledOnce(gridTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(gridTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "ActivateRow", 11);
        });

        it("should execute _executeWithEvents 'ActivateRow' if row is a string", function () {
            gridTOUnderTest.activateRow("10");
            sinon.assert.calledOnce(gridTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(gridTOUnderTest._executeWithEvents, sinon.match({ 0: "10" }), "ActivateRow", 11);
        });
    });

    describe("clearSelection method", function () {

        it("should execute _executeWithEvents 'ClearSelection' with correct parameters", function () {
            gridTOUnderTest.clearSelection();
            sinon.assert.calledOnce(gridTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(gridTOUnderTest._executeWithEvents, sinon.match({}), "ClearSelection");
        });

        it("should return the promise execution", function () {
            var promiseMock = {};
            gridTOUnderTest._executeWithEvents.returns(promiseMock);
            var res = gridTOUnderTest.clearSelection();
            assert.equal(res, promiseMock);
        });
    });

    describe("pressEnter method", function () {

        it("should execute _executeWithEvents 'PressEnter' with correct parameters", function () {
            gridTOUnderTest.pressEnter();
            sinon.assert.calledOnce(gridTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(gridTOUnderTest._executeWithEvents, sinon.match({}), "PressEnter");
        });

        it("should return the promise execution", function () {
            var promiseMock = {};
            gridTOUnderTest._executeWithEvents.returns(promiseMock);
            var res = gridTOUnderTest.pressEnter();
            assert.equal(res, promiseMock);
        });
    });

    describe("selectMenuItemById method", function () {
        it("should throw error if menuItemId is undefined", function () {
            assert.throws(function () {
                gridTOUnderTest.selectMenuItemById();
            });
        });

        it("should throw error if menuItemId is null", function () {
            assert.throws(function () {
                gridTOUnderTest.selectMenuItemById(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            gridTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = gridTOUnderTest.selectMenuItemById("Menu");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SelectMenuItemById'", function () {
            gridTOUnderTest.selectMenuItemById("Menu");
            sinon.assert.calledOnce(gridTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(gridTOUnderTest._executeWithEvents, sinon.match({ 0: "Menu" }), "SelectMenuItemById", "Menu");
        });
    });

    describe("_setCheckBox method", function () {

        it("should execute _executeNotWrapped 'SetCheckBox' with correct parameters", function () {
            gridTOUnderTest._setCheckBox(1, 1, true);
            sinon.assert.calledOnce(gridTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(gridTOUnderTest._executeNotWrapped, sinon.match({ 0: 1, 1: 1, 2: true }), "SetCheckBox", 1, 1, "ON");
        });

        it("should return the promise execution", function () {
            var promiseMock = {};
            gridTOUnderTest._executeNotWrapped.returns(promiseMock);
            var res = gridTOUnderTest._setCheckBox(1, 1, true);
            assert.equal(res, promiseMock);
        });
    });
});
