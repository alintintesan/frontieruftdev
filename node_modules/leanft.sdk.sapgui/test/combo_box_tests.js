// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/17/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("ComboBox Description", function () {

    var ComboBox = require("../lib/combo_box.js").ComboBox;
    var comboBoxDescUnderTest;

    beforeEach(function () {
        comboBoxDescUnderTest = ComboBox();
    });

    describe("items method", function () {
        it("should add 'AllItems' to _properties when value is given", function () {
            comboBoxDescUnderTest.items(["item1", "item2"]);
            assert.strictEqual(comboBoxDescUnderTest._properties["AllItems"], "item1;item2");
        });

        it("should add 'AllItems' to _properties when value is given using property bag", function () {
            comboBoxDescUnderTest = ComboBox({
                items: ["item1", "item2"]
            });
            assert.strictEqual(comboBoxDescUnderTest._properties["AllItems"], "item1;item2");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = comboBoxDescUnderTest.items(["item1", "item2"]);
            assert.strictEqual(result, comboBoxDescUnderTest);
        });

        it("should remove 'AllItems' from _properties when value is null", function () {
            comboBoxDescUnderTest._properties["AllItems"] = "item1;item2";
            comboBoxDescUnderTest.items(null);
            assert(!("AllItems" in comboBoxDescUnderTest._properties));
        });
        it("should return the value of 'AllItems' from _properties when value is not given", function () {
            comboBoxDescUnderTest._properties["AllItems"] = "item1;item2";
            var value = comboBoxDescUnderTest.items();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'AllItems' in _properties when get is called", function () {
            comboBoxDescUnderTest._properties["AllItems"] = "item1;item2";
            comboBoxDescUnderTest.items();
            assert.strictEqual(comboBoxDescUnderTest._properties["AllItems"], "item1;item2");
        });
    });

    describe("selectedItem method", function () {
        it("should add 'SelectedItem' to _properties when value is given", function () {
            comboBoxDescUnderTest.selectedItem("selected");
            assert.strictEqual(comboBoxDescUnderTest._properties["SelectedItem"], "selected");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = comboBoxDescUnderTest.selectedItem("selected");
            assert.strictEqual(result, comboBoxDescUnderTest);
        });

        it("should remove 'SelectedItem' from _properties when value is null", function () {
            comboBoxDescUnderTest._properties["SelectedItem"] = "selected";
            comboBoxDescUnderTest.selectedItem(null);
            assert(!("SelectedItem" in comboBoxDescUnderTest._properties));
        });

        it("should return the value of 'SelectedItem' from _properties when value is not given", function () {
            comboBoxDescUnderTest._properties["SelectedItem"] = "selected";
            var selected = comboBoxDescUnderTest.selectedItem();
            assert.equal(selected, "selected");
        });
    });

    describe("itemsCount method", function () {
        it("should add 'ItemsCount' to _properties when value is given", function () {
            comboBoxDescUnderTest.itemsCount(100);
            assert.strictEqual(comboBoxDescUnderTest._properties["ItemsCount"], 100);
        });

        it("should add 'ItemsCount' to _properties when value is given in string", function () {
            comboBoxDescUnderTest.itemsCount('100');
            assert.strictEqual(comboBoxDescUnderTest._properties["ItemsCount"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = comboBoxDescUnderTest.itemsCount(100);
            assert.strictEqual(result, comboBoxDescUnderTest);
        });

        it("should remove 'ItemsCount' from _properties when value is null", function () {
            comboBoxDescUnderTest._properties["ItemsCount"] = 100;
            comboBoxDescUnderTest.itemsCount(null);
            assert(!("ItemsCount" in comboBoxDescUnderTest._properties));
        });

        it("should return the value of 'ItemsCount' from _properties when value is not given", function () {
            comboBoxDescUnderTest._properties["ItemsCount"] = 100;
            var result = comboBoxDescUnderTest.itemsCount();
            assert.equal(result, 100);
        });
    });

    describe("isEnabled method", function () {
        it("should add 'Enabled' to _properties when value is given", function () {
            comboBoxDescUnderTest.isEnabled(true);
            assert.strictEqual(comboBoxDescUnderTest._properties["Enabled"], true);
        });

        it("should add 'Enabled' to _properties when value is given in string", function () {
            comboBoxDescUnderTest.isEnabled("true");
            assert.strictEqual(comboBoxDescUnderTest._properties["Enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = comboBoxDescUnderTest.isEnabled(true);
            assert.strictEqual(result, comboBoxDescUnderTest);
        });

        it("should remove 'Enabled' from _properties when value is null", function () {
            comboBoxDescUnderTest._properties["Enabled"] = true;
            comboBoxDescUnderTest.isEnabled(null);
            assert(!("Enabled" in comboBoxDescUnderTest._properties));
        });

        it("should return the value of 'Enabled' from _properties when value is not given", function () {
            comboBoxDescUnderTest._properties["Enabled"] = true;
            var result = comboBoxDescUnderTest.isEnabled();
            assert.equal(result, true);
        });
    });
});

describe("ComboBox Test Object", function () {

    var ComboBoxTO = require("../lib/combo_box.js").ComboBoxTO;
    var comboboxTOUnderTest;

    beforeEach(function () {
        comboboxTOUnderTest = new ComboBoxTO();
        sinon.stub(comboboxTOUnderTest, "_executeWithEvents");
        sinon.stub(comboboxTOUnderTest, "_getROProperty");
        sinon.stub(comboboxTOUnderTest, "_items");
    });

    afterEach(function () {
        comboboxTOUnderTest._executeWithEvents.restore();
        comboboxTOUnderTest._getROProperty.restore();
        comboboxTOUnderTest._items.restore();
    });

    describe("isEnabled method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            comboboxTOUnderTest._getROProperty.returns(promiseMock);
            var res = comboboxTOUnderTest.isEnabled();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _getROProperty 'Enabled'", function () {
            comboboxTOUnderTest.isEnabled();
            sinon.assert.calledOnce(comboboxTOUnderTest._getROProperty);
            sinon.assert.calledWith(comboboxTOUnderTest._getROProperty, "Enabled", sinon.match({}));
        });
    });

    describe("attachedText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            comboboxTOUnderTest._getROProperty.returns(executionPromise);
            var res = comboboxTOUnderTest.attachedText();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'AttachedText' with correct parameters", function () {
            comboboxTOUnderTest.attachedText();
            sinon.assert.calledOnce(comboboxTOUnderTest._getROProperty);
            sinon.assert.calledWith(comboboxTOUnderTest._getROProperty, "AttachedText", sinon.match({}));
        });
    });

    describe("items method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            comboboxTOUnderTest._items.returns(executionPromise);
            var res = comboboxTOUnderTest.items();
            assert.equal(res, executionPromise);
        });

        it("should execute _items with correct parameters", function () {
            comboboxTOUnderTest.items();
            sinon.assert.calledOnce(comboboxTOUnderTest._items);
            sinon.assert.calledWith(comboboxTOUnderTest._items, ";", "AllItems", "ItemsCount");
        });
    });

    describe("selectedItem method", function () {
        beforeEach(function () {
            sinon.stub(comboboxTOUnderTest, "_createItem");
        });

        afterEach(function () {
            comboboxTOUnderTest._createItem.restore();
        });

        it("should execute _getROProperty 'SelectedItem' with correct parameters", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item");
                }
            };
            comboboxTOUnderTest._getROProperty.returns(promiseMock);
            comboboxTOUnderTest.selectedItem();
            sinon.assert.calledOnce(comboboxTOUnderTest._getROProperty);
            sinon.assert.calledWith(comboboxTOUnderTest._getROProperty, "SelectedItem", sinon.match({}));
        });

        it("should return the execution promise", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item");
                }
            };
            comboboxTOUnderTest._getROProperty.returns(promiseMock);
            comboboxTOUnderTest.selectedItem();
            sinon.assert.calledOnce(comboboxTOUnderTest._createItem);
            sinon.assert.calledWith(comboboxTOUnderTest._createItem, "Item", "Item");
        });
    });

    describe("getItem method", function () {
        beforeEach(function () {
            sinon.stub(comboboxTOUnderTest, "_createItem");
        });

        afterEach(function () {
            comboboxTOUnderTest._createItem.restore();
        });

        it("should execute _createItem with correct parameters", function () {
            comboboxTOUnderTest.getItem("Item");
            sinon.assert.calledOnce(comboboxTOUnderTest._createItem);
            sinon.assert.calledWith(comboboxTOUnderTest._createItem, "Item", "Item");
        });
    });

    describe("select method", function () {
        it("should throw error if indexOrItem is undefined", function () {
            assert.throws(function () {
                comboboxTOUnderTest.select();
            });
        });

        it("should throw error if indexOrItem is null", function () {
            assert.throws(function () {
                comboboxTOUnderTest.select(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            comboboxTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = comboboxTOUnderTest.select(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Select' if indexOrItem is a number", function () {
            comboboxTOUnderTest.select(10);
            sinon.assert.calledOnce(comboboxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(comboboxTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Select", "#11");
        });

        it("should execute _executeWithEvents 'Select' if indexOrItem is a string", function () {
            comboboxTOUnderTest.select("item1");
            sinon.assert.calledOnce(comboboxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(comboboxTOUnderTest._executeWithEvents, sinon.match({ 0: "item1" }), "Select", "item1");
        });

        it("should execute _executeWithEvents 'Select' if indexOrItem is an object", function () {
            var object = {_identifier: 10};
            comboboxTOUnderTest.select(object);
            sinon.assert.calledOnce(comboboxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(comboboxTOUnderTest._executeWithEvents, sinon.match({ 0: object }), "Select", "#11");
        });
    });

    describe("selectKey method", function () {
        it("should throw error if key is undefined", function () {
            assert.throws(function () {
                comboboxTOUnderTest.selectKey();
            });
        });

        it("should throw error if key is null", function () {
            assert.throws(function () {
                comboboxTOUnderTest.selectKey(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            comboboxTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = comboboxTOUnderTest.select(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SelectKey' with correct parameters", function () {
            comboboxTOUnderTest.selectKey("Key");
            sinon.assert.calledOnce(comboboxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(comboboxTOUnderTest._executeWithEvents, sinon.match({ 0: "Key" }), "SelectKey", "Key");
        });
    });

    describe("setFocus method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            comboboxTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = comboboxTOUnderTest.setFocus();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SetFocus' with correct parameters", function () {
            comboboxTOUnderTest.setFocus();
            sinon.assert.calledOnce(comboboxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(comboboxTOUnderTest._executeWithEvents, sinon.match({}), "SetFocus");
        });
    });

    describe("_createItem method", function () {
        it("should return the ComboBoxItem with correct values", function () {
            var res = comboboxTOUnderTest._createItem(10, "Item1");
            assert.strictEqual(res._identifier, 9);
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerComboBox, comboboxTOUnderTest);
        });
    });
});
