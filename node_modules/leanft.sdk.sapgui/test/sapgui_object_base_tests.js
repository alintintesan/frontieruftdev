// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var sinon = require("sinon");
var assert = require("assert");
var Core = require("leanft.sdk.core");
var ComponentType = require("../lib/component_type.js").ComponentType;
var TestObjectBase = Core.TestObjectBase;


describe("SapGui Object Base Description", function () {

    var SapGuiBaseDescription = require("../lib/sapgui_object_base.js").SapGuiBaseDescription;
    var sapguiBaseDescriptionUnderTest;

    beforeEach(function () {
        sapguiBaseDescriptionUnderTest = new SapGuiBaseDescription();
    });

    describe("Constructor", function () {
        it("should assign 'SAPGUI' and LeanFT type if leanFT type is defined", function () {
            sapguiBaseDescriptionUnderTest = new SapGuiBaseDescription("TestObject");
            assert.deepEqual(sapguiBaseDescriptionUnderTest.leanFTType, {
                technology: "SAPGUI",
                leanftType: "TestObject"
            });
        });
    });

    describe("type method", function () {
        it("should add 'GUIComponentType' to _properties when value is given as string", function () {
            sapguiBaseDescriptionUnderTest.type("button");
            assert.equal(sapguiBaseDescriptionUnderTest._properties["GUIComponentType"], 40);
        });

        it("should add 'GUIComponentType' to _properties when value is given with a ComponentType", function () {
            sapguiBaseDescriptionUnderTest.type(ComponentType.button);
            assert.equal(sapguiBaseDescriptionUnderTest._properties["GUIComponentType"], 40);
        });

        it("should return this - builder pattern when value is given", function () {
            var res = sapguiBaseDescriptionUnderTest.type(ComponentType.button);
            assert.strictEqual(res, sapguiBaseDescriptionUnderTest);
        });

        it("should remove 'GUIComponentType' from _properties when value is null", function () {
            sapguiBaseDescriptionUnderTest._properties["GUIComponentType"] = "button";
            sapguiBaseDescriptionUnderTest.type(null);
            assert(!("GUIComponentType" in sapguiBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'GUIComponentType' from _properties when value is not given", function () {
            sapguiBaseDescriptionUnderTest._properties["GUIComponentType"] = 40;
            var result = sapguiBaseDescriptionUnderTest.type();
            assert.equal(result, ComponentType.button);
        });
    });

    describe("id method", function () {
        it("should add 'Id' to _properties when value is given", function () {
            sapguiBaseDescriptionUnderTest.id("ElementID");
            assert.strictEqual(sapguiBaseDescriptionUnderTest._properties["Id"], "ElementID");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = sapguiBaseDescriptionUnderTest.id("ElementID");
            assert.strictEqual(result, sapguiBaseDescriptionUnderTest);
        });

        it("should remove 'Id' from _properties when value is null", function () {
            sapguiBaseDescriptionUnderTest._properties["Id"] = "ElementID";
            sapguiBaseDescriptionUnderTest.id(null);
            assert(!("Id" in sapguiBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'Id' from _properties when value is not given", function () {
            sapguiBaseDescriptionUnderTest._properties["Id"] = "ElementID";
            var value = sapguiBaseDescriptionUnderTest.id();
            assert.strictEqual(value, "ElementID");
        });
    });

    describe("name method", function () {
        it("should add 'Name' to _properties when value is given", function () {
            sapguiBaseDescriptionUnderTest.name("ElementName");
            assert.strictEqual(sapguiBaseDescriptionUnderTest._properties["Name"], "ElementName");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = sapguiBaseDescriptionUnderTest.name("ElementName");
            assert.strictEqual(result, sapguiBaseDescriptionUnderTest);
        });

        it("should remove 'Name' from _properties when value is null", function () {
            sapguiBaseDescriptionUnderTest._properties["Name"] = "ElementName";
            sapguiBaseDescriptionUnderTest.name(null);
            assert(!("Id" in sapguiBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'Name' from _properties when value is not given", function () {
            sapguiBaseDescriptionUnderTest._properties["Name"] = "ElementName";
            var value = sapguiBaseDescriptionUnderTest.name();
            assert.strictEqual(value, "ElementName");
        });
    });
});

describe("SapGui Object Base Test Object", function () {

    var SapGuiBaseTO = require("../lib/sapgui_object_base.js").SapGuiBaseTO;
    var sapguiBaseTOUnderTest;

    beforeEach(function () {
        sapguiBaseTOUnderTest =  new SapGuiBaseTO();
        sinon.stub(sapguiBaseTOUnderTest, "_getROProperty");
    });
    
    describe("type method", function () {
        beforeEach(function () {
            sinon.stub(ComponentType, "_nativeToComponentType");
        });

        afterEach(function () {
            ComponentType._nativeToComponentType.restore();
        });

        it("should call 'ComponentType._nativeToComponentType'", function () {
            var executionPromise = {
                then: function (cb) {
                    return cb(40);
                }
            };
            sapguiBaseTOUnderTest._getROProperty.returns(executionPromise);
            sapguiBaseTOUnderTest.type();
            sinon.assert.calledOnce(ComponentType._nativeToComponentType);
            sinon.assert.calledWith(ComponentType._nativeToComponentType, 40);
        });

        it("should return correct value if 'ComponentType._nativeToComponentType' is called", function () {
            var executionPromise = {
                then: function (cb) {
                    return cb(40);
                }
            };
            sapguiBaseTOUnderTest._getROProperty.returns(executionPromise);
            ComponentType._nativeToComponentType.returns("button");
            var res = sapguiBaseTOUnderTest.type();
            assert.strictEqual(res, "button");
        });

        it("should execute _getROProperty 'type' with correct parameters", function () {
            var executionPromise = {
                then: function (cb) {
                    return cb(40);
                }
            };
            sapguiBaseTOUnderTest._getROProperty.returns(executionPromise);
            sapguiBaseTOUnderTest.type();
            sinon.assert.calledOnce(sapguiBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(sapguiBaseTOUnderTest._getROProperty, "GUIComponentType", sinon.match({}));
        });
    });

    describe("id method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            sapguiBaseTOUnderTest._getROProperty.returns(executionPromise);
            var res = sapguiBaseTOUnderTest.id();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Id' with correct parameters", function () {
            sapguiBaseTOUnderTest.id();
            sinon.assert.calledOnce(sapguiBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(sapguiBaseTOUnderTest._getROProperty, "Id", sinon.match({}));
        });
    });

    describe("name method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            sapguiBaseTOUnderTest._getROProperty.returns(executionPromise);
            var res = sapguiBaseTOUnderTest.name();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Name' with correct parameters", function () {
            sapguiBaseTOUnderTest.name();
            sinon.assert.calledOnce(sapguiBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(sapguiBaseTOUnderTest._getROProperty, "Name", sinon.match({}));
        });
    });
});