// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/04/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;

describe("TableBaseDescriptionBehavior", function () {

    var TableBaseDescriptionBehavior = require("../lib/table_base.js").TableBaseDescriptionBehavior;
    var Element = require("../lib/element.js").Element;
    var tableBaseDescriptionBehaviorUnderTest;

    beforeEach(function () {
        tableBaseDescriptionBehaviorUnderTest = new Element();
        Core.ObjectUtils.extend(tableBaseDescriptionBehaviorUnderTest, TableBaseDescriptionBehavior);
    });

    describe("title method", function () {
        it("should add 'Title' to _properties when value is given", function () {
            tableBaseDescriptionBehaviorUnderTest.title("Title");
            assert.strictEqual(tableBaseDescriptionBehaviorUnderTest._properties["Title"], "Title");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tableBaseDescriptionBehaviorUnderTest.title("Title");
            assert.strictEqual(result, tableBaseDescriptionBehaviorUnderTest);
        });

        it("should remove 'Title' from _properties when value is null", function () {
            tableBaseDescriptionBehaviorUnderTest._properties["Title"] = "Title";
            tableBaseDescriptionBehaviorUnderTest.title(null);
            assert(!("Title" in tableBaseDescriptionBehaviorUnderTest._properties));
        });

        it("should return the value of 'Title' from _properties when value is not given", function () {
            tableBaseDescriptionBehaviorUnderTest._properties["Title"] = "Title";
            var result = tableBaseDescriptionBehaviorUnderTest.title();
            assert.equal(result, "Title");
        });
    });

    describe("isEnabled method", function () {
        it("should add 'Enabled' to _properties when value is given", function () {
            tableBaseDescriptionBehaviorUnderTest.isEnabled(true);
            assert.strictEqual(tableBaseDescriptionBehaviorUnderTest._properties["Enabled"], true);
        });

        it("should add 'Enabled' to _properties when value is given in string", function () {
            tableBaseDescriptionBehaviorUnderTest.isEnabled("true");
            assert.strictEqual(tableBaseDescriptionBehaviorUnderTest._properties["Enabled"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = tableBaseDescriptionBehaviorUnderTest.isEnabled(true);
            assert.strictEqual(result, tableBaseDescriptionBehaviorUnderTest);
        });

        it("should remove 'Enabled' from _properties when value is null", function () {
            tableBaseDescriptionBehaviorUnderTest._properties["Enabled"] = true;
            tableBaseDescriptionBehaviorUnderTest.isEnabled(null);
            assert(!("Enabled" in tableBaseDescriptionBehaviorUnderTest._properties));
        });

        it("should return the value of 'Enabled' from _properties when value is not given", function () {
            tableBaseDescriptionBehaviorUnderTest._properties["Enabled"] = true;
            var result = tableBaseDescriptionBehaviorUnderTest.isEnabled();
            assert.equal(result, true);
        });
    });
});

describe("TableBaseBehavior Test", function () {

    var TableBaseBehavior = require("../lib/table_base.js").TableBaseBehavior;
    var tableBaseBehaviorUnderTest;

    beforeEach(function () {
        tableBaseBehaviorUnderTest = ObjectUtils.mergeTestBehavior(TableBaseBehavior);
        tableBaseBehaviorUnderTest._executeCommand = sinon.stub();
        tableBaseBehaviorUnderTest._getROProperty = sinon.stub();
        tableBaseBehaviorUnderTest._executeWithEvents = sinon.stub();
        tableBaseBehaviorUnderTest._createRow = sinon.stub();
        tableBaseBehaviorUnderTest._executeOnItemsCollection = sinon.stub();
        tableBaseBehaviorUnderTest._executeSingleOpOnCollection = sinon.stub();
        tableBaseBehaviorUnderTest._executeNotWrapped = sinon.stub();
    });

    afterEach(function () {
        delete tableBaseBehaviorUnderTest._executeCommand;
        delete tableBaseBehaviorUnderTest._getROProperty;
        delete tableBaseBehaviorUnderTest._executeWithEvents;
        delete tableBaseBehaviorUnderTest._createRow;
        delete tableBaseBehaviorUnderTest._executeOnItemsCollection;
        delete tableBaseBehaviorUnderTest._executeSingleOpOnCollection;
        delete tableBaseBehaviorUnderTest._executeNotWrapped;
    });

    describe("title method", function () {

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._getROProperty.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest.title();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Title' with correct parameters", function () {
            tableBaseBehaviorUnderTest.title();
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._getROProperty);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._getROProperty, "Title", sinon.match({}));
        });
    });

    describe("isEnabled method", function () {

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._getROProperty.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest.isEnabled();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Enabled' with correct parameters", function () {
            tableBaseBehaviorUnderTest.isEnabled();
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._getROProperty);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._getROProperty, "Enabled", sinon.match({}));
        });
    });


    describe("activateCell method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.activateCell();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.activateCell(null);
            });
        });

        it("should throw error if columnIndexOrName is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.activateCell(1);
            });
        });

        it("should throw error if columnIndexOrName is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.activateCell(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest.activateCell(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'ActivateCell' if row is a number and columnIndexOrName is a number", function () {
            tableBaseBehaviorUnderTest.activateCell(10, 10);
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "ActivateCell", 11, "#11");
        });

        it("should execute _executeWithEvents 'ActivateCell' if row is a string and columnIndexOrName is a string", function () {
            tableBaseBehaviorUnderTest.activateCell("10", "Column");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeWithEvents, sinon.match({ 0: "10", 1: "Column" }), "ActivateCell", 11, "Column");
        });
    });

    describe("selectCell method", function () {
        it("should throw error if row is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.selectCell();
            });
        });

        it("should throw error if row is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.selectCell(null);
            });
        });

        it("should throw error if columnIndexOrName is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.selectCell(1);
            });
        });

        it("should throw error if columnIndexOrName is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.selectCell(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest.selectCell(10, 10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SelectCell' if row is a number and columnIndexOrName is a number", function () {
            tableBaseBehaviorUnderTest.selectCell(10, 10);
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeWithEvents, sinon.match({ 0: 10, 1: 10 }), "SelectCell", 11, "#11");
        });

        it("should execute _executeWithEvents 'SelectCell' if row is a string and columnIndexOrName is a string", function () {
            tableBaseBehaviorUnderTest.selectCell("10", "Column");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeWithEvents, sinon.match({ 0: "10", 1: "Column" }), "SelectCell", 11, "Column");
        });
    });

    describe("selectRow method", function () {
        it("should throw error if rows is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.selectRow();
            });
        });

        it("should throw error if rows is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.selectRow(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeOnItemsCollection.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest.selectRow(1, 2, 3);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeOnItemsCollection with 'SelectRow' and ExtendRow if rows are numbers", function () {
            tableBaseBehaviorUnderTest.selectRow(1, 2, 3);
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeOnItemsCollection, sinon.match({ 0: 1, 1: 2, 2: 3 }), "SelectRow", "ExtendRow", [1, 2, 3], tableBaseBehaviorUnderTest._rowTransform);
        });

        it("should execute _executeOnItemsCollection with 'SelectRow' and ExtendRow if rows are strings", function () {
            tableBaseBehaviorUnderTest.selectRow("1", "2", "3");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeOnItemsCollection, sinon.match({ 0: "1", 1: "2", 2: "3" }), "SelectRow", "ExtendRow", ["1", "2", "3"], tableBaseBehaviorUnderTest._rowTransform);
        });
    });

    describe("selectRowRange method", function () {
        it("should throw error if indexFrom is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.selectRowRange();
            });
        });

        it("should throw error if indexFrom is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.selectRowRange(null);
            });
        });

        it("should throw error if indexTo is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.selectRowRange(1);
            });
        });

        it("should throw error if indexTo is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.selectRowRange(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest.selectRowRange(1, 2);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents with 'SelectRowsRange if indexFrom and indexTo are numbers", function () {
            tableBaseBehaviorUnderTest.selectRowRange(1, 2);
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeWithEvents, sinon.match({ 0: 1, 1: 2 }), "SelectRowsRange", 2, 3);
        });

        it("should execute _executeWithEvents with 'SelectRowsRange' if indexFrom and indexTo are strings", function () {
            tableBaseBehaviorUnderTest.selectRowRange("1", "2");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeWithEvents, sinon.match({ 0: "1", 1: "2" }), "SelectRowsRange", 2, 3);
        });
    });

    describe("selectColumn method", function () {
        it("should throw error if columns is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.selectColumn();
            });
        });

        it("should throw error if columns is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.selectColumn(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeOnItemsCollection.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest.selectColumn(1, 2, 3);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeOnItemsCollection with 'SelectColumn' and ExtendColumn if columns are numbers", function () {
            tableBaseBehaviorUnderTest.selectColumn(1, 2, 3);
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeOnItemsCollection, sinon.match({ 0: 1, 1: 2, 2: 3 }), "SelectColumn", "ExtendColumn", [1, 2, 3], tableBaseBehaviorUnderTest._columnTransform);
        });

        it("should execute _executeOnItemsCollection with 'SelectColumn' and ExtendColumn if columns are strings", function () {
            tableBaseBehaviorUnderTest.selectColumn("1", "2", "3");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeOnItemsCollection, sinon.match({ 0: "1", 1: "2", 2: "3" }), "SelectColumn", "ExtendColumn", ["1", "2", "3"], tableBaseBehaviorUnderTest._columnTransform);
        });
    });

    describe("_columnTransform method", function () {
        it("should return the object as it is if not a number", function () {
            var column = "Column";
            var res = tableBaseBehaviorUnderTest._columnTransform(column);
            assert.equal(res, column);
        });

        it("should return the correct string if it is a number", function () {
            var column = 1;
            var res = tableBaseBehaviorUnderTest._columnTransform(column);
            assert.equal(res, "#2");
        });
    });

    describe("_rowTransform method", function () {
        it("should return the correct value if it is a string", function () {
            var row = "4";
            var res = tableBaseBehaviorUnderTest._rowTransform(row);
            assert.equal(res, 5);
        });

        it("should return the correct value if it is a number", function () {
            var row = 4;
            var res = tableBaseBehaviorUnderTest._rowTransform(row);
            assert.equal(res, 5);
        });
    });

    describe("deselectRow method", function () {
        it("should throw error if rows is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.deselectRow();
            });
        });

        it("should throw error if rows is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.deselectRow(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeSingleOpOnCollection.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest.deselectRow(1, 2, 3);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeOnItemsCollection with 'DeselectRow' and ExtendRow if rows are numbers", function () {
            tableBaseBehaviorUnderTest.deselectRow(1, 2, 3);
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeSingleOpOnCollection, sinon.match({ 0: 1, 1: 2, 2: 3 }), "DeselectRow", [1, 2, 3], tableBaseBehaviorUnderTest._rowTransform);
        });

        it("should execute _executeOnItemsCollection with 'DeselectRow' and ExtendRow if rows are strings", function () {
            tableBaseBehaviorUnderTest.deselectRow("1", "2", "3");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeSingleOpOnCollection, sinon.match({ 0: "1", 1: "2", 2: "3" }), "DeselectRow", ["1", "2", "3"], tableBaseBehaviorUnderTest._rowTransform);
        });
    });

    describe("deselectRowRange method", function () {
        it("should throw error if indexFrom is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.deselectRowRange();
            });
        });

        it("should throw error if indexFrom is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.deselectRowRange(null);
            });
        });

        it("should throw error if indexTo is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.deselectRowRange(1);
            });
        });

        it("should throw error if indexTo is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.deselectRowRange(1, null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest.deselectRowRange(1, 2);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents with 'DeselectRowsRange if indexFrom and indexTo are numbers", function () {
            tableBaseBehaviorUnderTest.deselectRowRange(1, 2);
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeWithEvents, sinon.match({ 0: 1, 1: 2 }), "DeselectRowsRange", 2, 3);
        });

        it("should execute _executeWithEvents with 'DeselectRowsRange' if indexFrom and indexTo are strings", function () {
            tableBaseBehaviorUnderTest.deselectRowRange("1", "2");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeWithEvents, sinon.match({ 0: "1", 1: "2" }), "DeselectRowsRange", 2, 3);
        });
    });

    describe("deselectColumn method", function () {
        it("should throw error if columns is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.deselectColumn();
            });
        });

        it("should throw error if columns is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest.deselectColumn(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeSingleOpOnCollection.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest.deselectColumn(1, 2, 3);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeOnItemsCollection with 'DeselectColumn' if columns are numbers", function () {
            tableBaseBehaviorUnderTest.deselectColumn(1, 2, 3);
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeSingleOpOnCollection, sinon.match({ 0: 1, 1: 2, 2: 3 }), "DeselectColumn", [1, 2, 3], tableBaseBehaviorUnderTest._columnTransform);
        });

        it("should execute _executeOnItemsCollection with 'DeselectColumn' if columns are strings", function () {
            tableBaseBehaviorUnderTest.deselectColumn("1", "2", "3");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeSingleOpOnCollection, sinon.match({ 0: "1", 1: "2", 2: "3" }), "DeselectColumn", ["1", "2", "3"], tableBaseBehaviorUnderTest._columnTransform);
        });
    });

    describe("_findRowWithCellTextInColumn method", function () {
        beforeEach(function () {
            tableBaseBehaviorUnderTest._initRowInTable = sinon.stub();
            sinon.stub(tableBaseBehaviorUnderTest, "_getColumnCount");
        });

        afterEach(function () {
            delete tableBaseBehaviorUnderTest._initRowInTable;
            tableBaseBehaviorUnderTest._getColumnCount.restore();
            
        });

        it("should throw error if text is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest._findRowWithCellTextInColumn();
            });
        });

        it("should throw error if text is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest._findRowWithCellTextInColumn(null);
            });
        });

        it("should throw error if column is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest._findRowWithCellTextInColumn("text");
            });
        });

        it("should throw error if column is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest._findRowWithCellTextInColumn("text", null);
            });
        });

        it("should execute _executeWithEvents with 'FindRowByCellContent' if startFromRow is missing", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(1);
                }
            };
            tableBaseBehaviorUnderTest._executeWithEvents.returns(promiseMock);

            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            tableBaseBehaviorUnderTest._getColumnCount.returns(promiseMock2);

            tableBaseBehaviorUnderTest._findRowWithCellTextInColumn("text", 1);
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeWithEvents, sinon.match({}), "FindRowByCellContent", "#2", "text");
        });

        it("should execute _executeWithEvents with 'FindRowByCellContent' if startFromRow is inputed as number", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(1);
                }
            };
            tableBaseBehaviorUnderTest._executeWithEvents.returns(promiseMock);

            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            tableBaseBehaviorUnderTest._getColumnCount.returns(promiseMock2);

            tableBaseBehaviorUnderTest._findRowWithCellTextInColumn("text", 1, 3);
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeWithEvents, sinon.match({}), "FindRowByCellContent", "#2", "text", 4);
        });

        it("should execute _executeWithEvents with 'FindRowByCellContent' if startFromRow is inputed as string, and column is string ", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(1);
                }
            };
            tableBaseBehaviorUnderTest._executeWithEvents.returns(promiseMock);

            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            tableBaseBehaviorUnderTest._getColumnCount.returns(promiseMock2);

            tableBaseBehaviorUnderTest._findRowWithCellTextInColumn("text", "column", "3");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeWithEvents, sinon.match({ }), "FindRowByCellContent", "column", "text", 4);
        });

        it("should return null if the return is null ", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(null);
                }
            };
            tableBaseBehaviorUnderTest._executeWithEvents.returns(promiseMock);

            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            tableBaseBehaviorUnderTest._getColumnCount.returns(promiseMock2);

            var res = tableBaseBehaviorUnderTest._findRowWithCellTextInColumn("text", "column", "3");
            assert.equal(res, null);
        });

        it("should return null if there is no row ", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(0);
                }
            };
            tableBaseBehaviorUnderTest._executeWithEvents.returns(promiseMock);

            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            tableBaseBehaviorUnderTest._getColumnCount.returns(promiseMock2);

            var res = tableBaseBehaviorUnderTest._findRowWithCellTextInColumn("text", "column", "3");
            assert.equal(res, null);
        });

        it("should execute _getColumnCount is there is a row", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(3);
                }
            };
            tableBaseBehaviorUnderTest._executeWithEvents.returns(promiseMock);

            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            tableBaseBehaviorUnderTest._getColumnCount.returns(promiseMock2);


            tableBaseBehaviorUnderTest._findRowWithCellTextInColumn("text", "column", "3");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._getColumnCount);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._getColumnCount);
        });

        it("should execute _initRowInTable with correct parameters is there is a row", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(3);
                }
            };
            tableBaseBehaviorUnderTest._executeWithEvents.returns(promiseMock);

            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            tableBaseBehaviorUnderTest._getColumnCount.returns(promiseMock2);


            tableBaseBehaviorUnderTest._findRowWithCellTextInColumn("text", "column", "3");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._initRowInTable);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._initRowInTable, 2, 2);
        });
    });

    describe("_findAllRowsWithCellTextInColumn method", function () {
        beforeEach(function () {
            tableBaseBehaviorUnderTest._initRowInTable = sinon.stub();
            sinon.stub(tableBaseBehaviorUnderTest, "_getColumnCount");
        });

        afterEach(function () {
            delete tableBaseBehaviorUnderTest._initRowInTable;
            tableBaseBehaviorUnderTest._getColumnCount.restore();

        });

        it("should throw error if text is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest._findAllRowsWithCellTextInColumn();
            });
        });

        it("should throw error if text is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest._findAllRowsWithCellTextInColumn(null);
            });
        });

        it("should throw error if column is undefined", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest._findAllRowsWithCellTextInColumn("text");
            });
        });

        it("should throw error if column is null", function () {
            assert.throws(function () {
                tableBaseBehaviorUnderTest._findAllRowsWithCellTextInColumn("text", null);
            });
        });

        it("should execute _executeWithEvents with 'FindAllRowsByCellContent' if column is a number", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([1,2,3]);
                }
            };
            tableBaseBehaviorUnderTest._executeWithEvents.returns(promiseMock);
            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            tableBaseBehaviorUnderTest._getColumnCount.returns(promiseMock2);
            tableBaseBehaviorUnderTest._findAllRowsWithCellTextInColumn("text", 1);
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeWithEvents, sinon.match({}), "FindAllRowsByCellContent", "#2", "text");
        });

        it("should execute _executeWithEvents with 'FindAllRowsByCellContent' if column is a string", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([1, 2, 3]);
                }
            };
            tableBaseBehaviorUnderTest._executeWithEvents.returns(promiseMock);
            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            tableBaseBehaviorUnderTest._getColumnCount.returns(promiseMock2);
            tableBaseBehaviorUnderTest._findAllRowsWithCellTextInColumn("text", "column");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeWithEvents, sinon.match({}), "FindAllRowsByCellContent", "column", "text");
        });

        it("should execute _getColumnCount is there is a row", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([1,2,3]);
                }
            };
            tableBaseBehaviorUnderTest._executeWithEvents.returns(promiseMock);

            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            tableBaseBehaviorUnderTest._getColumnCount.returns(promiseMock2);


            tableBaseBehaviorUnderTest._findAllRowsWithCellTextInColumn("text", "column");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._getColumnCount);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._getColumnCount);
        });

        it("should execute _initRowInTable with correct parameters is there is a row", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([1, 2, 3]);
                }
            };
            tableBaseBehaviorUnderTest._executeWithEvents.returns(promiseMock);

            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            tableBaseBehaviorUnderTest._getColumnCount.returns(promiseMock2);


            tableBaseBehaviorUnderTest._findAllRowsWithCellTextInColumn("text", "column");
            sinon.assert.callCount(tableBaseBehaviorUnderTest._initRowInTable, 3);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._initRowInTable, 0, 2);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._initRowInTable, 1, 2);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._initRowInTable, 2, 2);
        });

        it("should return an array if there is a row ", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb([1,2,3]);
                }
            };
            tableBaseBehaviorUnderTest._executeWithEvents.returns(promiseMock);

            var promiseMock2 = {
                then: function (cb) {
                    return cb(2);
                }
            };
            tableBaseBehaviorUnderTest._getColumnCount.returns(promiseMock2);

            tableBaseBehaviorUnderTest._initRowInTable.returns(10);
            var res = tableBaseBehaviorUnderTest._findAllRowsWithCellTextInColumn("text", "column");
            assert.deepEqual(res, [10, 10, 10]);
        });
    });

    describe("_getCellLength method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeCommand.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest._getCellLength(1, "column");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeCommand 'GetCellLength' with correct parameters", function () {
            tableBaseBehaviorUnderTest._getCellLength(1, "column");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeCommand);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeCommand, "GetCellLength", 1, "column");
        });
    });

    describe("_getCellData method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeCommand.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest._getCellData(1, "column");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeCommand 'GetCellData' with correct parameters", function () {
            tableBaseBehaviorUnderTest._getCellData(1, "column");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeCommand);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeCommand,  "GetCellData", 1, "column");
        });
    });

    describe("_setCellData method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest._setCellData(1, "column", "value");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'SetCellData' with correct parameters", function () {
            tableBaseBehaviorUnderTest._setCellData(1, "column", "value");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeNotWrapped, sinon.match({ 0: 1, 1: "column", 2: "value" }), "SetCellData", 1, "column", "value");
        });
    });

    describe("_isCellEditable method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeCommand.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest._isCellEditable(1, "column");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeCommand 'IsCellEditable' with correct parameters", function () {
            tableBaseBehaviorUnderTest._isCellEditable(1, "column");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeCommand);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeCommand, "IsCellEditable", 1, "column");
        });
    });

    describe("_openPossibleEntries method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest._openPossibleEntries(1, "column");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'OpenPossibleEntries' with correct parameters", function () {
            tableBaseBehaviorUnderTest._openPossibleEntries(1, "column");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeNotWrapped, sinon.match({ 0: 1, 1: "column" }), "OpenPossibleEntries", 1, "column");
        });
    });

    describe("_clickCell method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest._clickCell(1, "column");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'ClickCell' with correct parameters", function () {
            tableBaseBehaviorUnderTest._clickCell(1, "column");
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeNotWrapped, sinon.match({ 0: 1, 1: "column" }), "ClickCell", 1, "column");
        });
    });

    describe("_getRowCount method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeCommand.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest._getRowCount();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeCommand 'RowCount' with correct parameters", function () {
            tableBaseBehaviorUnderTest._getRowCount();
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeCommand);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeCommand, "RowCount");
        });
    });

    describe("_getColumnCount method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableBaseBehaviorUnderTest._executeCommand.returns(executionPromise);
            var res = tableBaseBehaviorUnderTest._getColumnCount();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeCommand 'ColumnCount' with correct parameters", function () {
            tableBaseBehaviorUnderTest._getColumnCount();
            sinon.assert.calledOnce(tableBaseBehaviorUnderTest._executeCommand);
            sinon.assert.calledWith(tableBaseBehaviorUnderTest._executeCommand, "ColumnCount");
        });
    });

    describe("_getRowAndColumnCount method", function () {
        it("should return the correct object", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(5);
                }
            };
            tableBaseBehaviorUnderTest._executeCommand.returns(promiseMock);
            var res = tableBaseBehaviorUnderTest._getRowAndColumnCount();
            assert.deepEqual(res, {rowCount: 5, columnCount: 5})
        });
    });
});
