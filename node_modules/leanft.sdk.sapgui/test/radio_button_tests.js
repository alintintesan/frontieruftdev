// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/17/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var Position = Core.Position;
var CheckedState = Core.CheckedState;


describe("RadioButton Description", function () {

    var RadioButton = require("../lib/radio_button.js").RadioButton;
    var radioButtonDescriptionUnderTest;

    beforeEach(function () {
        radioButtonDescriptionUnderTest = RadioButton();
    });

    describe("Constructor", function () {
        it("should assign 'SAPGUI' and 'RadioButton' LeanFT type", function () {
            radioButtonDescriptionUnderTest = new RadioButton();
            assert.deepEqual(radioButtonDescriptionUnderTest.leanFTType, {
                technology: "SAPGUI",
                leanftType: "RadioButton"
            });
        });
    });
});

describe("RadioButton Test Object", function () {
    var Core = require("leanft.sdk.core");
    var RadioButtonTO = require("../lib/radio_button.js").RadioButtonTO;
    var radioTestObjectUnderTest;

    beforeEach(function () {
        radioTestObjectUnderTest = new RadioButtonTO();
        sinon.stub(radioTestObjectUnderTest, "_executeWithEvents");
    });

    describe("set method", function () {

        it("should return the execution promise", function () {
            var executionPromise = {};
            radioTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = radioTestObjectUnderTest.set();
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments", function () {
            radioTestObjectUnderTest.set();
            sinon.assert.calledOnce(radioTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(radioTestObjectUnderTest._executeWithEvents, sinon.match({ }), "Set");
        });
    });    
});
