// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Label Description", function () {

    var Label = require("../lib/label.js").Label;
    var labelDescriptionUnderTest;

    beforeEach(function () {
        labelDescriptionUnderTest = Label();
    });


    describe("Constructor", function () {
        it("should assign 'SAPGUI' and 'Window' LeanFT type", function () {
            labelDescriptionUnderTest = new Label();
            assert.deepEqual(labelDescriptionUnderTest.leanFTType, {
                technology: "SAPGUI",
                leanftType: "Label"
            });
        });
    });

    describe("text method", function () {
        it("should add 'Content' to _properties when value is given", function () {
            labelDescriptionUnderTest.text("SAPGUILabelText");
            assert.strictEqual(labelDescriptionUnderTest._properties["Content"], "SAPGUILabelText");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = labelDescriptionUnderTest.text("SAPGUILabelText");
            assert.strictEqual(result, labelDescriptionUnderTest);
        });

        it("should remove 'Text' from _properties when value is null", function () {
            labelDescriptionUnderTest._properties["Content"] = "SAPGUIWindowText";
            labelDescriptionUnderTest.text(null);
            assert(!("Content" in labelDescriptionUnderTest._properties));
        });

        it("should return the value of 'Content' from _properties when value is not given", function () {
            labelDescriptionUnderTest._properties["Content"] = "SAPGUIWindowText";
            var value = labelDescriptionUnderTest.text();
            assert.strictEqual(value, "SAPGUIWindowText");
        });
    });

    describe("isHighlighted method", function () {
        it("should add 'Highlighted' to _properties when value is given", function () {
            labelDescriptionUnderTest.isHighlighted(true);
            assert.strictEqual(labelDescriptionUnderTest._properties["Highlighted"], true);
        });

        it("should add 'Highlighted' to _properties when value is given in string", function () {
            labelDescriptionUnderTest.isHighlighted("true");
            assert.strictEqual(labelDescriptionUnderTest._properties["Highlighted"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = labelDescriptionUnderTest.isHighlighted(true);
            assert.strictEqual(result, labelDescriptionUnderTest);
        });

        it("should remove 'Highlighted' from _properties when value is null", function () {
            labelDescriptionUnderTest._properties["Highlighted"] = true;
            labelDescriptionUnderTest.isHighlighted(null);
            assert(!("Highlighted" in labelDescriptionUnderTest._properties));
        });

        it("should return the value of 'Highlighted' from _properties when value is not given", function () {
            labelDescriptionUnderTest._properties["Highlighted"] = true;
            var result = labelDescriptionUnderTest.isHighlighted();
            assert.equal(result, true);
        });
    });

    describe("iconName method", function () {
        it("should add 'IconName' to _properties when value is given", function () {
            labelDescriptionUnderTest.iconName("SAPGUIIconName");
            assert.strictEqual(labelDescriptionUnderTest._properties["IconName"], "SAPGUIIconName");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = labelDescriptionUnderTest.iconName("SAPGUIIconName");
            assert.strictEqual(result, labelDescriptionUnderTest);
        });

        it("should remove 'IconName' from _properties when value is null", function () {
            labelDescriptionUnderTest._properties["IconName"] = "SAPGUIIconName";
            labelDescriptionUnderTest.iconName(null);
            assert(!("IconName" in labelDescriptionUnderTest._properties));
        });

        it("should return the value of 'IconName' from _properties when value is not given", function () {
            labelDescriptionUnderTest._properties["IconName"] = "SAPGUIIconName";
            var value = labelDescriptionUnderTest.iconName();
            assert.strictEqual(value, "SAPGUIIconName");
        });
    });

    describe("maxLength method", function () {
        it("should add 'MaxLength' to _properties when value is given", function () {
            labelDescriptionUnderTest.maxLength(1000);
            assert.strictEqual(labelDescriptionUnderTest._properties["MaxLength"], 1000);
        });

        it("should add 'MaxLength' to _properties when value is given in string", function () {
            labelDescriptionUnderTest.maxLength("1000");
            assert.strictEqual(labelDescriptionUnderTest._properties["MaxLength"], 1000);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = labelDescriptionUnderTest.maxLength(1000);
            assert.strictEqual(result, labelDescriptionUnderTest);
        });

        it("should remove 'MaxLength' from _properties when value is null", function () {
            labelDescriptionUnderTest._properties["MaxLength"] = 1000;
            labelDescriptionUnderTest.maxLength(null);
            assert(!("MaxLength" in labelDescriptionUnderTest._properties));
        });

        it("should return the value of 'MaxLength' from _properties when value is not given", function () {
            labelDescriptionUnderTest._properties["MaxLength"] = 1000;
            var result = labelDescriptionUnderTest.maxLength();
            assert.equal(result, 1000);
        });
    });

    describe("isNumerical method", function () {
        it("should add 'Numerical' to _properties when value is given", function () {
            labelDescriptionUnderTest.isNumerical(true);
            assert.strictEqual(labelDescriptionUnderTest._properties["Numerical"], true);
        });

        it("should add 'Numerical' to _properties when value is given in string", function () {
            labelDescriptionUnderTest.isNumerical("true");
            assert.strictEqual(labelDescriptionUnderTest._properties["Numerical"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = labelDescriptionUnderTest.isNumerical(true);
            assert.strictEqual(result, labelDescriptionUnderTest);
        });

        it("should remove 'Numerical' from _properties when value is null", function () {
            labelDescriptionUnderTest._properties["Numerical"] = true;
            labelDescriptionUnderTest.isNumerical(null);
            assert(!("Numerical" in labelDescriptionUnderTest._properties));
        });

        it("should return the value of 'Numerical' from _properties when value is not given", function () {
            labelDescriptionUnderTest._properties["Numerical"] = true;
            var result = labelDescriptionUnderTest.isNumerical();
            assert.equal(result, true);
        });
    });

    describe("relativeId method", function () {
        it("should add 'RelativeId' to _properties when value is given", function () {
            labelDescriptionUnderTest.relativeId("SAPGUIRelativeId");
            assert.strictEqual(labelDescriptionUnderTest._properties["RelativeId"], "SAPGUIRelativeId");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = labelDescriptionUnderTest.relativeId("SAPGUIRelativeId");
            assert.strictEqual(result, labelDescriptionUnderTest);
        });

        it("should remove 'RelativeId' from _properties when value is null", function () {
            labelDescriptionUnderTest._properties["RelativeId"] = "SAPGUIRelativeId";
            labelDescriptionUnderTest.relativeId(null);
            assert(!("RelativeId" in labelDescriptionUnderTest._properties));
        });

        it("should return the value of 'RelativeId' from _properties when value is not given", function () {
            labelDescriptionUnderTest._properties["RelativeId"] = "SAPGUIRelativeId";
            var value = labelDescriptionUnderTest.relativeId();
            assert.strictEqual(value, "SAPGUIRelativeId");
        });
    });
});

describe("Label Test Object", function () {
    var LabelTO = require("../lib/label.js").LabelTO;
    var labelTestObjectUnderTest;

    beforeEach(function () {
        labelTestObjectUnderTest = new LabelTO();
        sinon.stub(labelTestObjectUnderTest, "_getROProperty");
        sinon.stub(labelTestObjectUnderTest, "_executeWithEvents");
    });

    afterEach(function () {
    });

    describe("text method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            labelTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = labelTestObjectUnderTest.text();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Content' with correct parameters", function () {
            labelTestObjectUnderTest.text();
            sinon.assert.calledOnce(labelTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(labelTestObjectUnderTest._getROProperty, "Content", sinon.match({}));
        });
    });

    describe("isHighlighted method", function () {
        it("should return the execution promise", function () {
            var promiseMock = {};
            labelTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = labelTestObjectUnderTest.isHighlighted();
            assert.strictEqual(res, promiseMock);
        });

        it("should execute _getROProperty 'Highlighted'", function () {
            labelTestObjectUnderTest.isHighlighted();
            sinon.assert.calledOnce(labelTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(labelTestObjectUnderTest._getROProperty, "Highlighted", sinon.match({}));
        });
    });

    describe("iconName method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            labelTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = labelTestObjectUnderTest.iconName();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'IconName' with correct parameters", function () {
            labelTestObjectUnderTest.iconName();
            sinon.assert.calledOnce(labelTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(labelTestObjectUnderTest._getROProperty, "IconName", sinon.match({}));
        });
    });

    describe("maxLength method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            labelTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = labelTestObjectUnderTest.maxLength();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'MaxLength' with correct parameters", function () {
            labelTestObjectUnderTest.maxLength();
            sinon.assert.calledOnce(labelTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(labelTestObjectUnderTest._getROProperty, "MaxLength", sinon.match({}));
        });
    });

    describe("isNumerical method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            labelTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = labelTestObjectUnderTest.isNumerical();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Numerical' with correct parameters", function () {
            labelTestObjectUnderTest.isNumerical();
            sinon.assert.calledOnce(labelTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(labelTestObjectUnderTest._getROProperty, "Numerical", sinon.match({}));
        });
    });

    describe("relativeId method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            labelTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = labelTestObjectUnderTest.relativeId();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'RelativeId' with correct parameters", function () {
            labelTestObjectUnderTest.relativeId();
            sinon.assert.calledOnce(labelTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(labelTestObjectUnderTest._getROProperty, "RelativeId", sinon.match({}));
        });
    });

    describe("setCursorPosition method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            labelTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = labelTestObjectUnderTest.setCursorPosition(100);
            assert.equal(res, executionPromise);
        });

        it("should throw error if position is undefined", function () {
            assert.throws(function () {
                labelTestObjectUnderTest.setCursorPosition();
            });
        });

        it("should throw error if position is null", function () {
            assert.throws(function () {
                labelTestObjectUnderTest.setCursorPosition(null);
            });
        });

        it("should execute _executeWithEvents 'SetCaretPos' if position is defined as number", function () {
            labelTestObjectUnderTest.setCursorPosition(100);
            sinon.assert.calledOnce(labelTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(labelTestObjectUnderTest._executeWithEvents, sinon.match({ 0: 100 }), "SetCaretPos", 100);
        });

        it("should execute _executeWithEvents 'SetCaretPos' if position is defined as string", function () {
            labelTestObjectUnderTest.setCursorPosition("100");
            sinon.assert.calledOnce(labelTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(labelTestObjectUnderTest._executeWithEvents, sinon.match({ 0: "100"}), "SetCaretPos", 100);
        });
    });

    describe("setFocus method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            labelTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = labelTestObjectUnderTest.setFocus();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'SetFocus'", function () {
            labelTestObjectUnderTest.setFocus();
            sinon.assert.calledOnce(labelTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(labelTestObjectUnderTest._executeWithEvents, sinon.match({}), "SetFocus");
        });
    });
});
