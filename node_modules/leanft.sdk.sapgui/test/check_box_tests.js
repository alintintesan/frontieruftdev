// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("CheckBox Description", function () {

    var CheckBox = require("../lib/check_box.js").CheckBox;
    var checkBoxDescriptionUnderTest;

    beforeEach(function () {
        checkBoxDescriptionUnderTest = CheckBox();
    });

    describe("Constructor", function () {
        it("should assign 'SAPGUI' and 'CheckBox' LeanFT type", function () {
            checkBoxDescriptionUnderTest = new CheckBox();
            assert.deepEqual(checkBoxDescriptionUnderTest.leanFTType, {
                technology: "SAPGUI",
                leanftType: "CheckBox"
            });
        });
    });
});

describe("CheckBox Test Object", function () {
    var CheckBoxTO = require("../lib/check_box.js").CheckBoxTO;
    var checkBoxTOUnderTest;

    beforeEach(function () {
        checkBoxTOUnderTest = new CheckBoxTO();
        sinon.stub(checkBoxTOUnderTest, "_executeWithEvents");
    });

    describe("set method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            checkBoxTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = checkBoxTOUnderTest.set("true");
            assert.equal(res, executionPromise);
        });

        it("should throw error if the state is undefined", function () {
            assert.throws(function () {
                checkBoxTOUnderTest.set();
            });
        });

        it("should throw error if the state is null", function () {
            assert.throws(function () {
                checkBoxTOUnderTest.set(null);
            });
        });

        it("should execute _executeWithEvents 'Set' if the state is defined as true", function () {
            checkBoxTOUnderTest.set(true);
            sinon.assert.calledOnce(checkBoxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(checkBoxTOUnderTest._executeWithEvents, sinon.match({ 0: true }), "Set", "ON");
        });

        it("should execute _executeWithEvents 'Set' if the state is defined as false", function () {
            checkBoxTOUnderTest.set(false);
            sinon.assert.calledOnce(checkBoxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(checkBoxTOUnderTest._executeWithEvents, sinon.match({ 0: false }), "Set", "OFF");
        });


        it("should execute _executeWithEvents 'Set' if the state is defined as true in string", function () {
            checkBoxTOUnderTest.set("true");
            sinon.assert.calledOnce(checkBoxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(checkBoxTOUnderTest._executeWithEvents, sinon.match({ 0: "true" }), "Set", "ON");
        });
        
        it("should execute _executeWithEvents 'Set' if the state is defined as false in string", function () {
            checkBoxTOUnderTest.set("false");
            sinon.assert.calledOnce(checkBoxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(checkBoxTOUnderTest._executeWithEvents, sinon.match({ 0: "false" }), "Set", "OFF");
        });
    });
});
