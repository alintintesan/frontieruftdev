// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Menubar Description", function () {

    var Menubar = require("../lib/menu_bar.js").Menubar;
    var menuBarDescriptionUnderTest;

    beforeEach(function () {
        menuBarDescriptionUnderTest = Menubar();
    });

    describe("Constructor", function () {
        it("should assign 'SAPGUI' and 'Menubar' LeanFT type", function () {
            menuBarDescriptionUnderTest = new Menubar();
            assert.deepEqual(menuBarDescriptionUnderTest.leanFTType, {
                technology: "SAPGUI",
                leanftType: "Menubar"
            });
        });
    });
});

describe("Menubar Test Object", function () {
    var MenubarTO = require("../lib/menu_bar.js").MenubarTO;
    var menuBarTOUnderTest;

    beforeEach(function () {
        menuBarTOUnderTest = new MenubarTO();
        sinon.stub(menuBarTOUnderTest, "_getROProperty");
        sinon.stub(menuBarTOUnderTest, "_executeWithEvents");
    });

    describe("buildMenuPath method", function () {
        beforeEach(function () {
            sinon.stub(menuBarTOUnderTest, "_buildMenuPath");
        });

        afterEach(function () {
            menuBarTOUnderTest._buildMenuPath.restore();
        });

        it("should execute _buildMenuPath with correct parameters", function () {
            menuBarTOUnderTest.buildMenuPath(1,2,3,4, "Item");
            sinon.assert.calledOnce(menuBarTOUnderTest._buildMenuPath);
            sinon.assert.calledWith(menuBarTOUnderTest._buildMenuPath, 1, 2, 3, 4, "Item");
        });
    });

    describe("select method", function () {
        it("should throw error if path is undefined", function () {
            assert.throws(function () {
                menuBarTOUnderTest.select();
            });
        });

        it("should throw error if path is null", function () {
            assert.throws(function () {
                menuBarTOUnderTest.select(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            menuBarTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = menuBarTOUnderTest.select("path1");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Select' if path is defined", function () {
            menuBarTOUnderTest.select("path1");
            sinon.assert.calledOnce(menuBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(menuBarTOUnderTest._executeWithEvents, sinon.match({ 0: "path1" }), "Select", "path1");
        });
    });
});
