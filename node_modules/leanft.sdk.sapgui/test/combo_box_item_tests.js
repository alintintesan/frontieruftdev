// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/13/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("ComboBox Item", function () {

    var ComboBoxItem = require("../lib/combo_box_item.js").ComboBoxItem;
    var comboBoxItemUnderTest;
    var owner;

    beforeEach(function () {
        owner = { owner: "Owner", _minimumItemIndex: 1};
        comboBoxItemUnderTest = new ComboBoxItem(owner, 10, "TextRepresentation");
    });

    afterEach(function () {        
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            assert.strictEqual(comboBoxItemUnderTest._ownerComboBox, owner);
            assert.strictEqual(comboBoxItemUnderTest._identifier, 9);
            assert.strictEqual(comboBoxItemUnderTest._textRepresentation, "TextRepresentation");
        });        
    });

    describe("_getIdentifier method", function () {
        it("should return correct values", function () {
            var res = comboBoxItemUnderTest._getIdentifier();
            assert.strictEqual(res, 9);            
        });
    });

    describe("_getTextRepresentation method", function () {
        it("should return correct values", function () {
            var res = comboBoxItemUnderTest._getTextRepresentation();
            assert.strictEqual(res, "TextRepresentation");
        });
    });

    describe("key method", function () {
        beforeEach(function () {
            sinon.stub(comboBoxItemUnderTest, "_getKeyByArrayIndex");
            comboBoxItemUnderTest._ownerComboBox._getAllItemsNames = sinon.stub();
        });

        afterEach(function () {
            comboBoxItemUnderTest._getKeyByArrayIndex.restore();
            delete comboBoxItemUnderTest._ownerComboBox._getAllItemsNames;
        });

        it("should execute _getKeyByArrayIndex is _identifier is number", function () {
            comboBoxItemUnderTest._identifier = 1;
            comboBoxItemUnderTest.key();
            sinon.assert.calledOnce(comboBoxItemUnderTest._getKeyByArrayIndex);
            sinon.assert.calledWith(comboBoxItemUnderTest._getKeyByArrayIndex, 1);
        });

        it("should execute _getAllItemsNames with 'AllItems' if _identifier is string", function () {
            comboBoxItemUnderTest._identifier = "Item1";

            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1", "Item2"]);
                }
            };
            comboBoxItemUnderTest._ownerComboBox._getAllItemsNames.returns(promiseMock);

            comboBoxItemUnderTest.key();
            sinon.assert.calledOnce(comboBoxItemUnderTest._ownerComboBox._getAllItemsNames);
            sinon.assert.calledWith(comboBoxItemUnderTest._ownerComboBox._getAllItemsNames, "AllItems");
        });

        it("should execute _getKeyByArrayIndex if the return value is in list", function () {
            comboBoxItemUnderTest._identifier = "Item2";

            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1", "Item2"]);
                }
            };
            comboBoxItemUnderTest._ownerComboBox._getAllItemsNames.returns(promiseMock);

            comboBoxItemUnderTest.key();
            sinon.assert.calledOnce(comboBoxItemUnderTest._getKeyByArrayIndex);
            sinon.assert.calledWith(comboBoxItemUnderTest._getKeyByArrayIndex, 1);
        });

        it("should throw error if the return value is not in list", function () {
            comboBoxItemUnderTest._identifier = "Item3";

            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1", "Item2"]);
                }
            };
            comboBoxItemUnderTest._ownerComboBox._getAllItemsNames.returns(promiseMock);

            assert.throws(function () {
                comboBoxItemUnderTest.key();
            });
            
        });

        it("should throw error if the identifier is not correct type", function () {
            comboBoxItemUnderTest._identifier = {};
            assert.throws(function () {
                comboBoxItemUnderTest.key();
            });

        });
    });

    describe("text method", function () {
        beforeEach(function () {
            sinon.stub(comboBoxItemUnderTest, "_getKeyByArrayIndex");
            comboBoxItemUnderTest._ownerComboBox._getAllItemsNames = sinon.stub();
        });

        afterEach(function () {
            comboBoxItemUnderTest._getKeyByArrayIndex.restore();
            delete comboBoxItemUnderTest._ownerComboBox._getAllItemsNames;
        });

        it("should execute _getAllItemsNames with 'AllItems'", function () {
            comboBoxItemUnderTest._identifier = 1;
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1", "Item2"]);
                }
            };
            comboBoxItemUnderTest._ownerComboBox._getAllItemsNames.returns(promiseMock);
            
            comboBoxItemUnderTest.text();
            sinon.assert.calledOnce(comboBoxItemUnderTest._ownerComboBox._getAllItemsNames);
            sinon.assert.calledWith(comboBoxItemUnderTest._ownerComboBox._getAllItemsNames, "AllItems");
        });

        it("should return correct value if identifier is number and in range", function () {
            comboBoxItemUnderTest._identifier = 1;
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1", "Item2"]);
                }
            };
            comboBoxItemUnderTest._ownerComboBox._getAllItemsNames.returns(promiseMock);
            
            var res = comboBoxItemUnderTest.text();
            assert.strictEqual(res, "Item2");
        });

        it("should throw error if identifier is number and in range", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1", "Item2"]);
                }
            };
            comboBoxItemUnderTest._ownerComboBox._getAllItemsNames.returns(promiseMock);
            comboBoxItemUnderTest._identifier = 2;
            assert.throws(function () {
                comboBoxItemUnderTest.text();
            });
        });

        it("should return correct value if identifier is string and in range", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1", "Item2"]);
                }
            };
            comboBoxItemUnderTest._ownerComboBox._getAllItemsNames.returns(promiseMock);
            comboBoxItemUnderTest._identifier = "Item2";
            var res = comboBoxItemUnderTest.text();
            assert.strictEqual(res, "Item2");
        });

        it("should throw error if identifier is string and not in range", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1", "Item2"]);
                }
            };
            comboBoxItemUnderTest._ownerComboBox._getAllItemsNames.returns(promiseMock);
            comboBoxItemUnderTest._identifier = "Item3";
            assert.throws(function () {
                comboBoxItemUnderTest.text();
            });
        });



        it("should throw error if the identifier is not correct type", function () {
            comboBoxItemUnderTest._identifier = {};
            assert.throws(function () {
                comboBoxItemUnderTest.key();
            });

        });
    });

    describe("_getKeyByArrayIndex method", function () {
        beforeEach(function () {
            comboBoxItemUnderTest._ownerComboBox._getAllItemsNames = sinon.stub();
        });

        afterEach(function () {
            delete comboBoxItemUnderTest._ownerComboBox._getAllItemsNames;
        });

        it("should execute _getAllItemsNames with 'AllKeys'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1", "Item2"]);
                }
            };
            comboBoxItemUnderTest._ownerComboBox._getAllItemsNames.returns(promiseMock);

            comboBoxItemUnderTest._getKeyByArrayIndex(1);
            sinon.assert.calledOnce(comboBoxItemUnderTest._ownerComboBox._getAllItemsNames);
            sinon.assert.calledWith(comboBoxItemUnderTest._ownerComboBox._getAllItemsNames, "AllKeys");
        });

        it("should return correct value if index is in range", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1", "Item2"]);
                }
            };
            comboBoxItemUnderTest._ownerComboBox._getAllItemsNames.returns(promiseMock);

            var res = comboBoxItemUnderTest._getKeyByArrayIndex(1);
            assert.strictEqual(res, "Item2");
        });

        it("should return null if index is not in range", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(["Item1", "Item2"]);
                }
            };
            comboBoxItemUnderTest._ownerComboBox._getAllItemsNames.returns(promiseMock);

            var res = comboBoxItemUnderTest._getKeyByArrayIndex(2);
            assert.strictEqual(res, null);
        });
    });
});
