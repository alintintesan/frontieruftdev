// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/11/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = require("leanft.sdk.core").ObjectUtils;
var ArrayUtils = Core.ArrayUtils;
var Convert = Core.Convert;
var TableBase = require("./table_base.js");
var TableBaseDescriptionBehavior = TableBase.TableBaseDescriptionBehavior;
var TableBaseBehavior = TableBase.TableBaseBehavior;
var TableCell = require("./table_cell.js").TableCell;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;
var SapGuiBaseDescription = require("./sapgui_object_base.js").SapGuiBaseDescription;
var SapGuiBaseTO = require("./sapgui_object_base.js").SapGuiBaseTO;
var TableBaseOperationBehavior = Core.TableBaseOperationBehavior;

/**
 * The selections that are possible in a table.
 * @typedef {SAPGUI.TableSelectionMode} TableSelectionMode
 * @property {string} noSelection Cannot select
 * @property {string} singleSelection Only one can be selected.
 * @property {string} multipleSelection One or more can be selected.
 * @memberof SAPGUI
 */
var TableSelectionMode = {
    /**
     * @type {string}
     */
    noSelection: "noselection",
    /**
     * @type {string}
     */
    singleSelection: "singleselection",
    /**
     * @type {string}
     */
    multipleSelection: "multipleselection",

    /**
     * @ignore
     */
    _convertToNative: {
        noselection: "No Selection",
        singleselection: "Single Selection",
        multipleselection: "Multiple Selection"
    },

    /**
     * @ignore
     */
    _convertToSelection: {
        "No Selection": "noselection",
        "Single Selection": "singleselection",
        "Multiple Selection": "multipleselection"
    },

    /**
     * @ignore
     */
    _selectionToNative: function (mode) {
        return TableSelectionMode._convertToNative[mode.toLowerCase()];
    },

    /**
     * @ignore
     */
    _nativeToSelection: function (mode) {
        return TableSelectionMode._convertToSelection[mode];
    }
};

/**
 * TableDescriptionBehavior - the description for table
 * @memberof SAPGUI
 * @ignore
 */
var TableDescriptionBehavior = {
    /**
     * Indicates which selections can be made on the columns.
     * @param {TableSelectionMode|string} [columnSelectionMode] When provided, this method acts as a setter and sets the columnSelectionMode value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored columnSelectionMode value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    columnSelectionMode: function (columnSelectionMode) {
        return this._propertyHandler("columnselectmode", columnSelectionMode, TableSelectionMode._selectionToNative, TableSelectionMode._nativeToSelection);
    },

    /**
     * Indicates which selections can be made on the rows.
     * @param {TableSelectionMode|string} [rowSelectionMode] When provided, this method acts as a setter and sets the rowSelectionMode value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored rowSelectionMode value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    rowSelectionMode: function (rowSelectionMode) {
        return this._propertyHandler("rowselectmode", rowSelectionMode, TableSelectionMode._selectionToNative, TableSelectionMode._nativeToSelection);
    }
};

/**
 * The description of a Table test object.
 * @param {Object} [props] Initializes a Table test object using the supplied property bag.
 * @returns {Table} the description object that was initialized.
 * @class Table
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.TableBaseDescriptionBehavior
 * @mixes SAPGUI.TableDescriptionBehavior
 */
function Table(props) {
    var tableDesc = new SapGuiBaseDescription("Table");
    Utils.extend(tableDesc, TableBaseDescriptionBehavior);
    Utils.extend(tableDesc, TableDescriptionBehavior);
    tableDesc._defineByPropertyBag(props);
    return tableDesc;
}

/**
 * A Table object,
 * @constructor
 * @class TableTO
 * @extends SAPGUI.SapGuiBaseTO
 * @mixes SAPGUI.TableBaseBehavior._methods
 * @mixes SAPGUI.TableBaseBehavior._properties
 * @mixes TableBaseOperationBehavior._methods
 * @mixes TableBaseOperationBehavior._properties
 * @mixes SAPGUI.TableTOBehavior._methods
 * @mixes SAPGUI.TableTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof SAPGUI
 */
function TableTO(session, description) {
    description = description || Table();
    var tableTO = new SapGuiBaseTO("SAPGuiTable", session, description);
    tableTO._mergeBehavior(TableBaseOperationBehavior);
    tableTO._mergeBehavior(TableBaseBehavior);
    tableTO._mergeBehavior(WrappedItemExecutorBehavior);
    tableTO._mergeBehavior(TableTOBehavior);
    return tableTO;
}

//Consts
var columnSelectionModeWiredName = "columnselectmode";
var rowSelectionModeWiredName = "rowselectmode";

/**
 * The behaviors of TableTO
 * @memberof SAPGUI
 * @ignore
 */
var TableTOBehavior = {
    _helpers: {
        /**
         * @ignore
         */
        _createCell: function (rowIndex, columnIdentifier) {
            return new TableCell(this, rowIndex, columnIdentifier);
        }
    },

    /**
     * @memberof SAPGUI.TableTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns either a specific cell or a promise of all cells in the table (when called without arguments), all the cells in a row (when called with row only).
         * @function
         * @param {number} [row] The row index of the specific cell.
         * @param {number} [column] The column index in the row, specified by the row parameter.
         * @returns {Promise<SAPGUI.TableCell[][] | SAPGUI.TableCell[]> | SAPGUI.TableCell} a promise that is fulfilled with a specific cell when row and col are provided;
         * <BR> a promise that is fulfilled with all the cells in a row when only a row is provided;
         * <BR> a promise that is fulfilled with all cells in the table when no row is provided.
         */
        cells: function (row, column) {
            return this._cells(row, column);
        },

        /**
         * Returns which selections can be made on the columns.
         * @function
         * @returns {Promise<SAPGUI.TableSelectionMode>} a promise that is fulfilled with the selections that can be made on the columns.
         */
        columnSelectionMode: {
            type: 'enum',
            enumType: TableSelectionMode,
            enumName: 'TableSelectionMode',
            wiredName: columnSelectionModeWiredName,
            getter: function () {
                return this._getROPropertyWithoutEvents(columnSelectionModeWiredName).then(TableSelectionMode._nativeToSelection);
            }
        },

        /**
         * Returns which selections can be made on the rows.
         * @function
         * @returns {Promise<SAPGUI.TableSelectionMode>} a promise that is fulfilled with the selections that can be made on the rows.
         */
        rowSelectionMode: {
            type: 'enum',
            enumType: TableSelectionMode,
            enumName: 'TableSelectionMode',
            wiredName: rowSelectionModeWiredName,
            getter: function () {
                return this._getROPropertyWithoutEvents(rowSelectionModeWiredName).then(TableSelectionMode._nativeToSelection);
            }
        }
    },

    /**
     * @memberof SAPGUI.TableTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Selects all columns in the table.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        selectAllColumns: function () {
            return this._executeWithEvents(arguments, "SelectAllColumns");
        },

        /**
         * Presses the table settings button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        pressSettingsButton: function () {
            return this._executeWithEvents(arguments, "PressSettingsButton");
        },

        /*jshint eqnull:true */
        /**
         * Indicates whether or not the specified row is a valid row for the table.
         * @function
         * @param {number} row 0-based row index
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean value indicating if the row exists.
         */
        isValidRow: function (row) {
            if (row == null)
                throw new Error("The parameter row cannot be null.");

            return this._executeWithEventsOnError(arguments, "ValidRow", this._rowTransform(row));//1-based index
        },

        /**
         * Returns the first row in a column that contains the specified text, by column name.
         * @function
         * @param {string} text The The text to search for.
         * @param {number|string} column The name or the index of the column to search for.
         * @param {number} startFromRow The index of the row from which to start the search.
         * @returns {Promise<TableCell[]>} a promise that is fulfilled with the array of Cells or null if not found.
         */
        findRowWithCellTextInColumn: function (text, column, startFromRow) {
            return this._findRowWithCellTextInColumn(text, column, startFromRow);
        },

        /**
         * Returns all rows with the specified text in the specified column, by column index.
         * @function
         * @param {string} text The The text to search for.
         * @param {number|string} column The name or the index of the column to search for.
         * @returns {Promise<TableCell[][]>} a promise that is fulfilled with the array of array of Cells.
         */
        findAllRowsWithCellTextInColumn: function (text, column) {
            return this._findAllRowsWithCellTextInColumn(text, column);
        }
    }
};

module.exports.TableTO = TableTO;
module.exports.Table = Table;
module.exports.TableSelectionMode = TableSelectionMode;
