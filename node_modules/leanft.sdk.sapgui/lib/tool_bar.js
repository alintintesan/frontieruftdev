// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var Convert = Core.Convert;
var MenuHelperBehavior = Core.MenuHelperBehavior;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;
var SapMenuHelperBehavior = require("./sap_menu_helper.js").SapMenuHelperBehavior;

var SapGuiObjectBase = require("./sapgui_object_base.js");
var SapGuiBaseDescription = SapGuiObjectBase.SapGuiBaseDescription;
var SapGuiBaseTO = SapGuiObjectBase.SapGuiBaseTO;

/**
 * ToolBarDescriptionBehavior - Description of a SAP GUI for Windows toolbar.
 * @memberof SAPGUI
 * @ignore
 */
var ToolBarDescriptionBehavior = {
    /**
     * Indicates whether the toolbar can accept user input.
     * @param {boolean} [isEnabled] When provided, this method acts as a setter and sets the isEnabled value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isEnabled: function (isEnabled) {
        return this._propertyHandler("Enabled", isEnabled, Convert.toBool);
    }
};

/**
 * The description of a ToolBar test object.
 * @param {Object} [props] Initializes a ToolBar test object using the supplied property bag.
 * @returns {ToolBar} the description object that was initialized.
 * @class ToolBar
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.ToolBarDescriptionBehavior
 */
function ToolBar(props) {
    var toolBarDesc = new SapGuiBaseDescription("ToolBar");
    Utils.extend(toolBarDesc, ToolBarDescriptionBehavior);
    toolBarDesc._defineByPropertyBag(props);
    return toolBarDesc;
}

/**
 * A ToolBar object,
 * @constructor
 * @class ToolBarTO
 * @extends SAPGUI.SapGuiBaseTO
 * @mixes MenuHelperBehavior
 * @mixes SAPGUI.SapMenuHelperBehavior
 * @mixes SAPGUI.ToolBarTOBehavior._methods
 * @mixes SAPGUI.ToolBarTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof SAPGUI
 */
function ToolBarTO(session, description) {
    description = description || ToolBar();
    var toolBarTO = new SapGuiBaseTO("SAPGuiToolbar", session, description);
    toolBarTO._mergeBehavior(WaitUntilEnabledBehavior);
    toolBarTO._mergeBehavior(MenuHelperBehavior);
    toolBarTO._mergeBehavior(SapMenuHelperBehavior);
    toolBarTO._mergeBehavior(ToolBarTOBehavior);
    return toolBarTO;
}

/**
 * The behaviors of the ToolBar object
 * @memberof SAPGUI
 * @ignore
 */
var ToolBarTOBehavior = {
    /**
     * @memberof SAPGUI.ToolBarTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * Indicates whether the toolbar can accept user input.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the toolbar can accept user input.
         */
        isEnabled: {
            wiredName: "Enabled"
        }
    },

    /**
     * @memberof SAPGUI.ToolBarTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Presses the specified toolbar button.
         * @function
         * @param {string} buttonId The button ID in text format.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        pressButton: function (buttonId) {
            if (buttonId == null)
                throw new Error("The button ID cannot be null.");
            return this._executeWithEvents(arguments, "PressButton", buttonId);
        },

        /*jshint eqnull:true */
        /**
         * Presses the specified toolbar button to open the button's context menu.
         * @function
         * @param {string} buttonId The button ID in text format.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        pressContextButton: function (buttonId) {
            if (buttonId == null)
                throw new Error("The button ID cannot be null.");
            return this._executeWithEvents(arguments, "PressContextButton", buttonId);
        },

        /*jshint eqnull:true */
        /**
         * Selects the specified menu item from the toolbar button context menu, by path or by index.
         * @function
         * @param {number|string} item The menu item name or full path or 0-based index.
         * Use the BuildMenuPath method to build the item path string to be used as the itemPath argument for this method.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        selectMenuItem: function (pathOrIndex) {
            if (pathOrIndex == null)
                throw new Error("The menu item cannot be null.");
            var value = pathOrIndex;
            if (typeof pathOrIndex === 'number') {
                value = pathOrIndex + 1;
            }
            return this._executeWithEvents(arguments, "SelectMenuItem", value);
        },

        /*jshint eqnull:true */
        /**
         * Selects the specified menu item from the toolbar button context menu, by SAP ID.
         * @function
         * @param {number|string} id The SAP ID of the context menu item.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        selectMenuItemById: function (id) {
            if (id == null)
                throw new Error("The SAP ID cannot be null.");
            return this._executeWithEvents(arguments, "SelectMenuItemById", id);
        },

        /**
         * Returns the path of the specified menu item.
         * @function
         * @param {...(number|string)} menuPathParts The menu path parts can be: logical name(string), full path(string), or numeric 1-based index(int).
         * @returns {string} the path of the specified menu item.
         */
        buildMenuPath: function (menuPathParts) {
            return this._buildMenuPath.apply(this, arguments);
        }
    }
};

module.exports.ToolBar = ToolBar;
module.exports.ToolBarTO = ToolBarTO;