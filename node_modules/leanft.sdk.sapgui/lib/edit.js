// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var Convert = Core.Convert;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

var SapGuiObjectBase = require("./sapgui_object_base.js");
var SapGuiBaseDescription = SapGuiObjectBase.SapGuiBaseDescription;
var SapGuiBaseTO = SapGuiObjectBase.SapGuiBaseTO;

/**
 * Description of a SAP GUI for Windows edit field.
 * @memberof SAPGUI
 * @ignore
 */
var EditDescriptionBehaviour = {
    /**
     * The static text attached to the edit field.
     * @param {string} [attachedText] When provided, this method acts as a setter and sets the attachedText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored attachedText value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    attachedText: function (attachedText) {
        return this._simplePropertyHandler("AttachedText", attachedText);
    },
    /**
     * Indicates whether the edit field can accept user input.
     * @param {boolean} [isEnabled] When provided, this method acts as a setter and sets the isEnabled value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isEnabled: function (isEnabled) {
        return this._propertyHandler("Enabled", isEnabled, Convert.toBool);
    },

    /**
     * Indicates whether the edit field is highlighted.
     * @param {boolean} [isHighlighted] When provided, this method acts as a setter and sets the isHighlighted value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isHighlighted value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isHighlighted: function (isHighlighted) {
        return this._propertyHandler("Highlighted", isHighlighted, Convert.toBool);
    },

    /**
     * The name of the icon used in the edit box.
     * @param {string} [iconName] When provided, this method acts as a setter and sets the iconName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored iconName value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    iconName: function (iconName) {
        return this._simplePropertyHandler("IconName", iconName);
    },

    /**
     * The maximum number of characters that can be entered in the edit box.
     * @param {number} [maxLength] When provided, this method acts as a setter and sets the maxLength value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored maxLength value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    maxLength: function (maxLength) {
        return this._propertyHandler("MaxLength", maxLength, Convert.toNumber);
    },

    /**
     * Indicates whether the edit box is a numeric field.
     * @param {boolean} [isNumerical] When provided, this method acts as a setter and sets the isNumerical value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isNumerical value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isNumerical: function (isNumerical) {
        return this._propertyHandler("Numerical", isNumerical, Convert.toBool);
    },

    /**
     * Indicates whether the edit box is required.
     * @param {boolean} [isRequired] When provided, this method acts as a setter and sets the isRequired value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isRequired value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isRequired: function (isRequired) {
        return this._propertyHandler("Required", isRequired, Convert.toBool);
    },

    /**
     * The text in the edit field.
     * @param {string} [text] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    text: function (text) {
        return this._simplePropertyHandler("Value", text);
    }
};

/**
 * @param {Object} [props] Initializes a Label test object using the supplied property bag.
 * @returns {Edit} the description object that was initialized.
 * @constructor
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.EditDescriptionBehaviour
 */
function Edit(props){
    var editDesc = new SapGuiBaseDescription("EditField");
    ObjUtils.extend(editDesc, EditDescriptionBehaviour);
    editDesc._defineByPropertyBag(props);
    return editDesc;
}

/**
 * An EditTO object
 * @constructor
 * @class EditTO
 * @extends SAPGUI.SapGuiBaseTO
 * @mixes SAPGUI.EditTOBehavior._properties
 * @mixes SAPGUI.EditTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof SAPGUI
 */
function EditTO(session, description) {
    description = description || Edit();
    var editTO = new SapGuiBaseTO("SAPGuiEdit", session, description);
    editTO._mergeBehavior(WaitUntilEnabledBehavior);
    editTO._mergeBehavior(EditTOBehavior);
    return editTO;
}

/**
 * The behaviors of the EditTO object
 * @memberof SAPGUI
 * @ignore
 */
var EditTOBehavior = {
    /**
     * @memberof SAPGUI.EditTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The static text attached to the control.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the static text attached to the control.
         */
        attachedText: {
            wiredName: "AttachedText"
        },

        /**
         * Indicates whether the field can accept user input.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the field can accept user input.
         */
        isEnabled: {
            wiredName: "Enabled"
        },

        /**
         * Indicates whether the edit field is highlighted.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the edit field is highlighted.
         */
        isHighlighted: {
            wiredName: "Highlighted"
        },

        /**
         * The name of the edit field's icon.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the edit field's icon.
         */
        iconName: {
            wiredName: "IconName"
        },

        /**
         * The maximum number of characters that can be entered in the edit field.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the maximum number of characters that can be entered in the edit field.
         */
        maxLength: {
            type: "uint",
            wiredName: "MaxLength"
        },

        /**
         * Indicates whether the edit field is a numeric field.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the edit field is a numeric field.
         */
        isNumerical: {
            wiredName: "Numerical"
        },

        /**
         * Indicates whether the edit field is required.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the edit field is required.
         */
        isRequired: {
            wiredName: "Required"
        },

        /**
         * The string value of the edit field.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the string value of the edit field.
         */
        text: {
            wiredName: "Value"
        }
    },

    /**
     * @memberof SAPGUI.EditTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Opens the list of possible entries for the edit field.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        openPossibleEntries: function () {
            return this._executeWithEvents(arguments, "OpenPossibleEntries");
        },

        /*jshint eqnull:true */
        /**
         * Sets the text value of the edit field.
         * @function
         * @param {string} text The 0-based character position.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        setText: function (text) {
            if (text == null)
                throw new Error("The text cannot be null.");
            return this._executeWithEvents(arguments, "Set", text);
        },

        /*jshint eqnull:true */
        /**
         * Sets the position of the cursor within the edit field.
         * @function
         * @param {number} position The 0-based character position.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        setCursorPosition: function (position) {
            if (position == null)
                throw new Error("The parameter position cannot be null.");
            return this._executeWithEvents(arguments, "SetCaretPos", Convert.toNumber(position));
        },
        /**
         * Sets focus on the edit field.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        setFocus: function () {
            return this._executeWithEvents(arguments, "SetFocus");
        },

        /*jshint eqnull:true */
        /**
         * Sets the encoded value of this edit box.
         * Generate the encoded value using the Password Encoder utility,
         * available from the LeanFT > Tools menu in your IDE or from the Windows Start menu.
         * Note: The SetSecure method enables you to hide passwords displayed on the screen
         * while running or editing a LeanFT test, but it is not intended to be a secure way to protect password information.
         * @function
         * @param {string} encodedText The encoded text to enter in this edit box.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        setSecure: function (encodedText) {
            if (encodedText == null)
                throw new Error("The encoded text cannot be null.");
            return this._executeWithEvents(arguments, "SetSecure", encodedText);
        }
    }
};

module.exports.Edit = Edit;
module.exports.EditTO = EditTO;
