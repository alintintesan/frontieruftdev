// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/16/2016.
 */
var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * A TreeViewNode object
 * @constructor
 * @class TreeViewNode
 * @mixes SAPGUI.TreeViewNodeBehavior._properties
 * @mixes SAPGUI.TreeViewNodeBehavior._methods
 * @memberof SAPGUI
 */
function TreeViewNode(ownerTreeView, path) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(TreeViewNodeBehavior);
    this._ownerTreeView = ownerTreeView;
    this._path = path;
    this._executeWithEventsOnItem = this._ownerTreeView._executeWithEventsOnItem.bind(this._ownerTreeView, this);
}

TreeViewNode.prototype = {
    _ownerTreeView: null,
    _path: null,
    _executeWithEventsOnItem: null
};

/**
 * The methods of TreeViewNode object
 * @memberof SAPGUI
 * @ignore
 */
var TreeViewNodeBehavior = {
    /**
     * @memberof SAPGUI.TreeViewNodeBehavior
     * @ignore
     */
    _properties: {
        /**
         * Get the path of the node.
         * @returns {string} the path of the node.
         */
        path: function () {
            return this._path;
        }
    },

    /**
     * @memberof SAPGUI.TreeViewNodeBehavior
     * @ignore
     */
    _methods: {
        /**
         * Hides this node's sub-nodes in the expanded tree object.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        collapse: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._collapseNode, this._path);
        },

        /**
         * Displays this node's sub-nodes in the tree object.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        expand: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._expandNode, this._path);
        },

        /*jshint eqnull:true */
        /**
         * Clicks the specified button item in this node of a SAP column tree or list tree, by button text or index.
         * @function
         * @param {number|string} itemOrIndex The button text or 0-based index.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        clickButton: function (itemOrIndex) {
            if (itemOrIndex == null)
                throw new Error("The parameter itemOrIndex cannot be null.");
            return this._executeWithEventsOnItem(this._ownerTreeView._clickButton, this._path, this._ownerTreeView._itemTransform(itemOrIndex));
        },

        /*jshint eqnull:true */
        /**
         * Clicks the specified link in this node of a SAP column tree or list tree, by link text or index.
         * @function
         * @param {number|string} itemOrIndex The link text or 0-based index.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        clickLink: function (itemOrIndex) {
            if (itemOrIndex == null)
                throw new Error("The parameter itemOrIndex cannot be null.");
            return this._executeWithEventsOnItem(this._ownerTreeView._clickLink, this._path, this._ownerTreeView._itemTransform(itemOrIndex));
        },

        /*jshint eqnull:true */
        /**
         * Opens the context menu for the specified item in this node of a SAP column tree or list tree.
         * @function
         * @param {string} item The text of the item.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        openItemContextMenu: function (item) {
            if (item == null)
                throw new Error("The parameter item cannot be null.");
            return this._executeWithEventsOnItem(this._ownerTreeView._openItemContextMenu, this._path, item);
        },

        /**
         * Opens the context menu for this node of a SAP simple tree.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        openContextMenu: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._openNodeContextMenu, this._path);
        },

        /*jshint eqnull:true */
        /**
         * Selects or unselects a check box item for this node of a SAP column tree or list tree, by checkbox text.
         * @function
         * @param {number|string} itemOrIndex The text or 0-based index of the check box.
         * @param {boolean} state True to select
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        setCheckBoxState: function (itemOrIndex, state) {
            if (itemOrIndex == null)
                throw new Error("The parameter itemOrIndex cannot be null.");
            if (state == null)
                throw new Error("The parameter state cannot be null.");
            return this._executeWithEventsOnItem(this._ownerTreeView._setCheckBoxState, this._path, this._ownerTreeView._itemTransform(itemOrIndex), Convert.toBool(state));
        },

        /*jshint eqnull:true */
        /**
         * Selects an item in this node of a SAP column tree or list tree, by item text or index.
         * @function
         * @param {number|string} itemOrIndex The item text or 0-based index.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        select: function (itemOrIndex) {
            if (itemOrIndex == null)
                throw new Error("The parameter itemOrIndex cannot be null.");
            return this._executeWithEventsOnItem(this._ownerTreeView._selectItem, this._path, this._ownerTreeView._itemTransform(itemOrIndex));
        },

        /*jshint eqnull:true */
        /**
         * Activates an item in this node of a SAP column tree or list tree, by item text or index.
         * @function
         * @param {number|string} itemOrIndex The item text or 0-based index.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        activateItem: function (itemOrIndex) {
            if (itemOrIndex == null)
                throw new Error("The parameter itemOrIndex cannot be null.");
            return this._executeWithEventsOnItem(this._ownerTreeView._activateItem, this._path, this._ownerTreeView._itemTransform(itemOrIndex));
        }
    }
};

module.exports.TreeViewNode = TreeViewNode;