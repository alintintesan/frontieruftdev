// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/21/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = require("leanft.sdk.core").ObjectUtils;
var ArrayUtils = Core.ArrayUtils;
var Convert = Core.Convert;
var TableBase = require("./table_base.js");
var TableBaseDescriptionBehavior = TableBase.TableBaseDescriptionBehavior;
var TableBaseBehavior = TableBase.TableBaseBehavior;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;
var SapGuiBaseDescription = require("./sapgui_object_base.js").SapGuiBaseDescription;
var SapGuiBaseTO = require("./sapgui_object_base.js").SapGuiBaseTO;
var APOGridCell = require("./apogrid_cell.js").APOGridCell;
var TableBaseOperationBehavior = Core.TableBaseOperationBehavior;

/**
 * The description of an APO Grid test object.
 * @param {Object} [props] Initializes an APO Grid test object using the supplied property bag.
 * @returns {APOGrid} the description object that was initialized.
 * @class APOGrid
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.TableBaseDescriptionBehavior
 */
function APOGrid(props) {
    var apoGridDesc = new SapGuiBaseDescription("APOGrid");
    Utils.extend(apoGridDesc, TableBaseDescriptionBehavior);
    apoGridDesc._defineByPropertyBag(props);
    return apoGridDesc;
}

/**
 * An APO Grid object,
 * @constructor
 * @class APOGridTO
 * @extends SAPGUI.SapGuiBaseTO
 * @mixes SAPGUI.TableBaseBehavior._methods
 * @mixes SAPGUI.TableBaseBehavior._properties
 * @mixes SAPGUI.APOGridTOBehavior._methods
 * @mixes SAPGUI.APOGridTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof SAPGUI
 */
function APOGridTO(session, description) {
    description = description || APOGrid();
    var apoGridTO = new SapGuiBaseTO("SAPGuiAPOGrid", session, description);
    apoGridTO._mergeBehavior(TableBaseOperationBehavior);
    apoGridTO._mergeBehavior(TableBaseBehavior);
    apoGridTO._mergeBehavior(WrappedItemExecutorBehavior);
    apoGridTO._mergeBehavior(APOGridTOBehavior);
    return apoGridTO;
}

/**
 * The behaviors of APOGridTO
 * @memberof SAPGUI
 * @ignore
 */
var APOGridTOBehavior = {
    /**
     * @memberof SAPGUI.APOGridTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns either a specific cell or a promise of all cells in the APO grid (when called without arguments), all the cells in a row (when called with row only).
         * @function
         * @param {number} [row] The row index of the specific cell.
         * @param {number} [col] The column index in the row, specified by the row parameter.
         * @returns {Promise<APOGridCell[][] | APOGridCell[] | APOGridCell>} a promise that is fulfilled with either all the cells in the table (when called without arguments), all the cells in a row (when called with row only), or with the specified cell.
         */
        cells: function (row, column) {
            return this._cells(row, column);
        }
    },
    /**
     * @memberof SAPGUI.APOGridTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Returns the first row in a column that contains the specified text, by column name.
         * @function
         * @param {string} text The The text to search for.
         * @param {number|string} column The name or the index of the column to search for.
         * @param {number} startFromRow The index of the row from which to start the search.
         * @returns {Promise<APOGridCell[]>} a promise that is fulfilled with the array of Cells or null if not found.
         */
        findRowWithCellTextInColumn: function (text, column, startFromRow) {
            return this._findRowWithCellTextInColumn(text, column, startFromRow);
        },

        /**
         * Returns all rows with the specified text in the specified column, by column index.
         * @function
         * @param {string} text The The text to search for.
         * @param {number|string} column The name or the index of the column to search for.
         * @returns {Promise<APOGridCell[][]>} a promise that is fulfilled with the array of array of Cells.
         */
        findAllRowsWithCellTextInColumn: function (text, column) {
            return this._findAllRowsWithCellTextInColumn(text, column);
        },

        /**
         * Clears the selected rows or columns in the APO grid.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the clearSelection operation ends.
         */
        clearSelection: function () {
            return this._executeWithEvents(arguments, "ClearSelection");
        },

        /*jshint eqnull:true */
        /**
         * Unselects the specified cell by row index and column name.
         * @function
         * @param {number} row The row index.
         * @param {number|string} columnIndexOrName The name of the column or the column index.
         * @returns {Promise<void>} a promise that is fulfilled when the deselectCell operation ends.
         */
        deselectCell: function (row, columnIndexOrName) {
            if (row == null)
                throw new Error("The parameter row cannot be null.");

            if (columnIndexOrName == null)
                throw new Error("The parameter columnIndexOrName cannot be null.");

            return this._executeWithEvents(arguments, "DeselectCell", this._rowTransform(row), this._columnTransform(columnIndexOrName));
        },

        /*jshint eqnull:true */
        /**
         * Right-clicks the specified column and selects the specified menu item by column name.
         * @function
         * @param {number|string} columnIndexOrName The name of the column or the column index.
         * @param {string} menuItemPath The name of the menu item.
         * @returns {Promise<void>} a promise that is fulfilled when the selectColumnMenuItem operation ends.
         */
        selectColumnMenuItem: function (columnIndexOrName, menuItemPath) {
            if (columnIndexOrName == null)
                throw new Error("The parameter columnIndexOrName cannot be null.");
            if (menuItemPath == null)
                throw new Error("The parameter menuItemPath cannot be null.");

            return this._executeWithEvents(arguments, "SelectColumnMenuItem", this._columnTransform(columnIndexOrName), menuItemPath);
        }
    },

    _helpers: {
        /**
         * The cell formatting.
         * @param {number} rowIndex The index of the row
         * @param {string} column The column name.
         * @returns {Promise<string>} a promise that is fulfilled with the cell formatting.
         * @ignore
         */
        _getCellFormat: function (rowIndex, column) {
            return this._executeNotWrapped(arguments, "GetCellFormat", rowIndex, column);
        },

        /**
         * Right-clicks the cell and selects the specified menu item.
         * @param {number} rowIndex The index of the row
         * @param {string} column The column name.
         * @param {string} menuItem The name of the menu item.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        _selectCellMenuItem: function (rowIndex, column, menuItem) {
            return this._executeNotWrapped(arguments, "SelectCellMenuItem", rowIndex, column, menuItem);
        },

        /**
         * The content of this cell.
         * @param {number} rowIndex The index of the row
         * @param {string} column The column name.
         * @returns {Promise<string>} a promise that is fulfilled with the content of this cell.
         * @ignore
         */
        _getCellData: function (rowIndex, column) {
            return this._executeNotWrapped(arguments, "GetCellData", rowIndex, column);
        },

        /**
         * Indicates whether the cell is editable.
         * @param {number} rowIndex The index of the row
         * @param {string} column The column name.
         * @returns {Promise<boolean>} a promise that is fulfilled with the editable status of this cell.
         * @ignore
         */
        _isCellEditable: function (rowIndex, column) {
            return this._executeNotWrapped(arguments, "IsCellEditable", rowIndex, column);
        },

        /**
         * @ignore
         */
        _createCell: function (rowIndex, columnIdentifier) {
            return new APOGridCell(this, rowIndex, columnIdentifier);
        }
    }
};

module.exports.APOGridTO = APOGridTO;
module.exports.APOGrid = APOGrid;
