// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/21/2016.
 */
var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * An APOGridCell object
 * @constructor
 * @class APOGridCell
 * @mixes SAPGUI.APOGridCellBehavior._properties
 * @mixes SAPGUI.APOGridCellBehavior._methods
 * @memberof SAPGUI
 */
function APOGridCell(owner, rowIndex, columnIdentifier) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(APOGridCellBehavior);
    this._ownerTable = owner;
    this._rowNumber = this._ownerTable._rowTransform(rowIndex);
    this._columnIdentifier = this._ownerTable._columnTransform(columnIdentifier);
    this._executeWithEventsOnItem = this._ownerTable._executeWithEventsOnItem.bind(this._ownerTable, this);
    this._executeWithEventsOnItemOnError = this._ownerTable._executeWithEventsOnItemOnError.bind(this._ownerTable, this);
}

APOGridCell.prototype = {
    _rowNumber: null,
    _columnIdentifier: null,
    _ownerTable: null,
    _executeWithEventsOnItem: null,
    _executeWithEventsOnItemOnError: null
};

/**
 * The methods of APOGridCell object
 * @memberof SAPGUI
 * @ignore
 */
var APOGridCellBehavior = {
    /**
     * @memberof SAPGUI.APOGridCellBehavior
     * @ignore
     */
    _properties: {
        /**
         * The content of this cell.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the content of this cell.
         */
        value: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTable._getCellData, this._rowNumber, this._columnIdentifier);
        },

        /**
         * Indicates whether the cell is editable.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the editable status of this cell.
         */
        isEditable: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTable._isCellEditable, this._rowNumber, this._columnIdentifier);
        },

        /**
         * Gets the cell format.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the format of the cell.
         */
        format: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTable._getCellFormat, this._rowNumber, this._columnIdentifier);
        }
    },

    /**
     * @memberof SAPGUI.APOGridCellBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Right-clicks the cell and selects the specified menu item.
         * @function
         * @param {string} menuItem The name of the menu item.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        selectMenuItem: function (menuItem) {
            if (menuItem == null)
                throw new Error("The parameter menuItem cannot be null.");
            return this._executeWithEventsOnItem(this._ownerTable._selectCellMenuItem, this._rowNumber, this._columnIdentifier, menuItem);
        },

        /*jshint eqnull:true */
        /**
         * Set the content of this cell.
         * @function
         * @param {string} value The content of this cell.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setValue: function (value) {
            if (value == null)
                throw new Error("The parameter value cannot be null.");
            return this._executeWithEventsOnItem(this._ownerTable._setCellData, this._rowNumber, this._columnIdentifier, value);
        }
    }
};

module.exports.APOGridCell = APOGridCell;