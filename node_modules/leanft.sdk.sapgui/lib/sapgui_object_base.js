// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var TestObjectBase = Core.TestObjectBase;

var DescriptionBase = Core.DescriptionBase;
var LocationInfoProvider = Core.LocationInfoProvider;
var NativeObjectBehavior = Core.NativeObjectBehavior;
var Location = Core.Location;
var LocationDescriptionBehavior = Core.LocationDescriptionBehavior;

var PropertyFlatter = Core.PropertyFlatter;
var LocationToNativeKeys = Core.LocationToNativeKeys;
var SizeToNativeKeys = Core.SizeToNativeKeys;
var AbsLocationToNative = Core.AbsLocationToNative;
var ComponentType = require("./component_type.js").ComponentType;

/**
 * SAPGUI namespace
 * @namespace SAPGUI
 */

/**
 * SapGuiBaseDescription - Description for all SAPGUI elements
 * @class SapGuiBaseDescription
 * @memberof SAPGUI
 * @extends DescriptionBase
 * @mixes LocationDescriptionBehavior
 * @ignore
 */
function SapGuiBaseDescription(leanFTType){
    this._init({
        technology: "SAPGUI",
        leanftType: leanFTType
    });
    ObjUtils.extend(this, LocationDescriptionBehavior);
    //init grouped properties
    this.location({});
    this.absoluteLocation({});
    this.size({});
}
/**
 * Common description methods for all SAPGUI elements
 * @memberof SAPGUI
 * @ignore
 */
ObjUtils.inherit(SapGuiBaseDescription, DescriptionBase, {
    /**
     * The numeric identification of the GUI component type.
     * @param {SAPGUI.ComponentType} [type] When provided, this method acts as a setter and sets the type value.
     * @returns {SAPGUI.ComponentType | Description} If no parameter is provided, the method acts as a getter and returns the current stored type value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof SAPGUI.SapGuiBaseDescription#
     */
    type: function (type) {
        return this._propertyHandler("GUIComponentType", type, ComponentType._componentTypeToNative, ComponentType._nativeToComponentType);
    },

    /**
     * The element's unique identifier in text format.
     * @param {string} [id] When provided, this method acts as a setter and sets the id value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored id value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof SAPGUI.SapGuiBaseDescription#
     */
    id: function (id) {
        return this._simplePropertyHandler("Id", id);
    },

    /**
     * The name of the element.
     * @param {string} [name] When provided, this method acts as a setter and sets the name value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored name value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof SAPGUI.SapGuiBaseDescription#
     */
    name: function (name) {
        return this._simplePropertyHandler("Name", name);
    }
});

/**
 * A SapGuiBaseTO object
 * @class SapGuiBaseTO
 * @memberof SAPGUI
 * @constructor
 * @extends TestObjectBase
 * @mixes NativeObjectBehavior._methods
 * @mixes LocationInfoProvider._properties
 * @mixes SapGuiBaseTOBehavior._properties
 * @ignore
 */
function SapGuiBaseTO(nativeClass,session,description) {
    this._init(nativeClass,session,description);
    this._mergeBehavior(NativeObjectBehavior);
    this._mergeBehavior(LocationInfoProvider);
    this._mergeBehavior(SapGuiBaseTOBehavior);
}

//Consts
var typeWiredName = "GUIComponentType";

var SapGuiBaseTOBehavior = {
    /**
     * @memberof SAPGUI.SapGuiBaseTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The SAPGUI component type of this object.
         * @function
         * @returns {Promise<SAPGUI.ComponentType>} a promise that is fulfilled with the SAPGUI component type.
         * @memberof SAPGUI.SapGuiBaseTO#
         */
        type: {
            type: 'enum',
            enumType: ComponentType,
            enumName: 'ComponentType',
            wiredName: typeWiredName,
            getter: function () {
                return this._getROProperty(typeWiredName, arguments).then(ComponentType._nativeToComponentType);
            }
        },

        /**
         * The object's unique identifier in text format.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's unique identifier in text format.
         * @memberof SAPGUI.SapGuiBaseTO#
         */
        id: {
            wiredName: "Id"
        },

        /**
         * The name of the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the object.
         * @memberof SAPGUI.SapGuiBaseTO#
         */
        name: {
            wiredName: "Name"
        }
    }
};

/**
 * @ignore
 */
ObjUtils.inherit(SapGuiBaseTO,TestObjectBase,{
});

module.exports.SapGuiBaseDescription = SapGuiBaseDescription;
module.exports.SapGuiBaseTO = SapGuiBaseTO;
