// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/26/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var SapGuiBaseDescription = require("./sapgui_object_base.js").SapGuiBaseDescription;
var SapGuiBaseTO = require("./sapgui_object_base.js").SapGuiBaseTO;
var TreeViewNode = require("./treeview_node.js").TreeViewNode;
var ContainerBehavior = Core.ContainerBehavior;
var MouseButton = Core.MouseButton;
var Convert = Core.Convert;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;
var SapMenuHelperBehavior = require("./sap_menu_helper.js").SapMenuHelperBehavior;
var MenuHelperBehavior = Core.MenuHelperBehavior;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

/**
 * The type of tree.
 * @typedef {SAPGUI.TreeType} TreeType
 * @property {string} simpleTree A tree without any items
 * @property {string} listTree A tree that includes various items
 * @property {string} columnTree A tree with columns
 * @memberof SAPGUI
 */
var TreeType = {
    /**
     * @type {string}
     */
    simpleTree: "simpletree",
    /**
     * @type {string}
     */
    listTree: "listtree",
    /**
     * @type {string}
     */
    columnTree: "columntree",

    /**
     * @ignore
     */
    _convertToNative: {
        simpletree: "SapSimpleTree",
        listtree: "SapListTree",
        columntree: "SapColumnTree"
    },

    /**
     * @ignore
     */
    _convertToTreeType: {
        sapsimpletree: "simpletree",
        saplisttree: "listtree",
        sapcolumntree: "columntree"
    },

    /**
     * @ignore
     */
    _treeTypeToNative: function (type) {
        return TreeType._convertToNative[type.toLowerCase()];
    },

    /**
     * @ignore
     */
    _nativeToTreeType: function (type) {
        return TreeType._convertToTreeType[type.toLowerCase()];
    }
};

/**
 * The selections that are possible in a tree.
 * @typedef {SAPGUI.TreeSelectionMode} TreeSelectionMode
 * @property {string} treeSelectNodeSingle Can select a single node.
 * @property {string} treeSelectNodeMultiple Can select multiple nodes.
 * @property {string} treeSelectItemSingle Can select a single item.
 * @property {string} treeSelectItemMultiple Can select multiple items.
 * @memberof SAPGUI
 */
var TreeSelectionMode = {
    /**
     * @type {string}
     */
    treeSelectNodeSingle: "treeselectnodesingle",
    /**
     * @type {string}
     */
    treeSelectNodeMultiple: "treeselectnodemultiple",
    /**
     * @type {string}
     */
    treeSelectItemSingle: "treeselectitemsingle",
    /**
     * @type {string}
     */
    treeSelectItemMultiple: "treeselectitemmultiple",

    /**
     * @ignore
     */
    _convertToNative: {
        treeselectnodesingle: "TreeSelectNodeSingle",
        treeselectnodemultiple: "TreeSelectNodeMultiple",
        treeselectitemsingle: "TreeSelectItemSingle",
        treeselectitemmultiple: "TreeSelectItemMultiple"
    },

    /**
     * @ignore
     */
    _selectionToNative: function (mode) {
        return TreeSelectionMode._convertToNative[mode.toLowerCase()];
    },

    /**
     * @ignore
     */
    _nativeToSelection: function (mode) {
        return mode.toLowerCase();
    }
};

/**
 * TreeViewDescriptionBehavior - the description for a TreeView object
 * @memberof SAPGUI
 * @ignore
 */
var TreeViewDescriptionBehavior = {
    /**
     * Indicates whether the tree can accept user input.
     * @param {boolean} [isEnabled] When provided, this method acts as a setter and sets the isEnabled value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isEnabled: function (isEnabled) {
        return this._propertyHandler("Enabled", isEnabled, Convert.toBool);
    },

    /**
     * Indicates which selections can be made in the tree.
     * @param {SAPGUI.TreeSelectionMode|string} [selectionMode] When provided, this method acts as a setter and sets the selectionMode value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectionMode value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectionMode: function (selectionMode) {
        return this._propertyHandler("SelectionMode", selectionMode, TreeSelectionMode._selectionToNative, TreeSelectionMode._nativeToSelection);
    },

    /**
     * The type of the tree.
     * @param {SAPGUI.TreeType|string} [treeType] When provided, this method acts as a setter and sets the treeType value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored treeType value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    treeType: function (treeType) {
        return this._propertyHandler("TreeType", treeType, TreeType._treeTypeToNative, TreeType._nativeToTreeType);
    },

    /**
     * The value of the selected item in the tree node.
     * @param {string} [selectedItem] When provided, this method acts as a setter and sets the selectedItem value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedItem value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedItem: function (selectedItem) {
        return this._simplePropertyHandler("SelectedItem", selectedItem);
    },

    /**
     * The path of the selected node in the tree.
     * @param {string} [selectedNodePath] When provided, this method acts as a setter and sets the selectedNodePath value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedNodePath value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedNodePath: function (selectedNodePath) {
        return this._simplePropertyHandler("SelectedNode", selectedNodePath);
    }
};

/**
 * The description of a TreeView test object.
 * @param {Object} [props] Initializes a TreeView test object using the supplied property bag.
 * @returns {TreeView} the description object that was initialized.
 * @class TreeView
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.TreeViewDescriptionBehavior
 */
function TreeView(props) {
    var treeViewDesc = new SapGuiBaseDescription("TreeView");
    Utils.extend(treeViewDesc, TreeViewDescriptionBehavior);
    treeViewDesc._defineByPropertyBag(props);
    return treeViewDesc;
}

/**
 * A TreeView object,
 * @constructor
 * @class TreeViewTO
 * @extends SAPGUI.SapGuiBaseTO
 * @mixes SAPGUI.TreeViewTOBehavior._methods
 * @mixes SAPGUI.TreeViewTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof SAPGUI
 */
function TreeViewTO(session, description) {
    description = description || TreeView();
    var treeViewTO = new SapGuiBaseTO("SAPGuiTree", session, description);
    treeViewTO._mergeBehavior(WaitUntilEnabledBehavior);
    treeViewTO._mergeBehavior(MenuHelperBehavior);
    treeViewTO._mergeBehavior(SapMenuHelperBehavior);
    treeViewTO._mergeBehavior(WrappedItemExecutorBehavior);
    treeViewTO._mergeBehavior(TreeViewTOBehavior);
    return treeViewTO;
}

//Consts
var selectionModeWiredName = "SelectionMode";
var treetypeWiredName = "TreeType";

/**
 * The behaviors of the TreeView object
 * @memberof SAPGUI
 * @ignore
 */
var TreeViewTOBehavior = {
    /**
     * @memberof SAPGUI.TreeViewTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * Indicates whether the tree can accept user input.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the tree can accept user input.
         */
        isEnabled: {
            wiredName: "Enabled"
        },

        /**
         * The value of the selected item in the tree node.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the value of the selected item in the tree node.
         */
        selectedItem: {
            wiredName: "SelectedItem"
        },

        /**
         * The path to the selected node. The semicolon delimited list of nodes in the path.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the path to the selected node.
         */
        selectedNodePath: {
            wiredName: "SelectedNode"
        },

        /**
         * Indicates which selections can be made in the tree.
         * @function
         * @returns {Promise<SAPGUI.TreeSelectionMode>} a promise that is fulfilled with which selections can be made in the tree.
         */
        selectionMode: {
            type: 'enum',
            enumType: TreeSelectionMode,
            enumName: 'TableSelectionMode',
            wiredName: selectionModeWiredName,
            getter: function () {
                return this._getROProperty(selectionModeWiredName).then(TreeSelectionMode._nativeToSelection);
            }
        },

        /**
         * Indicates the type of tree.
         * @function
         * @returns {Promise<SAPGUI.TreeType>} a promise that is fulfilled with the type of tree.
         */
        treeType: {
            type: 'enum',
            enumType: TreeType,
            enumName: 'TreeType',
            wiredName: treetypeWiredName,
            getter: function () {
                return this._getROProperty(treetypeWiredName).then(TreeType._nativeToTreeType);
            }
        }
    },

    /**
     * @memberof SAPGUI.TreeViewTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Create a TreeViewNode from its given path. When the path is not unique, returns the first matching node.
         * Use the BuildNodePath method to build the node path string to be used as the path argument for this method.
         * @function
         * @param {string} path Elements of the path are seperated by semi-colons (;).
         * @returns {SAPGUI.TreeViewNode} TreeViewNode object. See {@link SAPGUI.TreeViewNode}
         */
        getNode: function (path) {
            if (path == null)
                return null;
            return this._createItem(path);
        },

        /*jshint eqnull:true */
        /**
         * Activate a node.
         * @function
         * @param {SAPGUI.TreeViewNode|string} nodeOrPath The node to be activated.
         * The input can be the TreeViewNode, or the path of the node
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        activateNode: function (nodeOrPath) {
            if (nodeOrPath == null)
                throw new Error("The parameter nodeOrPath cannot be null.");

            value = nodeOrPath;
            if (typeof nodeOrPath === 'object') {
                value = nodeOrPath._path;
            }

            return this._executeWithEvents(arguments, "ActivateNode", value);
        },

        /*jshint eqnull:true */
        /**
         * Clicks the specified column in this column tree or list tree
         * @function
         * @param {number|string} columnOrIndex The name or the 0-based index of the column to click.
         * @returns {Promise<void>} a promise that is fulfilled when the ends.
         */
        clickColumn: function (columnOrIndex) {
            if (columnOrIndex == null)
                throw new Error("The parameter columnOrIndex cannot be null.");

            return this._executeWithEvents(arguments, "ClickColumn", this._itemTransform(columnOrIndex));
        },

        /*jshint eqnull:true */
        /**
         * Select a node.
         * @function
         * @param {SAPGUI.TreeViewNode|string} nodeOrPath The node to be selected.
         * The input can be the TreeViewNode, or the path of the node
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        selectNode: function (nodeOrPath) {
            if (nodeOrPath == null)
                throw new Error("The parameter nodeOrPath cannot be null.");

            value = nodeOrPath;
            if (typeof nodeOrPath === 'object') {
                value = nodeOrPath._path;
            }

            return this._executeWithEvents(arguments, "SelectNode", value);
        },

        /**
         * Opens a tree's default context menu. After opening a context menu, you can use the selectMenuItemById method to select the menu item.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        openContextMenu: function () {
            return this._executeWithEvents(arguments, "OpenContextMenu");
        },

        /*jshint eqnull:true */
        /**
         * Opens the context menu for a header in this column tree or list tree, by column name or index.
         * @function
         * @param {number|string} columnOrIndex The name or the 0-based index of the column to open.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        openHeaderContextMenu: function (columnOrIndex) {
            if (columnOrIndex == null)
                throw new Error("The parameter columnOrIndex cannot be null.");

            return this._executeWithEvents(arguments, "OpenHeaderContextMenu", this._itemTransform(columnOrIndex));
        },

        /*jshint eqnull:true */
        /**
         * Selects the specified menu item from a context menu in a tree.
         * @function
         * @param {string} menuItemId The SAP ID of the menu item in string format.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        selectMenuItemById: function (menuItemId) {
            if (menuItemId == null)
                throw new Error("The parameter menuItemId cannot be null.");

            return this._executeWithEvents(arguments, "SelectMenuItemById", menuItemId);
        },

        /**
         * Presses the ENTER key when the tree is in focus.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        pressEnter: function () {
            return this._executeWithEvents(arguments, "PressEnter");
        },

        /**
         * Returns the path constructed from the specified path elements.
         * @function
         * @param {...(number|string)} nodePathParts The menu path parts can be: logical name(string), full path(string), or numeric 1-based index(int).
         * @returns {string} the path of the specified menu item.
         */
        buildNodePath: function (nodePathParts) {
            return this._buildMenuPath.apply(this, arguments);
        }
    },

    _helpers: {
        /**
         * @ignore
         */
        _itemTransform: function (item) {
            if (typeof item === 'number')
                return "#" + (item + 1);
            return item;
        },

        /**
         * Collapse a node.
         * @param {string} path The path of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @ignore
         */
        _collapseNode: function (path) {
            return this._executeNotWrapped(arguments, "Collapse", path);
        },

        /**
         * Expand a node.
         * @param {string} path The path of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @ignore
         */
        _expandNode: function (path) {
            return this._executeNotWrapped(arguments, "Expand", path);
        },

        /**
         * Click a button.
         * @param {string} path The path of the node.
         * @param {string} item The item to click.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @ignore
         */
        _clickButton: function (path, item) {
            return this._executeNotWrapped(arguments, "ClickButton", path, item);
        },

        /**
         * Click a link.
         * @param {string} path The path of the node.
         * @param {string} item The link to click.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @ignore
         */
        _clickLink: function (path, item) {
            return this._executeNotWrapped(arguments, "ClickLink", path, item);
        },

        /**
         * Open the context menu of an item
         * @param {string} path The path of the node.
         * @param {string} item The menu to open.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @ignore
         */
        _openItemContextMenu: function (path, item) {
            return this._executeNotWrapped(arguments, "OpenItemContextMenu", path, item);
        },

        /**
         * Open the node's context menu.
         * @param {string} path The path of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @ignore
         */
        _openNodeContextMenu: function (path) {
            return this._executeNotWrapped(arguments, "OpenNodeContextMenu", path);
        },

        /**
         * Set the checkbox state of the node
         * @param {string} path The path of the node.
         * @param {string} item The checkbox to set.
         * @param {boolean} state The state to set.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @ignore
         */
        _setCheckBoxState: function (path, item, state) {
            return this._executeNotWrapped(arguments, "Set", path, item, state ? "ON" : "OFF");
        },

        /**
         * Select an item
         * @param {string} path The path of the node.
         * @param {string} item The item to select
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @ignore
         */
        _selectItem: function (path, item) {
            return this._executeNotWrapped(arguments, "SelectItem", path, item);
        },

        /**
         * Activate an item
         * @param {string} path The path of the node.
         * @param {string} item The item to activate
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @ignore
         */
        _activateItem: function (path, item) {
            return this._executeNotWrapped(arguments, "ActivateItem", path, item);
        },

        /**
         * Create an node from the path
         * @param {string} path The path of the node
         * @returns {TreeViewNode} The TreeViewNode object
         * @ignore
         */
        _createItem: function (path) {
            return new TreeViewNode(this, path);
        }
    }
};

module.exports.TreeView = TreeView;
module.exports.TreeViewTO = TreeViewTO;
module.exports.TreeType = TreeType;
module.exports.TreeSelectionMode = TreeSelectionMode;
