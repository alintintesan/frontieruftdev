// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var Core = require("leanft.sdk.core");
var StringUtils = Core.StringUtils;
var Convert = Core.Convert;

/**
 * ItemDescriptionBehavior - Description of a SAP GUI for Windows items.
 * @memberof SAPGUI
 * @ignore
 */
var ItemsDescriptionBehavior = {

    /**
     * The number of non-empty items in the control.
     * @param {number} [itemsCount] When provided, this method acts as a setter and sets the itemsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored itemsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @ignore
     */
    _itemsCount: function (itemsCount) {
        return this._propertyHandler("ItemsCount", itemsCount, Convert.toNumber);
    },

    /**
     * The list of the items in the control.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the items value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored items value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @ignore
     */
    _items: function (items) {
        return this._propertyHandler("AllItems", items, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    }
};
/**
 * ItemsTOBehavior - Behavior of items
 * @memberof SAPGUI
 * @ignore
 */
var ItemsTOBehavior = {
    _allItemsWiredName: "AllItems",
    _helpers: {
        /*jshint eqnull:true */
        /**
         * The list of all non-empty items in the control.
         * @returns {Promise<string[]>} a promise that is fulfilled with the list of all non-empty items in the control.
         * @ignore
         */
        _items: function () {
            return this._getROProperty(ItemsTOBehavior._allItemsWiredName, arguments.callee.caller.arguments).then((function (result) {
                return StringUtils.isNullOrEmpty(result) ? [] : StringUtils.trim(result, ";").split(";");
            }));
        }
    },

    _additionalProperties: {
        itemsCount: {type: "uint", wiredName: "ItemsCount"}
    }
};

module.exports.ItemsDescriptionBehavior = ItemsDescriptionBehavior;
module.exports.ItemsTOBehavior = ItemsTOBehavior;