// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var Convert = Core.Convert;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

var SapGuiObjectBase = require("./sapgui_object_base.js");
var SapGuiBaseDescription = SapGuiObjectBase.SapGuiBaseDescription;
var SapGuiBaseTO = SapGuiObjectBase.SapGuiBaseTO;

/**
 * Description of a SAP GUI for Windows text area object.
 * @memberof SAPGUI
 * @ignore
 */
var EditorDescriptionBehaviour = {

    /**
     * The text in the text area.
     * @param {string} [text] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    text: function (text) {
        return this._simplePropertyHandler("Value", text);
    },

    /**
     * Indicates whether the text area can accept user input.
     * @param {boolean} [isEnabled] When provided, this method acts as a setter and sets the isEnabled value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isEnabled: function (isEnabled) {
        return this._propertyHandler("Enabled", isEnabled, Convert.toBool);
    }

};

/**
 * @param {Object} [props] Initializes a Editor test object using the supplied property bag.
 * @returns {Editor} the description object that was initialized.
 * @constructor
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.EditorDescriptionBehaviour
 */
function Editor(props){
    var editorDesc = new SapGuiBaseDescription("Editor");
    ObjUtils.extend(editorDesc, EditorDescriptionBehaviour);
    editorDesc._defineByPropertyBag(props);
    return editorDesc;
}

/**
 * A EditorTO object,
 * @constructor
 * @class EditorTO
 * @extends SAPGUI.SapGuiBaseTO._properties
 * @mixes SAPGUI.EditorTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof SAPGUI
 */
function EditorTO(session, description) {
    description = description || Editor();
    var editorTO = new SapGuiBaseTO("SAPGuiTextArea", session, description);
    editorTO._mergeBehavior(WaitUntilEnabledBehavior);
    editorTO._mergeBehavior(EditorTOBehavior);
    return editorTO;
}

/**
 * The behaviors of the EditorTO object
 * @memberof SAPGUI
 * @ignore
 */
var EditorTOBehavior = {
    /**
     * @memberof SAPGUI.EditorTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The text string value of the text area.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text string value of the text area.
         */
        text: {
            wiredName: "Value"
        },

        /**
         * Indicates whether the text area can accept user input.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the text area can accept user input.
         */
        isEnabled: {
            wiredName: "Enabled"
        }
    },

    /**
     * @memberof SAPGUI.EditorTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Double-clicks inside the text area at the current cursor position.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        doubleClick: function () {
            return this._executeWithEvents(arguments, "DoubleClick");
        },

        /*jshint eqnull:true */
        /**
         * Sets the specified text in the text area.
         * @function
         * @param {string} text The text.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        setText: function (text) {
            if (text == null)
                throw new Error("The text cannot be null.");
            return this._executeWithEvents(arguments, "Set", text);
        },

        /*jshint eqnull:true */
        /**
         * Positions the cursor at the specified position.
         * @function
         * @param {number} position The 0-based character position.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        setCursorPosition: function (position) {
            if (position == null)
                throw new Error("The parameter position cannot be null.");
            var pos = Convert.toNumber(position);
            return this._executeWithEvents(arguments, "SetSelectionIndexes", pos, pos);
        },

        /*jshint eqnull:true */
        /**
         * Selects the specified section of text in the text area and positions the cursor at the end of the selection.
         * @function
         * @param {number} startPos The 0-based position of the first character of the text to be selected.
         * @param {number} endPos The 0-based position of the character that ends the selection.
         * The text is selected from the character at the start position and up to, but not including, the character at the end position.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        select: function (startPos, endPos) {
            if (startPos == null)
                throw new Error("The start position cannot be null.");
            if (endPos == null)
                throw new Error("The end position cannot be null.");
            return this._executeWithEvents(arguments, "SetSelectionIndexes", Convert.toNumber(startPos), Convert.toNumber(endPos) + 1);
        },

        /*jshint eqnull:true */
        /**
         * Sets the specified text in the unprotected sections of the text area.
         * @function
         * @param {number} sectionNumber The 1-based index of the unprotected section in which the text is set.
         * Unprotected sections of the text area are numbered from top to bottom.
         * @param {string} text The text.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        setUnprotectedTextPart: function (sectionNumber, text) {
            if (sectionNumber == null)
                throw new Error("The section number cannot be null.");
            if (text == null)
                throw new Error("The text cannot be null.");
            return this._executeWithEvents(arguments, "SetUnprotectedTextPart", Convert.toNumber(sectionNumber), text);
        }
    }
};

module.exports.Editor = Editor;
module.exports.EditorTO = EditorTO;