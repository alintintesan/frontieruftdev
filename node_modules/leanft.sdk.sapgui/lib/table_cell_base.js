// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/11/2016.
 */

/**
 * The methods of Common Cell object (Table + Grid)
 * @memberof SAPGUI
 * @ignore
 */
var CellBaseOperationsBehavior = {

    /**
     * @memberof SAPGUI.CellBaseOperationsBehavior
     * @ignore
     */
    _properties: {
        /**
         * The content of this cell.
         * @returns {Promise<string>} a promise that is fulfilled with the content of this cell.
         */
        value: function () {
            return this._ownerTable._getCellData(this._rowNumber, this._columnIdentifier);
        },

        /**
         * Indicates whether the cell is editable.
         * @returns {Promise<boolean>} a promise that is fulfilled with the editable status of this cell.
         */
        isEditable: function () {
            return this._ownerTable._isCellEditable(this._rowNumber, this._columnIdentifier);
        }
    },

    /**
     * @memberof SAPGUI.CellBaseOperationsBehavior
     * @ignore
     */
    _methods: {
        /**
         * Opens the list of possible entries.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        openPossibleEntries: function () {
            return this._executeWithEventsOnItem(this._ownerTable._openPossibleEntries, this._rowNumber, this._columnIdentifier);
        },

        /**
         * Emulates a click on the cell.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        click: function () {
            return this._executeWithEventsOnItem(this._ownerTable._clickCell, this._rowNumber, this._columnIdentifier);
        },

        /*jshint eqnull:true */
        /**
         * Set the content of this cell.
         * @param {string} value The content of this cell.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setValue: function (value) {
            if (value == null)
                throw new Error("The parameter value cannot be null.");
            return this._executeWithEventsOnItem(this._ownerTable._setCellData, this._rowNumber, this._columnIdentifier, value);
        }
    }
};

module.exports.CellBaseOperationsBehavior = CellBaseOperationsBehavior;
