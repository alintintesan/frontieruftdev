// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/22/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var StringUtils = Core.StringUtils;
var Convert = Core.Convert;
var ContainerBehavior = Core.ContainerBehavior;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;
var ComboBoxItem = require("./combo_box_item.js").ComboBoxItem;
var SapGuiObjectBase = require("./sapgui_object_base.js");
var SapGuiBaseDescription = SapGuiObjectBase.SapGuiBaseDescription;
var SapGuiBaseTO = SapGuiObjectBase.SapGuiBaseTO;

/**
 * ComboBoxDescriptionBehavior - the description for a ComboBox object
 * @memberof SAPGUI
 * @ignore
 */
var ComboBoxDescriptionBehavior = {
    /**
     * An array of all items in the combobox.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the items value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored items value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    items: function (items) {
        return this._propertyHandler("AllItems", items, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    },

    /**
     * The selected items in the combobox.
     * @param {string} [selectedItem] When provided, this method acts as a setter and sets the selectedItems value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedItems value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedItem: function (selectedItem) {
        return this._simplePropertyHandler("SelectedItem", selectedItem);
    },

    /**
     * The number of items in the combobox.
     * @param {number} [itemsCount] When provided, this method acts as a setter and sets the itemsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored itemsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    itemsCount: function (itemsCount) {
        return this._propertyHandler("ItemsCount", itemsCount, Convert.toNumber);
    },

    /**
     * Indicates whether the combobox can accept user input.
     * @param {boolean} [isEnabled] When provided, this method acts as a setter and sets the isEnabled value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isEnabled: function (isEnabled) {
        return this._propertyHandler("Enabled", isEnabled, Convert.toBool);
    }
};

/**
 * The description of a ComboBox test object.
 * @param {Object} [props] Initializes a ComboBox test object using the supplied property bag.
 * @returns {ComboBox} the description object that was initialized.
 * @class ComboBox
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.ComboBoxDescriptionBehavior
 */
function ComboBox(props) {
    var comboBoxDesc = new SapGuiBaseDescription("ComboBox");
    Utils.extend(comboBoxDesc, ComboBoxDescriptionBehavior);
    comboBoxDesc._defineByPropertyBag(props);
    return comboBoxDesc;
}

/**
 * A ComboBox object,
 * @constructor
 * @class ComboBoxTO
 * @extends SAPGUI.SapGuiBaseTO
 * @mixes ContainerBehavior
 * @mixes SAPGUI.ComboBoxTOBehavior._properties
 * @mixes SAPGUI.ComboBoxTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof SAPGUI
 */
function ComboBoxTO(session, description) {
    description = description || ComboBox();
    var comboBoxTO = new SapGuiBaseTO("SAPGuiComboBox", session, description);
    comboBoxTO._mergeBehavior(WaitUntilEnabledBehavior);
    comboBoxTO._mergeBehavior(ContainerBehavior);
    comboBoxTO._mergeBehavior(ComboBoxTOBehavior);
    comboBoxTO._minimumItemIndex = 1;
    return comboBoxTO;
}

//Consts
var allItemsWiredName = "AllItems";
var itemsCountWiredName = "ItemsCount";
var selectedItemWiredName = "SelectedItem";

/**
 * The behaviors of the ComboBox object
 * @memberof SAPGUI
 * @ignore
 */
var ComboBoxTOBehavior = {
    /**
     * @memberof SAPGUI.ComboBoxTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * Indicates whether the combobox can accept user input.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the combobox can accept user input.
         */
        isEnabled: {
            wiredName: "Enabled"
        },

        /**
         * The static text attached to the combo box.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the static text attached to the combo box.
         */
        attachedText: {
            wiredName: "AttachedText"
        },

        /**
         * Get all items of the combobox.
         * @function
         * @returns {Promise<SAPGUI.ComboBoxItem[]>} a promise that is fulfilled with all the items in the combo box.
         */
        items: {
            wiredName: allItemsWiredName,
            getter: function () {
                return this._items(";", allItemsWiredName, itemsCountWiredName);
            }
        },

        /**
         * Get the selected item of the combobox.
         * @function
         * @returns {Promise<SAPGUI.ComboBoxItem>} a promise that is fulfilled with the selected item of the combo box.
         */
        selectedItem: {
            wiredName: selectedItemWiredName,
            getter: function () {
                return this._getROProperty(selectedItemWiredName, arguments).then((function (item) {
                    return this._createItem(item, item);
                }).bind(this));
            }
        }
    },

    /**
     * @memberof SAPGUI.CheckedTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Returns the item specified by the item text.
         * @function
         * @param {string} item The text of the item.
         * @returns {SAPGUI.ComboBoxItem} The ComboBoxItem object
         */
        getItem: function (item) {
            return this._createItem(item, item);
        },

        /*jshint eqnull:true */
        /**
         * Select an item in the combobox.
         * @function
         * @param {number|string|SAPGUI.ComboBoxItem} indexOrItem The item to be selected.
         * The input can be the 0-based index of the item, the text of the item or the ComboBoxItem
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         */
        select: function (indexOrItem) {
            if (indexOrItem == null)
                throw new Error("The parameter indexOrItem cannot be null.");
            return this._executeWithEvents(arguments, "Select", this._itemTransform(indexOrItem));
        },

        /*jshint eqnull:true */
        /**
         * Selects the SAP shortcut key representing an item in the combo box list.
         * @function
         * @param {string} key The SAP shortcut key representing the item to select.
         * @returns {Promise<void>} a promise that is fulfilled when the selectKey operation ends.
         */
        selectKey: function (key) {
            if (key == null)
                throw new Error("The parameter key cannot be null.");
            return this._executeWithEvents(arguments, "SelectKey", key);
        },

        /**
         * Sets focus on the combo box.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the setFocus operation ends.
         */
        setFocus: function () {
            return this._executeWithEvents(arguments, "SetFocus");
        }
    },

    _helpers: {
        /**
         * @ignore
         */
        _itemTransform: function (item) {
            if (typeof item === 'object')
                item = item._identifier;
            if (typeof item === 'number')
                return "#" + (item + this._minimumItemIndex);
            return item;
        },

        /**
         * Create an item from the identifier and textRepresentation
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 0-based index of the item.
         * @param {string} textRepresentation The text representation if the item.
         * @returns {ListItem} The ListItem object
         * @ignore
         */
        _createItem: function (identifier, textRepresentation) {
            return new ComboBoxItem(this, identifier, textRepresentation);
        }
    },

    _additionalProperties: {
        itemsCount: {type: "uint", wiredName: itemsCountWiredName}
    }
};

module.exports.ComboBox = ComboBox;
module.exports.ComboBoxTO = ComboBoxTO;
