// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/08/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = require("leanft.sdk.core").ObjectUtils;
var ArrayUtils = Core.ArrayUtils;
var Convert = Core.Convert;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;
var ObjectUtils = Core.ObjectUtils;

/**
 * TableBaseDescriptionBehavior - the base description for table
 * @memberof SAPGUI
 * @ignore
 */
var TableBaseDescriptionBehavior = {
    /**
     * The title of the object. 
     * @param {string} [title] When provided, this method acts as a setter and sets the title value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored title value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    title: function (title) {
        return this._simplePropertyHandler("Title", title);
    },

    /**
     * Indicates whether the object can accept user input.
     * @param {boolean} [isEnabled] When provided, this method acts as a setter and sets the isEnabled value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isEnabled: function (isEnabled) {
        return this._propertyHandler("Enabled", isEnabled, Convert.toBool);
    }
};

/**
 * The behaviors of TableBase, base class for Table and Grid controls
 * @memberof SAPGUI
 * @ignore
 */
var TableBaseBehavior = {
    /**
     * @memberof SAPGUI.TableBaseBehavior
     * @ignore
     */
    _properties: {
        /**
         * The title of the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the title of the object.
         */
        title: {
            wiredName: "Title"
        },

        /**
         * Indicates whether the object can accept user input.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the enabled status of the object.
         */
        isEnabled: {
            wiredName: "Enabled"
        }
    },

    /**
     * @memberof SAPGUI.TableBaseBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Double-clicks a cell by row index and column name.
         * @function
         * @param {number} row The row index.
         * @param {number|string} columnIndexOrName The name of the column or the column index.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        activateCell: function (row, columnIndexOrName) {
            if (row == null)
                throw new Error("The parameter row cannot be null.");

            if (columnIndexOrName == null)
                throw new Error("The parameter columnIndexOrName cannot be null.");

            var column = this._columnTransform(columnIndexOrName);

            return this._executeWithEvents(arguments, "ActivateCell", this._rowTransform(row), column);
        },

        /*jshint eqnull:true */
        /**
         * Selects a cell by row index and column name.
         * @function
         * @param {number} row The row index.
         * @param {number|string} columnIndexOrName The name of the column or the column index.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        selectCell: function (row, columnIndexOrName) {
            if (row == null)
                throw new Error("The parameter row cannot be null.");

            if (columnIndexOrName == null)
                throw new Error("The parameter columnIndexOrName cannot be null.");

            var column = this._columnTransform(columnIndexOrName);

            return this._executeWithEvents(arguments, "SelectCell", this._rowTransform(row), column);
        },

        /*jshint eqnull:true */
        /**
         * Selects the specified rows in the object.
         * @function
         * @param {...(number)} rows You can pass as many items as you like, each item is the row number.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        selectRow: function (rows) {
            if (rows == null)
                throw new Error("The parameter rows cannot be null.");
            return this._executeOnItemsCollection(arguments, "SelectRow", "ExtendRow", ArrayUtils.toArray(arguments), this._rowTransform);
        },

        /*jshint eqnull:true */
        /**
         * Selects the specified row range.
         * @function
         * @param {number} indexFrom The index of the first row in the range.
         * @param {number} indexTo The index of the last row in the range.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        selectRowRange: function (indexFrom, indexTo) {
            if (indexFrom == null)
                throw new Error("The parameter indexFrom cannot be null.");
            if (indexTo == null)
                throw new Error("The parameter indexFrom cannot be null.");
            return this._executeWithEvents(arguments, "SelectRowsRange", this._rowTransform(indexFrom), this._rowTransform(indexTo));
        },

        /*jshint eqnull:true */
        /**
         * Selects the specified columns by column names or indices.
         * @function
         * @param {...(number|string)} columns You can pass as many items as you like, each item is the column number or column name.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        selectColumn: function (columns) {
            if (columns == null)
                throw new Error("The parameter columns cannot be null.");
            return this._executeOnItemsCollection(arguments, "SelectColumn", "ExtendColumn", ArrayUtils.toArray(arguments), this._columnTransform);
        },

        /*jshint eqnull:true */
        /**
         * Unselects the specified rows.
         * @function
         * @param {...(number)} rows You can pass as many items as you like, each item is the row number.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        deselectRow: function (rows) {
            if (rows == null)
                throw new Error("The parameter rows cannot be null.");
            return this._executeSingleOpOnCollection(arguments, "DeselectRow", ArrayUtils.toArray(arguments), this._rowTransform);
        },

        /*jshint eqnull:true */
        /**
         * Unselects the specified rows.
         * @function
         * @param {number} indexFrom The index of the first row in the range.
         * @param {number} indexTo The index of the last row in the range.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        deselectRowRange: function (indexFrom, indexTo) {
            if (indexFrom == null)
                throw new Error("The parameter indexFrom cannot be null.");
            if (indexTo == null)
                throw new Error("The parameter indexFrom cannot be null.");
            return this._executeWithEvents(arguments, "DeselectRowsRange", this._rowTransform(indexFrom), this._rowTransform(indexTo));
        },

        /*jshint eqnull:true */
        /**
         * Unselects the specified columns by column names or indices.
         * @function
         * @param {...(number|string)} columns You can pass as many items as you like, each item is the column number or column name.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        deselectColumn: function (columns) {
            if (columns == null)
                throw new Error("The parameter columns cannot be null.");
            return this._executeSingleOpOnCollection(arguments, "DeselectColumn", ArrayUtils.toArray(arguments), this._columnTransform);
        }
    },

    _helpers: {
        /**
         * Change from 0-based to 1-based index
         * @ignore
         */
        _columnTransform: function (column) {
            if (typeof column === 'number')
                return "#" + (column + 1);
            return column;
        },

        /**
         * Change from 0-based to 1-based index
         * @ignore
         */
        _rowTransform: function (row) {
            return Convert.toNumber(row) + 1;
        },

        /*jshint eqnull:true */
        /**
         * Returns the first row in a column that contains the specified text, by column name.
         * @param {string} text The The text to search for.
         * @param {number|string} column The name or the index of the column to search for.
         * @param {number} startFromRow The index of the row from which to start the search.
         * @returns {Promise<TableCell[]>} a promise that is fulfilled with the array of Cells or null if not found.
         * @ignore
         */
        _findRowWithCellTextInColumn: function (text, column, startFromRow) {
            if (text == null)
                throw new Error("The parameter text cannot be null.");
            if (column == null)
                throw new Error("The parameter column cannot be null.");

            column = this._columnTransform(column);

            var createRowFromIndex = function (index) {
                if (index == null)
                    return null;
                if (index === 0)
                    return null;
                return this._getColumnCount().then((function (columns) {
                    return this._initRowInTable(index - 1, columns);//0-based index
                }).bind(this));
            };

            if (startFromRow == null)
                return this._executeWithEvents(arguments.callee.caller.arguments, "FindRowByCellContent", column, text).then(createRowFromIndex.bind(this));
            return this._executeWithEvents(arguments.callee.caller.arguments, "FindRowByCellContent", column, text, this._rowTransform(startFromRow)).then(createRowFromIndex.bind(this));
        },

        /*jshint eqnull:true */
        /**
         * Returns all rows with the specified text in the specified column, by column index.
         * @param {string} text The The text to search for.
         * @param {number|string} column The name or the index of the column to search for.
         * @returns {Promise<TableCell[][]>} a promise that is fulfilled with the array of array of Cells.
         * @ignore
         */
        _findAllRowsWithCellTextInColumn: function (text, column) {
            if (text == null)
                throw new Error("The parameter text cannot be null.");
            if (column == null)
                throw new Error("The parameter column cannot be null.");

            column = this._columnTransform(column);

            return this._executeWithEvents(arguments.callee.caller.arguments, "FindAllRowsByCellContent", column, text).then((function (rowIndices) {
                return this._getColumnCount().then((function (columns) {
                    return rowIndices.map((function (rowIndex) {
                        return this._initRowInTable(rowIndex - 1, columns);//0-based index
                    }).bind(this));
                }).bind(this));
            }).bind(this));
        },

        /**
         * The number of characters that can be entered in the cell. -1 if the cell does not have a valid length.
         * @param {number} rowIndex The index of the row
         * @param {string} column The column name.
         * @returns {Promise<number>} a promise that is fulfilled with the number of characters that can be entered in the cell.
         * @ignore
         */
        _getCellLength: function (rowIndex, column) {
            return this._executeCommand("GetCellLength", rowIndex, column);
        },

        /**
         * The content of this cell.
         * @param {number} rowIndex The index of the row
         * @param {string} column The column name.
         * @returns {Promise<string>} a promise that is fulfilled with the content of this cell.
         * @ignore
         */
        _getCellData: function (rowIndex, column) {
            return this._executeCommand("GetCellData", rowIndex, column);
        },

        /**
         * Set the content of this cell.
         * @param {number} rowIndex The index of the row
         * @param {string} column The column name.
         * @param {string} value The content of this cell.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        _setCellData: function (rowIndex, column, value) {
            return this._executeNotWrapped(arguments, "SetCellData", rowIndex, column, value);
        },

        /**
         * Indicates whether the cell is editable.
         * @param {number} rowIndex The index of the row
         * @param {string} column The column name.
         * @returns {Promise<boolean>} a promise that is fulfilled with the editable status of this cell.
         * @ignore
         */
        _isCellEditable: function (rowIndex, column) {
            return this._executeCommand("IsCellEditable", rowIndex, column);
        },

        /**
         * Opens the list of possible entries.
         * @param {number} rowIndex The index of the row
         * @param {string} column The column name.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        _openPossibleEntries: function (rowIndex, column) {
            return this._executeNotWrapped(arguments, "OpenPossibleEntries", rowIndex, column);
        },

        /**
         * Emulates a click on the cell.
         * @param {number} rowIndex The index of the row
         * @param {string} column The column name.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        _clickCell: function (rowIndex, column) {
            return this._executeNotWrapped(arguments, "ClickCell", rowIndex, column);
        },

        /**
         * Get the number of rows
         * @returns {Promise<number>} a promise that is fulfilled with the number of rows
         * @ignore
         */
        _getRowCount: function () {
            return this._executeCommand("RowCount");
        },

        /**
         * Get the number of columns
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns
         * @ignore
         */
        _getColumnCount: function () {
            return this._executeCommand("ColumnCount");
        },

        /**
         * Get the number of rows and columns
         * @returns {Promise<Object>} a promise that is fulfilled with the number of rows and columns
         * @ignore
         */
        _getRowAndColumnCount: function () {
            return this._executeCommand("RowCount").then((function (rows) {
                return this._executeCommand("ColumnCount").then(function (columns) {
                    return {rowCount: rows, columnCount: columns};
                });
            }).bind(this));
        }
    }
};

ObjectUtils.combineBehaviors(TableBaseBehavior, WaitUntilEnabledBehavior);

module.exports.TableBaseDescriptionBehavior = TableBaseDescriptionBehavior;
module.exports.TableBaseBehavior = TableBaseBehavior;