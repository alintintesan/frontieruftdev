// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/28/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var SapGuiBaseDescription = require("./sapgui_object_base.js").SapGuiBaseDescription;
var SapGuiBaseTO = require("./sapgui_object_base.js").SapGuiBaseTO;
var CalendarConverter = Core.CalendarConverter;
var CalendarTOBaseBehavior = Core.CalendarTOBaseBehavior;
var Convert = Core.Convert;
var CalendarConverter = Core.CalendarConverter;
var StringUtils = Core.StringUtils;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

/**
 * CalendarDescriptionBehavior - the description for a Calendar object
 * @memberof SAPGUI
 * @ignore
 */
var CalendarDescriptionBehavior = {
    /**
     * Indicates whether the calendar can accept user input.
     * @param {boolean} [isEnabled] When provided, this method acts as a setter and sets the isEnabled value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isEnabled: function (isEnabled) {
        return this._propertyHandler("Enabled", isEnabled, Convert.toBool);
    },

    /**
     * The static text attached to the calendar.
     * @param {string} [attachedText] When provided, this method acts as a setter and sets the attachedText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored attachedText value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    attachedText: function (attachedText) {
        return this._simplePropertyHandler("AttachedText", attachedText);
    }
};

/**
 * The description of a Calendar test object.
 * @param {Object} [props] Initializes a Calendar test object using the supplied property bag.
 * @returns {Calendar} the description object that was initialized.
 * @class Calendar
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.CalendarDescriptionBehavior
 */
function Calendar(props) {
    var calendarDesc = new SapGuiBaseDescription("Calendar");
    Utils.extend(calendarDesc, CalendarDescriptionBehavior);
    calendarDesc._defineByPropertyBag(props);
    return calendarDesc;
}

/**
 * A Calendar object,
 * @constructor
 * @class CalendarTO
 * @extends SAPGUI.SapGuiBaseTO
 * @mixes SAPGUI.CalendarTOBehavior._properties
 * @mixes SAPGUI.CalendarTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof SAPGUI
 */
function CalendarTO(session, description) {
    description = description || Calendar();
    var calendarTO = new SapGuiBaseTO("SAPGuiCalendar", session, description);
    calendarTO._mergeBehavior(WaitUntilEnabledBehavior);
    calendarTO._mergeBehavior(CalendarTOBehavior);
    return calendarTO;
}

//Consts
var dateWiredName = "SelectedDate";

/**
 * The behaviors of the Calendar object
 * @memberof SAPGUI
 * @ignore
 */
var CalendarTOBehavior = {
    /**
     * @memberof SAPGUI.CalendarTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The static text attached to the calendar.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the static text attached to the calendar.
         */
        attachedText: {
            wiredName: "AttachedText"
        },

        /**
         * Indicates whether the calendar can accept user input.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the calendar can accept user input.
         */
        isEnabled: {
            wiredName: "Enabled"
        },

        /*jshint eqnull:true */
        /**
         * Get the range of dates selected in the calendar. If a single date is selected, both DateRange.startDate and DateRange.endDate are the selected date.
         * @function
         * @returns {Promise<Object>} a promise that is fulfilled with the range of dates selected in this calendar
         */
        dateRange: {
            type: 'daterange',
            nonTranslatable: true,
            getter: function () {
                return this._getROProperties(arguments, "DateRangeStart", "DateRangeEnd").then(function (result) {
                    var start = result[0];
                    var end = result[1];
                    if (StringUtils.isNullOrEmpty(start) || StringUtils.isNullOrEmpty(end))
                        return null;
                    return { startDate: CalendarConverter.parseNativeSingleDateFormat(start, '/'), endDate: CalendarConverter.parseNativeSingleDateFormat(end, '/') };
                });
            }
        },

        /*jshint eqnull:true */
        /**
         * Get the date selected in the calendar. If a date range is selected, the Date property is the start date of the range.
         * @function
         * @returns {Promise<Date>} a promise that is fulfilled with the date selected in the calendar.
         */
		 date: {
			type: 'date',
            wiredName: dateWiredName,
			getter: function () {
				return this._getROProperty(dateWiredName, arguments).then((function (res) {
					if (StringUtils.isNullOrEmpty(res)) {
						throw new Error("Can't determine the current date of the test object.");
					}

					return CalendarConverter.parseNativeSingleDateFormat(res, '/');
				}).bind(this));
            }
        },
    },

    /**
     * @memberof SAPGUI.CalendarTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the specified date.
         * @function
         * @param {Date} date The date to set.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setDate: function (date) {
            if (date == null)
                throw new Error("parameter date can not be null");
            return this._executeWithEvents(arguments, "SetDate", CalendarConverter.convertToNativeSingleDateFormat(date, '/'));
        },

        /*jshint eqnull:true */
        /**
         * Sets the specified date range. The actual date range can be one full week or one full month.
         * @function
         * @param {Object | Date} dateRangeOrStartDate The date range or the start date. If it is the dateRange, the start date is at the first element and the end date is at the second element.
         * @param {Date} [endDate] The end date of the range.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setDateRange: function (dateRangeOrStartDate, endDate) {
            if (dateRangeOrStartDate == null)
                throw new Error("parameter dateRangeOrStartDate can not be null");

            var startDate = dateRangeOrStartDate;

            if (dateRangeOrStartDate.startDate != null) {
                startDate = dateRangeOrStartDate.startDate;
                endDate = dateRangeOrStartDate.endDate;
            }

            if (startDate == null)
                throw new Error("parameter startDate can not be null");

            if (endDate == null)
                throw new Error("parameter endDate can not be null");

            return this._executeWithEvents(arguments, "SetDateRange", CalendarConverter.convertToNativeSingleDateFormat(startDate, '/'), CalendarConverter.convertToNativeSingleDateFormat(endDate, '/'));
        }
    }
};

module.exports.Calendar = Calendar;
module.exports.CalendarTO = CalendarTO;
