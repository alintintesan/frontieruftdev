// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var TestObjectBase = Core.TestObjectBase;
var Convert = Core.Convert;

var DescriptionBase = Core.DescriptionBase;
var NativeObjectBehavior = Core.NativeObjectBehavior;
var ComponentType = require("./component_type.js").ComponentType;

/**
 * GuiSessionDescriptionBehavior
 * @memberof SAPGUI
 * @ignore
 */
var GuiSessionDescriptionBehavior = {
    
    /**
     * The session's unique identifier in text format. 
     * @param {string} [id] When provided, this method acts as a setter and sets the id value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored id value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    id: function (id) {
        return this._simplePropertyHandler("Id", id);
    },
    
    /**
     * The name of the session.
     * @param {string} [name] When provided, this method acts as a setter and sets the name value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored name value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    name: function (name) {
        return this._simplePropertyHandler("Name", name);
    },
              
    /**
     * The name of the application server.
     * @param {string} [applicationServer] When provided, this method acts as a setter and sets the applicationServer value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored applicationServer value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    applicationServer: function (applicationServer) {
        return this._simplePropertyHandler("ApplicationServer", applicationServer);
    },   
      
    /**
     * The client selected on the login screen.
     * @param {string} [client] When provided, this method acts as a setter and sets the client value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored client value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    client: function (client) {
        return this._simplePropertyHandler("Client", client);
    },   
       
    /**
     * The language in which the user is working.
     * @param {string} [language] When provided, this method acts as a setter and sets the language value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored language value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    language: function (language) {
        return this._simplePropertyHandler("Language", language);
    },     
       
    /**
     * The name of the SAP system.
     * @param {string} [systemName] When provided, this method acts as a setter and sets the systemName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored systemName value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    systemName: function (systemName) {
        return this._simplePropertyHandler("SystemName", systemName);
    },     
    
    /**
     * The user name for the current session.
     * @param {string} [user] When provided, this method acts as a setter and sets the user value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored user value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    user: function (user) {
        return this._simplePropertyHandler("User", user);
    },   
        
    /**
     * The code page currently used for this session.
     * @param {number} [codePage] When provided, this method acts as a setter and sets the codePage value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored codePage value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    codePage: function (codePage) {
        return this._propertyHandler("CodePage", codePage, Convert.toNumber);
    }, 
    
    /**
     * The system number. 
     * @param {number} [systemNumber] When provided, this method acts as a setter and sets the systemNumber value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored systemNumber value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    systemNumber: function (systemNumber) {
        return this._propertyHandler("SystemNumber", systemNumber, Convert.toNumber);
    } 
};


/**
 * The description of an SAP Gui Session test object.
 * @param {Object} [props] Initializes a GuiSession test object using the supplied property bag.
 * @returns {SAPGUI.GuiSession} the description object that was initialized.
 * @class GuiSession
 * @memberof SAPGUI
 * @mixes SAPGUI.GuiSessionDescriptionBehavior
 */
function GuiSession(props) {
    var guiSessionDesc = new DescriptionBase();
    guiSessionDesc._init({
        technology: "SAPGUI",
        leanftType: "GuiSession"
    });
    ObjUtils.extend(guiSessionDesc, GuiSessionDescriptionBehavior);
    guiSessionDesc._defineByPropertyBag(props);
    return guiSessionDesc;
}

//Consts
var typeWiredName = "GuiComponentType";

/**
 * @class GuiSessionTO
 * @memberof SAPGUI
 * @constructor
 * @extends TestObjectBase
 * @mixes NativeObjectBehavior._methods
 * @mixes GuiSessionTOBehavior._methods
 * @mixes GuiSessionTOBehavior._properties
 */
function GuiSessionTO(session, description, cookie){
    description = description || GuiSession();
    this._cookie = cookie;
    this._init("SAPGuiSession",session,description);

    this._mergeBehavior(NativeObjectBehavior);
    this._mergeBehavior(GuiSessionTOBehavior);
}

var GuiSessionTOBehavior = {
    _applicationInfo: null,

    /**
     * @memberof SAPGUI.GuiSessionTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The SAPGUI component type.
         * @function
         * @returns {Promise<SAPGUI.ComponentType>} a promise that is fulfilled with the SAPGUI component type.
         * @memberof SAPGUI.GuiSessionTO#
         */
        type: {
            type: 'enum',
            enumType: ComponentType,
            enumName: 'ComponentType',
            wiredName: typeWiredName,
            getter: function () {
                return this._getROProperty(typeWiredName, arguments).then(ComponentType._nativeToComponentType);
            }
        },

        /**
         * The session's unique identifier in text format.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the session's unique identifier in text format.
         * @memberof SAPGUI.GuiSessionTO#
         */
        id: {
            wiredName: "Id"
        },

        /**
         * The name of the session.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the session.
         * @memberof SAPGUI.GuiSessionTO#
         */
        name: {
            wiredName: "Name"
        },

        /**
         * The name of the window that has focus.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the window that has focus.
         * @memberof SAPGUI.GuiSessionTO#
         */
        activeWindow: {
            wiredName: "ActiveWindow"
        },

        /**
         * The name of the application server. Applies only when the connection specifies an application server and is not using load balancing.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the application server.
         * @memberof SAPGUI.GuiSessionTO#
         */
        applicationServer: {
            wiredName: "ApplicationServer"
        },

        /**
         * The client selected on the login screen.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the client selected on the login screen.
         * @memberof SAPGUI.GuiSessionTO#
         */
        client: {
            wiredName: "Client"
        },

        /**
         * The code page for this session.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the code page for this session.
         * @memberof SAPGUI.GuiSessionTO#
         */
        codePage: {
            wiredName: "CodePage"
        },

        /**
         * The number of flushes or passes of data during server communication to the client.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of flushes or passes of data during server communication to the client.
         * @memberof SAPGUI.GuiSessionTO#
         */
        flushes: {
            wiredName: "Flushes"
        },

        /**
         * Login group information. Applies only when connection is using load balancing.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the login group information.
         * @memberof SAPGUI.GuiSessionTO#
         */
        group: {
            wiredName: "Group"
        },

        /**
         * The time, in milliseconds, it takes for the client to interpret the information received from the server.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the interpretation time.
         * @memberof SAPGUI.GuiSessionTO#
         */
        interpretationTime: {
            wiredName: "InterpretationTime"
        },

        /**
         * The language the user is working in.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the language the user is working in.
         * @memberof SAPGUI.GuiSessionTO#
         */
        language: {
            wiredName: "Language"
        },

        /**
         * The name of the message server. Applies only when connection is using load balancing.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the message server.
         * @memberof SAPGUI.GuiSessionTO#
         */
        messageServer: {
            wiredName: "MessageServer"
        },

        /**
         * The name of the SAP source program that is executing.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the SAP source program that is executing.
         * @memberof SAPGUI.GuiSessionTO#
         */
        program: {
            wiredName: "Program"
        },

        /**
         * The server response time in milliseconds.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the server response time in milliseconds.
         * @memberof SAPGUI.GuiSessionTO#
         */
        responseTime: {
            wiredName: "ResponseTime"
        },

        /**
         * The number of communications between client and server while the client is locked and waiting for data from the server.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of communications between client and server while the client is locked.
         * and waiting for data from the server.
         * @memberof SAPGUI.GuiSessionTO#
         */
        roundTrips: {
            wiredName: "RoundTrips"
        },

        /**
         * The number of the displayed screen.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of the displayed screen from the server.
         * @memberof SAPGUI.GuiSessionTO#
         */
        screenNumber: {
            wiredName: "ScreenNumber"
        },

        /**
         * The name of the SAP system.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the SAP system.
         * @memberof SAPGUI.GuiSessionTO#
         */
        systemName: {
            wiredName: "SystemName"
        },

        /**
         * The system number. Applies only when connection specifies an application server and is not using load balancing.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the system number.
         * @memberof SAPGUI.GuiSessionTO#
         */
        systemNumber: {
            wiredName: "SystemNumber"
        },

        /**
         * The transaction the user is executing.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the transaction the user is executing.
         * @memberof SAPGUI.GuiSessionTO#
         */
        transaction: {
            wiredName: "Transaction"
        },

        /**
         * The user name.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the user name.
         * @memberof SAPGUI.GuiSessionTO#
         */
        user: {
            wiredName: "User"
        }
    },

    /**
     * @memberof SAPGUI.GuiSessionTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Suspends execution until the SAP GUI for Windows session is available.
         * After time-out, the test run continues regardless of the session status.
         * You can use this method when invoking a new session from an existing session or when moving from a session that is
         * open on one server to a new session on a different server.
         * @function
         * @param {number} [timeOut] Milliseconds.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @memberof SAPGUI.GuiSessionTO#
         */
        sync: function (timeOut) {
            if (timeOut != null) {
                return this._executeCommand("Sync", Convert.toNumber(timeOut));
            }

            return this._executeCommand("Sync");
        },

        /**
         * Closes the SAP GUI for Windows session without displaying a warning message.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @memberof SAPGUI.GuiSessionTO#
         */
        close: function () {
            return this._executeWithEvents(arguments, "Close");
        },

        /*jshint eqnull:true */
        /**
         * Navigates to the session initial screen.
         * @function
         * @param {string} [transactionCode] The transaction to navigate to.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @memberof SAPGUI.GuiSessionTO#
         */
        reset: function (transactionCode) {
            if (transactionCode != null) {
                return this._executeWithEvents(arguments, "Reset", transactionCode);
            }
            return this._executeWithEvents(arguments, "Reset");
        },

        /**
         * Does not support
         * @function
         * @memberof SAPGUI.GuiSessionTO#
         * @ignore
         */
        highlight: function () {
            return this._throwUnsupportedErrorAsync("highlight");
        },

        /**
         * Does not support
         * @function
         * @memberof SAPGUI.GuiSessionTO#
         * @ignore
         */
        snapshot: function () {
            return this._throwUnsupportedErrorAsync("snapshot");
        },

        _canParticipateInOptimizedPath: function() {
            return false;
        }
    },

    _helpers: {
        _getApplicationInfo: function () {
            return this._applicationInfo;
        }
    }
};

/**
 * @class GuiSessionTO
 * The behaviors of the GuiSessionTO object
 * @memberof SAPGUI
 * @ingore
 */
ObjUtils.inherit(GuiSessionTO,TestObjectBase,{
});

module.exports.GuiSession = GuiSession;
module.exports.GuiSessionTO = GuiSessionTO;
