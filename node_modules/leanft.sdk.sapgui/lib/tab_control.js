// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var Convert = Core.Convert;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

var SapGuiObjectBase = require("./sapgui_object_base.js");
var SapGuiBaseDescription = SapGuiObjectBase.SapGuiBaseDescription;
var SapGuiBaseTO = SapGuiObjectBase.SapGuiBaseTO;

var ItemsBehavior = require("./items_behavior.js");
var ItemsTOBehavior = ItemsBehavior.ItemsTOBehavior;
var ItemsDescriptionBehavior = ItemsBehavior.ItemsDescriptionBehavior;

/**
 * TabControlDescriptionBehavior - Description of a SAP GUI for Windows tab strip.
 * @memberof SAPGUI
 * @ignore
 */
var TabControlDescriptionBehavior = {
    /**
     * The value of the tab strip's tooltip.
     * @param {string} [tooltip] When provided, this method acts as a setter and sets the tooltip value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored tooltip value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    tooltip: function (tooltip) {
        return this._simplePropertyHandler("Tooltip", tooltip);
    },

    /**
     * The text string associated with the tab strip.
     * @param {string} [text] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    text: function (text) {
        return this._simplePropertyHandler("Text", text);
    },

    /**
     * Indicates whether the tab strip can accept user input.
     * @param {boolean} [isEnabled] When provided, this method acts as a setter and sets the isEnabled value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isEnabled: function (isEnabled) {
        return this._propertyHandler("Enabled", isEnabled, Convert.toBool);
    },

    /**
     * The name of the selected tab.
     * @param {string} [selectedTab] When provided, this method acts as a setter and sets the selectedTab value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedTab value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedTab: function (selectedTab) {
        return this._simplePropertyHandler("SelectedItem", selectedTab);
    },

    /**
     * The list of the items in the status bar.
     * @param {string[]} [tabs] When provided, this method acts as a setter and sets the tabs value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored tabs value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    tabs: function (tabs) {
        return this._items(tabs);
    },

    /**
     * The number of tabs contained in the tab strip.
     * @param {number} [tabsCount] When provided, this method acts as a setter and sets the tabsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored tabsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    tabsCount: function (tabsCount) {
        return this._itemsCount(tabsCount);
    }
};

/**
 * The description of a TabControl test object.
 * @param {Object} [props] Initializes a TabControl test object using the supplied property bag.
 * @returns {TabControl} the description object that was initialized.
 * @class TabControl
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.ItemsDescriptionBehavior
 * @mixes SAPGUI.TabControlDescriptionBehavior
 */
function TabControl(props) {
    var tabControlDesc = new SapGuiBaseDescription("TabControl");
    Utils.extend(tabControlDesc, ItemsDescriptionBehavior);
    Utils.extend(tabControlDesc, TabControlDescriptionBehavior);
    tabControlDesc._defineByPropertyBag(props);
    return tabControlDesc;
}

/**
 * A TabControl object,
 * @constructor
 * @class TabControlTO
 * @extends SAPGUI.SapGuiBaseTO
 * @mixes SAPGUI.ItemsTOBehavior
 * @mixes SAPGUI.TabControlTOBehavior._properties
 * @mixes SAPGUI.TabControlTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof SAPGUI
 */
function TabControlTO(session, description) {
    description = description || TabControl();
    var tabControlTO = new SapGuiBaseTO("SAPGuiTabStrip", session, description);
    tabControlTO._mergeBehavior(WaitUntilEnabledBehavior);
    tabControlTO._mergeBehavior(ItemsTOBehavior);
    tabControlTO._mergeBehavior(TabControlTOBehavior);
    return tabControlTO;
}

/**
 * The behaviors of the TabControl object
 * @memberof SAPGUI
 * @ignore
 */
var TabControlTOBehavior = {
    /**
     * @memberof SAPGUI.TabControlTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The tab strip's tooltip.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the tab strip's tooltip.
         */
        tooltip: {
            wiredName: "Tooltip"
        },

        /**
         * The text associated with the tab strip.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text associated with the tab strip.
         */
        text: {
            wiredName: "Text"
        },

        /**
         * Indicates whether the tab strip can accept user input.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the tab strip can accept user input.
         */
        isEnabled: {
            wiredName: "Enabled"
        },

        /*jshint eqnull:true */
        /**
         * The list of tabs in the tab strip.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the list of tabs in the tab strip.
         */
        tabs: {
            wiredName: ItemsTOBehavior._allItemsWiredName,
            getter: function () {
                return this._items();
            }
        },

        /**
         * The name of the selected tab.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the selected tab.
         */
        selectedTab: {
            wiredName: "SelectedItem"
        }
    },

    /**
     * @memberof SAPGUI.TabControlTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Selects a tab from the tab strip by name or by index.
         * @function
         * @param {number|string} tab The tab to be selected.
         * The input can be the 0-based index of the tab or the name/text of the tab
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        select: function (tab) {
            if (tab == null)
                throw new Error("The tab cannot be null.");

            var value = tab;
            if (typeof tab === 'number') {
                value = "#" + (tab + 1);
            }
            return this._executeWithEvents(arguments, "Select", value);
        },

        /**
         * Sets the focus on the tab strip.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        setFocus: function () {
            return this._executeWithEvents(arguments, "SetFocus");
        }
    }
};

module.exports.TabControl = TabControl;
module.exports.TabControlTO = TabControlTO;
