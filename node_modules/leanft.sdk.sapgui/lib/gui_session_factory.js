// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 * @ignore
 */

var Convert = require("leanft.sdk.core").Convert;
var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var Logger = Core.Logger;

var GuiSessionTO = require("./gui_session.js").GuiSessionTO;
var GuiSession = require("./gui_session.js").GuiSession;

var ReplayErrorsBehavior = Core.ReplayErrorsBehavior;
var NotifyEventsBehavior = Core.NotifyEventsBehavior;
var DescriptionBase = Core.DescriptionBase;
var RuntimeAccessMode = Core.RuntimeAccessMode;

/**
 * A class for creating an {@link SAPGUI.GuiSessionTO}.
 * @constructor GuiSessionFactory
 * @memberof SAPGUI
 * @class GuiSessionFactory
 */
function GuiSessionFactory(session) {
    this._logger = new Logger("GuiSessionFactory");
    if(session === null){
        throw new Error("The communication channel is mandatory for creating GuiSessionFactory");
    }

    this._session = session;

    //extends other behaviors
    ObjUtils.extend(this,ReplayErrorsBehavior);
    ObjUtils.extend(this,NotifyEventsBehavior);
}

/**
 * @memberof SAPGUI
 * @ignore
 */
GuiSessionFactory.prototype = {
    _logger: null,
    _session: null,

    /*jshint eqnull:true */
    /**
     * Create common data to launch the SAP Gui session.
     * @returns {Object} launchData Launch data that is fulfilled with client, username, password and language
     * @ignore
     * @private
     */
    _createDataToLaunchSession: function(client, username, password, language) {
        var launchData;
        language = language || 'en';
        if (client == null && username == null && password == null) {
            launchData = {
                "type": "SAPGuiSession",
                "launch info": {
                    "LaunchType": "Connection Only"
                }
            };
        }
        else if (client != null && username != null && password != null) {
            launchData = {
                "type": "SAPGuiSession",
                "launch info": {
                    "LaunchType": "AutoLogon",
                    "client": client,
                    "user": username,
                    "password": password,
                    "language": language
                }
            };
        }
        else {
            throw new Error("client or username or password cannot be null.");
        }
        return launchData;

    },
    /*jshint eqnull:true */
    /**
    * Launches the SAP Gui session.
    * @param {string} serverDescription The server to which you want to log on. The string is case-sensitive and must be identical to the one displayed in the SAP Logon dialog box.
    * @param {string} [client] The SAP client you want to use.
    * @param {string} [username] The username with which you want to log on to the SAP Server.
    * @param {string} [password] The encrypted value of the password for the specified username.
    * @param {string} [language = 'en'] The 2-letter code for the language you want to use.
    * @returns {Promise<SAPGUI.GuiSessionTO>} a promise that is fulfilled with the GuiSessionTO instance.
    */
    launch: function(serverDescription, client, username, password, language) {
        var func = function() {
            
            this._logger.trace("launch: Called for server description: " + serverDescription);
            
            if (serverDescription == null) {
                throw new Error("serverDescription cannot be null.");
            }
            var launchData = this._createDataToLaunchSession(client, username, password, language);
            launchData["launch info"].ServerDescription = serverDescription;

            return this._session._communication.send("LaunchApplication", launchData).then(function (launchResult) {
                this._logger.trace("launch: The result of the launch is \n" + JSON.stringify(launchResult));
                if (launchResult === null) {
                    throw new Error("launch result cannot be null");
                }
                var guiSession = new GuiSessionTO(this._session, null, launchResult["AUT cookie"]);
                guiSession._useCachedProperties(launchResult.Properties, RuntimeAccessMode.accessOnUnknownOperationOrProperty);
                guiSession._applicationInfo = launchResult.Properties;
                return guiSession;
            }.bind(this), null);
        };
        var options = { sender: this, onError:false, calleeArguments: arguments, type: "GuiSessionFactory"};
        return this.notifyWithEvents(func, arguments, options);
    },
    
    /*jshint eqnull:true */   
    /**
    * Launches the SAP Gui session by server IP.
    * @param {string} serverIP The connection IP for the SAP server to which you want to open a connection.    
    * @param {string} [client] The SAP client you want to use.
    * @param {string} [username] The username with which you want to log on to the SAP Server.
    * @param {string} [password] The encrypted value of the password for the specified username.
    * @param {number} [instanceNumber = 0] The server system number.
    * @param {string} [language = 'en'] The 2-letter code for the language you want to use.
    * @returns {Promise<SAPGUI.GuiSessionTO>} a promise that is fulfilled with the GuiSessionTO instance.
    */
    launchByIP: function(serverIP, client, username, password, instanceNumber, language) {
        var func = function() {
            
            this._logger.trace("launchByIP: Called for server IP: " + serverIP);
            
            if (serverIP == null) {
                throw new Error("serverIP cannot be null.");
            }

            instanceNumber = instanceNumber || 0;
            var launchData = this._createDataToLaunchSession(client, username, password, language);
            launchData["launch info"].IP = serverIP;
            launchData["launch info"].SystemNumber = instanceNumber;

            return this._session._communication.send("LaunchApplication", launchData).then(function (launchResult) {
                    this._logger.trace("launchByIP: The result of the launchIP is \n" + JSON.stringify(launchResult));
                    if (launchResult === null) {
                        throw new Error("launchByIP result cannot be null");
                    }
                    var guiSession = new GuiSessionTO(this._session, null, launchResult["AUT cookie"]);
                    guiSession._useCachedProperties(launchResult.Properties, RuntimeAccessMode.accessOnUnknownOperationOrProperty);
                    guiSession._applicationInfo = launchResult.Properties;
                    return guiSession;
                }.bind(this), null);
        };
        var options = { sender: this, onError:false, calleeArguments: arguments, type: "GuiSessionFactory"};
        return this.notifyWithEvents(func, arguments, options);
    },

    /**
    * Returns a new {@link SAPGUI.GuiSessionTO} instance that is attached to a session that
    * was not opened by LeanFT (for example, a session that was opened manually or by the AUT).       
    * Parameter guiSessionDescription is used only when attaching to the session so transient properties like {@link SAPGUI.GuiSession.name}
    * can be used.
    * LeanFT recognizes SAP GUI Session and tabs that it opens (for example, via {@link SAPGUI.GuiSessionFactory.launch(string)}.
    * If a GUI Session is opened outside of the LeanFT context, you need to use the {@link SAPGUI.GuiSessionFactory.attach} method
    * to acquire the GUI session. 
    * @param {GuiSession | Object} guiSessionDescription See {@link SAPGUI.GuiSession} or property bag which contains the set of properties and values for filtering the open sessions.
    * @returns {Promise<SAPGUI.GuiSessionTO>} a promise that is fulfilled with the GuiSessionTO object for the launched session if a single matching sessions was found.
    */
    attach: function (guiSessionDescription) {
        var func = function () {
            this._logger.trace("attach: called with the following guiSessionDescription:" + JSON.stringify(guiSessionDescription));
            guiSessionDescription = guiSessionDescription || GuiSession();
            var guiSessionDesc = guiSessionDescription instanceof DescriptionBase ? guiSessionDescription : GuiSession(guiSessionDescription);
            var attachMessage = {
                "type": "SAPGuiSession",
                "launch info": {
                    Object: {
                        Class: "SAPGuiSession",
                        Description: guiSessionDesc._toJSON(),
                        Parent: null
                    }
                }
            };

            return this._session._communication.send("AttachApplication", attachMessage).then(function (attachResult) {
                this._logger.trace("attach: The result of the attach is \n" + JSON.stringify(attachResult));
                if (attachResult === null) {
                    throw new Error("attach result cannot be null");
                }
                var guiSession = new GuiSessionTO(this._session, null, attachResult["AUT cookie"]);
                guiSession._useCachedProperties(attachResult.Properties, RuntimeAccessMode.accessOnUnknownOperationOrProperty);
                guiSession._applicationInfo = attachResult.Properties;
                return guiSession;
            }.bind(this), null);
        };
        var options = { sender: this, onError: false, calleeArguments: arguments, type: "GuiSessionFactory" };
        return this.notifyWithEvents(func, arguments, options);
    },
    
    /**
     * Returns the open sessions that match the description.
     * The {@link SAPGUI.GuiSession} is used only when attaching to the sessions so transient properties like {@link SAPGUI.GuiSession.name}
     * @param {GuiSession | Object} guiSessionDescription A {@link SAPGUI.GuiSession} containing the set of properties and values
     * or property bag which contains the set of properties and values that should be common to all returned sessions.
     * @returns {Promise<SAPGUI.GuiSessionTO[]>} a promise that is fulfilled with a collection of {@link SAPGUI.GuiSessionTO} objects that are open and match the description.
     */
    openSessions: function (guiSessionDescription) {
        var func = function () {
            this._logger.trace("openSessions: called with the following guiSessionDescription:" + JSON.stringify(guiSessionDescription));
            guiSessionDescription = guiSessionDescription || GuiSession();
            var guiSessionDesc = guiSessionDescription instanceof DescriptionBase ? guiSessionDescription : GuiSession(guiSessionDescription);

            var filterKnownGuiSessionMsg = {
                "type": "SAPGuiSession",
                "launch info": {
                    Object: {
                        Class: "SAPGuiSession",
                        Description: guiSessionDesc._toJSON(),
                        Parent: null
                    }
                }
            };

            return this._session._communication.send("GetAllOpenApplication", filterKnownGuiSessionMsg).then(function (filteredSessionsRes) {
                this._logger.trace("openSessions: The result of the openSessions is \n" + JSON.stringify(filteredSessionsRes));
                if (filteredSessionsRes === null) {
                    throw new Error("filter known sessions result cannot be null");
                }

                if (filteredSessionsRes.Result === undefined) {
                    throw new Error("filter known sessions result cannot be null");
                }

                if (filteredSessionsRes.Result === null)
                    return [];

                return filteredSessionsRes.Result.map(function (sessionInfo) {
                    var guiSession = new GuiSessionTO(this._session, null, sessionInfo.ServerCookie);
                    guiSession._applicationInfo = sessionInfo.Properties;
                    return guiSession;
                }, this);
            }.bind(this), null);
        };
        var options = { sender: this, onError: true, calleeArguments: arguments, type: "GuiSessionFactory" };
        return this.notifyWithEvents(func, arguments, options);
    }

};

module.exports.GuiSessionFactory = GuiSessionFactory;

