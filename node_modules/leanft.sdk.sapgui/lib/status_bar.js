// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var Convert = Core.Convert;
var SapGuiObjectBase = require("./sapgui_object_base.js");
var SapGuiBaseDescription = SapGuiObjectBase.SapGuiBaseDescription;
var SapGuiBaseTO = SapGuiObjectBase.SapGuiBaseTO;

var ItemsBehavior = require("./items_behavior.js");
var ItemsTOBehavior = ItemsBehavior.ItemsTOBehavior;
var ItemsDescriptionBehavior = ItemsBehavior.ItemsDescriptionBehavior;


/**
 * The type of message in the StatusBar.
 * @typedef {SAPGUI.StatusBarMessageType} StatusBarMessageType
 * @property {string} success Success
 * @property {string} warning Warning
 * @property {string} error Error
 * @memberof SAPGUI
 */
var StatusBarMessageType = {
    /**
     * @type {string}
     */
    success: "success",
    /**
     * @type {string}
     */
    warning: "warning",
    /**
     * @type {string}
     */
    error: "error",

    /**
     * @ignore
     */
    _convertToNative: {
        success: "S",
        warning: "W",
        error: "E"
    },

    /**
     * @ignore
     */
    _convertToStatusBarMessageType: {
        s: "success",
        w: "warning",
        e: "error"
    },

    /**
     * @ignore
     */
    _nativeToStatusBarMessageType: function (type) {
        return StatusBarMessageType._convertToStatusBarMessageType[type.toLowerCase()];
    },

    /**
     * @ignore
     */
    _statusBarMessageTypeToNative: function (type) {
        return StatusBarMessageType._convertToNative[type.toLowerCase()];
    }
};

/**
 * StatusBarDescriptionBehavior - Description of a SAP GUI for Windows status bar.
 * @memberof SAPGUI
 * @ignore
 */
var StatusBarDescriptionBehavior = {
    /**
     * The text string associated with the status bar.
     * @param {string} [text] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    text: function (text) {
        return this._simplePropertyHandler("Text", text);
    },

    /**
     * The number of non-empty items in the status bar.
     * @param {number} [itemsCount] When provided, this method acts as a setter and sets the itemsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored itemsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    itemsCount: function (itemsCount) {
        return this._itemsCount(itemsCount);
    },

    /**
     * The list of the items in the status bar.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the items value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored items value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    items: function (items) {
        return this._items(items);
    },

    /**
     * Indicates whether the message is a pop-up.
     * @param {boolean} [isEnabled] When provided, this method acts as a setter and sets the isMessageAsPopup value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isMessageAsPopup value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isMessageAsPopup: function (isMessageAsPopup) {
        return this._propertyHandler("MessageAsPopup", isMessageAsPopup, Convert.toBool);
    },

    /**
     * The ID of the message in text format.
     * @param {string} [messageId] When provided, this method acts as a setter and sets the messageId value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored messageId value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    messageId: function (messageId) {
        return this._simplePropertyHandler("MessageId", messageId);
    },

    /**
     * The internal number of the message on the status bar.
     * @param {string} [messageNumber] When provided, this method acts as a setter and sets the messageNumber value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored messageNumber value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    messageNumber: function (messageNumber) {
        return this._simplePropertyHandler("MessageNumber", messageNumber);
    },

    /**
     * The internal number of the message on the status bar.
     * @param {SAPGUI.StatusBarMessageType} [messageType] When provided, this method acts as a setter and sets the messageType value.
     * @returns {SAPGUI.StatusBarMessageType | Description} If no parameter is provided, the method acts as a getter and returns the current stored messageType value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    messageType: function (messageType) {
        return this._simplePropertyHandler("MessageType", messageType, StatusBarMessageType._statusBarMessageTypeToNative, StatusBarMessageType._nativeToStatusBarMessageType);
    }
};

/**
 * The description of a StatusBar test object.
 * @param {Object} [props] Initializes a StatusBar test object using the supplied property bag.
 * @returns {StatusBar} the description object that was initialized.
 * @class StatusBar
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.ItemsDescriptionBehavior
 * @mixes SAPGUI.StatusBarDescriptionBehavior
 */
function StatusBar(props) {
    var statusBarDesc = new SapGuiBaseDescription("StatusBar");
    Utils.extend(statusBarDesc, ItemsDescriptionBehavior);
    Utils.extend(statusBarDesc, StatusBarDescriptionBehavior);
    statusBarDesc._defineByPropertyBag(props);
    return statusBarDesc;
}

/**
 * A StatusBar object,
 * @constructor
 * @class StatusBarTO
 * @extends SAPGUI.SapGuiBaseTO
 * @mixes SAPGUI.ItemsTOBehavior
 * @mixes SAPGUI.StatusBarTOBehavior._properties
 * @memberof SAPGUI
 */
function StatusBarTO(session, description) {
    description = description || StatusBar();
    var statusBarTO = new SapGuiBaseTO("SAPGuiStatusBar", session, description);
    statusBarTO._mergeBehavior(ItemsTOBehavior);
    statusBarTO._mergeBehavior(StatusBarTOBehavior);
    return statusBarTO;
}

//Consts
var messageTypeWiredName = "MessageType";

/**
 * The behaviors of the StatusBar object
 * @memberof SAPGUI
 * @ignore
 */
var StatusBarTOBehavior = {
    /**
     * @memberof SAPGUI.StatusBarTOBehavior
     * @ignore
     */
    _properties: {
        /*jshint eqnull:true */
        /**
         * The list of all non-empty items in the status bar.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the list of tabs in the tab strip.
         */
        items: {
            wiredName: ItemsTOBehavior._allItemsWiredName,
            getter: function () {
                return this._items();
            }
        },

        /**
         * Indicates whether the message is a pop-up.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the message is a pop-up.
         */
        isMessageAsPopup: {
            wiredName: "MessageAsPopup"
        },

        /**
         * The ID of the message in text format.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the ID of the message in text format.
         */
        messageId: {
            wiredName: "MessageId"
        },

        /**
         * The internal number of the message on the status bar.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the internal number of the message on the status bar.
         */
        messageNumber: {
            wiredName: "MessageNumber"
        },

        /**
         * The type of message.
         * @function
         * @returns {Promise<SAPGUI.StatusBarMessageType>} a promise that is fulfilled with the type of message.
         */
        messageType: {
            type: 'enum',
            enumType: StatusBarMessageType,
            enumName: 'StatusBarMessageType',
            wiredName: messageTypeWiredName,
            getter: function () {
                return this._getROProperty(messageTypeWiredName, arguments).then(StatusBarMessageType._nativeToStatusBarMessageType);
            }
        },

        /**
         * The text associated with the status bar.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text associated with the status bar.
         */
        text: {
            wiredName: "Text"
        }
    }
};

module.exports.StatusBar = StatusBar;
module.exports.StatusBarTO = StatusBarTO;
module.exports.StatusBarMessageType = StatusBarMessageType;
