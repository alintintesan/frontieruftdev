// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var Convert = Core.Convert;
var MenuHelperBehavior = Core.MenuHelperBehavior;
var SapMenuHelperBehavior = require("./sap_menu_helper.js").SapMenuHelperBehavior;

var SapGuiObjectBase = require("./sapgui_object_base.js");
var SapGuiBaseDescription = SapGuiObjectBase.SapGuiBaseDescription;
var SapGuiBaseTO = SapGuiObjectBase.SapGuiBaseTO;

var ItemsBehavior = require("./items_behavior.js");
var ItemsTOBehavior = ItemsBehavior.ItemsTOBehavior;
var ItemsDescriptionBehavior = ItemsBehavior.ItemsDescriptionBehavior;

/**
 * MenuBarDescriptionBehavior - Description of a SAP GUI for Windows menu bar.
 * @memberof SAPGUI
 * @ignore
 */
var MenuBarDescriptionBehavior = {
    /**
     * The list of the items in the menu bar.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the items value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored items value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    items: function (items) {
        return this._items(items);
    },

    /**
     * The number of items contained in the menu bar.
     * @param {number} [itemsCount] When provided, this method acts as a setter and sets the itemsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored itemsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    itemsCount: function (itemsCount) {
        return this._itemsCount(itemsCount);
    }
};

/**
 * The description of a Menubar test object.
 * @param {Object} [props] Initializes a Menubar test object using the supplied property bag.
 * @returns {Menubar} the description object that was initialized.
 * @class Menubar
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.ItemsDescriptionBehavior
 * @mixes SAPGUI.MenuBarDescriptionBehavior
 */
function Menubar(props) {
    var menuBarDesc = new SapGuiBaseDescription("Menubar");
    Utils.extend(menuBarDesc, ItemsDescriptionBehavior);
    Utils.extend(menuBarDesc, MenuBarDescriptionBehavior);
    menuBarDesc._defineByPropertyBag(props);
    return menuBarDesc;
}

/**
 * A Menubar object,
 * @constructor
 * @class MenubarTO
 * @extends SAPGUI.SapGuiBaseTO
 * @mixes MenuHelperBehavior
 * @mixes SAPGUI.SapMenuHelperBehavior
 * @mixes SAPGUI.ItemsTOBehavior
 * @mixes SAPGUI.MenubarTOBehavior._methods
 * @mixes SAPGUI.MenubarTOBehavior._properties
 * @memberof SAPGUI
 */
function MenubarTO(session, description) {
    description = description || Menubar();
    var menuBarTO = new SapGuiBaseTO("SAPGuiMenubar", session, description);
    menuBarTO._mergeBehavior(MenuHelperBehavior);
    menuBarTO._mergeBehavior(SapMenuHelperBehavior);
    menuBarTO._mergeBehavior(ItemsTOBehavior);
    menuBarTO._mergeBehavior(MenubarTOBehavior);
    return menuBarTO;
}

/**
 * The behaviors of the Menubar object
 * @memberof SAPGUI
 * @ignore
 */
var MenubarTOBehavior = {
    /**
     * @memberof SAPGUI.MenubarTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The list of the items in the menu bar.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the list of the items in the menu bar.
         */
        items: {
            wiredName: ItemsTOBehavior._allItemsWiredName,
            getter: function () {
                return this._items();
            }
        }
    },

    /**
     * @memberof SAPGUI.MenubarTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Returns the path of the specified menu item.
         * @function
         * @param {...(number|string)} menuPathParts The menu path parts can be: logical name(string), full path(string), or numeric 1-based index(int).
         * @returns {string} the path of the specified menu item.
         */
        buildMenuPath: function (menuPathParts) {
            return this._buildMenuPath.apply(this, arguments);
        },

        /*jshint eqnull:true */
        /**
         * Selects an item from the menu bar.
         * @function
         * @param {string} path The full path of the menu item to select.
         * The path is composed of the menu and sub-menu item names and/or numeric index numbers.
         * Separate path elements with a semicolon (;).
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        select: function (path) {
            if (path == null)
                throw new Error("The path cannot be null.");
            return this._executeWithEvents(arguments, "Select", path);
        }
    }
};

module.exports.Menubar = Menubar;
module.exports.MenubarTO = MenubarTO;
