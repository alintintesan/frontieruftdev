// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var Convert = Core.Convert;

var SapGuiObjectBase = require("./sapgui_object_base.js");
var SapGuiBaseDescription = SapGuiObjectBase.SapGuiBaseDescription;
var SapGuiBaseTO = SapGuiObjectBase.SapGuiBaseTO;

/**
 * Description of a SAP GUI for Windows label.
 * @memberof SAPGUI
 * @ignore
 */
var LabelDescriptionBehaviour = {    
    /**
     * Either the text string or the icon name of the label. 
     * @param {string} [text] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    text: function (text) {
        return this._simplePropertyHandler("Content", text);
    },
    /**
     * Indicates whether the label is highlighted.
     * @param {boolean} [isHighlighted] When provided, this method acts as a setter and sets the isHighlighted value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isHighlighted value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isHighlighted: function (isHighlighted) {
        return this._propertyHandler("Highlighted", isHighlighted, Convert.toBool);
    },
    
    /**
     * The name of the icon used in the label.
     * @param {string} [iconName] When provided, this method acts as a setter and sets the iconName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored iconName value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    iconName: function (iconName) {
        return this._simplePropertyHandler("IconName", iconName);
    },
     
    /**
     * The maximum number of characters that can be displayed in the label.
     * @param {number} [maxLength] When provided, this method acts as a setter and sets the maxLength value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored maxLength value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    maxLength: function (maxLength) {
        return this._propertyHandler("MaxLength", maxLength, Convert.toNumber);
    },
    
    /**
     * Indicates whether the label is a numeric field.
     * @param {boolean} [isNumerical] When provided, this method acts as a setter and sets the isNumerical value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isNumerical value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isNumerical: function (isNumerical) {
        return this._propertyHandler("Numerical", isNumerical, Convert.toBool);
    },
    
    /**
     * The labels's unique identifier relative to the parent window ID in text format.
     * @param {string} [relativeId] When provided, this method acts as a setter and sets the relativeId value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored relativeId value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    relativeId: function (relativeId) {
        return this._simplePropertyHandler("RelativeId", relativeId);
    }
};

/**
 * @param {Object} [props] Initializes a Label test object using the supplied property bag.
 * @returns {Label} the description object that was initialized.
 * @constructor
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.LabelDescriptionBehaviour
 */
function Label(props){
    var labelDesc = new SapGuiBaseDescription("Label");
    ObjUtils.extend(labelDesc, LabelDescriptionBehaviour);
    labelDesc._defineByPropertyBag(props);
    return labelDesc;
}

/**
 * A LabelTO object,
 * @constructor
 * @class LabelTO
 * @extends SAPGUI.SapGuiBaseTO
 * @mixes SAPGUI.LabelTOBehavior._properties
 * @mixes SAPGUI.LabelTOBehavior._methods
 * @memberof SAPGUI
 */
function LabelTO(session, description) {
    description = description || Label();
    var labelTO = new SapGuiBaseTO("SAPGuiLabel", session, description);
    labelTO._mergeBehavior(LabelTOBehavior);
    return labelTO;    
}

/**
 * The behaviors of the LabelTO object
 * @memberof SAPGUI
 * @ignore
 */
var LabelTOBehavior = {
    /**
     * @memberof SAPGUI.LabelTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The value of the label, either the text string or the icon name.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the value of the label, either the text string or the icon name.
         */
        text: {
            wiredName: "Content"
        },

        /**
         * Indicates whether the label is highlighted.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the label is highlighted or not.
         */
        isHighlighted: {
            wiredName: "Highlighted"
        },

        /**
         * The name of the icon used in the label.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the icon used in the label.
         */
        iconName: {
            wiredName: "IconName"
        },

        /**
         * The maximum number of characters that can be displayed in the label.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the maximum number of characters that can be displayed in the label.
         */
        maxLength: {
            type: "uint",
            wiredName: "MaxLength"
        },

        /**
         * Indicates whether the label is a numerical field.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the label is a numerical field.
         */
        isNumerical: {
            wiredName: "Numerical"
        },

        /**
         * The object's unique identifier relative to the parent window ID, in text format.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's unique identifier relative to the parent window ID, in text format.
         */
        relativeId: {
            wiredName: "RelativeId"
        }
    },

    /**
     * @memberof SAPGUI.LabelTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the position of the cursor within the static text label.
         * @function
         * @param {number} position The 0-based character position.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        setCursorPosition: function (position) {
            if (position == null)
                throw new Error("The parameter position cannot be null.");
            return this._executeWithEvents(arguments, "SetCaretPos", Convert.toNumber(position));
        },

        /**
         * Sets the focus on the static text label.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        setFocus: function () {
            return this._executeWithEvents(arguments, "SetFocus");
        }
    }
};

module.exports.Label = Label;
module.exports.LabelTO = LabelTO;
