// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 07/13/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = require("leanft.sdk.core").ObjectUtils;
var ArrayUtils = Core.ArrayUtils;
var Convert = Core.Convert;
var TableBase = require("./table_base.js");
var TableBaseDescriptionBehavior = TableBase.TableBaseDescriptionBehavior;
var TableBaseBehavior = TableBase.TableBaseBehavior;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;
var SapGuiBaseDescription = require("./sapgui_object_base.js").SapGuiBaseDescription;
var SapGuiBaseTO = require("./sapgui_object_base.js").SapGuiBaseTO;
var GridCell = require("./grid_cell.js").GridCell;
var TableBaseOperationBehavior = Core.TableBaseOperationBehavior;

/**
 * The selections that are possible in a grid.
 * @typedef {GridSelectionMode} GridSelectionMode
 * @property {string} rowsAndColumns Only rows and columns can be selected; individual cells cannot be selected.
 * @property {string} listboxSingle Only one row can be selected.
 * @property {string} listboxMultiple One or more rows can be selected.
 * @property {string} free Any selection can be made.
 */
var GridSelectionMode = {
    /**
     * @type {string}
     */
    rowsAndColumns: "rowsandcolumns",
    /**
     * @type {string}
     */
    listboxSingle: "listboxsingle",
    /**
     * @type {string}
     */
    listboxMultiple: "listboxmultiple",
    /**
     * @type {string}
     */
    free: "free",

    /**
     * @ignore
     */
    _convertToNative: {
        rowsandcolumns: "RowsAndColumns",
        listboxsingle: "ListboxSingle",
        listboxmultiple: "ListboxMultiple",
        free: "Free"
    },

    /**
     * @ignore
     */
    _selectionToNative: function (mode) {
        return GridSelectionMode._convertToNative[mode.toLowerCase()];
    },

    /**
     * @ignore
     */
    _nativeToSelection: function (mode) {
        return mode.toLowerCase();
    }
};

/**
 * GridDescriptionBehavior - the description for Grid
 * @memberof SAPGUI
 * @ignore
 */
var GridDescriptionBehavior = {
    /**
     * Indicates which selections can be made in the grid.
     * @param {GridSelectionMode|string} [selectionMode] When provided, this method acts as a setter and sets the selectionMode value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectionMode value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectionMode: function (selectionMode) {
        return this._propertyHandler("SelectionMode", selectionMode, GridSelectionMode._selectionToNative, GridSelectionMode._nativeToSelection);
    }
};

/**
 * The description of a Grid test object.
 * @param {Object} [props] Initializes a Grid test object using the supplied property bag.
 * @returns {Grid} the description object that was initialized.
 * @class Grid
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.TableBaseDescriptionBehavior
 * @mixes SAPGUI.GridDescriptionBehavior
 */
function Grid(props) {
    var gridDesc = new SapGuiBaseDescription("Grid");
    Utils.extend(gridDesc, TableBaseDescriptionBehavior);
    Utils.extend(gridDesc, GridDescriptionBehavior);
    gridDesc._defineByPropertyBag(props);
    return gridDesc;
}

/**
 * A Grid object,
 * @constructor
 * @class GridTO
 * @extends SAPGUI.SapGuiBaseTO
 * @mixes TableBaseOperationBehavior._methods
 * @mixes TableBaseOperationBehavior._properties
 * @mixes SAPGUI.TableBaseBehavior._methods
 * @mixes SAPGUI.TableBaseBehavior._properties
 * @mixes SAPGUI.GridTOBehavior._properties
 * @mixes SAPGUI.GridTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof SAPGUI
 */
function GridTO(session, description) {
    description = description || Grid();
    var gridTO = new SapGuiBaseTO("SAPGuiGrid", session, description);
    gridTO._mergeBehavior(TableBaseOperationBehavior);
    gridTO._mergeBehavior(TableBaseBehavior);
    gridTO._mergeBehavior(WrappedItemExecutorBehavior);
    gridTO._mergeBehavior(GridTOBehavior);
    return gridTO;
}

//Consts
var firstVisibleRowWiredName = "FirstVisibleRow";
var selectionModeWiredName = "SelectionMode";

/**
 * The behaviors of GridTO
 * @memberof SAPGUI
 * @ignore
 */
var GridTOBehavior = {
    /**
     * @memberof SAPGUI.GridTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns either a specific cell or a promise of all cells in the grid (when called without arguments), all the cells in a row (when called with row only).
         * @function
         * @param {number} [row] The row index of the specific cell.
         * @param {number} [col] The column index in the row, specified by the row parameter.
         * @returns {Promise<GridCell[][] | GridCell[] | GridCell>} a promise that is fulfilled with either all the cells in the table (when called without arguments), all the cells in a row (when called with row only), or with the specified cell.
         */
        cells: function (row, column) {
            return this._cells(row, column);
        },

        /*jshint eqnull:true */
        /**
         * The array of cells of the first row visible in a scrolled area.
         * @function
         * @returns {Promise<SAPGUI.GridCell[]>} a promise that is fulfilled with the array of cells of the first row visible in a scrolled area.
         */
        firstVisibleRow: {
            wiredName: firstVisibleRowWiredName,
            getter: function () {
                return this._getROProperty(firstVisibleRowWiredName, arguments).then((function (index) {
                    if (index == null)
                        return null;
                    return this._getColumnCount().then((function (columns) {
                        return this._initRowInTable(index, columns);
                    }).bind(this));
                }).bind(this));
            }
        },

        /**
         * The possible selections in the grid.
         * @function
         * @returns {Promise<SAPGUI.GridSelectionMode>} a promise that is fulfilled with the possible selections in the grid.
         */
        selectionMode:  {
            type: 'enum',
            enumType: GridSelectionMode,
            enumName: 'GridSelectionMode',
            wiredName: selectionModeWiredName,
            getter: function () {
                return this._getROProperty(selectionModeWiredName, arguments).then(GridSelectionMode._nativeToSelection);
            }
        }
    },

    /**
     * @memberof SAPGUI.EditorTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Returns the first row in a column that contains the specified text, by column name.
         * @function
         * @param {string} text The The text to search for.
         * @param {number|string} column The name or the index of the column to search for.
         * @param {number} startFromRow The index of the row from which to start the search.
         * @returns {Promise<GridCell[]>} a promise that is fulfilled with the array of Cells or null if not found.
         */
        findRowWithCellTextInColumn: function (text, column, startFromRow) {
            return this._findRowWithCellTextInColumn(text, column, startFromRow);
        },

        /**
         * Returns all rows with the specified text in the specified column, by column index.
         * @function
         * @param {string} text The The text to search for.
         * @param {number|string} column The name or the index of the column to search for.
         * @returns {Promise<GridCell[][]>} a promise that is fulfilled with the array of array of Cells.
         */
        findAllRowsWithCellTextInColumn: function (text, column) {
            return this._findAllRowsWithCellTextInColumn(text, column);
        },

        /*jshint eqnull:true */
        /**
         * Double-clicks the specified column in the grid by column name.
         * Double-clicking selects the entire column, displays another window, or performs another application-specific action.
         * @function
         * @param {number|string} columnIndexOrName The name of the column or the column index.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        activateColumn: function (columnIndexOrName) {
            if (columnIndexOrName == null)
                throw new Error("The parameter columnIndexOrName cannot be null.");

            return this._executeWithEvents(arguments, "ActivateColumn", this._columnTransform(columnIndexOrName));
        },

        /*jshint eqnull:true */
        /**
         * Double-clicks the specified row in a grid.
         * @function
         * @param {number} rowIndex The row index.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        activateRow: function (rowIndex) {
            if (rowIndex == null)
                throw new Error("The parameter rowIndex cannot be null.");

            return this._executeWithEvents(arguments, "ActivateRow", this._rowTransform(rowIndex));
        },

        /**
         * Clears the selected rows or columns in the grid.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        clearSelection: function () {
            return this._executeWithEvents(arguments, "ClearSelection");
        },

        /**
         * Presses the ENTER key when the grid is in focus.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        pressEnter: function () {
            return this._executeWithEvents(arguments, "PressEnter");
        },

        /*jshint eqnull:true */
        /**
         * Selects the specified menu item from a context menu.
         * @function
         * @param {string} menuItemId The SAP ID for the menu item.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        selectMenuItemById: function (menuItemId) {
            if (menuItemId == null)
                throw new Error("The parameter menuItemId cannot be null.");

            return this._executeWithEvents(arguments, "SelectMenuItemById", menuItemId);
        }
    },

    _helpers: {
        /**
         * Selects or unselects the checkbox in the grid cell.
         * @param {number} rowIndex The index of the row
         * @param {string} column The column name.
         * @param {boolean} state The state of the checkbox of this cell.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        _setCheckBox: function (rowIndex, column, state) {
            return this._executeNotWrapped(arguments, "SetCheckBox", rowIndex, column, state ? "ON" : "OFF");
        },

        /**
         * @ignore
         */
        _createCell: function (rowIndex, columnIdentifier) {
            return new GridCell(this, rowIndex, columnIdentifier);
        }
    }
};

module.exports.GridTO = GridTO;
module.exports.Grid = Grid;
module.exports.GridSelectionMode = GridSelectionMode;
