// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var Convert = Core.Convert;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

var SapGuiObjectBase = require("./sapgui_object_base.js");
var SapGuiBaseDescription = SapGuiObjectBase.SapGuiBaseDescription;
var SapGuiBaseTO = SapGuiObjectBase.SapGuiBaseTO;


/**
 * Description of a SAP GUI for Windows button.
 * @memberof SAPGUI
 * @ignore
 */
var ButtonDescriptionBehaviour = {
    /**
     * The buttons's tooltip.
     * @param {string} [tooltip] When provided, this method acts as a setter and sets the tooltip value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored tooltip value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    tooltip: function (tooltip) {
        return this._simplePropertyHandler("Tooltip", tooltip);
    },

    /**
     * The name of the parent object.
     * @param {string} [containerName] When provided, this method acts as a setter and sets the containerName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored containerName value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    containerName: function (containerName) {
        return this._simplePropertyHandler("ContainerName", containerName);
    },

    /**
     * The text associated with the button.
     * @param {string} [text] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    text: function (text) {
        return this._simplePropertyHandler("Text", text);
    },

    /**
     * Indicates whether the button can accept user input.
     * @param {boolean} [isEnabled] When provided, this method acts as a setter and sets the isEnabled value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isEnabled: function (isEnabled) {
        return this._propertyHandler("Enabled", isEnabled, Convert.toBool);
    }
};

/**
 * @param {Object} [props] Initializes a Button test object using the supplied property bag.
 * @returns {Button} the description object that was initialized.
 * @constructor
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.ButtonDescriptionBehaviour
 */
function Button(props){
    var buttonDesc = new SapGuiBaseDescription("Button");
    ObjUtils.extend(buttonDesc, ButtonDescriptionBehaviour);
    buttonDesc._defineByPropertyBag(props);
    return buttonDesc;
}

/**
 * A ButtonTO object,
 * @constructor
 * @class ButtonTO
 * @extends SAPGUI.SapGuiBaseTO
 * @mixes SAPGUI.ButtonTOBehavior._properties
 * @mixes SAPGUI.ButtonTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof SAPGUI
 */
function ButtonTO(session, description) {
    description = description || Button();
    var buttonTO = new SapGuiBaseTO("SAPGuiButton", session, description);
    buttonTO._mergeBehavior(WaitUntilEnabledBehavior);
    buttonTO._mergeBehavior(ButtonTOBehavior);
    return buttonTO;
}

/**
 * The behaviors of the ButtonTO object
 * @memberof SAPGUI
 * @ignore
 */
var ButtonTOBehavior = {
    /**
     * @memberof SAPGUI.ButtonTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The name of the parent object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the parent object.
         */
        containerName: {
            wiredName: "ContainerName"
        },

        /**
         * The text associated with the button.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text associated with the button.
         */
        text: {
            wiredName: "Text"
        },

        /**
         * The button's tooltip text.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the button's tooltip text.
         */
        tooltip: {
            wiredName: "Tooltip"
        },

        /**
         * Indicates whether user can change the button state.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the user can change the button state.
         */
        isEnabled: {
            wiredName: "Enabled"
        }
    },

    /**
     * @memberof SAPGUI.ButtonTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Clicks the button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the click operation ends.
         */
        click: function () {
            return this._executeWithEvents(arguments, "Click");
        },

        /**
         * Sets focus on the button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the setFocus operation ends.
         */
        setFocus: function () {
            return this._executeWithEvents(arguments, "SetFocus");
        }
    }
};

module.exports.Button = Button;
module.exports.ButtonTO = ButtonTO;