// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;

var SapGuiObjectBase = require("./sapgui_object_base.js");
var SapGuiBaseDescription = SapGuiObjectBase.SapGuiBaseDescription;
var SapGuiBaseTO = SapGuiObjectBase.SapGuiBaseTO;

var CheckedBehavior = require("./checked_behavior.js");
var CheckedDescriptionBehaviour = CheckedBehavior.CheckedDescriptionBehaviour;
var CheckedTOBehavior = CheckedBehavior.CheckedTOBehavior;

/**
 * Description of a SAP GUI for Windows radio button.
 * @param {Object} [props] Initializes a RadioButton test object using the supplied property bag.
 * @returns {RadioButton} the description object that was initialized.
 * @constructor
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.CheckedDescriptionBehaviour
 */
function RadioButton(props) {
    var radioButtonDesc = new SapGuiBaseDescription("RadioButton");
    ObjUtils.extend(radioButtonDesc, CheckedDescriptionBehaviour);
    radioButtonDesc._defineByPropertyBag(props);
    return radioButtonDesc;
}

/**
 * A RadioButtonTO object,
 * @constructor
 * @class RadioButtonTO
 * @extends SAPGUI.SapGuiBaseTO
 * @mixes SAPGUI.CheckedTOBehavior._properties
 * @mixes SAPGUI.CheckedTOBehavior._methods
 * @mixes SAPGUI.RadioButtonTOBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof SAPGUI
 */
function RadioButtonTO(session, description) {
    description = description || RadioButton();
    var radioButtonTO = new SapGuiBaseTO("SAPGuiRadioButton", session, description);
    radioButtonTO._mergeBehavior(CheckedTOBehavior);
    radioButtonTO._mergeBehavior(RadioButtonTOBehavior);
    return radioButtonTO;
}

/**
 * The behaviors of the RadioButton object
 * @memberof SAPGUI
 * @ignore
 */
var RadioButtonTOBehavior = {
    /**
     * @memberof SAPGUI.RadioButtonTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Selects the radio button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        set: function () {
            return this._executeWithEvents(arguments, "Set");
        }
    }
};

module.exports.RadioButton = RadioButton;
module.exports.RadioButtonTO = RadioButtonTO;
