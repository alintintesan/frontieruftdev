// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/24/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var Convert = Core.Convert;
var ScrollOrientation = Core.ScrollOrientation;
var WindowObjectBaseBehavior = Core.WindowObjectBaseBehavior;

var SapGuiObjectBase = require("./sapgui_object_base.js");
var SapGuiBaseDescription = SapGuiObjectBase.SapGuiBaseDescription;
var SapGuiBaseTO = SapGuiObjectBase.SapGuiBaseTO;
var SapFunctionKey = require("./sap_function_key.js").SapFunctionKey;
var PropertyFlatter = Core.PropertyFlatter;
var groupedPropertyWiredNamesToSimple = Core.groupedPropertyWiredNamesToSimple;

var WorkingPaneSizeToNativeKeysProps = {
    width: {wiredName: "WorkingPaneWidth"},
    height: {wiredName: "WorkingPaneHeight"}
};

var WorkingPaneSizeToNativeKeys = groupedPropertyWiredNamesToSimple(WorkingPaneSizeToNativeKeysProps);

/**
 * Description of a window in a SAP GUI for Windows application.
 * @memberof SAPGUI
 * @ignore
 */
var WindowDescriptionBehaviour = {    
    /**
     * The text associated with the window. 
     * @param {string} [text] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    text: function (text) {
        return this._simplePropertyHandler("Text", text);
    },
    
    /**
     * The window's working pane size in character metric. The working pane is the area between the toolbar and the status bar.
     * @param {Size} [workingPaneSize] When provided, this method acts as a setter and sets the workingPaneSize value.
     * @returns {Size | Description} If no parameter is provided, the method acts as a getter and returns 
     * the current stored workingPaneSize value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    workingPaneSize: function(workingPaneSize) {
        return this._propertyFlatterHandler("WorkingPaneSize", PropertyFlatter, workingPaneSize, WorkingPaneSizeToNativeKeys);
    },
    
    /**
     * Indicates whether the window is minimized.
     * @param {boolean} [isMinimized] When provided, this method acts as a setter and sets the isMinimized value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isMinimized value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isMinimized: function (isMinimized) {
        return this._propertyHandler("Iconic", isMinimized, Convert.toBool);
    },
    
    /**
     * The transaction the user is currently executing.
     * @param {string} [transaction] When provided, this method acts as a setter and sets the transaction value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored transaction value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    transaction: function (transaction) {
        return this._simplePropertyHandler("Transaction", transaction);
    },
     
    /**
     * The number of the currently displayed screen.
     * @param {number} [screenNumber] When provided, this method acts as a setter and sets the screenNumber value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored screenNumber value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    screenNumber: function (screenNumber) {
        return this._propertyHandler("ScreenNumber", screenNumber, Convert.toNumber);
    },
    
    /**
     * The name of the SAP source program that is currently executing.
     * @param {string} [program] When provided, this method acts as a setter and sets the program value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored program value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    program: function (program) {
        return this._simplePropertyHandler("Program", program);
    }
};

/**
 * @param {Object} [props] Initializes a Window test object using the supplied property bag.
 * @returns {Window} the description object that was initialized.
 * @constructor
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseDescription
 * @mixes SAPGUI.WindowDescriptionBehaviour
 */
function Window(props){
    var windowDesc = new SapGuiBaseDescription("Window");
    ObjUtils.extend(windowDesc, WindowDescriptionBehaviour);
    windowDesc.workingPaneSize({});
    windowDesc._defineByPropertyBag(props);
    return windowDesc;
}


/**
 * A WindowTO object
 * @constructor
 * @class WindowTO
 * @memberof SAPGUI
 * @extends SAPGUI.SapGuiBaseTO
 * @mixes WindowObjectBaseBehavior._methods
 * @mixes SAPGUI.WindowTOBehavior._properties
 * @mixes SAPGUI.WindowTOBehavior._methods
 */
function WindowTO(session, description) {
    description = description || Window();
    var windowTO = new SapGuiBaseTO("SAPGuiWindow", session, description);
    ObjUtils.extend(windowTO, WindowObjectBaseBehavior);
    windowTO._mergeBehavior(WindowTOBehavior);
    return windowTO;    
}

/**
 * The behaviors of the WindowTO object
 * A window or dialog box containing objects in a SAP GUI for Windows application.
 * @memberof SAPGUI
 * @ignore
 */
var WindowTOBehavior = {
    /**
     * @memberof SAPGUI.WindowTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The text associated with the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text associated with the object.
         * @memberof SAPGUI.WindowTO#
         */
        text: {
            wiredName: "Text"
        },

        /**
         * The size of the working pane in character metric. The working pane is the area between the toolbar and the status bar.
         * @function
         * @returns {Promise<Size>} a promise that is fulfilled with the object's size.
         * @memberof SAPGUI.WindowTO#
         */
        workingPaneSize: {
            type: 'grouped',
            properties: WorkingPaneSizeToNativeKeysProps,
            getter: function () {
                return this._getROProperties(WorkingPaneSizeToNativeKeys.width, WorkingPaneSizeToNativeKeys.height).then(function (res) {
                    return {
                        width: res[0],
                        height: res[1]
                    };
                });
            }
        },

        /**
         * Indicates whether the window is minimized.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the window is minimized.
         * @memberof SAPGUI.WindowTO#
         */
        isMinimized: {
            wiredName:  "Iconic"
        },

        /**
         * The transaction the user is executing.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the transaction the user is executing.
         * @memberof SAPGUI.WindowTO#
         */
        transaction: {
            wiredName: "Transaction"
        },

        /**
         * The number of the displayed screen.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the number of the displayed screen.
         * @memberof SAPGUI.WindowTO#
         */
        screenNumber: {
            type: "uint",
            wiredName: "ScreenNumber"
        },

        /**
         * The name of the SAP source program that is executing.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the SAP source program that is executing.
         * @memberof SAPGUI.WindowTO#
         */
        program: {
            wiredName: "Program"
        }
    },

    /**
     * @memberof SAPGUI.WindowTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the position of the the specified scroll bar.
         * @function
         * @param {ScrollOrientation} orientation The scroll bar to move.
         * @param {number} toPos The 0-based position to move the scroll bar to, in pixels
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @memberof SAPGUI.WindowTO#
         */
        scroll: function (orientation, toPos) {
            if (orientation == null) {
                throw new Error("The orientation of scroll bar cannot be null.");
            }
            if (toPos == null) {
                throw new Error("The position of scroll bar cannot be null.");
            }
            var methodName = (orientation.toLowerCase() == ScrollOrientation.horizontalScroll.toLowerCase()) ? "HorizontalScrollbarPosition" : "VerticalScrollbarPosition";
            return this._executeWithEvents(arguments, methodName, Convert.toNumber(toPos));
        },

        /**
         * Activates this window.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @memberof SAPGUI.WindowTO#
         */
        activate: function () {
            return this._executeWithEvents(arguments, "Activate");
        },

        /*jshint eqnull:true */
        /**
         * Selects an item from a context menu.
         * @function
         * @param {string} menuItemId The item ID.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @memberof SAPGUI.WindowTO#
         */
        selectMenuItemById: function (menuItemId) {
            if (menuItemId == null)
                throw new Error("The menu item ID cannot be null.");
            return this._executeWithEvents(arguments, "SelectMenuItemById", menuItemId);
        },

        /*jshint eqnull:true */
        /**
         * Presses a non-printing key or key combination.
         * @function
         * @param {SAPGUI.SapFunctionKey} key The key or key-combination.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @memberof SAPGUI.WindowTO#
         */
        sendKey: function (key) {
            if (key == null)
                throw new Error("The key cannot be null.");
            return this._executeWithEvents(arguments, "SendKey", SapFunctionKey._sapFunctionKeyToNative(key));
        },

        /**
         * Does not support
         * @function
         * @ignore
         */
        move: function (pointOrX, y) {
            throw new Error("The move method is not supported for this test object.");
        }
    }
};

module.exports.Window = Window;
module.exports.WindowTO = WindowTO;
