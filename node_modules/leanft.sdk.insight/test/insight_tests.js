// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 1/25/2016.
 * Unittests for the insight test object and the insight description.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var MouseButton = Core.MouseButton;
var Position = Core.Position;

describe("Insight description unit tests",function() {
    var InsightDesc = require("../lib/insight.js").Insight;
    var insightDescriptionUnderTest;

    beforeEach(function () {
        insightDescriptionUnderTest = InsightDesc({});
    });

    describe("image method",function() {
        it("should add 'ImageSrcBase64Stream' to _properties when value is given",function(){
            insightDescriptionUnderTest.image("Base64Stream string");
            assert.strictEqual(insightDescriptionUnderTest._properties["ImageSrcBase64Stream"], "Base64Stream string");
        });

        it("should add 'ImageSrcBase64Stream' to _properties when value is given using property bag",function(){
            insightDescriptionUnderTest = InsightDesc({
                image: "Base64Stream string"
            });
            assert.strictEqual(insightDescriptionUnderTest._properties["ImageSrcBase64Stream"], "Base64Stream string");
        });

        it("should return this - builder pattern when value is given",function(){
            var result = insightDescriptionUnderTest.image("Base64Stream string");
            assert.strictEqual(result, insightDescriptionUnderTest);
        });

        it("should remove 'ImageSrcBase64Stream' from _properties when value is null",function(){
            insightDescriptionUnderTest._properties["ImageSrcBase64Stream"] = "Base64Stream string";
            insightDescriptionUnderTest.image(null);
            assert(!("ImageSrcBase64Stream" in insightDescriptionUnderTest._properties));
        });

        it("should return the value of 'ImageSrcBase64Stream' from _properties when value is not given",function(){
            insightDescriptionUnderTest._properties["ImageSrcBase64Stream"] = "Base64Stream string";
            var imageBase64String = insightDescriptionUnderTest.image();
            assert.strictEqual(imageBase64String, "Base64Stream string");
        });
    });

    describe("similarity method",function() {
        it("should add 'similarity' to _properties when value is given",function(){
            insightDescriptionUnderTest.similarity(10);
            assert.strictEqual(insightDescriptionUnderTest._properties["similarity"], 10);
        });

        it("should add 'similarity' to _properties when value is given using property bag",function(){
            insightDescriptionUnderTest = InsightDesc({
                similarity: 10
            });
            assert.strictEqual(insightDescriptionUnderTest._properties["similarity"], 10);
        });

        it("should add 'similarity' to _properties when numeric string value is given using property bag",function(){
            insightDescriptionUnderTest = InsightDesc({
                similarity: "10"
            });
            assert.strictEqual(insightDescriptionUnderTest._properties["similarity"], 10);
        });

        it("should throw when 'similarity' _property is set with non numeric string value",function(){
            assert.throws(function() {
                insightDescriptionUnderTest = InsightDesc({
                    similarity: "10a"
                });
            });
        });

        it("should return this - builder pattern when value is given",function(){
            var result = insightDescriptionUnderTest.similarity(10);
            assert.strictEqual(result, insightDescriptionUnderTest);
        });

        it("should remove 'similarity' from _properties when value is null",function(){
            insightDescriptionUnderTest._properties["similarity"] = 10;
            insightDescriptionUnderTest.similarity(null);
            assert(!("similarity" in insightDescriptionUnderTest._properties));
        });

        it("should return the value of 'similarity' from _properties when value is not given",function(){
            insightDescriptionUnderTest._properties["similarity"] = 10;
            var similarityValue = insightDescriptionUnderTest.similarity();
            assert.strictEqual(similarityValue, 10);
        });
    });

});

describe("Insight test object unit tests",function(){
    var InsightTO = require("../lib/insight.js").InsightTO;
    var insightTestObjectUnderTest = null;

    beforeEach(function() {
        insightTestObjectUnderTest = new InsightTO();
        sinon.stub(insightTestObjectUnderTest, "_executeWithEvents");
    });

    afterEach(function() {

    });

    describe("clickSpecial",function(){
        it("should call execute command with 'clickSpecial' and pass the given arguments",function(){
            var clickSpeciaLocationlArgs = {offset:{x:10,y:20},anchor:Position.topLeft};
            insightTestObjectUnderTest.clickSpecial(MouseButton.right, clickSpeciaLocationlArgs);
            sinon.assert.calledOnce(insightTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(insightTestObjectUnderTest._executeWithEvents, sinon.match({0: MouseButton.right, 1: clickSpeciaLocationlArgs}), "ClickSpecial", {Type: "Location",Offset:{Type: "Point",X:10,Y:20},Anchor:0}, 1);
        });

        it("should execute command 'clickSpecial' with default button and default point",function(){
            insightTestObjectUnderTest.clickSpecial();
            sinon.assert.calledOnce(insightTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(insightTestObjectUnderTest._executeWithEvents, sinon.match({}), "ClickSpecial", -9999, -9999, 0);
        });
    });

    describe("hover",function(){
        it("should call execute command with 'hover' and pass the given location argument",function(){
            var hoverArgs = {offset:{x:10,y:20},anchor:Position.topLeft};
            insightTestObjectUnderTest.hover(hoverArgs);
            sinon.assert.calledOnce(insightTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(insightTestObjectUnderTest._executeWithEvents, sinon.match({0: hoverArgs}), "Hover", {Type: "Location",Offset:{Type: "Point",X:10,Y:20},Anchor:0});
        });

        it("should execute command 'hover' with default location",function(){
            insightTestObjectUnderTest.hover();

            sinon.assert.calledOnce(insightTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(insightTestObjectUnderTest._executeWithEvents, sinon.match({}), "Hover", {Type: "Location",Offset:{Type: "Point",X:0,Y:0},Anchor:2});
        });
    });

    describe("longClick",function(){
        it("should call execute command with 'longClick' and pass the given arguments",function(){
            var longClickLocationArgs = {offset:{x:10,y:20},anchor:Position.topLeft};

            insightTestObjectUnderTest.longClick(2, longClickLocationArgs);
            sinon.assert.calledOnce(insightTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(insightTestObjectUnderTest._executeWithEvents, sinon.match({0: 2, 1: longClickLocationArgs}), "LongClick", 2, {Type: "Location",Offset:{Type: "Point",X:10,Y:20},Anchor:0});
        });

        it("should execute command 'longClick' with default duration  and default location",function(){
            insightTestObjectUnderTest.longClick();
            sinon.assert.calledOnce(insightTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(insightTestObjectUnderTest._executeWithEvents, sinon.match({}),"LongClick",1.1, {Type: "Location",Offset:{Type: "Point",X:0,Y:0},Anchor:2});
        });
    });

    describe("sendKeys", function () {
        it("assert sendKeys method is supported", function () {
            assert('sendKeys' in insightTestObjectUnderTest);
        });
    });

    describe("setSecure", function() {
        it("assert setSecure method is supported",function(){
            assert('setSecure' in insightTestObjectUnderTest);
        });
    });

    describe("setSecure", function() {
        it("should execute command 'setSecure' with correct args",function(){
            insightTestObjectUnderTest.setSecure("encodedText");
            sinon.assert.calledOnce(insightTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(insightTestObjectUnderTest._executeWithEvents, sinon.match({0: "encodedText"}),"TypeSecure", "encodedText");
        });
    })

});