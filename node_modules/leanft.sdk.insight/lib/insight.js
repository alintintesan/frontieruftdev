// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 01/02/2016.
 * This file contains the Insight test object for Insight's technology including the Insight description.
 */

var Core = require("leanft.sdk.core");
var TestObjectBase = Core.TestObjectBase;
var DescriptionBase = Core.DescriptionBase;
var ObjUtils = Core.ObjectUtils;
var ClickBehavior = Core.ClickBehavior;
var LocationInfoProvider = Core.LocationInfoProvider;
var DragAndDropBehavior = Core.DragAndDropBehavior;
var SendKeysBehavior = Core.SendKeysBehavior;
var Convert = Core.Convert;
var Location = Core.Location;
var MouseButton = Core.MouseButton;

/**
 * Insight namespace
 * @namespace Insight
 */


/**
 * The description of an Insight test object.
 * @param {Object} [props] Initializes an insight test object using the supplied property bag.
 * @returns {Object} the description object that was initialized.
 * @constructor
 * @memberof Insight
 */
function Insight(props){
    var insightDesc = new InsightDescription(props);
    insightDesc._defineByPropertyBag(props);

    return insightDesc;
}

function InsightDescription(props){
    this._init({
        technology: "Insight",
        leanftType: "Insight"
    });
}

ObjUtils.inherit(InsightDescription,DescriptionBase,{
    /**
     * The Base64 string representing the source image for this Insight test object.
     * @param {string} [base64ImageString] When a Base64 string representation of an image is provided, this method acts as a setter and sets the image property of the description.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current Base64 string representation of the image property;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Insight.Insight#
     */
    image: function(base64ImageString){
        return this._propertyHandler("ImageSrcBase64Stream", base64ImageString);
    },

    /*jshint eqnull:true */
    /**
     * A percentage value that specifies how similar an object in the AUT must be to this Insight object's source image in order to be considered a match. Possible values: 0 - 100.
     * @param {number} [similarityValue] When provided, this method acts as a setter and sets the similarity value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored similarity value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Insight.Insight#
     */
    similarity: function(similarityValue){
        return this._propertyHandler("similarity", similarityValue, function(similarity) {
            similarity = Convert.toNumber(similarity);
            if (similarity < 0 || similarity > 100)
                throw new Error("similarityValue value must be between 0 and 100");
            return similarity;
        });
    }
});

/**
 * An Insight object.
 * @class InsightTO
 * @memberof Insight
 * @extends TestObjectBase
 * @mixes LocationInfoProvider._properties
 * @mixes ClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes SendKeysBehavior._methods
 */

/**
 * Constructor method that is called by the factory.
 * @param {Session} session The session to which the constructed object belongs.
 * @param {Description} description The description of the test object as passed to $ method of the parent.
 * @returns {InsightTO} the test object that contains all the functionality of the Insight test object.
 * @constructor
 * @private
 */

function InsightTO(session,description){
    description = description || Insight();
    this._init("InsightObject",session,description);
    this._mergeBehavior(LocationInfoProvider);
    this._mergeBehavior(ClickBehavior);
    this._mergeBehavior(DragAndDropBehavior);
    this._mergeBehavior(SendKeysBehavior);
}

ObjUtils.inherit(InsightTO, TestObjectBase, {
    /*jshint eqnull:true */
    /**
     * Clicks this object, without first bringing its parent into focus, using the definitions from the supplied args object.
     * If you do not provide the args object, the clickSpecial operation is performed using the left mouse button.
     * @param {MouseButton} [button = MouseButton.left] The mouse button to use for the clickSpecial operation.
     * @param {Object} [location] The location details for the clickSpecial operation.
     * @param {Position} [location.anchor = Position.center] The position within the object from which the offset is taken.
     * @param {Object} [location.offset] The offset from the anchor position.
     * @param {number} [location.offset.x = 0] The x-coordinate of the offset.
     * @param {number} [location.offset.y = 0] The y-coordinate of the offset.
     * @returns {Promise<void>} a promise that is fulfilled when the clickSpecial operation ends.
     * @memberof Insight.InsightTO#
     */
    clickSpecial: function(button, location) {
        var buttonToUse = button == null ? MouseButton.left : button;
        if(location == null) {
            return this._executeWithEvents(arguments, "ClickSpecial", -9999, -9999, MouseButton._convert(buttonToUse));
        } else {
            return this._executeWithEvents(arguments, "ClickSpecial", Location(location), MouseButton._convert(buttonToUse));
        }
    },

    /**
     * Places the mouse pointer on the specified location in this object.
     * @param {Object} [location] The location details for the hover operation.
     * @param {Position} [location.anchor = Position.center] The position within the object from which the offset is taken.
     * @param {Object} [location.offset] The offset from the anchor position.
     * @param {number} [location.offset.x = 0] The x-coordinate of the offset.
     * @param {number} [location.offset.y = 0] The y-coordinate of the offset.
     * @returns {Promise<void>} a promise that is fulfilled when the hover operation ends.
     * @memberof Insight.InsightTO#
     */
    hover: function(location) {
        return this._executeWithEvents(arguments, "Hover", Location(location));
    },

    /*jshint eqnull:true */
    /**
     * Presses and holds the left mouse button on the specified point inside this object for the specified number of seconds.
     * @param {number} [duration = 1.1] The number of seconds to hold the mouse button. Default: 1.1 seconds.
     * @param {Object} [location] The location details for the longClick operation.
     * @param {Position} [location.anchor = Position.center] The position within the object from which the offset is taken.
     * @param {Object} [location.offset] The offset from the anchor position.
     * @param {number} [location.offset.x = 0] The x-coordinate of the offset.
     * @param {number} [location.offset.y = 0] The y-coordinate of the offset.
     * @returns {Promise<void>} a promise that is fulfilled when the longClick operation ends.
     * @memberof Insight.InsightTO#
     */
    longClick: function(duration, location){
        if (duration == null)
            duration = 1.1;

        duration = Convert.toNumber(duration);

        return this._executeWithEvents(arguments, "LongClick", duration, Location(location));
    },

    /*jshint eqnull:true */
    /**
     * Sets the encoded value of the editable field.
     * Note: Generate the encoded value using the Password Encoder utility, available from the UFT Developer > Tools menu in your IDE or from the Windows Start menu.
     * Note: The SetSecure method enables you to hide passwords displayed on the screen while running or editing a UFT Developer test, but it is not intended to be a secure way to protect password information.
     * @param {string} encodedText the encoded text to enter in this edit box.
     * @returns {Promise<void>} that will be fulfilled after the encoded value of this edit box had been set.
     * @memberof Insight.InsightTO#
     */
    setSecure: function(encodedText){
        return this._executeWithEvents(arguments, "TypeSecure", encodedText);
    }

});

module.exports.InsightTO = InsightTO;
module.exports.Insight = Insight;