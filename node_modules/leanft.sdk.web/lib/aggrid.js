// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 19/08/2018.
 * This file contains the definition of the AgGrid test object and the description.
 */

var ObjUtils = require("leanft.sdk.core").ObjectUtils;
var ClickBehavior = require("leanft.sdk.core").ClickBehavior;
var DragAndDropBehavior = require("leanft.sdk.core").DragAndDropBehavior;
var ExecuteItemsWithEventsBehavior = require("leanft.sdk.core").ExecuteItemsWithEventsBehavior;
var WebBase = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var WebElement = require("./webelement.js");
var TableTestObjectBehavior = require("./table.js").TableTestObjectBehavior;
var GridBaseDescriptionBehavior = require("./grid_base.js").GridBaseDescriptionBehavior;
var GridBaseTOBehavior = require("./grid_base.js").GridBaseTOBehavior;

/**
 * The description of a Web AgGrid test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {AgGrid} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.WebElementDescriptionBehaviour
 * @mixes Web.GridBaseDescriptionBehavior
 */
function AgGrid(props) {

    var tableDes = new WebBaseDesc("AgGrid"); // leanFTType

    ObjUtils.extend(tableDes, WebElement.WebElementDescriptionBehaviour);
    ObjUtils.extend(tableDes, GridBaseDescriptionBehavior);
    tableDes._defineByPropertyBag(props);

    return tableDes;
}

//Consts
var findRowWiredName = "GetRowWithCellText";

/**
 * A Web AgGrid containing a variable number of rows and columns.
 * @class AgGridTO
 * @memberof Web
 * @constructor
 * @extends Web.WebBaseTestObject
 * @mixes Web.WebElementTOBehavior._properties
 * @mixes Web.WebElementTOBehavior._methods
 * @mixes ClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes Web.TableTestObjectBehavior._properties
 * @mixes Web.TableTestObjectBehavior._methods
 * @mixes Web.GridBaseTOBehavior._properties
 * @mixes Web.GridBaseTOBehavior._methods
 * @mixes Web.AgGridTOBehavior._methods
 */
function AgGridTO(session, description) {
    description = description || AgGrid();
    var tableTO = new WebBase("WebAgGrid", session, description); // native class

    tableTO._mergeBehavior(ClickBehavior);
    tableTO._mergeBehavior(DragAndDropBehavior);
    tableTO._mergeBehavior(WebElement.WebElementTOBehavior);
    tableTO._mergeBehavior(TableTestObjectBehavior);
    tableTO._mergeBehavior(GridBaseTOBehavior);
    tableTO._mergeBehavior(AgGridTOBehavior);
    tableTO._mergeBehavior(ExecuteItemsWithEventsBehavior);

    return tableTO;
}

/**
 * @memberof Web
 * @ignore
 */
var AgGridTOBehavior = {

    /**
     * @memberof Web.AgGridTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Finds the first row with the specified text in the specified column, starting from the specified row.
         * @param {string} cellText Text to find.
         * @param {number|string} column The 0-based column index or column header.
         * @param {number} [startFromRow = 0] The index from which to start the search.
         * @returns {Promise<TableCell[]>} a promise that is fulfilled either with an array of cells for the requested row, or fulfilled with null if no match was found.
         * @function
         */
        findRow: {
            wiredName: findRowWiredName,
            exec: function (cellText, column, startFromRow) {
                if (column == null) {
                    throw new Error("ArgumentException: column is required.");
                }

                return this._findRow(cellText, column, startFromRow);
            }
        }
    }
};

module.exports.AgGrid = AgGrid;
module.exports.AgGridTO = AgGridTO;
