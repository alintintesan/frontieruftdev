// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 18/10/2015.
 * This file contains all the functionality that is needed for the Page test object including
 * TestObject constructor, description constructor , and appropiate behaviors.
 *
 */

var Core = require("leanft.sdk.core");
var TestObjectBase = Core.TestObjectBase;
var DescriptionBase = Core.DescriptionBase;
var NativeObjectBehavior = Core.NativeObjectBehavior;
var ObjUtils = require("leanft.sdk.core").ObjectUtils;
var LocationInfoProvider = require("leanft.sdk.core/lib/location_info_provider.js").LocationInfoProvider;
var WebDescriberBehavior = require("./web_testobject_base.js").WebDescriberBehavior;
var PropertyFlatter = Core.PropertyFlatter;
var AbsLocationToNative = Core.AbsLocationToNative;
var AbsLocationToNativeProps = Core.AbsLocationToNativeProps;
var SizeToNativeKeys = Core.SizeToNativeKeys;
var SizeToNativeKeysProps = Core.SizeToNativeKeysProps;
var FrameTOBehavior = require("./frame.js").FrameTOBehavior;
var FrameDescriptionBehavior = require("./frame.js").FrameDescriptionBehavior;

/**
 * The description of a Web Page test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {Page} the description object that was initialized.
 * @class Page
 * @memberof Web
 * @mixes Web.FrameDescriptionBehavior
 * @extends Web.PageDescription
 * @mixes Web.PageDescription
 * @mixes DescriptionBase
 */
function Page(props){
    var pageDesc = new PageDescription();
    ObjUtils.extend(pageDesc, FrameDescriptionBehavior);
    pageDesc._defineByPropertyBag(props);

    return pageDesc;
}

/**
 * @class PageDescription
 * @memberof Web
 * @ignore
 */
function PageDescription(){
    this._init({
        technology: "Web",
        leanftType: "Page"
    });

    //init grouped properties
    this.absoluteLocation({});
    this.size({});
}

/**
 * @ignore
 */
ObjUtils.inherit(PageDescription,DescriptionBase, {
    /**
     * The browser's title.
     * @param {string} [title] When provided, this method acts as a setter and sets the title to the specified value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored title value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.PageDescription
     */
    title: function (title) {
        return this._propertyHandler("title", title);
    },
    /**
     * The object's absolute coordinates relative to the screen (in pixels). 0,0 is always the top-left corner of the (primary) monitor.
     * @param {Point} [location] When provided, this method acts as a setter and sets the absoluteLocation value.
     * @returns {Point | Description} If no parameter is provided, the method acts as a getter and returns the absoluteLocation value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.PageDescription
     */
    absoluteLocation: function(location) {
        return this._propertyFlatterHandler("AbsoluteLocation", PropertyFlatter, location, AbsLocationToNative);
    },
    /**
     * The object's size (in pixels).
     * @param {Size} [size] When provided, this method acts as a setter and sets the size value.
     * @returns {Size | Description} If no parameter is provided, the method acts as a getter and returns the current stored size value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.PageDescription
     */
    size: function(size) {
        return this._propertyFlatterHandler("Size", PropertyFlatter, size, SizeToNativeKeys);
    }
});

/**
 * An HTML page.
 * @class PageTO
 * @memberof Web
 * @constructor
 * @extends TestObjectBase
 * @mixes Web.WebDescriberBehavior._methods
 * @mixes Web.FrameTOBehavior._properties
 * @mixes Web.FrameTOBehavior._methods
 * @mixes NativeObjectBehavior._methods
 * @mixes PageTOBehavior._properties
 */
function PageTO(session, description){
    description = description || Page();
    this._init("Page",session,description);
    this._genericDesc = require("./webelement.js").WebElement;

    this._mergeBehavior(WebDescriberBehavior);
    this._mergeBehavior(FrameTOBehavior);
    this._mergeBehavior(NativeObjectBehavior);
    this._mergeBehavior(PageTOBehavior);

    delete this.location;
}

/**
 * @ignore
 * @memberof Web
 */
var PageTOBehavior = {
    /**
     * @ignore
     * @memberof Web.PageTOBehavior
     */
    _properties: {
        /**
         * Returns the page's title attribute.
         * @returns {Promise<string>} a promise this is fulfilled with the page's title attribute.
         * @function
         * @memberof Web.PageTO#
         */
        title: {

        },

        /**
         * Returns the object's absolute coordinates relative to the screen (in pixels), format: {x,y}. <br/>
         * Remark: 0,0 is always the top-left corner of the (primary) monitor.
         * @returns {Promise<Point>} a promise that is fulfilled when the object's absolute coordinates are returned.
         * @function
         * @memberof Web.PageTO#
         */
        absoluteLocation: {
            type: 'grouped',
            properties: AbsLocationToNativeProps,
            getter: function () {
                var propNames = AbsLocationToNative;
                return this._getROProperties(propNames.x, propNames.y).then(function (res) {
                    return {
                        x: res[0],
                        y: res[1]
                    };
                });
            }
        },
        /**
         * Returns the object's size (in pixels).
         * @returns {Promise<Size>} a promise that is fulfilled when the object's size is returned.
         * @function
         * @memberof Web.PageTO#
         */
        size: {
            type: 'grouped',
            properties: SizeToNativeKeysProps,
            getter: function () {
                var propNames = SizeToNativeKeys;
                return this._getROProperties(propNames.width, propNames.height).then(function (res) {
                    return {
                        width: res[0],
                        height: res[1]
                    };
                });
            }
        },
    },

    _methods: {
        _canParticipateInOptimizedPath: function() {
            var desc = this._description._toJSON();

            return ( this._parent && this._parent._description &&
                this._parent._description.leanFTType.leanftType !== "Browser"
            ) ||
                ( desc.Index !== null &&
                    (desc.Properties && Object.keys(desc.Properties).length !== 0)
                );
        }
    }
};

ObjUtils.inherit(PageTO,TestObjectBase, {
});

module.exports.Page = Page;
module.exports.PageTO = PageTO;
