// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/29/2015.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var ClickBehavior = Core.ClickBehavior;
var DragAndDropBehavior = Core.DragAndDropBehavior;
var WebBase = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var WebElement = require("./webelement.js");
var Convert = Core.Convert;
var IsEnabledBehavior = require("./helper_behaviors.js").IsEnabledBehavior;
var HelperFuncs = require("./helper_behaviors.js").HelperFuncs;
var FormFieldBehavior = require("./helper_behaviors.js").FormFieldBehavior;
var IsEnabledTOBehavior = require("./helper_behaviors.js").IsEnabledTOBehavior;

/**
 * @memberof Web
 * @ignore
 */
var CheckBoxDescriptionBehavior = {
    /**
     * Indicates whether the check box is checked. Null if indeterminate.
     * @param {boolean} [checked] When provided, this method acts as a setter and sets the isChecked value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isChecked value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isChecked: function(checked){ // bool
        return this._propertyHandler("checked", checked, HelperFuncs.boolToInt, HelperFuncs.intToBool, Convert.toBool);
    }
};


/**
 * The description of a Web CheckBox test object.
 * @param {Object} [props] Initializes a WebElement test object using the supplied property bag.
 * @returns {CheckBox} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.IsEnabledBehavior
 * @mixes Web.WebElementDescriptionBehaviour
 * @mixes Web.FormFieldBehavior
 * @mixes Web.CheckBoxDescriptionBehavior
 */
function CheckBox(props) {

    var checkBoxDes = new WebBaseDesc("CheckBox");

    ObjUtils.extend(checkBoxDes, IsEnabledBehavior);
    ObjUtils.extend(checkBoxDes, WebElement.WebElementDescriptionBehaviour);
    ObjUtils.extend(checkBoxDes, FormFieldBehavior);
    ObjUtils.extend(checkBoxDes, CheckBoxDescriptionBehavior);

    checkBoxDes._defineByPropertyBag(props);

    return checkBoxDes;
}


/**
 * A Web check box with an ON or OFF state.
 * @constructor
 * @memberof Web
 * @class WebElementTO
 * @extends Web.WebBaseTestObject
 * @mixes Web.WebElementTOBehavior._properties
 * @mixes Web.WebElementTOBehavior._methods
 * @mixes ClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes Web.CheckBoxTOBehavior._properties
 * @mixes Web.CheckBoxTOBehavior._methods
 * @mixes Web.IsEnabledTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 */
function CheckBoxTO(session, description) {
    description = description || CheckBox();
    var checkBoxTO = new WebBase("WebCheckBox", session, description);

    checkBoxTO._mergeBehavior(ClickBehavior);
    checkBoxTO._mergeBehavior(DragAndDropBehavior);
    checkBoxTO._mergeBehavior(IsEnabledTOBehavior);
    checkBoxTO._mergeBehavior(WebElement.WebElementTOBehavior);
    checkBoxTO._mergeBehavior(CheckBoxTOBehavior);

    return checkBoxTO;
}

//Consts
var checkedWiredName = "checked";
var setWiredName = "Set";

/**
 * @memberof Web
 * @ignore
 */
var CheckBoxTOBehavior = {
    /**
     * @memberof Web.CheckBoxTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the type of object as defined in the HTML input tag.
         * @returns {Promise<string>} a promise this is fulfilled with the type of object as defined in the HTML input tag.
         * @function
         */
        type: {

        },
        /**
         * Indicates whether the check box is checked. Null if indeterminate.
         * @returns {Promise<boolean>} a promise this is fulfilled with an indication of whether the check box is checked. Null if indeterminate.
         * @function
         */
        isChecked: {
            wiredName: checkedWiredName,
            getter: function () {
                return this._getROProperty(checkedWiredName, arguments).then(HelperFuncs.intToBool);
            }
        }
    },

    /**
     * @memberof Web.CheckBoxTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Sets the state of this check box.
         * @param {boolean} state Indicates whether this check box is checked.
         * @returns {Promise<void>} a promise this is fulfilled when the operation was performed.
         * @function
         */
        set: {
            wiredName: setWiredName,
            exec: function (state) { // bool
                state = Convert.toBool(state) ? "On" : "Off";

                return this._executeWithEvents(arguments, setWiredName, state);
            }
        }
    }
};

module.exports.CheckBox = CheckBox;
module.exports.CheckBoxTO = CheckBoxTO;
module.exports.CheckBoxDescriptionBehavior = CheckBoxDescriptionBehavior;
module.exports.CheckBoxTOBehavior = CheckBoxTOBehavior;
