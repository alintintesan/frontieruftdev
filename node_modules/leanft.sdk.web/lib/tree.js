// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 23/12/2015.
 * This file will contain the implementation of Web Tree
 */

var Core = require("leanft.sdk.core");
var ClickBehavior = Core.ClickBehavior;
var DragAndDropBehavior = Core.DragAndDropBehavior;
var WebElement = require("./webelement.js");
var WebBase = require("./web_testobject_base.js");
var ObjectUtils = Core.ObjectUtils;
var BuildPathBehavior = require("./helper_behaviors.js").BuildPathBehavior;


/**
 * The description of a WebTree test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {TreeView} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.WebElementDescriptionBehaviour
 * @mixes Web.TreeDescriptionBehaviour
 */
function TreeView(props){
    var treeDescription = new WebBase.WebBaseDescription("TreeView");

    ObjectUtils.extend(treeDescription,WebElement.WebElementDescriptionBehaviour);
    ObjectUtils.extend(treeDescription,TreeDescriptionBehaviour);

    treeDescription._defineByPropertyBag(props);

    return treeDescription;
}

/**
 * @memberof Web
 * @ignore
 */
var TreeDescriptionBehaviour = {
    /**
     * Deprecated (use selectedNodePath instead)
     * The item currently selected in this tree.
     * @param {string} [selectedNode] When provided, this method acts as a setter and sets the selectedNode value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedNode value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedNode: function(selectedNode){
        return this._simplePropertyHandler("selection", selectedNode);
    },

    /**
     * The item currently selected in this tree.
     * @param {string} [selectedNode] When provided, this method acts as a setter and sets the selectedNode value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedNode value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedNodePath: function(selectedNode){
        return this._simplePropertyHandler("selection", selectedNode);
    },

    /**
     * The first node in the list of nodes in this tree.
     * @param {string} [value] When provided, this method acts as a setter and sets the firstNode value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored firstNode value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    firstNode: function(value) {
        return this._propertyHandler("first item", value);
    }

};

//Consts
var selectWiredName = "Select";
var collapseWiredName = "Collapse";
var expandWiredName = "Expand";

/**
 * A set of XPath values to help the {@link Web.TreeView} object perform Select, Expand, and Collapse operations in cases where the default implementation cannot find the element needed.
 * @class TreeTO
 * @memberof Web
 * @constructor
 * @extends Web.WebBaseTestObject
 * @mixes Web.WebElementTOBehavior._properties
 * @mixes Web.WebElementTOBehavior._methods
 * @mixes ClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes Web.TreeBehaviour._methods
 * @mixes Web.TreeBehaviour._properties
 * @alias TreeViewTO
 */
function TreeTO(session,description) {
    description = description || TreeView();
    var treeTO = new WebBase.WebBaseTestObject("WebTree", session, description);

    treeTO._mergeBehavior(ClickBehavior);
    treeTO._mergeBehavior(DragAndDropBehavior);
    treeTO._mergeBehavior(WebElement.WebElementTOBehavior);
    treeTO._mergeBehavior(TreeBehaviour);

    return treeTO;
}

/**
 * @memberof Web
 * @ignore
 */
var TreeBehaviour = {
    /**
     * @memberof Web.TreeBehaviour
     * @ignore
     */
    _properties: {
        /**
         * The selected node in this tree. If more than one node is selected, the first node is returned.
         * @returns {Promise<string>} a promise that is fulfilled with the selected node's path.
         * @function
         */
        selectedNodePath: {
            wiredName: "selection"
        },

        /**
         * Returns first node in the list of nodes in this tree.
         * @returns {Promise<string>} a promise fulfilled with first node in the list of nodes in this tree.
         * @private
         * @ignore
         */
        _firstNode: {
            wiredName: "first item"
        }
    },

    /**
     * @memberof Web.TreeBehaviour
     * @ignore
     */
    _methods: {
        /**
         * Selects the specified node in the tree.
         * If the XPath parameter is passed, the specified node in this tree is selected with both the node path and the XPath.
         * @param {string} nodePath The path to the tree node to select. <br/>
         * Note: You can use the buildNodePath function to create the node path.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is performed.
         * @function
         */
        select: {
            wiredName: selectWiredName,
            exec: function (nodePath) {
                var config = this._config || {};
                var selector = config.selector || null;
                var expander = config.expander || null;
                var forceExpandWithDoubleClick = config.forceExpandWithDoubleClick || false;
                return this._executeWithEvents(arguments, selectWiredName, nodePath, selector, expander, forceExpandWithDoubleClick);
            }
        },
        /**
         * Collapses this tree based on the specified path.
         * If the XPath parameter is passed, the specified node in this tree is collapsed with both the node path and the XPath.
         * @param {string} [nodePath] The path to the tree node to collapse. <br/>
         * Note: You can use the buildNodePath function to create the node path.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is performed.
         * @function
         */
        collapse: {
            wiredName: collapseWiredName,
            exec: function (nodePath) {
                var config = this._config || {};
                var collapser = config.collapser || config.expander || null;
                var forceExpandWithDoubleClick = config.forceExpandWithDoubleClick || false;
                return this._executeWithEvents(arguments, collapseWiredName, nodePath, collapser, forceExpandWithDoubleClick);
            }
        },
        /**
         * Expands this tree based on the specified path.
         * If the XPath parameter is passed, the specified node in this tree is expanded with both the node path and the XPath.
         * @param {string} [nodePath] The path to the tree node to expand. <br/>
         * Note: You can use the buildNodePath function to create the node path.
         * @returns {Promise<void>} a promise that is fulfilled after the operation is performed.
         * @function
         */
        expand: {
            wiredName: expandWiredName,
            exec: function (nodePath) {
                var config = this._config || {};
                var expander = config.expander || null;
                var forceExpandWithDoubleClick = config.forceExpandWithDoubleClick || false;
                return this._executeWithEvents(arguments, expandWiredName, nodePath, expander, forceExpandWithDoubleClick);
            }
        },
        /**
         * Builds the node path from the arguments passed.
         * Arguments can be a string (the name of the node) or a number (the index of the node).<br/>
         * Example: If ("node1", 4) is passed, selects the 'node1' top level node item, and then selects the 4th node item in the open nodes.
         * @returns {string} a string representing the node path as described by the arguments.
         */
        buildNodePath: function () {
            return BuildPathBehavior._buildPath.apply(undefined, arguments);
        },

        /**
         * The configuration options for the tree operations. The tree test object has a default implementation for these options that
         * work with most trees. For trees whose default implementation does not find the right HTML element to use, you should specify
         * an XPath to help find the element.
         * @typedef {object} Web.TreeTO~TreeConfiguration
         * @property {string} [selector] The XPath used to find the internal tree element used for selecting a tree node.
         * @property {string} [expander] The XPath value used to find the internal tree element used to expand and collapse a tree node.
         * @property {string} [collapser=use expander] The XPath value used to find the internal tree element used to collapse a node.
         * The collapser should be specified only if it is different from the expander.
         * @property {boolean} [forceExpandWithDoubleClick=false] A value used to decide if expand or collapse operations should only use a double click.
         * If false, then the tree tries to use a single click; if the node is not collapsed/expanded it will use a double click.
         */

        /**
         * Sets options for performing operations on trees where the default tree implementation fails.
         * @param {Web.TreeTO~TreeConfiguration} [config] The configuration options for the tree operations.
         */
        setConfiguration: function (config) {
            this._config = config;
        },

        /**
         * Returns the configuration object for the tree.
         * @returns {Web.TreeTO~TreeConfiguration} the tree test object.
         */
        getConfiguration: function () {
            return this._config;
        },

        // located under _methods so this property won't appear in the documentation

        /**
         * Deprecated (use selectedNodePath instead)
         * The selected node in this tree. If more than one node is selected, the first node is returned.
         * @returns {Promise<string>} a promise that is fulfilled with the selected node's path.
         */
        selectedNode: function () {
            return this._getROProperty("selection", arguments);
        },

    }
};

module.exports.TreeView = TreeView;
module.exports.TreeTO = TreeTO;
