// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/16/2015.
 */

var ObjUtils = require("leanft.sdk.core").ObjectUtils;
var ClickBehavior = require("leanft.sdk.core").ClickBehavior;
var DragAndDropBehavior = require("leanft.sdk.core").DragAndDropBehavior;
var WebBase = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var WebElement = require("./webelement.js");
var IsEnabledBehavior = require("./helper_behaviors.js").IsEnabledBehavior;
var HelperFuncs = require("./helper_behaviors.js").HelperFuncs;
var IsEnabledTOBehavior = require("./helper_behaviors.js").IsEnabledTOBehavior;

/**
 * Common methods for the Button description
 * @ignore
 * @memberof Web
 */
var ButtonDescriptionBehavior = {
    /**
     * the type of button.
     * @param {string} [type] When provided, this method acts as a setter and sets the buttonType value.
     * @returns {string | Description} if no parameter is provided, the method acts as a getter and returns the current stored buttonType value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    buttonType: function (type){
        return this._propertyHandler("type", type);
    },

    /**
     * The text of the button.
     * @param {string} [value] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} if no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    text: function(value){
        return this._propertyHandler("value", value);
    }
};

/**
 * The description of a Web Button test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {Button} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.WebElementDescriptionBehaviour
 * @mixes Web.ButtonDescriptionBehavior
 * @mixes Web.IsEnabledBehavior
 */
function Button(props) {

    var buttonDes = new WebBaseDesc("Button");

    ObjUtils.extend(buttonDes, WebElement.WebElementDescriptionBehaviour);
    ObjUtils.extend(buttonDes, ButtonDescriptionBehavior);
    ObjUtils.extend(buttonDes, IsEnabledBehavior);

    buttonDes._defineByPropertyBag(props);

    return buttonDes;
}

/*
 * A Web button,
 * @example
 * <button>
 * <!-- Or -->
 * <input type="button">
 * @class ButtonTO
 * @memberof Web
 * @param {Session} session The session that the constructed object belongs.
 * @param {Description} description The description of the test object as passed to $ method of the parent.
 * @returns {WebBaseTestObject} the test object that contains all the functionality of the Button test object.
 */

/**
 * A Web button,
 * @example
 * <button>
 * <!-- Or -->
 * <input type="button">
 * @constructor
 * @class ButtonTO
 * @extends Web.WebBaseTestObject
 * @mixes ClickBehavior._methods
 * @mixes Web.ButtonTOBehavior._properties
 * @mixes DragAndDropBehavior._methods
 * @mixes Web.WebElementTOBehavior._properties
 * @mixes Web.WebElementTOBehavior._methods
 * @mixes Web.IsEnabledTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof Web
 */
function ButtonTO(session, description) {
    description = description || Button();
    var buttonTO = new WebBase("WebButton", session, description);

    buttonTO._mergeBehavior(WebElement.WebElementTOBehavior);
    buttonTO._mergeBehavior(ClickBehavior);
    buttonTO._mergeBehavior(DragAndDropBehavior);
    buttonTO._mergeBehavior(IsEnabledTOBehavior);
    buttonTO._mergeBehavior(ButtonTOBehavior);

    return buttonTO;
}

/**
 * @ignore
 * @memberof Web
 */
var ButtonTOBehavior = {
    /**
     * @ignore
     * @memberof Web.ButtonTOBehavior
     */
    _properties: {
        /**
         * Returns the type of button.
         * @return {Promise<string>} a promise that is fulfilled with the button type.
         * @function
         */
        buttonType: {
            wiredName: "type"
        },
        /**
         * Returns the text of the button.
         * @return {Promise<string>} a promise that is fulfilled with the text of the button.
         * @function
         */
        text: {
            wiredName: "value"
        }
    }
};

module.exports.Button = Button;
module.exports.ButtonTO = ButtonTO;
module.exports.ButtonDescriptionBehavior = ButtonDescriptionBehavior;
module.exports.ButtonTOBehavior = ButtonTOBehavior;