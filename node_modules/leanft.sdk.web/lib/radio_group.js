// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/22/2015.
 */

var ObjUtils = require("leanft.sdk.core").ObjectUtils;
var ClickBehavior = require("leanft.sdk.core").ClickBehavior;
var DragAndDropBehavior = require("leanft.sdk.core").DragAndDropBehavior;
var WebBase = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var WebElement = require("./webelement.js");
var IsEnabledBehavior = require("./helper_behaviors.js").IsEnabledBehavior;
var HelperFuncs = require("./helper_behaviors.js").HelperFuncs;
var Convert = require("leanft.sdk.core").Convert;
var Core = require("leanft.sdk.core");
var StringUtils = Core.StringUtils;
var IsEnabledTOBehavior = require("./helper_behaviors.js").IsEnabledTOBehavior;

/**
 * @memberof Web
 * @ignore
 */
var RadioGroupDescriptionBehavior = {
    /**
     * The index of the selected item in the radio group (or -1 if none is selected).
     * To describe a radio group with no selected item, set the SelectedIndex to -1.
     * @param {number} [selectedIndexVal] When provided, this method acts as a setter and sets the selectedIndex value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current selectedIndex stored value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedIndex: function(selectedIndexVal){ // number
        // getter case
        if(selectedIndexVal === undefined){
            var isChecked = this._properties.checked;
            if(isChecked === 0)
                return -1;

            var selectedItemIndex = this._properties["selected item index"];
            return selectedItemIndex !== null ? selectedItemIndex-1 : null;
        }

        // setter case
        this._insertValue("checked", null);

        if(selectedIndexVal === null) {
            return this._insertValue("selected item index", selectedIndexVal);
        }

        selectedIndexVal = Convert.toNumber(selectedIndexVal);

        if(selectedIndexVal == -1){
            this._insertValue("checked", 0);
            return this._insertValue("selected item index", null);
        }

        return this._insertValue("selected item index", selectedIndexVal+1);
    },
    /**
     * The type of object as defined in the HTML input tag.
     * @param {string} [type] When provided, this method acts as a setter and sets the type value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored type value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    type: function(type){ // string
        return this._propertyHandler("type", type);
    },
    /**
     * The currently selected item (or null if none is selected).
     * @param {string} [selected_value] When provided, this method acts as a setter and sets the selectedItem value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedItem value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedItem: function(selected_value){ // string
        return this._propertyHandler("value", selected_value);
    },
    /**
     * The list of all items contained in this object.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the items value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored items value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    items: function(items){ // string[]
        return this._propertyHandler("all items", items, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    },
    /**
     * The number of items in the group.
     * @param {number} [value] When provided, this method acts as a setter and sets the itemsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored itemsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    itemsCount: function(value){ // number
        return this._propertyHandler("items count", value, null, null, Convert.toNumber);
    },
    /**
     * Indicates whether a radio button is selected in the current group.
     * @param {boolean} [value] When provided, this method acts as a setter and sets the hasSelectedItem value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored hasSelectedItem value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    hasSelectedItem: function(value){ // bool
        return this._propertyHandler("checked", value, HelperFuncs.boolToInt, HelperFuncs.intToBool, Convert.toBool);
    }

};

/**
 * The description of a Web RadioGroup test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {RadioGroup} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.WebElementDescriptionBehaviour
 * @mixes Web.RadioGroupDescriptionBehavior
 * @mixes Web.IsEnabledBehavior
 */
function RadioGroup(props) {

    var radioGroupDes = new WebBaseDesc("RadioGroup");

    ObjUtils.extend(radioGroupDes, WebElement.WebElementDescriptionBehaviour);
    ObjUtils.extend(radioGroupDes, RadioGroupDescriptionBehavior);
    ObjUtils.extend(radioGroupDes, IsEnabledBehavior);

    radioGroupDes._defineByPropertyBag(props);

    return radioGroupDes;
}

/**
 * A set of Web radio buttons belonging to the same group.
 * @class RadioGroupTO
 * @memberof Web
 * @constructor
 * @extends Web.WebBaseTestObject
 * @mixes Web.WebElementTOBehavior._properties
 * @mixes Web.WebElementTOBehavior._methods
 * @mixes ClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes Web.RadioGroupTOBehavior._methods
 * @mixes Web.RadioGroupTOBehavior._properties
 * @mixes Web.IsEnabledTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 */
function RadioGroupTO(session, description) {
    description = description || RadioGroup();
    var radioGroupTO = new WebBase("WebRadioGroup", session, description);

    radioGroupTO._mergeBehavior(ClickBehavior);
    radioGroupTO._mergeBehavior(DragAndDropBehavior);
    radioGroupTO._mergeBehavior(IsEnabledTOBehavior);
    radioGroupTO._mergeBehavior(WebElement.WebElementTOBehavior);
    radioGroupTO._mergeBehavior(RadioGroupTOBehavior);

    return radioGroupTO;
}

//Consts
var allItemsWiredName = "all items";
var checkedWiredName = "checked";
var selectedItemIndexWiredName = "selected item index";
var selectedItemWiredName = "value";
var selectWiredName = "Select";

/**
 * @memberof Web
 * @ignore
 */
var RadioGroupTOBehavior = {
    /**
     * @memberof Web.RadioGroupTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the type of object as defined in the HTML input tag.
         * @returns {Promise<string>} a promise that is fulfilled with the type of object as defined in the HTML input tag.
         * @function
         */
        type: {

        },
        /**
         * Returns the index of the currently selected item (or null if none is selected).
         * @returns {Promise<number>} a promise that is fulfilled with the index of the currently selected item (or null if none is selected).
         * @function
         */
        selectedIndex: {
            wiredName: selectedItemIndexWiredName,
            getter: function () { // number
                return this._getROProperties(arguments, checkedWiredName, selectedItemIndexWiredName).then(function (res) {
                    var isChecked = res[0];
                    var value = res[1];
                    if (isChecked === 0)
                        return -1;
                    else
                        return value - 1;
                });
            }
        },
        /**
         * Returns the currently selected item (or null if none is selected).
         * @returns {Promise<string>} a promise that is fulfilled with the currently selected item (or null if none is selected).
         * @function
         */
        selectedItem: {
            wiredName: selectedItemWiredName,
            getter: function () { // string
                return this._getROProperties(arguments, checkedWiredName, selectedItemWiredName).then(function (res) {
                    var isChecked = res[0];
                    var value = res[1];
                    if (isChecked === 0)
                        return null;
                    else
                        return value;
                });
            }
        },
        /**
         * The list of all items contained in this object.
         * @returns {Promise<string[]>} a promise that is fulfilled with the list of all items contained in this object.
         * @function
         */
        items: {
            wiredName: allItemsWiredName,
            getter: function () { // string[]
                return this._getROProperty(allItemsWiredName, arguments).then(StringUtils.splitFunc(";"));
            }
        },

        /**
         * Indicates whether a radio button is selected in the current group.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether a radio button is selected in the current group.
         * @function
         */
        hasSelectedItem: {
            wiredName: checkedWiredName,
            getter: function () { // bool
                return this._getROProperty(checkedWiredName, arguments).then(HelperFuncs.intToBool);
            }
        }
    },

    /**
     * @memberof Web.RadioGroupTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Selects the specified radio button from the radio group, replacing the previous selection.
         * @param {string | number} value The radio button to select or its index.
         * @returns {Promise<void>} a promise that is fulfilled when the selection is performed.
         * @function
         */
        select: {
            wiredName: selectWiredName,
            exec: function (value) { // string or number
                if (arguments.length === 0)
                    throw new Error("You must pass one argument to select() method");

                if (typeof value == "number")
                    value = "#" + value;

                return this._executeWithEvents(arguments, selectWiredName, value);
            }
        }
    },

    _additionalProperties: {
        itemsCount: {type: 'uint', wiredName: "items count"}
    }
};

module.exports.RadioGroup = RadioGroup;
module.exports.RadioGroupTO = RadioGroupTO;
module.exports.RadioGroupDescriptionBehavior = RadioGroupDescriptionBehavior;