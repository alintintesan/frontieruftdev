// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 14/10/2015.
 * This file contains the base test object for Web's technology including the base description.
 */

var Core = require("leanft.sdk.core");
var TestObjectBase = Core.TestObjectBase;
var DescriptionBase = Core.DescriptionBase;
var Utils = Core.ObjectUtils;
var StringUtils = Core.StringUtils;
var LocationInfoProvider = Core.LocationInfoProvider;
var PropertyFlatter = Core.PropertyFlatter;
var PropertyKeyPrefixFlatter = Core.PropertyKeyPrefixFlatter;
var LocationToNativeKeys = Core.LocationToNativeKeys;
var AbsLocationToNative = Core.AbsLocationToNative;
var SizeToNativeKeys = Core.SizeToNativeKeys;
var NativeObjectBehavior = Core.NativeObjectBehavior;
var WaitUntilVisibleBehavior = Core.WaitUntilVisibleBehavior;

/**
 * Web namespace
 * @namespace Web
 */


/**
 * WebBaseDescription - the base description for all web elements
 * @class WebBaseDescription
 * @mixes DescriptionBase
 * @memberof Web
 * @ignore
 */
function WebBaseDescription(leanFTType){
    this._init({
        technology: "Web",
        leanftType: leanFTType
    });

    //init grouped properties
    this.location({});
    this.absoluteLocation({});
    this.size({});
    this.attributes({});
    this.styles({});
}

//* <Description of what the property represents within the real object â€“ Same as C#>
//* @param {string} [innerHTML] When provided, this method acts as a setter and sets the <TO_prop_name> value.
//* @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored <TO_prop_name> value;
//* otherwise it returns 'this' for use with the builder pattern.


/**
 * @ignore
 */
Utils.inherit(WebBaseDescription,DescriptionBase,{
    /**
     * The object's HTML identifier.
     * @param {string} [id] When provided, this method acts as a setter and sets the HTML id value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored HTML id value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    id: function(id){
        return this._simplePropertyHandler("html id", id);
    },

    /**
     * The object's HTML tag.
     * @param {string} [tag] When provided, this method acts as a setter and sets the HTML tagName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored HTML tagName value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    tagName: function(tag){
        return this._simplePropertyHandler("html tag", tag);
    },

    /**
     * The object's name property.
     * @param {string} [name] When provided, this method acts as a setter and sets the name value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored name value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    name: function(name){
        return this._simplePropertyHandler("name", name);
    },
    /**
     * The object's CSS class (className property).
     * @param {string} [name] When provided, this method acts as a setter and sets the className value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored className value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    className: function(name) {
        return this._simplePropertyHandler("class", name);
    },

    /**
     * The HTML code contained between the object's start and end tags.
     * @param {string} [innerHTML] When provided, this method acts as a setter and sets the innerHTML value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored innerHTML value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    innerHTML: function(innerHTML) {
        return this._simplePropertyHandler("innerHTML", innerHTML);
    },

    /**
     * The object's HTML code and its content.
     * @param {string} [outerHTML] When provided, this method acts as a setter and sets the outerHTML value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored outerHTML value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    outerHTML: function(outerHTML) {
        return this._simplePropertyHandler("outerHTML", outerHTML);
    },

    /**
     * The text contained between the object's start and end tags.
     * @param {string} [innerText] When provided, this method acts as a setter and sets the innerText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored innerText value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    innerText: function(innerText) {
        return this._simplePropertyHandler("innerText", innerText);
    },

    /**
     * The object's text (supported in Internet Explorer only).
     * @param {string} [outerText] When provided, this method acts as a setter and sets the outerText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored outerText value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    outerText: function(outerText) {
        return this._simplePropertyHandler("outerText", outerText);
    },

    /**
     * The object's title.
     * @param {string} [title] When provided, this method acts as a setter and sets the title value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored title value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    title: function(title) {
        return this._simplePropertyHandler("title", title);
    },

    /**
     * Indicates whether the object is visible.
     * @param {boolean} [visible] When provided, this method acts as a setter and sets the isVisible value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isVisible value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    isVisible: function(visible) {
        return this._simplePropertyHandler("visible", visible);
    },

    /**
     * The object's coordinates relative to the parent window (in pixels).
     * @param {Point} [location] When provided, this method acts as a setter and sets the location value.
     * @returns {Point | Description} If no parameter is provided, the method acts as a getter and returns the current stored location value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    location: function(location) {
        return this._propertyFlatterHandler("Location", PropertyFlatter, location, LocationToNativeKeys);
    },

    /**
     * The object's absolute coordinates relative to the screen (in pixels). 0,0 is always the top-left corner of the (primary) monitor.
     * @param {Point} [location] When provided, this method acts as a setter and sets the absoluteLocation value.
     * @returns {Point | Description} If no parameter is provided, the method acts as a getter and returns the absoluteLocation value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    absoluteLocation: function(location) {
        return this._propertyFlatterHandler("AbsoluteLocation", PropertyFlatter, location, AbsLocationToNative);
    },

    /**
     * The object's size (in pixels).
     * @param {Size} [size] When provided, this method acts as a setter and sets the size value.
     * @returns {Size | Description} If no parameter is provided, the method acts as a getter and returns the current stored size value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    size: function(size) {
        return this._propertyFlatterHandler("Size", PropertyFlatter, size, SizeToNativeKeys);
    },

    /**
     * The object's DOM attributes.
     * @param {Object} [attributes] When provided, this method acts as a setter and sets the attributes value.
     * Specify the attribute names as object keys and set their values to the desired attribute values.
     * @returns {Object | Description} If no parameter is provided, the method acts as a getter and returns the current stored attrs object;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    attributes: function(attributes) {
        return this._propertyFlatterHandler("Attributes", PropertyKeyPrefixFlatter, attributes, "attribute/");
    },

    /**
     * The object's computed style.
     * @param {Object} [styles] When provided, this method acts as a setter and sets the object by its computed style value.
     * * Specify the style names as object keys and set their values to the desired style values.
     * @returns {Object | Description} If no parameter is provided, the method acts as a getter and returns the current stored styles object;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.WebBaseDescription#
     */
    styles: function(styles) {
        return this._propertyFlatterHandler("Style", PropertyKeyPrefixFlatter, styles, "style/");
    }
});

/**
 * @class WebBaseTestObject
 * @param nativeClass
 * @param session
 * @param description
 * @constructor
 * @extends TestObjectBase
 * @mixes LocationInfoProvider._properties
 * @mixes NativeObjectBehavior._methods
 * @mixes Web.WebDescriberBehavior._methods
 * @mixes WaitUntilVisibleBehavior._methods
 * @abstract
 * @memberof Web
 * @ignore
 */
function WebBaseTestObject(nativeClass,session,description){
    this._init(nativeClass,session,description);

    this._mergeBehavior(LocationInfoProvider);
    this._mergeBehavior(WaitUntilVisibleBehavior);
    this._mergeBehavior(WebDescriberBehavior);
    this._mergeBehavior(NativeObjectBehavior);
    this._mergeBehavior(WebBaseTestObjectBehavior);
    this._genericDesc = require("./webelement.js").WebElement;

}

/**
 * Common methods for all web test objects
 * @memberof Web
 * @ignore
 */
var WebDescriberBehavior = {
    /**
     * @memberof Web.WebDescriberBehavior
     * @ignore
     */
    _methods:{
        /*jshint unused:true, eqnull:true */
        /**
         * Creates a child test object of this test object.
         * This operation does not cause UFT Developer to search for the object in the AUT. UFT Developer interacts with the application only when a step runs that performs an operation on the AUT object.
         * @param {Description | string} selector The description of the test object.  Can be a full test object description or a string.  If a string is provided, it is interpreted as a CSS selector with a default test object type of WebElement.
         * @param {Description} [objType = Web.Element()] The type of test object to use when supplying a CSS string for the selector.
         * @returns {*} the new child test object with the provided description.
         */
        $: function(selector){
            if(selector == null){
                this._logger.info("$: Was called without any descriptor");
                throw new Error("No Selector was provided");
            }

            if(typeof(selector) === "string"){
                return this._defineByQuery("css",selector,arguments[1]);
            }

            if(!selector.leanFTType){
                //this is a property bag and not our description.
                selector = this._genericDesc(selector);
            }

            return this.__super.$.apply(this,arguments);
        },

        /*jshint unused:false */
        /**
         * Returns all child objects of this object that match the supplied test object description.
         * @param {Description | string} selector a description object that defines the test object type and the set of properties and values that should be common to all objects that are returned.
         * @param {boolean} [dontFilterByType = false] Set this parameter to true to avoid limiting the returned objects to a specific test object type.
         * @returns {Promise<TestObject[]>} a promise that is fulfilled with an array of test objects that match the supplied description.
         */
        $$: function(selector, dontFilterByType){
            if(selector == null){
                this._logger.info("$$: Was called without any descriptor");
                throw new Error("No Selector was provided");
            }

            if(typeof(selector) === "string"){
                selector = this._genericDesc({css: selector});
            } else if(!selector.leanFTType){
                //this is a property bag and not our description.
                selector = this._genericDesc(selector);
            }

            return this.__super.$$.apply(this, arguments);
        },

        /**
         * Creates a child test object of this test object based on the specified xpath.
         * This operation does not cause UFT Developer to search for the object in the AUT. UFT Developer interacts with the application only when a step runs that performs an operation on the AUT object.
         * @param {string} xpath The xpath that will be used as the description for the new child test object.
         * @param {Description} [childType = Web.Element()] The test object type for the new child test object.
         * @returns {*} the new child test object with the provided xpath as its description.
         */
        $x: function(xpath,childType){
            return this._defineByQuery("xpath",xpath,childType);
        }
    },

    _helpers: {
        _defineByQuery: function (queryName, query, childType) {
            if (query === null) {
                throw new Error("Query cannot be null");
            }

            childType = childType || this._genericDesc();
            childType[queryName](query);
            return this.$(childType);
        }
    }
};

//Consts
var allAttributesWiredName = "all attributes";
var allStylesWiredName = "all styles";

var WebBaseTestObjectBehavior = {
    _genericDesc: null,

    /**
     * @memberof WebBaseTestObjectBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the object's HTML identifier.
         * @returns {Promise<string>} the object's HTML identifier.
         * @function
         * @memberof Web.WebBaseTestObject#
         */
        id: {
            wiredName: "html id"
        },

        /**
         * Returns the object's HTML tag.
         * @returns {Promise<string>} the object's HTML tag.
         * @function
         * @memberof Web.WebBaseTestObject#
         */
        tagName: {
            wiredName: "html tag"
        },

        /**
         * Returns the object's name property.
         * @returns {Promise<string>} the object's name property.
         * @function
         * @memberof Web.WebBaseTestObject#
         */
        name: {

        },

        /**
         * Returns the object's CSS class.
         * @returns {Promise<string>} the object's CSS class.
         * @function
         * @memberof Web.WebBaseTestObject#
         */
        className: {
            wiredName: "class"
        },

        /**
         * Returns the HTML code contained between the object's start and end tags.
         * @returns {Promise<string>} the HTML code contained between the object's start and end tags.
         * @function
         * @memberof Web.WebBaseTestObject#
         */
        innerHTML: {

        },

        /**
         * Returns the object's HTML code and its content.
         * @returns {Promise<string>} the object's HTML code and its content.
         * @function
         * @memberof Web.WebBaseTestObject#
         */
        outerHTML: {

        },

        /**
         * Returns the text contained between the object's start and end tags.
         * @returns {Promise<string>} the text contained between the object's start and end tags.
         * @function
         * @memberof Web.WebBaseTestObject#
         */
        innerText: {

        },

        /**
         * Returns the object's text.
         * @returns {Promise<string>} the object's text.
         * @function
         * @memberof Web.WebBaseTestObject#
         */
        outerText: {

        },

        /**
         * Returns the element's title attribute.
         * @returns {Promise<string>} the element's title attribute.
         * @function
         * @memberof Web.WebBaseTestObject#
         */
        title: {

        },

        /**
         * Indicates whether the current element is visible.
         * @returns {Promise<boolean>} true if the current element is visible, otherwise false.
         * @function
         * @memberof Web.WebBaseTestObject#
         */
        isVisible: {
            wiredName: "visible"
        },

        /**
         * Returns a copy of the attribute collection that is attached to this object. For example: 'id','class', etc.
         * @returns {Promise<object>} the object keys are the attribute names and the corresponding values are the attribute values.
         * @function
         * @memberof Web.WebBaseTestObject#
         */
        attributes: {
            type: 'dictionary',
            wiredName: allAttributesWiredName,
            nonDescribable: true,
            specialTranslator: { //note: wired prefix is 'attribute' while leanft prefix is 'attributes'
                wiredToLeanFt: {
                    isSpecial: function (value) { return value.match(/^attribute\//); },
                    translate: function(value) { return value.replace(/^attribute\//, "attributes."); }
                },
                leanFtToWired:{
                    isSpecial: function (value) { return value.match(/^attributes\./); },
                    translate: function(value) { return value.replace(/^attributes\./, "attribute/"); }
                }
            },
            getter: function () {
                return this._getDictionaryValue(allAttributesWiredName);
            }
        },

        /**
         * Returns a copy of the style collection that is attached to this object.
         * @returns {Promise<object>} the object keys are the attribute names and the corresponding values are the attribute values.
         * @function
         * @memberof Web.WebBaseTestObject#
         */
        styles: {
            type: 'dictionary',
            wiredName: allStylesWiredName,
            nonDescribable: true,
            specialTranslator: { //note: wired prefix is 'style' while leanft prefix is 'styles'
                wiredToLeanFt: {
                    isSpecial: function (value) { return value.match(/^style\//); },
                    translate: function(value) { return value.replace(/^style\//, "styles."); }
                },
                leanFtToWired:{
                    isSpecial: function (value) { return value.match(/^styles\./); },
                    translate: function(value) { return value.replace(/^styles\./, "style/"); }
                }
            },
            getter: function () {
                return this._getDictionaryValue(allStylesWiredName);
            }
        }
    },

    /**
     * @memberof WebBaseTestObjectBehavior
     * @ignore
     */
    _methods: {
        /**
         * Returns the value of the specified attribute.
         * @param {string} attributeName The attribute name of the value to retrieve.
         * @returns {Promise<string>} the value of the specified attribute; null if the attribute does not exist.
         * @memberof Web.WebBaseTestObject#
         */
        getAttribute: function (attributeName) {
            return this._getROProperty("attribute/" + attributeName, arguments).then(function (attrVal) {
                if (attrVal === null) {
                    return null;
                }

                //in case the attribute is bool it must be true (otherwise it was null) then we return same as W3C's getAttribute which is ""
                if (typeof attrVal === 'boolean') {
                    return "";
                }

                if (attrVal === "") {
                    return null;
                }

                return attrVal;
            });
        },

        /**
         * Returns the value of the specified style.
         * @param {string} stylePropertyName The style name of the value to retrieve.
         * @returns {Promise<string>} the value of the specified style. Null if the style does not exist.
         * @memberof Web.WebBaseTestObject#
         */
        getComputedStyle: function (stylePropertyName) {
            return this._getROProperty("style/" + stylePropertyName, arguments).then(function (styleVal) {
                if (styleVal === "") {
                    return null;
                }

                return styleVal;
            });
        },
    },

    _helpers: {
        _getDictionaryValue: function (propName) {
            return this._getROProperty(propName, arguments).then(function (serializedDictionary) {
                var attributesDic = {};
                if (StringUtils.isNullOrWhiteSpace(serializedDictionary)) {
                    return attributesDic;
                }

                var tokens = serializedDictionary.split(';;');
                var i;
                for (i = 1; i < tokens.length; i++) {
                    if (tokens[i][0] === ";") {
                        tokens[i] = tokens[i].substr(1);
                        tokens[i - 1] += ";";
                    }
                }
                for (i = 0; i < tokens.length; i += 2) {
                    attributesDic[tokens[i]] = tokens[i + 1];
                }

                return attributesDic;
            });
        }
    }
};

/**
 * @ignore
 */
Utils.inherit(WebBaseTestObject,TestObjectBase, {

});

module.exports.WebBaseTestObject = WebBaseTestObject;
module.exports.WebBaseDescription = WebBaseDescription;
module.exports.WebDescriberBehavior = WebDescriberBehavior;