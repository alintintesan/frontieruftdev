// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/9/2015.
 */

var Convert = require("leanft.sdk.core").Convert;
var HelperFuncs = require("./helper_behaviors.js").HelperFuncs;
var Core = require("leanft.sdk.core");
var StringUtils = Core.StringUtils;

/**
 * @memberof Web
 * @ignore
 */
var MediaControlDescriptionBehavior = {
    /**
     * Indicates whether the media file should start playing as soon as it loads.
     * @param {boolean} [autoPlay] When provided, this method acts as a setter and sets the hasAutoPlay value.
     * @returns {boolean | Description}  If no parameter is provided, the method acts as a getter and returns the current stored hasAutoPlay value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    hasAutoPlay: function(autoPlay){
        return this._propertyHandler("autoplay", autoPlay);
    },
    /**
     * Indicates whether the media player should display playback controls.
     * @param {boolean} [playbackControls] When provided, this method acts as a setter and sets the hasPlaybackControls value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored hasPlaybackControls value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    hasPlaybackControls: function(playbackControls) {
        return this._propertyHandler("controls", playbackControls);
    },
    /**
     * The URL of the media file currently selected in the browser window.
     * @param {string} [currentSource] When provided, this method acts as a setter and sets the currentSource value.
     * @returns {string| Description} If no parameter is provided, the method acts as a getter and returns the current stored currentSource value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    currentSource: function(currentSource){
        return this._propertyHandler("current source", currentSource);
    },
    /**
     * Indicates whether the media file should start playing again from the beginning as soon as it finishes playing.
     * @param {boolean} [playInLoop] When provided, this method acts as a setter and sets the isPlayInLoop value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isPlayInLoop value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isPlayInLoop: function(playInLoop){
        return this._propertyHandler("loop", playInLoop);
    },
    /**
     * Indicates whether the media volume is muted.
     * @param {boolean} [muted] When provided, this method acts as a setter and sets the isMuted value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isMuted value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isMuted: function(muted){
        return this._propertyHandler("muted", muted);
    },
    /**
     * Indicates whether the media file is currently playing.
     * @param {boolean} [playing] When provided, this method acts as a setter and sets the isPlaying value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isPlaying value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isPlaying: function(playing){
        return this._propertyHandler("playing", playing);
    },
    /**
     * The current playback position in this media file (in milliseconds).
     * @param {number} [currentTime] When provided, this method acts as a setter and sets the playbackTime value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored playbackTime value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    playbackTime: function(currentTime){
        return this._propertyHandler("current time", currentTime, null, null, Convert.toNumber);
    },
    /**
     * The length of the currently selected media file (in milliseconds).
     * @param {number} [duration] When provided, this method acts as a setter and sets the duration value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored duration value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    duration: function(duration){
        return this._propertyHandler("duration", duration, null, null, Convert.toNumber);
    },
    /**
     * The list of all media file source URLs (separated by ;).
     * @param {string[]} [sourcesArr] When provided, this method acts as a setter and sets the sources value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored sources value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    sources: function(sourcesArr){
        return this._propertyHandler("sources", sourcesArr, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    },
    /**
     * Indicates the speed of the media playback. <br/>
     * Remark: Possible values: numbers with up to two decimal places. For example, 0.51 or 1.00.
     * @param {number} [playbackRate] When provided, this method acts as a setter and sets the playbackRate value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored playbackRate value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    playbackRate: function(playbackRate){
        return this._propertyHandler("playback rate", playbackRate, function(valueToSet){
            return valueToSet.toFixed(2);
        }, Convert.toNumber, Convert.toNumber);
    },
    /**
     * Indicates the volume used when playing the media file. <br/>
     * Remark: Possible values: numbers with up to two decimal places. For example, 0.51 or 1.00.
     * @param {number} [volume] When provided, this method acts as a setter and sets the volume value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored volume value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    volume: function(volume){
        return this._propertyHandler("volume", volume, function(valueToSet){
            return valueToSet.toFixed(2);
        }, Convert.toNumber, Convert.toNumber);
    }

};

//Consts
var playbackRateWiredName = "playback rate";
var reloadWiredName = "Load";
var playWiredName = "Play";
var pauseWiredName = "Pause";

/**
 * @memberof Web
 * @ignore
 */
var MediaControlTestObjectBehavior = {
    /**
     * @memberof Web.MediaControlTestObjectBehavior
     * @ignore
     */
    _properties: {
        /**
         * Indicates whether the media file should start playing as soon as it loads.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the media file should start playing as soon as it loads.
         * @function
         */
        hasAutoPlay: {
            wiredName: "autoplay"
        },
        /**
         * Indicates whether the media player should display playback controls.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the media player should display playback controls.
         * @function
         */
        hasPlaybackControls: {
            wiredName: "controls"
        },
        /**
         * The URL of the media file currently selected in the browser window.
         * @returns {Promise<string>} a promise that is fulfilled with the URL of the media file currently selected in the browser window.
         * @function
         */
        currentSource: {
            wiredName: "current source"
        },
        /**
         * Indicates whether the media file should start playing again from the beginning as soon as it finishes playing.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the media file should start playing again from the beginning as soon as it finishes playing.
         * @function
         */
        isPlayInLoop: {
            wiredName: "loop"
        },
        /**
         * Indicates whether the media volume is muted.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the media volume is muted.
         * @function
         */
        isMuted: {
            wiredName: "muted"
        },
        /**
         * Indicates whether the media file is currently playing.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the media file is currently playing.
         * @function
         */
        isPlaying: {
            wiredName: "playing"
        },
        /**
         * The current playback position in the media file (in milliseconds).
         * @returns {Promise<number>} a promise that is fulfilled with the current playback position in the media file (in milliseconds).
         * @function
         */
        playbackTime: {
            type: 'uint',
            wiredName: "current time"
        },
        /**
         * The length of the currently selected media file (in milliseconds).
         * @returns {Promise<number>}  a promise that is fulfilled with the length of the currently selected media file (in milliseconds).
         * @function
         */
        duration: {
            type: 'uint'
        },
        /**
         * A collection of all media file source URLs.
         * A media file may have multiple URL addresses for use in different browser types.
         * If the src attribute was set, but no sources were defined in the HTML, the Sources property will return a collection containing a single item with the "src" value.
         * @returns {Promise<string[]>} a promise that is fulfilled with the collection of all media file source URLs.
         * @function
         */
        sources: {
	    //sources is the only property that is describable, so the wiredName in this case is sources.
            getter: function () {
                return this._getROProperties(arguments, "sources", "src").then(function (properties) {
                    var sources = properties[0], src = properties[1];
                    return StringUtils.isNullOrWhiteSpace(sources) ? [src] : sources.split(';');
                });
            }
        },
        /**
         * Indicates the speed of the media playback.
         * @returns {Promise<number>} a promise that is fulfilled with the speed of the media playback.
         * @function
         */
        playbackRate: {
            type: 'double',
            wiredName: playbackRateWiredName,
            getter: function () {
                return this._getROProperty(playbackRateWiredName, arguments).then(function (rate) {
                    return Convert.toNumber(rate);
                });
            }
        },
        /**
         * Indicates the volume used when playing this media file.
         * @returns {Promise<number>} a promise that is fulfilled with the volume used when playing this media file.
         * @function
         */
        volume: {
            type: 'double',
            getter: function () {
                return this._getROProperty("volume", arguments).then(function (volume) {
                    return Convert.toNumber(volume);
                });
            }
        }
    },

    /**
     * @memberof Web.MediaControlTestObjectBehavior
     * @ignore
     */
    _methods: {
        /**
         * Reloads the media file.
         * @returns {Promise<void>} a promise that is fulfilled after the media reloads.
         * @function
         */
        reload: {
            wiredName: reloadWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, reloadWiredName);
            }
        },
        /**
         * Plays the media file.
         * @returns {Promise<void>} a promise that is fulfilled after the media starts playing.
         * @function
         */
        play: {
            wiredName: playWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, playWiredName);
            }
        },
        /**
         * Pauses the media playback.
         * @returns {Promise<void>} a promise that is fulfilled after the media is paused.
         * @function
         */
        pause: {
            wiredName: pauseWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, pauseWiredName);
            }
        }
    }
};

module.exports.MediaControlDescriptionBehavior = MediaControlDescriptionBehavior;
module.exports.MediaControlTestObjectBehavior = MediaControlTestObjectBehavior;



