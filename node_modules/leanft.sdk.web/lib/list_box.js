// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 26/11/2015.
 */
var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var HelperFuncs = require("./helper_behaviors.js").HelperFuncs;
var ObjUtils = Core.ObjectUtils;
var ArrayUtils = Core.ArrayUtils;
var ClickBehavior = Core.ClickBehavior;
var DragAndDropBehavior = Core.DragAndDropBehavior;
var WebBase = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var WebElement = require("./webelement.js");
var IsEnabledBehavior = require("./helper_behaviors.js").IsEnabledBehavior;
var FormFieldBehavior = require("./helper_behaviors.js").FormFieldBehavior;
var StringUtils = Core.StringUtils;
var IsEnabledTOBehavior = require("./helper_behaviors.js").IsEnabledTOBehavior;

/**
 * @ignore
 * @memberof Web
 */
var ListBoxDescriptionBehavior = {
    /**
     * The object's text value.
     * @param {string} [value] When provided, this method acts as a setter and sets the value value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored value value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    value: function(value) {
        return this._propertyHandler("value", value);
    },

    /**
     * The initial text value, which is set when the object is reset.
     * @param {string} [value] When provided, this method acts as a setter and sets the defaultValue value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored defaultValue value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    defaultValue: function(value) {
        return this._propertyHandler("default value", value);
    },

    /**
     * The first item in the list of items in the list.
     * @param {string} [value] When provided, this method acts as a setter and sets the firstItem value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored firstItem value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    firstItem: function(value) {
        return this._propertyHandler("first item", value);
    },

    /**
     * Indicates whether multi-selection is available.
     * @param {boolean} [multiple] When provided, this method acts as a setter and sets the isMultiple value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isMultiple value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isMultiple: function(multiple) {
        return this._propertyHandler("multiple", multiple, null, null, Convert.toBool);
    },

    /**
     * The number of visible items in the list.
     * @param {number} [count] When provided, this method acts as a setter and sets the visibleItemsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored visibleItemsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    visibleItemsCount:  function(count) {
        return this._propertyHandler("visible items", count, null, null, Convert.toNumber);
    },

    /**
     * An array of all items in the list.<br />
     * Note: When weblist items are loaded dynamically, it is possible that only a partial list of the items will be returned.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the items value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored items value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    items: function(items) {
        return this._propertyHandler("all items", items,
            StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    },

    /**
     * An array of all selected items in the list.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the selectedItems value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedItems value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedItems: function(items) {
        return this._propertyHandler("selection", items,
            StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    },

    /**
     * The number of items in the list box.
     * @param {number} [itemsCount] When provided, this method acts as a setter and sets the itemsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored itemsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    itemsCount: function (itemsCount) {
        return this._propertyHandler("items count", itemsCount, Convert.toNumber);
    }
};

/**
 * The description of a Web ListBox test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {ListBox} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.WebElementDescriptionBehaviour
 * @mixes Web.IsEnabledBehavior
 * @mixes Web.FormFieldBehavior
 * @mixes Web.ListBoxDescriptionBehavior
 */
function ListBox(props){
    var listBoxDescription = new WebBaseDesc("ListBox");

    ObjUtils.extend(listBoxDescription, IsEnabledBehavior);
    ObjUtils.extend(listBoxDescription, FormFieldBehavior);
    ObjUtils.extend(listBoxDescription, WebElement.WebElementDescriptionBehaviour);
    ObjUtils.extend(listBoxDescription, ListBoxDescriptionBehavior);

    listBoxDescription._defineByPropertyBag(props);

    return listBoxDescription;
}

/**
 *
 *  A drop-down or multiple-selection Web list.
 *  HTML example with the second value selected: </para>
 *  @example
 *  <select name="select">
 *    <option value="value1">Value 1</option>
 *    <option value="value2" selected>Value 2</option>
 *    <option value="value3>Value 3</option>
 * </select>
 * @class ListBoxTO
 * @memberof Web
 * @constructor
 * @extends Web.WebBaseTestObject
 * @mixes Web.WebElementTOBehavior._properties
 * @mixes Web.WebElementTOBehavior._methods
 * @mixes ClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes Web.ListBoxTOBehavior._properties
 * @mixes Web.ListBoxTOBehavior._methods
 * @mixes Web.IsEnabledTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 */
function ListBoxTO(session, description) {
    description = description || ListBox();
    var listBoxTO = new WebBase("WebList", session, description);

    listBoxTO._mergeBehavior(ClickBehavior);
    listBoxTO._mergeBehavior(DragAndDropBehavior);
    listBoxTO._mergeBehavior(IsEnabledTOBehavior);
    listBoxTO._mergeBehavior(WebElement.WebElementTOBehavior);
    listBoxTO._mergeBehavior(ListBoxTOBehavior);
    return listBoxTO;
}

//Consts
var multipleWiredName = "multiple";
var allItemsWiredName = "all items";
var selectWiredName = "Select";
var extendSelectWiredName = "ExtendSelect";
var deselectWiredName = "DeSelect";
var makeItemVisibleWiredName = "MakeItemVisible";

/**
 * @memberof Web
 * @ignore
 */
var ListBoxTOBehavior = {
    /**
     * @memberof Web.ListBoxTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the object's text value.
         * @returns {Promise<string>} a promise that is fulfilled with the object's text value.
         * @function
         */
        value: {

        },

        /**
         * Returns the initial text value, which is set when the object is reset.
         * @returns {Promise<string>} a promise that is fulfilled with the initial text value, which is set when the object is reset.
         * @function
         */
        defaultValue: {
            wiredName: "default value"
        },

        /**
         * Returns true if multi-selection is available.
         * @returns {Promise<boolean>} a promise that is fulfilled with true if multi-selection is available.
         * @function
         */
        isMultiple: {
            wiredName: multipleWiredName,
            getter: function () {
                return this._getROProperty(multipleWiredName, arguments).then(function(isMultipleValue){
                    return Boolean(isMultipleValue);
                });
            }
        },

        /**
         * Returns the number of items in the list.
         * @returns {Promise<number>} a promise that is fulfilled with the number of items in the list.
         * @function
         */
        visibleItemsCount: {
            type: 'uint',
            wiredName: "visible items"
        },

        /**
         * Returns an array of all items in the list. <br />
         * Note: When weblist items are loaded dynamically, it is possible that only a partial list of the items will be returned.
         * @returns {Promise<string[]>} a promise that is fulfilled with an array of all items in the list.
         * @function
         */
        items: {
            wiredName: allItemsWiredName,
            getter: function () {
                return this._getROProperty(allItemsWiredName, arguments).then(StringUtils.splitFunc(";"));
            }
        },

        /**
         * Returns an array of all selected items in the list.
         * @returns {Promise<string[]>} a promise that is fulfilled with an array of all selected items in the list.
         * @function
         */
        selectedItems: {
            wiredName: "selection",
            getter: function () {
                return this._getROProperties(arguments, "selected item index", "all items").then(function (res) {
                    var indicesStr = res[0];

                    if (indicesStr) {
                        var selectedIndices = indicesStr.split(";");
                        var allItems = res[1].split(";");

                        return selectedIndices.map(function (selectedIndex) {
                            return allItems[selectedIndex];
                        });
                    }

                    return [];
                });
            }
        },

        /**
         * Returns the first item in the list of items in the list.
         * @returns {Promise<string>} the first item in the list of items in the list.
         * @private
         * @ignore
         */
        _firstItem: {
            wiredName: "first item"
        },

        /**
         * The type of object as defined in the HTML input tag.
         * @returns {Promise<string>} a promise that is fulfilled with the type of object as defined in the HTML input tag.
         * @function
         */
        type: {
            
        }
    },

    /**
     * @memberof Web.ListBoxTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Selects a list of items in the list box.
         * @param {...number | string} item You can pass as many items as you like, each item can be the name of the item you wish to select,
         * or the numeric index of the item in the list. <br/>
         * Example: listBox.select("someItem", 2, "anotherItem");
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @function
         */
        select: {
            wiredName: selectWiredName,
            exec: function (item) {
                return this._executeOnItemsCollection(arguments, selectWiredName, extendSelectWiredName, ArrayUtils.toArray(arguments), HelperFuncs.itemTransform);
            }
        },

        /**
         * Selects additional items from the multi-selection list box.
         * @function
         * @param {...(string | number)} items One or more items to add to the selection. Each item can be either an item's name
         * or the item's numeric index in the list.
         * @returns {Promise<void>} A promise that is fulfilled when the operation is performed.
         */
        extendSelect: {
            wiredName: extendSelectWiredName,
            exec: function (items) {
                return this._executeOnItemsCollection(arguments, extendSelectWiredName, extendSelectWiredName, ArrayUtils.toArray(arguments), HelperFuncs.itemTransform);
            }
        },

        /**
         * Deselects a list of items in the list box.
         * @param {...number | string} item you can pass as many items as you like, each item can be either the name of the item you wish to select,
         * or the numeric index of the item in the list. <br/>
         * Example: listBox.deselect("someItem", 2, "anotherItem");
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @function
         */
        deselect: {
            wiredName: deselectWiredName,
            exec: function (item) {
                return this._executeSingleOpOnCollection(arguments, deselectWiredName, ArrayUtils.toArray(arguments), HelperFuncs.itemTransform);
            }
        },

        /**
         * Makes an item in the list visible. <br/>
         * Note: When weblist items are loaded dynamically, this method might return unexpected results.
         * @param {string} item The menu item to make visible.
         * @param {string} xPath The xPath value of the control to press to make the item visible in the list.
         * @param {number} [timeOut] The amount of time to wait for the item to become visible. Default is 20 seconds.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @function
         */
        makeItemVisible: {
            wiredName: makeItemVisibleWiredName,
            exec: function (item, xPath, timeOut) {
                timeOut = timeOut === undefined ? 20 : timeOut;
                if (typeof item === "number") {
                    var itemIndex = item;
                    return this.items().then(function (items) {
                        if (itemIndex < 0 || itemIndex > items.length) {
                            throw new Error("item value is out of bounds");
                        }

                        var text = items[itemIndex];
                        return this._executeWithEvents(arguments, makeItemVisibleWiredName, text, xPath, timeOut);
                    }.bind(this));
                }
                return this._executeWithEvents(arguments, makeItemVisibleWiredName, item, xPath, timeOut);
            }
        }
    },

    _additionalProperties: {
        itemsCount: {wiredName: "items count"}
    }
};

module.exports.ListBoxDescriptionBehavior = ListBoxDescriptionBehavior;
module.exports.ListBoxTOBehavior = ListBoxTOBehavior;
module.exports.ListBox = ListBox;
module.exports.ListBoxTO = ListBoxTO;