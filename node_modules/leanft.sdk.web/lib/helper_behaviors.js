// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/26/2015.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;
var ObjUtils = Core.ObjectUtils;

/**
 * Helper for web descriptions implementing isEnabled.
 * @memberof Web
 * @ignore
 */
var IsEnabledBehavior = {

    /**
     * Indicates whether the object is enabled.
     * @param {boolean} [enabled] When provided, this method acts as a setter and sets the isEnabled value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isEnabled: function(enabled){
        return this._propertyHandler("disabled", enabled, HelperFuncs.boolToOppositeInt, HelperFuncs.intToOppositeBool, Convert.toBool);
    }
};

/**
 * Common description of Form fields descriptions.
 * @memberof Web
 * @ignore
 */
var FormFieldBehavior = {
    /**
     * The type of object as defined in the HTML input tag.
     * @param {string} [type] When provided, this method acts as a setter and sets the type value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored type value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    type: function(type){ // string
        return this._propertyHandler("type", type);
    }
};

/**
 * @ignore
 * @memberof Web
 */
var IsEnabledTOBehavior = {
    /**
     * @ignore
     * @memberof Web.IsEnabledTOBehavior
     */
    _properties: {
        /**
         * Indicates whether this object is enabled.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether this object is enabled.
         */
        isEnabled: {
            wiredName: "disabled",
            getter: function () {
                return this._getROProperty("disabled", arguments).then(HelperFuncs.intToOppositeBool);
            }
        }
    }
};

ObjUtils.combineBehaviors(IsEnabledTOBehavior, WaitUntilEnabledBehavior);

/**
 * @ignore
 */
var BuildPathBehavior = {
    /**
     *
     * @returns {string}
     * @private
     */
    _buildPath: function() {
        var arr = [];
        for (var i = 0; i < arguments.length; i++) {
            if (typeof arguments[i] === "number")
                arr.push("#" + arguments[i]);
            else
                arr.push(arguments[i]);
        }
        return arr.join(";");
    }
};

/**
 * This is a static class that will provide useful functions that can be passed for continue manipulations.
 * @ignore
 */
var HelperFuncs = {

    boolToInt: function(value){
        value = value ? 1 : 0;
        return value;
    },

    intToBool: function(value){
        return value == 1;
    },

    boolToOppositeInt: function(value){
        value = value ? 0 : 1;
        return value;
    },

    intToOppositeBool: function(value){
        return value != 1;
    },

    itemTransform: function(item) {
        if(typeof item === 'number')
            return "#" + item;

        return item;
    }
};

module.exports.HelperFuncs = HelperFuncs;
module.exports.IsEnabledBehavior = IsEnabledBehavior;
module.exports.FormFieldBehavior = FormFieldBehavior;
module.exports.BuildPathBehavior = BuildPathBehavior;
module.exports.IsEnabledTOBehavior = IsEnabledTOBehavior;