// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/13/2015.
 */

var ObjUtils = require("leanft.sdk.core").ObjectUtils;
var ClickBehavior = require("leanft.sdk.core").ClickBehavior;
var DragAndDropBehavior = require("leanft.sdk.core").DragAndDropBehavior;
var WebBase = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var WebElement = require("./webelement.js");
var Convert = require("leanft.sdk.core").Convert;
var HelperFuncs = require("./helper_behaviors.js").HelperFuncs;
var BuildPathBehavior = require("./helper_behaviors.js").BuildPathBehavior;
var Core = require("leanft.sdk.core");
var StringUtils = Core.StringUtils;


/**
 * @memberof Web
 * @ignore
 */
var MenuDescriptionBehavior = {
    /**
     * A collection of all top level menu items in this object.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the topLevelMenuItems value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored topLevelMenuItems value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    topLevelMenuItems: function(items){
        return this._propertyHandler("top level items", items, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    },
    /**
     * The number of top level menu items in this object.
     * @param {number} [itemsCount] When provided, this method acts as a setter and sets the topLevelMenuItemsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored topLevelMenuItemsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    topLevelMenuItemsCount: function(itemsCount){
        return this._propertyHandler("top level items count", itemsCount, null, null, Convert.toNumber);
    },

    /**
     * The first menu item in the list of items in the menu.
     * @param {string} [value] When provided, this method acts as a setter and sets the firstMenuItem value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored firstMenuItem value.
     * Otherwise it returns 'this' for use with the builder pattern.
     */
    firstMenuItem: function(value) {
        return this._propertyHandler("first item", value);
    }
};

/**
 * The description of a Web Menu test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {Menu} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.WebElementDescriptionBehaviour
 * @mixes Web.MenuDescriptionBehavior
 */
function Menu(props) {

    var menuDes = new WebBaseDesc("Menu");

    ObjUtils.extend(menuDes, WebElement.WebElementDescriptionBehaviour);
    ObjUtils.extend(menuDes, MenuDescriptionBehavior);

    menuDes._defineByPropertyBag(props);

    return menuDes;
}
/**
 * A menu control in a Web page or application.
 * @class MenuTO
 * @memberof Web
 * @constructor
 * @extends Web.WebBaseTestObject
 * @mixes Web.WebElementTOBehavior._properties
 * @mixes Web.WebElementTOBehavior._methods
 * @mixes ClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes Web.MenuTOBehavior._methods
 * @mixes Web.MenuTOBehavior._properties
 */
function MenuTO(session, description) {
    description = description || Menu();
    var menuTO = new WebBase("WebMenu", session, description);

    menuTO._mergeBehavior(WebElement.WebElementTOBehavior);
    menuTO._mergeBehavior(ClickBehavior);
    menuTO._mergeBehavior(DragAndDropBehavior);
    menuTO._mergeBehavior(MenuTOBehavior);

    return menuTO;
}

//Consts
var topLevelMenuItemsWiredName = "top level items";
var selectWiredName = "Select";

/**
 * @memberof Web
 * @ignore
 */
var MenuTOBehavior = {
    /**
     * @memberof Web.MenuTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * A collection of all top level menu items in this object.
         * @returns {Promise<string[]>} a promise that is fulfilled with the collection of all top level menu items in this object.
         * @function
         */
        topLevelMenuItems: {
            wiredName: topLevelMenuItemsWiredName,
            getter: function () {
                return this._getROProperty(topLevelMenuItemsWiredName, arguments).then(function (topLevelItems) {
                    return StringUtils.isNullOrWhiteSpace(topLevelItems) ? [] : topLevelItems.split(";");
                });
            }
        },

        /**
         * Returns the first menu item in the list of items in the menu.
         * @returns {Promise<string>} a promise fulfilled with the first menu item in the list of items in the menu.
         * @private
         * @ignore
         */
        _firstMenuItem: {
            wiredName: "first item"
        }
    },

    /**
     * @memberof Web.MenuTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Selects the menu item according to the specified path.
         * Note: You can use the buildMenuPath function to create the menu path.
         * @param {string} menuPath The path of the menu item, separated by semicolons.
         * @returns {Promise<void>} a promise that is fulfilled with the menu item that the menuPath refers to.
         * @function
         */
        select: {
            wiredName: selectWiredName,
            exec: function (menuPath) {
                if (menuPath == null)
                    throw new Error("You must pass one argument to select() method");

                return this._executeWithEvents(arguments, selectWiredName, menuPath);
            }
        },
        /**
         * Builds the menu path from the arguments passed.
         * @param {...string | number} itemPath } Arguments can be either a string (the name of the menu item) or a number (the index of the menu item). <br/>
         * Example: if ("menu1", 4) is passed, it selects the 'menu1' top level menu item, and then selects the 4th menu item in the open menu.
         * @returns {string} a string representing the menu path as described by the arguments.
         */
        buildMenuPath: function (itemPath) {
            return BuildPathBehavior._buildPath.apply(undefined, arguments);
        }
    },

    _additionalProperties: {
        topLevelMenuItemsCount: {type: 'uint', wiredName: "top level items count"}
    }
};

module.exports.Menu = Menu;
module.exports.MenuTO = MenuTO;