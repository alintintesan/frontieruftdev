// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 18/10/2015.
 * This file contains all the functionality that is needed for the WebElement test object including
 * TestObject constructor, description constructor , and appropiate behaviors.
 */

var WebBaseTO = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var Core = require("leanft.sdk.core");
var ObjectUtils = Core.ObjectUtils;
var Location = Core.Location;
var MouseButton = Core.MouseButton;
var ClickBehavior = Core.ClickBehavior;
var DragAndDropBehavior = Core.DragAndDropBehavior;
var Convert = Core.Convert;
var SwipeDirection = Core.SwipeDirection;

     //* <Description of what the property represents within the real object â€“ Same as C#>
     //* @param {string} [innerHTML] When provided, this method acts as a setter and sets the <TO_prop_name> value.
     //* @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored <TO_prop_name> value;
     //* otherwise it returns 'this' for use with the builder pattern.

/**
 * Common methods for WebElement description
 * @memberof Web
 * @ignore
 */
var WebElementDescriptionBehaviour = {
    /**
     * The path to this object in CSS format. For example: tr.BPTRow input.
     * @param {string} [selector] When provided, this method acts as a setter and sets the css value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored css value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    css: function(selector){
        return this._simplePropertyHandler("css", selector);
    },

    /**
     * The path to this object in XPath format. For example: //TR[@id='LeanFT']/*\/INPUT
     * @param {string} [selector] When provided, this method acts as a setter and sets the xpath value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored xpath value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    xpath: function(selector) {
        return this._simplePropertyHandler("xpath", selector);
    },

    /**
     * The defined role of this object. For example, if the role property is listbox, the object functions as a list box.
     * @param {string} [roleValue] When provided, this method acts as a setter and sets the role value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored role value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    role: function(roleValue){
        return this._simplePropertyHandler("role", roleValue);
    },

    /**
     * The label of the object (where no text label is available).
     * @param {string} [value] When provided, this method acts as a setter and sets the accessibilityName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored accessibilityName value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    accessibilityName: function(value) {
        return this._propertyHandler("acc_name", value);
    }
};

/**
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {Element} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.WebElementDescriptionBehaviour
 * @alias Element
 */
function WebElement(props){
    var elementDescription = new WebBaseDesc("WebElement");

    ObjectUtils.extend(elementDescription,WebElementDescriptionBehaviour);

    elementDescription._defineByPropertyBag(props);

    return elementDescription;
}

//Consts
var fireEventWiredName = "FireEvent";
var doubleClickWiredName = "DoubleClick";
var hoverTapWiredName = "HoverTap";
var longPressWiredName = "LongPress";
var pinchWiredName = "Pinch";
var panWiredName = "Pan";
var swipeWiredName = "Swipe";

/**
 * Common methods shared by WebElement derived methods
 * @memberof Web
 * @ignore
 */
var WebElementTOBehavior = {
    /**
     * @ignore
     * @memberof Web.WebElementTOBehavior
     */
    _properties: {
        /**
         * Returns the path to this object in CSS format. For example: tr.BPTRow input.
         * @returns {Promise<string>} a promise that is fulfilled with the path to this object in CSS format.
         * @function
         */
        css: {

        },
        /**
         * Returns the path to this object in XPath format. For example: //TR[@id='LeanFT']/*\/INPUT
         * @returns {Promise<string>} a promise that is fulfilled with the path to this object in XPath format.
         * @function
         */
        xpath: {

        },
        /**
         * Returns this object's role property.
         * @returns {Promise<string>} a promise that is fulfilled with this object's role property.
         * @function
         */
        role: {

        },
        /**
         * Returns this object's accessibilityName property.
         * @returns {Promise<string>} a promise that is fulfilled with this object's accessibilityName property.
         * @function
         */
        accessibilityName: {
            wiredName: "acc_name"
        }
    },

    /**
     * @ignore
     * @memberof Web.WebElementTOBehavior
     */
    _methods: {
        /**
         * Triggers the specified event on this object.
         * @param {Web.Event | Web.MouseEvent} event The event object describing the event to trigger.
         * The event can be any HTML DOM event. For details, see:  http://www.w3schools.com/jsref/dom_obj_event.asp
         * @returns {Promise<void>} a promise that is fulfilled with the triggered event.
         * @function
         */
        fireEvent: {
            wiredName: fireEventWiredName,
            exec: function (event) {
                if (!event.type)
                    throw new Error("The event object must include the event type");
                if (event.location)
                    return this._executeWithEvents(arguments, fireEventWiredName, event.type, event.location, MouseButton._convert(event.button));

                return this._executeWithEvents(arguments, fireEventWiredName, event.type);
            }
        },

        /*jshint eqnull:true */
        /**
         * Clicks this object twice according to the specified behavior.
         * <BR>Remark: If you are testing a Web or hybrid mobile application on a Mobile device, this method is equivalent to performing a DoubleTap gesture.
         * @param {Object} [webDoubleClickArgs] Arguments that define additional behavior for double-click operations.
         * @param {Location} [webDoubleClickArgs.location] The location to perform the double-click.
         * @param {number} [webDoubleClickArgs.interval = 0.2] The number of seconds between the first click and the second click.
         * @returns {Promise<void>} a promise that is fulfilled when the method is called.<br/>
         * @function
         */
        doubleClick: {
            wiredName: doubleClickWiredName,
            exec: function (webDoubleClickArgs) {

                if (webDoubleClickArgs == null) {
                    return this._executeWithEvents(arguments, doubleClickWiredName);
                }

                webDoubleClickArgs.interval = isNaN(webDoubleClickArgs.interval) ? 0.2 : webDoubleClickArgs.interval;

                return this._executeWithEvents(arguments, doubleClickWiredName, Convert.toNumber(webDoubleClickArgs.interval), Location(webDoubleClickArgs.location));
            }
        },

        /*jshint eqnull:true */
        /**
         * When hover is supported, places the pointer on this object. Otherwise, taps the object at the specified location.
         * If 'location' is not provided, the tap is performed at the center of the object.
         * @param {Location} [location] The arguments for the hover-tap operation.
         * @returns {Promise<void>} a promise that is fulfilled when the method is called.
         * @function
         */
        hoverTap: {
            wiredName: hoverTapWiredName,
            exec: function (location) {

                if (location == null) {
                    return this._executeWithEvents(arguments, hoverTapWiredName);
                }

                return this._executeWithEvents(arguments, hoverTapWiredName, Location(location));
            }
        },

        /*jshint eqnull:true */
        /**
         * Presses and holds this object according to the specified behavior.
         * <BR>Remark: This method is not supported in Internet Explorer.
         * @param {Object} [webLongPressArgs] Arguments object that defines the behavior of the longPress operation.
         * @param {number} [webLongPressArgs.duration = 0.25] The number of seconds to continue pressing.
         * @param {Location} [webLongPressArgs.location] The location where the operation is performed.
         * @returns {Promise<void>} a promise that is fulfilled after pressing the center of the object or the specified location for the number of seconds defined by the user.<br/>
         * @function
         */
        longPress: {
            wiredName: longPressWiredName,
            exec: function (webLongPressArgs) {

                if (webLongPressArgs == null) {
                    return this._executeWithEvents(arguments, longPressWiredName);
                }

                if (typeof webLongPressArgs !== "object")
                    throw new Error("Only object is allowed to pass to longPress() method");

                webLongPressArgs.duration = webLongPressArgs.duration != null ? webLongPressArgs.duration : 0.25;

                return this._executeWithEvents(arguments, longPressWiredName, Convert.toNumber(webLongPressArgs.duration), Location(webLongPressArgs.location));
            }
        },

        /*jshint eqnull:true */
        /**
         * Performs a pinch gesture on this object according to the scale or specified behavior.
         * <BR>Remark: This method is not supported in Internet Explorer.
         * @param {number} [scale] The scale for the pinch gesture. This number is the ratio between the start distance and the end distance between the two touch points used for the pinch.<br>
         * For example, if you were to touch a screen with your fingers 6 cm apart, and pinch until your fingers were 3 cm apart, the scale would be 0.5.
         * @param {Object} [pinchArgs] Arguments object that defines the behavior of the pinch operation.
         * @param {Location} [pinchArgs.location] The location at which to perform the operation.
         * @param {number} [pinchArgs.duration = 1] The number of seconds to perform the pinch.
         * @returns {Promise<void>} a promise that is fulfilled after the pinch has occurred.
         * @function
         */
        pinch: {
            wiredName: pinchWiredName,
            exec: function (scale, pinchArgs) {

                if (scale == null)
                    throw new Error("You must supply scale value to pinch() method");

                if (pinchArgs == null)
                    return this._executeWithEvents(arguments, pinchWiredName, Convert.toNumber(scale));

                pinchArgs.duration = pinchArgs.duration != null ? pinchArgs.duration : 1;

                return this._executeWithEvents(arguments, pinchWiredName, Convert.toNumber(scale), Convert.toNumber(pinchArgs.duration), Location(pinchArgs.location));
            }
        },

        /*jshint eqnull:true */
        /**
         * Performs a pan gesture on this object according to the specified distance parameters.
         * <BR>Remark: This method is not supported in Internet Explorer.
         * @param {number} [deltaX] The distance moved on the x-axis.
         * @param {number} [deltaY] The distance moved on the y-axis.
         * @param {Object} [webPanArgs] Arguments object that defines the behavior of the pan operation.
         * @param {Location} [webPanArgs.location] The location at which to perform operation.
         * @param {number} [webPanArgs.duration = 0.5] The number of seconds to perform the pan.
         * @returns {Promise<void>} a promise that is fulfilled after the pan has occurred. <br/>
         * @function
         */
        pan: {
            wiredName: panWiredName,
            exec: function (deltaX, deltaY, webPanArgs) {

                if (webPanArgs == null) {
                    return this._executeWithEvents(arguments, panWiredName, Convert.toNumber(deltaX), Convert.toNumber(deltaY));
                }

                if (typeof webPanArgs !== "object")
                    throw new Error("Only object is allowed to pass to pinch() method");

                webPanArgs.duration = webPanArgs.duration != null ? webPanArgs.duration : 0.5;

                return this._executeWithEvents(arguments, panWiredName, Convert.toNumber(deltaX), Convert.toNumber(deltaY), Convert.toNumber(webPanArgs.duration), Location(webPanArgs.location));

            }
        },

        /*jshint eqnull:true */
        /**
         * Swipes the object in the specified direction or according to the specified behavior.
         * <BR>Remark: This method is not supported in Internet Explorer.
         * @param {SwipeDirection} [swipeDirection] The direction of the swipe.
         * @param {object} [webSwipeArgs] Arguments object that defines the behavior of the swipe operation.
         * @param {Location} [webSwipeArgs.location] The location where the operation is performed.
         * @param {number} [webSwipeArgs.duration = 0.25] The number of seconds to perform the swipe.
         * @param {number} [webSwipeArgs.distance = 200] The distance (in pixels) to swipe.
         * @returns {Promise<void>} a promise that is fulfilled after the swipe has occurred.<br/>
         * @function
         */
        swipe: {
            wiredName: swipeWiredName,
            exec: function (swipeDirection, webSwipeArgs) {

                if (swipeDirection == null)
                    throw new Error("You must supply swipe direction to swipe() method");

                if (typeof swipeDirection !== "string")
                    throw new Error("The swipe direction must be a string type");

                var directionEnum = SwipeDirection._convertForWeb(swipeDirection);

                if (webSwipeArgs == null)
                    return this._executeWithEvents(arguments, swipeWiredName, directionEnum);

                if (typeof webSwipeArgs !== "object")
                    throw new Error("Only object is allowed to pass to swipe() method");

                webSwipeArgs.distance = webSwipeArgs.distance != null ? webSwipeArgs.distance : 200;
                webSwipeArgs.duration = webSwipeArgs.duration != null ? webSwipeArgs.duration : 0.25;

                return this._executeWithEvents(arguments, swipeWiredName, directionEnum,
                    Convert.toNumber(webSwipeArgs.distance),
                    Convert.toNumber(webSwipeArgs.duration),
                    Location(webSwipeArgs.location));

            }
        }
    }
};

/**
 * The HTML event to be used with the FireEvent method.
 * @param {string} type The event name. For example, "keypress", "keydown", etc.
 * @constructor
 * @memberof Web
 */
function Event(type){
    if(typeof type !== "string")
        throw new Error("You must supply the type of event to crate a new Event.");
    this.type = "on" + type;
}

/**
 * The HTML mouse event to be used with the FireEvent method.
 * @param {string} type The event name.
 * @param {Object} [args] Arguments for the MouseEvent.
 * @param {MouseButton} [args.button = MouseButton.left] The mouse button to use for the event.
 * @param {Position} [args.anchor = Position.center] The position within the object from which the offset is taken.
 * @param {Object} [args.offset] The offset from the anchor position.
 * @param {number} [args.offset.x = 0] The x-coordinate of the offset.
 * @param {number} [args.offset.y = 0] The y-coordinate of the offset.
 * @constructor
 * @memberof Web
 */
function MouseEvent(type, args){
    args = args || {};
    if(typeof type !== "string")
        throw new Error("You must supply the type of event to crate a new MouseEvent.");
    this.type = "on" + type;
    this.location = Location(args);
    this.button = args.button || MouseButton.left;
}

/**
 * Base object for all Web test objects. <br>
 * Remark: Any DIV tag can be represented as a WebElement. In addition, any other Web element can be referred to as a WebElement. For example, a button can be identified as a WebElement, but not vice versa.
 * @class ElementTO
 * @memberof Web
 * @constructor
 * @extends Web.WebBaseTestObject
 * @mixes Web.WebElementTOBehavior._properties
 * @mixes Web.WebElementTOBehavior._methods
 * @mixes ClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @alias ElementTO
 */
function WebElementTO(session,description){
    description = description || WebElement();
    var webElementTO = new WebBaseTO("WebElement",session,description);

    webElementTO._mergeBehavior(ClickBehavior);
    webElementTO._mergeBehavior(DragAndDropBehavior);
    webElementTO._mergeBehavior(WebElementTOBehavior);

    return webElementTO;
}

module.exports.Event = Event;
module.exports.MouseEvent = MouseEvent;
module.exports.WebElement = WebElement;
module.exports.WebElementTO = WebElementTO;
module.exports.WebElementDescriptionBehaviour = WebElementDescriptionBehaviour;
module.exports.WebElementTOBehavior = WebElementTOBehavior;