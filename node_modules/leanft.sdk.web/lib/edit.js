// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/19/2015.
 */
var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var ClickBehavior = Core.ClickBehavior;
var DragAndDropBehavior = Core.DragAndDropBehavior;
var WebBase = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var WebElement = require("./webelement.js");
var EditFieldBase = require("./edit_field_base.js");
var Convert = Core.Convert;
var FormFieldBehavior = require("./helper_behaviors.js").FormFieldBehavior;
var IsEnabledBehavior = require("./helper_behaviors.js").IsEnabledBehavior;
var IsEnabledTOBehavior = require("./helper_behaviors.js").IsEnabledTOBehavior;

/**
 * Common methods for Edit Field description
 * @memberof Web
 * @ignore
 */
var EditDescriptionBehavior = {
    /**
     * The default value in the edit field.
     * @param {string} [defaultValue] When provided, this method acts as a setter and sets the defaultValue value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored defaultValue value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    defaultValue: function(defaultValue){ // string
        return this._propertyHandler("default value", defaultValue);
    },
    /**
     * The maximum number of characters that can be entered in the input field.
     * @param {number} [maxLength] When provided, this method acts as a setter and sets the maxLength value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored maxLength value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    maxLength: function(maxLength){ // number
        return this._propertyHandler("max length", maxLength, null, null, Convert.toNumber);
    },
    /**
     * The pattern in the edit field.
     * @param {string} [pattern] When provided, this method acts as a setter and sets the pattern value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored pattern value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    pattern: function(pattern){ // string
        return this._propertyHandler("pattern", pattern);
    },
    /**
     * The number of rows that can be entered in the input field.
     * @param {number} [rowsCount] When provided, this method acts as a setter and sets the rowsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored rowsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    rowsCount: function(rowsCount){ // number
        return this._propertyHandler("rows", rowsCount, null, null, Convert.toNumber);
    }
};

/**
 * The description of a Web Edit test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {Edit} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.IsEnabledBehavior
 * @mixes Web.WebElementDescriptionBehaviour
 * @mixes Web.EditFieldBaseDescriptionBehavior
 * @mixes Web.EditDescriptionBehavior
 * @mixes Web.FormFieldBehavior
 */
function Edit(props) {

    var editDes = new WebBaseDesc("EditField"); // leanFTType

    ObjUtils.extend(editDes, IsEnabledBehavior);
    ObjUtils.extend(editDes, WebElement.WebElementDescriptionBehaviour);
    ObjUtils.extend(editDes, EditFieldBase.EditFieldBaseDescriptionBehavior);
    ObjUtils.extend(editDes, EditDescriptionBehavior);
    ObjUtils.extend(editDes, FormFieldBehavior);

    editDes._defineByPropertyBag(props);

    return editDes;
}


/**
 * A Web edit box.
 * @constructor
 * @memberof Web
 * @class EditTO
 * @extends Web.WebBaseTestObject
 * @mixes Web.EditTOBehavior._properties
 * @mixes Web.EditTOBehavior._methods
 * @mixes Web.EditFieldBaseTestObjectBehavior._properties
 * @mixes Web.EditFieldBaseTestObjectBehavior._methods
 * @mixes Web.WebElementTOBehavior._properties
 * @mixes Web.WebElementTOBehavior._methods
 * @mixes ClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes Web.IsEnabledTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 * @memberof Web
 */
function EditTO(session, description) {

    // EditField
    // WebEdit
    description = description || Edit();
    var editTO = new WebBase("WebEdit", session, description); // native class

    editTO._mergeBehavior(ClickBehavior);
    editTO._mergeBehavior(DragAndDropBehavior);
    editTO._mergeBehavior(IsEnabledTOBehavior);
    editTO._mergeBehavior(WebElement.WebElementTOBehavior);
    editTO._mergeBehavior(EditFieldBase.EditFieldBaseTestObjectBehavior);
    editTO._mergeBehavior(EditTOBehavior);

    return editTO;
}

//Consts
var setSecureWiredName = "SetSecure";
var submitWiredName = "Submit";

/**
 * Common methods for Edit Field test object
 * @memberof Web
 * @ignore
 */
var EditTOBehavior = {
    /**
     * @memberof Web.EditTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The default value in the edit field.
         * @returns {Promise<string>} a promise that is fulfilled with the default value in the edit field.
         * @function
         */
        defaultValue: {
            wiredName: "default value"
        },
        /**
         * The maximum number of characters that can be entered in the input field.
         * @returns {Promise<number>} a promise that is fulfilled with the maximum number of characters that can be entered in the input field.
         * @function
         */
        maxLength: {
            wiredName: "max length"
        },
        /**
         * The input pattern, for example, a phone number.
         * @returns {Promise<string>} a promise that is fulfilled with the input pattern, for example, a phone number.
         * @function
         */
        pattern: {

        },
        /**
         * The number of rows.
         * @returns {Promise<number>} a promise that is fulfilled with the number of rows.
         * @function
         */
        rowsCount: {
            type: 'uint',
            wiredName: 'rows'
        },
        /**
         * The type of object as defined in the HTML input tag.
         * @returns {Promise<string>} a promise that is fulfilled with the type of object as defined in the HTML input tag.
         * @function
         */
        type: {

        }
    },

    /**
     * @memberof Web.EditTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the encoded value of this edit box.<br/>
         * Note:<br/>
         * - Generate the encoded value using the Password Encoder utility, available from the LeanFT > Tools menu in your IDE or from the Windows Start menu.<br/>
         * - Although this method enables you to hide passwords displayed on the screen while running or editing a LeanFT test, it is not intended to be a secure way to protect password information.
         * @param {string} secure The encoded text to enter in this edit box.
         * @returns {Promise<void>} a promise that is fulfilled after the encoded value of this edit box had been set.
         * @function
         */
        setSecure: {
            wiredName: setSecureWiredName,
            exec: function (secure) {
                if (secure == null)
                    throw new Error("You must pass argument to setSecure() method");
                return this._executeWithEvents(arguments, setSecureWiredName, secure);
            }
        },

        /**
         * When working in a Web form, simulates pressing the Enter key while the focus is on the object specified in the statement.<br/>
		 * Note: If the object is not part of a Web form, Submit has no effect.
         * @returns {Promise<void>} a promise that is fulfilled after this edit box simulates pressing the Enter key.
         * @function
         */
        submit: {
            wiredName: submitWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, submitWiredName);
            }
        }
    }
};

module.exports.Edit = Edit;
module.exports.EditTO = EditTO;
module.exports.EditDescriptionBehavior = EditDescriptionBehavior;
module.exports.EditTOBehavior = EditTOBehavior;

