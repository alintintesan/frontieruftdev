// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/7/2015.
 */

var ObjUtils = require("leanft.sdk.core").ObjectUtils;
var WebBaseTO = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;

/**
 * @memberof Web
 * @ignore
 */
var FrameDescriptionBehavior = {
    /**
     * The URL of the HTML page.
     * @param {string} [url] When provided, this method acts as a setter and sets the URL value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored URL value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    url: function (url) {
        return this._propertyHandler("url", url);
    },
    /**
     * The inner text of the body element.
     * @param {string} [text] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    text: function (text) {
        return this._propertyHandler("text", text);
    }
};

/**
 * The description of a Web Frame test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {Frame} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.FrameDescriptionBehavior
 */
function Frame(props) {

    var frameDes = new WebBaseDesc("Frame");

    ObjUtils.extend(frameDes, FrameDescriptionBehavior);

    frameDes._defineByPropertyBag(props);

    return frameDes;
}

/**
 * A Web frame object that represents both the frame element in a frame set and an embedded frame that uses the iframe element. <br/>
 * Note: The frame is a separate HTML document that is part of the test object hierarchy.
 * @class FrameTO
 * @memberof Web
 * @constructor
 * @extends Web.WebBaseTestObject
 * @mixes Web.FrameTOBehavior._properties
 * @mixes Web.FrameTOBehavior._methods
 */
function FrameTO(session, description) {
    description = description || Frame();
    var frameTO = new WebBaseTO("Frame", session, description);

    frameTO._mergeBehavior(FrameTOBehavior);

    return frameTO;
}

//Consts
var runScriptWiredName = "RunScript";
var syncWiredName = "Sync";

/**
 * @memberof Web
 * @ignore
 */
var FrameTOBehavior = {
    /**
     * @memberof Web.FrameTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the URL of the HTML page.
         * @returns {Promise<string>} a promise this is fulfilled with the URL of the HTML page.
         * @function
         */
        url: {

        },
        /**
         * Returns the inner text of the body element.
         * @returns {Promise<string>} a promise this is fulfilled with the inner text of the body element.
         * @function
         */
        text: {

        }
    },
    
    /**
     * @memberof Web.FrameTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Runs the specified JavaScript code in the page's context and returns the result.
         * @param {string | function} script_to_run The JavaScript code to run.  If a function is passed, it will be transformed to a string and executed in the frame's context.
         * @returns {Promise<*>} a promise this is fulfilled with the return value of the script.
         * @function
         */
        runScript: {
            wiredName: runScriptWiredName,
            exec: function (script_to_run) {
                var prefix = "(", suffix = ")();";

                if (script_to_run == null)
                    throw new Error("You must pass one argument to runJavaScript() method");

                if (typeof script_to_run !== "string")
                    script_to_run = script_to_run.toString();

                script_to_run = script_to_run.replace(/(\r\n|\n|\r)/gm, "");  //removes newline

                if (script_to_run.match("^function") == null) {
                    prefix += "function(){";
                    suffix = "}" + suffix;
                }

                script_to_run = prefix + script_to_run + suffix;

                return this._executeWithEvents(arguments, runScriptWiredName, script_to_run);
            }
        },
        /**
         * Waits for the page state to be idle.
         * @returns {Promise<void>} a promise that is fulfilled when the frame is idle.
         * @function
         */
        sync: {
            wiredName: syncWiredName,
            exec: function () {
                return this._executeCommand(syncWiredName);
            }
        }
    }
};

module.exports.Frame = Frame;
module.exports.FrameTO = FrameTO;
module.exports.FrameTOBehavior = FrameTOBehavior;
module.exports.FrameDescriptionBehavior = FrameDescriptionBehavior;


