// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/10/2015.
 * This file contains all the functionality that is needed for the Browser test object including
 * TestObject constructor, description constructor , and appropriate behavior.
 */

var Core = require("leanft.sdk.core");
var Logger = Core.Logger;
var ObjUtils = Core.ObjectUtils;
var TestObjectBase = Core.TestObjectBase;
var Convert = Core.Convert;
var Page = require("./page.js").Page;
var DescriptionBase = Core.DescriptionBase;
var LocationInfoProvider = Core.LocationInfoProvider;
var AbsLocationToNative = Core.AbsLocationToNative;
var LabCommandTypes = Core.LabCommandTypes;
var TestObjectLabExecutor = Core.TestObjectLabExecutor;

var BrowserLabOperationCommandMap = {
    Release: LabCommandTypes.LabManageCommand,
    GetSiblingTabs: LabCommandTypes.PackageCommandWithLab
};

/**
 * A tab in an open Web browser.
 * Note: <para>To open a new browser tab, use: {@link Web.Browser#launch|Web.Browser.launch}. To access a browser that is already open, use: {@link Web.Browser#attach|Web.Browser.attach}.
 * @memberof Web
 * @class BrowserTO
 * @extends TestObjectBase
 * @mixes BrowserTOBehavior._properties
 * @mixes BrowserTOBehavior._methods
 * @mixes LocationInfoProvider._properties
 */
function Browser(session, description, cookie){
    description = description || new BrowserFilter();
    this._logger = new Logger("Browser");
    this._cookie = cookie;
    this._init("Browser",session, description);
    this.page = this.__super.$.call(this,Page());

    this._executor = new TestObjectLabExecutor(this, BrowserLabOperationCommandMap);

    this._mergeBehavior(LocationInfoProvider);
    this._mergeBehavior(BrowserTOBehavior);
}

/**
 * @typedef {Object} BrowserVersion
 * @property {string} type  The type of browser.
 * @property {string} version The browser version.
 * @memberof Web
 *
 */

/**
 * @ingore
 */
ObjUtils.inherit(Browser,TestObjectBase,{
});

//Consts
var navigateWiredName = "Navigate";
var backWiredName = "Back";
var closeWiredName = "Close";
var refreshWiredName = "Refresh";
var syncWiredName = "Sync";
var clearCacheWiredName = "ClearCache";
var resizeToWiredName = "Resize";
var openNewTabWiredName = "OpenNewTab";
var closeAllTabsWiredName = "CloseAllTabs";
var fullScreenWiredName = "FullScreen";
var embedScriptWiredName = "EmbedScript";
var forwardWiredName = "Forward";
var getDialogTextWiredName = "GetDialogText";
var hasDialogWiredName = "DialogExists";
var handleDialogWiredName = "HandleDialog";
var deleteCookiesWiredName = "DeleteCookies";
var siblingTabsWiredName = "GetSiblingTabs";

/**
 * @memberof Web
 * @ignore
 */
var BrowserTOBehavior = {
    page: null,
    _applicationInfo: null,
    _envInfo: null,

    /**
     * @memberof Web.BrowserTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * Information about the browser.
         * @returns {Promise<Web.BrowserVersion>} a promise that is fulfilled with the information about the browser.
         * @memberof Web.BrowserTO#
         */
        version: function () {
            return this._getROProperty("version", arguments).then(function (browserVersion) {
                return this._getParsedBrowserVersion(browserVersion);
            }.bind(this));
        },
        /**
         * Returns the number of tabs currently open in the browser.
         * @returns {Promise<number>} a promise that is fulfilled with the number of tabs currently open in the browser.
         * @memberof Web.BrowserTO#
         */
        numberOfTabs: function () {
            return this._getROProperty("number of tabs", arguments);
        },
        /**
         * Returns the browser's initial title when first opened.
         * @returns {Promise<string>} a promise that is fulfilled with the browser's initial title when first opened.
         * @memberof Web.BrowserTO#
         */
        openTitle: function () {
            return this._getROProperty("opentitle", arguments);
        },
        /**
         * Return the URL from which the browser is opened.
         * @returns {Promise<string>} a promise that is fulfilled with the URL from which the browser is opened.
         * @memberof Web.BrowserTO#
         */
        openUrl: function () {
            return this._getROProperty("openurl", arguments);
        },
        /**
         * Returns the browser title.
         * @returns {Promise<string>} a promise that is fulfilled with the browser title.
         * @memberof Web.BrowserTO#
         */
        title: function () {
            return this._getROProperty("title", arguments);
        },
        /**
         * Returns the browser URL.
         * @returns {Promise<string>}  a promise that is fulfilled with the browser URL.
         * @memberof Web.BrowserTO#
         */
        url: function () {
            return this._getROProperty("url", arguments);
        },
        /**
         * Returns the object's coordinates relative to the parent window (in pixels), format: {x,y}.
         * @returns {Promise<Point>} a promise that is fulfilled when the object's relative coordinates are returned.
         */
        location: function () {
            var propNames = AbsLocationToNative;
            return this._getROProperties(propNames.x, propNames.y).then(function (res) {
                return {
                    x: Convert.toNumber(res[0]),
                    y: Convert.toNumber(res[1])
                };
            });
        }
    },

    /**
     * @memberof Web.BrowserTOBehavior
     * @ignore
     */
    _methods:{
        /**
         * Creates a child test object of this test object.
         * This operation does not cause UFT Developer to search for the object in the AUT. UFT Developer interacts with the application only when a step runs that performs an operation on the AUT object.
         * @param {Description | string} selector The description of the test object.  Can be a full test object description or a string.  If a string is provided, it is interpreted as a CSS selector with a default test object type of WebElement.
         * @param {Description} [objType = Web.Element()] The type of test object to use when supplying a CSS string for the selector.
         * @returns {*} the new child test object with the provided description.
         * @memberof Web.BrowserTO#
         */
        $: function(selector){
            if(selector.leanFTType){
                // AI objects are direct children of the Browser (and not of the Page like other test objects)
                if((selector.leanFTType.leanftType === 'Page') || (selector.leanFTType.technology === 'AI')) {
                    return this.__super.$.call(this,selector);
                }
            }

            return this.page.$.apply(this.page,arguments);
        },
        /**
         * Creates a child test object of this test object.
         * This operation does not cause UFT Developer to search for the object in the AUT. UFT Developer interacts with the application only when a step runs that performs an operation on the AUT object.
         * @param {string} xpath The xpath of the element that will be used to search for the test object.
         * @param {Description} [childType = Web.Element()] The child type.
         * @returns {*} the new child test object with the provided xpath as its description.
         * @memberof Web.BrowserTO#
         */
        $x: function(xpath,childType){
            if(childType === undefined || childType.leanFTType.leanftType !== 'Page')
                return this.page.$x(xpath,childType);

            throw new Error("cannot describe by XPATH non web elements");
        },
        /**
         * Opens the specified URL in the browser.
         * @param {string} url The URL to open.
         * @returns {Promise<void>} a promise that is fulfilled when the navigate operation was performed.
         * @function
         * @memberof Web.BrowserTO#
         */
        navigate: {
            wiredName: navigateWiredName,
            exec: function(url) {
                return this._executeWithEvents(arguments, navigateWiredName, url);
            }
        },

        /**
         * Activates the tab of the browser in the window group, if the 'setForeground' parameter is true, make the window foreground (windows only)
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation was performed.
         * If the 'setForeground' parameter is set on an unsupported OS, an error of type 'unexpectedParameterException' is returned.
         * @memberOf Web.BrowserTO#
         */
        _activate: {
            exec: function(setForeground) {
                return this._executeWithEvents(arguments, "activate", setForeground);
            }
        },

        /**
         * Returns all child objects of this object that match the supplied test object description.
         * @param {Description | string} a description object that defines the test object type and the set of properties and values that should be common to all objects that are returned.
         * @param {boolean} [dontFilterByType = false] Set this parameter to true to avoid limiting the returned objects to a specific test object type.
         * @returns {Promise<TestObject[]>} a promise that is fulfilled with an array of test objects that match the supplied description.
         * @memberof Web.BrowserTO#
         */
        $$: function(description,dontFilterByType) {
            if(description.leanFTType) {
                // AI objects are direct children of the Browser (and not of the Page like other test objects)
                if ((description.leanFTType.leanftType === 'Page') || (description.leanFTType.technology === 'AI')) {
                    return this.__super.$$.apply(this, arguments);
                }
            }

            return this.page.$$.apply(this.page, arguments);
        },
        /**
         * Highlights all children that match the supplied test object description.
         * @param description A description object that defines the test object type and the set of properties and values that should be common to all objects that are highlighted.
         * @param {boolean} [dontFilterByType = false] Set this parameter to true to avoid limiting the highlighted objects to a specific test object type.
         * @returns {Promise<number>} a promise that is fulfilled with the number of matches that are found and highlighted.
         */
        highlightMatches: function(description, dontFilterByType){
            if(description.leanFTType) {
                if (description.leanFTType.leanftType === 'Page') {
                    return this.__super.highlightMatches.apply(this, arguments);
                }
            }

            return this.page.highlightMatches.apply(this.page, arguments);
        },
        /**
         * Navigates to the previous page in the browser history list. <br/>
         * Note: This method is identical to clicking the browser's Back button.
         * @returns {Promise<void>} a promise that is fulfilled when the browser has performed the back operation.
         * @function
         * @memberof Web.BrowserTO#
         */
        back:{
            wiredName: backWiredName,
            exec: function(){
                return this._executeWithEvents(arguments, backWiredName);
            }
        },
        /**
         * Closes the browser window (or tab) that this test object represents.
         * @returns {Promise<void>} a promise that is fulfilled when the browser has performed the close operation.
         * @function
         * @memberof Web.BrowserTO#
         */
        close: {
            wiredName: closeWiredName,
            exec: function(){
                return this._executeWithEvents(arguments, closeWiredName);
            }
        },
        /**
         * Refreshes the current page. <br/>
         * Note: This method is identical to clicking the browser's <b>Refresh</b> button.
         * @returns {Promise<void>} a promise that is fulfilled after the current page refreshes.
         * @function
         * @memberof Web.BrowserTO#
         */
        refresh: {
            wiredName: refreshWiredName,
            exec: function(){
                return this._executeWithEvents(arguments, refreshWiredName);
            }
        },
        /**
         * Waits for the browser to complete the current navigation. <br/>
         * Note: You can use this method to instruct your test to wait until the browser is loaded.
         * @returns {Promise<void>} a promise that is fulfilled after the browser completes the current navigation.
         * @function
         * @memberof Web.BrowserTO#
         */
        sync: {
            wiredName: syncWiredName,
            exec: function(){
                return this._executeWithEvents(arguments, syncWiredName);
            }
        },
        /**
         * Clears the browser cache. <br/>
         * Note: This method does not clear the browser's cookies. Use deleteCookies() to delete the cookies.
         * @returns {Promise<void>} a promise that is fulfilled after the browser's cache is cleared.
         * @function
         * @memberof Web.BrowserTO#
         */
        clearCache: {
            wiredName: clearCacheWiredName,
            exec: function(){
                return this._executeWithEvents(arguments, clearCacheWiredName);
            }
        },
        /*jshint eqnull:true */
        /**
         * Resizes the browser window to the specified dimensions.
         * @param {Size | number} sizeOrWidth If a Size object is passed, it will resize according to the object. If a number
         * is passed, it will be interpreted as a width.
         * @param {number} [height] If the first parameter is a full Size object, this parameter is ignored.
         * @returns {Promise<void>} a promise that is fulfilled after resizing the browser.
         * @function
         * @memberof Web.BrowserTO#
         */
        resizeTo: {
            wiredName: resizeToWiredName,
            exec: function(sizeOrWidth,height){
                var sizeObj;

                if(arguments.length === 0 || sizeOrWidth === null)
                    throw new Error("You must pass width and height (number), or a size object");

                if(arguments.length == 1){
                    if(typeof sizeOrWidth !== "object")
                        throw new Error("You must pass width and height (number), or a size object");

                    sizeObj = arguments[0];

                    if(sizeObj.width == null || sizeObj.height == null)
                        throw new Error("the argument does not contain the width or height keys or both");
                }
                else{
                    if(!(arguments[0] !== null && arguments[1] !== null))
                        throw new Error("You can't pass null to resizeTo()");

                    sizeObj = {width: sizeOrWidth, height: height};
                }

                return this._executeWithEvents(arguments ,resizeToWiredName, Convert.toNumber(sizeObj.width), Convert.toNumber(sizeObj.height));
            }
        },
        /**
         * Opens a new tab in the browser window.
         * @returns {Promise<void>} a promise that is fulfilled after a new tab opened in the browser.
         * @function
         * @memberof Web.BrowserTO#
         */
        openNewTab: {
            wiredName: openNewTabWiredName,
            exec: function(){
                return this._executeWithEvents(arguments, openNewTabWiredName);
            }
        },
        /**
         * Closes all tabs (if any) and closes the browser window. <br/>
         * Use the close() method to close only the currently open tab.<br/><br/>
         * Limitation: Your Internet Explorer (IE) browser must be configured to "Always close all tabs". To do this, open two or more tabs in IE. Then close IE. In the message
         * box that pops up, select the "Always close all tabs" option.<br/><br/> <!-- 25954 -->
         * Note: This method is not supported on Chrome. Use the Close method instead.
         * @returns {Promise<void>} a promise that is fulfilled after all tabs (if any) are closed in the browser.
         * @function
         * @memberof Web.BrowserTO#
         */
        closeAllTabs: {
            wiredName: closeAllTabsWiredName,
            exec: function(){
                return this._executeWithEvents(arguments, closeAllTabsWiredName);
            }
        },
        /**
         * Controls the browser's full screen mode.
         * If the full screen mode is not passed the method toggles the browser between full-screen mode and normal mode.
         * @param {Web.FullScreenMode} [mode] Indicates whether to set the browser to full screen or normal mode.
         * @returns {Promise<void>} a promise that is fulfilled after the full screen operation ends.
         * @function
         * @memberof Web.BrowserTO#
         */
        fullScreen: {
            wiredName: fullScreenWiredName,
            exec: function(mode) {
                if (!mode) {
                    return this._executeWithEvents(arguments, fullScreenWiredName);
                }
                else {
                    return this._executeWithEvents(arguments, fullScreenWiredName, FullScreenMode._convert(mode));
                }
            }
        },
        /*jshint eqnull:true */
        /**
         * Runs this JavaScript each time a page or frame loads or refreshes in the browser. <br/>
         * Note: <br/>
         * - The script remains embedded until you close the browser, or until the run session ends.<br/>
         * - Using this method to perform alert operations may result in unexpected behavior.<br/>
         * - To run this method, the security settings in your Web browser must be set to allow active scripting; otherwise, steps using this method will fail.
         * @param {Function | string} scriptToEmbed The full content of the JavaScript to embed.
         * @param {string} functionName Optional: the name of the function.
         * @returns {Promise<void>} a promise that is fulfilled after the script has been embedded.
         * @function
         * @memberof Web.BrowserTO#
         */
        embedScript: {
            wiredName: embedScriptWiredName,
            exec: function(scriptToEmbed, functionName){
                if(scriptToEmbed == null)
                    throw new Error("You must pass parameter to embedScript() method");

                if(typeof scriptToEmbed !== "string"){
                    var script_name = scriptToEmbed.name;
                    scriptToEmbed = scriptToEmbed.toString().replace(/(\r\n|\n|\r|\s)/gm,""); //removes new line and spaces

                    if(scriptToEmbed.match("^function") !== null) {
                        var prefix = "";
                        if((script_name == null || script_name.length === 0) && functionName != null) //anonymous function with function_name arg supplied
                            prefix = "function " + functionName;
                        else
                            prefix = "function ";

                        scriptToEmbed = scriptToEmbed.replace(/^function/, prefix);
                    }
                }

                return this._executeWithEvents(arguments, embedScriptWiredName, scriptToEmbed);
            }
        },
        /**
         * Navigates to the next page in the browser history list.
         * Note: This method is identical to clicking the browser's <b>Forward</b> button.
         * @returns {Promise<void>} a promise that is fulfilled after the browser navigates to the next page in the browser history list.
         * @function
         * @memberof Web.BrowserTO#
         */
        forward: {
            wiredName: forwardWiredName,
            exec: function(){
                return this._executeWithEvents(arguments, forwardWiredName);
            }
        },
        /**
         * Returns the text displayed in a browser message box, such as an alert, confirmation, or prompt.
         * @returns {Promise<void>} a promise that is fulfilled after the text displayed in a browser message box, such as an alert, confirmation, or prompt has been captured.
         * @function
         * @memberof Web.BrowserTO#
         */
        getDialogText: {
            wiredName: getDialogTextWiredName,
            exec: function(){
                return this._executeWithEvents(arguments, getDialogTextWiredName);
            }
        },
        /**
         * Indicates whether the browser message box is currently open.
         * @returns {Promise<boolean>} a promise that is fulfilled with a boolean indication whether the browser message box is currently open.
         * @function
         * @memberof Web.BrowserTO#
         */
        hasDialog: {
            wiredName: hasDialogWiredName,
            exec: function(){
                return this._executeWithEvents(arguments, hasDialogWiredName);
            }
        },
        /**
         * Clicks a button on the alert, confirmation, or prompt message box.
         * @param {Web.DialogButton} dialogAction The button to click. Default: OK
         * @returns {Promise<void>} a promise that is fulfilled after clicking the dialog button.
         * @function
         * @memberof Web.BrowserTO#
         */
        handleDialog: {
            wiredName: handleDialogWiredName,
            exec: function(dialogAction){
                if(dialogAction === undefined) {
                    dialogAction = "ok";
                } else if(typeof dialogAction === "string") {
                    dialogAction = dialogAction.toLowerCase();
                    if(dialogAction != "ok" && dialogAction != "cancel")
                        throw new Error("When passing parameter to handleDialog() method, 'ok' or 'cancel' are the only allowed strings");
                }else{ //non string
                    throw new Error("When passing parameter to handleDialog() method, 'ok' or 'cancel' are the only allowed strings");
                }

                dialogAction = dialogAction == "ok" ? 0 : 1;

                return this._executeWithEvents(arguments, handleDialogWiredName, dialogAction);
            }
        },
        /*jshint eqnull:true */
        /**
         * Enters text in the browser's prompt message box and clicks the OK button.
         * @param {string} text The text to enter in the edit field.
         * @returns {Promise<void>} a promise that is fulfilled after editing the field and clicking on the OK button in the dialog.
         * @function
         * @memberof Web.BrowserTO#
         */
        handlePromptDialog: {
            wiredName: handleDialogWiredName,
            exec: function(text){
                if(text == null)
                    throw new Error("handlePromptDialog() must accept text parameter");

                return this._executeWithEvents(arguments, handleDialogWiredName, 0, Convert.toString(text));
            }
        },
        /**
         * @param {string} [origin] The full or partial domain of the source. <br/>
         * If no arguments are passed: Deletes all cookies from the browser.<br/>
         * If an argument is passed: Deletes only cookies that originated from the browser source.<br/>
         * For example, entering <b>MySite.com</b> or <b>MySite.net</b> clears cookies only from the specified site, whereas entering <b>MySite</b> clears cookies from all related domains. <br/>
         * Note: This method does not clear the browser's cache. Use clearCache() to clear the cache.
         * @returns {Promise<void>} a promise that is fulfilled after deleting the cookies.
         * @function
         * @memberof Web.BrowserTO#
         */
        deleteCookies: {
            wiredName: deleteCookiesWiredName,
            exec: function(origin) {
                if (arguments.length === 0)
                    return this._executeWithEvents(arguments, deleteCookiesWiredName);

                if (typeof arguments[0] !== "string")
                    throw new Error("When you pass parameter to deleteCookies() it must be a source name (string)");

                return this._executeWithEvents(arguments, deleteCookiesWiredName, origin);
            }
        },
        /**
         * Returns a collection of browsers (tabs), which are in the same window as the current tab.
         * @returns {Promise<Web.BrowserTO[]>} a promise that is fulfilled with an array of all the requested browsers.
         * @function
         * @memberof Web.BrowserTO#
         */
        siblingTabs: {
            wiredName: siblingTabsWiredName,
            exec: function(){
                return this._executeWithEvents(arguments,siblingTabsWiredName);
            }
        },

        _canParticipateInOptimizedPath: function() {
            return false;
        }
    },

    _helpers: {
        _getParsedBrowserVersion: function (browserVersion) {
            browserVersion = browserVersion.trim().split(" ");
            return {
                version: browserVersion.pop(),
                type: browserVersion.join(" ")
            };
        },

        _getApplicationInfo: function () {
            var browserInfo;
            if(this._applicationInfo){
                browserInfo = this._applicationInfo.version ?
                this._getParsedBrowserVersion(this._applicationInfo.version)
                :{};
            }
            if(this._envInfo) {
                if(this._envInfo.platform) {
                    browserInfo.osType = this._envInfo.platform.name;
                    browserInfo.osVersion = this._envInfo.platform.version;
                }
                if(this._envInfo.host) {
                    browserInfo.resolution = this._envInfo.host.resolution;
                }
            }
            return browserInfo || {};
        },

        _release: function () {
            return this._executeWithEventsWithName(arguments, "Release", "release");
        }
    }
};

/**
 * @typedef {Object} DialogButton - Possible dialog button types
 * @property {string} ok  The ok button type.
 * @property {string} cancel  The cancel button type.
 * @memberof Web
 */
var DialogButton = {
    ok: "ok",
    cancel: "cancel"
};

/**
 * @typedef {Object} FullScreenMode - Values for the FullScreen(mode) parameter.
 * @property {string} off Exits Full Screen mode. Does nothing if the browser is already in normal mode.
 * @property {string} on  Sets the  browser to full screen mode. Does nothing if the browser is already in full screen mode.
 * @property {string} toggle  Switches a full screen browser to normal mode or a normal mode browser to full screen.
 * @memberof Web
 */
var FullScreenMode = {
    off: "off",
    on: "on",
    toggle: "toggle",

    /**
     * @ignore
     */
    _convertToRuntime: {
        off: 0,
        on: 1,
        toggle: 2
    },

    /**
     * @param {FullScreenMode} mode
     * @returns {*}
     * @ignore
     */
    _convert: function(mode) {
        return FullScreenMode._convertToRuntime[mode.toLowerCase()];
    }
};

/**
 * Used to filter for the desired browser, when invoking the Attach method of the BrowserFactory.
 * @param {Object} [props] Initializes the BrowserFilter using the supplied property bag.
 * @returns {BrowserFilter} the description object that was initialized.
 * @constructor BrowserFilter
 * @memberof Web
 */
function BrowserFilter(props){
    this._init({
        technology: "Web",
        leanftType: "Browser"
    });

    this._defineByPropertyBag(props);
}

/**
 * @ignore
 */
ObjUtils.inherit(BrowserFilter,DescriptionBase,{
    /**
     * The browser's title.
     * @param {string} [title] When provided, this method acts as a setter and sets the title to the specified value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored title;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.BrowserFilter#
     */
    title: function (title) {
        return this._propertyHandler("title", title);
    },
    /**
     * The browser's current URL.
     * @param {string} [url] When provided, this method acts as a setter and sets the URL to the specified value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored URL;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.BrowserFilter#
     */
    url: function (url) {
        return this._propertyHandler("url", url);
    },
    /**
     * The URL from which the object is first opened.
     * @param {string} [url] When provided, this method acts as a setter and sets openURL to the specified value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored openURL;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.BrowserFilter#
     */
    openURL: function (url) {
        return this._propertyHandler("openurl", url);
    },
    /**
     * The object's initial title when first opened.
     * @param {string} [title] When provided, this method acts as a setter and sets openTitle to the specified value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored openTitle;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.BrowserFilter#
     */
    openTitle: function (title) {
        return this._propertyHandler("opentitle", title);
    },

    /**
     * The type of browser.
     * @param {string} [browserType] When provided, this method acts as a setter and sets the type property to the specified value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored type;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Web.BrowserFilter#
     */
    type: function(browserType){
        return this._propertyHandler("version", browserType,
            function(browserType) {
                //converts the browser type to regular expression.
                return browserType === "Firefox" ? /Mozilla Firefox.*/ : new RegExp(browserType + ".*");
            },
            function(versionRegEx) {
                //converts the regular expression back to browser type
                var browserType = versionRegEx.toString().slice(1, versionRegEx.toString().lastIndexOf("/"));  //performs trim(/) from the string
                browserType = browserType.slice(0, browserType.length - 2); //removes the last .*
                return browserType === "Mozilla Firefox" ? "Firefox" : browserType;
            }
        );
    },

    /**
     * Sets a browser description capability to the given value.
     * @param {string} capability The name of the capability whose value to set.
     * @param {string} value The new value of the capability.
     * @returns {Web.BrowserFilter} Returns 'this' for use with the builder pattern.
     * @memberof Web.BrowserFilter#
     */
    set: function(capability, value){
        if(capability == null)
            return this;

        var ignoredCaseCapability = ObjUtils.findKeyNameIgnoreCase(this, capability);
        if (ignoredCaseCapability == null){
            this._properties[capability] = value;
            return this;
        }

        this[ignoredCaseCapability].call(this, value);
        return this;
    },

    /**
     * Returns the current value of a browser description capability.
     * @param {string} capability The name of the capability whose value to return.
     * @returns {*} The current value of a browser description capability.
     * @memberof Web.BrowserFilter#
     */
    get: function(capability) {
        var ignoredCaseCapability = ObjUtils.findKeyNameIgnoreCase(this, capability);
        if (ignoredCaseCapability == null){
            return this._properties[capability];
        }
        return this[ignoredCaseCapability].call(this);
    },

    /*jshint unused:true, eqnull:true */
    _defineByPropertyBag: function(props){
        if(props == null)
            return;
        for(var key in props){
            this.set(key, props[key]);
        }
    }
});

//remove the vri property for the device description
BrowserFilter.prototype.index = undefined;

//remove the vri property for the device description
BrowserFilter.prototype.vri = undefined;

module.exports.Browser = Browser;
module.exports.DialogButton = DialogButton;
module.exports.FullScreenMode = FullScreenMode;
module.exports.BrowserFilter = BrowserFilter;
