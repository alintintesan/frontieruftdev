// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/30/2015.
 * This file will contain the implementation of Web Image test object and description.
 */

var ObjUtils = require("leanft.sdk.core").ObjectUtils;
var ClickBehavior = require("leanft.sdk.core").ClickBehavior;
var DragAndDropBehavior = require("leanft.sdk.core").DragAndDropBehavior;
var WebBase = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var WebElement = require("./webelement.js");
var LinkBase = require("./link_base.js");

/**
 * @typedef {Object} ImageTypes - Supported image types.
 * Used for conversions of image type.
 * @property {string} normal  A normal image without any special meaning.
 * @property {string} button  An image contained in an input element (input type="image").
 * @property {string} clientImageMap  An image that is part of a client-side image map (relevant for area objects).
 * @property {string} clientAndServerImageMap  An image that is both a client image map and a server image map.
 * @property {string} serverImageMap  An image defined as a server-side image map.
 * @property {string} link  An image contained in an anchor element.
 * @memberof Web
 */
var ImageTypes = {
    /*
     * A normal image without any special meaning.
     */
    normal: "normal",
    /*
     * An image contained in an input element (input type="image").
     */
    button: "button",
    /*
     * An image that is part of a client-side image map (relevant for area objects).
     */
    clientImageMap: "clientImageMap",
    /*
     * An image that is both a client image map and a server image map.
     */
    clientAndServerImageMap: "clientAndServerImageMap",
    /*
     * An image defined as a server-side image map.
     */
    serverImageMap: "serverImageMap",
    /*
     * An image contained in an anchor element.
     */
    link: "link"
};

var ImageTypesLinker = {
    normal: "Plain Image",
    button: "Image Button",
    clientImageMap: "Client Side ImageMap",
    clientAndServerImageMap: "Client & Server Side ImageMap",
    serverImageMap: "Server Side ImageMap",
    link: "Image Link"
};

var imageTypeToNative = function(value){
    var key = value.toLowerCase();
    var convert = Object.keys(ImageTypesLinker).filter(function(convertKey){
        return convertKey.toLowerCase() === key;
    });
    if(convert.length !== 1)
        throw new Error("You must supply a valid imageType");

    return ImageTypesLinker[convert[0]];
};

var nativeToImageType = function(value){
    var results = Object.keys(ImageTypesLinker).filter(function(key) {
        return ImageTypesLinker[key] === value;
    });

    if(results.length === 1)
        return results[0];

    throw new Error("Enum imageType name not found");
};

/**
 * Common methods for the Image description
 * @memberof Web
 * @ignore
 */
var ImageDescriptionBehavior = {
    /**
     * The image's tooltip text.
     * @param {string} [alt] When provided, this method acts as a setter and sets the alt value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored alt value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    alt: function(alt){
        return this._propertyHandler("alt", alt);
    },
    /**
     * The image source in URL format.
     * @param {string} [src] When provided, this method acts as a setter and sets the src value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored src value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    src: function(src){
        return this._propertyHandler("src", src);
    },
    /**
     * The image type.
     * Possible values: 'Normal', 'Button', 'ClientImageMap', 'ClientAndServerImageMap', 'ServerImageMap', 'Link'
     * @param {Web.ImageTypes} [imageType] When provided, this method acts as a setter and sets the image type value.
     * @returns {Web.ImageTypes | Description} If no parameter is provided, the method acts as a getter and returns the current stored image type value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    type: function(imageType){
        return this._propertyHandler("image type", imageType, imageTypeToNative, nativeToImageType);
    }
};

/**
 * The description of a Web Image test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {Image} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.WebElementDescriptionBehaviour
 * @mixes Web.LinkBaseDescriptionBehavior
 * @mixes Web.ImageDescriptionBehavior
 */
function Image(props) {

    var imageDes = new WebBaseDesc("Image");

    ObjUtils.extend(imageDes, WebElement.WebElementDescriptionBehaviour);
    ObjUtils.extend(imageDes, LinkBase.LinkBaseDescriptionBehavior);
    ObjUtils.extend(imageDes, ImageDescriptionBehavior);

    imageDes._defineByPropertyBag(props);

    return imageDes;
}

/**
 * An Web image element in the HTML. <br/>
 * @example
 * <img src="myImage.png"/>
 * <!-- an image link that, when clicked, navigates to another URL -->
 * <a href="http://www.google.com">
 *     <img src="googleLogo.png"/>
 * </a>
 * @class ImageTO
 * @memberof Web
 * @constructor
 * @extends Web.WebBaseTestObject
 * @mixes Web.WebElementTOBehavior._properties
 * @mixes Web.WebElementTOBehavior._methods
 * @mixes ClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes Web.LinkBaseTestObjectBehavior._properties
 * @mixes Web.ImageTOBehavior._properties
 */
function ImageTO(session, description) {
    description = description || Image();
    var imageTO = new WebBase("Image", session, description);

    imageTO._mergeBehavior(ClickBehavior);
    imageTO._mergeBehavior(DragAndDropBehavior);
    imageTO._mergeBehavior(WebElement.WebElementTOBehavior);
    imageTO._mergeBehavior(LinkBase.LinkBaseTestObjectBehavior);
    imageTO._mergeBehavior(ImageTOBehavior);

    return imageTO;
}

//Consts
var imageTypeWiredName = "image type";

/**
 * Common methods for Image test object
 * @memberof Web
 * @ignore
 */
var ImageTOBehavior = {
    /**
     * @memberof Web.ImageTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The image's tooltip text.
         * @returns {Promise<string>} a promise this is fulfilled with the image's tooltip text.
         * @function
         */
        alt: {

        },

        /**
         * The image source in URL format.
         * @returns {Promise<string>} a promise this is fulfilled with the image source in URL format.
         * @function
         */
        src: {

        },

        /**
         * Returns the image type.
         * @function
         * @returns {Promise<ImageTypes>} a promise this is fulfilled with the image type.
         * @function
         */
        type: {
            type: 'enum',
            enumType: ImageTypes,
            enumName: 'ImageType',
            wiredName: imageTypeWiredName,
            getter: function () {
                return this._getROProperty(imageTypeWiredName, arguments).then(nativeToImageType);
            }
        }
    }
};

module.exports.Image = Image;
module.exports.ImageTO = ImageTO;
module.exports.ImageDescriptionBehavior = ImageDescriptionBehavior;
module.exports.ImageTOBehavior = ImageTOBehavior;
module.exports.ImageTypes = ImageTypes;


