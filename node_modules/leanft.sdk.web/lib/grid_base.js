// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 19/08/2018.
 * This file contains the definition of the Base Grid test objects
 */

var Convert = require("leanft.sdk.core").Convert;
var Core = require("leanft.sdk.core");
var StringUtils = Core.StringUtils;

/**
 * @memberof Web
 * @ignore
 */
var GridBaseDescriptionBehavior = {
    /**
     * An array of column headers.
     * @param {string[]} [colNamesArr] When provided, this method acts as a setter and sets the columnHeaders value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored columnHeaders value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    columnHeaders: function(colNamesArr){
        return this._propertyHandler("columns", colNamesArr, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    },
    /**
     * The number of rows in the table, including the header.
     * @param {number} [rowsCount] When provided, this method acts as a setter and sets the rowsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored rowsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    rowsCount: function(rowsCount){
        return this._propertyHandler("row count", rowsCount);
    },
    /**
     * The number of columns in the table.
     * @param {number} [columnsCount] When provided, this method acts as a setter and sets the columnsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored columnsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    columnsCount: function(columnsCount){
        return this._propertyHandler("column count", columnsCount);
    }
};

//Consts
var scrollToRowWithCellTextWiredName = "ScrollToCellContent";
var columnNamesWiredName = "columns";
var findRowWiredName = "GetRowWithCellText";

/**
 * @memberof Web
 * @ignore
 */
var GridBaseTOBehavior = {
    /**
     * @memberof Web.GridBaseTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * A collection of column headers.
         * @returns {Promise<string[]>} a promise that is fulfilled with the collection of column headers.
         * @function
         */
        columnHeaders: {
            wiredName: columnNamesWiredName,
            getter: function () {
                return this._getROProperty(columnNamesWiredName, arguments).then(StringUtils.splitFunc(";"));
            }
        }
    },

    _methods: {
        /*jshint eqnull:true */
        /**
         * Finds the row with the specified text in the specified column, in cases where the text or columnHeader may appear more than once.
         * Scrolls to the found row if one exists.
         * <br>Usage examples:
         * <br>// This example finds the 2nd occurrence of the text "Portuguese" in the 3rd column
         * <br>var row = grid.findRowByTextMatch({ text: "Portuguese", occurrence: 1 }, { column: 2 } );
         * <br>// This example finds the 3rd occurrence of the text "Portuguese" in the 2nd column with the header "Language"
         * <br>var row = grid.findRowByTextMatch({ text: "Portuguese", occurrence: 2 }, { column: "Language", occurrence: 1} );
         * @param {object} textMatch Description of the text we are looking for, format:
         * @param {string} textMatch.text - The text to search for.
         * @param {number} [textMatch.occurrence] - 0-based ordinal number of the text's occurrence.
         * @param {object} columnToSearch The column number or column header in which to search for the text, format:
         * @param {string|number} columnToSearch.column - 0-based column index or column's name
         * @param {number} [columnToSearch.occurrence] - 0-based ordinal number of the column name's appearance. Used only if column header is specified, and the table has multiple columns with the same name.
         * @returns {Promise<TableCell[]>} a promise that is fulfilled with an array of cells for the requested row if one exists.
         * @throws Error if the requested row cannot be found or error occurs during execution.
         * @function
         */
        findRowByTextMatch: {
            wiredName: scrollToRowWithCellTextWiredName,
            exec: function (textMatch, columnToSearch) {
                var isColumnIndexSet = typeof columnToSearch.column === 'number';
                var column = isColumnIndexSet ? columnToSearch.column + 1 : columnToSearch.column;
                var args = [arguments, scrollToRowWithCellTextWiredName, column, textMatch.text];

                if (textMatch.occurrence != null) {
                    args.push(textMatch.occurrence);
                }

                if (columnToSearch.occurrence != null) {
                    if (isColumnIndexSet) {
                        throw new Error("ArgumentException: columnToSearch.occurrence is relevant only when specifying a column name.");
                    }
                    //cannot set 2nd optional parameter without specifying the 1st
                    if (textMatch.occurrence == null) {
                        args.push(0);
                    }
                    args.push(columnToSearch.occurrence);
                }

                return this._executeWithEventsOnError.apply(this, args)
                    .then(function (rowNumber) {
                        if (rowNumber === -1)
                            return null;
                        rowNumber = rowNumber - 1; //0 base index.

                        return this._getROPropertyWithoutEvents(this._columnCountPropName).then(this._initRowInTable.bind(this, rowNumber));
                    }.bind(this));
            }
        },

        /**
         * Selects the specified cell in the grid.
         * @function
         * @param {number} row 0-based row index.
         * @param {string|number} columnOrIndex The column header or 0-based column index.
         * @returns {Promise<void>} a promise that is fulfilled when the selectCell operation ends.
         * @memberof Java.TableTO#
         */
        selectCell: function (row, columnOrIndex) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnOrIndex == null)
                throw new Error("ArgumentException: columnOrIndex is required.");

            column = isNaN(columnOrIndex) ? columnOrIndex : Convert.toNumber(columnOrIndex) + 1;

            return this._executeWithEvents(arguments, "SelectCell", Convert.toNumber(row) + 1, column);
        }
    },


    _helpers: {
        /*jshint eqnull:false */
        _rowCountPropName: "row count",

        _columnCountPropName: "column count",

        /*jshint eqnull:true */
        /**
         * Finds the first row with the specified text in the specified column, starting from the specified row.
         * @param {string} cellText Text to find.
         * @param {number|string} [column] The 0-based column index or column header.
         * @param {number} [startFromRow = 0] The index from which to start the search.
         * @returns {Promise<TableCell[]>} a promise that is fulfilled either with an array of cells for the requested row, or fulfilled with null if no match was found.
         * @function
         * @ignore
         */
        _findRow: function (cellText, column, startFromRow) {
            if (typeof column === 'number') {
                column = column + 1;
            }
            if (column == null) {
                column = 0;   
            }
            
            startFromRow = startFromRow != null ? Convert.toNumber(startFromRow) + 1 : 0;

            return this._executeWithEventsOnError(arguments, findRowWiredName, cellText, column, startFromRow)
                .then(function (rowNumber) {
                    if (rowNumber === -1)
                        return null;
                    rowNumber = rowNumber - 1; //0 base index.

                    return this._getROPropertyWithoutEvents(this._columnCountPropName).then(this._initRowInTable.bind(this, rowNumber));
                }.bind(this));
        }
    },

    _additionalProperties: {
        rowsCount: {type: "uint", wiredName: "row count"},
        columnsCount: {type: "uint", wiredName: "column count"}
    }
};

module.exports.GridBaseDescriptionBehavior = GridBaseDescriptionBehavior;
module.exports.GridBaseTOBehavior = GridBaseTOBehavior;