// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/30/2015.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var ClickBehavior = Core.ClickBehavior;
var WebBase = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var WebElement = require("./webelement.js");
var HelperFuncs = require("./helper_behaviors.js").HelperFuncs;
var Image = require("./image.js");
var LinkBase = require("./link_base.js");
var DragAndDropBehavior = Core.DragAndDropBehavior;
var StringUtils = Core.StringUtils;

/**
 * Common methods for Area description
 * @ignore
 * @memberof Web
 */
var AreaDescriptionBehavior = {
    /**
     * The name of the map element that this image uses to define the area inside the image.
     * @param {string} [mapName] When provided, the name of the map element that this image uses to define the area inside the image.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the name of the map element that this image uses to define the area inside the image;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    mapName: function(mapName){
        return this._propertyHandler("map name", mapName);
    },
    /**
     * The coordinates of the Area's vertices (points). in an image map.
     * The coordinate format is determined by the shape of the area, for example:
     * shape="rect" - x1,y1,x2,y2
     * shape="circle" - x,y,radius
     * shape="poly" - x1,y1,x2,y2,..,xn,yn
     * @param {number[]} [coordsArr] When provided, the coordinates of the Area's vertices (points) in an image map.
     * @returns {number[] | Description} If no parameter is provided, the method acts as a getter and returns the coordinates of the Area's vertices (points) in an image map;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    coords: function(coordsArr){ // int[]
        return this._propertyHandler("coords", coordsArr, StringUtils.joinFunc(","), function (valueToReturn) {
            return valueToReturn.split(",").map(Number);
        });
    }
};


/**
 * @param {Object} [props] Initialization of the description object using the given property bag.
 * @returns {Area} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.WebElementDescriptionBehaviour
 * @mixes Web.LinkBaseDescriptionBehavior
 * @mixes Web.ImageDescriptionBehavior
 * @mixes Web.AreaDescriptionBehavior
 */
function Area(props) {

    var areaDes = new WebBaseDesc("Area");

    ObjUtils.extend(areaDes, WebElement.WebElementDescriptionBehaviour);
    ObjUtils.extend(areaDes, LinkBase.LinkBaseDescriptionBehavior);
    ObjUtils.extend(areaDes, Image.ImageDescriptionBehavior);
    ObjUtils.extend(areaDes, AreaDescriptionBehavior);

    areaDes._defineByPropertyBag(props);

    return areaDes;
}

/**
 * A section of an image on a Web page (usually a section of a client-side image map).
 * @class AreaTO
 * @extends Web.WebBaseTestObject
 * @mixes ClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes Web.WebElementTOBehavior._properties 
 * @mixes Web.WebElementTOBehavior._methods
 * @mixes Web.LinkBaseTestObjectBehavior._properties
 * @mixes Web.ImageTOBehavior._properties
 * @mixes Web.AreaTOBehavior._properties
 * @memberof Web
 */
function AreaTO(session, description) {
    description = description || Area();
    var areaTO = new WebBase("WebArea", session, description);

    areaTO._mergeBehavior(ClickBehavior);
    areaTO._mergeBehavior(DragAndDropBehavior);
    areaTO._mergeBehavior(WebElement.WebElementTOBehavior);
    areaTO._mergeBehavior(LinkBase.LinkBaseTestObjectBehavior);
    areaTO._mergeBehavior(Image.ImageTOBehavior);
    areaTO._mergeBehavior(AreaTOBehavior);

    return areaTO;
}

/**
 * Common methods for Area test object
 * @memberof Web
 * @ignore
 */
var AreaTOBehavior = {
    /**
     * @memberof Web.AreaTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the name of the map element that this image uses to define the area inside the image.
         * @returns a promise that is fulfilled with the name of the map element that this image uses to define the area inside the image.
         * @function
         */
        mapName: {
            wiredName: "map name"
        },
        /**
         * Returns the coordinates of the area's vertices (points) in an image map.
         * @returns a promise that is fulfilled with the coordinates of the area's vertices (points) in an image map.
         * @function
         */
        coords: {
            getter: function () {
                return this._getROProperty("coords", arguments).then(function (ret_value) {
                    return ret_value.split(",").map(Number);
                });
            }
        }
    }
};

module.exports.Area = Area;
module.exports.AreaTO = AreaTO;
module.exports.AreaDescriptionBehavior = AreaDescriptionBehavior;

