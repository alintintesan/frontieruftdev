// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 14/10/2015.
 * This file contains all the functionality that is needed for the Link test object including
 * TestObject constructor, description constructor , and appropiate behaviors.
 */

var ObjUtils = require("leanft.sdk.core").ObjectUtils;
var ClickBehavior = require("leanft.sdk.core").ClickBehavior;
var DragAndDropBehavior = require("leanft.sdk.core").DragAndDropBehavior;
var WebBase = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var WebElement = require("./webelement.js");
var LinkBase = require("./link_base.js");

/**
 * @memberof Web
 * @ignore
 */
var LinkDescriptionBehaviour = {
    /**
     * The font for the link.
     * @param {string} [fontName] When provided, this method acts as a setter and sets the fontName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored fontName value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    fontName: function(fontName){
        return this._propertyHandler("font", fontName);
    },
    /**
     * The link's background color.
     * @param {string} [backgroundColor] When provided, this method acts as a setter and sets the backgroundColor value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored backgroundColor value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    backgroundColor: function(backgroundColor){
        return this._propertyHandler("background color", backgroundColor);
    },
    /**
     * The color of the link.
     * @param {string} [color] When provided, this method acts as a setter and sets the color value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored color value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    color: function(color){
        return this._propertyHandler("color", color);
    }
};


/**
 * The description of a Web Link test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {Link} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.WebElementDescriptionBehaviour
 * @mixes Web.LinkBaseDescriptionBehavior
 * @mixes Web.LinkDescriptionBehaviour
 */
function Link(props) {

    var linkDes = new WebBaseDesc("Link");

    ObjUtils.extend(linkDes, WebElement.WebElementDescriptionBehaviour);
    ObjUtils.extend(linkDes, LinkBase.LinkBaseDescriptionBehavior);
    ObjUtils.extend(linkDes, LinkDescriptionBehaviour);

    linkDes._defineByPropertyBag(props);

    return linkDes;
}

/**
 * A Web hyperlink (or anchor) object.
 * @class LinkTO
 * @memberof Web
 * @constructor
 * @extends Web.WebBaseTestObject
 * @mixes Web.WebElementTOBehavior._properties
 * @mixes Web.WebElementTOBehavior._methods
 * @mixes ClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes Web.LinkBaseTestObjectBehavior._properties
 * @mixes Web.LinkTOBehavior._methods
 * @mixes Web.LinkTOBehavior._properties
 */
function LinkTO(session, description) {
    description = description || Link();
    var linkTO = new WebBase("Link", session, description);

    linkTO._mergeBehavior(ClickBehavior);
    linkTO._mergeBehavior(DragAndDropBehavior);
    linkTO._mergeBehavior(WebElement.WebElementTOBehavior);
    linkTO._mergeBehavior(LinkBase.LinkBaseTestObjectBehavior);
    linkTO._mergeBehavior(LinkTOBehavior);
    return linkTO;
}

/**
 * @memberof Web
 * @ignore
 */
var LinkTOBehavior = {
    /**
     * @memberof Web.LinkTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the link's font name.
         * @return    {Promise<string>} a promise this is fulfilled with the link's font name.
         * @function
         */
        fontName: {
            wiredName: "font"
        },
        /**
         * Returns the link's background color.
         *@return    {Promise<string>} a promise this is fulfilled with the link's background color.
         * @function
         */
        backgroundColor: {
            wiredName: "background color"
        },
        /**
         * Returns the link's color.
         * @return    {Promise<string>} a promise this is fulfilled with the link's color.
         * @function
         */
        color: {

        }
    },

    _additionalNativeProperties: {
        text: {sdkName: "innerText"}
    }
};

module.exports.Link = Link;
module.exports.LinkTO = LinkTO;
module.exports.LinkDescriptionBehaviour = LinkDescriptionBehaviour;