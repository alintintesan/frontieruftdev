// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/14/2015.
 */

var ObjUtils = require("leanft.sdk.core").ObjectUtils;
var ClickBehavior = require("leanft.sdk.core").ClickBehavior;
var DragAndDropBehavior = require("leanft.sdk.core").DragAndDropBehavior;
var WebBase = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var WebElement = require("./webelement.js");
var Convert = require("leanft.sdk.core").Convert;
var Core = require("leanft.sdk.core");
var StringUtils = Core.StringUtils;
var IsEnabledBehavior = require("./helper_behaviors.js").IsEnabledBehavior;
var IsEnabledTOBehavior = require("./helper_behaviors.js").IsEnabledTOBehavior;

/**
 * @memberof Web
 * @ignore
 */
var TabStripDescriptionBehavior = {
    /**
     * An array of all tab names in this object.
     * @param {string[]} [tabs] When provided, this method acts as a setter and sets the tabs value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored tabs value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    tabs: function(tabs){
        return this._propertyHandler("all items", tabs, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    },

    /**
     * The number of tabs in this object.
     * @param {number} [count] When provided, this method acts as a setter and sets the tabsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored tabsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    tabsCount: function(count){
        return this._propertyHandler("items count", count, null, null, Convert.toNumber);
    },

    /**
     * The first tab in the list of tabs in the tab strip object.
     * @param {string} [value] When provided, this method acts as a setter and sets the firstTab value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored firstTab value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    firstTab: function(value) {
        return this._propertyHandler("first item", value);
    }
};

/**
 * The description of a Web TabStrip test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {TabStrip} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.WebElementDescriptionBehaviour
 * @mixes Web.TabStripDescriptionBehavior
 * @mixes Web.IsEnabledBehavior
 */
function TabStrip(props) {

    var tabStripDes = new WebBaseDesc("TabStrip"); // leanFTType

    ObjUtils.extend(tabStripDes, IsEnabledBehavior);
    ObjUtils.extend(tabStripDes, WebElement.WebElementDescriptionBehaviour);
    ObjUtils.extend(tabStripDes, TabStripDescriptionBehavior);

    tabStripDes._defineByPropertyBag(props);

    return tabStripDes;
}

/**
 * A tab strip control in a Web page or application.
 * @class TabStripTO
 * @memberof Web
 * @constructor
 * @extends Web.WebBaseTestObject
 * @mixes Web.WebElementTOBehavior._properties
 * @mixes Web.WebElementTOBehavior._methods
 * @mixes ClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes Web.TabStripTestObjectBehavior._properties
 * @mixes Web.TabStripTestObjectBehavior._methods
 * @mixes Web.IsEnabledTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 */
function TabStripTO(session, description) {
    description = description || TabStrip();
    var tabStripTO = new WebBase("WebTabStrip", session, description); // native class

    tabStripTO._mergeBehavior(ClickBehavior);
    tabStripTO._mergeBehavior(DragAndDropBehavior);
    tabStripTO._mergeBehavior(IsEnabledTOBehavior);
    tabStripTO._mergeBehavior(WebElement.WebElementTOBehavior);
    tabStripTO._mergeBehavior(TabStripTestObjectBehavior);
    return tabStripTO;
}

//Consts
var allItemsWiredName = "all items";
var selectWiredName = "Select";

/**
 * @memberof Web
 * @ignore
 */
var TabStripTestObjectBehavior = {
    /**
     * @memberof Web.TabStripTestObjectBehavior
     * @ignore
     */
    _properties: {
        /**
         * An array of strings containing the names of the tabs in the tab strip object.
         * @returns {Promise<string[]>} a promise that is fulfilled with an array of strings containing the names of the tabs in the tab strip object.
         * @function
         */
        tabs: {
            wiredName: allItemsWiredName,
            getter: function () {
                return this._getROProperty(allItemsWiredName, arguments).then(StringUtils.splitFunc(";"));
            }
        },

        /**
         * Returns first tab in the list of tabs in the tab strip object.
         * @returns {Promise<string>} a promise fulfilled with the first tab in the list of tabs in the tab strip object.
         * @private
         * @ignore
         */
        _firstTab: {
            wiredName: "first item"
        }
    },

    /**
     * @memberof Web.TabStripTestObjectBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Selects the specified tab.
         * @param {...string | number} selectValue The selection value of the specified tab.
         * @returns {Promise<void>} a promise that is fulfilled with the selection of the specified tab.
         * @function
         */
        select: {
            wiredName: selectWiredName,
            exec: function (selectValue) {
                if (selectValue == null)
                    throw new Error("You must pass one argument to select() method");

                if (typeof selectValue !== "number" && typeof selectValue !== "string")
                    throw new Error("Only number or string is allowed to pass to select() method");

                return this._executeWithEvents(arguments, selectWiredName, selectValue);
            }
        }
    },

    _additionalProperties: {
        tabsCount: {type: "uint", wiredName: "items count"}
    }
};

module.exports.TabStrip = TabStrip;
module.exports.TabStripTO = TabStripTO;



