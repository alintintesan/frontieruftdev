// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/27/2015.
 */
var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var ClickBehavior = Core.ClickBehavior;
var DragAndDropBehavior = Core.DragAndDropBehavior;
var WebBase = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var WebElement = require("./webelement.js");
var EditFieldBase = require("./edit_field_base.js");
var Convert = Core.Convert;
var Edit =  require("./edit.js");
var FormFieldBehavior = require("./helper_behaviors.js").FormFieldBehavior;
var IsEnabledTOBehavior = require("./helper_behaviors.js").IsEnabledTOBehavior;
var IsEnabledBehavior = require("./helper_behaviors.js").IsEnabledBehavior;

/**
 * @memberof Web
 * @ignore
 */
var NumericFieldDescriptionBehavior = {
    /*jshint eqnull:true */
    /**
     * The current text in this field.
     * @param {number} [value] When provided, this method acts as a setter and sets the value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    value: function(value){
        if(value != null)
            value = Convert.toNumber(value);

        return this._propertyHandler("value", value, Convert.toString, Convert.toNumber);
    },
    /*jshint eqnull:true */
    /**
     * The default value in the edit field.
     * @param {number} [defaultValue] When provided, this method acts as a setter and sets the defaultValue value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored defaultValue value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    defaultValue: function(defaultValue){
        if(defaultValue != null)
            defaultValue = Convert.toNumber(defaultValue);

        return this._propertyHandler("default value", defaultValue, Convert.toString, Convert.toNumber);
    },
    /**
     * The minimum value that can be entered in the field.
     * @param {number} [minVal] When provided, this method acts as a setter and sets the min value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored min value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    min: function(minVal){
        if(minVal != null)
            minVal = Convert.toNumber(minVal);

        return this._propertyHandler("min", minVal, Convert.toString, Convert.toNumber);
    },
    /**
     * The maximum value that can be entered in the field.
     * @param {number} [maxVal] When provided, this method acts as a setter and sets the max value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored max value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    max: function(maxVal){
        if(maxVal != null)
            maxVal = Convert.toNumber(maxVal);

        return this._propertyHandler("max", maxVal, Convert.toString, Convert.toNumber);
    }
};

/**
 * The description of a Web NumericField test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {NumericField} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.WebElementDescriptionBehaviour
 * @mixes Web.EditDescriptionBehavior
 * @mixes Web.EditFieldBaseDescriptionBehavior
 * @mixes Web.FormFieldBehavior
 * @mixes Web.IsEnabledBehavior
 * @mixes Web.NumericFieldDescriptionBehavior
 */
function NumericField(props) {

    var numericFieldDes = new WebBaseDesc("NumericField"); // leanFTType

    ObjUtils.extend(numericFieldDes, IsEnabledBehavior);
    ObjUtils.extend(numericFieldDes, WebElement.WebElementDescriptionBehaviour);
    ObjUtils.extend(numericFieldDes, Edit.EditDescriptionBehavior);
    ObjUtils.extend(numericFieldDes, EditFieldBase.EditFieldBaseDescriptionBehavior);
    ObjUtils.extend(numericFieldDes, FormFieldBehavior);
    ObjUtils.extend(numericFieldDes, NumericFieldDescriptionBehavior);

    numericFieldDes._defineByPropertyBag(props);

    return numericFieldDes;
}

/**
 * A numeric Web form field. <br/>
 * If a browser does not support this field (for example, Internet Explorer 9), LeanFT uses an edit field instead. <br/>
 * @example
 * <input type=number max=50 min=30 step=3/>
 * @class NumericFieldTO
 * @memberof Web
 * @constructor
 * @extends Web.WebBaseTestObject
 * @mixes Web.WebElementTOBehavior._properties
 * @mixes Web.WebElementTOBehavior._methods
 * @mixes ClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes Web.EditFieldBaseTestObjectBehavior._properties
 * @mixes Web.EditFieldBaseTestObjectBehavior._methods
 * @mixes Web.EditTOBehavior._properties
 * @mixes Web.EditTOBehavior._methods
 * @mixes Web.NumericFieldTOBehavior._properties
 * @mixes Web.NumericFieldTOBehavior._methods
 * @mixes Web.IsEnabledTOBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 */
function NumericFieldTO(session, description) {
    description = description || NumericField();
    var numericFieldTO = new WebBase("WebNumber", session, description); // native class

    numericFieldTO._mergeBehavior(ClickBehavior);
    numericFieldTO._mergeBehavior(DragAndDropBehavior);
    numericFieldTO._mergeBehavior(IsEnabledTOBehavior);
    numericFieldTO._mergeBehavior(WebElement.WebElementTOBehavior);
    numericFieldTO._mergeBehavior(EditFieldBase.EditFieldBaseTestObjectBehavior);
    numericFieldTO._mergeBehavior(Edit.EditTOBehavior);
    numericFieldTO._mergeBehavior(NumericFieldTOBehavior);

    return numericFieldTO;
}

//Consts
var defaultValueWiredName = "default value";
var setValueWiredName = "Set";

/**
 * @memberof Web
 * @ignore
 */
var NumericFieldTOBehavior = {
    /**
     * @memberof Web.NumericFieldTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The current value in this field.
         * @returns {Promise<number>} a promise this is fulfilled with the current value in this field.
         * @function
         */
        value: {
            type: 'double',
            getter: function () {
                return this._getROProperty("value", arguments).then(Convert.toNumber);
            }
        },
        /**
         * The initial value in this field, which is set when this field is reset.
         * @returns {Promise<number>} a promise this is fulfilled with the initial value in this field, which is set when this field is reset.
         * @function
         */
        defaultValue: {
            type: 'double',
            wiredName: defaultValueWiredName,
            getter: function () {
                return this._getROProperty(defaultValueWiredName, arguments).then(Convert.toNumber);
            }
        },
        /**
         * The minimum value that can be entered in the field.
         * @returns {Promise<number>} a promise this is fulfilled with the minimum value that can be entered in the field.
         * @function
         */
        min: {
            type: 'double',
            getter: function () {
                return this._getROProperty("min", arguments).then(Convert.toNumber);
            }
        },
        /**
         * The maximum value that can be entered in the field.
         * @returns {Promise<number>} a promise this is fulfilled with the maximum value that can be entered in the field.
         * @function
         */
        max: {
            type: 'double',
            getter: function () {
                return this._getROProperty("max", arguments).then(Convert.toNumber);
            }
        }
    },

    /**
     * @memberof Web.NumericFieldTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the value in the field.
         * @param {number} value Sets the value in the field.
         * @returns {Promise<void>} a promise this is fulfilled after the field is set with the value.
         * @function
         */
        setValue: {
            wiredName: setValueWiredName,
            exec: function (value) {
                if (value == null)
                    throw new Error("You must pass one argument to setValue() method");

                return this._executeWithEvents(arguments, setValueWiredName, Convert.toNumber(value).toString());
            }
        }
    }
};

module.exports.NumericField = NumericField;
module.exports.NumericFieldTO = NumericFieldTO;
module.exports.NumericFieldDescriptionBehavior = NumericFieldDescriptionBehavior;
module.exports.NumericFieldTOBehavior = NumericFieldTOBehavior;


