// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/19/2015.
 */

var Convert = require("leanft.sdk.core").Convert;
var HelperFuncs = require("./helper_behaviors.js").HelperFuncs;

/**
 * The base description for web Edit Fields
 * @memberof Web
 * @ignore
 */
var EditFieldBaseDescriptionBehavior = {
    /**
     * The current text in this field.
     * @param {string} [value] When provided, this method acts as a setter and sets the value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    value: function(value){
        return this._propertyHandler("value", value, Convert.toString);
    },
    /**
     * The hint text that is displayed in the edit box until a value is entered in it.
     * @param {string} [placeholder] When provided, this method acts as a setter and sets the placeholder value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the placeholder value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    placeholder: function(placeholder){
        return this._propertyHandler("placeholder", placeholder, Convert.toString);
    },
    /**
     * Indicates whether this field is read-only.
     * @param {boolean} [readOnly] When provided, this method acts as a setter and sets the isReadOnly value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isReadOnly value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isReadOnly: function(readOnly){ // bool => number
        return this._propertyHandler("readonly", readOnly, HelperFuncs.boolToInt, HelperFuncs.intToBool, Convert.toBool);
    },
    /**
     * Indicates whether this field is mandatory.
     * @param {boolean} [isRequired] When provided, this method acts as a setter and sets the isRequired value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isRequired value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isRequired: function(isRequired){ // bool
        return this._propertyHandler("required", isRequired, Convert.toBool);
    },
    /**
     * The maximum number of characters allowed per line in this edit field.
     * @param {number} [value] When provided, this method acts as a setter and sets the maxCharsInLine value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored maxCharsInLine value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    maxCharsInLine: function(value){ // number
        return this._propertyHandler("width in characters", value, Convert.toNumber);
    }
};

//Consts
var readOnlyWiredName = "readonly";
var setValueWiredName = "Set";
/**
 * The base methods for web Edit Fields
 * @memberof Web
 * @ignore
 */
var EditFieldBaseTestObjectBehavior = {
    /**
     * @memberof Web.EditFieldBaseTestObjectBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the current text in this field.
         * @returns {Promise<string>} a promise this is fulfilled with the current text in this field.
         * @function
         */
        value: {

        },

        /**
         * Returns the hint text that is displayed in the edit box until a value is entered in it.
         * @returns {Promise<string>} a promise that is fulfilled with the placeholder value.
         * @function
         */
        placeholder: {

        },

        /**
         * Indicates whether this field is read-only.
         * @returns {Promise<boolean>} a promise this is fulfilled with an indication of whether this field is read-only.
         * @function
         */
        isReadOnly: {
            wiredName: readOnlyWiredName,
            getter: function () {
                return this._getROProperty(readOnlyWiredName, arguments).then(HelperFuncs.intToBool);
            }
        },
        /**
         * Indicates whether this field is mandatory.
         * @returns {Promise<boolean>} a promise this is fulfilled with an indication of whether this field is mandatory.
         * @function
         */
        isRequired: {
            wiredName: "required"
        },
        /**
         * Returns The maximum number of characters allowed per line in this edit field.
         * @returns {Promise<number>} a promise this is fulfilled with the maximum number of characters allowed per line in this edit field.
         * @function
         */
        maxCharsInLine: {
            type: 'uint',
            wiredName: "width in characters"
        },
        /**
         * Returns the hint text that is displayed in the edit box until a value is entered in it.
         * @ignore
         * @private
         * @returns {Promise<string>} a promise this is fulfilled with the hint text that is displayed in the edit box until a value is entered in it.
         * @function
         */
        _placeholder: {
            wiredName: "placeholder"
        }
    },

    /**
     * @memberof Web.EditFieldBaseTestObjectBehavior
     * @ignore
     */
    _methods: {
        /**
         * Sets the text inside the edit box.
         * @param {string} text The text to be entered in the edit field.
         * @returns {Promise<void>} a promise this is fulfilled after the operation was performed.
         * @function
         */
        setValue: {
            wiredName: setValueWiredName,
            exec: function (text) {
                if (arguments.length === 0) throw new Error("You must pass one argument to setValue() method");
                return this._executeWithEvents(arguments, setValueWiredName, text);
            }
        }
    },

    _additionalProperties: {
        type: {}
    }
};

module.exports.EditFieldBaseDescriptionBehavior = EditFieldBaseDescriptionBehavior;
module.exports.EditFieldBaseTestObjectBehavior = EditFieldBaseTestObjectBehavior;


