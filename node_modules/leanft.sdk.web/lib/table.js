// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/10/2015.
 * This file contains the definition of the Table test object and the description.
 */

var ObjUtils = require("leanft.sdk.core").ObjectUtils;
var ClickBehavior = require("leanft.sdk.core").ClickBehavior;
var DragAndDropBehavior = require("leanft.sdk.core").DragAndDropBehavior;
var ExecuteItemsWithEventsBehavior = require("leanft.sdk.core").ExecuteItemsWithEventsBehavior;
var WebBase = require("./web_testobject_base.js").WebBaseTestObject;
var WebBaseDesc = require("./web_testobject_base.js").WebBaseDescription;
var WebElement = require("./webelement.js");
var Convert = require("leanft.sdk.core").Convert;
var HelperFuncs = require("./helper_behaviors.js").HelperFuncs;
var Core = require("leanft.sdk.core");
var MergeBehavior = Core.MergeBehavior;
var StringUtils = Core.StringUtils;
var Q = require("q");

/**
 * @memberof Web
 * @ignore
 */
var TableDescriptionBehavior = {
    /**
     * The number of pixels that are used as border on the table.
     * @param {number} [borderPX] When provided, this method acts as a setter and sets the border value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored border value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    border: function(borderPX){
        return this._propertyHandler("border", borderPX, Convert.toString, Convert.toNumber);
    },
    /**
     * An array of column headers.
     * @param {string[]} [colNamesArr] When provided, this method acts as a setter and sets the columnHeaders value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored columnHeaders value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    columnHeaders: function(colNamesArr){
        return this._propertyHandler("column names", colNamesArr, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    },
    /**
     * The number of rows in the table, including the header.
     * @param {number} [rowsCount] When provided, this method acts as a setter and sets the rowsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored rowsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    rowsCount: function(rowsCount){
        return this._propertyHandler("rows", rowsCount);
    },
    /**
     * The number of columns in the table.
     * @param {number} [columnsCount] When provided, this method acts as a setter and sets the columnsCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored columnsCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    columnsCount: function(columnsCount){
        return this._propertyHandler("cols", columnsCount);
    }
};

/**
 * The description of a Web Table test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {Table} the description object that was initialized.
 * @constructor
 * @memberof Web
 * @extends Web.WebBaseDescription
 * @mixes Web.WebElementDescriptionBehaviour
 * @mixes Web.TableDescriptionBehavior
 */
function Table(props) {

    var tableDes = new WebBaseDesc("Table"); // leanFTType

    ObjUtils.extend(tableDes, WebElement.WebElementDescriptionBehaviour);
    ObjUtils.extend(tableDes, TableDescriptionBehavior);
    tableDes._defineByPropertyBag(props);

    return tableDes;
}

/**
 * A single cell in the {@link Web.TableTO} Web object.
 * @constructor
 * @memberof Web
 * @mixes Web.TableCellBehavior._properties
 * @mixes Web.TableCellBehavior._methods
 */
function TableCell(rowIndex,cellIndex,ownerTable){
    if(typeof(rowIndex) !== "number")
        throw new Error("row index is not a number");

    if(typeof(cellIndex) !== "number")
        throw new Error("row index is not a number");

    if(ownerTable === null)
        throw new Error("Owner table is null");

    ObjUtils.extend(this, MergeBehavior);
    this._mergeBehavior(TableCellBehavior);
    this._rowIndex = rowIndex +1;
    this._cellIndex = cellIndex +1;
    this._ownerTable = ownerTable;
}

//Consts
var countOfWiredName = "ChildItemCount";

/**
 * memberof TableCell
 */
TableCell.prototype = {
    _ownerTable: null,
    _rowIndex: -1,
    _cellIndex: -1
};

/**
 * The methods of TableCell object
 * @memberof Web
 * @ignore
 */
var TableCellBehavior = {
    /**
     * @memberof Web.TableCellBehavior
     * @ignore
     */
    _properties: {
        /**
         * The current text in the cell.
         * @returns {Promise<string>} a promise that is fulfilled with the text in the cell.
         */
        text: function () {
            return this._ownerTable._executeWithEventsOnItemOnError(this, this._ownerTable._executeCommand, "GetCellData", this._rowIndex, this._cellIndex);
        },

        /**
         * The 0-based row index of the cell.
         * @returns {number} the 0-based row index of the cell.
         */
        rowIndex: function () {
            return this._rowIndex - 1;
        },

        /**
         * The 0-based column index of the cell.
         * @returns {number} the 0-based column index of the cell.
         */
        columnIndex: function () {
            return this._cellIndex - 1;
        }
    },

    /**
     * @memberof Web.TableCellBehavior
     * @ignore
     */
    _methods: {
        /**
         * Returns a child test object from this cell according to its type and index (if presented in the description).
         * @param {Description} [childType = Web.Element] The description of the child test object, for example Web.Link(). <br/>
         * Note: all description fields except index will be ignored.
         * @returns {Promise<TestObject>} a promise that is fulfilled with the child test object.
         */
        $: function (childType) {
            childType = childType || this._ownerTable._genericDesc(childType);
            var index = childType.index() || 0;
            var testObject = this._ownerTable._session.factory.create(childType.leanFTType, null);
            return this._ownerTable._executeWithEvents(arguments, "ChildItem", this._rowIndex, this._cellIndex, testObject._nativeClass, index);
        },
        /**
         * Returns the number of child test objects of the specified type in this cell.
         * @param {Description} [childType = Web.Element] The description of the child test object, for example Web.Link().
         * @returns {Promise<number>} a promise that is fulfilled with the number of test objects that were found.
         * @function
         */
        countOf: {
            wiredName: countOfWiredName,
            exec: function (childType) {
                childType = childType || this._ownerTable._genericDesc();
                var testObject = this._ownerTable._session.factory.create(childType.leanFTType, null);
                return this._ownerTable._executeWithEventsOnItemOnError(this, this._ownerTable._executeCommand, countOfWiredName, this._rowIndex, this._cellIndex, testObject._nativeClass);
            }
        },
        /**
         * Returns a web element that corresponds to the current table cell, so that it can be used like any other web element. <br>
		 * For example, you can then apply Describe() to it, just as you would for any web element.
         * @returns {Promise<WebElement>} a promise that is fulfilled with a WebElement that corresponds to the current table cell.
         */
        asWebElement: function () {
            return this._ownerTable._executeWithEventsOnItemOnError(this, this._ownerTable._executeCommand, "Cell", this._rowIndex, this._cellIndex);
        }
    }
};


/**
 * A Web table containing a variable number of rows and columns.
 * @class TableTO
 * @memberof Web
 * @constructor
 * @extends Web.WebBaseTestObject
 * @mixes Web.WebElementTOBehavior._properties
 * @mixes Web.WebElementTOBehavior._methods
 * @mixes ClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes Web.TableTestObjectBehavior._properties
 * @mixes Web.TableTestObjectBehavior._methods
 * @mixes Web.TableBorderTOBehavior._properties
 * @mixes Web.TableFindRowTOBehavior._methods
 */
function TableTO(session, description) {
    description = description || Table();
    var tableTO = new WebBase("WebTable", session, description); // native class

    tableTO._mergeBehavior(ClickBehavior);
    tableTO._mergeBehavior(DragAndDropBehavior);
    tableTO._mergeBehavior(WebElement.WebElementTOBehavior);
    tableTO._mergeBehavior(TableTestObjectBehavior);
    tableTO._mergeBehavior(TableBorderTOBehavior);
    tableTO._mergeBehavior(TableFindRowTOBehavior);
    tableTO._mergeBehavior(ExecuteItemsWithEventsBehavior);

    return tableTO;
}

//Consts
var columnNamesWiredName = "column names";
var findRowWiredName = "GetRowWithCellText";
/**
 * @memberof Web
 * @ignore
 */
var TableBorderTOBehavior = {
    /**
     * @memberof Web.TableBorderTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The number of pixels used for the table border.
         * @returns {Promise<number>} a promise that is fulfilled with the number of pixels used for the table border.
         * @function
         */
        border: {
            type: 'uint',
            getter: function () {
                return this._getROProperty("border", arguments).then(function (borderPX) {
                    return StringUtils.isNullOrWhiteSpace(borderPX) ? 0 : Convert.toNumber(borderPX);
                });
            }
        },
    }
};

/**
 * @memberof Web
 * @ignore
 */
var TableFindRowTOBehavior = {
    /**
     * @memberof Web.TableFindRowTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Finds the first row with the specified text in the specified column, starting from the specified row.
         * @param {string} cellText Text to find.
         * @param {number} [startFromCol = 0] The column number to search.
         * @param {number} [startFromRow = 0] The index from which to start the search.
         * @returns {Promise<TableCell[]>} a promise that is fulfilled either with an array of cells for the requested row, or fulfilled with null if no match was found.
         * @function
         */
        findRow: {
            wiredName: findRowWiredName,
            exec: function (cellText, startFromCol, startFromRow) {
                startFromCol = startFromCol != null ? Convert.toNumber(startFromCol) + 1 : 0;
                startFromRow = startFromRow != null ? Convert.toNumber(startFromRow) + 1 : 0;

                return this._executeWithEventsOnError(arguments, findRowWiredName, cellText, startFromCol, startFromRow)
                    .then(function (rowNumber) {
                        if (rowNumber === -1)
                            return null;
                        rowNumber = rowNumber - 1; //0 base index.

                        return this._getROPropertyWithoutEvents(this._columnCountPropName).then(this._initRowInTable.bind(this, rowNumber));
                    }.bind(this));
            }
        }
    }
};

/**
 * @memberof Web
 * @ignore
 */
var TableTestObjectBehavior = {
    /**
     * @memberof Web.TableTestObjectBehavior
     * @ignore
     */
    _properties: {
        /**
         * A collection of column headers.
         * @returns {Promise<string[]>} a promise that is fulfilled with the collection of column headers.
         * @function
         */
        columnHeaders: {
            wiredName: columnNamesWiredName,
            getter: function () {
                return this._getROProperty(columnNamesWiredName, arguments).then(StringUtils.splitFunc(";"));
            }
        },

        /*jshint eqnull:true */
        /**
         * When row and col are both provided, returns a specific cell
         *<BR> When only a row is provided, returns a promise resolved with all the cells in a row
         * <BR>When no row is provided, returns a promise resolved with  all the cells in the table.
         * <BR>Important Note:
         * <BR>When both row and col are provided, the resulted cell may be out of bounds and trying to use it will result in error.
         * @param {number} [row] The row index.
         * @param {number} [col] The column index in the row, specified by the row parameter.
         * @returns {Promise<Web.TableCell[][] | Web.TableCell[]> | Web.TableCell} a specific cell when row and col are provided;
         * <BR> a promise resolved to all the cells in a row when only a row is provided;
         * <BR> a promise resolved with all cells in the table when no row is provided.
         *
         */
        cells: function (row, col) {
            if (row != null && col != null) {
                return new TableCell(row, col, this);
            }

            var initRowByColumnCountHelper = function (rowIndex) {
                return this._getROPropertyWithoutEvents(this._columnCountPropName, rowIndex + 1)
                    .then(function (colCount) {
                        return this._initRowInTable(rowIndex, colCount);
                    }.bind(this));
            }.bind(this);

            if (row != null) {
                //return single line
                return initRowByColumnCountHelper(row);
            }

            //row is not set so get all cells
            return this._getROProperty(this._rowCountPropName).then(function (rowsCount) {
                var colsCountPromises = [];

                for (var i = 0; i < rowsCount; i++) {
                    colsCountPromises.push(initRowByColumnCountHelper(i));
                }

                return Q.all(colsCountPromises);
            }.bind(this));
        }
    },

    _helpers: {
        /*jshint eqnull:false */

        _rowCountPropName: "rows",

        _columnCountPropName: "cols",

        /**
         * Initializes a complete table of cells (array of arrays)
         * @param {number} rows The number of rows in the requested table.
         * @param {number} cols The number of cells in each row.
         * @returns {Object[]} the array of rows.
         * @private
         */
        _initTable: function (rows, cols) {
            var table = [];
            for (var rowIndex = 0; rowIndex < rows; rowIndex++) {
                table[rowIndex] = this._initRowInTable(rowIndex, cols);
            }
            return table;
        },
        /**
         * Initializes a row of cells.
         * @param {number} rowNumber The row number to initialize.
         * @param {number} cols The number of cells.
         * @returns {Object[]} the array of cells.
         * @private
         */
        _initRowInTable: function (rowNumber, cols) {
            var resRow = [];
            for (var cellIndex = 0; cellIndex < cols; cellIndex++) {
                resRow[cellIndex] = new TableCell(rowNumber, cellIndex, this);
            }
            return resRow;
        }
    },

    _additionalProperties: {
        rowsCount: {type: "uint", wiredName: "rows"},
        columnsCount: {type: "uint", wiredName: "cols"}
    }
};

module.exports.Table = Table;
module.exports.TableTO = TableTO;
module.exports.TableCell = TableCell;
module.exports.TableTestObjectBehavior = TableTestObjectBehavior;
module.exports.TableFindRowTOBehavior = TableFindRowTOBehavior;
module.exports.TableBorderTOBehavior = TableBorderTOBehavior;
module.exports.TableDescriptionBehavior = TableDescriptionBehavior;
