// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/7/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Frame Description",function(){
    var FrameDesc = require("../lib/frame.js").Frame;
    var FrameDescUnderTest;

    beforeEach(function(){
        FrameDescUnderTest = FrameDesc();
    });

    describe("url method",function() {
        it("should add 'url' to _properties with the correct value when value is given",function(){
            FrameDescUnderTest.url("some url");
            assert.strictEqual(FrameDescUnderTest._properties["url"], "some url");
        });
        it("should add 'url' to _properties with the correct value when value is given using property bag",function(){
            FrameDescUnderTest = FrameDesc({
                url: "some url"
            });
            assert.strictEqual(FrameDescUnderTest._properties["url"], "some url");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = FrameDescUnderTest.url("some url");
            assert.strictEqual(result, FrameDescUnderTest);
        });
        it("should remove 'url' from _properties when value is null",function(){
            FrameDescUnderTest._properties["url"] = "some url";
            FrameDescUnderTest.url(null);
            assert(!("url" in FrameDescUnderTest._properties));
        });
        it("should return the value of 'url' from _properties when value is not given",function(){
            FrameDescUnderTest._properties["url"] = "some url";
            var url = FrameDescUnderTest.url();
            assert.equal(url, "some url");
        });
    });

    describe("text method",function() {
        it("should add 'text' to _properties with the correct value when value is given",function(){
            FrameDescUnderTest.text("some text");
            assert.strictEqual(FrameDescUnderTest._properties["text"], "some text");
        });
        it("should add 'text' to _properties with the correct value when value is given using property bag",function(){
            FrameDescUnderTest = FrameDesc({
                text: "some text"
            });
            assert.strictEqual(FrameDescUnderTest._properties["text"], "some text");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = FrameDescUnderTest.text("some text");
            assert.strictEqual(result, FrameDescUnderTest);
        });
        it("should remove 'text' from _properties when value is null",function(){
            FrameDescUnderTest._properties["text"] = "some text";
            FrameDescUnderTest.text(null);
            assert(!("text" in FrameDescUnderTest._properties));
        });
        it("should return the value of 'text' from _properties when value is not given",function(){
            FrameDescUnderTest._properties["text"] = "some text";
            var text = FrameDescUnderTest.text();
            assert.equal(text, "some text");
        });
    });

});

describe("Page Test Object Behavior",function(){
    var FrameTO = require("../lib/frame.js").FrameTO;
    var frameTOBehaviorUnderTest;

    beforeEach(function(){
        frameTOBehaviorUnderTest = new FrameTO({});
        frameTOBehaviorUnderTest._getROProperty = sinon.stub();
        frameTOBehaviorUnderTest._executeCommand = sinon.stub();
        frameTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        frameTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(frameTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("url",function(){
        it("should query the property 'url'",function(){
            frameTOBehaviorUnderTest.url();
            assert(frameTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(frameTOBehaviorUnderTest._getROProperty.firstCall.args,["url", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            frameTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = frameTOBehaviorUnderTest.url();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("text",function(){
        it("should query the property 'text'",function(){
            frameTOBehaviorUnderTest.text();
            assert(frameTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(frameTOBehaviorUnderTest._getROProperty.firstCall.args,["text", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            frameTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = frameTOBehaviorUnderTest.text();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("runScript", function(){
        var funcPromise = {
            then: sinon.stub()
        };

        beforeEach(function(){
            frameTOBehaviorUnderTest._executeCommand.returns(funcPromise);
        });

        it("should throw error if no arguments passed",function(){
            assert.throws(function(){
                frameTOBehaviorUnderTest.runScript();
            });
        });
        it("should throw error if null passed",function(){
            assert.throws(function(){
                frameTOBehaviorUnderTest.runScript(null);
            });
        });
        it("should return the same promise that was returned from _executeCommand method",function(){
            var setPromise = {then:sinon.stub()};
            frameTOBehaviorUnderTest._executeCommand.returns(setPromise);
            var res = frameTOBehaviorUnderTest.runScript("console.log(5)");
            assert.strictEqual(res,setPromise);
        });
        it("should parse script to string and wrap it with '( ... }();' if it's wrapped with function statement and get rid of line breaks",function(){
            frameTOBehaviorUnderTest.runScript(function (){
console.log(5);}
            );
            assert(frameTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(frameTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,2), ["RunScript","(function (){console.log(5);})();"]);
        });
        it("should wrap a string with '(function(){ ... })();' if it isn't wrapped with function statement and get rid of line breaks",function(){
            frameTOBehaviorUnderTest.runScript("console.lo" +
                "g(5)");
            assert(frameTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(frameTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,2), ["RunScript","(function(){console.log(5)})();"]);
        });
        it("should wrap a string with '( ... }();' if it's wrapped with function statement and get rid of line breaks",function(){
            frameTOBehaviorUnderTest.runScript("function()" +
                "{co" +
                "nso" +
                "le.log(5);}");
            assert.deepEqual(frameTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,2), ["RunScript","(function(){console.log(5);})();"]);
        });
        it("should pass method assigned to an object and wrap it with '( ... }();'",function(){
            var obj = {
                a: 6,
                func: function(){
console.log(5);
}
            };
            frameTOBehaviorUnderTest.runScript(obj.func);
            assert.deepEqual(frameTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,2), ["RunScript","(function(){console.log(5);})();"]);
        });
    });

    describe("sync", function(){
        it("should call the _executeCommand method and pass the method name",function(){
            frameTOBehaviorUnderTest.sync();
            assert(frameTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.equal(frameTOBehaviorUnderTest._executeCommand.firstCall.args[0], "Sync");
        });
        it("should return the same promise that was returned from _executeCommand method",function(){
            var setPromise = {};
            frameTOBehaviorUnderTest._executeCommand.returns(setPromise);
            var res = frameTOBehaviorUnderTest.sync();
            assert.strictEqual(res,setPromise);
        });
    });


});
