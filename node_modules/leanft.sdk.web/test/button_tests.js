// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/16/2015.
 */



var assert = require("assert");
var sinon = require("sinon");

describe("Button Description",function(){

    var ButtonDesc = require("../lib/button.js").Button;
    var buttonDescUnderTest;

    beforeEach(function(){
        buttonDescUnderTest = ButtonDesc();
    });

    describe("buttonType method",function() {
        it("should add 'type' to _properties when value is given",function(){
            buttonDescUnderTest.buttonType("button");
            assert.strictEqual(buttonDescUnderTest._properties["type"], "button");
        });
        it("should add 'type' to _properties when value is given using property bag",function(){
            buttonDescUnderTest = ButtonDesc({
                buttonType: "button"
            });
            assert.strictEqual(buttonDescUnderTest._properties["type"], "button");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = buttonDescUnderTest.buttonType("button");
            assert.strictEqual(result, buttonDescUnderTest);
        });
        it("should remove 'type' from _properties when value is null",function(){
            buttonDescUnderTest._properties["type"] = "button";
            buttonDescUnderTest.buttonType(null);
            assert(!("type" in buttonDescUnderTest._properties));
        });
        it("should return the value of 'type' from _properties when value is not given",function(){
            buttonDescUnderTest._properties["type"] = "button";
            var buttonType = buttonDescUnderTest.buttonType();
            assert.equal(buttonType, "button");
        });
    });

    describe("isEnabled method",function() {
        it("should add 'disabled' with correct value when a value is given",function(){
            buttonDescUnderTest.isEnabled(false);
            assert.strictEqual(buttonDescUnderTest._properties["disabled"], 1);
        });
        it("should add 'disabled' with correct value, when value is given using property bag",function(){
            buttonDescUnderTest = ButtonDesc({
                isEnabled: false
            });
            assert.strictEqual(buttonDescUnderTest._properties["disabled"], 1);
        });
        it("when value is given, should return this - builder pattern",function(){
            var result = buttonDescUnderTest.isEnabled(false);
            assert.strictEqual(result, buttonDescUnderTest);
        });
        it("should remove 'disabled' from _properties when value is null",function(){
            buttonDescUnderTest._properties["disabled"] = 0;
            buttonDescUnderTest.isEnabled(null);
            assert(!("disabled" in buttonDescUnderTest._properties));
        });
        it("should return the value of 'disabled' from _properties, when value is not given",function(){
            buttonDescUnderTest._properties["disabled"] = 1;
            var isEnabled = buttonDescUnderTest.isEnabled();
            assert.strictEqual(isEnabled, false);
        });
        it("should return same value in get, when value is set",function(){
            buttonDescUnderTest.isEnabled(true);
            var isEnabled = buttonDescUnderTest.isEnabled();
            assert.strictEqual(isEnabled, true);
        });
    });

    describe("text method",function() {
        it("should add 'value' to _properties when value is given",function(){
            buttonDescUnderTest.text("some value");
            assert.strictEqual(buttonDescUnderTest._properties["value"], "some value");
        });
        it("should add 'value' to _properties when value is given using property bag",function(){
            buttonDescUnderTest = ButtonDesc({
                text: "some value"
            });
            assert.strictEqual(buttonDescUnderTest._properties["value"], "some value");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = buttonDescUnderTest.text("some value");
            assert.strictEqual(result, buttonDescUnderTest);
        });
        it("should remove 'value' from _properties when value is null",function(){
            buttonDescUnderTest._properties["value"] = "some value";
            buttonDescUnderTest.text(null);
            assert(!("value" in buttonDescUnderTest._properties));
        });
        it("should return the value of 'value' from _properties when value is not given",function(){
            buttonDescUnderTest._properties["value"] = "some value";
            var text = buttonDescUnderTest.text();
            assert.equal(text, "some value");
        });
    });

});

describe("Button Test Object Behavior",function(){
    var ButtonTO = require("../lib/button.js").ButtonTO;
    var buttonTOBehaviorUnderTest;

    beforeEach(function(){
        buttonTOBehaviorUnderTest = ButtonTO({});
        sinon.stub(buttonTOBehaviorUnderTest,"_getROProperty");
    });

    describe("buttonType",function(){
        it("should query the property 'type'",function(){
            buttonTOBehaviorUnderTest.buttonType();
            assert(buttonTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(buttonTOBehaviorUnderTest._getROProperty.firstCall.args[0],"type");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            buttonTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = buttonTOBehaviorUnderTest.buttonType();
            assert.strictEqual(res,getROPromise);
        });

    });

    describe("isEnabled",function(){
        var promiseMock = {then: function(cb) {return cb(1);}};
        it("should query the property 'disabled'",function(){
            buttonTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            buttonTOBehaviorUnderTest.isEnabled();
            assert(buttonTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(buttonTOBehaviorUnderTest._getROProperty.firstCall.args,["disabled", arguments]);
        });
        it("should convert the returned number to the opposite boolean",function(){
            buttonTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = buttonTOBehaviorUnderTest.isEnabled();
            assert.strictEqual(res,false);
        });
    });

    describe("text",function(){
        it("should query the property 'value'",function(){
            buttonTOBehaviorUnderTest.text();
            assert(buttonTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(buttonTOBehaviorUnderTest._getROProperty.firstCall.args[0],"value");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            buttonTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = buttonTOBehaviorUnderTest.text();
            assert.strictEqual(res,getROPromise);
        });

    });

});