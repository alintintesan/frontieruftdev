// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/30/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Page Description",function(){
    var PageDesc = require("../lib/page.js").Page;
    var PageDescUnderTest;

    beforeEach(function(){
        PageDescUnderTest = PageDesc();
    });

    it("shouldn't have a location key",function(){
        assert(!("location" in PageDescUnderTest));
    });

    describe("title method",function() {
        it("should add 'title' to _properties with the correct value when value is given",function(){
            PageDescUnderTest.title("some title");
            assert.strictEqual(PageDescUnderTest._properties["title"], "some title");
        });
        it("should add 'title' to _properties with the correct value when value is given using property bag",function(){
            PageDescUnderTest = PageDesc({
                title: "some title"
            });
            assert.strictEqual(PageDescUnderTest._properties["title"], "some title");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = PageDescUnderTest.title("some title");
            assert.strictEqual(result, PageDescUnderTest);
        });
        it("should remove 'title' from _properties when value is null",function(){
            PageDescUnderTest._properties["title"] = "some title";
            PageDescUnderTest.title(null);
            assert(!("title" in PageDescUnderTest._properties));
        });
        it("should return the value of 'title' from _properties when value is not given",function(){
            PageDescUnderTest._properties["title"] = "some title";
            var title = PageDescUnderTest.title();
            assert.equal(title, "some title");
        });
    });

});

describe("Page Test Object Behavior",function(){
    var PageTO = require("../lib/page.js").PageTO;
    var pageTOBehaviorUnderTest;

    beforeEach(function(){
        pageTOBehaviorUnderTest = new PageTO({});
        pageTOBehaviorUnderTest._getROProperty = sinon.stub();
        pageTOBehaviorUnderTest._executeCommand = sinon.stub();
        pageTOBehaviorUnderTest._session.fireEvent = sinon.stub();
    });

    it("shouldn't have a location key",function(){
        assert(!("location" in pageTOBehaviorUnderTest));
    });

    describe("title",function(){
        it("should query the property 'title'",function(){
            pageTOBehaviorUnderTest.title();
            assert(pageTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(pageTOBehaviorUnderTest._getROProperty.firstCall.args,["title",arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            pageTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = pageTOBehaviorUnderTest.title();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("nativeObject", function() {
        beforeEach(function(){
            pageTOBehaviorUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };
        });

        it("should call executeCommand with Object", function() {
            pageTOBehaviorUnderTest.nativeObject();
            assert(pageTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(pageTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,1), ["Object"]);
        });

        it("should return promise returned from executeCommand", function() {
            var promiseMock = {a:"aa"};
            pageTOBehaviorUnderTest._executeCommand.returns(promiseMock);

            var res = pageTOBehaviorUnderTest.nativeObject();

            assert.strictEqual(res, promiseMock);
        });


    });

    describe("canParticipateInOptimizedPath", function() {
        var Browser = require("../lib/browser.js").Browser;

        it("should participateInOptimizedPath (recommended) if description is not empty", function() {
            sinon.stub(pageTOBehaviorUnderTest._description, "_toJSON").returns({"Index":0, "Properties": {"AbsoluteLocation": {}}});
            var res = pageTOBehaviorUnderTest._canParticipateInOptimizedPath();
            assert(res);
        });

        it("should not participateInOptimizedPath (recommended) if in Browser", function() {
            sinon.stub(pageTOBehaviorUnderTest._description, "_toJSON").returns({"Index":null, "Properties": {}});

            //mocks the creation of the test object;
            sinon.stub(Browser.prototype.__super,"$").returns({});
            pageTOBehaviorUnderTest._parent = new Browser(null, null, -1);
            //since the browser constructor calls $ (describe), we reset the stub (to reset the method calls counter)
            Browser.prototype.__super.$.restore();

            var res = pageTOBehaviorUnderTest._canParticipateInOptimizedPath();

            assert(!res);
        });

        it("should participateInOptimizedPath (recommended) if NOT in Browser", function() {
            sinon.stub(pageTOBehaviorUnderTest._description, "_toJSON").returns({"Index":null, "Properties": {}});

            pageTOBehaviorUnderTest._parent = {
                "_description": {
                    "leanFTType": {
                        "leanftType": "WebView"
                    }
                }
            };
            var res = pageTOBehaviorUnderTest._canParticipateInOptimizedPath();

            assert(res);
        });
    });
});
