// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Createdon 11/30/2015.
 * Unit tests for WebImage test object and Image description.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Image Description",function(){
    var ImageDesc = require("../lib/image.js").Image;
    var imageDescUnderTest;

    beforeEach(function(){
        imageDescUnderTest = ImageDesc();
    });

    describe("alt method",function() {
        it("should add 'alt' to _properties with the correct value when value is given",function(){
            imageDescUnderTest.alt("some alt");
            assert.strictEqual(imageDescUnderTest._properties["alt"], "some alt");
        });
        it("should add 'alt' to _properties with the correct value when value is given using property bag",function(){
            imageDescUnderTest = ImageDesc({
                alt: "some alt"
            });
            assert.strictEqual(imageDescUnderTest._properties["alt"], "some alt");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = imageDescUnderTest.alt("some alt");
            assert.strictEqual(result, imageDescUnderTest);
        });
        it("should remove 'alt' from _properties when value is null",function(){
            imageDescUnderTest._properties["alt"] = "some alt";
            imageDescUnderTest.alt(null);
            assert(!("alt" in imageDescUnderTest._properties));
        });
        it("should return the value of 'alt' from _properties when value is not given",function(){
            imageDescUnderTest._properties["alt"] = "some alt";
            var alt = imageDescUnderTest.alt();
            assert.equal(alt, "some alt");
        });
    });
    describe("src method",function() {
        it("should add 'src' to _properties with the correct value when value is given",function(){
            imageDescUnderTest.src("some src");
            assert.strictEqual(imageDescUnderTest._properties["src"], "some src");
        });
        it("should add 'src' to _properties with the correct value when value is given using property bag",function(){
            imageDescUnderTest = ImageDesc({
                src: "some src"
            });
            assert.strictEqual(imageDescUnderTest._properties["src"], "some src");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = imageDescUnderTest.src("some src");
            assert.strictEqual(result, imageDescUnderTest);
        });
        it("should remove 'src' from _properties when value is null",function(){
            imageDescUnderTest._properties["src"] = "some src";
            imageDescUnderTest.src(null);
            assert(!("src" in imageDescUnderTest._properties));
        });
        it("should return the value of 'src' from _properties when value is not given",function(){
            imageDescUnderTest._properties["src"] = "some src";
            var src = imageDescUnderTest.src();
            assert.equal(src, "some src");
        });
    });

    describe("type method",function() {
        it("should add 'image type' to _properties with the correct value when value is given",function(){
            imageDescUnderTest.type("link");
            assert.strictEqual(imageDescUnderTest._properties["image type"], "Image Link");
        });
        it("should add 'image type' to _properties with the correct value when value is given with upper case",function(){
            imageDescUnderTest.type("SeRverImageMap");
            assert.strictEqual(imageDescUnderTest._properties["image type"], "Server Side ImageMap");
        });
        it("should add 'image type' to _properties with the correct value when value is given using property bag",function(){
            imageDescUnderTest = ImageDesc({
                type: "link"
            });
            assert.strictEqual(imageDescUnderTest._properties["image type"], "Image Link");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = imageDescUnderTest.type("link");
            assert.strictEqual(result, imageDescUnderTest);
        });
        it("should remove 'image type' from _properties when value is null",function(){
            imageDescUnderTest._properties["image type"] = "Image Link";
            imageDescUnderTest.type(null);
            assert(!("image type" in imageDescUnderTest._properties));
        });
        it("should return the value of 'image type' from _properties when value is not given",function(){
            imageDescUnderTest._properties["image type"] = "Image Link";
            var type = imageDescUnderTest.type();
            assert.equal(type, "link");
        });
        it("should return same value in get, when value is set",function(){
            imageDescUnderTest.type("link");
            var type = imageDescUnderTest.type();
            assert.equal(type, "link");
        });
    });

});

describe("Image Test Object Behavior",function(){
    var ImageTO = require("../lib/image.js").ImageTO;
    var imageTOBehaviorUnderTest;

    beforeEach(function(){
        imageTOBehaviorUnderTest = ImageTO({});
        imageTOBehaviorUnderTest._getROProperty = sinon.stub();
        imageTOBehaviorUnderTest._executeCommand = sinon.stub();
        imageTOBehaviorUnderTest._session.fireEvent = sinon.stub();
    });

    describe("alt",function(){
        it("should query the property 'alt'",function(){
            imageTOBehaviorUnderTest.alt();
            assert(imageTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(imageTOBehaviorUnderTest._getROProperty.firstCall.args,["alt", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            imageTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = imageTOBehaviorUnderTest.alt();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("src",function(){
        it("should query the property 'src'",function(){
            imageTOBehaviorUnderTest.src();
            assert(imageTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(imageTOBehaviorUnderTest._getROProperty.firstCall.args,["src", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            imageTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = imageTOBehaviorUnderTest.src();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("type",function(){
        var promiseMock = {then: function(cb) {return cb("Image Link");}};
        it("should query the property 'image type'",function(){
            imageTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            imageTOBehaviorUnderTest.type();
            assert(imageTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(imageTOBehaviorUnderTest._getROProperty.firstCall.args,["image type", arguments]);
        });
        it("should convert the returned imageType name to it's origin enum",function(){
            imageTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = imageTOBehaviorUnderTest.type();
            assert.strictEqual(res,"link");
        });
    });

});