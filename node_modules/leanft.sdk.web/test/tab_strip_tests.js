// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/14/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("TabStrip Description",function(){
    var TabStripDesc = require("../lib/tab_strip.js").TabStrip;
    var tabStripDescUnderTest;

    beforeEach(function(){
        tabStripDescUnderTest = TabStripDesc();
    });

    describe("items method",function() {
        it("should add 'all items' with correct value when a value is given",function(){
            tabStripDescUnderTest.tabs(["tab1","tab2"]);
            assert.strictEqual(tabStripDescUnderTest._properties["all items"], "tab1;tab2");
        });
        it("should add 'all items' with correct value, when value is given using property bag",function(){
            tabStripDescUnderTest = TabStripDesc({
                tabs: ["tab1","tab2"]
            });
            assert.strictEqual(tabStripDescUnderTest._properties["all items"], "tab1;tab2");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = tabStripDescUnderTest.tabs(["tab1","tab2"]);
            assert.strictEqual(result, tabStripDescUnderTest);
        });
        it("should remove 'all items' from _properties when value is null",function(){
            tabStripDescUnderTest._properties["all items"] = "tab1;tab2";
            tabStripDescUnderTest.tabs(null);
            assert(!("all items" in tabStripDescUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties, when value is not given",function(){
            tabStripDescUnderTest._properties["all items"] = "tab1;tab2";
            var items = tabStripDescUnderTest.tabs();
            assert.deepEqual(items, ["tab1","tab2"]);
        });
        it("should not modify property 'all items', upon get",function(){
            tabStripDescUnderTest._properties["all items"] = "tab1;tab2";
            tabStripDescUnderTest.tabs();
            assert.strictEqual(tabStripDescUnderTest._properties["all items"], "tab1;tab2");
        });
        it("should return same value in get, when value is set",function(){
            tabStripDescUnderTest.tabs(["tab1","tab2"]);
            var tabs = tabStripDescUnderTest.tabs();
            assert.deepEqual(tabs, ["tab1","tab2"]);
        });
    });

    describe("tabsCount method",function() {
        it("should add 'items count' to _properties with the correct value when value is given",function(){
            tabStripDescUnderTest.tabsCount(5);
            assert.strictEqual(tabStripDescUnderTest._properties["items count"], 5);
        });
        it("should add 'items count' to _properties and convert the value to number when value given is string",function(){
            tabStripDescUnderTest.tabsCount("5");
            assert.strictEqual(tabStripDescUnderTest._properties["items count"], 5);
        });
        it("should throw error when value given is NaN",function(){
            assert.throws(function(){
                tabStripDescUnderTest.tabsCount("5a");
            });
        });
        it("should add 'items count' to _properties with the correct value when value is given using property bag",function(){
            tabStripDescUnderTest = TabStripDesc({
                tabsCount: 5
            });
            assert.strictEqual(tabStripDescUnderTest._properties["items count"], 5);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = tabStripDescUnderTest.tabsCount(5);
            assert.strictEqual(result, tabStripDescUnderTest);
        });
        it("should remove 'items count' from _properties when value is null",function(){
            tabStripDescUnderTest._properties["items count"] = 5;
            tabStripDescUnderTest.tabsCount(null);
            assert(!("items count" in tabStripDescUnderTest._properties));
        });
        it("should return the value of 'items count' from _properties when value is not given",function(){
            tabStripDescUnderTest._properties["items count"] = 5;
            var tabsCount = tabStripDescUnderTest.tabsCount();
            assert.equal(tabsCount, 5);
        });
    });

});

describe("TabStrip Test Object Behavior",function(){
    var TabStripTO = require("../lib/tab_strip.js").TabStripTO;
    var tabStripTOBehaviorUnderTest;

    beforeEach(function(){
        tabStripTOBehaviorUnderTest = TabStripTO({});
        tabStripTOBehaviorUnderTest._getROProperty = sinon.stub();
        tabStripTOBehaviorUnderTest._executeCommand = sinon.stub();
        tabStripTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        tabStripTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(tabStripTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("tabs",function(){
        it("should convert the returned string to array",function(){
            var promise = {
                then: function(cb){return cb("tab1;tab2");}
            };
            tabStripTOBehaviorUnderTest._getROProperty.returns(promise);
            var res = tabStripTOBehaviorUnderTest.tabs();
            assert.deepEqual(res,["tab1","tab2"]);
        });
        it("should query the property 'all items'",function(){
            var promise  = {then: sinon.spy()};
            tabStripTOBehaviorUnderTest._getROProperty.returns(promise);
            tabStripTOBehaviorUnderTest.tabs();
            assert(tabStripTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(tabStripTOBehaviorUnderTest._getROProperty.firstCall.args[0],"all items");
        });
    });

    describe("select", function(){
        var funcPromise = {
            then: sinon.stub()
        };
        beforeEach(function(){
            tabStripTOBehaviorUnderTest._executeCommand.returns(funcPromise);
        });

        it("should throw error if no arguments passed",function(){
            assert.throws(function(){
                tabStripTOBehaviorUnderTest.select();
            });
        });
        it("should throw error if null passed",function(){
            assert.throws(function(){
                tabStripTOBehaviorUnderTest.select(null);
            });
        });
        it("should throw error if an object passed",function(){
            assert.throws(function(){
                tabStripTOBehaviorUnderTest.select({});
            });
        });
        it("should call the _executeCommand method and pass the correct parameters when string passed",function(){
            tabStripTOBehaviorUnderTest.select("some tab");
            assert(tabStripTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tabStripTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,2), ["Select", "some tab"]);
        });
        it("should call the _executeCommand method and pass the correct parameters when index passed",function(){
            tabStripTOBehaviorUnderTest.select(1);
            assert(tabStripTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tabStripTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,2), ["Select", 1]);
        });
        it("should return the same promise that was returned from _executeCommand method",function(){
            var promiseMock = { then:sinon.stub()};
            tabStripTOBehaviorUnderTest._executeCommand.returns(promiseMock);
            var res = tabStripTOBehaviorUnderTest.select("some tab");
            assert.strictEqual(res,promiseMock);
        });
    });

    describe("_firstTab method", function() {
        it("should execute _getROProperty 'first item'", function() {
            tabStripTOBehaviorUnderTest._firstTab();
            assert(tabStripTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.strictEqual(tabStripTOBehaviorUnderTest._getROProperty.firstCall.args[0].toLowerCase(),"first item");
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            tabStripTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = tabStripTOBehaviorUnderTest._firstTab();
            assert.strictEqual(res, promiseMock);
        });
    });

});













