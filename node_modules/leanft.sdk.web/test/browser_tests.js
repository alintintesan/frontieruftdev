// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/11/2015.
 * Unittests for browser test object
 */

var Browser = require("../lib/browser.js").Browser;
var DialogButton = require("../lib/browser.js").DialogButton;
var Page = require("../lib/page.js").Page;
var WebElement = require("../lib/webelement.js").WebElement;
var sinon = require("sinon");
var assert = require("assert");

describe("Browser Test Object",function(){
   var browserUnderTest = null;
    beforeEach(function(){
        //mocks the creation of the test object;
        sinon.stub(Browser.prototype.__super,"$").returns({});
        sinon.stub(Browser.prototype.__super,"$$").returns([]);
        sinon.stub(Browser.prototype.__super,"highlightMatches").returns(3);
        browserUnderTest = new Browser(null, null, -1);

        //since the browser constructor calls $ (describe), we reset the stub (to reset the method calls counter)
        Browser.prototype.__super.$.restore();
        sinon.stub(Browser.prototype.__super,"$").returns({});

        sinon.stub(browserUnderTest,"_executeCommand");
        sinon.stub(browserUnderTest,"_getROProperty");
   });

    describe("version",function(){
        it("should query the property 'version'",function(){
            var promiseMock = {then: function(cb) {return cb("Chrome 47.0");}};
            browserUnderTest._getROProperty.returns(promiseMock);
            browserUnderTest.version();
            assert(browserUnderTest._getROProperty.calledOnce);
            assert.deepEqual(browserUnderTest._getROProperty.firstCall.args,["version", arguments]);
        });
        it("should split answer correctly for Chrome",function(){
            var promiseMock = {then: function(cb) {return cb("Chrome 47.0");}};
            browserUnderTest._getROProperty.returns(promiseMock);
            var browserVersionObj = browserUnderTest.version();
            assert.strictEqual(browserVersionObj.type, "Chrome");
            assert.strictEqual(browserVersionObj.version, "47.0");
        });
        it("should split answer correctly for Firefox",function(){
            var promiseMock = {then: function(cb) {return cb("Mozilla Firefox 47.0");}};
            browserUnderTest._getROProperty.returns(promiseMock);
            var browserVersionObj = browserUnderTest.version();
            assert.strictEqual(browserVersionObj.type, "Mozilla Firefox");
            assert.strictEqual(browserVersionObj.version, "47.0");
        });
        it("should split answer correctly for IE",function(){
            var promiseMock = {then: function(cb) {return cb("internet explorer 10");}};
            browserUnderTest._getROProperty.returns(promiseMock);
            var browserVersionObj = browserUnderTest.version();
            assert.strictEqual(browserVersionObj.type, "internet explorer");
            assert.strictEqual(browserVersionObj.version, "10");
        });
    });

    describe("numberOfTabs",function(){
        it("should query the property 'number of tabs'",function(){
            browserUnderTest.numberOfTabs();
            assert(browserUnderTest._getROProperty.calledOnce);
            assert.deepEqual(browserUnderTest._getROProperty.firstCall.args,["number of tabs", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            browserUnderTest._getROProperty.returns(getROPromise);
            var res = browserUnderTest.numberOfTabs();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("openTitle",function(){
        it("should query the property 'opentitle'",function(){
            browserUnderTest.openTitle();
            assert(browserUnderTest._getROProperty.calledOnce);
            assert.deepEqual(browserUnderTest._getROProperty.firstCall.args,["opentitle", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            browserUnderTest._getROProperty.returns(getROPromise);
            var res = browserUnderTest.openTitle();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("openUrl",function(){
        it("should query the property 'openurl'",function(){
            browserUnderTest.openUrl();
            assert(browserUnderTest._getROProperty.calledOnce);
            assert.deepEqual(browserUnderTest._getROProperty.firstCall.args,["openurl", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            browserUnderTest._getROProperty.returns(getROPromise);
            var res = browserUnderTest.openUrl();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("title",function(){
        it("should query the property 'title'",function(){
            browserUnderTest.title();
            assert(browserUnderTest._getROProperty.calledOnce);
            assert.deepEqual(browserUnderTest._getROProperty.firstCall.args,["title", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            browserUnderTest._getROProperty.returns(getROPromise);
            var res = browserUnderTest.title();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("url",function(){
        it("should query the property 'url'",function(){
            browserUnderTest.url();
            assert(browserUnderTest._getROProperty.calledOnce);
            assert.deepEqual(browserUnderTest._getROProperty.firstCall.args,["url", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            browserUnderTest._getROProperty.returns(getROPromise);
            var res = browserUnderTest.url();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("refresh method",function(){
        it("should execute command 'Refresh'",function(){
            browserUnderTest.refresh();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"refresh");
        });

        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.refresh();

            assert.equal(res,executionPromise);
        });
    });

    describe("sync method",function(){
        it("should execute command 'Sync'",function(){
            browserUnderTest.sync();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"sync");
        });

        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.sync();

            assert.equal(res,executionPromise);
        });
    });

    describe("openNewTab method",function(){
        it("should execute command 'OpenNewTab'",function(){
            browserUnderTest.openNewTab();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"opennewtab");
        });

        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.openNewTab();

            assert.equal(res,executionPromise);
        });
    });

    describe("fullScreen method",function(){
        var FullScreenMode = require("../lib/browser.js").FullScreenMode;
        it("should execute command 'FullScreen'",function(){
            browserUnderTest.fullScreen();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"fullscreen");
        });

        it("should execute command 'FullScreen' with full screen mode as string",function(){
            browserUnderTest.fullScreen("on");
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"fullscreen", 1);
        });

        it("should execute command 'FullScreen' with full screen mode as enum",function(){
            browserUnderTest.fullScreen(FullScreenMode.off);
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"fullscreen", 0);
        });

        it("should execute command 'FullScreen' with full screen mode as string ignore case",function(){
            browserUnderTest.fullScreen("ToGgle");
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"fullscreen", 2);
        });

        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.fullScreen();

            assert.equal(res,executionPromise);
        });
    });

    describe("closeAllTabs method",function(){
        it("should execute command 'CloseAllTabs'",function(){
            browserUnderTest.closeAllTabs();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"closealltabs");
        });
        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.closeAllTabs();
            assert.equal(res,executionPromise);
        });
    });

    describe("forward method",function(){
        it("should execute command 'Forward'",function(){
            browserUnderTest.forward();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"forward");
        });
        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.forward();
            assert.equal(res,executionPromise);
        });
    });

    describe("getDialogText method",function(){
        it("should execute command 'GetDialogText'",function(){
            browserUnderTest.getDialogText();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"getdialogtext");
        });
        it("should return the execution promise",function(){
            var executionPromise = "Press OK button to continue ...";
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.getDialogText();
            assert.equal(res,executionPromise);
        });
    });

    describe("hasDialog method",function(){
        it("should execute command 'DialogExists'",function(){
            browserUnderTest.hasDialog();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"dialogexists");
        });
        it("should return the execution promise",function(){
            var executionPromise = true;
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.hasDialog();
            assert.equal(res,executionPromise);
        });
    });

    describe("handleDialog method",function(){
        it("should pass 0 to _executeCommand if 'ok' passed",function(){
            browserUnderTest.handleDialog("ok");
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["HandleDialog", 0]);
        });
        it("should pass 0 to _executeCommand if DialogButton.ok passed",function(){
            browserUnderTest.handleDialog(DialogButton.ok);
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["HandleDialog", 0]);
        });
        it("should pass 0 to _executeCommand if nothing passed",function(){
            browserUnderTest.handleDialog();
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["HandleDialog", 0]);
        });
        it("should pass 1 to _executeCommand if 'cancel' passed",function(){
            browserUnderTest.handleDialog("cancel");
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["HandleDialog", 1]);
        });
        it("should pass 1 to _executeCommand if DialogButton.cancel passed",function(){
            browserUnderTest.handleDialog(DialogButton.cancel);
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["HandleDialog", 1]);
        });
        it("should throw error if anything other than 'ok' or 'cancel' (not case sensitive) passed", function () {
            assert.throws(function(){
                browserUnderTest.handleDialog("ook");
            });
        });
        it("should throw error if a non string value passed", function () {
            assert.throws(function(){
                browserUnderTest.handleDialog({});
            });
        });
        it("should return the execution promise",function(){
            var executionPromise = true;
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.handleDialog("ok");
            assert.equal(res,executionPromise);
        });
    });

    describe("handlePromptDialog method",function(){
        it("should throw error if null passed", function () {
            assert.throws(function () {
                browserUnderTest.handlePromptDialog(null);
            });
        });
        it("should execute command 'HandleDialog'",function(){
            browserUnderTest.handlePromptDialog("some text");
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,3),["HandleDialog", 0, "some text"]);
        });
        it("should return the execution promise",function(){
            var executionPromise = "some text";
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.handlePromptDialog("some text");
            assert.equal(res,executionPromise);
        });
    });

    describe("deleteCookies method",function(){
        it("should throw error if null passed", function () {
            assert.throws(function () {
                browserUnderTest.deleteCookies(null);
            });
        });
        it("should return the execution promise",function(){
            var executionPromise = "some text";
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.deleteCookies("some text");
            assert.equal(res,executionPromise);
        });
        it("should execute command 'DeleteCookies' and pass correct arguments if no parameters accepted",function(){
            browserUnderTest.deleteCookies();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,1),["DeleteCookies"]);
        });
        it("should execute command 'DeleteCookies' and pass correct arguments if sourceName accepted",function(){
            browserUnderTest.deleteCookies("some source");
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["DeleteCookies", "some source"]);
        });
    });

    describe("embedScript method",function() {
        it("should execute command 'EmbedScript'",function(){
            browserUnderTest.embedScript(function(){});
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"embedscript");
        });
        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.embedScript("console.log(5)");
            assert.equal(res,executionPromise);
        });
        it("should throw error if null passed", function () {
            assert.throws(function () {
                browserUnderTest.embedScript(null);
            });
        });
        it("should throw error if no parameters passed", function () {
            assert.throws(function () {
                browserUnderTest.embedScript();
            });
        });
        it("should call _executeCommand and pass it the string as is, when the argument pass is a string", function () {
            browserUnderTest.embedScript("some string we expect to embed as script");
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["EmbedScript", "some string we expect to embed as script"]);
        });
        it("should call _executeCommand and pass it the function with it's name, when anonymous function passed as first argument, and a function name as the second argument", function () {
            browserUnderTest.embedScript(function(){}, "print");
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["EmbedScript", "function print(){}"]);
        });
        it("should call _executeCommand and pass it the function with it's name, when a named function passed as first argument, and a function name as the second argument", function () {
            browserUnderTest.embedScript(function print(){}, "SomeName");
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["EmbedScript", "function print(){}"]);
        });
        it("should call _executeCommand and pass it the function with it's name, when a named function passed as first argument, and a no function name is supplied", function () {
            browserUnderTest.embedScript(function print(){});
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["EmbedScript", "function print(){}"]);
        });
        it("should call _executeCommand and pass it the function as is, when anonymous function passed as first argument, and there is no function name passed as the second argument", function () {
            browserUnderTest.embedScript(function(){});
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,2),["EmbedScript", "function (){}"]);
        });
    });

    describe("resizeTo method",function(){
        it("should throw error if null passed",function(){
            assert.throws(function(){
                browserUnderTest.resizeTo(null);
            });
        });
        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.resizeTo(500, 500);
            assert.equal(res,executionPromise);
        });
        it("should call _executeCommand and pass it the correct arguments when two numbers passed",function(){
            browserUnderTest.resizeTo(500, 600);
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,3),["Resize", 500, 600]);
        });
        it("should call _executeCommand and pass it the correct arguments when a size object passed",function(){
            browserUnderTest.resizeTo({width: 500, height: 600});
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.deepEqual(browserUnderTest._executeCommand.firstCall.args.splice(0,3),["Resize", 500, 600]);
        });
        it("should throw error if one argument passed which is not an object",function(){
            assert.throws(function(){
                browserUnderTest.resizeTo(500);
            });
        });
        it("should throw error if an object that not contains both properties passed",function(){
            assert.throws(function(){
                browserUnderTest.resizeTo({});
            });
        });
        it("should throw error if an object that not contains two properties passed",function(){
            assert.throws(function(){
                browserUnderTest.resizeTo({width: 500});
            });
        });
        it("should throw error if an object passed with two properties but the keys are not 'width' or 'height'",function(){
            assert.throws(function(){
                browserUnderTest.resizeTo({shimon: 500, height: 600});
            });
        });
        it("should throw error if an object passed with two properties but one of the values is not a number",function(){
            assert.throws(function(){
                browserUnderTest.resizeTo({width: 500, height: "50A"});
            });
        });
        it("should throw error if an passed with two arguments but one of the values is not a number",function(){
            assert.throws(function(){
                browserUnderTest.resizeTo(500, "50A");
            });
        });
    });

   describe("back method",function(){
       it("should execute command 'back'",function(){
           browserUnderTest.back();
           assert(browserUnderTest._executeCommand.calledOnce);
           assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"back");
       });

       it("should return the execution promise",function(){
          var executionPromise = {};
           browserUnderTest._executeCommand.returns(executionPromise);
           var res = browserUnderTest.back();

           assert.equal(res,executionPromise);
       });
   });

    describe("close method",function(){
        it("should execute command 'close'",function(){
            browserUnderTest.close();
            assert(browserUnderTest._executeCommand.calledOnce);
            assert.equal(browserUnderTest._executeCommand.getCall(0).args[0].toLowerCase(),"close");
        });

        it("should return the execution promise",function(){
            var executionPromise = {};
            browserUnderTest._executeCommand.returns(executionPromise);
            var res = browserUnderTest.close();

            assert.equal(res,executionPromise);
        });
    });

    describe("constructor", function() {
        it("should construct page", function() {
            assert.notStrictEqual(browserUnderTest.page, undefined);
            assert.notStrictEqual(browserUnderTest.page, null);
        });
    });

    describe("$$ - findChildren", function() {
        var pageMock;

        beforeEach(function(){
            pageMock = {};
            pageMock.$$ = sinon.stub();

            browserUnderTest.page = pageMock;
        });

        it("should call the $$ method of the page and pass args as is", function() {
            var elem = WebElement();
            browserUnderTest.$$(elem, true);

            assert(pageMock.$$.calledOnce);
            assert(pageMock.$$.calledWith(elem, true));
        });

        it("should return the result as returned from the page", function() {
            pageMock.$$.returns("aaa");

            var elem = WebElement();
            var res = browserUnderTest.$$(elem, true);
            assert.strictEqual(res, "aaa");
        });

        it("should call super.$$ if page description is passed", function() {
            var page = Page();
            browserUnderTest.$$(page);
            assert(Browser.prototype.__super.$$.calledOnce);
            assert(Browser.prototype.__super.$$.calledWith(page));
        });   

        it("should call super.$$ if AI object description is passed", function() {
            var aiObject = {
                leanFTType: {
                    technology: "AI"
                }
            };
            browserUnderTest.$$(aiObject);
            assert(Browser.prototype.__super.$$.calledOnce);
            assert(Browser.prototype.__super.$$.calledWith(aiObject));
        });
    });

    describe("highlightMatches", function() {
        var pageMock;

        beforeEach(function(){
            pageMock = {};
            pageMock.highlightMatches = sinon.stub();

            browserUnderTest.page = pageMock;
        });

        it("should call the highlightMatches method of the page and pass args as is", function() {
            var elem = WebElement();
            browserUnderTest.highlightMatches(elem, true);

            assert(pageMock.highlightMatches.calledOnce);
            assert(pageMock.highlightMatches.calledWith(elem, true));
        });

        it("should return the result as returned from the page", function() {
            pageMock.highlightMatches.returns("aaa");

            var elem = WebElement();
            var res = browserUnderTest.highlightMatches(elem, true);
            assert.strictEqual(res, "aaa");
        });

        it("should call super.highlightMatches if page description is passed", function() {
            var page = Page();
            browserUnderTest.highlightMatches(page);
            assert(Browser.prototype.__super.highlightMatches.calledOnce);
            assert(Browser.prototype.__super.highlightMatches.calledWith(page));
        });
    });

    describe("$x - describe by xpath",function(){
        beforeEach(function(){
            browserUnderTest.page = {
                $x: sinon.stub()
            };
        });

        it("should forward the call to the page", function() {
            var elem = WebElement();
            browserUnderTest.$x(1,elem);

            assert(browserUnderTest.page.$x.calledOnce);
            assert(browserUnderTest.page.$x.calledWith(1,elem));
        });

        it("should return the result as returned from the page", function() {
            browserUnderTest.page.$x.returns("aaa");

            var res = browserUnderTest.$x(null);
            assert.strictEqual(res, "aaa");
        });


        it("should throw error if attempting to describe a page with xpath", function() {
            assert.throws(function() {
               browserUnderTest.$x("aaa", Page());
            });
        });
    });

    describe("$ method", function() {
        beforeEach(function(){
            browserUnderTest.page = {
                $: sinon.stub()
            };
        });

        it("should forward the call to the page when web element desc is provided", function() {
            var elem = WebElement();
            browserUnderTest.$(elem);

            assert(browserUnderTest.page.$.calledOnce);
            assert(browserUnderTest.page.$.calledWith(elem));
        });

        it("should forward the call to the page when css and web element desc are provided", function() {
            var elem = WebElement();
            browserUnderTest.$("css", elem);

            assert(browserUnderTest.page.$.calledOnce);
            assert(browserUnderTest.page.$.calledWith("css", elem));
        });

        it("should forward the call to the page when only css is provided", function() {
            browserUnderTest.$("css");

            assert(browserUnderTest.page.$.calledOnce);
            assert(browserUnderTest.page.$.calledWith("css"));
        });

        it("should call super.$ if page description is passed", function() {
            var page = Page();
            browserUnderTest.$(page);
            assert(Browser.prototype.__super.$.calledOnce);
            assert(Browser.prototype.__super.$.calledWith(page));
        });

        it("should call super.$ if AI object description is passed", function() {
            var aiObject = {
                leanFTType: {
                    technology: "AI"
                }
            };
            browserUnderTest.$(aiObject);
            assert(Browser.prototype.__super.$.calledOnce);
            assert(Browser.prototype.__super.$.calledWith(aiObject));
        });
    });

    describe("_getParsedBrowserVersion",function() {
        it("should split answer correctly for Firefox", function () {
            var browserUnderTest = new Browser();
            var browserVersionObj = browserUnderTest._getParsedBrowserVersion("Mozilla Firefox 47.0");
            assert.strictEqual(browserVersionObj.type, "Mozilla Firefox");
            assert.strictEqual(browserVersionObj.version, "47.0");
        });
    });

    describe("_getApplicationInfo",function() {
        it("should return parsed version as the browsers application info", function () {
            var browserUnderTest = new Browser();
            browserUnderTest._applicationInfo = {version:"Mozilla Firefox 47.0"};
            var browserVersionObj = browserUnderTest._getApplicationInfo();
            assert.strictEqual(browserVersionObj.type, "Mozilla Firefox");
            assert.strictEqual(browserVersionObj.version, "47.0");
        });
    });

    afterEach(function(){
        Browser.prototype.__super.$.restore();
        Browser.prototype.__super.$$.restore();
        Browser.prototype.__super.highlightMatches.restore();
    });
});

describe("BrowserFilter",function(){
    var browserFilterUnderTest;
    var BrowserFilter = require("../lib/browser.js").BrowserFilter;
    beforeEach(function(){
       browserFilterUnderTest = new BrowserFilter();
   });

    it("should not have the vri property",function(){
        assert.throws(function () {
            browserFilterUnderTest.vri();
        });
    });

    describe("title method",function() {
        it("should add 'title' to _properties with the correct value when value is given",function(){
            browserFilterUnderTest.title("some title");
            assert.strictEqual(browserFilterUnderTest._properties["title"], "some title");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = browserFilterUnderTest.title("some title");
            assert.strictEqual(result, browserFilterUnderTest);
        });
        it("should remove 'title' from _properties when value is null",function(){
            browserFilterUnderTest._properties["title"] = "some title";
            browserFilterUnderTest.title(null);
            assert(!("title" in browserFilterUnderTest._properties));
        });
        it("should return the value of 'title' from _properties when value is not given",function(){
            browserFilterUnderTest._properties["title"] = "some title";
            var title = browserFilterUnderTest.title();
            assert.equal(title, "some title");
        });
    });

    describe("url method",function() {
        it("should add 'url' to _properties with the correct value when value is given",function(){
            browserFilterUnderTest.url("some url");
            assert.strictEqual(browserFilterUnderTest._properties["url"], "some url");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = browserFilterUnderTest.url("some url");
            assert.strictEqual(result, browserFilterUnderTest);
        });
        it("should remove 'url' from _properties when value is null",function(){
            browserFilterUnderTest._properties["url"] = "some url";
            browserFilterUnderTest.url(null);
            assert(!("url" in browserFilterUnderTest._properties));
        });
        it("should return the value of 'url' from _properties when value is not given",function(){
            browserFilterUnderTest._properties["url"] = "some url";
            var url = browserFilterUnderTest.url();
            assert.equal(url, "some url");
        });
    });

    describe("openTitle method",function() {
        it("should add 'opentitle' to _properties with the correct value when value is given",function(){
            browserFilterUnderTest.openTitle("some title");
            assert.strictEqual(browserFilterUnderTest._properties["opentitle"], "some title");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = browserFilterUnderTest.openTitle("some title");
            assert.strictEqual(result, browserFilterUnderTest);
        });
        it("should remove 'opentitle' from _properties when value is null",function(){
            browserFilterUnderTest._properties["opentitle"] = "some title";
            browserFilterUnderTest.openTitle(null);
            assert(!("opentitle" in browserFilterUnderTest._properties));
        });
        it("should return the value of 'opentitle' from _properties when value is not given",function(){
            browserFilterUnderTest._properties["opentitle"] = "some title";
            var title = browserFilterUnderTest.openTitle();
            assert.equal(title, "some title");
        });
    });

    describe("openURL method",function() {
        it("should add 'openurl' to _properties with the correct value when value is given",function(){
            browserFilterUnderTest.openURL("some url");
            assert.strictEqual(browserFilterUnderTest._properties["openurl"], "some url");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = browserFilterUnderTest.openURL("some url");
            assert.strictEqual(result, browserFilterUnderTest);
        });
        it("should remove 'openurl' from _properties when value is null",function(){
            browserFilterUnderTest._properties["openurl"] = "some url";
            browserFilterUnderTest.openURL(null);
            assert(!("openurl" in browserFilterUnderTest._properties));
        });
        it("should return the value of 'url' from _properties when value is not given",function(){
            browserFilterUnderTest._properties["openurl"] = "some url";
            var url = browserFilterUnderTest.openURL();
            assert.equal(url, "some url");
        });
    });

    describe("type method",function() {
        it("should add 'version' to _properties with regular expression that captures the browser type",function(){
            browserFilterUnderTest.type("SomeBrowser");
            assert.deepEqual(browserFilterUnderTest._properties["version"], /SomeBrowser.*/);
        });
        it("should add 'version' to _properties with regular expression that captures the firefox browser",function(){
            browserFilterUnderTest.type("Firefox");
            assert.deepEqual(browserFilterUnderTest._properties["version"], /Mozilla Firefox.*/);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = browserFilterUnderTest.type("some url");
            assert.strictEqual(result, browserFilterUnderTest);
        });
        it("should remove 'version' from _properties when value is null",function(){
            browserFilterUnderTest._properties["version"] = "some url";
            browserFilterUnderTest.type(null);
            assert(!("version" in browserFilterUnderTest._properties));
        });
        it("should return the value of 'version' from _properties when value is not given and convert it to BrowserType",function(){
            browserFilterUnderTest._properties["version"] = /SomeBrowser.*/;
            var browserType = browserFilterUnderTest.type();
            assert.strictEqual(browserType, "SomeBrowser");
        });
        it("should return the value of 'version' from _properties when value is not given and convert it to BrowserType (FireFox)",function(){
            browserFilterUnderTest._properties["version"] = /Mozilla Firefox.*/;
            var browserType = browserFilterUnderTest.type();
            assert.strictEqual(browserType, "Firefox");
        });

    });

    describe("set method",function() {
        it("should add 'prop1' to _properties with the correct value when called with a pair of a property and a value",function(){
            browserFilterUnderTest.set("prop1", "value1");
            assert.deepEqual(browserFilterUnderTest._properties["prop1"], "value1");
        });
        it("should return this - builder pattern when called with a property and a value",function(){
            var result = browserFilterUnderTest.set("prop1", "value1");
            assert.strictEqual(result, browserFilterUnderTest);
        });
        it("should call the correct property's method when called with one of the predefined properties, like title",function(){
            sinon.stub(browserFilterUnderTest, "title");
            browserFilterUnderTest.set("title", "value1");
            sinon.assert.calledOnce(browserFilterUnderTest.title);
            sinon.assert.calledWith(browserFilterUnderTest.title, "value1");
        });
        it("should call the correct property's method when called with one of the predefined properties, like title, with any case",function(){
            sinon.stub(browserFilterUnderTest, "title");
            browserFilterUnderTest.set("TitLe", "value1");
            sinon.assert.calledOnce(browserFilterUnderTest.title);
            sinon.assert.calledWith(browserFilterUnderTest.title, "value1");
        });
    });

    describe("get method",function() {
        it("should return the correct property's value when called with one of the predefined properties",function(){
            sinon.stub(browserFilterUnderTest, "title", function (){return "Title1"});
            var result = browserFilterUnderTest.get("title");
            sinon.assert.calledOnce(browserFilterUnderTest.title);
            assert.strictEqual(result, "Title1");
        });
        it("should return the correct property's value when called with a non predefined property",function(){
            browserFilterUnderTest._properties["Prop1"] = "Value1";
            var result = browserFilterUnderTest.get("Prop1");
            assert.strictEqual(result, "Value1");
        });
    });

    describe("BrowserFilter constructor method",function() {
        it("should add the properties in the properties bag parameter to the _properties collection when called with non predefined properties",function(){
            browserFilterUnderTest = new BrowserFilter({"Prop1": "Value1", "Prop2": "Value2"});
            assert.strictEqual(browserFilterUnderTest._properties["Prop1"], "Value1");
            assert.strictEqual(browserFilterUnderTest._properties["Prop2"], "Value2");
        });
        it("should add the properties in the properties bag parameter to the _properties collection when called with a non predefined and a predefined properties",function(){
            browserFilterUnderTest = new BrowserFilter({"title": "Value1", "Prop2": "Value2"});
            assert.strictEqual(browserFilterUnderTest.title(), "Value1");
            assert.strictEqual(browserFilterUnderTest.get("Prop2"), "Value2");
        });
    });
});