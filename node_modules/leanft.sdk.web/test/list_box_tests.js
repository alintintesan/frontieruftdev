// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 29/11/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ListBox Description",function() {
    var ListBoxDesc = require("../lib/list_box.js").ListBox;
    var listBoxDescUnderTest;

    beforeEach(function () {
        listBoxDescUnderTest = ListBoxDesc();
    });

    it("should support initialization via property bag", function () {
        listBoxDescUnderTest = ListBoxDesc({
            css: ".some_class"
        });

        assert.strictEqual(listBoxDescUnderTest._properties["css"], ".some_class");
    });

    describe("value method",function() {
        it("should add 'value' to _properties when value is given",function(){
            listBoxDescUnderTest.value("some value");
            assert.strictEqual(listBoxDescUnderTest._properties["value"], "some value");
        });

        it("should add 'value' to _properties when value is given using property bag",function(){
            listBoxDescUnderTest = ListBoxDesc({
                value: "some value"
            });
            assert.strictEqual(listBoxDescUnderTest._properties["value"], "some value");
        });

        it("should return this - builder pattern, when value is given",function(){
            var result = listBoxDescUnderTest.value("some value");
            assert.strictEqual(result, listBoxDescUnderTest);
        });

        it("should remove 'value' from _properties when value is null",function(){
            listBoxDescUnderTest._properties["value"] = "some value";
            listBoxDescUnderTest.value(null);
            assert(!("value" in listBoxDescUnderTest._properties));
        });
        it("should return the value of 'value' from _properties when value is not given",function(){
            listBoxDescUnderTest._properties["value"] = "some value";
            var value = listBoxDescUnderTest.value();
            assert.strictEqual(value, "some value");
        });

        it("should not change value of 'value' in _properties when get is called", function() {
            listBoxDescUnderTest._properties["value"] = "some value";
            listBoxDescUnderTest.value();
            assert.strictEqual(listBoxDescUnderTest._properties["value"], "some value");
        });
    });

    describe("defaultValue method",function() {
        it("should add 'default value' to _properties when value is given",function(){
            listBoxDescUnderTest.defaultValue("some value");
            assert.strictEqual(listBoxDescUnderTest._properties["default value"], "some value");
        });

        it("should add 'default value' to _properties when value is given using property bag",function(){
            listBoxDescUnderTest = ListBoxDesc({
                defaultValue: "some value"
            });
            assert.strictEqual(listBoxDescUnderTest._properties["default value"], "some value");
        });

        it("should return this - builder pattern, when value is given",function(){
            var result = listBoxDescUnderTest.defaultValue("some value");
            assert.strictEqual(result, listBoxDescUnderTest);
        });

        it("should remove 'default value' from _properties when value is null",function(){
            listBoxDescUnderTest._properties["default value"] = "some value";
            listBoxDescUnderTest.defaultValue(null);
            assert(!("default value" in listBoxDescUnderTest._properties));
        });
        it("should return the value of 'default value' from _properties when value is not given",function(){
            listBoxDescUnderTest._properties["default value"] = "some value";
            var defaultValue = listBoxDescUnderTest.defaultValue();
            assert.strictEqual(defaultValue, "some value");
        });

        it("should not change value of 'default value' in _properties when get is called", function() {
            listBoxDescUnderTest._properties["default value"] = "some value";
            listBoxDescUnderTest.defaultValue();
            assert.strictEqual(listBoxDescUnderTest._properties["default value"], "some value");
        });
    });

    describe("isMultiple method",function() {
        it("should add 'multiple' to _properties when value is given",function(){
            listBoxDescUnderTest.isMultiple(true);
            assert.strictEqual(listBoxDescUnderTest._properties["multiple"], true);
        });

        it("should add 'multiple' to _properties when value is given using property bag",function(){
            listBoxDescUnderTest = ListBoxDesc({
                isMultiple: true
            });
            assert.strictEqual(listBoxDescUnderTest._properties["multiple"], true);
        });

        it("should return this - builder pattern, when value is given",function(){
            var result = listBoxDescUnderTest.isMultiple(true);
            assert.strictEqual(result, listBoxDescUnderTest);
        });

        it("should remove 'multiple' from _properties when value is null",function(){
            listBoxDescUnderTest._properties["multiple"] = true;
            listBoxDescUnderTest.isMultiple(null);
            assert(!("multiple" in listBoxDescUnderTest._properties));
        });
        it("should return the value of 'multiple' from _properties when value is not given",function(){
            listBoxDescUnderTest._properties["multiple"] = true;
            var value = listBoxDescUnderTest.isMultiple();
            assert.strictEqual(value, true);
        });

        it("should not change value of 'multiple' in _properties when get is called", function() {
            listBoxDescUnderTest._properties["multiple"] = true;
            listBoxDescUnderTest.isMultiple();
            assert.strictEqual(listBoxDescUnderTest._properties["multiple"], true);
        });
    });

    describe("visibleItemsCount method",function() {
        it("should add 'visible items' to _properties when value is given",function(){
            listBoxDescUnderTest.visibleItemsCount(8);
            assert.strictEqual(listBoxDescUnderTest._properties["visible items"], 8);
        });

        it("should add 'visible items' to _properties when value is given using property bag",function(){
            listBoxDescUnderTest = ListBoxDesc({
                visibleItemsCount: 8
            });
            assert.strictEqual(listBoxDescUnderTest._properties["visible items"], 8);
        });

        it("should return this - builder pattern, when value is given",function(){
            var result = listBoxDescUnderTest.visibleItemsCount(8);
            assert.strictEqual(result, listBoxDescUnderTest);
        });

        it("should remove 'visible items' from _properties when value is null",function(){
            listBoxDescUnderTest._properties["visible items"] = 8;
            listBoxDescUnderTest.visibleItemsCount(null);
            assert(!("visible items" in listBoxDescUnderTest._properties));
        });
        it("should return the value of 'visible items' from _properties when value is not given",function(){
            listBoxDescUnderTest._properties["visible items"] = 8;
            var value = listBoxDescUnderTest.visibleItemsCount();
            assert.strictEqual(value, 8);
        });

        it("should not change value of 'visible items' in _properties when get is called", function() {
            listBoxDescUnderTest._properties["visible items"] = 8;
            listBoxDescUnderTest.visibleItemsCount();
            assert.strictEqual(listBoxDescUnderTest._properties["visible items"], 8);
        });
    });

    describe("items method",function() {
        it("should add 'all items' to _properties when value is given",function(){
            listBoxDescUnderTest.items(["item1","item2"]);
            assert.strictEqual(listBoxDescUnderTest._properties["all items"], "item1;item2");
        });

        it("should add 'all items' to _properties when value is given using property bag",function(){
            listBoxDescUnderTest = ListBoxDesc({
                items: ["item1","item2"]
            });
            assert.strictEqual(listBoxDescUnderTest._properties["all items"], "item1;item2");
        });

        it("should return this - builder pattern, when value is given",function(){
            var result = listBoxDescUnderTest.items(["item1","item2"]);
            assert.strictEqual(result, listBoxDescUnderTest);
        });

        it("should remove 'all items' from _properties when value is null",function(){
            listBoxDescUnderTest._properties["all items"] = "item1;item2";
            listBoxDescUnderTest.items(null);
            assert(!("all items" in listBoxDescUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties when value is not given",function(){
            listBoxDescUnderTest._properties["all items"] = "item1;item2";
            var value = listBoxDescUnderTest.items();
            assert.deepEqual(value, ["item1","item2"]);
        });

        it("should not change value of 'all items' in _properties when get is called", function() {
            listBoxDescUnderTest._properties["all items"] = "item1;item2";
            listBoxDescUnderTest.items();
            assert.strictEqual(listBoxDescUnderTest._properties["all items"], "item1;item2");
        });
    });

    describe("selectedItems method",function() {
        it("should add 'selection' to _properties when value is given",function(){
            listBoxDescUnderTest.selectedItems(["item1","item2"]);
            assert.strictEqual(listBoxDescUnderTest._properties["selection"], "item1;item2");
        });

        it("should add 'selection' to _properties when value is given using property bag",function(){
            listBoxDescUnderTest = ListBoxDesc({
                selectedItems: ["item1","item2"]
            });
            assert.strictEqual(listBoxDescUnderTest._properties["selection"], "item1;item2");
        });

        it("should return this - builder pattern, when value is given",function(){
            var result = listBoxDescUnderTest.selectedItems(["item1","item2"]);
            assert.strictEqual(result, listBoxDescUnderTest);
        });

        it("should remove 'selection' from _properties when value is null",function(){
            listBoxDescUnderTest._properties["selection"] = "item1;item2";
            listBoxDescUnderTest.selectedItems(null);
            assert(!("selection" in listBoxDescUnderTest._properties));
        });
        it("should return the value of 'selection' from _properties when value is not given",function(){
            listBoxDescUnderTest._properties["selection"] = "item1;item2";
            var value = listBoxDescUnderTest.selectedItems();
            assert.deepEqual(value, ["item1","item2"]);
        });

        it("should not change value of 'selection' in _properties when get is called", function() {
            listBoxDescUnderTest._properties["selection"] = "item1;item2";
            listBoxDescUnderTest.selectedItems();
            assert.strictEqual(listBoxDescUnderTest._properties["selection"], "item1;item2");
        });
    });

    describe("itemsCount method",function() {
        it("should add 'items count' to _properties when value is given",function(){
            listBoxDescUnderTest.itemsCount(8);
            assert.strictEqual(listBoxDescUnderTest._properties["items count"], 8);
        });

        it("should add 'items count' to _properties when value is given using property bag",function(){
            listBoxDescUnderTest = ListBoxDesc({
                itemsCount: 8
            });
            assert.strictEqual(listBoxDescUnderTest._properties["items count"], 8);
        });

        it("should return this - builder pattern, when value is given",function(){
            var result = listBoxDescUnderTest.itemsCount(8);
            assert.strictEqual(result, listBoxDescUnderTest);
        });

        it("should remove 'items count' from _properties when value is null",function(){
            listBoxDescUnderTest._properties["items count"] = 8;
            listBoxDescUnderTest.itemsCount(null);
            assert(!("items count" in listBoxDescUnderTest._properties));
        });
        it("should return the value of 'items count' from _properties when value is not given",function(){
            listBoxDescUnderTest._properties["items count"] = 8;
            var value = listBoxDescUnderTest.itemsCount();
            assert.strictEqual(value, 8);
        });

        it("should not change value of 'items count' in _properties when get is called", function() {
            listBoxDescUnderTest._properties["items count"] = 8;
            listBoxDescUnderTest.itemsCount();
            assert.strictEqual(listBoxDescUnderTest._properties["items count"], 8);
        });
    });
});

describe("ListBox Test Object",function() {
    var ListBoxTO = require("../lib/list_box.js").ListBoxTO;
    var listBoxUnderTest = null;
    beforeEach(function () {
        listBoxUnderTest = new ListBoxTO();
        listBoxUnderTest._executeCommand = sinon.stub();
        listBoxUnderTest._getROProperty = sinon.stub();
        listBoxUnderTest._getROProperties = sinon.stub();
        listBoxUnderTest._session = sinon.stub();
        listBoxUnderTest._session.fireEvent = sinon.stub();
        listBoxUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(listBoxUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("click method", function () {
        it("assert click method is supported", function () {
            assert('click' in listBoxUnderTest);
        });
    });

    describe("value method", function() {
        it("should execute _getROProperty 'value'", function() {
            listBoxUnderTest.value();
            assert(listBoxUnderTest._getROProperty.calledOnce);
            assert.strictEqual(listBoxUnderTest._getROProperty.firstCall.args[0].toLowerCase(),"value");
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            listBoxUnderTest._getROProperty.returns(promiseMock);
            var res = listBoxUnderTest.value();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("defaultValue method", function() {
        it("should execute _getROProperty 'value'", function() {
            listBoxUnderTest.defaultValue();
            assert(listBoxUnderTest._getROProperty.calledOnce);
            assert.strictEqual(listBoxUnderTest._getROProperty.firstCall.args[0].toLowerCase(),"default value");
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            listBoxUnderTest._getROProperty.returns(promiseMock);
            var res = listBoxUnderTest.defaultValue();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("defaultValue method", function() {
        it("should execute _getROProperty 'default value'", function() {
            listBoxUnderTest.defaultValue();
            assert(listBoxUnderTest._getROProperty.calledOnce);
            assert.strictEqual(listBoxUnderTest._getROProperty.firstCall.args[0].toLowerCase(),"default value");
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            listBoxUnderTest._getROProperty.returns(promiseMock);
            var res = listBoxUnderTest.defaultValue();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("isEnabled",function(){
        var promiseMock = {then: function(cb) {return cb(1);}};
        it("should query the property 'disabled'",function(){
            listBoxUnderTest._getROProperty.returns(promiseMock);
            listBoxUnderTest.isEnabled();
            assert(listBoxUnderTest._getROProperty.calledOnce);
            assert.deepEqual(listBoxUnderTest._getROProperty.firstCall.args,["disabled", arguments]);
        });
        it("should convert the returned number to the opposite boolean",function(){
            listBoxUnderTest._getROProperty.returns(promiseMock);
            var res = listBoxUnderTest.isEnabled();
            assert.strictEqual(res,false);
        });
    });

    describe("isMultiple",function(){
        var promiseMock = {then: function(cb) {return cb(1);}};
        it("should query the property 'multiple'",function(){
            listBoxUnderTest._getROProperty.returns(promiseMock);
            listBoxUnderTest.isMultiple();
            assert(listBoxUnderTest._getROProperty.calledOnce);
            assert.deepEqual(listBoxUnderTest._getROProperty.firstCall.args,["multiple", arguments]);
        });
        it("should convert the returned number to boolean",function(){
            listBoxUnderTest._getROProperty.returns(promiseMock);
            var res = listBoxUnderTest.isMultiple();
            assert.strictEqual(res,true);
        });
    });

    describe("visibleItemsCount method", function() {
        it("should execute _getROProperty 'visible items'", function() {
            listBoxUnderTest.visibleItemsCount();
            assert(listBoxUnderTest._getROProperty.calledOnce);
            assert.strictEqual(listBoxUnderTest._getROProperty.firstCall.args[0].toLowerCase(),"visible items");
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            listBoxUnderTest._getROProperty.returns(promiseMock);
            var res = listBoxUnderTest.visibleItemsCount();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("items",function(){
        var promiseMock = {then: function(cb) {return cb("item1;item2");}};
        it("should query the property 'all items'",function(){
            listBoxUnderTest._getROProperty.returns(promiseMock);
            listBoxUnderTest.items();
            assert(listBoxUnderTest._getROProperty.calledOnce);
            assert.deepEqual(listBoxUnderTest._getROProperty.firstCall.args,["all items", arguments]);
        });
        it("should split the string returned by the promise with delimiter: ';'",function(){
            listBoxUnderTest._getROProperty.returns(promiseMock);
            var res = listBoxUnderTest.items();
            assert.deepEqual(res,["item1", "item2"]);
        });
    });

    describe("selectedItems",function(){
        var promiseMock = {then: function(cb) {return cb(["0;2","item1;item2;item3"]);}};
        it("should query the properties 'selected item index', 'all items'",function(){
            listBoxUnderTest._getROProperties.returns(promiseMock);
            listBoxUnderTest.selectedItems();
            assert(listBoxUnderTest._getROProperties.calledOnce);
            assert.deepEqual(listBoxUnderTest._getROProperties.firstCall.args,[arguments, "selected item index","all items"]);
        });
        it("should split the string returned by the promise with delimiter: ';'",function(){
            listBoxUnderTest._getROProperties.returns(promiseMock);
            var res = listBoxUnderTest.selectedItems();
            assert.deepEqual(res,["item1", "item3"]);
        });
    });

    describe("type",function(){
        it("should query the property 'type'",function(){
            listBoxUnderTest.type();
            assert(listBoxUnderTest._getROProperty.calledOnce);
            assert.equal(listBoxUnderTest._getROProperty.firstCall.args[0],"type");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            listBoxUnderTest._getROProperty.returns(getROPromise);
            var res = listBoxUnderTest.type();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("select", function(){
        it("should call Select with string arg as is, when called with single string value", function() {
            listBoxUnderTest.select("item1");
            assert(listBoxUnderTest._executeCommand.calledOnce);
            assert.deepEqual(listBoxUnderTest._executeCommand.firstCall.args.splice(0,2), ["Select", "item1"]);
        });
        it("should add prefix of '#' to numeric arg", function() {
            listBoxUnderTest.select(8);
            assert(listBoxUnderTest._executeCommand.calledOnce);
            assert.deepEqual(listBoxUnderTest._executeCommand.firstCall.args.splice(0,2), ["Select", "#8"]);
        });
        it("should call Select with first arg passed and ExtendSelect for all other", function() {
            var promiseMock = {then: function(cb) {return cb();}};
            listBoxUnderTest._executeCommand.returns(promiseMock);
            listBoxUnderTest.select("item1", 8);
            assert(listBoxUnderTest._executeCommand.calledTwice);
            assert.deepEqual(listBoxUnderTest._executeCommand.firstCall.args.splice(0,2), ["Select", "item1"]);
            assert.deepEqual(listBoxUnderTest._executeCommand.secondCall.args.splice(0,2), ["ExtendSelect", "#8"]);
        });
    });

    describe("extendSelect", function(){
        it("should call ExtendSelect with string arg as is, when called with single string value", function() {
            listBoxUnderTest.extendSelect("item1");
            assert(listBoxUnderTest._executeCommand.calledOnce);
            assert.deepEqual(listBoxUnderTest._executeCommand.firstCall.args.splice(0,2), ["ExtendSelect", "item1"]);
        });
        it("should add prefix of '#' to numeric arg", function() {
            listBoxUnderTest.extendSelect(8);
            assert(listBoxUnderTest._executeCommand.calledOnce);
            assert.deepEqual(listBoxUnderTest._executeCommand.firstCall.args.splice(0,2), ["ExtendSelect", "#8"]);
        });
        it("should call ExtendSelect for all args passed", function() {
            var promiseMock = {then: function(cb) {return cb();}};
            listBoxUnderTest._executeCommand.returns(promiseMock);
            listBoxUnderTest.extendSelect("item1", 8);
            assert(listBoxUnderTest._executeCommand.calledTwice);
            assert.deepEqual(listBoxUnderTest._executeCommand.firstCall.args.splice(0,2), ["ExtendSelect", "item1"]);
            assert.deepEqual(listBoxUnderTest._executeCommand.secondCall.args.splice(0,2), ["ExtendSelect", "#8"]);
        });
    });

    describe("deselect", function(){
        it("should call DeSelect with string arg as is, when called with single string value", function() {
            listBoxUnderTest.deselect("item1");
            assert(listBoxUnderTest._executeCommand.calledOnce);
            assert.deepEqual(listBoxUnderTest._executeCommand.firstCall.args.splice(0,2), ["DeSelect", "item1"]);
        });
        it("should add prefix of '#' to numeric arg", function() {
            listBoxUnderTest.deselect(8);
            assert(listBoxUnderTest._executeCommand.calledOnce);
            assert.deepEqual(listBoxUnderTest._executeCommand.firstCall.args.splice(0,2), ["DeSelect", "#8"]);
        });
        it("should call DeSelect all args", function() {
            var promiseMock = {then: function(cb) {return cb();}};
            listBoxUnderTest._executeCommand.returns(promiseMock);
            listBoxUnderTest.deselect("item1", 8);
            assert(listBoxUnderTest._executeCommand.calledTwice);
            assert.deepEqual(listBoxUnderTest._executeCommand.firstCall.args.splice(0,2), ["DeSelect", "item1"]);
            assert.deepEqual(listBoxUnderTest._executeCommand.secondCall.args.splice(0,2), ["DeSelect", "#8"]);
        });
    });

    describe("_firstItem method", function() {
        it("should execute _getROProperty 'first item'", function() {
            listBoxUnderTest._firstItem();
            assert(listBoxUnderTest._getROProperty.calledOnce);
            assert.strictEqual(listBoxUnderTest._getROProperty.firstCall.args[0].toLowerCase(),"first item");
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            listBoxUnderTest._getROProperty.returns(promiseMock);
            var res = listBoxUnderTest._firstItem();
            assert.strictEqual(res, promiseMock);
        });
    });
});