// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/30/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("AudioControl Description",function(){
    var AudioControlDesc = require("../lib/audio_control.js").AudioControl;
    var AudioControlDescUnderTest;

    beforeEach(function(){
        AudioControlDescUnderTest = AudioControlDesc();
    });

    describe("hasAutoPlay method",function() {
        it("should add 'autoplay' to _properties with the correct value when value is given",function(){
            AudioControlDescUnderTest.hasAutoPlay(false);
            assert.strictEqual(AudioControlDescUnderTest._properties["autoplay"], false);
        });
        it("should add 'autoplay' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                hasAutoPlay: false
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["autoplay"], false);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.hasAutoPlay(false);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'autoplay' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["autoplay"] = false;
            AudioControlDescUnderTest.hasAutoPlay(null);
            assert(!("autoplay" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'autoplay' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["autoplay"] = false;
            var hasAutoPlay = AudioControlDescUnderTest.hasAutoPlay();
            assert.equal(hasAutoPlay, false);
        });
    });

    describe("hasPlaybackControls method",function() {
        it("should add 'controls' to _properties with the correct value when value is given",function(){
            AudioControlDescUnderTest.hasPlaybackControls(false);
            assert.strictEqual(AudioControlDescUnderTest._properties["controls"], false);
        });
        it("should add 'controls' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                hasPlaybackControls: false
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["controls"], false);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.hasPlaybackControls(false);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'controls' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["controls"] = false;
            AudioControlDescUnderTest.hasPlaybackControls(null);
            assert(!("controls" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'controls' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["controls"] = false;
            var hasPlaybackControls = AudioControlDescUnderTest.hasPlaybackControls();
            assert.equal(hasPlaybackControls, false);
        });
    });

    describe("currentSource method",function() {
        it("should add 'current source' to _properties with the correct value when value is given",function(){
            AudioControlDescUnderTest.currentSource(false);
            assert.strictEqual(AudioControlDescUnderTest._properties["current source"], false);
        });
        it("should add 'current source' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                currentSource: false
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["current source"], false);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.currentSource(false);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'current source' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["current source"] = false;
            AudioControlDescUnderTest.currentSource(null);
            assert(!("current source" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'current source' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["current source"] = false;
            var currentSource = AudioControlDescUnderTest.currentSource();
            assert.equal(currentSource, false);
        });
    });

    describe("isPlayInLoop method",function() {
        it("should add 'loop' to _properties with the correct value when value is given",function(){
            AudioControlDescUnderTest.isPlayInLoop(false);
            assert.strictEqual(AudioControlDescUnderTest._properties["loop"], false);
        });
        it("should add 'loop' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                isPlayInLoop: false
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["loop"], false);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.isPlayInLoop(false);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'loop' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["loop"] = false;
            AudioControlDescUnderTest.isPlayInLoop(null);
            assert(!("loop" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'loop' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["loop"] = false;
            var isPlayInLoop = AudioControlDescUnderTest.isPlayInLoop();
            assert.equal(isPlayInLoop, false);
        });
    });

    describe("isMuted method",function() {
        it("should add 'muted' to _properties with the correct value when value is given",function(){
            AudioControlDescUnderTest.isMuted(false);
            assert.strictEqual(AudioControlDescUnderTest._properties["muted"], false);
        });
        it("should add 'muted' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                isMuted: false
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["muted"], false);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.isMuted(false);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'muted' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["muted"] = false;
            AudioControlDescUnderTest.isMuted(null);
            assert(!("muted" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'muted' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["muted"] = false;
            var isMuted = AudioControlDescUnderTest.isMuted();
            assert.equal(isMuted, false);
        });
    });

    describe("isPlaying method",function() {
        it("should add 'playing' to _properties with the correct value when value is given",function(){
            AudioControlDescUnderTest.isPlaying(false);
            assert.strictEqual(AudioControlDescUnderTest._properties["playing"], false);
        });
        it("should add 'playing' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                isPlaying: false
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["playing"], false);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.isPlaying(false);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'playing' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["playing"] = false;
            AudioControlDescUnderTest.isPlaying(null);
            assert(!("playing" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'playing' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["playing"] = false;
            var isPlaying = AudioControlDescUnderTest.isPlaying();
            assert.equal(isPlaying, false);
        });
    });

    describe("playbackTime method",function() {
        it("should add 'current time' to _properties with the correct value when value is given as number",function(){
            AudioControlDescUnderTest.playbackTime(10);
            assert.strictEqual(AudioControlDescUnderTest._properties["current time"], 10);
        });
        it("should add 'current time' to _properties with the correct value when value is given as string",function(){
            AudioControlDescUnderTest.playbackTime("10");
            assert.strictEqual(AudioControlDescUnderTest._properties["current time"], 10);
        });
        it("should throw error if the value given NaN",function(){
            assert.throws(function(){
                AudioControlDescUnderTest.playbackTime("10a");
            });
        });
        it("should add 'current time' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                playbackTime: 10
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["current time"], 10);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.playbackTime(10);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'current time' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["current time"] = 10;
            AudioControlDescUnderTest.playbackTime(null);
            assert(!("current time" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'current time' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["current time"] = 10;
            var playbackTime = AudioControlDescUnderTest.playbackTime();
            assert.strictEqual(playbackTime, 10);
        });
        it("should return same value in get, when value is set if set value is number",function(){
            AudioControlDescUnderTest.playbackTime(10);
            var playbackTime = AudioControlDescUnderTest.playbackTime();
            assert.deepEqual(playbackTime, 10);
        });
        it("should return (number) value in get, when value set is numeric string",function(){
            AudioControlDescUnderTest.playbackTime("10");
            var playbackTime = AudioControlDescUnderTest.playbackTime();
            assert.deepEqual(playbackTime, 10);
        });
    });

    describe("duration method",function() {
        it("should add 'duration' to _properties with the correct value when value is given as number",function(){
            AudioControlDescUnderTest.duration(10);
            assert.strictEqual(AudioControlDescUnderTest._properties["duration"], 10);
        });
        it("should add 'duration' to _properties with the correct value when value is given as string",function(){    // _isNumericSrt not a function
            AudioControlDescUnderTest.duration("10");
            assert.strictEqual(AudioControlDescUnderTest._properties["duration"], 10);
        });
        it("should throw error if the value given NaN",function(){
            assert.throws(function(){
                AudioControlDescUnderTest.duration("10a");
            });
        });
        it("should add 'duration' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                duration: 10
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["duration"], 10);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.duration(10);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'duration' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["duration"] = 10;
            AudioControlDescUnderTest.duration(null);
            assert(!("duration" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'duration' from _properties when value is not given",function(){
            AudioControlDescUnderTest._properties["duration"] = 10;
            var duration = AudioControlDescUnderTest.duration();
            assert.strictEqual(duration, 10);
        });
        it("should return same value in get, when value is set if set value is number",function(){
            AudioControlDescUnderTest.duration(10);
            var duration = AudioControlDescUnderTest.duration();
            assert.deepEqual(duration, 10);
        });
        it("should return (number) value in get, when value set is numeric string",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest.playbackTime("10");
            var playbackTime = AudioControlDescUnderTest.playbackTime();
            assert.deepEqual(playbackTime, 10);
        });
    });

    describe("sources method",function() {
        it("should add 'sources' with correct value when a value is given",function(){
            AudioControlDescUnderTest.sources(["source1", "source2"]);
            assert.strictEqual(AudioControlDescUnderTest._properties["sources"], "source1;source2");
        });
        it("should add 'sources' with correct value, when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                sources: ["source1", "source2"]
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["sources"], "source1;source2");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.sources(["source1", "source2"]);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'sources' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["sources"] = "source1;source2";
            AudioControlDescUnderTest.sources(null);
            assert(!("sources" in AudioControlDescUnderTest._properties));
        });
        it("should return the value of 'sources' from _properties, when value is not given",function(){
            AudioControlDescUnderTest._properties["sources"] = "source1;source2";
            var sources = AudioControlDescUnderTest.sources();
            assert.deepEqual(sources, ["source1", "source2"]);
        });
        it("should not modify property 'sources', upon get",function(){
            AudioControlDescUnderTest._properties["sources"] = "source1;source2";
            AudioControlDescUnderTest.sources();
            assert.strictEqual(AudioControlDescUnderTest._properties["sources"], "source1;source2");
        });
        it("should return same value in get, when value is set",function(){
            AudioControlDescUnderTest.sources(["source1", "source2"]);
            var sources = AudioControlDescUnderTest.sources();
            assert.deepEqual(sources, ["source1", "source2"]);
        });
    });

    describe("playbackRate method",function() {
       it("should add 'playback rate' to _properties with the correct value when value is given as number",function(){
            AudioControlDescUnderTest.playbackRate(1.23);
            assert.strictEqual(AudioControlDescUnderTest._properties["playback rate"], "1.23");
        });
        it("should throw error if the value given NaN",function(){
            assert.throws(function(){
                AudioControlDescUnderTest.playbackRate("1.23a");
            });
        });
        it("should add 'playback rate' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                playbackRate: 1.23
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["playback rate"], "1.23");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.playbackRate(1.23);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'playback rate' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["playback rate"] = "1.23";
            AudioControlDescUnderTest.playbackRate(null);
            assert(!("playback rate" in AudioControlDescUnderTest._properties));
        });
        it("should return decimal value of 'playback rate' from _properties when the set value is an integer",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest.playbackRate(12);
            var playbackRate = AudioControlDescUnderTest.playbackRate();
            assert.strictEqual(playbackRate, 12.00);
        });
        it("should return the value of 'playback rate' from _properties when value is not given",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest._properties["playback rate"] = "1.23";
            var duration = AudioControlDescUnderTest.playbackRate();
            assert.strictEqual(duration, 1.23);
        });
        it("should return same value in get, when value is set if set value is number",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest.playbackRate(1.23);
            var duration = AudioControlDescUnderTest.playbackRate();
            assert.strictEqual(duration, 1.23);
        });
        it("should return (number) value in get, when value set is numeric string",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest.playbackRate("1.23");
            var playbackRate = AudioControlDescUnderTest.playbackRate();
            assert.strictEqual(playbackRate, 1.23);
        });
    });

    describe("volume method",function() {
        it("should add 'volume' to _properties with the correct value when value is given as number",function(){
            AudioControlDescUnderTest.volume(1.23);
            assert.strictEqual(AudioControlDescUnderTest._properties["volume"], "1.23");
        });
        it("should throw error if the value given NaN",function(){
            assert.throws(function(){
                AudioControlDescUnderTest.volume("1.23a");
            });
        });
        it("should add 'volume' to _properties with the correct value when value is given using property bag",function(){
            AudioControlDescUnderTest = AudioControlDesc({
                volume: 1.23
            });
            assert.strictEqual(AudioControlDescUnderTest._properties["volume"], "1.23");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AudioControlDescUnderTest.volume(1.23);
            assert.strictEqual(result, AudioControlDescUnderTest);
        });
        it("should remove 'volume' from _properties when value is null",function(){
            AudioControlDescUnderTest._properties["volume"] = "1.23";
            AudioControlDescUnderTest.volume(null);
            assert(!("volume" in AudioControlDescUnderTest._properties));
        });
        it("should return decimal value of 'volume' from _properties when the set value is an integer",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest.volume(12);
            var volume = AudioControlDescUnderTest.volume();
            assert.strictEqual(volume, 12.00);
        });
        it("should return the value of 'volume' from _properties when value is not given",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest._properties["volume"] = "1.23";
            var volume = AudioControlDescUnderTest.volume();
            assert.strictEqual(volume, 1.23);
        });
        it("should return same value in get, when value is set if set value is number",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest.volume(1.23);
            var volume = AudioControlDescUnderTest.volume();
            assert.strictEqual(volume, 1.23);
        });
        it("should return (number) value in get, when value set is numeric string",function(){   // _isNumericSrt not a function
            AudioControlDescUnderTest.volume("1.23");
            var volume = AudioControlDescUnderTest.volume();
            assert.strictEqual(volume, 1.23);
        });
    });

});

describe("AudioControl Test Object Behavior",function(){
    var AudioControlTO = require("../lib/audio_control.js").AudioControlTO;
    var audioControlTOBehaviorUnderTest;

    beforeEach(function(){
        audioControlTOBehaviorUnderTest = new AudioControlTO({});
        audioControlTOBehaviorUnderTest._getROProperty = sinon.stub();
        audioControlTOBehaviorUnderTest._executeCommand = sinon.stub();
        audioControlTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        audioControlTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(audioControlTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
           return promiseFunc();
        });
    });

    describe("hasAutoPlay",function(){
        it("should query the property 'autoplay'",function(){
            audioControlTOBehaviorUnderTest.hasAutoPlay();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["autoplay", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.hasAutoPlay();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("hasPlaybackControls",function(){
        it("should query the property 'controls'",function(){
            audioControlTOBehaviorUnderTest.hasPlaybackControls();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["controls", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.hasPlaybackControls();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("currentSource",function(){
        it("should query the property 'current source'",function(){
            audioControlTOBehaviorUnderTest.currentSource();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["current source", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.currentSource();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isPlayInLoop",function(){
        it("should query the property 'loop'",function(){
            audioControlTOBehaviorUnderTest.isPlayInLoop();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["loop", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.isPlayInLoop();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isMuted",function(){
        it("should query the property 'muted'",function(){
            audioControlTOBehaviorUnderTest.isMuted();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["muted", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.isMuted();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isPlaying",function(){
        it("should query the property 'playing'",function(){
            audioControlTOBehaviorUnderTest.isPlaying();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["playing", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.isPlaying();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("playbackTime",function(){
        it("should query the property 'current time'",function(){
            audioControlTOBehaviorUnderTest.playbackTime();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["current time", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.playbackTime();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("duration",function(){
        it("should query the property 'duration'",function(){
            audioControlTOBehaviorUnderTest.duration();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["duration", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.duration();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("sources",function(){
        beforeEach(function(){
              audioControlTOBehaviorUnderTest._getROProperties = sinon.stub();
        });
        it("should query the properties 'sources' and 'src'",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(["source1;source2", "noDelimiterStr"]);
                }
            };
            audioControlTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            audioControlTOBehaviorUnderTest.sources();
            assert(audioControlTOBehaviorUnderTest._getROProperties.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperties.firstCall.args,[arguments, "sources", "src"]);
        });

        it("should return 'src' string value as array if 'sources' value is an empty string",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(["", "noDelimiterStr"]);
                }
            };
            audioControlTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            assert.deepEqual(audioControlTOBehaviorUnderTest.sources(), ["noDelimiterStr"]);
        });

        it("should return 'src' string value as array if 'sources' value is null",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb([null, "noDelimiterStr"]);
                }
            };
            audioControlTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            assert.deepEqual(audioControlTOBehaviorUnderTest.sources(), ["noDelimiterStr"]);
        });

        it("should return 'sources' value as array if it's not an empty string or null",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(["source1;source2", "noDelimiterStr"]);
                }
            };
            audioControlTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            assert.deepEqual(audioControlTOBehaviorUnderTest.sources(), ["source1", "source2"]);
        });
    });

    describe("playbackRate",function(){
        var promiseMock = {
            then: function(cb) {
                return cb("1.00");
            }
        };
        it("should query the property 'playback rate'",function(){
            audioControlTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            audioControlTOBehaviorUnderTest.playbackRate();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["playback rate", arguments]);
        });
        it("should return the playback rate as float after promise returned from getROProperty",function(){
            audioControlTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = audioControlTOBehaviorUnderTest.playbackRate();
            assert.strictEqual(res, 1.00);
        });
    });

    describe("volume",function(){
        var promiseMock = {
            then: function(cb) {
                return cb("1.00");
            }
        };
        it("should query the property 'volume'",function(){
            audioControlTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            audioControlTOBehaviorUnderTest.volume();
            assert(audioControlTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._getROProperty.firstCall.args,["volume", arguments]);
        });
        it("should return the volume as float after promise returned from getROProperty",function(){
            audioControlTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = audioControlTOBehaviorUnderTest.volume();
            assert.strictEqual(res, 1.00);
        });
    });

    // METHODS
    describe("reload",function(){
        it("should execute command 'Load' and pass it the correct parameters",function(){
            var funcPromise = {
                then: sinon.stub()
            };
            audioControlTOBehaviorUnderTest._executeCommand.returns(funcPromise);
            audioControlTOBehaviorUnderTest.reload();
            assert(audioControlTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,1), ["Load"]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {
                then: sinon.stub()
            };
            audioControlTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.reload();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("play",function(){
        var funcPromise = {
            then : sinon.stub()
        };

        beforeEach(function(){
            audioControlTOBehaviorUnderTest._executeCommand.returns(funcPromise);
        });
        it("should execute command 'Play' and pass it the correct parameters",function(){
            audioControlTOBehaviorUnderTest.play();
            assert(audioControlTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,1), ["Play"]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var res = audioControlTOBehaviorUnderTest.play();
            assert.strictEqual(res,funcPromise);
        });
    });

    describe("pause",function(){
        beforeEach(function(){
            audioControlTOBehaviorUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };
        });
        it("should execute command 'Pause' and pass it the correct parameters",function(){
            audioControlTOBehaviorUnderTest.pause();
            assert(audioControlTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(audioControlTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,1), ["Pause"]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            audioControlTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = audioControlTOBehaviorUnderTest.pause();
            assert.strictEqual(res,getROPromise);
        });
    });

});