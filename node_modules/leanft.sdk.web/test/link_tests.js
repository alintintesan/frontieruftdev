// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var assert = require("assert");
var sinon = require("sinon");

describe("Link Description",function(){
    var LinkDesc = require("../lib/link.js").Link;
    var linkDescUnderTest;

    beforeEach(function(){
        linkDescUnderTest = LinkDesc();
    });

    describe("href method",function() {
        it("should add 'href' to _properties when value is given",function(){
            linkDescUnderTest.href("http://www.google.com");
            assert.strictEqual(linkDescUnderTest._properties["href"], "http://www.google.com");
        });
        it("should add 'href' to _properties when value is given using property bag",function(){
            linkDescUnderTest = LinkDesc({
                href: "http://www.google.com"
            });
            assert.strictEqual(linkDescUnderTest._properties["href"], "http://www.google.com");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = linkDescUnderTest.href("http://www.google.com");
            assert.strictEqual(result, linkDescUnderTest);
        });
        it("should remove 'href' from _properties when value is null",function(){
            linkDescUnderTest._properties["href"] = "http://www.google.com";
            linkDescUnderTest.href(null);
            assert(!("href" in linkDescUnderTest._properties));
        });
        it("should return the value of 'href' from _properties when value is not given",function(){
            linkDescUnderTest._properties["href"] = "http://www.google.com";
            var href = linkDescUnderTest.href();
            assert.equal(href, "http://www.google.com");
        });
    });

    describe("target method",function() {
        it("should add 'target' to _properties when value is given",function(){
            linkDescUnderTest.target("#some-id");
            assert.strictEqual(linkDescUnderTest._properties["target"], "#some-id");
        });
        it("should add 'target' to _properties when value is given using property bag",function(){
            linkDescUnderTest = LinkDesc({
                target: "#some-id"
            });
            assert.strictEqual(linkDescUnderTest._properties["target"], "#some-id");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = linkDescUnderTest.target("#some-id");
            assert.strictEqual(result, linkDescUnderTest);
        });
        it("should remove 'target' from _properties when value is null",function(){
            linkDescUnderTest._properties["target"] = "#some-id";
            linkDescUnderTest.target(null);
            assert(!("target" in linkDescUnderTest._properties));
        });
        it("should return the value of 'target' from _properties when value is not given",function(){
            linkDescUnderTest._properties["target"] = "#some-id";
            var target = linkDescUnderTest.target();
            assert.equal(target, "#some-id");
        });
    });

    describe("fontName method",function() {
        var value = "Arial";
        it("should add 'font' to _properties when value is given",function(){
            linkDescUnderTest.fontName("Arial");
            assert.strictEqual(linkDescUnderTest._properties["font"], "Arial");
        });
        it("should add 'font' to _properties when value is given using property bag",function(){
            linkDescUnderTest = LinkDesc({
                fontName: "Arial"
            });
            assert.strictEqual(linkDescUnderTest._properties["font"], "Arial");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = linkDescUnderTest.fontName("Arial");
            assert.strictEqual(result, linkDescUnderTest);
        });
        it("should remove 'font' from _properties when value is null",function(){
            linkDescUnderTest._properties["font"] = "Arial";
            linkDescUnderTest.fontName(null);
            assert(!("font" in linkDescUnderTest._properties));
        });
        it("should return the value of 'font' from _properties when value is not given",function(){
            linkDescUnderTest._properties["font"] = "Arial";
            var fontName = linkDescUnderTest.fontName();
            assert.equal(fontName, "Arial");
        });
    });

    describe("backgroundColor method",function() {
        it("should add 'background color' to _properties when value is given",function(){
            linkDescUnderTest.backgroundColor("#FFF");
            assert.strictEqual(linkDescUnderTest._properties["background color"], "#FFF");
        });
        it("should add 'background color' to _properties when value is given using property bag",function(){
            linkDescUnderTest = LinkDesc({
                backgroundColor: "#FFF"
            });
            assert.strictEqual(linkDescUnderTest._properties["background color"], "#FFF");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = linkDescUnderTest.backgroundColor("#FFF");
            assert.strictEqual(result, linkDescUnderTest);
        });
        it("should remove 'background color' from _properties when value is null",function(){
            linkDescUnderTest._properties["background color"] = "#FFF";
            linkDescUnderTest.backgroundColor(null);
            assert(!("background color" in linkDescUnderTest._properties));
        });
        it("should return the value of 'background color' from _properties when value is not given",function(){
            linkDescUnderTest._properties["background color"] = "#FFF";
            var backgroundColor = linkDescUnderTest.backgroundColor();
            assert.equal(backgroundColor, "#FFF");
        });
    });

    describe("color method",function() {
        it("should add 'color' to _properties when value is given",function(){
            linkDescUnderTest.color("#000");
            assert.strictEqual(linkDescUnderTest._properties["color"], "#000");
        });
        it("should add 'color' to _properties when value is given using property bag",function(){
            linkDescUnderTest = LinkDesc({
                color: "#000"
            });
            assert.strictEqual(linkDescUnderTest._properties["color"], "#000");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = linkDescUnderTest.color("#000");
            assert.strictEqual(result, linkDescUnderTest);
        });
        it("should remove 'color' from _properties when value is null",function(){
            linkDescUnderTest._properties["color"] = "#000";
            linkDescUnderTest.color(null);
            assert(!("color" in linkDescUnderTest._properties));
        });
        it("should return the value of 'color' from _properties when value is not given",function(){
            linkDescUnderTest._properties["color"] = "#000";
            var color = linkDescUnderTest.color();
            assert.equal(color, "#000");
        });
    });

});

describe("Link Test Object Behavior",function(){
    var LinkTO = require("../lib/link.js").LinkTO;
    var linkTOBehaviorUnderTest;

    beforeEach(function(){
        linkTOBehaviorUnderTest = LinkTO({});
        sinon.stub(linkTOBehaviorUnderTest,"_getROProperty");
    });

    describe("href",function(){
        it("should query the property 'href'",function(){
            linkTOBehaviorUnderTest.href();
            assert(linkTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(linkTOBehaviorUnderTest._getROProperty.firstCall.args[0],"href");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            linkTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = linkTOBehaviorUnderTest.href();
            assert.strictEqual(res,getROPromise);
        });

    });

    describe("target",function(){
        it("should query the property 'target'",function(){
            linkTOBehaviorUnderTest.target();
            assert(linkTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(linkTOBehaviorUnderTest._getROProperty.firstCall.args[0],"target");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            linkTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = linkTOBehaviorUnderTest.target();
            assert.strictEqual(res,getROPromise);
        });

    });

    describe("fontName",function(){
        it("should query the property 'font'",function(){
            linkTOBehaviorUnderTest.fontName();
            assert(linkTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(linkTOBehaviorUnderTest._getROProperty.firstCall.args[0],"font");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            linkTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = linkTOBehaviorUnderTest.fontName();
            assert.strictEqual(res,getROPromise);
        });

    });

    describe("backgroundColor",function(){
        it("should query the property 'background color'",function(){
            linkTOBehaviorUnderTest.backgroundColor();
            assert(linkTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(linkTOBehaviorUnderTest._getROProperty.firstCall.args[0],"background color");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            linkTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = linkTOBehaviorUnderTest.backgroundColor();
            assert.strictEqual(res,getROPromise);
        });

    });

    describe("color",function(){
        it("should query the property 'color'",function(){
            linkTOBehaviorUnderTest.color();
            assert(linkTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(linkTOBehaviorUnderTest._getROProperty.firstCall.args[0],"color");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            linkTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = linkTOBehaviorUnderTest.color();
            assert.strictEqual(res,getROPromise);
        });

    });

});