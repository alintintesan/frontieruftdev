// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/12/2015.
 * Holds unittests for the browser factory
 */

var sinon = require("sinon");
var assert = require("assert");
var Q = require("q");
var BrowserFactory = require("../lib/browser_factory.js").BrowserFactory;
var BrowserType = require("../lib/browser_factory.js").BrowserType;
var Browser = require("../lib/browser.js").Browser;
var BrowserFilter =require("../lib/browser.js").BrowserFilter;
var EmulatedDevice =require("../lib/emulated_device.js").EmulatedDevice;

describe("BrowserFactory",function(){
    var browserFactoryUnderTest;
    var sessionMock;
    var mobileLabMock;

    beforeEach(function(){
        sinon.stub(Browser.prototype.__super,"$");
        sessionMock = {
            _communication: {
                send: sinon.stub()
            },
            fireEvent: sinon.stub(),
            _promiseManager: {wrapPromiseFunctionWithNotifyEvents: function () {} },
            _config: {}
        };

        sinon.stub(sessionMock._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });

        mobileLabMock = {
            lockDeviceById: sinon.stub()
        };

        browserFactoryUnderTest = new BrowserFactory(sessionMock, mobileLabMock);
    });

    describe("launch",function(){
        var launchPromise;
        var funcPromise;
        beforeEach(function(){
            launchPromise = {
                then: sinon.stub()
            };
            funcPromise = {
                then: sinon.stub()
            };
            sessionMock._communication.send.returns(launchPromise);
            launchPromise.then.returns(funcPromise);
        });

        [BrowserType.Chrome, BrowserType.IE, BrowserType.Firefox, BrowserType.Edge, BrowserType.PhantomJS, BrowserType.EdgeChromium].forEach(function (browserType) {
            it("should send the launch message for " + browserType, function () {
                browserFactoryUnderTest.launch(browserType);

                assert(sessionMock._communication.send.calledOnce);
                assert.strictEqual(sessionMock._communication.send.firstCall.args[0], "LaunchApplication");
                assert.deepEqual(sessionMock._communication.send.firstCall.args[1], {
                    "type": "Browser",
                    "launch info": {
                        "type": browserType,
                        "version": undefined,
                        "environment": undefined
                    }
                });
            });
        });

        [["chrome", BrowserType.Chrome],
            ["ie", BrowserType.IE],
            ["internet explorer", BrowserType.IE],
            ["firefox", BrowserType.Firefox],
            ["edge", BrowserType.Edge],
            ["phantomjs", BrowserType.PhantomJS],
            ["chromium edge", BrowserType.EdgeChromium]].forEach(function (browserTypeNames) {
            var browserType = browserTypeNames[0];
            var browserTypeRealValue = browserTypeNames[1];
            it("should send the launch message for " + browserType, function () {
                browserFactoryUnderTest.launch(browserType);

                assert(sessionMock._communication.send.calledOnce);
                assert.strictEqual(sessionMock._communication.send.firstCall.args[0], "LaunchApplication");
                assert.deepEqual(sessionMock._communication.send.firstCall.args[1], {
                    "type": "Browser",
                    "launch info": {
                        "type": browserTypeRealValue,
                        "version": undefined,
                        "environment": undefined
                    }
                });
            });
        });

        [BrowserType.MobileCenterBrowser].forEach(function (browserType) {
            it("should throw error when mobile browser is not supported: " + browserType, function(){
                assert.throws(function(){
                    browserFactoryUnderTest.launch(browserType);
                });
            });
        });
        
        [BrowserType.SomeUnknownBrowser, null].forEach(function (browserType) {
            it("should throw non existing error in case " + browserType + " is passed", function(){
                assert.throws(function(){
                    browserFactoryUnderTest.launch(browserType);
                }, /^Error: Browser type is undefined, null or does not exist/);
            });
        });

        it("should throw error in case non existing browser type is passed", function(){
            assert.throws(function(){
                browserFactoryUnderTest.launch("SomeUnknownBrowser");
            }, /^Error: Browser type is not supported*/);
        });



        it("should throw error in case the launch result is null",function(){
            launchPromise.then.callsArgWith(0,null);

            assert.throws(function(){
                browserFactoryUnderTest.launch("SomeBrowser");
            });
        });

        it("should create a new browser with the given cookie",function(){
            browserFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };

            launchPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            funcPromise.then = function(browser){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            var res = browserFactoryUnderTest.launch("Chrome");
            assert(res instanceof Browser);
            assert.strictEqual(res._cookie,42);
        });

        it("should throw the given exception in case the error code is not -119 (browser not installed)",function(){
            var error = new Error("SomeError");
            error.statusCode = -100;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.launch("Chrome");
            },/SomeError/);
        });

        it("should generate a message in case not present in the exception)",function(){
            var error = new Error("");
            error.statusCode = -119;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.launch("Chrome");
            },/The specified browser Chrome is not installed on the target machine/);
        });

        it("should add the applicationInfo to browser",function(){
            launchPromise.then = function(fullfill){
                return fullfill({
                    Properties: {version:"Chrome 53.0"}
                });
            };

            var browser = browserFactoryUnderTest.launch("Chrome");
            assert.deepEqual(browser._applicationInfo,{version:"Chrome 53.0"});
        });
    });

    describe("launch with Env Var: ENVIRONMENT_DEVICE_BROWSER_TYPE set", function () {
        var deviceMock;
        beforeEach(function () {
            sessionMock._config.ENVIRONMENT_DEVICE_BROWSER_TYPE = "chrome";
            deviceMock = {
                _toJSON: sinon.stub().returns({device: "someDevice"})
            };
            mobileLabMock.lockDeviceById.returns(Q.resolve(deviceMock));
            sessionMock._communication.send.returns(Q.resolve({}));
        });

        it("should call lockDeviceById with empty id", function () {
            browserFactoryUnderTest.launch("IE");

            sinon.assert.calledOnce(mobileLabMock.lockDeviceById);
            sinon.assert.calledWith(mobileLabMock.lockDeviceById, "");
        });

        it("should send correct message with device environment", function () {
            return browserFactoryUnderTest.launch("IE").then(function () {
                sinon.assert.calledOnce(sessionMock._communication.send);
                sinon.assert.calledWith(sessionMock._communication.send, "LaunchApplication", {
                    "type": "Browser",
                    "launch info": {
                        "type": "Chrome",
                        "version": null,
                        "environment": {device: "someDevice", type: "Device"}
                    }
                });
            });
        });
    });

    describe("launchEmulated",function(){
        var launchPromise;
        var funcPromise;
        beforeEach(function(){
            launchPromise = {
                then: sinon.stub()
            };
            funcPromise = {
                then: sinon.stub()
            };
            sessionMock._communication.send.returns(launchPromise);
            launchPromise.then.returns(funcPromise);
        });

        it("should send the launch message",function(){
            browserFactoryUnderTest.launchEmulated(
                "Chrome",
                {
                    "name": "Some Emulated Device",
                    "height": 800,
                    "width": 450,
                    "isTouchable": true,
                    "scaleFactor": 2,
                    "userAgent": "Some user agent string",
                    "isMobile": true
                }
            );

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"LaunchApplication");
            assert.deepEqual(sessionMock._communication.send.firstCall.args[1],{
                "type": "Browser",
                "launch info": {
                    "type": "Chrome",
                    "version": undefined,
                    "environment": {
                        "type": "EmulatedDevice",
                        "name": "Some Emulated Device",
                        "height": 800,
                        "width": 450,
                        "touchable": true,
                        "scaleFactor": 2,
                        "userAgent": "Some user agent string",
                        "mobile": true,
                        "fit": false
                    }
                }
            });
        });

        ["SomeUnknownBrowser", BrowserType.SomeUnknownBrowser, null].forEach(function (browserType) {
            it("should throw error in case " + browserType + " is passed", function(){
                assert.throws(function(){
                    browserFactoryUnderTest.launchEmulated(browserType);
                });
            });
        });

        it("should send the correct message with default values",function(){
            browserFactoryUnderTest.launchEmulated(
                "Chrome",
                {
                    "name": "Some Emulated Device",
                    "userAgent": "Some user agent string"
                }
            );

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"LaunchApplication");
            assert.deepEqual(sessionMock._communication.send.firstCall.args[1],{
                "type": "Browser",
                "launch info": {
                    "type": "Chrome",
                    "version": undefined,
                    "environment": {
                        "type": "EmulatedDevice",
                        "name": "Some Emulated Device",
                        "height": 0,
                        "width": 0,
                        "touchable": true,
                        "scaleFactor": 1,
                        "userAgent": "Some user agent string",
                        "mobile": true,
                        "fit": false
                    }
                }
            });
        });

        it("should send the correct message using predefined emulated device object",function(){
            browserFactoryUnderTest.launchEmulated("Chrome", EmulatedDevice.IPhone6);

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"LaunchApplication");
            assert.deepEqual(sessionMock._communication.send.firstCall.args[1],{
                "type": "Browser",
                "launch info": {
                    "type": "Chrome",
                    "version": undefined,
                    "environment": {
                        "type": "EmulatedDevice",
                        "name": "Apple iPhone 6",
                        "width": 375,
                        "height": 667,
                        "scaleFactor": 2,
                        "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4",
                        "touchable": true,
                        "mobile": true,
                        "fit": false
                    }
                }
            });
        });

        it("should send the correct message using predefined emulated device name",function(){
            browserFactoryUnderTest.launchEmulated("Chrome", "iPhone 6");

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"LaunchApplication");
            assert.deepEqual(sessionMock._communication.send.firstCall.args[1],{
                "type": "Browser",
                "launch info": {
                    "type": "Chrome",
                    "version": undefined,
                    "environment": {
                        "type": "EmulatedDevice",
                        "name": "Apple iPhone 6",
                        "width": 375,
                        "height": 667,
                        "scaleFactor": 2,
                        "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4",
                        "touchable": true,
                        "mobile": true,
                        "fit": false
                    }
                }
            });
        });

        it("should throw error in case the launch result is null",function(){
            launchPromise.then.callsArgWith(0,null);

            assert.throws(function(){
                browserFactoryUnderTest.launchEmulated("SomeBrowser", EmulatedDevice.IPhone6);
            });
        });

        [BrowserType.Chrome, BrowserType.IE, BrowserType.Firefox, BrowserType.Edge,
            BrowserType.PhantomJS, BrowserType.Safari, BrowserType.EdgeChromium].forEach(function (browserType) {
            it("should send the launch message for " + browserType, function () {
                browserFactoryUnderTest.launchEmulated(browserType, "iPhone 6");

                assert(sessionMock._communication.send.calledOnce);
                assert.strictEqual(sessionMock._communication.send.firstCall.args[0], "LaunchApplication");
                assert.deepEqual(sessionMock._communication.send.firstCall.args[1], {
                    "type": "Browser",
                    "launch info": {
                        "type": browserType,
                        "version": undefined,
                        "environment": {
                            "type": "EmulatedDevice",
                            "name": "Apple iPhone 6",
                            "width": 375,
                            "height": 667,
                            "scaleFactor": 2,
                            "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4",
                            "touchable": true,
                            "mobile": true,
                            "fit": false
                        }
                    }
                });
            });
        });

        [["chrome", BrowserType.Chrome],
            ["ie", BrowserType.IE],
            ["internet explorer", BrowserType.IE],
            ["firefox", BrowserType.Firefox],
            ["edge", BrowserType.Edge],
            ["phantomjs", BrowserType.PhantomJS],
            ["safari", BrowserType.Safari],
            ["chromium edge", BrowserType.EdgeChromium]].forEach(function (browserTypeNames) {
            var browserType = browserTypeNames[0];
            var browserTypeRealValue = browserTypeNames[1];
            it("should send the launch message for " + browserType, function () {
                browserFactoryUnderTest.launchEmulated(browserType, "iPhone 6");

                assert(sessionMock._communication.send.calledOnce);
                assert.strictEqual(sessionMock._communication.send.firstCall.args[0], "LaunchApplication");
                assert.deepEqual(sessionMock._communication.send.firstCall.args[1], {
                    "type": "Browser",
                    "launch info": {
                        "type": browserTypeRealValue,
                        "version": undefined,
                        "environment": {
                            "type": "EmulatedDevice",
                            "name": "Apple iPhone 6",
                            "width": 375,
                            "height": 667,
                            "scaleFactor": 2,
                            "userAgent": "Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0 Mobile/12A4345d Safari/600.1.4",
                            "touchable": true,
                            "mobile": true,
                            "fit": false
                        }
                    }
                });
            });
        });

        it("should create a new browser with the given cookie",function(){
            browserFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };

            launchPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            funcPromise.then = function(browser){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            var res = browserFactoryUnderTest.launchEmulated("Chrome", EmulatedDevice.IPhone6);
            assert(res instanceof Browser);
            assert.strictEqual(res._cookie,42);
        });

        it("should throw the given exception in case the error code is not -119 (browser not installed)",function(){
            var error = new Error("SomeError");
            error.statusCode = -100;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.launchEmulated("Chrome", EmulatedDevice.IPhone6);
            },/SomeError/);
        });

        it("should generate a message in case not present in the exception)",function(){
            var error = new Error("");
            error.statusCode = -119;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.launchEmulated("Chrome", EmulatedDevice.IPhone6);
            },/The specified browser Chrome is not installed on the target machine/);
        });
    });

    describe("launchDevice", function () {
        var launchPromise;
        var funcPromise;
        var deviceMock;
        beforeEach(function(){
            launchPromise = {
                then: sinon.stub()
            };
            funcPromise = {
                then: sinon.stub()
            };
            sessionMock._communication.send.returns(launchPromise);
            launchPromise.then.returns(funcPromise);

            deviceMock = {_toJSON: sinon.stub().returns({ServerCookie:"someCookie"})};
        });

        ["SomeUnknownBrowser", BrowserType.SomeUnknownBrowser, null].forEach(function (browserType) {
            it("should throw error in case " + browserType + " is passed", function(){
                assert.throws(function(){
                    browserFactoryUnderTest.launchDevice(browserType, deviceMock);
                });
            });
        });

        [BrowserType.Chrome, BrowserType.IE, BrowserType.Firefox, BrowserType.Edge, BrowserType.PhantomJS,
            BrowserType.Safari, BrowserType.EdgeChromium, BrowserType.MobileCenterBrowser].forEach(function (browserType) {
            it("should send the launch message for " + browserType, function () {
                browserFactoryUnderTest.launchDevice(browserType, deviceMock);

                assert(sessionMock._communication.send.calledOnce);
                assert.strictEqual(sessionMock._communication.send.firstCall.args[0], "LaunchApplication");
                assert.deepEqual(sessionMock._communication.send.firstCall.args[1], {
                    "type": "Browser",
                    "launch info": {
                        "type": browserType,
                        "version": undefined,
                        "environment": {
                            "type": "Device",
                            "ServerCookie": "someCookie"
                        }
                    }
                });
            });
        });

        [["chrome", BrowserType.Chrome],
            ["ie", BrowserType.IE],
            ["internet explorer", BrowserType.IE],
            ["firefox", BrowserType.Firefox],
            ["edge", BrowserType.Edge],
            ["phantomjs", BrowserType.PhantomJS],
            ["safari", BrowserType.Safari],
            ["chromium edge", BrowserType.EdgeChromium],
            ["mobilecenterbrowser", BrowserType.MobileCenterBrowser],
            ["environment-browser", "environment-browser"]].forEach(function (browserTypeNames) {
            var browserType = browserTypeNames[0];
            var browserTypeRealValue = browserTypeNames[1];
            it("should send the launch message for " + browserType, function () {
                browserFactoryUnderTest.launchDevice(browserType, deviceMock);

                assert(sessionMock._communication.send.calledOnce);
                assert.strictEqual(sessionMock._communication.send.firstCall.args[0], "LaunchApplication");
                assert.deepEqual(sessionMock._communication.send.firstCall.args[1], {
                    "type": "Browser",
                    "launch info": {
                        "type": browserTypeRealValue,
                        "version": undefined,
                        "environment": {
                            "type": "Device",
                            "ServerCookie": "someCookie"
                        }
                    }
                });
            });
        });

        it("should send the launch message",function(){
            browserFactoryUnderTest.launchDevice("Chrome", deviceMock);

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"LaunchApplication");
            assert.deepEqual(sessionMock._communication.send.firstCall.args[1],{
                "type": "Browser",
                "launch info": {
                    "type": "Chrome",
                    "version": undefined,
                    "environment": {
                        "type": "Device",
                        "ServerCookie": "someCookie"
                    }
                }
            });
        });

        it("should throw error if device parameter is null", function () {
            assert.throws(function(){
                browserFactoryUnderTest.launchDevice("SomeBrowser", null);
            });
        });

        it("should throw error if device parameter is undefined", function () {
            assert.throws(function(){
                browserFactoryUnderTest.launchDevice("SomeBrowser", undefined);
            });
        });

        it("should throw error in case the launch result is null",function(){
            launchPromise.then.callsArgWith(0,null);

            assert.throws(function(){
                browserFactoryUnderTest.launchDevice("SomeBrowser", deviceMock);
            });
        });

        it("should create a new browser with the given cookie",function(){
            browserFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };

            launchPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            funcPromise.then = function(browser){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            var res = browserFactoryUnderTest.launchDevice("Chrome", deviceMock);
            assert(res instanceof Browser);
            assert.strictEqual(res._cookie,42);
        });

        it("should throw the given exception in case the error code is not -119 (browser not installed)",function(){
            var error = new Error("SomeError");
            error.statusCode = -100;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.launchDevice("Chrome", deviceMock);
            },/SomeError/);
        });

        it("should generate a message in case not present in the exception)",function(){
            var error = new Error("");
            error.statusCode = -119;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.launchDevice("Chrome", deviceMock);
            },/The specified browser Chrome is not installed on the target machine/);
        });
    });



    describe("attach",function(){
        var attachPromise;
        var funcPromise;
        beforeEach(function(){
            attachPromise = {
                then: sinon.stub()
            };
            funcPromise = {
                then: sinon.stub()
            };
            sessionMock._communication.send.returns(attachPromise);
            sessionMock.fireEvent.returns(attachPromise);
            attachPromise.then.returns(funcPromise);
        });

        it("should create an empty browser filter in case null is no filter was provided",function(){
            var expectedMessage = {
                "type": "Browser",
                "launch info": {
                    Object: {
                        Class: "Browser",
                        Description: {
                            Properties: {},
                            Index: undefined,
                            VRI: undefined
                        },
                        Parent: null

                    }
                }
            };

            browserFactoryUnderTest.attach();

            assert(sessionMock._communication.send.calledOnce);
            assert.deepEqual(sessionMock._communication.send.firstCall.args, ["AttachApplication", expectedMessage]);
        });

        it("should create browser filter in case filter is provided as property bag", function () {
            var expectedMessage = {
                "type": "Browser",
                "launch info": {
                    Object: {
                        Class: "Browser",
                        Description: {
                            Properties: {},
                            Index: undefined,
                            VRI: undefined
                        },
                        Parent: null

                    }
                }
            };

            browserFactoryUnderTest.attach({});

            assert(sessionMock._communication.send.calledOnce);
            assert.deepEqual(sessionMock._communication.send.firstCall.args, ["AttachApplication", expectedMessage]);
        });

        it("should send the attach message after converting the browser filter to JSON", function () {
            var expectedMessage = {
                "type": "Browser",
                "launch info": {
                    Object: {
                        Class: "Browser",
                        Description: "SomeValue",
                        Parent: null

                    }
                }
            };
            var browserFilter = new BrowserFilter();
            sinon.stub(browserFilter, "_toJSON").returns("SomeValue");

            browserFactoryUnderTest.attach(browserFilter);

            assert(browserFilter._toJSON.calledOnce);
            assert(sessionMock._communication.send.calledOnce);
            assert.deepEqual(sessionMock._communication.send.firstCall.args, ["AttachApplication", expectedMessage]);

        });

        it("should throw error in case the launch result is null",function(){
            attachPromise.then.callsArgWith(0,null);

            assert.throws(function(){
                browserFactoryUnderTest.attach();
            });
        });

        it("should create a new browser with the given cookie",function(){
            browserFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };
            attachPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            var res = browserFactoryUnderTest.attach();
            assert(res instanceof Browser);
            assert.strictEqual(res._cookie,42);
        });

        it("should throw the given exception in case the error code is not -119 (browser not installed)",function(){
            var error = new Error("SomeError");
            error.statusCode = -100;
            attachPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.attach();
            },/SomeError/);
        });

        it("should generate a message in case not present in the exception)",function(){
            var error = new Error("");
            error.statusCode = -119;
            attachPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.attach();
            },/The specified browser null is not installed on the target machine/);
        });

        it("should add the applicationInfo to browser",function(){
            var browserFilter = new BrowserFilter();
            sinon.stub(browserFilter,"_toJSON").returns("SomeValue");
            attachPromise.then = function(fullfill){
                return fullfill({
                    Properties: {version:"Chrome 53.0"}
                });
            };

            var browser = browserFactoryUnderTest.attach(browserFilter);
            assert.deepEqual(browser._applicationInfo,{version:"Chrome 53.0"});
        });
    });

    describe("openedBrowser",function(){
        var openedBrowsersPromise;
        var funcPromise;
        beforeEach(function(){
            openedBrowsersPromise = {
                then: sinon.stub()
            };
            funcPromise = {
                then: sinon.stub()
            };
            sessionMock._communication.send.returns(openedBrowsersPromise);
            sessionMock.fireEvent.returns(openedBrowsersPromise);
            openedBrowsersPromise.then.returns(funcPromise);
        });

        it("should create an empty browser filter in case null is no filter was provided",function(){
            var expectedMessage = {
                "type": "Browser",
                "launch info": {
                    Object: {
                        Class: "Browser",
                        Description: {
                            Properties: {},
                            Index: undefined,
                            VRI: undefined
                        },
                        Parent: null

                    }
                }
            };

            browserFactoryUnderTest.openedBrowsers();

            assert(sessionMock._communication.send.calledOnce);
            assert.deepEqual(sessionMock._communication.send.firstCall.args, ["GetAllOpenApplication", expectedMessage]);
        });

        it("should create browser filter in case filter is provided as property bag",function(){
            var expectedMessage = {
                "type": "Browser",
                "launch info": {
                    Object: {
                        Class: "Browser",
                        Description: {
                            Properties: {},
                            Index: undefined,
                            VRI: undefined
                        },
                        Parent: null

                    }
                }
            };

            browserFactoryUnderTest.openedBrowsers({});

            assert(sessionMock._communication.send.calledOnce);
            assert.deepEqual(sessionMock._communication.send.firstCall.args, ["GetAllOpenApplication", expectedMessage]);
        });

        it("should send the attach message after converting the browser filter to JSON", function () {
            var expectedMessage = {
                "type": "Browser",
                "launch info": {
                    Object: {
                        Class: "Browser",
                        Description: "SomeValue",
                        Parent: null

                    }
                }
            };
            var browserFilter = new BrowserFilter();
            sinon.stub(browserFilter, "_toJSON").returns("SomeValue");

            browserFactoryUnderTest.openedBrowsers(browserFilter);

            assert(browserFilter._toJSON.calledOnce);
            assert(sessionMock._communication.send.calledOnce);
            assert.deepEqual(sessionMock._communication.send.firstCall.args, ["GetAllOpenApplication", expectedMessage]);
        });

        it("should throw error in case the launch result is null",function(){
            openedBrowsersPromise.then.callsArgWith(0,null);

            assert.throws(function(){
                browserFactoryUnderTest.openedBrowsers();
            });
        });

        it("should throw error in case the launch result is missing Result field",function(){
            openedBrowsersPromise.then.callsArgWith(0,{});

            assert.throws(function(){
                browserFactoryUnderTest.openedBrowsers();
            });
        });

        it("should return empty array in case the Result field is null",function(){
            browserFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };

            openedBrowsersPromise.then = function(fullfill){
                return fullfill({Result:null});
            };
            var res = browserFactoryUnderTest.openedBrowsers();

            assert(Array.isArray(res));
            assert.strictEqual(res.length,0);
        });


        it("should create an array of browsers from the given result",function(){
            browserFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };

            openedBrowsersPromise.then = function(fullfill){
                return fullfill({
                    Result: [
                        {ServerCookie:1},
                        {ServerCookie:2}
                    ]
                });
            };
            var res = browserFactoryUnderTest.openedBrowsers();

            assert(Array.isArray(res));
            res.forEach(function(browser,index){
                assert(browser instanceof Browser);
                assert.strictEqual(browser._cookie,index + 1);
            });
        });

        it("should throw the given exception in case the error code is not -119 (browser not installed)",function(){
            var error = new Error("SomeError");
            error.statusCode = -100;
            openedBrowsersPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.openedBrowsers();
            },/SomeError/);
        });

        it("should generate a message in case not present in the exception)",function(){
            var error = new Error("");
            error.statusCode = -119;
            openedBrowsersPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest.openedBrowsers();
            },/The specified browser null is not installed on the target machine/);
        });

        it("should add the applicationInfo to browser",function(){
            var browserFilter = new BrowserFilter();
            sinon.stub(browserFilter,"_toJSON").returns("SomeValue");

            openedBrowsersPromise.then = function(fullfill){
                return fullfill({
                    Result: [
                        {ServerCookie:1,Properties: {version:"Chrome 53.0"}},
                        {ServerCookie:2,Properties: {version:"Chrome 53.0"}}
                    ]
                });
            };

            var res = browserFactoryUnderTest.openedBrowsers(browserFilter);
            assert(Array.isArray(res));
            res.forEach(function(browser,index){
                assert.deepEqual(browser._applicationInfo,{version:"Chrome 53.0"});
            });
        });
    });

    describe("_launchOnSrf",function(){
        var launchPromise;
        var funcPromise;
        beforeEach(function(){
            launchPromise = {
                then: sinon.stub()
            };
            funcPromise = {
                then: sinon.stub()
            };
            sessionMock._communication.send.returns(launchPromise);
            launchPromise.then.returns(funcPromise);
        });

        it("should send the launch message",function(){
            browserFactoryUnderTest._launchOnSrf({
                type: "Chrome"
            });

            sinon.assert.calledWith(sessionMock._communication.send,"LaunchApplication",sinon.match.object);
        });

        it("should send browser launch message with environment as 'RemoteEnvironment'",function(){
            browserFactoryUnderTest._launchOnSrf({
                type: "Chrome"
            });

            sinon.assert.calledWith(sessionMock._communication.send,"LaunchApplication",sinon.match({
                "type": "Browser",
                "launch info": {
                    "type": "Chrome",
                    "environment": {
                        "type": "RemoteEnvironment"
                    }
                }
            }));
        });


        it("should set the lab to srf", function () {
            browserFactoryUnderTest._launchOnSrf({
                type: "Chrome"
            });

            sinon.assert.calledWith(sessionMock._communication.send,"LaunchApplication",sinon.match({
                "type": "Browser",
                "launch info": {
                    "type": "Chrome",
                    "environment": {
                        "lab": "srf"
                    }
                }
            }));
        });

        it("should throw an error in case the browserType capability is missing",function(){
            assert.throws(function(){
                browserFactoryUnderTest._launchOnSrf();
            });
        });

        it("should throw error in case the launch result is null",function(){
            launchPromise.then.callsArgWith(0,null);

            assert.throws(function(){
                browserFactoryUnderTest._launchOnSrf({
                    type: "chrome"
                });
            });
        });

        it("should create a new browser with the given cookie",function(){
            browserFactoryUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };

            launchPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            funcPromise.then = function(browser){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            var res = browserFactoryUnderTest._launchOnSrf({
                type: "chrome"
            });

            assert(res instanceof Browser);
            assert.strictEqual(res._cookie,42);
        });

        it("should throw the given exception in case the error code is not -119 (browser not installed)",function(){
            var error = new Error("SomeError");
            error.statusCode = -100;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest._launchOnSrf({
                    type: "chrome"
                });
            },/SomeError/);
        });

        it("should generate a message in case not present in the exception)",function(){
            var error = new Error("");
            error.statusCode = -119;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                browserFactoryUnderTest._launchOnSrf({
                    type: "chrome"
                });
            },/The specified browser Chrome is not installed on the target machine/);
        });

        it("should add the browser version in case it was specified in the capabilities",function(){
            browserFactoryUnderTest._launchOnSrf({
                type: "Chrome",
                version: "42.0"
            });

            sinon.assert.calledWith(sessionMock._communication.send,"LaunchApplication",sinon.match({
                "type": "Browser",
                "launch info": {
                    "type": "Chrome",
                    "version": "42.0",
                    "environment": {
                        "type": "RemoteEnvironment"
                    }
                }
            }));
        });
    });

    describe("_convertCapabilitiesToWireFormat", function () {
        it("should leave empty capabilities as is", function () {

            var capabilities = {};
            browserFactoryUnderTest._convertCapabilitiesToWireFormat(capabilities);
            assert.deepEqual(capabilities, {});
        });

        it("should leave capabilities without os keys as is", function () {
            var capabilities = {a: "aa"};
            browserFactoryUnderTest._convertCapabilitiesToWireFormat(capabilities);
            assert.deepEqual(capabilities, {a: "aa"});
        });

        it("should convert osType key to platform key", function () {
            var capabilities = {osType: "Windows"};
            browserFactoryUnderTest._convertCapabilitiesToWireFormat(capabilities);
            assert.deepEqual(capabilities, {platform: "Windows"});
        });

        it("should convert osType and osVersion keys to platform key", function () {
            var capabilities = {osType: "Windows", osVersion:"10"};
            browserFactoryUnderTest._convertCapabilitiesToWireFormat(capabilities);
            assert.deepEqual(capabilities, {platform: "Windows 10"});
        });

        it("should convert resolution to screenResolution and lower value", function () {
            var capabilities = {resolution: "100X100"};
            browserFactoryUnderTest._convertCapabilitiesToWireFormat(capabilities);
            assert.deepEqual(capabilities, {screenResolution: "100x100"});
        });
    });

    afterEach(function(){
        Browser.prototype.__super.$.restore();
    })
});