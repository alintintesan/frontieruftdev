// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/23/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("RadioGroup Description",function(){
    var RadioGroupDesc = require("../lib/radio_group.js").RadioGroup;
    var radioGroupDescUnderTest;

    beforeEach(function(){
        radioGroupDescUnderTest = RadioGroupDesc();
    });

    describe("type method",function() {
        it("should add 'type' to _properties when value is given",function(){
            radioGroupDescUnderTest.type("radio");
            assert.strictEqual(radioGroupDescUnderTest._properties["type"], "radio");
        });
        it("should add 'type' to _properties when value is given using property bag",function(){
            radioGroupDescUnderTest = RadioGroupDesc({
                type: "radio"
            });
            assert.strictEqual(radioGroupDescUnderTest._properties["type"], "radio");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = radioGroupDescUnderTest.type("radio");
            assert.strictEqual(result, radioGroupDescUnderTest);
        });
        it("should remove 'type' from _properties when value is null",function(){
            radioGroupDescUnderTest._properties["type"] = "radio";
            radioGroupDescUnderTest.type(null);
            assert(!("type" in radioGroupDescUnderTest._properties));
        });
        it("should return the value of 'type' from _properties when value is not given",function(){
            radioGroupDescUnderTest._properties["type"] = "radio";
            var type = radioGroupDescUnderTest.type();
            assert.equal(type, "radio");
        });
    });

    describe("items method",function() {
        it("should add 'all items' with correct value when a value is given",function(){
            radioGroupDescUnderTest.items(["male","female"]);
            assert.strictEqual(radioGroupDescUnderTest._properties["all items"], "male;female");
        });
        it("should add 'all items' with correct value, when value is given using property bag",function(){
            radioGroupDescUnderTest = RadioGroupDesc({
                items: ["male","female"]
            });
            assert.strictEqual(radioGroupDescUnderTest._properties["all items"], "male;female");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = radioGroupDescUnderTest.items(["male","female"]);
            assert.strictEqual(result, radioGroupDescUnderTest);
        });
        it("should remove 'all items' from _properties when value is null",function(){
            radioGroupDescUnderTest._properties["all items"] = "male;female";
            radioGroupDescUnderTest.items(null);
            assert(!("all items" in radioGroupDescUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties, when value is not given",function(){
            radioGroupDescUnderTest._properties["all items"] = "male;female";
            var items = radioGroupDescUnderTest.items();
            assert.deepEqual(items, ["male","female"]);
        });
        it("should not modify property 'all items', upon get",function(){
            radioGroupDescUnderTest._properties["all items"] = "male;female";
            radioGroupDescUnderTest.items();
            assert.strictEqual(radioGroupDescUnderTest._properties["all items"], "male;female");
        });
        it("should return same value in get, when value is set",function(){
            radioGroupDescUnderTest.items(["male","female"]);
            var items = radioGroupDescUnderTest.items();
            assert.deepEqual(items, ["male","female"]);
        });
    });

    describe("itemsCount method",function() {
        it("should add 'items count' with correct value when value is given",function(){
            radioGroupDescUnderTest.itemsCount(2);
            assert.strictEqual(radioGroupDescUnderTest._properties["items count"], 2);
        });
        it("should add 'items count' with correct value when value is given using property bag",function(){
            radioGroupDescUnderTest = RadioGroupDesc({
                itemsCount: 2
            });
            assert.strictEqual(radioGroupDescUnderTest._properties["items count"], 2);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = radioGroupDescUnderTest.itemsCount(2);
            assert.strictEqual(result, radioGroupDescUnderTest);
        });
        it("should remove 'items count' from _properties when value is null",function(){
            radioGroupDescUnderTest._properties["items count"] = 2;
            radioGroupDescUnderTest.itemsCount(null);
            assert(!("items count" in radioGroupDescUnderTest._properties));
        });
        it("should return the value of 'items count' from _properties when value is not given",function(){
            radioGroupDescUnderTest._properties["items count"] = 2;
            var itemsCount = radioGroupDescUnderTest.itemsCount();
            assert.equal(itemsCount, 2);
        });
    });

    describe("hasSelectedItem method",function() {
        it("should add 'checked' with correct value when value is given",function(){
            radioGroupDescUnderTest.hasSelectedItem(true);
            assert.strictEqual(radioGroupDescUnderTest._properties["checked"], 1);
        });
        it("should add 'checked' with correct value when value is given using property bag",function(){
            radioGroupDescUnderTest = RadioGroupDesc({
                hasSelectedItem: true
            });
            assert.strictEqual(radioGroupDescUnderTest._properties["checked"], 1);
        });
        it("should return this - builder pattern when, value is given",function(){
            var result = radioGroupDescUnderTest.hasSelectedItem(true);
            assert.strictEqual(result, radioGroupDescUnderTest);
        });
        it("should remove 'checked' from _properties when value is null",function(){
            radioGroupDescUnderTest._properties["checked"] = 1;
            radioGroupDescUnderTest.hasSelectedItem(null);
            assert(!("hasSelectedItem" in radioGroupDescUnderTest._properties));
        });
        it("should return the value of 'checked' from _properties when value is not given",function(){
            radioGroupDescUnderTest._properties["checked"] = 1;
            var hasSelectedItem = radioGroupDescUnderTest.hasSelectedItem();
            assert.strictEqual(hasSelectedItem, true);
        });
        it("should return same value in get, when value is set",function(){
            radioGroupDescUnderTest.hasSelectedItem(true);
            var hasSelectedItem = radioGroupDescUnderTest.hasSelectedItem();
            assert.equal(hasSelectedItem, true);
        });
    });

    describe("selectedItem method",function() {
        it("should add 'value' with correct value when value is given",function(){
            radioGroupDescUnderTest.selectedItem("female");
            assert.strictEqual(radioGroupDescUnderTest._properties["value"], "female");
        });
        it("should add 'value' with correct value when value is given using property bag",function(){
            radioGroupDescUnderTest = RadioGroupDesc({
                selectedItem: "female"
            });
            assert.strictEqual(radioGroupDescUnderTest._properties["value"], "female");
        });
        it("should return this - builder pattern when, value is given",function(){
            var result = radioGroupDescUnderTest.selectedItem("female");
            assert.strictEqual(result, radioGroupDescUnderTest);
        });
        it("should remove 'value' from _properties when value is null",function(){
            radioGroupDescUnderTest._properties["value"] = "female";
            radioGroupDescUnderTest.selectedItem(null);
            assert(!("selectedItem" in radioGroupDescUnderTest._properties));
        });
        it("should return the value of 'value' from _properties when value is not given",function(){
            radioGroupDescUnderTest._properties["value"] = "female";
            var selectedItem = radioGroupDescUnderTest.selectedItem();
            assert.equal(selectedItem, "female");
        });
        it("should return same value in get, when value is set",function(){
            radioGroupDescUnderTest.selectedItem("female");
            var selectedItem = radioGroupDescUnderTest.selectedItem();
            assert.equal(selectedItem, "female");
        });
    });

    describe("selectedIndex method",function() {
        // SETTER CASE
        it("should remove 'selected item index' and 'checked' from _properties when value is null",function(){
            radioGroupDescUnderTest._properties["checked"] = 1;
            radioGroupDescUnderTest._properties["selected item index"] = 2;
            radioGroupDescUnderTest.selectedIndex(null);
            assert(!("selected item index" in radioGroupDescUnderTest._properties));
            assert(!("checked" in radioGroupDescUnderTest._properties));
        });
        it("should remove 'selected item index' and set the 'checked' to 0, when -1 is passed ",function(){
            radioGroupDescUnderTest._properties["checked"] = 1;
            radioGroupDescUnderTest._properties["selected item index"] = 8;
            radioGroupDescUnderTest.selectedIndex(-1);
            assert(!("selected item index" in radioGroupDescUnderTest._properties));
            assert.strictEqual(radioGroupDescUnderTest._properties["checked"], 0);
        });
        it("should increment the value passed if it is not -1",function(){
            radioGroupDescUnderTest.selectedIndex(1);
            assert.strictEqual(radioGroupDescUnderTest._properties["selected item index"], 2);
        });
        it("should increment the value passed using property bag, if the value passed is not -1",function(){
            radioGroupDescUnderTest = RadioGroupDesc({
                selectedIndex: 1
            });
            assert.strictEqual(radioGroupDescUnderTest._properties["selected item index"], 2);
        });
        // GETTER CASE
        it("should return this - builder pattern when, value is given",function(){
            var result = radioGroupDescUnderTest.selectedIndex(2);
            assert.strictEqual(result, radioGroupDescUnderTest);
        });
        it("should return the value of 'selected item index' from _properties as -1 when value is not given and 'checked' value is 0",function(){
            radioGroupDescUnderTest._properties["selected item index"] = 0;
            radioGroupDescUnderTest._properties["checked"] = 0;
            assert.equal(radioGroupDescUnderTest.selectedIndex(), -1);
        });
        it("should return (value-1) of 'selected item index' from _properties when value is not given, value is not null and 'checked' value is not 0",function(){
            radioGroupDescUnderTest._properties["selected item index"] = 2;
            radioGroupDescUnderTest._properties["checked"] = 1;
            assert.equal(radioGroupDescUnderTest.selectedIndex(), 1);
        });
        it("should return null, when value is not given and 'selected item index' is null and 'checked' value is not 0",function(){
            radioGroupDescUnderTest._properties["selected item index"] = null;
            radioGroupDescUnderTest._properties["checked"] = 1;
            var selectedIndex = radioGroupDescUnderTest.selectedIndex();
            assert.equal(selectedIndex, null);
        });
        it("should return same value in get, when value is set",function(){
            radioGroupDescUnderTest.selectedIndex(1);
            assert.strictEqual(radioGroupDescUnderTest.selectedIndex(), 1);
        });
    });
});

describe("RadioGroup Test Object Behavior",function(){
    var RadioGroupTO = require("../lib/radio_group.js").RadioGroupTO;
    var radioGroupTOBehaviorUnderTest;

    beforeEach(function(){
        radioGroupTOBehaviorUnderTest = RadioGroupTO({});
        radioGroupTOBehaviorUnderTest._getROProperty = sinon.stub();
        radioGroupTOBehaviorUnderTest._executeCommand = sinon.stub();
        radioGroupTOBehaviorUnderTest._getROProperties = sinon.stub();
        radioGroupTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        radioGroupTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(radioGroupTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("type",function(){
        it("should query the property 'type'",function(){
            radioGroupTOBehaviorUnderTest.type();
            assert(radioGroupTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(radioGroupTOBehaviorUnderTest._getROProperty.firstCall.args[0],"type");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            radioGroupTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = radioGroupTOBehaviorUnderTest.type();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isEnabled",function(){
        var promiseMock = {then: function(cb) {return cb(1);}};
        it("should query the property 'disabled'",function(){
            radioGroupTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            radioGroupTOBehaviorUnderTest.isEnabled();
            assert(radioGroupTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(radioGroupTOBehaviorUnderTest._getROProperty.firstCall.args,["disabled", arguments]);
        });
        it("should convert the returned number to the opposite boolean",function(){
            radioGroupTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = radioGroupTOBehaviorUnderTest.isEnabled();
            assert.strictEqual(res,false);
        });
    });

    describe("hasSelectedItem",function(){
        var promiseMock = {then: function(cb) {return cb(1);}};
        it("should query the property 'checked'",function(){
            radioGroupTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            radioGroupTOBehaviorUnderTest.hasSelectedItem();
            assert(radioGroupTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(radioGroupTOBehaviorUnderTest._getROProperty.firstCall.args,["checked", arguments]);
        });
        it("should convert the returned number to the boolean value",function(){
            radioGroupTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = radioGroupTOBehaviorUnderTest.hasSelectedItem();
            assert.strictEqual(res,true);
        });
    });

    describe("items",function(){
        it("should convert the returned string to array",function(){
            var promise = {
                then: function(cb){return cb("male;female");}
            };

            radioGroupTOBehaviorUnderTest._getROProperty.returns(promise);
            var res = radioGroupTOBehaviorUnderTest.items();
            assert.deepEqual(res,["male","female"]); // js not comparing objects
        });
        it("should query the property 'all items'",function(){
            var promise  = {then: sinon.spy()};
            radioGroupTOBehaviorUnderTest._getROProperty.returns(promise);
            radioGroupTOBehaviorUnderTest.items();
            assert(radioGroupTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(radioGroupTOBehaviorUnderTest._getROProperty.firstCall.args[0],"all items");
        });
    });

    describe("select", function(){

        var funcPromise = {
            then: sinon.stub()
        };

        beforeEach(function(){
            radioGroupTOBehaviorUnderTest._executeCommand.returns(funcPromise);
        });

        it("should throw error if no arguments passed",function(){
            assert.throws(function(){
                radioGroupTOBehaviorUnderTest.select();
            });
        });
        it("should call the _executeCommand method",function(){
            radioGroupTOBehaviorUnderTest.select(1);
            assert(radioGroupTOBehaviorUnderTest._executeCommand.calledOnce);
        });
        it("should be able to accept a string",function(){
            radioGroupTOBehaviorUnderTest.select("female");
            assert.equal(radioGroupTOBehaviorUnderTest._executeCommand.firstCall.args[1], "female");
        });
        it("should be able to except null",function(){
            radioGroupTOBehaviorUnderTest.select(null);
            assert.equal(radioGroupTOBehaviorUnderTest._executeCommand.firstCall.args[1], null);
        });
        it("should be able to except empty string",function(){
            radioGroupTOBehaviorUnderTest.select("");
            assert.equal(radioGroupTOBehaviorUnderTest._executeCommand.firstCall.args[1], "");
        });
        it("should be able to except a number and and pass it to _executeCommand as '#{}' string format",function(){
            radioGroupTOBehaviorUnderTest.select(2);
            assert.equal(radioGroupTOBehaviorUnderTest._executeCommand.firstCall.args[1], '#2');
        });
        it("should return the same promise that was returned from _executeCommand method",function(){
            radioGroupTOBehaviorUnderTest.notifyWithEvents = function(func) {
                return func.call(this);
            };

            radioGroupTOBehaviorUnderTest._executeCommand.returns(2);
            var res = radioGroupTOBehaviorUnderTest.select(2);
            assert.strictEqual(res,2);
        });
    });

    describe("selectedIndex",function(){
        it("should query the properties 'checked' and 'selected item index'",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb([1,12]);
                }
            };
            radioGroupTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            radioGroupTOBehaviorUnderTest.selectedIndex();
            assert(radioGroupTOBehaviorUnderTest._getROProperties.calledOnce);
            assert.deepEqual(radioGroupTOBehaviorUnderTest._getROProperties.firstCall.args,[arguments,"checked", "selected item index"]);
        });
        it("should return -1 if 'checked' value is 0",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb([0,2]);
                }
            };
            radioGroupTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            assert.strictEqual(radioGroupTOBehaviorUnderTest.selectedIndex(), -1);
        });
        it("should return (value-1) if 'checked' value is not 0",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb([1,2]);
                }
            };
            radioGroupTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            assert.strictEqual(radioGroupTOBehaviorUnderTest.selectedIndex(), 1);
        });
    });

    describe("selectedItem",function(){
        it("should query the properties 'checked' and 'value'",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb([1,12]);
                }
            };
            radioGroupTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            radioGroupTOBehaviorUnderTest.selectedItem();
            assert(radioGroupTOBehaviorUnderTest._getROProperties.calledOnce);
            assert.deepEqual(radioGroupTOBehaviorUnderTest._getROProperties.firstCall.args,[arguments, "checked", "value"]);
        });
        it("should return null if 'checked' value is 0",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb([0,2]);
                }
            };
            radioGroupTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            assert.strictEqual(radioGroupTOBehaviorUnderTest.selectedItem(), null);
        });
        it("should return value if 'checked' value is not 0",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb([1,2]);
                }
            };
            radioGroupTOBehaviorUnderTest._getROProperties.returns(promiseMock);
            assert.strictEqual(radioGroupTOBehaviorUnderTest.selectedItem(), 2);
        });
    });

});













