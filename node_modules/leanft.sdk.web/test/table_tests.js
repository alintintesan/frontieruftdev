// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/10/2015.
 * This file contains the tests for WebTable.
 */

var assert = require("assert");
var sinon = require("sinon");
var Q = require("q");

describe("Table Description", function () {
    var tableDesc = require("../lib/table.js").Table;
    var tableDescUnderTest;

    beforeEach(function () {
        tableDescUnderTest = tableDesc();
    });

    describe("border method", function () {
        it("should add 'border' to _properties with the correct value when value is given", function () {
            tableDescUnderTest.border(5);
            assert.strictEqual(tableDescUnderTest._properties["border"], "5");
        });
        it("should add 'border' to _properties with the correct value when value is given using property bag", function () {
            tableDescUnderTest = tableDesc({
                border: 5
            });
            assert.strictEqual(tableDescUnderTest._properties["border"], "5");
        });
        it("should return this - builder pattern when value is given", function () {
            var result = tableDescUnderTest.border(5);
            assert.strictEqual(result, tableDescUnderTest);
        });
        it("should remove 'border' from _properties when value is null", function () {
            tableDescUnderTest._properties["border"] = "5";
            tableDescUnderTest.border(null);
            assert(!("border" in tableDescUnderTest._properties));
        });
        it("should return the value of 'border' from _properties when value is not given", function () {
            tableDescUnderTest._properties["border"] = "5";
            var border = tableDescUnderTest.border();
            assert.strictEqual(border, 5);
        });
    });

    describe("columnHeaders method", function () {
        it("should add 'column names' with correct value when a value is given", function () {
            tableDescUnderTest.columnHeaders(["name1", "name2"]);
            assert.strictEqual(tableDescUnderTest._properties["column names"], "name1;name2");
        });
        it("should add 'column names' with correct value, when value is given using property bag", function () {
            tableDescUnderTest = tableDesc({
                columnHeaders: ["name1", "name2"]
            });
            assert.strictEqual(tableDescUnderTest._properties["column names"], "name1;name2");
        });
        it("should return this - builder pattern when value is given", function () {
            var result = tableDescUnderTest.columnHeaders(["name1", "name2"]);
            assert.strictEqual(result, tableDescUnderTest);
        });
        it("should remove 'column names' from _properties when value is null", function () {
            tableDescUnderTest._properties["column names"] = "name1;name2";
            tableDescUnderTest.columnHeaders(null);
            assert(!("column names" in tableDescUnderTest._properties));
        });
        it("should return the value of 'column names' from _properties, when value is not given", function () {
            tableDescUnderTest._properties["column names"] = "name1;name2";
            var columnHeaders = tableDescUnderTest.columnHeaders();
            assert.deepEqual(columnHeaders, ["name1", "name2"]);
        });
        it("should not modify property 'column names', upon get", function () {
            tableDescUnderTest._properties["column names"] = "name1;name2";
            tableDescUnderTest.columnHeaders();
            assert.strictEqual(tableDescUnderTest._properties["column names"], "name1;name2");
        });
        it("should return same value in get, when value is set", function () {
            tableDescUnderTest.columnHeaders(["name1", "name2"]);
            var columnHeaders = tableDescUnderTest.columnHeaders();
            assert.deepEqual(columnHeaders, ["name1", "name2"]);
        });
    });

    describe("rowsCount method", function () {
        it("should add 'rows' to _properties with the correct value when value is given", function () {
            tableDescUnderTest.rowsCount(5);
            assert.strictEqual(tableDescUnderTest._properties["rows"], 5);
        });
        it("should add 'rows' to _properties with the correct value when value is given using property bag", function () {
            tableDescUnderTest = tableDesc({
                rowsCount: 5
            });
            assert.strictEqual(tableDescUnderTest._properties["rows"], 5);
        });
        it("should return this - builder pattern when value is given", function () {
            var result = tableDescUnderTest.rowsCount(5);
            assert.strictEqual(result, tableDescUnderTest);
        });
        it("should remove 'rows' from _properties when value is null", function () {
            tableDescUnderTest._properties["rows"] = 5;
            tableDescUnderTest.rowsCount(null);
            assert(!("rows" in tableDescUnderTest._properties));
        });
        it("should return the value of 'rows' from _properties when value is not given", function () {
            tableDescUnderTest._properties["rows"] = 5;
            var rows = tableDescUnderTest.rowsCount();
            assert.strictEqual(rows, 5);
        });
    });

    describe("columnsCount method", function () {
        it("should add 'cols' to _properties with the correct value when value is given", function () {
            tableDescUnderTest.columnsCount(5);
            assert.strictEqual(tableDescUnderTest._properties["cols"], 5);
        });
        it("should add 'cols' to _properties with the correct value when value is given using property bag", function () {
            tableDescUnderTest = tableDesc({
                columnsCount: 5
            });
            assert.strictEqual(tableDescUnderTest._properties["cols"], 5);
        });
        it("should return this - builder pattern when value is given", function () {
            var result = tableDescUnderTest.columnsCount(5);
            assert.strictEqual(result, tableDescUnderTest);
        });
        it("should remove 'cols' from _properties when value is null", function () {
            tableDescUnderTest._properties["cols"] = 5;
            tableDescUnderTest.columnsCount(null);
            assert(!("cols" in tableDescUnderTest._properties));
        });
        it("should return the value of 'cols' from _properties when value is not given", function () {
            tableDescUnderTest._properties["cols"] = 5;
            var columnsCount = tableDescUnderTest.columnsCount();
            assert.strictEqual(columnsCount, 5);
        });
    });

});

describe("Table Test Object Behavior", function () {
    var TableTO = require("../lib/table.js").TableTO;
    var tableTOBehaviorUnderTest;

    beforeEach(function () {
        tableTOBehaviorUnderTest = new TableTO({});
        tableTOBehaviorUnderTest._getROProperty = sinon.stub();
        tableTOBehaviorUnderTest._getROPropertyWithoutEvents = sinon.stub();
        tableTOBehaviorUnderTest._executeCommand = sinon.stub();
        tableTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        tableTOBehaviorUnderTest._session._promiseManager = {
            wrapPromiseFunctionWithNotifyEvents: function () {
            }
        };
        sinon.stub(tableTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("border", function () {
        it("should query the property 'border'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("5");
                }
            };
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            tableTOBehaviorUnderTest.border();
            assert(tableTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(tableTOBehaviorUnderTest._getROProperty.firstCall.args, ["border", arguments]);
        });
        it("should return 0 if 'border' string value is an empty string", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            assert.strictEqual(tableTOBehaviorUnderTest.border(), 0);
        });
        it("should return 0 if 'border' string value is null", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(null);
                }
            };
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            assert.strictEqual(tableTOBehaviorUnderTest.border(), 0);
        });
        it("should return 'border' value as array if it's not an empty string", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("5");
                }
            };
            tableTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            assert.deepEqual(tableTOBehaviorUnderTest.border(), 5);
        });
    });

    describe("columnHeaders", function () {
        it("should convert the returned string to array", function () {
            var promise = {
                then: function (cb) {
                    return cb("name1;name2");
                }
            };
            tableTOBehaviorUnderTest._getROProperty.returns(promise);
            var res = tableTOBehaviorUnderTest.columnHeaders();
            assert.deepEqual(res, ["name1", "name2"]);
        });
        it("should query the property 'all items'", function () {
            var promise = {then: sinon.spy()};
            tableTOBehaviorUnderTest._getROProperty.returns(promise);
            tableTOBehaviorUnderTest.columnHeaders();
            assert(tableTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(tableTOBehaviorUnderTest._getROProperty.firstCall.args[0], "column names");
        });
    });

    describe("cells", function () {
        it("should return a proxy to a given table cell in case row and column index were provided and save them as one based", function () {
            var res = tableTOBehaviorUnderTest.cells(0, 2);

            assert.strictEqual(res._rowIndex, 1);
            assert.strictEqual(res._cellIndex, 3);
        });

        describe("specific cell", function () {
            var cellUnderTest;
            beforeEach(function () {
                cellUnderTest = tableTOBehaviorUnderTest.cells(5, 8);
            });

            describe("text", function () {
                it("should execute the command 'GetCellData' and provide the cell index", function () {
                    var promise = {then: sinon.spy()};
                    tableTOBehaviorUnderTest._executeCommand.returns(promise);

                    cellUnderTest.text();

                    assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
                    assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0, 3), ["GetCellData", 6, 9]);
                });
            });

            describe("rowIndex", function () {
                it("should return the zero based rowIndex", function () {
                    assert.strictEqual(cellUnderTest.rowIndex(), 5);
                });
            });

            describe("columnIndex", function () {
                it("should return the columnIndex", function () {
                    assert.strictEqual(cellUnderTest.columnIndex(), 8);
                });
            });

            describe("asWebElement", function () {
                it("should execute the command 'Cell' and row and column indices provided should be converted to one based", function () {
                    tableTOBehaviorUnderTest._executeCommand.returns(Q.resolve("webElement"));

                    return cellUnderTest.asWebElement().then(function (result) {
                        sinon.assert.calledOnce(tableTOBehaviorUnderTest._executeCommand);
                        sinon.assert.calledWith(tableTOBehaviorUnderTest._executeCommand, "Cell", 6, 9);
                        assert.strictEqual(result, "webElement");
                    });
                });
            });

            describe("$", function () {
                var childDesc;
                beforeEach(function () {
                    tableTOBehaviorUnderTest._session = {
                        factory: {
                            create: sinon.stub()
                        }
                    };
                    childDesc = {
                        index: sinon.stub()
                    };

                    tableTOBehaviorUnderTest.notifyWithEvents = function (func) {
                        return func.call(this);
                    };
                });

                it("should execute 'ChildItem' with the given type's native class", function () {
                    tableTOBehaviorUnderTest._session.factory.create.returns({
                        _nativeClass: "MyClass"
                    });

                    cellUnderTest.$(childDesc);

                    assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[0], "ChildItem");
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[1], 6);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[2], 9);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[3], "MyClass");
                });

                it("should execute 'ChildItem' with the given description's index", function () {
                    tableTOBehaviorUnderTest._session.factory.create.returns({
                        _nativeClass: "MyClass"
                    });

                    childDesc.index.returns(42);

                    cellUnderTest.$(childDesc);

                    assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[0], "ChildItem");
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[1], 6);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[2], 9);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[3], "MyClass");
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[4], 42);
                });

                it("should execute 'ChildItem' with the default index of 0", function () {
                    tableTOBehaviorUnderTest._session.factory.create.returns({
                        _nativeClass: "MyClass"
                    });

                    cellUnderTest.$(childDesc);

                    assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[0], "ChildItem");
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[1], 6);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[2], 9);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[3], "MyClass");
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[4], 0);
                });

                it("should use the web element as default type", function () {
                    tableTOBehaviorUnderTest._session.factory.create.returns({
                        _nativeClass: "MyClass"
                    });

                    cellUnderTest.$();

                    assert.deepEqual(tableTOBehaviorUnderTest._session.factory.create.firstCall.args[0], {
                        technology: "Web",
                        leanftType: "WebElement"
                    });
                });
            });

            describe("countOf", function () {
                var childDesc;
                beforeEach(function () {
                    tableTOBehaviorUnderTest._session = {
                        factory: {
                            create: sinon.stub()
                        }
                    };
                    childDesc = {
                        index: sinon.stub()
                    };
                    tableTOBehaviorUnderTest.notifyWithEvents = function (func) {
                        return func.call(this);
                    };
                });

                it("should execute 'ChildItemCount' with the given type's native class", function () {
                    tableTOBehaviorUnderTest._session.factory.create.returns({
                        _nativeClass: "MyClass"
                    });

                    cellUnderTest.countOf(childDesc);

                    assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[0], "ChildItemCount");
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[1], 6);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[2], 9);
                    assert.strictEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args[3], "MyClass");
                });

                it("should use the web element as default type", function () {
                    tableTOBehaviorUnderTest._session.factory.create.returns({
                        _nativeClass: "MyClass"
                    });

                    cellUnderTest.countOf();

                    assert.deepEqual(tableTOBehaviorUnderTest._session.factory.create.firstCall.args[0], {
                        technology: "Web",
                        leanftType: "WebElement"
                    });
                });
            });
        });

        describe("specific row", function () {
            beforeEach(function () {
                tableTOBehaviorUnderTest._getROPropertyWithoutEvents.withArgs("cols", 1).returns(Q.resolve(5));
                tableTOBehaviorUnderTest._getROPropertyWithoutEvents.withArgs("cols", 2).returns(Q.resolve(10));
            });

            it("should return a single line with correct length", function () {
                return tableTOBehaviorUnderTest.cells(0).then(function (res) {
                    assert.strictEqual(res.length, 5);
                    res.forEach(function (cell) {
                        assert.strictEqual(cell._rowIndex, 1);
                    });

                    return tableTOBehaviorUnderTest.cells(1).then(function (res) {
                        assert.strictEqual(res.length, 10);
                        res.forEach(function (cell) {
                            assert.strictEqual(cell._rowIndex, 2);
                        });
                    });
                });
            });

            it("should have correct zero based rowIndex value", function () {
                return tableTOBehaviorUnderTest.cells(0).then(function (res) {
                    res.forEach(function (cell) {
                        assert.strictEqual(cell.rowIndex(), 0);
                    });

                    return tableTOBehaviorUnderTest.cells(1).then(function (res) {
                        res.forEach(function (cell) {
                            assert.strictEqual(cell.rowIndex(), 1);
                        });
                    });
                });
            });

            it("should have correct zero based columnIndex value", function () {
                return tableTOBehaviorUnderTest.cells(0).then(function (res) {
                    res.forEach(function (cell, columnIndex) {
                        assert.strictEqual(cell.columnIndex(), columnIndex);
                    });

                    return tableTOBehaviorUnderTest.cells(1).then(function (res) {
                        res.forEach(function (cell, columnIndex) {
                            assert.strictEqual(cell.columnIndex(), columnIndex);
                        });
                    });
                });
            });
        });

        describe("all cells", function () {
            beforeEach(function () {
                tableTOBehaviorUnderTest._getROProperty.withArgs("rows").returns(Q.resolve(2));
                tableTOBehaviorUnderTest._getROPropertyWithoutEvents.withArgs("cols", 1).returns(Q.resolve(5));
                tableTOBehaviorUnderTest._getROPropertyWithoutEvents.withArgs("cols", 2).returns(Q.resolve(10));
            });

            it("should return all rows with correct length", function () {
                return tableTOBehaviorUnderTest.cells().then(function (res) {
                    assert.strictEqual(res.length, 2);
                    assert.strictEqual(res[0].length, 5);
                    res[0].forEach(function (cell) {
                        assert.strictEqual(cell._rowIndex, 1);
                    });

                    assert.strictEqual(res[1].length, 10);
                    res[1].forEach(function (cell) {
                        assert.strictEqual(cell._rowIndex, 2);
                    });
                });
            });

            it("should have correct zero based rowIndex value", function () {
                return tableTOBehaviorUnderTest.cells().then(function (res) {
                    res[0].forEach(function (cell) {
                        assert.strictEqual(cell.rowIndex(), 0);
                    });

                    res[1].forEach(function (cell) {
                        assert.strictEqual(cell.rowIndex(), 1);
                    });
                });
            });

            it("should have correct zero based columnIndex value", function () {
                return tableTOBehaviorUnderTest.cells().then(function (res) {
                    res[0].forEach(function (cell, columnIndex) {
                        assert.strictEqual(cell.columnIndex(), columnIndex);
                    });

                    res[1].forEach(function (cell, columnIndex) {
                        assert.strictEqual(cell.columnIndex(), columnIndex);
                    });
                });
            });
        });

        describe("findRow", function () {
            var execiteCommandPromise;
            var getROPropertyPromise;
            beforeEach(function () {
                execiteCommandPromise = {
                    then: function (fullfill) {
                        return fullfill.apply(this, this._callWithArgs);
                    },
                    _callWithArgs: []
                };
                getROPropertyPromise = {
                    then: function (fullfill) {
                        return fullfill.apply(this, this._callWithArgs);
                    },
                    _callWithArgs: []
                };

                tableTOBehaviorUnderTest._executeCommand.returns(execiteCommandPromise);
                tableTOBehaviorUnderTest._getROProperty.returns(getROPropertyPromise);
                tableTOBehaviorUnderTest._getROPropertyWithoutEvents.returns(getROPropertyPromise);
            });

            it("should execute the command 'GetRowWithCellText' with the given parameters", function () {
                tableTOBehaviorUnderTest.findRow("avishay", 1, 3);

                assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
                assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0, 4), ["GetRowWithCellText", "avishay", 2, 4]);
            });

            it("should execute the command 'GetRowWithCellText' with default indices of 0", function () {
                tableTOBehaviorUnderTest.findRow("avishay");

                assert(tableTOBehaviorUnderTest._executeCommand.calledOnce);
                assert.deepEqual(tableTOBehaviorUnderTest._executeCommand.firstCall.args.splice(0, 4), ["GetRowWithCellText", "avishay", 0, 0]);
            });

            it("should fullfill the promise with null in case the result index is -1", function () {
                execiteCommandPromise._callWithArgs = [-1];
                tableTOBehaviorUnderTest._executeCommand.returns(execiteCommandPromise);

                var res = tableTOBehaviorUnderTest.findRow("someText");
                assert.strictEqual(res, null);
            });

            it("should fullfill the promise with array of cells according to the number of cells in the row1", function () {
                execiteCommandPromise._callWithArgs = [2];
                getROPropertyPromise._callWithArgs = [10];

                var res = tableTOBehaviorUnderTest.findRow("someText");
                assert.strictEqual(res.length, 10);
                assert.strictEqual(res[0]._rowIndex, 2);
            });

        });
    });
});