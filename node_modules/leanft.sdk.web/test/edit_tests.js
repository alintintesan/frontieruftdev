// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/19/2015.
 */


var assert = require("assert");
var sinon = require("sinon");

describe("Edit Description",function(){
    var EditDesc = require("../lib/edit.js").Edit;
    var editDescUnderTest;

    beforeEach(function(){
        editDescUnderTest = EditDesc();
    });

    describe("defaultValue method",function() {
        it("should add 'default value' to _properties when value is given",function(){
            editDescUnderTest.defaultValue("some default value");
            assert.strictEqual(editDescUnderTest._properties["default value"], "some default value");
        });
        it("should add 'default value' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                defaultValue: "some default value"
            });
            assert.strictEqual(editDescUnderTest._properties["default value"], "some default value");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.defaultValue("some default value");
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'default value' from _properties when value is null",function(){
            editDescUnderTest._properties["default value"] = "some default value";
            editDescUnderTest.defaultValue(null);
            assert(!("default value" in editDescUnderTest._properties));
        });
        it("should return the value of 'default value' from _properties when value is not given",function(){
            editDescUnderTest._properties["default value"] = "some default value";
            var defaultValue = editDescUnderTest.defaultValue();
            assert.equal(defaultValue, "some default value");
        });
    });

    describe("maxLength method",function() {
        it("should add 'max length' to _properties when value is given",function(){
            editDescUnderTest.maxLength(25);
            assert.strictEqual(editDescUnderTest._properties["max length"], 25);
        });
        it("should add 'max length' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                maxLength: 25
            });
            assert.strictEqual(editDescUnderTest._properties["max length"], 25);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.maxLength(25);
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'max length' from _properties when value is null",function(){
            editDescUnderTest._properties["max length"] = 25;
            editDescUnderTest.maxLength(null);
            assert(!("max length" in editDescUnderTest._properties));
        });
        it("should return the value of 'max length' from _properties when value is not given",function(){
            editDescUnderTest._properties["max length"] = 25;
            var maxLength = editDescUnderTest.maxLength();
            assert.equal(maxLength, 25);
        });
    });

    describe("pattern method",function() {
        it("should add 'pattern' to _properties when value is given",function(){
            editDescUnderTest.pattern("some pattern");
            assert.strictEqual(editDescUnderTest._properties["pattern"], "some pattern");
        });
        it("should add 'pattern' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                pattern: "some pattern"
            });
            assert.strictEqual(editDescUnderTest._properties["pattern"], "some pattern");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.pattern("some pattern");
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'pattern' from _properties when value is null",function(){
            editDescUnderTest._properties["pattern"] = "some pattern";
            editDescUnderTest.pattern(null);
            assert(!("pattern" in editDescUnderTest._properties));
        });
        it("should return the value of 'pattern' from _properties when value is not given",function(){
            editDescUnderTest._properties["pattern"] = "some pattern";
            var pattern = editDescUnderTest.pattern();
            assert.equal(pattern, "some pattern");
        });
    });

    describe("rowsCount method",function() {
        it("should add 'rows' to _properties when value is given",function(){
            editDescUnderTest.rowsCount(3);
            assert.strictEqual(editDescUnderTest._properties["rows"], 3);
        });
        it("should add 'rows' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                rowsCount: 3
            });
            assert.strictEqual(editDescUnderTest._properties["rows"], 3);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.rowsCount(3);
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'rows' from _properties when value is null",function(){
            editDescUnderTest._properties["rows"] = 3;
            editDescUnderTest.rowsCount(null);
            assert(!("rows" in editDescUnderTest._properties));
        });
        it("should return the value of 'rows' from _properties when value is not given",function(){
            editDescUnderTest._properties["rows"] = 3;
            var rowsCount = editDescUnderTest.rowsCount();
            assert.equal(rowsCount, 3);
        });
    });

    describe("type method",function() {
        it("should add 'type' to _properties when value is given",function(){
            editDescUnderTest.type("some type");
            assert.strictEqual(editDescUnderTest._properties["type"], "some type");
        });
        it("should add 'type' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                type: "some type"
            });
            assert.strictEqual(editDescUnderTest._properties["type"], "some type");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.type("some type");
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'type' from _properties when value is null",function(){
            editDescUnderTest._properties["type"] = "some type";
            editDescUnderTest.type(null);
            assert(!("type" in editDescUnderTest._properties));
        });
        it("should return the value of 'type' from _properties when value is not given",function(){
            editDescUnderTest._properties["type"] = "some type";
            var type = editDescUnderTest.type();
            assert.equal(type, "some type");
        });
    });

    describe("value method",function() {
        it("should add 'value' to _properties when value is given",function(){
            editDescUnderTest.value("some value");
            assert.strictEqual(editDescUnderTest._properties["value"], "some value");
        });
        it("should add 'value' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                value: "some value"
            });
            assert.strictEqual(editDescUnderTest._properties["value"], "some value");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.value("some value");
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'value' from _properties when value is null",function(){
            editDescUnderTest._properties["value"] = "some value";
            editDescUnderTest.value(null);
            assert(!("value" in editDescUnderTest._properties));
        });
        it("should return the value of 'value' from _properties when value is not given",function(){
            editDescUnderTest._properties["value"] = "some value";
            var value = editDescUnderTest.value();
            assert.equal(value, "some value");
        });
    });

    describe("placeholder method",function() {
        it("should add 'placeholder' to _properties when a value is given",function(){
            editDescUnderTest.placeholder("some placeholder");
            assert.strictEqual(editDescUnderTest._properties["placeholder"], "some placeholder");
        });
        it("should add 'placeholder' to _properties when a value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                placeholder: "some placeholder"
            });
            assert.strictEqual(editDescUnderTest._properties["placeholder"], "some placeholder");
        });
        it("should return this - builder pattern when placeholder is given",function(){
            var result = editDescUnderTest.placeholder("some placeholder");
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'placeholder' from _properties when placeholder is null",function(){
            editDescUnderTest._properties["placeholder"] = "some placeholder";
            editDescUnderTest.placeholder(null);
            assert(!("placeholder" in editDescUnderTest._properties));
        });
        it("should return the value of 'placeholder' from _properties when placeholder is not given",function(){
            editDescUnderTest._properties["placeholder"] = "some placeholder";
            var placeholder = editDescUnderTest.placeholder();
            assert.equal(placeholder, "some placeholder");
        });
    });

    describe("isReadOnly method",function() {
        it("should add 'readonly' with correct value when a value is given",function(){
            editDescUnderTest.isReadOnly(false);
            assert.strictEqual(editDescUnderTest._properties["readonly"], 0);
        });
        it("should add 'readonly' to _properties when a value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                isReadOnly: false
            });
            assert.strictEqual(editDescUnderTest._properties["readonly"], 0);
        });
        it("when value is given, should return this - builder pattern",function(){
            var result = editDescUnderTest.isReadOnly(false);
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'readonly' from _properties when value is null",function(){
            editDescUnderTest._properties["readonly"] = 0;
            editDescUnderTest.isReadOnly(null);
            assert(!("isReadOnly" in editDescUnderTest._properties));
        });
        it("should return the value of 'readonly' from _properties when value is not given",function(){
            editDescUnderTest._properties["readonly"] = 0;
            var isReadOnly = editDescUnderTest.isReadOnly();
            assert.strictEqual(isReadOnly, false);
        });
        it("should return same value in get, when value is set",function(){
            editDescUnderTest.isReadOnly(false);
            var isReadOnly = editDescUnderTest.isReadOnly();
            assert.strictEqual(isReadOnly, false);
        });
    });

    describe("isRequired method",function() {
        it("should add 'required' to _properties when value is given",function(){
            editDescUnderTest.isRequired(true);
            assert.strictEqual(editDescUnderTest._properties["required"], true);
        });
        it("should add 'required' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                isRequired: true
            });
            assert.strictEqual(editDescUnderTest._properties["required"], true);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.isRequired(true);
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'required' from _properties when value is null",function(){
            editDescUnderTest._properties["required"] = true;
            editDescUnderTest.isRequired(null);
            assert(!("required" in editDescUnderTest._properties));
        });
        it("should return the value of 'required' from _properties when value is not given",function(){
            editDescUnderTest._properties["required"] = true;
            var isRequired = editDescUnderTest.isRequired();
            assert.equal(isRequired, true);
        });
    });

    describe("maxCharsInLine method",function() {
        it("should add 'width in characters' to _properties when value is given",function(){
            editDescUnderTest.maxCharsInLine(20);
            assert.strictEqual(editDescUnderTest._properties["width in characters"], 20);
        });
        it("should add 'width in characters' to _properties when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                maxCharsInLine: 20
            });
            assert.strictEqual(editDescUnderTest._properties["width in characters"], 20);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = editDescUnderTest.maxCharsInLine(20);
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'width in characters' from _properties when value is null",function(){
            editDescUnderTest._properties["width in characters"] = 20;
            editDescUnderTest.maxCharsInLine(null);
            assert(!("width in characters" in editDescUnderTest._properties));
        });
        it("should return the value of 'width in characters' from _properties when value is not given",function(){
            editDescUnderTest._properties["width in characters"] = 20;
            var maxCharsInLine = editDescUnderTest.maxCharsInLine();
            assert.equal(maxCharsInLine, 20);
        });
    });

    describe("isEnabled method",function() {
        it("should add 'disabled' with correct value when a value is given",function(){
            editDescUnderTest.isEnabled(false);
            assert.strictEqual(editDescUnderTest._properties["disabled"], 1);
        });
        it("should add 'disabled' with correct value, when value is given using property bag",function(){
            editDescUnderTest = EditDesc({
                isEnabled: false
            });
            assert.strictEqual(editDescUnderTest._properties["disabled"], 1);
        });
        it("when value is given, should return this - builder pattern",function(){
            var result = editDescUnderTest.isEnabled(false);
            assert.strictEqual(result, editDescUnderTest);
        });
        it("should remove 'disabled' from _properties when value is null",function(){
            editDescUnderTest._properties["disabled"] = 0;
            editDescUnderTest.isEnabled(null);
            assert(!("disabled" in editDescUnderTest._properties));
        });
        it("should return the value of 'disabled' from _properties, when value is not given",function(){
            editDescUnderTest._properties["disabled"] = 1;
            var isEnabled = editDescUnderTest.isEnabled();
            assert.strictEqual(isEnabled, false);
        });
        it("should return same value in get, when value is set",function(){
            editDescUnderTest.isEnabled(true);
            var isEnabled = editDescUnderTest.isEnabled();
            assert.strictEqual(isEnabled, true);
        });
    });

});

describe("Edit Test Object Behavior",function(){
    var EditTO = require("../lib/edit.js").EditTO;
    var editTOBehaviorUnderTest;

    beforeEach(function(){
        editTOBehaviorUnderTest = EditTO({});
        editTOBehaviorUnderTest._getROProperty = sinon.stub();
        editTOBehaviorUnderTest._executeCommand = sinon.stub();
        editTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        editTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(editTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("setValue", function(){
        var executeEventsPromise = {
            then: sinon.stub()
        };

        beforeEach(function(){
            editTOBehaviorUnderTest._executeCommand.returns(executeEventsPromise);
        });

        it("should call the _executeCommand method",function(){
            editTOBehaviorUnderTest.setValue("");
            assert(editTOBehaviorUnderTest._executeCommand.calledOnce);
        });

        it("should be able to except a string",function(){
            editTOBehaviorUnderTest.setValue("some text");
            assert.equal(editTOBehaviorUnderTest._executeCommand.firstCall.args[1], "some text");
        });

        it("should be able to except null",function(){
            editTOBehaviorUnderTest.setValue(null);
            assert.equal(editTOBehaviorUnderTest._executeCommand.firstCall.args[1], null);
        });

        it("should be able to except empty string",function(){
            editTOBehaviorUnderTest.setValue("");
            assert.equal(editTOBehaviorUnderTest._executeCommand.firstCall.args[1], "");
        });

        it("should be able to except a number",function(){
            editTOBehaviorUnderTest.setValue(56);
            assert.equal(editTOBehaviorUnderTest._executeCommand.firstCall.args[1], 56);
        });

        it("should throw error if no arguments passed",function(){
            assert.throws(function(){
                editTOBehaviorUnderTest.setValue();
            });
        });

        it("should return the same promise that was returned from _executeCommand method",function(){
            var setPromise = { then:sinon.stub() };
            editTOBehaviorUnderTest._executeCommand.returns(setPromise);
            var res = editTOBehaviorUnderTest.setValue("");
            assert.strictEqual(res,setPromise);
        });
    });

    describe("defaultValue",function(){
        it("should query the property 'default value'",function(){
            editTOBehaviorUnderTest.defaultValue();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"default value");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.defaultValue();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("maxLength",function(){
        it("should query the property 'max length'",function(){
            editTOBehaviorUnderTest.maxLength();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"max length");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.maxLength();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("pattern",function(){
        it("should query the property 'pattern'",function(){
            editTOBehaviorUnderTest.pattern();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"pattern");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.pattern();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("rowsCount",function(){
        it("should query the property 'pattern'",function(){
            editTOBehaviorUnderTest.rowsCount();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"rows");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.rowsCount();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("type",function(){
        it("should query the property 'type'",function(){
            editTOBehaviorUnderTest.type();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"type");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.type();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("value",function(){
        it("should query the property 'value'",function(){
            editTOBehaviorUnderTest.value();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"value");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.value();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("placeholder",function(){
        it("should query the property 'placeholder'",function(){
            editTOBehaviorUnderTest.placeholder();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"placeholder");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.placeholder();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isReadOnly",function(){
        var promiseMock = {then: function(cb) {return cb(1);}};
        it("should query the property 'readonly'",function(){
            editTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            editTOBehaviorUnderTest.isReadOnly();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(editTOBehaviorUnderTest._getROProperty.firstCall.args,["readonly", arguments]);
        });
        it("should convert the returned number to it's boolean value",function(){
            editTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = editTOBehaviorUnderTest.isReadOnly();
            assert.strictEqual(res,true);
        });
    });

    describe("isRequired",function(){
        it("should query the property 'required'",function(){
            editTOBehaviorUnderTest.isRequired();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"required");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.isRequired();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("maxCharsInLine",function(){
        it("should query the property 'width in characters'",function(){
            editTOBehaviorUnderTest.maxCharsInLine();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"width in characters");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest.maxCharsInLine();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("setSecure",function(){
        it("should execute command 'SetSecure' and pass it the correct parameters",function(){
            var executeEventsPromise = {
                then: sinon.stub()
            };

            editTOBehaviorUnderTest._executeCommand.returns(executeEventsPromise);
            editTOBehaviorUnderTest.setSecure("my56Pass");
            assert(editTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(editTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,2), ["SetSecure", "my56Pass"]);
        });
        it("should throw error if null passed",function(){
            assert.throws(function(){
                editTOBehaviorUnderTest.setSecure(null);
            });
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = { then: sinon.stub() };
            editTOBehaviorUnderTest._executeCommand.returns(getROPromise);
            var res = editTOBehaviorUnderTest.setSecure("my56Pass");
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("submit",function(){
        it("should execute command 'Submit'",function(){
            var executeEventsPromise = {
                then: sinon.stub()
            };

            editTOBehaviorUnderTest._executeCommand.returns(executeEventsPromise);
            editTOBehaviorUnderTest.submit();
            assert(editTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(editTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,1), ["Submit"]);
        });
    });

    describe("_placeholder",function(){
        it("should query the property 'placeholder'",function(){
            editTOBehaviorUnderTest._placeholder();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(editTOBehaviorUnderTest._getROProperty.firstCall.args[0],"placeholder");
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            editTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = editTOBehaviorUnderTest._placeholder();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isEnabled",function(){
        var promiseMock = {then: function(cb) {return cb(1);}};
        it("should query the property 'disabled'",function(){
            editTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            editTOBehaviorUnderTest.isEnabled();
            assert(editTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(editTOBehaviorUnderTest._getROProperty.firstCall.args,["disabled", arguments]);
        });
        it("should convert the returned number to the opposite boolean",function(){
            editTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = editTOBehaviorUnderTest.isEnabled();
            assert.strictEqual(res,false);
        });
    });
});


