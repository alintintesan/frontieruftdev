// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/30/2015.
 */

var assert = require("assert");
var sinon = require("sinon");


describe("Area Description",function(){
    var AreaDesc = require("../lib/area.js").Area;
    var AreaDescUnderTest;

    beforeEach(function(){
        AreaDescUnderTest = AreaDesc();
    });

    describe("mapName method",function() {
        it("should add 'map name' to _properties with the correct value when value is given",function(){
            AreaDescUnderTest.mapName("mapname");
            assert.strictEqual(AreaDescUnderTest._properties["map name"], "mapname");
        });
        it("should add 'map name' to _properties with the correct value when value is given using property bag",function(){
            AreaDescUnderTest = AreaDesc({
                mapName: "mapname"
            });
            assert.strictEqual(AreaDescUnderTest._properties["map name"], "mapname");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AreaDescUnderTest.mapName("mapname");
            assert.strictEqual(result, AreaDescUnderTest);
        });
        it("should remove 'map name' from _properties when value is null",function(){
            AreaDescUnderTest._properties["map name"] = "mapname";
            AreaDescUnderTest.mapName(null);
            assert(!("map name" in AreaDescUnderTest._properties));
        });
        it("should return the value of 'map name' from _properties when value is not given",function(){
            AreaDescUnderTest._properties["map name"] = "mapname";
            var mapName = AreaDescUnderTest.mapName();
            assert.equal(mapName, "mapname");
        });
    });

    describe("coords method",function() {
        it("should add 'coords' with correct value when a value is given",function(){
            AreaDescUnderTest.coords([26,5,54]);
            assert.strictEqual(AreaDescUnderTest._properties["coords"], "26,5,54");
        });
        it("should add 'coords' with correct value, when value is given using property bag",function(){
            AreaDescUnderTest = AreaDesc({
                coords: [26,5,54]
            });
            assert.strictEqual(AreaDescUnderTest._properties["coords"], "26,5,54");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = AreaDescUnderTest.coords([26,5,54]);
            assert.strictEqual(result, AreaDescUnderTest);
        });
        it("should remove 'coords' from _properties when value is null",function(){
            AreaDescUnderTest._properties["coords"] = "26,5,54";
            AreaDescUnderTest.coords(null);
            assert(!("coords" in AreaDescUnderTest._properties));
        });
        it("should return the value of 'coords' from _properties, when value is not given",function(){
            AreaDescUnderTest._properties["coords"] = "26,5,54";
            var items = AreaDescUnderTest.coords();
            assert.deepEqual(items, [26,5,54]);
        });
        it("should not modify property 'coords', upon get",function(){
            AreaDescUnderTest._properties["coords"] = "26,5,54";
            AreaDescUnderTest.coords();
            assert.strictEqual(AreaDescUnderTest._properties["coords"], "26,5,54");
        });
        it("should return same value in get, when value is set",function(){
            AreaDescUnderTest.coords([26,5,54]);
            var coords = AreaDescUnderTest.coords();
            assert.deepEqual(coords, [26,5,54]);
        });
    });



});

describe("Area Test Object Behavior",function(){
    var AreaTO = require("../lib/area.js").AreaTO;
    var areaTOBehaviorUnderTest;

    beforeEach(function(){
        areaTOBehaviorUnderTest = new AreaTO({});
        areaTOBehaviorUnderTest._getROProperty = sinon.stub();
        areaTOBehaviorUnderTest._executeCommand = sinon.stub();
    });

    describe("mapName",function(){
        it("should query the property 'map name'",function(){
            areaTOBehaviorUnderTest.mapName();
            assert(areaTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(areaTOBehaviorUnderTest._getROProperty.firstCall.args,["map name", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            areaTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = areaTOBehaviorUnderTest.mapName();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("coords",function(){
        it("should convert the returned string to array of integers",function(){
            var promise = {
                then: function(cb){return cb("26,5,54");}
            };
            areaTOBehaviorUnderTest._getROProperty.returns(promise);
            var res = areaTOBehaviorUnderTest.coords();
            assert.deepEqual(res,[26,5,54]); // js not comparing objects
        });
        it("should query the property 'coords'",function(){
            var promise  = {then: sinon.spy()};
            areaTOBehaviorUnderTest._getROProperty.returns(promise);
            areaTOBehaviorUnderTest.coords();
            assert(areaTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.equal(areaTOBehaviorUnderTest._getROProperty.firstCall.args[0],"coords");
        });
    });


});