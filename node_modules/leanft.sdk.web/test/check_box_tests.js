// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 11/29/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("CheckBox Description",function(){
    var CheckBoxDesc = require("../lib/check_box.js").CheckBox;
    var checkBoxDescUnderTest;

    beforeEach(function(){
        checkBoxDescUnderTest = CheckBoxDesc();
    });

    describe("isChecked method",function() {
        it("should add 'checked' with correct value when value is given",function(){
            checkBoxDescUnderTest.isChecked(true);
            assert.strictEqual(checkBoxDescUnderTest._properties["checked"], 1);
        });
        it("should add 'checked' with correct value when value is given using property bag",function(){
            checkBoxDescUnderTest = CheckBoxDesc({
                isChecked: true
            });
            assert.strictEqual(checkBoxDescUnderTest._properties["checked"], 1);
        });
        it("should return this - builder pattern when, value is given",function(){
            var result = checkBoxDescUnderTest.isChecked(true);
            assert.strictEqual(result, checkBoxDescUnderTest);
        });
        it("should remove 'checked' from _properties when value is null",function(){
            checkBoxDescUnderTest._properties["checked"] = 1;
            checkBoxDescUnderTest.isChecked(null);
            assert(!("hasSelectedItem" in checkBoxDescUnderTest._properties));
        });
        it("should return the value of 'checked' from _properties when value is not given",function(){
            checkBoxDescUnderTest._properties["checked"] = 1;
            var hasSelectedItem = checkBoxDescUnderTest.isChecked();
            assert.strictEqual(hasSelectedItem, true);
        });
        it("should return same value in get, when value is set",function(){
            checkBoxDescUnderTest.isChecked(true);
            var isChecked = checkBoxDescUnderTest.isChecked();
            assert.equal(isChecked, true);
        });
    });

});

describe("CheckBox Test Object Behavior",function(){
    var CheckBoxTO = require("../lib/check_box.js").CheckBoxTO;
    var checkBoxTOBehaviorUnderTest;

    beforeEach(function(){
        checkBoxTOBehaviorUnderTest = CheckBoxTO({});
        checkBoxTOBehaviorUnderTest._getROProperty = sinon.stub();
        checkBoxTOBehaviorUnderTest._executeCommand = sinon.stub();
        checkBoxTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        checkBoxTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(checkBoxTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("type",function(){
        it("should query the property 'type'",function(){
            checkBoxTOBehaviorUnderTest.type();
            assert(checkBoxTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(checkBoxTOBehaviorUnderTest._getROProperty.firstCall.args,["type", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            checkBoxTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = checkBoxTOBehaviorUnderTest.type();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isEnabled",function(){
        var promiseMock = {then: function(cb) {return cb(1);}};
        it("should query the property 'disabled'",function(){
            checkBoxTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            checkBoxTOBehaviorUnderTest.isEnabled();
            assert(checkBoxTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(checkBoxTOBehaviorUnderTest._getROProperty.firstCall.args,["disabled", arguments]);
        });
        it("should convert the returned number to the opposite boolean",function(){
            checkBoxTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = checkBoxTOBehaviorUnderTest.isEnabled();
            assert.strictEqual(res,false);
        });
    });

    describe("isChecked",function(){
        var promiseMock = {then: function(cb) {return cb(1);}};
        it("should query the property 'checked'",function(){
            checkBoxTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            checkBoxTOBehaviorUnderTest.isChecked();
            assert(checkBoxTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(checkBoxTOBehaviorUnderTest._getROProperty.firstCall.args,["checked", arguments]);
        });
        it("should convert the returned number to the boolean value",function(){
            checkBoxTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = checkBoxTOBehaviorUnderTest.isChecked();
            assert.strictEqual(res,true);
        });
    });

    describe("set", function(){
        var funcPromise = {
            then: sinon.stub()
        };

        beforeEach(function(){
            checkBoxTOBehaviorUnderTest._executeCommand.returns(funcPromise);
        });

        it("should throw error if no arguments passed",function(){
            assert.throws(function(){
                checkBoxTOBehaviorUnderTest.set();
            });
        });
        it("should call the _executeCommand method and pass it the Set command",function(){
            checkBoxTOBehaviorUnderTest.set(true);
            assert(checkBoxTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.equal(checkBoxTOBehaviorUnderTest._executeCommand.firstCall.args[0], "Set");
        });
        it("should be able to accept a string ('true' and 'false' only) [true]",function(){
            checkBoxTOBehaviorUnderTest.set("true");
            assert.equal(checkBoxTOBehaviorUnderTest._executeCommand.firstCall.args[1], "On");
        });
        it("should be able to accept a string ('true' and 'false' only) [false]",function(){
            checkBoxTOBehaviorUnderTest.set("false");
            assert.equal(checkBoxTOBehaviorUnderTest._executeCommand.firstCall.args[1], "Off");
        });
        it("should throw error if null passed",function(){
            assert.throws(function(){
                checkBoxTOBehaviorUnderTest.set(null);
            });
        });
        it("should return the same promise that was returned from _executeCommand method",function(){
            var promise = {
                then:sinon.stub()
            };
            checkBoxTOBehaviorUnderTest._executeCommand.returns(promise);
            assert.strictEqual(checkBoxTOBehaviorUnderTest.set(true), promise);
        });
    });

});