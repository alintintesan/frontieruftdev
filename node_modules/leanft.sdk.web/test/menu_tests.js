// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/13/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Menu Description",function(){
    var menuDesc = require("../lib/menu.js").Menu;
    var menuDescUnderTest;

    beforeEach(function(){
        menuDescUnderTest = menuDesc();
    });

    describe("topLevelMenuItemsCount method",function() {
        it("should add 'top level items count' to _properties with the correct value when value is given",function(){
            menuDescUnderTest.topLevelMenuItemsCount(5);
            assert.strictEqual(menuDescUnderTest._properties["top level items count"], 5);
        });
        it("should add 'top level items count' to _properties and convert the value to number when value given is string",function(){
            menuDescUnderTest.topLevelMenuItemsCount("5");
            assert.strictEqual(menuDescUnderTest._properties["top level items count"], 5);
        });
        it("should throw error when value given is NaN",function(){
            assert.throws(function(){
                menuDescUnderTest.topLevelMenuItemsCount("5a");
            });
        });
        it("should add 'top level items count' to _properties with the correct value when value is given using property bag",function(){
            menuDescUnderTest = menuDesc({
                topLevelMenuItemsCount: 5
            });
            assert.strictEqual(menuDescUnderTest._properties["top level items count"], 5);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = menuDescUnderTest.topLevelMenuItemsCount(5);
            assert.strictEqual(result, menuDescUnderTest);
        });
        it("should remove 'top level items count' from _properties when value is null",function(){
            menuDescUnderTest._properties["top level items count"] = 5;
            menuDescUnderTest.topLevelMenuItemsCount(null);
            assert(!("top level items count" in menuDescUnderTest._properties));
        });
        it("should return the value of 'top level items count' from _properties when value is not given",function(){
            menuDescUnderTest._properties["top level items count"] = 5;
            var topLevelMenuItemsCount = menuDescUnderTest.topLevelMenuItemsCount();
            assert.equal(topLevelMenuItemsCount, 5);
        });
    });

    describe("topLevelMenuItems method",function() {
        it("should add 'top level items' with correct value when a value is given",function(){
            menuDescUnderTest.topLevelMenuItems(["menu1", "menu2"]);
            assert.strictEqual(menuDescUnderTest._properties["top level items"], "menu1;menu2");
        });
        it("should add 'top level items' with correct value, when value is given using property bag",function(){
            menuDescUnderTest = menuDesc({
                topLevelMenuItems: ["menu1", "menu2"]
            });
            assert.strictEqual(menuDescUnderTest._properties["top level items"], "menu1;menu2");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = menuDescUnderTest.topLevelMenuItems(["menu1", "menu2"]);
            assert.strictEqual(result, menuDescUnderTest);
        });
        it("should remove 'top level items' from _properties when value is null",function(){
            menuDescUnderTest._properties["top level items"] = "menu1;menu2";
            menuDescUnderTest.topLevelMenuItems(null);
            assert(!("top level items" in menuDescUnderTest._properties));
        });
        it("should return the value of 'top level items' from _properties, when value is not given",function(){
            menuDescUnderTest._properties["top level items"] = "menu1;menu2";
            var topLevelMenuItems = menuDescUnderTest.topLevelMenuItems();
            assert.deepEqual(topLevelMenuItems, ["menu1","menu2"]);
        });
        it("should not modify property 'top level items', upon get",function(){
            menuDescUnderTest._properties["top level items"] = "menu1;menu2";
            menuDescUnderTest.topLevelMenuItems();
            assert.strictEqual(menuDescUnderTest._properties["top level items"], "menu1;menu2");
        });
        it("should return value in get, when value is set",function(){
            menuDescUnderTest.topLevelMenuItems(["menu1", "menu2"]);
            var topLevelMenuItems = menuDescUnderTest.topLevelMenuItems();
            assert.deepEqual(topLevelMenuItems, ["menu1","menu2"]);
        });
    });

});

describe("Menu Test Object Behavior",function(){
    var MenuTO = require("../lib/menu.js").MenuTO;
    var menuTOBehaviorUnderTest;

    beforeEach(function(){
        menuTOBehaviorUnderTest = new MenuTO({});
        menuTOBehaviorUnderTest._getROProperty = sinon.stub();
        menuTOBehaviorUnderTest._executeCommand = sinon.stub();
        menuTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        menuTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(menuTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
    });

    describe("topLevelMenuItems",function(){
        it("should query the property 'top level items'",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb("item1;item2");
                }
            };
            menuTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            menuTOBehaviorUnderTest.topLevelMenuItems();
            assert(menuTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(menuTOBehaviorUnderTest._getROProperty.firstCall.args,["top level items", arguments]);
        });

        it("should return 'top level items' an empty array if value is an empty string",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb("");
                }
            };
            menuTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            assert.deepEqual(menuTOBehaviorUnderTest.topLevelMenuItems(), []);
        });

        it("should return 'top level items' an empty array if value is null",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(null);
                }
            };
            menuTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            assert.deepEqual(menuTOBehaviorUnderTest.topLevelMenuItems(), []);
        });

        it("should return 'top level items' value as array if it's not an empty string or null",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb("item1;item2");
                }
            };
            menuTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            assert.deepEqual(menuTOBehaviorUnderTest.topLevelMenuItems(), ["item1", "item2"]);
        });
    });

    describe("select", function(){
        it("should throw error if no arguments passed",function(){
            assert.throws(function(){
                menuTOBehaviorUnderTest.select();
            });
        });
        it("should throw error if null passed",function(){
            assert.throws(function(){
                menuTOBehaviorUnderTest.select(null);
            });
        });
        it("should call the _executeCommand method and pass it the correct parameters when path string passed",function(){
            var funcPromise = {then:sinon.stub()};
            menuTOBehaviorUnderTest._executeCommand.returns(funcPromise);
            menuTOBehaviorUnderTest.select("item");
            assert(menuTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(menuTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,2), ["Select", "item"]);
        });
        it("should return the same promise that was returned from _executeCommand method",function(){
            var promiseMock = {then:sinon.stub()};
            menuTOBehaviorUnderTest._executeCommand.returns(promiseMock);
            var res = menuTOBehaviorUnderTest.select("item");
            assert.strictEqual(res,promiseMock);
        });
    });

    describe("buildMenuPath", function(){
        it("should return empty string if no arguments passed",function(){
            var path = menuTOBehaviorUnderTest.buildMenuPath();
            assert.strictEqual(path, "");
        });
        it("should return string separated by semicolons when n arguments passed",function(){
            var path = menuTOBehaviorUnderTest.buildMenuPath("materials", "liquids", "water", "frozen");
            assert.strictEqual(path, "materials;liquids;water;frozen");
        });
        it("should add a '#' prefix if number passed and return the correct string",function(){
            var path = menuTOBehaviorUnderTest.buildMenuPath("materials", 2, "water", "frozen");
            assert.strictEqual(path, "materials;#2;water;frozen");
        });
   });

    describe("_firstMenuItem method", function() {
        it("should execute _getROProperty 'first item'", function() {
            menuTOBehaviorUnderTest._firstMenuItem();
            assert(menuTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.strictEqual(menuTOBehaviorUnderTest._getROProperty.firstCall.args[0].toLowerCase(),"first item");
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            menuTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = menuTOBehaviorUnderTest._firstMenuItem();
            assert.strictEqual(res, promiseMock);
        });
    });
});
