// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/27/2015.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("NumericField Description",function(){
    var NumericFieldDesc = require("../lib/numeric_field.js").NumericField;
    var numericFieldDescUnderTest;

    beforeEach(function(){
        numericFieldDescUnderTest = NumericFieldDesc();
    });

    describe("value method",function() {
        it("should add 'value' as string to _properties when value is given as number",function(){
            numericFieldDescUnderTest.value(22.333);
            assert.strictEqual(numericFieldDescUnderTest._properties["value"], "22.333");
        });
        it("should add 'value' as string to _properties when value is given as numeric string",function(){
            numericFieldDescUnderTest.value("22.333");
            assert.strictEqual(numericFieldDescUnderTest._properties["value"], "22.333");
        });
        it("should throw error if 'value' passed as a non numeric string",function(){
            assert.throws(function(){
                numericFieldDescUnderTest.value("22.333a");
            });
        });
        it("should add 'value' as string to _properties when value is given as number using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                value: 22.333
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["value"], "22.333");
        });
        it("should add 'value' as string to _properties when value is given as a numeric string using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                value: "22.333"
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["value"], "22.333");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = numericFieldDescUnderTest.value(22.333);
            assert.strictEqual(result, numericFieldDescUnderTest);
        });
        it("should remove 'value' from _properties when value is null",function(){
            numericFieldDescUnderTest._properties["value"] = "22.333";
            numericFieldDescUnderTest.value(null);
            assert(!("value" in numericFieldDescUnderTest._properties));
        });
        it("should return the value of 'value' from _properties when value is not given",function(){
            numericFieldDescUnderTest._properties["value"] = "22.333";
            var value = numericFieldDescUnderTest.value();
            assert.equal(value, 22.333);
        });
    });

    describe("defaultValue method",function() {
        it("should add 'default value' as string to _properties when value is given as number",function(){
            numericFieldDescUnderTest.defaultValue(22.333);
            assert.strictEqual(numericFieldDescUnderTest._properties["default value"], "22.333");
        });
        it("should add 'default value' as string to _properties when value is given as numeric string",function(){
            numericFieldDescUnderTest.defaultValue("22.333");
            assert.strictEqual(numericFieldDescUnderTest._properties["default value"], "22.333");
        });
        it("should throw error if 'default value' passed as a non numeric string",function(){
            assert.throws(function(){
                numericFieldDescUnderTest.defaultValue("22.333a");
            });
        });
        it("should add 'default value' as string to _properties when value is given as number using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                defaultValue: 22.333
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["default value"], "22.333");
        });
        it("should add 'default value' as string to _properties when value is given as a numeric string using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                defaultValue: "22.333"
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["default value"], "22.333");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = numericFieldDescUnderTest.defaultValue(22.333);
            assert.strictEqual(result, numericFieldDescUnderTest);
        });
        it("should remove 'default value' from _properties when value is null",function(){
            numericFieldDescUnderTest._properties["default value"] = "22.333";
            numericFieldDescUnderTest.defaultValue(null);
            assert(!("default value" in numericFieldDescUnderTest._properties));
        });
        it("should return the value of 'default value' from _properties when value is not given",function(){
            numericFieldDescUnderTest._properties["default value"] = "22.333";
            var defaultValue = numericFieldDescUnderTest.defaultValue();
            assert.equal(defaultValue, 22.333);
        });
    });

    describe("min method",function() {
        it("should add 'min' as string to _properties when value is given as number",function(){
            numericFieldDescUnderTest.min(22.333);
            assert.strictEqual(numericFieldDescUnderTest._properties["min"], "22.333");
        });
        it("should add 'min' as string to _properties when value is given as numeric string",function(){
            numericFieldDescUnderTest.min("22.333");
            assert.strictEqual(numericFieldDescUnderTest._properties["min"], "22.333");
        });
        it("should throw error if 'min' passed as a non numeric string",function(){
            assert.throws(function(){
                numericFieldDescUnderTest.min("22.333a");
            });
        });
        it("should add 'min' as string to _properties when value is given as number using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                min: 22.333
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["min"], "22.333");
        });
        it("should add 'min' as string to _properties when value is given as a numeric string using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                min: "22.333"
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["min"], "22.333");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = numericFieldDescUnderTest.min(22.333);
            assert.strictEqual(result, numericFieldDescUnderTest);
        });
        it("should remove 'min' from _properties when value is null",function(){
            numericFieldDescUnderTest._properties["min"] = 22.333;
            numericFieldDescUnderTest.min(null);
            assert(!("min" in numericFieldDescUnderTest._properties));
        });
        it("should return the value of 'min' from _properties when value is not given",function(){
            numericFieldDescUnderTest._properties["min"] = 22.333;
            var min = numericFieldDescUnderTest.min();
            assert.equal(min, 22.333);
        });
    });

    describe("max method",function() {
        it("should add 'max' as string to _properties when value is given as number",function(){
            numericFieldDescUnderTest.max(22.333);
            assert.strictEqual(numericFieldDescUnderTest._properties["max"], "22.333");
        });
        it("should add 'max' as string to _properties when value is given as numeric string",function(){
            numericFieldDescUnderTest.max("22.333");
            assert.strictEqual(numericFieldDescUnderTest._properties["max"], "22.333");
        });
        it("should throw error if 'max' passed as a non numeric string",function(){
            assert.throws(function(){
                numericFieldDescUnderTest.max("22.333a");
            });
        });
        it("should add 'max' as string to _properties when value is given as number using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                max: 22.333
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["max"], "22.333");
        });
        it("should add 'max' as string to _properties when value is given as a numeric string using property bag",function(){
            numericFieldDescUnderTest = NumericFieldDesc({
                max: "22.333"
            });
            assert.strictEqual(numericFieldDescUnderTest._properties["max"], "22.333");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = numericFieldDescUnderTest.max(22.333);
            assert.strictEqual(result, numericFieldDescUnderTest);
        });
        it("should remove 'max' from _properties when value is null",function(){
            numericFieldDescUnderTest._properties["max"] = 22.333;
            numericFieldDescUnderTest.max(null);
            assert(!("max" in numericFieldDescUnderTest._properties));
        });
        it("should return the value of 'max' from _properties when value is not given",function(){
            numericFieldDescUnderTest._properties["max"] = 22.333;
            var max = numericFieldDescUnderTest.max();
            assert.equal(max, 22.333);
        });
    });

});

describe("NumericFieldTO Behavior",function(){
    var NumericFieldTO = require("../lib/numeric_field.js").NumericFieldTO;
    var numericFieldTOBehaviorUnderTest;

    beforeEach(function(){
        numericFieldTOBehaviorUnderTest = NumericFieldTO({});
        sinon.stub(numericFieldTOBehaviorUnderTest, "_getROProperty");
        sinon.stub(numericFieldTOBehaviorUnderTest, "_executeCommand");
        numericFieldTOBehaviorUnderTest._session.fireEvent = sinon.stub();
        numericFieldTOBehaviorUnderTest._session._promiseManager = {wrapPromiseFunctionWithNotifyEvents: function () {} };
        sinon.stub(numericFieldTOBehaviorUnderTest._session._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });

        var promiseMock = {
            then: function(cb) {
                return cb("1.23");
            }
        };
        numericFieldTOBehaviorUnderTest._getROProperty.returns(promiseMock);
    });

    describe("setValue", function(){
        var funcPromise = {
            then: sinon.stub()
        };

        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                numericFieldTOBehaviorUnderTest.setValue();
            });
        });
        it("should throw error if null passed", function(){
            assert.throws(function(){
                numericFieldTOBehaviorUnderTest.setValue(null);
            });
        });
        it("should throw error if a non numeric string passed", function(){
            assert.throws(function(){
                numericFieldTOBehaviorUnderTest.setValue("22.33a");
            });
        });
        it("should call the _executeCommand method and pass it the correct parameters when a number passed",function(){
            numericFieldTOBehaviorUnderTest._executeCommand.returns(funcPromise);
            numericFieldTOBehaviorUnderTest.setValue(22.33);
            assert(numericFieldTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(numericFieldTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,2), ["Set", "22.33"]);
        });
        it("should call the _executeCommand method and pass it the correct parameters when a numeric string passed",function(){
            numericFieldTOBehaviorUnderTest._executeCommand.returns(funcPromise);
            numericFieldTOBehaviorUnderTest.setValue("22.33");
            assert(numericFieldTOBehaviorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(numericFieldTOBehaviorUnderTest._executeCommand.firstCall.args.slice(0,2), ["Set", "22.33"]);
        });
        it("should return the same promise that was returned from _executeCommand method",function(){
            var setPromise = {
                then: sinon.stub()
            };
            numericFieldTOBehaviorUnderTest._executeCommand.returns(setPromise);
            var res = numericFieldTOBehaviorUnderTest.setValue(22.33);
            assert.strictEqual(res,setPromise);
        });
    });
    describe("value",function(){
        it("should query the property 'value'",function(){
            numericFieldTOBehaviorUnderTest.value();
            assert(numericFieldTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(numericFieldTOBehaviorUnderTest._getROProperty.firstCall.args,["value", arguments]);
        });
        it("should return the value as number after promise returned from getROProperty",function(){
            var res = numericFieldTOBehaviorUnderTest.value();
            assert.strictEqual(res, 1.23);
        });
    });
    describe("defaultValue",function(){
        it("should query the property 'default value'",function(){
            numericFieldTOBehaviorUnderTest.defaultValue();
            assert(numericFieldTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(numericFieldTOBehaviorUnderTest._getROProperty.firstCall.args,["default value", arguments]);
        });
        it("should return the value as number after promise returned from getROProperty",function(){
            var res = numericFieldTOBehaviorUnderTest.defaultValue();
            assert.strictEqual(res, 1.23);
        });
    });
    describe("min",function(){
        it("should query the property 'min'",function(){
            numericFieldTOBehaviorUnderTest.min();
            assert(numericFieldTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(numericFieldTOBehaviorUnderTest._getROProperty.firstCall.args,["min", arguments]);
        });
        it("should return the value as number after promise returned from getROProperty",function(){
            var res = numericFieldTOBehaviorUnderTest.min();
            assert.strictEqual(res, 1.23);
        });
    });
    describe("max",function(){
        it("should query the property 'max'",function(){
            numericFieldTOBehaviorUnderTest.max();
            assert(numericFieldTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(numericFieldTOBehaviorUnderTest._getROProperty.firstCall.args,["max", arguments]);
        });
        it("should return the value as number after promise returned from getROProperty",function(){
            var res = numericFieldTOBehaviorUnderTest.max();
            assert.strictEqual(res, 1.23);
        });
    });
    describe("isEnabled",function(){
        var promiseMock = {then: function(cb) {return cb(1);}};
        it("should query the property 'disabled'",function(){
            numericFieldTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            numericFieldTOBehaviorUnderTest.isEnabled();
            assert(numericFieldTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(numericFieldTOBehaviorUnderTest._getROProperty.firstCall.args,["disabled", arguments]);
        });
        it("should convert the returned number to the opposite boolean",function(){
            numericFieldTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = numericFieldTOBehaviorUnderTest.isEnabled();
            assert.strictEqual(res,false);
        });
    });

});


