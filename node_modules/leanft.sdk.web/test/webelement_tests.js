// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var assert = require("assert");
var sinon = require("sinon");
var MouseButton = require("leanft.sdk.core").MouseButton;
var mouseEvent = require("../lib/webelement.js").MouseEvent;
var event = require("../lib/webelement.js").Event;
var Core = require("leanft.sdk.core");
var Location = Core.Location;
var Position = Core.Position;
var SwipeDirection = Core.SwipeDirection;

describe("WebElement Description",function(){
    var WebElementDesc = require("../lib/webelement.js").WebElement;
    var webElementDescUnderTest;

    beforeEach(function(){
        webElementDescUnderTest = WebElementDesc();
    });

    it("should support initialization via property bag",function(){
        webElementDescUnderTest = WebElementDesc({
            css: ".some_class"
        });

        assert.strictEqual(webElementDescUnderTest._properties["css"], ".some_class");
    });

    describe("id method",function() {
        it("should add 'html id' to _properties when value is given",function(){
            webElementDescUnderTest.id("some id");
            assert.strictEqual(webElementDescUnderTest._properties["html id"], "some id");
        });
        it("should add 'html id' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                id: "some id"
            });
            assert.strictEqual(webElementDescUnderTest._properties["html id"], "some id");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.id("some id");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'html id' from _properties when value is null",function(){
            webElementDescUnderTest._properties["html id"] = "some id";
            webElementDescUnderTest.id(null);
            assert(!("html id" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'html id' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["html id"] = "some id";
            var id = webElementDescUnderTest.id();
            assert.equal(id, "some id");
        });
    });

    describe("tagName method",function() {
        it("should add 'html tag' to _properties when value is given",function(){
            webElementDescUnderTest.tagName("some tagName");
            assert.strictEqual(webElementDescUnderTest._properties["html tag"], "some tagName");
        });
        it("should add 'html tag' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                tagName: "some tagName"
            });
            assert.strictEqual(webElementDescUnderTest._properties["html tag"], "some tagName");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.tagName("some tagName");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'html tag' from _properties when value is null",function(){
            webElementDescUnderTest._properties["html tag"] = "some tagName";
            webElementDescUnderTest.tagName(null);
            assert(!("html tag" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'html tag' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["html tag"] = "some tagName";
            var tagName = webElementDescUnderTest.tagName();
            assert.equal(tagName, "some tagName");
        });
    });

    describe("accessibilityName method",function() {
        it("should add 'acc_name' to _properties when value is given",function(){
            webElementDescUnderTest.accessibilityName("some accessibilityName");
            assert.strictEqual(webElementDescUnderTest._properties["acc_name"], "some accessibilityName");
        });
        it("should add 'acc_name' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                accessibilityName: "some accessibilityName"
            });
            assert.strictEqual(webElementDescUnderTest._properties["acc_name"], "some accessibilityName");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.accessibilityName("some accessibilityName");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'acc_name' from _properties when value is null",function(){
            webElementDescUnderTest._properties["acc_name"] = "some accessibilityName";
            webElementDescUnderTest.accessibilityName(null);
            assert(!("acc_name" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'acc_name' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["acc_name"] = "some accessibilityName";
            var accessibilityName = webElementDescUnderTest.accessibilityName();
            assert.equal(accessibilityName, "some accessibilityName");
        });
    });

    describe("name method",function() {
        it("should add 'name' to _properties when value is given",function(){
            webElementDescUnderTest.name("some name");
            assert.strictEqual(webElementDescUnderTest._properties["name"], "some name");
        });
        it("should add 'name' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                name: "some name"
            });
            assert.strictEqual(webElementDescUnderTest._properties["name"], "some name");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.name("some name");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'name' from _properties when value is null",function(){
            webElementDescUnderTest._properties["name"] = "some name";
            webElementDescUnderTest.name(null);
            assert(!("name" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'name' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["name"] = "some name";
            var name = webElementDescUnderTest.name();
            assert.equal(name, "some name");
        });
    });

    describe("className method",function() {
        it("should add 'class' to _properties when value is given",function(){
            webElementDescUnderTest.className("some class");
            assert.strictEqual(webElementDescUnderTest._properties["class"], "some class");
        });
        it("should add 'class' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                className: "some class"
            });
            assert.strictEqual(webElementDescUnderTest._properties["class"], "some class");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.className("some class");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'class' from _properties when value is null",function(){
            webElementDescUnderTest._properties["class"] = "some class";
            webElementDescUnderTest.className(null);
            assert(!("class" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'class' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["class"] = "some class";
            var name = webElementDescUnderTest.className();
            assert.equal(name, "some class");
        });
    });

    describe("innerHTML method",function() {
        it("should add 'innerHTML' to _properties when value is given",function(){
            webElementDescUnderTest.innerHTML("some html");
            assert.strictEqual(webElementDescUnderTest._properties["innerHTML"], "some html");
        });
        it("should add 'innerHTML' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                innerHTML: "some html"
            });
            assert.strictEqual(webElementDescUnderTest._properties["innerHTML"], "some html");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.innerHTML("some html");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'innerHTML' from _properties when value is null",function(){
            webElementDescUnderTest._properties["innerHTML"] = "some html";
            webElementDescUnderTest.innerHTML(null);
            assert(!("innerHTML" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'innerHTML' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["innerHTML"] = "some html";
            var res = webElementDescUnderTest.innerHTML();
            assert.equal(res, "some html");
        });
    });

    describe("outerHTML method",function() {
        it("should add 'outerHTML' to _properties when value is given",function(){
            webElementDescUnderTest.outerHTML("some html");
            assert.strictEqual(webElementDescUnderTest._properties["outerHTML"], "some html");
        });
        it("should add 'outerHTML' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                outerHTML: "some html"
            });
            assert.strictEqual(webElementDescUnderTest._properties["outerHTML"], "some html");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.outerHTML("some html");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'outerHTML' from _properties when value is null",function(){
            webElementDescUnderTest._properties["outerHTML"] = "some html";
            webElementDescUnderTest.outerHTML(null);
            assert(!("outerHTML" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'outerHTML' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["outerHTML"] = "some html";
            var res = webElementDescUnderTest.outerHTML();
            assert.equal(res, "some html");
        });
    });

    describe("innerText method",function() {
        it("should add 'innerText' to _properties when value is given",function(){
            webElementDescUnderTest.innerText("some text");
            assert.strictEqual(webElementDescUnderTest._properties["innerText"], "some text");
        });
        it("should add 'innerText' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                innerText: "some text"
            });
            assert.strictEqual(webElementDescUnderTest._properties["innerText"], "some text");
        });
        it("should return this - builder patternwhen value is given",function(){
            var result = webElementDescUnderTest.innerText("some text");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'innerText' from _properties when value is null",function(){
            webElementDescUnderTest._properties["innerText"] = "some text";
            webElementDescUnderTest.innerText(null);
            assert(!("innerText" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'innerText' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["innerText"] = "some text";
            var res = webElementDescUnderTest.innerText();
            assert.equal(res, "some text");
        });
    });

    describe("outerText method",function() {
        it("should add 'outerText' to _properties when value is given",function(){
            webElementDescUnderTest.outerText("some text");
            assert.strictEqual(webElementDescUnderTest._properties["outerText"], "some text");
        });
        it("should add 'outerText' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                outerText: "some text"
            });
            assert.strictEqual(webElementDescUnderTest._properties["outerText"], "some text");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.outerText("some text");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'outerText' from _properties when value is null",function(){
            webElementDescUnderTest._properties["outerText"] = "some text";
            webElementDescUnderTest.outerText(null);
            assert(!("outerText" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'outerText' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["outerText"] = "some text";
            var res = webElementDescUnderTest.outerText();
            assert.equal(res, "some text");
        });
    });

    describe("title method",function() {
        it("should add 'title' to _properties when value is given",function(){
            webElementDescUnderTest.title("some title");
            assert.strictEqual(webElementDescUnderTest._properties["title"], "some title");
        });
        it("should add 'title' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                title: "some title"
            });
            assert.strictEqual(webElementDescUnderTest._properties["title"], "some title");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.title("some title");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'title' from _properties when value is null",function(){
            webElementDescUnderTest._properties["title"] = "some title";
            webElementDescUnderTest.title(null);
            assert(!("title" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'title' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["title"] = "some title";
            var res = webElementDescUnderTest.title();
            assert.equal(res, "some title");
        });
    });

    describe("isVisible method",function() {
        it("should add 'visible' to _properties when value is given",function(){
            webElementDescUnderTest.isVisible(true);
            assert.strictEqual(webElementDescUnderTest._properties["visible"], true);
        });
        it("should add 'visible' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                isVisible: true
            });
            assert.strictEqual(webElementDescUnderTest._properties["visible"], true);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.isVisible(true);
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'visible' from _properties when value is null",function(){
            webElementDescUnderTest._properties["visible"] = true;
            webElementDescUnderTest.isVisible(null);
            assert(!("visible" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'visible' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["visible"] = true;
            var res = webElementDescUnderTest.isVisible();
            assert.equal(res, true);
        });
    });

    describe("location method", function(){
        it("setter should return this - builder", function() {
            var res = webElementDescUnderTest.location({});

            assert.strictEqual(res,webElementDescUnderTest);
        });
        it("should add x to flatter when only x given", function() {
            webElementDescUnderTest.location({
                x: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["Location"].x, 5);
            assert(!("y" in webElementDescUnderTest._properties["Location"]));
        });
        it("should add y to flatter when only y given", function() {
            webElementDescUnderTest.location({
                y: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["Location"].y, 5);
            assert(!("x" in webElementDescUnderTest._properties["Location"]));
        });

        it("should add x and y to flatter when both x and y given", function() {
            webElementDescUnderTest.location({
                x: 3,
                y: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["Location"].x, 3);
            assert.strictEqual(webElementDescUnderTest._properties["Location"].y, 5);
        });

        it("get after set should have correct values", function() {
            webElementDescUnderTest.location({
                x: 3,
                y: 5
            });

            var res = webElementDescUnderTest.location();

            assert.strictEqual(res.x, 3);
            assert.strictEqual(res.y, 5);
        });

        it("should modify value of x and leave y as is modify value of x after its set", function() {
            webElementDescUnderTest.location({
                x: 3,
                y: 5
            });

            webElementDescUnderTest.location().x = 8;

            assert.strictEqual(webElementDescUnderTest._properties["Location"].x, 8);
            assert.strictEqual(webElementDescUnderTest._properties["Location"].y, 5);
        });

        it("get without set should return an object without x or y but not null", function() {
            var res = webElementDescUnderTest.location();

            assert.notStrictEqual(res, null);
            assert(!("x" in res));
            assert(!("y" in res));
        });

        it("setting x without setting location value, should set the x value on the flatter", function() {
            webElementDescUnderTest.location().x = 5;

            var res = webElementDescUnderTest.location();

            assert.notStrictEqual(res, null);
            assert.strictEqual(res.x, 5);
        });

        it("setting location to null, should not delete it but reset its value", function() {
            webElementDescUnderTest.location(null);

            var res = webElementDescUnderTest.location();

            assert.notStrictEqual(res, null);
            assert(!("x" in res));
            assert(!("y" in res));
        });

        it("should have correct keys map", function() {
            var res = webElementDescUnderTest.location();

            assert.deepEqual(res._keysMap, {
                x: "x",
                y: "y"
            });
        });
    });

    describe("absoluteLocation method", function(){
        it("setter should return this - builder", function() {
            var res = webElementDescUnderTest.absoluteLocation({});

            assert.strictEqual(res,webElementDescUnderTest);
        });
        it("should add x to flatter when only x given", function() {
            webElementDescUnderTest.absoluteLocation({
                x: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["AbsoluteLocation"].x, 5);
            assert(!("y" in webElementDescUnderTest._properties["AbsoluteLocation"]));
        });
        it("should add y to flatter when only y given", function() {
            webElementDescUnderTest.absoluteLocation({
                y: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["AbsoluteLocation"].y, 5);
            assert(!("x" in webElementDescUnderTest._properties["AbsoluteLocation"]));
        });

        it("should add x and y to flatter when both x and y given", function() {
            webElementDescUnderTest.absoluteLocation({
                x: 3,
                y: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["AbsoluteLocation"].x, 3);
            assert.strictEqual(webElementDescUnderTest._properties["AbsoluteLocation"].y, 5);
        });

        it("get after set should have correct values", function() {
            webElementDescUnderTest.absoluteLocation({
                x: 3,
                y: 5
            });

            var res = webElementDescUnderTest.absoluteLocation();

            assert.strictEqual(res.x, 3);
            assert.strictEqual(res.y, 5);
        });

        it("modify value of x after its set, should modify value of x and leave y as is", function() {
            webElementDescUnderTest.absoluteLocation({
                x: 3,
                y: 5
            });

            webElementDescUnderTest.absoluteLocation().x = 8;

            assert.strictEqual(webElementDescUnderTest._properties["AbsoluteLocation"].x, 8);
            assert.strictEqual(webElementDescUnderTest._properties["AbsoluteLocation"].y, 5);
        });

        it("get without set should return an object without x or y but not null", function() {
            var res = webElementDescUnderTest.absoluteLocation();

            assert.notStrictEqual(res, null);
            assert(!("x" in res));
            assert(!("y" in res));
        });

        it("setting x without setting absoluteLocation value, should set the x value on the flatter", function() {
            webElementDescUnderTest.absoluteLocation().x = 5;

            var res = webElementDescUnderTest.absoluteLocation();

            assert.notStrictEqual(res, null);
            assert.strictEqual(res.x, 5);
        });

        it("setting absoluteLocation to null, should not delete it but reset its value", function() {
            webElementDescUnderTest.absoluteLocation(null);

            var res = webElementDescUnderTest.absoluteLocation();

            assert.notStrictEqual(res, null);
            assert(!("x" in res));
            assert(!("y" in res));
        });

        it("should have correct keys map", function() {
            var res = webElementDescUnderTest.absoluteLocation();

            assert.deepEqual(res._keysMap, {
                x: "abs_x",
                y: "abs_y"
            });
        });
    });

    describe("size method", function(){
        it("setter should return this - builder", function() {
            var res = webElementDescUnderTest.size({});

            assert.strictEqual(res,webElementDescUnderTest);
        });
        it("should add width to flatter when only width given", function() {
            webElementDescUnderTest.size({
                width: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["Size"].width, 5);
            assert(!("height" in webElementDescUnderTest._properties["Size"]));
        });
        it("should add height to flatter when only height given", function() {
            webElementDescUnderTest.size({
                height: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["Size"].height, 5);
            assert(!("width" in webElementDescUnderTest._properties["Size"]));
        });

        it("should add width and height to flatter when both width and height given", function() {
            webElementDescUnderTest.size({
                width: 3,
                height: 5
            });

            assert.strictEqual(webElementDescUnderTest._properties["Size"].width, 3);
            assert.strictEqual(webElementDescUnderTest._properties["Size"].height, 5);
        });

        it("get after set should have correct values", function() {
            webElementDescUnderTest.size({
                width: 3,
                height: 5
            });

            var res = webElementDescUnderTest.size();

            assert.strictEqual(res.width, 3);
            assert.strictEqual(res.height, 5);
        });

        it("modify value of width after its set, should modify value of width and leave height as is", function() {
            webElementDescUnderTest.size({
                width: 3,
                height: 5
            });

            webElementDescUnderTest.size().width = 8;

            assert.strictEqual(webElementDescUnderTest._properties["Size"].width, 8);
            assert.strictEqual(webElementDescUnderTest._properties["Size"].height, 5);
        });

        it("get without set should return an object without width or height but not null", function() {
            var res = webElementDescUnderTest.size();

            assert.notStrictEqual(res, null);
            assert(!("width" in res));
            assert(!("height" in res));
        });

        it("setting width without setting size value, should set the width value on the flatter", function() {
            webElementDescUnderTest.size().width = 5;

            var res = webElementDescUnderTest.size();

            assert.notStrictEqual(res, null);
            assert.strictEqual(res.width, 5);
        });

        it("setting size to null, should not delete it but reset its value", function() {
            webElementDescUnderTest.size(null);

            var res = webElementDescUnderTest.size();

            assert.notStrictEqual(res, null);
            assert(!("width" in res));
            assert(!("height" in res));
        });

        it("should have correct keys map", function() {
            var res = webElementDescUnderTest.size();

            assert.deepEqual(res._keysMap, {
                width: "width",
                height: "height"
            });
        });
    });

    describe("attributes method", function() {
        it("get without set should return an object without keys except keys starting with '_'", function() {
            var res = webElementDescUnderTest.attributes();

            assert.notStrictEqual(res, null);
            assert.strictEqual(Object.keys(res).filter(function (v) {
                return v[0] !== "_";
            }).length, 0);
        });

        it("should have correct prefix", function() {
            var res = webElementDescUnderTest.attributes();

            assert.strictEqual(res._keyPrefix, "attribute/");
        });

        it("setting to null, should not delete it but reset its value", function() {
            webElementDescUnderTest.attributes(null);

            var res = webElementDescUnderTest.attributes();

            assert.notStrictEqual(res, null);
            assert.strictEqual(Object.keys(res).filter(function (v) {
                return v[0] !== "_";
            }).length, 0);
            assert.strictEqual(res._keyPrefix, "attribute/");
        });

        it("setter should return this - builder", function() {
            var res = webElementDescUnderTest.attributes({});

            assert.strictEqual(res,webElementDescUnderTest);
        });

        it("getter should return the flatter as is", function() {
            webElementDescUnderTest.attributes({
                key: "value"
            });

            var res = webElementDescUnderTest.attributes();

            assert.strictEqual(res, webElementDescUnderTest._properties["Attributes"]);
        });
    });

    describe("styles method", function() {
        it("get without set should return an object without keys except keys starting with '_'", function() {
            var res = webElementDescUnderTest.styles();

            assert.notStrictEqual(res, null);
            assert.strictEqual(Object.keys(res).filter(function (v) {
                return v[0] !== "_";
            }).length, 0);
        });

        it("should have correct prefix", function() {
            var res = webElementDescUnderTest.styles();

            assert.strictEqual(res._keyPrefix, "style/");
        });

        it("setting to null, should not delete it but reset its value", function() {
            webElementDescUnderTest.styles(null);

            var res = webElementDescUnderTest.styles();

            assert.notStrictEqual(res, null);
            assert.strictEqual(Object.keys(res).filter(function (v) {
                return v[0] !== "_";
            }).length, 0);
            assert.strictEqual(res._keyPrefix, "style/");
        });

        it("setter should return this - builder", function() {
            var res = webElementDescUnderTest.styles({});

            assert.strictEqual(res,webElementDescUnderTest);
        });

        it("getter should return the flatter as is", function() {
            webElementDescUnderTest.styles({
                key: "value"
            });

            var res = webElementDescUnderTest.styles();

            assert.strictEqual(res, webElementDescUnderTest._properties["Style"]);
        });
    });

    describe("role method",function() {
        it("should add 'role' to _properties when value is given",function(){
            webElementDescUnderTest.role("some role");
            assert.strictEqual(webElementDescUnderTest._properties["role"], "some role");
        });
        it("should add 'role' to _properties when value is given using property bag",function(){
            webElementDescUnderTest = WebElementDesc({
                role: "some role"
            });
            assert.strictEqual(webElementDescUnderTest._properties["role"], "some role");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = webElementDescUnderTest.role("some role");
            assert.strictEqual(result, webElementDescUnderTest);
        });
        it("should remove 'role' from _properties when value is null",function(){
            webElementDescUnderTest._properties["role"] = "some role";
            webElementDescUnderTest.role(null);
            assert(!("role" in webElementDescUnderTest._properties));
        });
        it("should return the value of 'role' from _properties when value is not given",function(){
            webElementDescUnderTest._properties["role"] = "some role";
            var role = webElementDescUnderTest.role();
            assert.equal(role, "some role");
        });
    });
});

describe("WebElement Test Object",function() {
    var WebElementTO = require("../lib/webelement.js").WebElementTO;
    var webElementUnderTest = null;
    beforeEach(function () {
        webElementUnderTest = new WebElementTO();
        webElementUnderTest._executeCommand = sinon.stub();
        webElementUnderTest._getROProperty = sinon.stub();
    });

    describe("click method",function() {
        it("assert click method is supported",function(){
            assert('click' in webElementUnderTest);
        });
    });

    describe("fireEvent method", function(){
        it("should pass _executeCommand the correct parameters when an Event is passed",function(){
            webElementUnderTest.fireEvent({type: "onclick"});
            assert(webElementUnderTest._executeCommand.calledOnce);
            assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 3);
            assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,2), ["FireEvent", "onclick"]);
        });
        it("should pass _executeCommand the correct parameters when MouseEvent was passed",function(){
            var expectedLocation = {
                Type: "Location",
                Offset: {
                    x: 5,
                    y: 5
                },
                Anchor: "TopLeft"
            };
            webElementUnderTest.fireEvent({
                type: "onclick",
                button: "left",
                location: expectedLocation
            });
            assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 5);
            assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args[0], "FireEvent");
            assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args[1], "onclick");
            assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args[2], expectedLocation);
            assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args[3], MouseButton._convert("left"));
        });
    });

    describe("Event Class", function(){
        it("should throw error if type not passed",function(){
            assert.throws(function(){
                new event();
            });
        });
	it("should throw error if type passed is not a string",function(){
            assert.throws(function(){
                new event({});
            });
        });
        it("should add 'on' prefix to event type",function(){
            var e = new event("click");
            assert.strictEqual(e.type, "onclick");
        });
    });
    describe("MouseEvent Class", function(){
        var argsObj = {
            button: "left",
            anchor: "TopLeft",
            offset: {
                x: 5,
                y: 5
            }
        };
        it("should throw error if type not passed",function(){
            assert.throws(function(){
                new mouseEvent();
            });
        });
	it("should throw error if type passed is not string",function(){
            assert.throws(function(){
                new mouseEvent({});
            });
        });
        it("should set the correct properties for the instance when obj passed",function(){
            var mouse_event = new mouseEvent("keydown", argsObj);
            assert.strictEqual(mouse_event.type, "onkeydown");
            assert.strictEqual(mouse_event.button, "left");
            assert.deepEqual(mouse_event.location, {
                Type: "Location",
                Offset: {
                    Type: "Point",
                    X: 5,
                    Y: 5
                },
                Anchor: 0
            });
        });
        it("should set the correct properties for the instance when obj not passed",function(){
            var mouse_event = new mouseEvent("keydown");
            assert.strictEqual(mouse_event.type, "onkeydown");
            assert.strictEqual(mouse_event.button, "left");
            assert.deepEqual(mouse_event.location, {
                Type: "Location",
                Offset: {
                    Type: "Point",
                    X: 0,
                    Y: 0
                },
                Anchor: 2
            });
        });
    });

    describe("css method",function() {
        it("should execute _getROProperty 'css'",function(){
            webElementUnderTest.css();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"css");
        });
    });

    describe("xpath method",function() {
        it("should execute _getROProperty 'xpath'",function(){
            webElementUnderTest.xpath();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"xpath");
        });
    });

    describe("accessibilityName method",function() {
        it("should execute _getROProperty 'accessibilityName'",function(){
            webElementUnderTest.accessibilityName();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"acc_name");
        });
    });

    describe("id method",function() {
        it("should execute _getROProperty 'html id'",function(){
            webElementUnderTest.id();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"html id");
        });
    });

    describe("tagName method",function() {
        it("should execute _getROProperty 'html tag'",function(){
            webElementUnderTest.tagName();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"html tag");
        });
    });

    describe("name method",function() {
        it("should execute _getROProperty 'name'",function(){
            webElementUnderTest.name();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"name");
        });
    });

    describe("className method",function() {
        it("should execute _getROProperty 'class'",function(){
            webElementUnderTest.className();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"class");
        });
    });

    describe("innerHTML method",function() {
        it("should execute _getROProperty 'innerHTML'",function(){
            webElementUnderTest.innerHTML();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"innerHTML");
        });
    });

    describe("outerHTML method",function() {
        it("should execute _getROProperty 'outerHTML'",function(){
            webElementUnderTest.outerHTML();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"outerHTML");
        });
    });

    describe("innerText method",function() {
        it("should execute _getROProperty 'innerText'",function(){
            webElementUnderTest.innerText();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"innerText");
        });
    });

    describe("outerText method",function() {
        it("should execute _getROProperty 'outerText'",function(){
            webElementUnderTest.outerText();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"outerText");
        });
    });

    describe("title method",function() {
        it("should execute _getROProperty 'title'",function(){
            webElementUnderTest.title();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"title");
        });
    });

    describe("isVisible method",function() {
        it("should execute _getROProperty 'visible'",function(){
            webElementUnderTest.isVisible();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"visible");
        });
    });

    describe("attributes method", function() {
        it("should execute _getROProperty 'all attributes'", function() {
            var promiseMock = {
                then: function(){}
            };
            webElementUnderTest._getROProperty.returns(promiseMock);
            webElementUnderTest.attributes();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"all attributes");
        });
        it("should parse the returned value into key value pairs correctly", function() {
            var promiseMock = {then: function(cb){
                return cb("attr1;;val1;;attr2;;val2");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.attributes();
            var expected = {
                attr1: "val1",
                attr2: "val2"
            };

            assert.deepEqual(res, expected);
        });
        it("should return empty object if _getROProperty returns null", function() {
            var promiseMock = {then: function(cb){
                return cb(null);
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.attributes();
            assert.deepEqual(res, {});
        });
        it("should return empty object if _getROProperty returns white space", function() {
            var promiseMock = {then: function(cb){
                return cb(" ");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.attributes();
            assert.deepEqual(res, {});
        });
    });

    describe("styles method", function() {
        it("should execute _getROProperty 'all styles'", function() {
            var promiseMock = {then: function(){}};
            webElementUnderTest._getROProperty.returns(promiseMock);
            webElementUnderTest.styles();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"all styles");
        });
        it("should parse the returned value into key value pairs correctly", function() {
            var promiseMock = {then: function(cb){
                return cb("display;;none;;color;;blue");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.styles();

            var expected = {
                display: "none",
                color: "blue"
            };

            assert.deepEqual(res, expected);
        });
        it("should move the prefix ';' to the end of the previous token when delimited with more then two instances of ';' (e.g. ';;;')", function() {
            var promiseMock = {then: function(cb){
                return cb("display;;none;;;color;;blue");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.styles();

            var expected = {
                display: "none;",
                color: "blue"
            };

            assert.deepEqual(res, expected);
        });
        it("should set value as empty string if no string passed between two delimiters (e.g. ';;;;')", function() {
            var promiseMock = {then: function(cb){
                return cb("display;;;;color;;blue");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.styles();

            var expected = {
                display: "",
                color: "blue"
            };

            assert.deepEqual(res, expected);
        });
        it("should return empty object if _getROProperty returns null", function() {
            var promiseMock = {then: function(cb){
                return cb(null);
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.styles();
            assert.deepEqual(res, {});
        });
        it("should return empty object if _getROProperty returns white space", function() {
            var promiseMock = {then: function(cb){
                return cb("    ");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.styles();
            assert.deepEqual(res, {});
        });
    });

    describe("getAttribute method", function() {
        it("should execute _getROProperty with attribute/ prefix", function() {
            var promiseMock = {then: function(){}};
            webElementUnderTest._getROProperty.returns(promiseMock);
            webElementUnderTest.getAttribute("SomeName");
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"attribute/SomeName");
        });
        it("should return null if _getROProperty returns null", function() {
            var promiseMock = {then: function(cb){
                return cb(null);
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.getAttribute("SomeName");
            assert.equal(res, null);
        });
        it("should return empty string if _getROProperty returns a boolean", function() {
            var promiseMock = {then: function(cb){
                return cb(true);
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.getAttribute("SomeName");
            assert.equal(res, "");
        });
        it("should return null if _getROProperty returns empty string", function() {
            var promiseMock = {then: function(cb){
                return cb("");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.getAttribute("SomeName");
            assert.equal(res, null);
        });
        it("should return the value from _getROProperty", function() {
            var promiseMock = {then: function(cb){
                return cb("aaa");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.getAttribute("SomeName");
            assert.equal(res, "aaa");
        });
    });

    describe("getComputedStyle method", function() {
        it("should execute _getROProperty with style/ prefix", function() {
            var promiseMock = {then: function(){}};
            webElementUnderTest._getROProperty.returns(promiseMock);
            webElementUnderTest.getComputedStyle("SomeName");
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0],"style/SomeName");
        });
        it("should return null if _getROProperty returns empty string", function() {
            var promiseMock = {then: function(cb){
                return cb("");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.getComputedStyle("SomeName");
            assert.equal(res, null);
        });
        it("should return the value from _getROProperty", function() {
            var promiseMock = {then: function(cb){
                return cb("aaa");
            }};
            webElementUnderTest._getROProperty.returns(promiseMock);
            var res = webElementUnderTest.getComputedStyle("SomeName");
            assert.equal(res, "aaa");
        });
    });

    describe("role method",function() {
        it("should execute _getROProperty 'role'",function(){
            webElementUnderTest.role();
            assert(webElementUnderTest._getROProperty.calledOnce);
            assert.equal(webElementUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"role");
        });
    });

    describe("nativeObject", function() {
        it("should call executeCommand with Object", function() {
            webElementUnderTest.nativeObject();
            assert(webElementUnderTest._executeCommand.calledOnce);
            assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.slice(0,1), ["Object"]);
        });

        it("should return promise returned from executeCommand", function() {
            var promiseMock = {a:"aa"};
            webElementUnderTest._executeCommand.returns(promiseMock);

            var res = webElementUnderTest.nativeObject();

            assert.strictEqual(res, promiseMock);
        });
    });

    describe("touch operations", function(){

        describe("doubleClick method", function() {

            it("should be supported in WebElement",function(){
                assert('doubleClick' in webElementUnderTest);
            });

            it("should pass _executeCommand the correct parameters when called with no args",function(){
                webElementUnderTest.doubleClick();
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 2);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,1), ["DoubleClick"]);
            });

            it("should pass _executeCommand the correct parameters when called with VALID args",function(){
                var webDblClkArgs = {
                    interval : "3",
                    location : {
                        offset: {
                            x: 10,
                            y: "17"
                        },
                        anchor: Position.bottomRight
                    }
                }

                webElementUnderTest.doubleClick(webDblClkArgs);
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 4);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,3), ["DoubleClick", 3, {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 10,
                        Y: 17},
                    Anchor: Position._convert(Position.bottomRight)
                }]);
            });

            it("should pass _executeCommand the correct parameters when called with DEFAULT args",function() {
                webElementUnderTest.doubleClick({});
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 4);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,3), ["DoubleClick", 0.2, {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 0,
                        Y: 0},
                    Anchor: Position._convert(Position.center)
                }]);
            });
        });

        describe("hoverTap method",function() {

            it("should be supported in WebElement",function(){
                assert('hoverTap' in webElementUnderTest);
            });

            it("should pass _executeCommand the correct parameters when called with no args",function(){
                webElementUnderTest.hoverTap();
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 2);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,1), ["HoverTap"]);
            });

            it("should pass _executeCommand the correct parameters when called with Location",function(){
                var expectedLocation = {
                    offset: {
                        x: "5",
                        y: 5
                    },
                    anchor: Position.center // center after conversion
                };

                webElementUnderTest.hoverTap(expectedLocation);
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 3);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,2), ["HoverTap", {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 5,
                        Y: 5},
                    Anchor: Position._convert(Position.center)
                }]);
            });
        });

        describe("longPress method", function() {

            it("should be supported in WebElement",function(){
                assert('longPress' in webElementUnderTest);
            });

            it("should pass _executeCommand the correct parameters when called with NO args",function(){
                webElementUnderTest.longPress();
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 2);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,1), ["LongPress"]);
            });

            it("should pass _executeCommand the correct parameters when called with DEFAULT args",function(){
                webElementUnderTest.longPress({});
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 4);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,3), ["LongPress", 0.25, {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 0,
                        Y: 0},
                    Anchor: Position._convert(Position.center)
                }]);
            });

            it("should pass _executeCommand the correct parameters when called with VALID args",function() {
                var webLongPressArgs = {
                    duration : "3",
                    location : {
                        offset: {
                            x: 10,
                            y: "17"
                        },
                        anchor: Position.bottomRight
                    }
                }

                webElementUnderTest.longPress(webLongPressArgs);
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 4);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,3), ["LongPress", 3, {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 10,
                        Y: 17},
                    Anchor: Position._convert(Position.bottomRight)
                }]);
            });
        });

        describe("pinch method", function() {

            it("should be supported in WebElement", function(){
                assert('pinch' in webElementUnderTest);
            });

            it("should fail in case scale is not provided", function(){
                assert.throws( function() { webElementUnderTest.pinch(); }, Error);
            });

            it("should pass _executeCommand the correct parameters when called with scale only",function(){
                webElementUnderTest.pinch("0.5");
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 3);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,2), ["Pinch", 0.5]);
            });

            it("should pass _executeCommand the correct parameters when called with scale and pinchArgs defaults",function(){

                webElementUnderTest.pinch(0.5, { kuku: 23});
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 5);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,4), ["Pinch", 0.5, 1, {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 0,
                        Y: 0},
                    Anchor: Position._convert(Position.center)
                } ]);
            });

            it("should pass _executeCommand the correct parameters when called with scale and pinchArgs",function(){

                var webPinchArgs = {
                    duration: "2",
                    location: {
                        offset: {
                            x: 10,
                            y: 5
                        },
                        anchor: Position.bottomRight // center after conversion
                    }
                };

                webElementUnderTest.pinch(0.5, webPinchArgs);
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 5);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,4), ["Pinch", 0.5, 2, {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 10,
                        Y: 5},
                    Anchor: Position._convert(Position.bottomRight)
                } ]);
            });
        });

        describe("pan methods: ", function() {

            it("'pan' should be supported in WebElement",function(){
                assert('pan' in webElementUnderTest);
            });

            it("'pan' should pass _executeCommand the correct parameters when called without additional args",function(){
                webElementUnderTest.pan("2", 3);
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 4);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,3), ["Pan", 2, 3]);
            });

            it("'pan' should pass _executeCommand the correct parameters when called with VALID args",function(){

                var webPanArgs = {
                    duration: "3",
                    location : {
                        offset: {
                            x: "10",
                            y: 17
                        },
                        anchor: Position.bottomRight
                    },
                };

                webElementUnderTest.pan("7", 9, webPanArgs);
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 6);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,5), ["Pan", 7, 9, 3, {
                    Type: "Location",
                    Offset: {Type: "Point",
                        X: 10,
                        Y: 17},
                    Anchor: Position._convert(Position.bottomRight)
                }]);
            });

            it("'pan' should pass _executeCommand the correct parameters when called with DEFAULT args",function(){

                webElementUnderTest.pan(10, "11", {});
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 6);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,5),
                    [
                        "Pan",
                        10,
                        11,
                        0.5,
                        {
                            Type: "Location",
                            Offset: {
                                Type: "Point",
                                X: 0,
                                Y: 0
                            },
                            Anchor: Position._convert(Position.center)
                        }
                    ]
                );
            });
        });

        describe("swipe method", function () {
            var downEnumValue = 3;
            it("should be supported in WebElement",function(){
                assert('swipe' in webElementUnderTest);
            });

            it("should fail in case NO arguments are passed", function(){
                assert.throws( function() { webElementUnderTest.swipe(); }, Error );
            });

            it("should pass _executeCommand the correct parameters when called with direction only", function(){
                webElementUnderTest.swipe(SwipeDirection.down);
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 3);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,2),
                    ["Swipe", downEnumValue]);

            });

            it("should pass _executeCommand the correct parameters when called with DEFAULT args", function(){

                webElementUnderTest.swipe(SwipeDirection.down, { });
                assert(webElementUnderTest._executeCommand.calledOnce);
                assert.strictEqual(webElementUnderTest._executeCommand.firstCall.args.length, 6);
                assert.deepEqual(webElementUnderTest._executeCommand.firstCall.args.splice(0,5),
                    [
                        "Swipe",
                        downEnumValue,
                        200, // the default distance
                        0.25, // the default duration
                        {
                            Type: "Location",
                            Offset: {Type: "Point",
                                X: 0,
                                Y: 0},
                            Anchor: Position._convert(Position.center)
                        }
                    ]);
            });

        });
    });

});