// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 26/11/2015.
 * Holds the unittests for the web test object base test object and description.
 */

var assert = require("assert");
var sinon = require("sinon");
var WebBaseTO = require("../lib/web_testobject_base.js").WebBaseTestObject;

describe("WebBase Test Object",function(){
   var testObjUnderTest;
    beforeEach(function(){
        testObjUnderTest = new WebBaseTO();
    });

    describe("$x - describe by xpath",function(){
        beforeEach(function(){
            sinon.stub(testObjUnderTest,"$");
        });

        it("should add the given xpath to the given description",function(){
            var desc = {
                xpath: sinon.spy()
            };

            testObjUnderTest.$x("some path",desc);

            assert(desc.xpath.calledOnce);
            assert.deepEqual(desc.xpath.firstCall.args,["some path"]);
            assert(testObjUnderTest.$.calledOnce);
            assert.deepEqual(testObjUnderTest.$.firstCall.args[0],desc);
        });

        it("should create web element description in case no type is provided",function(){
            testObjUnderTest.$x("some path");

            var actualDesc = testObjUnderTest.$.firstCall.args[0];
            assert.equal(actualDesc.leanFTType.leanftType.toLowerCase(),"webelement");
        });

        it("should throw in case the xpath is null",function(){
            assert.throws(function(){
                testObjUnderTest.$x(null);
            });
        });
    });

    describe("$$ - find children method", function(){
        beforeEach(function(){
            sinon.stub(testObjUnderTest.__super, "$$");
        });

        afterEach(function(){
            testObjUnderTest.__super.$$.restore();
        });

        it("should call __super.$$ with css web element description in case string is provided", function(){
            var testPath = "some path";
            testObjUnderTest.$$(testPath);
            sinon.assert.calledWith(testObjUnderTest.__super.$$, testObjUnderTest._genericDesc({css: testPath}));
        });

        it("should call __super.$$ with a generic description in case a property bag is passed", function(){
            testObjUnderTest.$$({innerText: "value"});
            sinon.assert.calledWith(testObjUnderTest.__super.$$, testObjUnderTest._genericDesc({innerText: "value"}));
        });

        it("should call __super.$$ with forward description with leanFTType to base as is", function(){
            var testObj = {leanFTType: {}, someKey:"value"};
            testObjUnderTest.$$(testObj);
            sinon.assert.calledOnce(testObjUnderTest.__super.$$);
            sinon.assert.calledWith(testObjUnderTest.__super.$$, {leanFTType: {}, someKey:"value"});
        });

       [{leanFTType: {}, someKey: "value"}, {innerText: "val"}, "some object"].forEach(function(testIn){
               it("should return the same value that was returned from the base class", function(){
                   var testRet = "koko";
                   testObjUnderTest.__super.$$.returns(testRet);
                   var res = testObjUnderTest.$$(testIn);
                   assert.equal(res, testRet);
               });
           });

        it("should throw an exception in case null is provided as selector", function(){
            assert.throws(function(){
                testObjUnderTest.$$(null);
            });
         });

         it("should throw an exception in case undefined is provided as selector", function(){
            assert.throws(function(){
                testObjUnderTest.$$();
            });
         });

    });

    describe("$ - describe method",function(){
        beforeEach(function(){
            sinon.stub(testObjUnderTest.__super,"$");
        });

        describe("description as selector",function(){
            it("should forward the call to the base",function(){
                testObjUnderTest.$({leanFTType: {},someKey:"value"});
                assert(testObjUnderTest.__super.$.calledOnce);
                assert.deepEqual(testObjUnderTest.__super.$.firstCall.args,[{leanFTType:{} ,someKey:"value"}]);
            });

            it("should return the same value that was returned from the base class",function(){
                testObjUnderTest.__super.$.returns("koko");
                var res = testObjUnderTest.$({leanFTType: {},someKey: "value"});

                assert.equal(res,"koko");
            });

            it("should create a generic description in case a property bag is passed",function(){
                var propBag = {key:"val"};
                var desc = {key2: "value2"};
                testObjUnderTest._genericDesc = sinon.stub().returns(desc);

                testObjUnderTest.$(propBag);

                assert(testObjUnderTest._genericDesc.calledOnce);
                assert.deepEqual(testObjUnderTest._genericDesc.firstCall.args[0],propBag);
                assert(testObjUnderTest.__super.$.calledOnce);
                assert.deepEqual(testObjUnderTest.__super.$.firstCall.args,[desc]);
            });

        });

        describe("CSS selector",function(){
            it("should add the given css to the given description",function(){
                var desc = {
                    css: sinon.spy()
                };

                testObjUnderTest.$("some path",desc);

                assert(desc.css.calledOnce);
                assert.deepEqual(desc.css.firstCall.args,["some path"]);
                //assert(testObjUnderTest.__super.$.calledOnce);
                //assert.deepEqual(testObjUnderTest.__super.$.firstCall.args[0],desc);
            });

            it("should create web element description in case no type is provided",function(){
                testObjUnderTest.$("some path");

                var actualDesc = testObjUnderTest.__super.$.firstCall.args[0];
                assert.equal(actualDesc.leanFTType.leanftType.toLowerCase(),"webelement");
            });
        });


        it("should throw an exception in case null is provided as selector",function(){
            assert.throws(function(){
               testObjUnderTest.$(null);
            });
        });

        afterEach(function(){
            testObjUnderTest.__super.$.restore();
        });

    });

});
