// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var assert = require("assert");
var sinon = require("sinon");

var WebFactory = require("../lib/web_factory.js").WebFactory;


describe("WebFactory", function () {
    var webFactoryUnderTest;
    var sessionMock;

    beforeEach(function () {
        sessionMock = {
            factory: {
                create: sinon.stub().returns({}) //needed to enable creating of browser, which calls '$' to describe the page
            }
        };
        webFactoryUnderTest = new WebFactory({});
    });

    describe("all test objects tests", function () {
        it("should have waitUntilEnabled function if they have isEnabled function", function () {
            Object.keys(webFactoryUnderTest._constructors).forEach(function(type) {
               var constructor =  webFactoryUnderTest._constructors[type];
               var testObject = new constructor(sessionMock, null);

               if(testObject.isEnabled) {
                   assert(testObject.waitUntilEnabled, "testObject: " + type + " does not have waitUntilEnabled");
               }
            });
        });

        it("should have waitUntilVisible function if they have isVisible function", function () {
            Object.keys(webFactoryUnderTest._constructors).forEach(function(type) {
                var constructor =  webFactoryUnderTest._constructors[type];
                var testObject = new constructor(sessionMock, null);

                if(testObject.isVisible) {
                    assert(testObject.waitUntilVisible, "testObject: " + type + " does not have waitUntilEnabled");
                }
            });
        });
    });

});