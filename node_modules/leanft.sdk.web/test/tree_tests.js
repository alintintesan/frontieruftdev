// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 23/12/2015.
 * Holds the tree's unittests.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("TreeView Description",function() {
    var TreeDesc = require("../lib/tree.js").TreeView;
    var treeDescriptionUnderTest;

    beforeEach(function () {
        treeDescriptionUnderTest = TreeDesc({});
    });

    it("should support initialization via property bag",function(){
        treeDescriptionUnderTest = TreeDesc({
            css: ".some_class"
        });

        assert.strictEqual(treeDescriptionUnderTest._properties["css"], ".some_class");
    });

    describe("selectedNode method",function() {
        it("should add 'selection' to _properties when value is given",function(){
            treeDescriptionUnderTest.selectedNode("some node");
            assert.strictEqual(treeDescriptionUnderTest._properties["selection"], "some node");
        });

        it("should add 'selection' to _properties when value is given using property bag",function(){
            treeDescriptionUnderTest = TreeDesc({
                selectedNode: "some node"
            });
            assert.strictEqual(treeDescriptionUnderTest._properties["selection"], "some node");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = treeDescriptionUnderTest.selectedNode("some node");
            assert.strictEqual(result, treeDescriptionUnderTest);
        });
        it("should remove 'selection' from _properties when value is null",function(){
            treeDescriptionUnderTest._properties["selection"] = "some node";
            treeDescriptionUnderTest.selectedNode(null);
            assert(!("selection" in treeDescriptionUnderTest._properties));
        });
        it("should return the value of 'selection' from _properties when value is not given",function(){
            treeDescriptionUnderTest._properties["selection"] = "some node";
            var node = treeDescriptionUnderTest.selectedNode();
            assert.strictEqual(node, "some node");
        });
    });
});

describe("TreeView Test Object",function() {
    var TreeTO = require("../lib/tree.js").TreeTO;
    var treeTestObjUnderTest = null;
    var configurations = [
                {
                    configToSet:null,
                    expected:{selector:null,expander:null,collapser:null,forceExpandWithDoubleClick:false}
                }, 
                {
                    configToSet:{},
                    expected:{selector:null,expander:null,collapser:null,forceExpandWithDoubleClick:false}
                }, 
                {
                    configToSet:{expander:"expandCollapseXpath"},
                    expected:{selector:null,expander:"expandCollapseXpath",collapser:"expandCollapseXpath",forceExpandWithDoubleClick:false}
                }, 
                {
                    configToSet:{collapser:"collapseXpath"},
                    expected:{selector:null,expander:null,collapser:"collapseXpath",forceExpandWithDoubleClick:false}
                }, 
                {
                    configToSet:{expander:"expandXpath",collapser:"collapseXpath"},
                    expected:{selector:null,expander:"expandXpath",collapser:"collapseXpath",forceExpandWithDoubleClick:false}
                }, 
                {
                    configToSet:{selector:"selectXpath"},
                    expected:{selector:"selectXpath",expander:null,collapser:null,forceExpandWithDoubleClick:false}
                }, 
                {
                    configToSet:{selector:"selectXpath",expander:"expandCollapseXpath"},
                    expected:{selector:"selectXpath",expander:"expandCollapseXpath",collapser:"expandCollapseXpath",forceExpandWithDoubleClick:false}
                }, 
                {
                    configToSet:{selector:"selectXpath",collapser:"collapseXpath"},
                    expected:{selector:"selectXpath",expander:null,collapser:"collapseXpath",forceExpandWithDoubleClick:false}
                }, 
                {
                    configToSet:{selector:"selectXpath",expander:"expandXpath",collapser:"collapseXpath"},
                    expected:{selector:"selectXpath",expander:"expandXpath",collapser:"collapseXpath",forceExpandWithDoubleClick:false}
                }, 

                {
                    configToSet:{forceExpandWithDoubleClick:true},
                    expected:{selector:null,expander:null,collapser:null,forceExpandWithDoubleClick:true}
                }, 
                {
                    configToSet:{expander:"expandCollapseXpath",forceExpandWithDoubleClick:true},
                    expected:{selector:null,expander:"expandCollapseXpath",collapser:"expandCollapseXpath",forceExpandWithDoubleClick:true}
                }, 
                {
                    configToSet:{collapser:"collapseXpath",forceExpandWithDoubleClick:true},
                    expected:{selector:null,expander:null,collapser:"collapseXpath",forceExpandWithDoubleClick:true}
                }, 
                {
                    configToSet:{expander:"expandXpath",collapser:"collapseXpath",forceExpandWithDoubleClick:true},
                    expected:{selector:null,expander:"expandXpath",collapser:"collapseXpath",forceExpandWithDoubleClick:true}
                }, 
                {
                    configToSet:{selector:"selectXpath",forceExpandWithDoubleClick:true},
                    expected:{selector:"selectXpath",expander:null,collapser:null,forceExpandWithDoubleClick:true}
                }, 
                {
                    configToSet:{selector:"selectXpath",expander:"expandCollapseXpath",forceExpandWithDoubleClick:true},
                    expected:{selector:"selectXpath",expander:"expandCollapseXpath",collapser:"expandCollapseXpath",forceExpandWithDoubleClick:true}
                }, 
                {
                    configToSet:{selector:"selectXpath",collapser:"collapseXpath",forceExpandWithDoubleClick:true},
                    expected:{selector:"selectXpath",expander:null,collapser:"collapseXpath",forceExpandWithDoubleClick:true}
                }, 
                {
                    configToSet:{selector:"selectXpath",expander:"expandXpath",collapser:"collapseXpath",forceExpandWithDoubleClick:true},
                    expected:{selector:"selectXpath",expander:"expandXpath",collapser:"collapseXpath",forceExpandWithDoubleClick:true}
                }, 
    ]
    
    beforeEach(function () {
        treeTestObjUnderTest = new TreeTO();
        sinon.stub(treeTestObjUnderTest,"_executeCommand");
        sinon.stub(treeTestObjUnderTest,"_getROProperty");
    });

    describe("selectedNode method",function() {
        it("should execute _getROProperty 'selection'",function(){
            treeTestObjUnderTest.selectedNode();
            assert(treeTestObjUnderTest._getROProperty.calledOnce);
            assert.strictEqual(treeTestObjUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"selection");
        });

        it("should return the same result returned by the getROProperty",function(){
            treeTestObjUnderTest._getROProperty.returns(42);
            var res = treeTestObjUnderTest.selectedNode();
            assert(res,42);
        });
    });

    configurations.forEach(function(config) {
        describe("with configuration " + JSON.stringify(config.configToSet),function(){
            beforeEach(function () {
                treeTestObjUnderTest.setConfiguration(config.configToSet);
            });
            
            it("select should call execute command with 'select' and pass arguments according to tree configuration",function(){
                treeTestObjUnderTest.select("path");
                assert(treeTestObjUnderTest._executeCommand.calledOnce);
                assert.deepEqual(treeTestObjUnderTest._executeCommand.firstCall.args.slice(0,5),
                    [
                        "Select",
                        "path",
                        config.expected.selector,
                        config.expected.expander, 
                        config.expected.forceExpandWithDoubleClick
                    ]);
            });

            it("collapse should call execute command with 'Collapse' and pass the given arguments",function(){
                treeTestObjUnderTest.collapse("path");
                assert(treeTestObjUnderTest._executeCommand.calledOnce);
                assert.deepEqual(treeTestObjUnderTest._executeCommand.firstCall.args.slice(0,4),
                    [
                        "Collapse",
                        "path",
                        config.expected.collapser,
                        config.expected.forceExpandWithDoubleClick
                    ]);
            });

            it("expand should call execute command with 'Expand' and pass the given arguments",function(){
                treeTestObjUnderTest.expand("path");
                assert(treeTestObjUnderTest._executeCommand.calledOnce);
                assert.deepEqual(treeTestObjUnderTest._executeCommand.firstCall.args.slice(0,4),
                    [
                        "Expand",
                        "path",
                        config.expected.expander, 
                        config.expected.forceExpandWithDoubleClick
                    ]);
            });
        });
    });

    describe("select",function(){
        it("should execute command 'Select' with selector and expander as null in case not provided",function(){
            treeTestObjUnderTest.select("path");
            assert(treeTestObjUnderTest._executeCommand.calledOnce);
            assert.deepEqual(treeTestObjUnderTest._executeCommand.firstCall.args.slice(0,5),["Select","path",null, null,false]);
        });
    });

    describe("collapse",function(){
        it("should execute command 'Collapse' with xpath as null in case not provided",function(){
            treeTestObjUnderTest.collapse("path");
            assert(treeTestObjUnderTest._executeCommand.calledOnce);
            assert.deepEqual(treeTestObjUnderTest._executeCommand.firstCall.args.slice(0,4),["Collapse","path",null,false]);
        });
    });

    describe("expand",function(){
        it("should execute command 'Expand' with xpath as null in case not provided",function(){
            treeTestObjUnderTest.expand("path");
            assert(treeTestObjUnderTest._executeCommand.calledOnce);
            assert.deepEqual(treeTestObjUnderTest._executeCommand.firstCall.args.slice(0,4),["Expand","path",null,false]);
        });
    });
    describe("setConfiguration",function(){
        it("should update the trees _config object with parameter",function(){
            var newConfig = {someField:"someValue"};
            treeTestObjUnderTest.setConfiguration(newConfig);
            assert.deepEqual(treeTestObjUnderTest._config,newConfig);
        });
    });
    describe("getConfiguration",function(){
        it("should return undefined if no configuration set",function(){
            var config = treeTestObjUnderTest.getConfiguration();
            assert.deepEqual(config,undefined);
        });
        it("should return the configuration set with setConfiguration",function(){
            var newConfig = {someField:"someValue"};
            treeTestObjUnderTest.setConfiguration(newConfig);
            var configFromTree = treeTestObjUnderTest.getConfiguration();
            assert.deepEqual(configFromTree,newConfig);
        });
    });

    describe("_firstNode method", function() {
        it("should execute _getROProperty 'first item'", function() {
            treeTestObjUnderTest._firstNode();
            assert(treeTestObjUnderTest._getROProperty.calledOnce);
            assert.strictEqual(treeTestObjUnderTest._getROProperty.firstCall.args[0].toLowerCase(),"first item");
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            treeTestObjUnderTest._getROProperty.returns(promiseMock);
            var res = treeTestObjUnderTest._firstNode();
            assert.strictEqual(res, promiseMock);
        });
    });
});