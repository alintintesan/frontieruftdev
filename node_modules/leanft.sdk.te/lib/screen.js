// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/19/2016.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var TeObjectBase = require("./te_base.js");
var ScreenBaseBehavior = require("./screen_base.js");
var TeBaseDescription = TeObjectBase.TeBaseDescription;
var TeBaseTO = TeObjectBase.TeBaseTO;
var PropertyFlatter = Core.PropertyFlatter;
var groupedPropertyWiredNamesToSimple = Core.groupedPropertyWiredNamesToSimple;

var PositionToNativeKeysProps = {
    row: {wiredName: "current row"},
    column: {wiredName: "current column"}
};

var PositionToNativeKeys = groupedPropertyWiredNamesToSimple(PositionToNativeKeysProps);


/**
 * The description of a terminal emulator screen that fully supports HLLAPI.
 * @param {Object} [props] Initializes a screen test object using the supplied property bag.
 * @returns {Screen} the description object that was initialized.
 * @constructor
 * @extends TerminalEmulators.TeBaseDescription
 * @mixes TerminalEmulators.ScreenBaseDescriptionBehavior
 * @mixes TerminalEmulators.ScreenDescriptionBehavior
 * @memberof TerminalEmulators
 */
function Screen(props) {
    var screenDesc = new TeBaseDescription("Screen");
    ObjUtils.extend(screenDesc, ScreenDescriptionBehavior);

    screenDesc.cursorPosition({});
    screenDesc.size({});

    screenDesc._defineByPropertyBag(props);

    return screenDesc;
}

var ScreenDescriptionBehavior = {
    /**
     * Returns the total number of rows and columns in the emulator screen.
     * @param {Object} [size] When provided, this method acts as a setter and sets the size value.
     * @param {number} [size.rowCount] The row position in the emulator screen.
     * @param {number} [size.columnCount] The column position in the emulator screen.
     * @returns {Size | Description} If no parameter is provided, the method acts as a getter and returns the current stored size value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof TerminalEmulators.Screen#
     */
    size: function (size) {
        return this._propertyFlatterHandler("Size", PropertyFlatter, size, ScreenBaseBehavior.SizeToNativeKeys);
    },
    /**
     * Returns the position of the cursor in the emulator screen.
     * @param {Object} [cursorPosition] When provided, this method acts as a setter and sets the cursorPosition value.
     * @param {number} [cursorPosition.row] The row position of the cursor in the emulator screen.
     * @param {number} [cursorPosition.column] The column position of the cursor in the emulator screen.
     * @returns {Object | Description} If no parameter is provided, the method acts as a getter and returns the current stored cursorPosition value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof TerminalEmulators.Screen#
     */
    cursorPosition: function (cursorPosition) {
        return this._propertyFlatterHandler("CursorPosition", PropertyFlatter, cursorPosition, PositionToNativeKeys);
    },
    /**
     * Returns the ID value of the screen.
     * @param {number} [id] When provided, this method acts as a setter and sets the screen's id value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored screen's id value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof TerminalEmulators.Screen#
     */
    id: function (id) {
        return this._propertyHandler("screen id", id, Convert.toNumber);
    },
    /**
     * Returns the number of input fields on the emulator screen.
     * @param {number} [inputFieldCount] When provided, this method acts as a setter and sets the inputFieldCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored inputFieldCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof TerminalEmulators.Screen#
     */
    inputFieldCount: function (inputFieldCount) {
        return this._propertyHandler("input field count", inputFieldCount, Convert.toNumber);
    },
    /**
     * Returns the number of protected fields on the emulator screen.
     * @param {number} [protectedFieldCount] When provided, this method acts as a setter and sets the protectedFieldCount value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored protectedFieldCount value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof TerminalEmulators.Screen#
     */
    protectedFieldCount: function (protectedFieldCount) {
        return this._propertyHandler("protected field count", protectedFieldCount, Convert.toNumber);
    },
    /**
     * Returns the label attribute of the emulator screen.
     * @param {string} [label] When provided, this method acts as a setter and sets the label value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored label value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof TerminalEmulators.Screen#
     */
    label: function (label) {
        return this._propertyHandler("label", label);
    }
};

/**
 * A terminal emulator screen that fully supports HLLAPI.
 * @constructor
 * @class ScreenTO
 * @extends TeBaseTO
 * @mixes TerminalEmulators.ScreenBaseTOBehavior._properties
 * @mixes TerminalEmulators.ScreenBaseTOBehavior._methods
 * @mixes TerminalEmulators.ScreenTOBehavior._properties
 * @mixes TerminalEmulators.ScreenTOBehavior._methods
 * @memberof TerminalEmulators
 */
function ScreenTO(session, description) {
    description = description || Screen();
    var screenTO = new TeBaseTO("TeScreen", session, description);
    screenTO._mergeBehavior(ScreenBaseBehavior.ScreenBaseTOBehavior);
    screenTO._mergeBehavior(ScreenTOBehavior);

    return screenTO;
}

/**
 * @memberof TerminalEmulators
 * @ignore
 */
var ScreenTOBehavior = {
    /**
     * @memberof TerminalEmulators.ScreenTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The terminal emulator screen's current row and current column.
         * @function
         * @returns {Promise<Object>} a promise that is fulfilled with the object's cursorPosition.
         * @memberof TerminalEmulators.ScreenTO#
         */
        cursorPosition: {
            type: 'grouped',
            properties: PositionToNativeKeysProps,
            getter: function () {
                return this._getROProperties(PositionToNativeKeys.row, PositionToNativeKeys.column).then(function (res) {
                    return {
                        row: Convert.toNumber(res[0]),
                        column: Convert.toNumber(res[1])
                    };
                });
            }
        },
        /**
         * The label of the terminal emulator screen.
         * @function
         * @returns {Promise<string>} a promise this is fulfilled with the label of the terminal emulator screen.
         * @memberof TerminalEmulators.ScreenTO#
         */
        label: {
        },
        /**
         * The terminal emulator screen input field count.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's terminal emulator screen inputFieldCount.
         * @memberof TerminalEmulators.ScreenTO#
         */
        inputFieldCount: {
            wiredName: "input field count"
        },
        /**
         * The terminal emulator screen ID.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's terminal emulator screen ID.
         * @memberof TerminalEmulators.ScreenTO#
         */
        id: {
            wiredName: "screen id"
        },
        /**
         * The protected field count of the terminal emulator screen.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's Terminal Emulator screen protectedFieldCount.
         * @memberof TerminalEmulators.ScreenTO#
         */
        protectedFieldCount: {
            wiredName: "protected field count"
        }
    },

    /**
     * @memberof TerminalEmulators.ScreenTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Sends a keystroke or string of keystrokes to the current cursor position on the emulator screen.
         * @function
         * @param {string | Keys} keys The string or terminal emulator keys to type in the object.
         * @returns {Promise<void>} a promise that is fulfilled when the sendTEKeys operation ends.
         * @memberof TerminalEmulators.ScreenTO#
         */
        sendTEKeys: function (keys) {
            return this._executeWithEvents(arguments, "SendKey", keys);
        },
        /*jshint eqnull:true */
        /**
         * Changes the position of the cursor within the emulator screen.
         * @function
         * @param {Object | number}  positionOrRow If an object is passed,
         * it will change the position of the cursor within the emulator screen.<br>
         * If a number is passed, it will be interpreted as a row.
         * @param {number} [positionOrRow.row] The row position of the cursor in the emulator screen.
         * @param {number} [positionOrRow.column] The column position of the cursor in the emulator screen.
         * @param {number} [column] If a number is passed, it changes the position of the cursor within the emulator screen.
         * @returns {Promise<void>} a promise that is fulfilled when the setCursorPosition operation ends.
         * @memberof TerminalEmulators.ScreenTO#
         */
        setCursorPosition: function (positionOrRow, column) {
            if (positionOrRow == null)
                throw new Error("You can't pass positionOrRow null to setCursorPosition method");

            var positionObj = this._getPositionObject(positionOrRow, column);

            return this._executeWithEvents(arguments, "SetCursorPos", positionObj.row, positionObj.column);
        },
        /**
         * Copies a string to a specific location in the emulator screen.
         * @function
         * @param {string} Text that will be written in the specified position within the emulator screen.
         * @param {Object | number}  [positionOrRow] If an object is passed, it will copy the string to that location.<br>
         * If a number is passed, it will be interpreted as a row.
         * @param {number} [positionOrRow.row] The row position of the cursor in the emulator screen.
         * @param {number} [positionOrRow.column] The column position of the cursor in the emulator screen.
         * @param {number} [column] If a number is passed, it will copy the string to this location.
         * @returns {Promise<void>} a promise that is fulfilled when the setText operation ends.
         * @memberof TerminalEmulators.ScreenTO#
         */
        setText: function (text, positionOrRow, column) {
            if (text == null)
                throw new Error("You must pass a text (String)");

            if (arguments.length == 1) {
                return this.cursorPosition().then((function (pos) {
                    return this._setTextPosition(text, pos.row, pos.column);
                }).bind(this));
            }

            var positionObj = this._getPositionObject(positionOrRow, column);

            return this._setTextPosition(text, positionObj.row, positionObj.column);
        }
    },

    _helpers: {
        /**
         * @private
         * @ignore
         * @memberof TerminalEmulators
         */
        _setTextPosition: function (text, row, column) {
            return this._executeWithEvents(arguments, "SetText", row, column, text);
        },
        /*jshint eqnull:true */
        /**
         * @private
         * @ignore
         * @memberof TerminalEmulators
         */
        _getPositionObject: function (positionOrRow, column) {
            if (positionOrRow == null)
                throw new Error("positionOrRow must have a value");

            if (typeof positionOrRow == "object") {
                if (positionOrRow.row == null || positionOrRow.column == null)
                    throw new Error("You must pass row and column (number), or a position object");
                return {row: Convert.toNumber(positionOrRow.row), column: Convert.toNumber(positionOrRow.column)};
            }
            if (column == null)
                throw new Error("You can't pass column null on this method");

            return {row: Convert.toNumber(positionOrRow), column: Convert.toNumber(column)};
        }
    }
};


module.exports.Screen = Screen;
module.exports.ScreenTO = ScreenTO;
