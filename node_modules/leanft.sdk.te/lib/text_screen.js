// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/19/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var TeObjectBase = require("./te_base.js");
var ScreenBaseBehavior = require("./screen_base.js");
var TeBaseDescription = TeObjectBase.TeBaseDescription;
var TeBaseTO = TeObjectBase.TeBaseTO;
var ClickBehavior = Core.ClickBehavior;
var SendKeysBehavior = Core.SendKeysBehavior;
var Convert = Core.Convert;
var PropertyFlatter = Core.PropertyFlatter;

/**
 * A terminal emulator screen that uses text-only HLLAPI or does not support HLLAPI.
 * @param {Object} [props] Initializes an text screen test object using the supplied property bag.
 * @returns {TextScreen} the description object that was initialized.
 * @constructor
 * @extends TerminalEmulators.TeBaseDescription
 * @mixes TerminalEmulators.ScreenBaseDescriptionBehavior
 * @memberof TerminalEmulators
 */
function TextScreen(props) {
    var textScreenDesc = new TeBaseDescription("TextScreen");
    ObjUtils.extend(textScreenDesc, TextScreenDescriptionBehavior);

    textScreenDesc._size({rowCount: 0, columnCount: 0});

    textScreenDesc._defineByPropertyBag(props);

    return textScreenDesc;
}

var TextScreenDescriptionBehavior = {
    /**
     * @private
     * @ignore
     * @memberof TerminalEmulators
     */
    _size: function (size) {
        return this._propertyFlatterHandler("Size", PropertyFlatter, size, ScreenBaseBehavior.SizeToNativeKeys);
    }
};

/**
 * A terminal emulator screen that uses text-only HLLAPI or does not support HLLAPI.
 * @constructor
 * @class ScreenTO
 * @extends TeBaseTO
 * @mixes TerminalEmulators.ScreenBaseTOBehavior._properties
 * @mixes TerminalEmulators.ScreenBaseTOBehavior._methods
 * @mixes TerminalEmulators.TextScreenTOBehavior._methods
 * @mixes SendKeysBehavior._methods
 * @mixes ClickBehavior._methods
 * @memberof TerminalEmulators
 */
function TextScreenTO(session, description) {
    description = description || TextScreen();
    var textScreenTO = new TeBaseTO("TeTextScreen", session, description);
    textScreenTO._mergeBehavior(SendKeysBehavior);
    textScreenTO._mergeBehavior(ClickBehavior);
    textScreenTO._mergeBehavior(ScreenBaseBehavior.ScreenBaseTOBehavior);
    textScreenTO._mergeBehavior(TextScreenTOBehavior);

    return textScreenTO;
}

/**
 * @memberof TerminalEmulators
 * @ignore
 */
var TextScreenTOBehavior = {
    /**
     * @memberof TerminalEmulators.TextScreenTOBehavior
     * @ignore
     */
    _methods:{
        /*jshint eqnull:true */
        /**
         * Clicks the specified row and column position on the emulator screen.
         * @function
         * @param {Object}  position If a Position object is passed,
         * it will click on the position within the emulator screen.
         * @param {number} [position.row] The row position of the cursor in the emulator screen.
         * @param {number} [position.column] The column position of the cursor in the emulator screen.
         * @returns {Promise<void>} a promise that is fulfilled when the clickPosition operation ends.
         * @memberof TerminalEmulators.TextScreenTO#
         */
        clickPosition: function (position) {
            if (position == null || typeof position != "object")
                throw new Error("You must pass a position object");
            if (position.row == null || position.column == null)
                throw new Error("the argument does not contain the row or column keys or both");

            return this._executeWithEvents(arguments, "ClickPosition", Convert.toNumber(position.row), Convert.toNumber(position.column));
        }
    }
};

module.exports.TextScreen = TextScreen;
module.exports.TextScreenTO = TextScreenTO;