// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/11/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = require("leanft.sdk.core").ObjectUtils;
var MouseButton = Core.MouseButton;
var Convert = Core.Convert;
var TeObjectBase = require("./te_base.js");
var TeBaseDescription = TeObjectBase.TeBaseDescription;
var TeBaseTO = TeObjectBase.TeBaseTO;
var ProtocolConverter = require("./protocol.js").ProtocolConverter;
var Protocol = require("./protocol.js").Protocol;
var EmulatorStatusConverter = require("./emulator_status.js").EmulatorStatusConverter;
var EmulatorStatus = require("./emulator_status.js").EmulatorStatus;

/**
 * The description of a terminal emulator window that fully supports HLLAPI.
 * @param {Object} [props] Initializes an window test object using the supplied property bag.
 * @returns {Window} the description object that was initialized.
 * @constructor
 * @memberof TerminalEmulators
 * @extends TerminalEmulators.TeBaseDescription
 * @mixes TerminalEmulators.WindowDescriptionBehaviour
 */
function Window(props) {
    var windowDesc = new TeBaseDescription("Window");
    ObjUtils.extend(windowDesc, WindowDescriptionBehavior);
    windowDesc._defineByPropertyBag(props);

    return windowDesc;
}

 var WindowDescriptionBehavior = {
     /**
      * Returns a handle to a window.
      * @param {number} [handle] When provided, this method acts as a setter and sets the handle value.
      * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored handle value;
      * otherwise it returns 'this' for use with the builder pattern.
      * @memberof TerminalEmulators.Window#
      */
     handle: function (handle) {
         return this._propertyHandler("hwnd", handle, Convert.toNumber);
     },
     /**
      * Returns the short name of the window.
      * @param {string} [shortName] When provided, this method acts as a setter and sets the shortName value.
      * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored shortName value;
      * otherwise it returns 'this' for use with the builder pattern.
      * @memberof TerminalEmulators.Window#
      */
     shortName: function (shortName) {
         return this._propertyHandler("short name", shortName);
     },
     /**
      * Returns the current protocol.<br>
      * Possible values: 'pR_3270', 'pR_5250', 'pR_VT100', 'pR_OTHER'.
      * @param {TerminalEmulators.Protocol} [protocol] When provided, this method acts as a setter and sets the protocol value.
      * @returns {TerminalEmulators.Protocol | Description} If no parameter is provided, the method acts as a getter and returns the current stored protocol value;
      * otherwise it returns 'this' for use with the builder pattern.
      * @memberof TerminalEmulators.Window#
      */
     protocol: function (protocol) {
         return this._propertyHandler("protocol", protocol, ProtocolConverter._protocolToNative, ProtocolConverter._nativeToProtocol);
     },
     /**
      * Returns the current emulator status. <br>
      * Possible values: 'ready', 'disconnected', 'busy', 'locked', 'unavailable'.
      * @param {TerminalEmulators.EmulatorStatus} [TerminalEmulators.emulatorStatus] When provided, this method acts as a setter and sets the emulatorStatus value.
      * @returns {TerminalEmulators.EmulatorStatus | Description} If no parameter is provided, the method acts as a getter and returns the current stored emulatorStatus value;
      * otherwise it returns 'this' for use with the builder pattern.
      * @memberof TerminalEmulators.Window#
      */
     emulatorStatus: function (emulatorStatus) {
         return this._propertyHandler("emulator status", emulatorStatus, EmulatorStatusConverter._emulatorStatusToNative, EmulatorStatusConverter._nativeToEmulatorStatus);
     }
 };

/**
 * A terminal emulator window.
 * @constructor
 * @class WindowTO
 * @extends TeBaseTO
 * @mixes TerminalEmulators.WindowTOBehavior._properties
 * @mixes TerminalEmulators.WindowTOBehavior._methods
 * @memberof TerminalEmulators
 */
function WindowTO(session, description) {
    description = description || Window();
    var windowTO = new TeBaseTO("TeWindow", session, description);
    windowTO._mergeBehavior(WindowTOBehavior);
    return windowTO;
}

//Consts
var emulatorStatusWiredName = "emulator status";

/**
 * @memberof TerminalEmulators
 * @ignore
 */
var WindowTOBehavior = {
    /**
     * @memberof TerminalEmulators.WindowTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The short name of the terminal emulator.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the short name of the terminal emulator.
         * @memberof TerminalEmulators.WindowTO#
         */
        shortName: {
            wiredName: "short name"
        },
        /**
         * Returns the window handle of the terminal emulator.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's terminal emulator window handle.
         * @memberof TerminalEmulators.WindowTO#
         */
        handle: {
            wiredName: "hwnd"
        },
        /**
         * Returns the terminal emulator status.
         * @function
         * @returns {Promise<TerminalEmulators.EmulatorStatus>} a promise that is fulfilled with the status of the terminal emulator.
         * @memberof TerminalEmulators.WindowTO#
         */
        emulatorStatus: {
            type: 'enum',
            enumType: EmulatorStatus,
            enumName: 'EmulatorStatus',
            wiredName: emulatorStatusWiredName,
            getter: function () {
                return this._getROProperty(emulatorStatusWiredName, arguments).then(EmulatorStatusConverter._nativeToEmulatorStatus);
            }
        },
        /**
         * Returns the terminal emulator protocol.
         * @function
         * @returns {Promise<TerminalEmulators.Protocol>} a promise that is fulfilled with the protocol of the terminal emulator.
         * @memberof TerminalEmulators.WindowTO#
         */
        protocol: {
            type: 'enum',
            enumType: Protocol,
            enumName: 'Protocol',
            getter: function () {
                return this._getROProperty("protocol", arguments).then(ProtocolConverter._nativeToProtocol);
            }
        }
    },

    /**
     * @memberof TerminalEmulators.WindowTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Activates the terminal emulator window.
         * If you do not provide the args object, the activate operation is performed using the left mouse button.
         * @function
         * @param {MouseButton} [button = MouseButton.left] The mouse button to use for the activate operation.
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         * @memberof TerminalEmulators.WindowTO#
         */
        activate: function (button) {
            if (button == null) {
                return this._executeWithEvents(arguments, "Activate");
            }
            return this._executeWithEvents(arguments, "Activate", MouseButton._convert(button));
        }
    }
};

module.exports.Window = Window;
module.exports.WindowTO = WindowTO;