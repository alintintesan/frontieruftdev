// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/25/2016.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var TeObjectBase = require("./te_base.js");
var TeBaseDescription = TeObjectBase.TeBaseDescription;
var TeBaseTO = TeObjectBase.TeBaseTO;
var PropertyFlatter = Core.PropertyFlatter;
var groupedPropertyWiredNamesToSimple = Core.groupedPropertyWiredNamesToSimple;
var WaitUntilVisibleBehavior = Core.WaitUntilVisibleBehavior;

/**
* The description of a terminal emulator field that fully supports HLLAPI.
* @param {Object} [props] Initializes a field test object using the supplied property bag.
* @returns {Field} the description object that was initialized.
* @constructor
* @memberof TerminalEmulators
* @extends TerminalEmulators.TeBaseDescription
* @mixes TerminalEmulators.FieldDescriptionBehaviour
*/
function Field(props) {
    var fieldDesc = new TeBaseDescription("Field");
    ObjUtils.extend(fieldDesc, FieldDescriptionBehaviour);

    fieldDesc.startPosition({});

    fieldDesc._defineByPropertyBag(props);

    return fieldDesc;
}

/**
 * @ignore
 */
var FieldDescriptionBehaviour = {
    /**
     * Returns a field length in characters.
     * @param {number} [length] When provided, this method acts as a setter and sets the length value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored length value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof TerminalEmulators.Field#
     */
    length: function (length) {
        return this._propertyHandler("length", length, Convert.toNumber);
    },
    /**
     * Returns the ID value of the TeField.
     * @param {number} [id] When provided, this method acts as a setter and sets the id value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored id value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof TerminalEmulators.Field#
     */
    id: function (id) {
        return this._propertyHandler("field id", id, Convert.toNumber);
    },
    /**
     * Returns the attached text attribute for TeField.
     * @param {string} [attachedText] When provided, this method acts as a setter and sets the attachedText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored attachedText value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof TerminalEmulators.Field#
     */
    attachedText: function (attachedText) {
        return this._propertyHandler("attached text", attachedText);
    },
    /**
     * Returns the content of TeField.
     * @param {string} [text] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof TerminalEmulators.Field#
     */
    text: function (text) {
        return this._propertyHandler("text", text);
    },
    /**
     * Returns the 'start row' and 'start column' attributes for TeField.
     * @param {Object} [startPosition] When provided, this method acts as a setter and sets the startPosition value.
     * @param {number} [startPosition.row] The row position of the cursor in the emulator screen.
     * @param {number} [startPosition.column] The column position of the cursor in the emulator screen.
     * @returns {Object | Description} If no parameter is provided, the method acts as a getter and returns the current stored startPosition value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof TerminalEmulators.Field#
     */
    startPosition: function (startPosition) {
        return this._propertyFlatterHandler("StartPosition", PropertyFlatter, startPosition, PositionToNativeKeys);
    },
    /**
     * Indicates whether the field is visible.
     * @param {boolean} [isVisible] When provided, this method acts as a setter and sets the isVisible value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isVisible value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof TerminalEmulators.Field#
     */
    isVisible: function (isVisible) {
        return this._propertyHandler("visible", isVisible, Convert.toBool);
    },
    /**
     * Indicates whether the field is protected.
     * @param {boolean} [isProtected] When provided, this method acts as a setter and sets the isProtected value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isProtected value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof TerminalEmulators.Field#
     */
    isProtected: function (isProtected) {
        return this._propertyHandler("protected", isProtected, Convert.toBool);
    },
    /**
     * Indicates whether the field is numeric.
     * @param {boolean} [isNumeric] When provided, this method acts as a setter and sets the isNumeric value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isNumeric value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof TerminalEmulators.Field#
     */
    isNumeric: function (isNumeric) {
        return this._propertyHandler("numeric", isNumeric, Convert.toBool);
    }
};

var PositionToNativeKeysProps = {
    row: {wiredName: "start row"},
    column: {wiredName: "start column"}
};

var PositionToNativeKeys = groupedPropertyWiredNamesToSimple(PositionToNativeKeysProps);

/**
 * A terminal emulator field that fully supports HLLAPI.
 * @constructor
 * @class FieldTO
 * @extends TeBaseTO
 * @mixes TerminalEmulators.FieldTOBehavior._properties
 * @mixes TerminalEmulators.FieldTOBehavior._methods
 * @mixes WaitUntilVisibleBehavior._methods
 * @memberof TerminalEmulators
 */
function FieldTO(session, description) {
    description = description || Field();
    var fieldTO = new TeBaseTO("TeField", session, description);
    fieldTO._mergeBehavior(WaitUntilVisibleBehavior);
    fieldTO._mergeBehavior(FieldTOBehavior);
    return fieldTO;
}

/**
 * @memberof TerminalEmulators
 * @ignore
 */
var FieldTOBehavior = {
    /**
     * @memberof TerminalEmulators.FieldTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The terminal emulator field text.
         * @function
         * @returns {Promise<string>} a promise this is fulfilled with the terminal emulator text.
         * @memberof TerminalEmulators.FieldTO#
         */
        text: {

        },
        /**
         * The text attached to the terminal emulator field.
         * @function
         * @returns {Promise<string>} a promise this is fulfilled with the text attached to the terminal emulator field.
         * @memberof TerminalEmulators.FieldTO#
         */
        attachedText: {
            wiredName: "attached text"
        },
        /**
         * Returns the terminal emulator field length.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's terminal emulator field length.
         * @memberof TerminalEmulators.FieldTO#
         */
        length: {
        },
        /**
         * Returns the terminal emulator field ID.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the object's terminal emulator field ID.
         * @memberof TerminalEmulators.FieldTO#
         */
        id: {
            wiredName: "field id"
        },
        /**
         * The Visible attribute of the terminal emulator field.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the field is visible or not.
         * @memberof TerminalEmulators.FieldTO#
         */
        isVisible: {
            wiredName: "visible"
        },
        /**
         * The Protected attribute of the terminal emulator field.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the field is protected or not.
         * @memberof TerminalEmulators.FieldTO#
         */
        isProtected: {
            wiredName: "protected"
        },
        /**
         * The Numeric attribute of the terminal emulator field.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the field is numeric or not.
         * @memberof TerminalEmulators.FieldTO#
         */
        isNumeric: {
            wiredName: "numeric"
        },
        /**
         * The terminal emulator field's start column and start row properties.
         * @function
         * @returns {Promise<Object>} a promise that is fulfilled with the object's startPosition.
         * @memberof TerminalEmulators.FieldTO#
         */
        startPosition: {
            type: 'grouped',
            properties: PositionToNativeKeysProps,
            getter: function () {
                var propNames = PositionToNativeKeys;
                return this._getROProperties(propNames.row, propNames.column).then(function (res) {
                    return {
                        row: Convert.toNumber(res[0]),
                        column: Convert.toNumber(res[1])
                    };
                });
            }
        }
    },

    /**
     * @memberof TerminalEmulators.FieldTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Inserts text into an unprotected field.
         * @function
         * @param {string} Text that is inserted in the field.
         * @param {number} [offset] If a number is passed, it will copy the string to that position in the field.
         * @returns {Promise<void>} a promise that is fulfilled when the setText operation ends.
         * @memberof TerminalEmulators.FieldTO#
         */
        setText: function (text, offset) {
            if (arguments.length == 2) {
                return this._executeWithEvents(arguments, "Set", text, Convert.toNumber(offset));
            }
            return this._executeWithEvents(arguments, "Set", text);
        },
        /*jshint eqnull:true */
        /**
         * Places the cursor in the specified position within the field.
         * @function
         * @param {number} [offset] If a number is passed, it will set the position in the field.
         * @returns {Promise<void>} a promise that is fulfilled when the setCursor operation ends.
         * @memberof TerminalEmulators.FieldTO#
         */
        setCursor: function (offset) {
            if (offset != null) {
                return this._executeWithEvents(arguments, "SetCursorPos", Convert.toNumber(offset));
            }
            return this._executeWithEvents(arguments, "SetCursorPos");
        },
        /**
         * Inserts text into a hidden (invisible) field.
         * @function
         * @param {string} codedString If a string is passed, it will copy the coded string into the field.
         * @returns {Promise<void>} a promise that is fulfilled when the setSecure operation ends.
         * @memberof TerminalEmulators.FieldTO#
         */
        setSecure: function (codedString) {
            return this._executeWithEvents(arguments, "SetSecure", codedString);
        }
    }
};


module.exports.Field = Field;
module.exports.FieldTO = FieldTO;