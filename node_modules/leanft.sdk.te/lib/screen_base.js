// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/19/2016.
 */
var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var groupedPropertyWiredNamesToSimple = Core.groupedPropertyWiredNamesToSimple;

var SizeToNativeKeysProps = {
    rowCount: {wiredName: "row count"},
    columnCount: {wiredName: "column count"}
};

var SizeToNativeKeys = groupedPropertyWiredNamesToSimple(SizeToNativeKeysProps);

/**
 * @memberof TerminalEmulators
 * @ignore
 */
var ScreenBaseTOBehavior = {
    /**
     * @memberof TerminalEmulators.ScreenBaseTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The terminal emulator screen column count and row count.
         * @function
         * @returns {Promise<Object>} a promise that is fulfilled with the object's size.
         */
        size: {
            type: 'grouped',
            properties: SizeToNativeKeysProps,
            getter: function () {
                return this._getROProperties(SizeToNativeKeys.rowCount, SizeToNativeKeys.columnCount).then(function (res) {
                    return {
                        rowCount: Convert.toNumber(res[0]),
                        columnCount: Convert.toNumber(res[1])
                    };
                });
            }
        }
    },
    /**
     * @memberof TerminalEmulators.ScreenBaseTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Returns the text from the specified screen rectangle.
         * @function
         * @param {Object} [area] If an Area object is passed, it will return the string from that location.
         * @param {number} [area.top] Top position of the rectangle.
         * @param {number} [area.left] Left position of the rectangle.
         * @param {number} [area.bottom] Bottom position of the rectangle.
         * @param {number} [area.right] Right position of the rectangle.
         * @returns {Promise<string>} a promise that is fulfilled with the contents of the specified text.
         */
        getText: function (area) {
            if (area != null) {
                if (typeof area !== "object")
                    throw new Error("You must pass an area object");

                return this._executeWithEvents(arguments, "GetText", Convert.toNumber(area.top), Convert.toNumber(area.left), Convert.toNumber(area.bottom), Convert.toNumber(area.right));
            }
            return this._executeWithEvents(arguments, "GetText");
        },
        /*jshint eqnull:true */
        /**
         * Waits until a response is received from the host and the emulator
         * status is set to Ready, or until the timeout is reached, before continuing with the run session.
         * @function
         * @param {number} [milliseconds] If a number is passed, it will wait this number of milliseconds for a response.
         * @returns {Promise<void>} a promise that is fulfilled when the sync operation ends.
         */
        sync: function (milliseconds) {
            if (milliseconds != null) {
                return this._executeWithEvents(arguments, "Sync", Convert.toNumber(milliseconds));
            }
            return this._executeWithEvents(arguments, "Sync");
        },
        /*jshint eqnull:true */
        /**
         * Waits for specific text to appear on the emulator screen before continuing the run session.<br><br>
         * Example 1: <br> Use the waitForText method to wait 10 seconds for the string "CH70001 LAST ACCESS AT 14:27:07 ON THURSDAY", where this string is defined as a regular expression: <br>
         * waitForText(new RegExp(".*LAST ACCESS AT \d\d:\d\d:\d\d ON .*DAY.*"), 10000)<br><br>
         * Example 2:<br>Use the waitForText method to wait 5 seconds for the string "User": <br>
         * waitForText("User", 5000)
         * @function
         * @param {string | RegExp} text The specified string or regular expression for which the emulator screen is waiting.
         * @param {number} [milliseconds] If a number is passed, it will wait this number of milliseconds for a response.
         * @returns {Promise<boolean>} a promise that is fulfilled with the state of the specified inputs.
         */
        waitForText: function (text, milliseconds) {
            if (text == null)
                throw new Error("You must pass a text (String or RegExp)");

            var regExpFlag = text instanceof RegExp;
            if (regExpFlag)
                text = text.source;

            milliseconds = milliseconds != null ? milliseconds : 0;

            return this._executeWithEvents(arguments, "WaitString", text, 0, 0, 0, 0, Convert.toNumber(milliseconds), regExpFlag);
        },
        /*jshint eqnull:true */
        /**
         * Waits for specific text to appear on the emulator screen before continuing the run session.<br><br>
         * Example 1:<br> Use the waitForText method to wait 10 seconds for the string, "CH70001 LAST ACCESS AT 14:27:07 ON THURSDAY", where this string is defined as a regular
         * expression: <br>
         * waitForText(new RegExp(".*LAST ACCESS AT \d\d:\d\d:\d\d ON .*DAY.*"), {top: 6, left: 53, bottom: 6, right: 60}, 10000)<br><br>
         * Example 2:<br> Use the waitForText method to wait 5 seconds for the string User":<br>
         * waitForText("User", {top: 6, left: 53, bottom: 6, right: 60}, 5000)
         * @function
         * @param {string | RegExp} text The specified string or regular expression for which the emulator screen is waiting.
         * @param {Object} area If an Area object is passed, it will wait for text from that location. <br>
         * If a number is passed, it will wait this number of milliseconds for a response..
         * @param {number} area.top Top position of the rectangle.
         * @param {number} area.left Left position of the rectangle.
         * @param {number} area.bottom Bottom position of the rectangle.
         * @param {number} area.right Right position of the rectangle.
         * @param {number} [milliseconds] If a number is passed,  it will wait this number of milliseconds for a response.
         * @returns {Promise<boolean>} a promise that is fulfilled with the state of the specified inputs.
         */
        waitForTextInArea: function (text, area, milliseconds) {
            if (text == null)
                throw new Error("You must pass a text (String or RegExp)");
            if (area == null)
                throw new Error("You can't pass area null to waitForTextInArea method");

            if (area.top === null || area.left === null || area.bottom === null || area.right === null)
                throw new Error("the argument does not contain the top, left, bottom, right keys");

            var regExpFlag = text instanceof RegExp;
            if (regExpFlag)
                text = text.source;

            milliseconds = milliseconds != null ? milliseconds : 0;

            return this._executeWithEvents(arguments, "WaitString", text, Convert.toNumber(area.top), Convert.toNumber(area.left),
                Convert.toNumber(area.bottom), Convert.toNumber(area.right), Convert.toNumber(milliseconds), regExpFlag);
        }
    }
};

module.exports.ScreenBaseTOBehavior = ScreenBaseTOBehavior;
module.exports.SizeToNativeKeys = SizeToNativeKeys;