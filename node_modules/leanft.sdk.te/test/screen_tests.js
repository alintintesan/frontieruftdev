// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/22/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Q = require("q");

describe("Screen Description", function () {
    var Screen = require("../lib/screen.js").Screen;
    var screenDescriptionUnderTest;

    beforeEach(function () {
        screenDescriptionUnderTest = Screen();
    });

    describe("Constructor", function () {
        it("should assign 'TerminalEmulators' and 'Screen' LeanFT type", function () {
            screenDescriptionUnderTest = new Screen();
            assert.deepEqual(screenDescriptionUnderTest.leanFTType, {
                technology: "Terminal Emulators",
                leanftType: "Screen"
            });
        });
    });

    describe("size method", function () {
        it("should return this - builder", function () {
            var res = screenDescriptionUnderTest.size({});

            assert.strictEqual(res, screenDescriptionUnderTest);
        });
        it("should add rowCount to flatter when only rowCount given", function () {
            screenDescriptionUnderTest.size({
                rowCount: 5
            });

            assert.strictEqual(screenDescriptionUnderTest._properties["Size"].rowCount, 5);
            assert(!("columnCount" in screenDescriptionUnderTest._properties["Size"]));
        });
        it("should add columnCount to flatter when only columnCount given", function () {
            screenDescriptionUnderTest.size({
                columnCount: 5
            });

            assert.strictEqual(screenDescriptionUnderTest._properties["Size"].columnCount, 5);
            assert(!("rowCount" in screenDescriptionUnderTest._properties["Size"]));
        });

        it("should add rowCount and columnCount to flatter when both rowCount and columnCount given", function () {
            screenDescriptionUnderTest.size({
                rowCount: 3,
                columnCount: 5
            });

            assert.strictEqual(screenDescriptionUnderTest._properties["Size"].rowCount, 3);
            assert.strictEqual(screenDescriptionUnderTest._properties["Size"].columnCount, 5);
        });

        it("should have correct values if get after set", function () {
            screenDescriptionUnderTest.size({
                rowCount: 3,
                columnCount: 5
            });

            var res = screenDescriptionUnderTest.size();

            assert.strictEqual(res.rowCount, 3);
            assert.strictEqual(res.columnCount, 5);
        });

        it("should modify value of rowCount and leave column as is if modify value of rowCount after its set", function () {
            screenDescriptionUnderTest.size({
                rowCount: 3,
                columnCount: 5
            });

            screenDescriptionUnderTest.size().rowCount = 8;

            assert.strictEqual(screenDescriptionUnderTest._properties["Size"].rowCount, 8);
            assert.strictEqual(screenDescriptionUnderTest._properties["Size"].columnCount, 5);
        });

        it("should return an object without rowCount and columnCount but not null if get without set ", function () {
            var res = screenDescriptionUnderTest.size();

            assert.notStrictEqual(res, null);
            assert(!("rowCount" in res));
            assert(!("columnCount" in res));
        });

        it("should set the rowCount value on the flatter if setting rowCount without setting size value", function () {
            screenDescriptionUnderTest.size().rowCount = 5;

            var res = screenDescriptionUnderTest.size();

            assert.notStrictEqual(res, null);
            assert.strictEqual(res.rowCount, 5);
        });

        it("should not delete it but reset its value if setting size to null", function () {
            screenDescriptionUnderTest.size(null);

            var res = screenDescriptionUnderTest.size();

            assert.notStrictEqual(res, null);
            assert(!("rowCount" in res));
            assert(!("columnCount" in res));
        });

        it("should have correct keys map", function () {
            var res = screenDescriptionUnderTest.size();

            assert.deepEqual(res._keysMap, {
                rowCount: "row count",
                columnCount: "column count"
            });
        });
    });

    describe("cursorPosition method", function () {
        it("should return this - builder", function () {
            var res = screenDescriptionUnderTest.cursorPosition({});

            assert.strictEqual(res, screenDescriptionUnderTest);
        });
        it("should add row to flatter when only row given", function () {
            screenDescriptionUnderTest.cursorPosition({
                row: 5
            });

            assert.strictEqual(screenDescriptionUnderTest._properties["CursorPosition"].row, 5);
            assert(!("column" in screenDescriptionUnderTest._properties["CursorPosition"]));
        });
        it("should add column to flatter when only column given", function () {
            screenDescriptionUnderTest.cursorPosition({
                column: 5
            });

            assert.strictEqual(screenDescriptionUnderTest._properties["CursorPosition"].column, 5);
            assert(!("row" in screenDescriptionUnderTest._properties["CursorPosition"]));
        });

        it("should add row and column to flatter when both row and column given", function () {
            screenDescriptionUnderTest.cursorPosition({
                row: 3,
                column: 5
            });

            assert.strictEqual(screenDescriptionUnderTest._properties["CursorPosition"].row, 3);
            assert.strictEqual(screenDescriptionUnderTest._properties["CursorPosition"].column, 5);
        });

        it("should have correct values if get after set", function () {
            screenDescriptionUnderTest.cursorPosition({
                row: 3,
                column: 5
            });

            var res = screenDescriptionUnderTest.cursorPosition();

            assert.strictEqual(res.row, 3);
            assert.strictEqual(res.column, 5);
        });

        it("should modify value of row and leave column as is if modify value of row after its set", function () {
            screenDescriptionUnderTest.cursorPosition({
                row: 3,
                column: 5
            });

            screenDescriptionUnderTest.cursorPosition().row = 8;

            assert.strictEqual(screenDescriptionUnderTest._properties["CursorPosition"].row, 8);
            assert.strictEqual(screenDescriptionUnderTest._properties["CursorPosition"].column, 5);
        });

        it("should return an object without row and column but not null if get without set ", function () {
            var res = screenDescriptionUnderTest.cursorPosition();

            assert.notStrictEqual(res, null);
            assert(!("row" in res));
            assert(!("column" in res));
        });

        it("should set the row value on the flatter if setting row without setting CursorPosition value", function () {
            screenDescriptionUnderTest.cursorPosition().row = 5;

            var res = screenDescriptionUnderTest.cursorPosition();

            assert.notStrictEqual(res, null);
            assert.strictEqual(res.row, 5);
        });

        it("should not delete it but reset its value if setting CursorPosition to null", function () {
            screenDescriptionUnderTest.cursorPosition(null);

            var res = screenDescriptionUnderTest.cursorPosition();

            assert.notStrictEqual(res, null);
            assert(!("row" in res));
            assert(!("column" in res));
        });

        it("should have correct keys map", function () {
            var res = screenDescriptionUnderTest.cursorPosition();

            assert.deepEqual(res._keysMap, {
                row: "current row",
                column: "current column"
            });
        });
    });

    describe("id method", function () {
        it("should add 'id' to _properties when value is given", function () {
            screenDescriptionUnderTest.id(100);
            assert.strictEqual(screenDescriptionUnderTest._properties["screen id"], 100);
        });

        it("should add 'id' to _properties when value is given in string", function () {
            screenDescriptionUnderTest.id('100');
            assert.strictEqual(screenDescriptionUnderTest._properties["screen id"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = screenDescriptionUnderTest.id(100);
            assert.strictEqual(result, screenDescriptionUnderTest);
        });

        it("should remove 'id' from _properties when value is null", function () {
            screenDescriptionUnderTest._properties["screen id"] = 100;
            screenDescriptionUnderTest.id(null);
            assert(!("screen id" in screenDescriptionUnderTest._properties));
        });

        it("should return the value of 'id' from _properties when value is not given", function () {
            screenDescriptionUnderTest._properties["screen id"] = 100;
            var result = screenDescriptionUnderTest.id();
            assert.equal(result, 100);
        });
    });

    describe("protectedFieldCount method", function () {
        it("should add 'protectedFieldCount' to _properties when value is given", function () {
            screenDescriptionUnderTest.protectedFieldCount(100);
            assert.strictEqual(screenDescriptionUnderTest._properties["protected field count"], 100);
        });

        it("should add 'protectedFieldCount' to _properties when value is given in string", function () {
            screenDescriptionUnderTest.protectedFieldCount('100');
            assert.strictEqual(screenDescriptionUnderTest._properties["protected field count"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = screenDescriptionUnderTest.protectedFieldCount(100);
            assert.strictEqual(result, screenDescriptionUnderTest);
        });

        it("should remove 'protectedFieldCount' from _properties when value is null", function () {
            screenDescriptionUnderTest._properties["protected field count"] = 100;
            screenDescriptionUnderTest.protectedFieldCount(null);
            assert(!("protected field count" in screenDescriptionUnderTest._properties));
        });

        it("should return the value of 'protectedFieldCount' from _properties when value is not given", function () {
            screenDescriptionUnderTest._properties["protected field count"] = 100;
            var result = screenDescriptionUnderTest.protectedFieldCount();
            assert.equal(result, 100);
        });
    });

    describe("inputFieldCount method", function () {
        it("should add 'inputFieldCount' to _properties when value is given", function () {
            screenDescriptionUnderTest.inputFieldCount(100);
            assert.strictEqual(screenDescriptionUnderTest._properties["input field count"], 100);
        });

        it("should add 'inputFieldCount' to _properties when value is given in string", function () {
            screenDescriptionUnderTest.inputFieldCount('100');
            assert.strictEqual(screenDescriptionUnderTest._properties["input field count"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = screenDescriptionUnderTest.inputFieldCount(100);
            assert.strictEqual(result, screenDescriptionUnderTest);
        });

        it("should remove 'inputFieldCount' from _properties when value is null", function () {
            screenDescriptionUnderTest._properties["input field count"] = 100;
            screenDescriptionUnderTest.inputFieldCount(null);
            assert(!("input field count" in screenDescriptionUnderTest._properties));
        });

        it("should return the value of 'inputFieldCount' from _properties when value is not given", function () {
            screenDescriptionUnderTest._properties["input field count"] = 100;
            var result = screenDescriptionUnderTest.inputFieldCount();
            assert.equal(result, 100);
        });
    });

    describe("label method",function() {
        it("should add 'label' to _properties with the correct value when value is given",function(){
            screenDescriptionUnderTest.label("some label");
            assert.strictEqual(screenDescriptionUnderTest._properties["label"], "some label");
        });
        it("should add 'label' to _properties with the correct value when value is given using property bag",function(){
            screenDescriptionUnderTest = Screen({
                label: "some label"
            });
            assert.strictEqual(screenDescriptionUnderTest._properties["label"], "some label");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = screenDescriptionUnderTest.label("some label");
            assert.strictEqual(result, screenDescriptionUnderTest);
        });
        it("should remove 'label' from _properties when value is null",function(){
            screenDescriptionUnderTest._properties["label"] = "some label";
            screenDescriptionUnderTest.label(null);
            assert(!("label" in screenDescriptionUnderTest._properties));
        });
        it("should return the value of 'label' from _properties when value is not given",function(){
            screenDescriptionUnderTest._properties["label"] = "some label";
            var label = screenDescriptionUnderTest.label();
            assert.equal(label, "some label");
        });
    });
});

describe("ScreenTOBehavior",function(){
    var ScreenTO = require("../lib/screen.js").ScreenTO;
    var screenTOBehaviorUnderTest;

    beforeEach(function(){
        screenTOBehaviorUnderTest = ScreenTO({});
        var promiseMock = {
            then: function(cb) {
                return cb([15,40]);
            }
        };
        screenTOBehaviorUnderTest._getROProperties = sinon.stub();
        screenTOBehaviorUnderTest._getROProperties.returns(promiseMock);
        screenTOBehaviorUnderTest._executeWithEvents = sinon.stub();
        screenTOBehaviorUnderTest._getROProperty = sinon.stub();
    });

    afterEach(function () {
        delete screenTOBehaviorUnderTest._executeWithEvents;
        delete screenTOBehaviorUnderTest._getROProperty;
        delete screenTOBehaviorUnderTest._getROProperties;
    });

    describe("cursorPosition",function() {
        it("should pass correct parameters to _getROProperties", function () {
            screenTOBehaviorUnderTest.cursorPosition();
            assert(screenTOBehaviorUnderTest._getROProperties.calledOnce);
            assert(screenTOBehaviorUnderTest._getROProperties.calledWith("current row", "current column"));
        });
        it("should return correct structure", function () {
            var res = screenTOBehaviorUnderTest.cursorPosition();
            assert.equal(res.row, 15);
            assert.equal(res.column, 40);
        });
    });

    describe("label",function(){
        it("should query the property 'label'",function(){
            screenTOBehaviorUnderTest.label();
            assert(screenTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(screenTOBehaviorUnderTest._getROProperty.firstCall.args,["label", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            screenTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = screenTOBehaviorUnderTest.label();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("id",function(){
        it("should query the property 'id'",function(){
            screenTOBehaviorUnderTest.id();
            assert(screenTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(screenTOBehaviorUnderTest._getROProperty.firstCall.args,["screen id", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            screenTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = screenTOBehaviorUnderTest.id();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("inputFieldCount",function(){
        it("should query the property 'inputFieldCount'",function(){
            screenTOBehaviorUnderTest.inputFieldCount();
            assert(screenTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(screenTOBehaviorUnderTest._getROProperty.firstCall.args,["input field count", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            screenTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = screenTOBehaviorUnderTest.inputFieldCount();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("protectedFieldCount",function(){
        it("should query the property 'protectedFieldCount'",function(){
            screenTOBehaviorUnderTest.protectedFieldCount();
            assert(screenTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(screenTOBehaviorUnderTest._getROProperty.firstCall.args,["protected field count", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            screenTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = screenTOBehaviorUnderTest.protectedFieldCount();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("setText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            screenTOBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = screenTOBehaviorUnderTest.setText("some text", 15, 25);
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments when one string and two numbers passed", function () {
            screenTOBehaviorUnderTest.setText("some text", 10, 30);
            sinon.assert.calledOnce(screenTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(screenTOBehaviorUnderTest._executeWithEvents, sinon.match({
                0: "some text",
                1: 10,
                2: 30
            }), "SetText", 10, 30, "some text");
        });

        it("should call _executeWithEvents and pass it the correct arguments when one string and a position object passed", function () {
            screenTOBehaviorUnderTest.setText("some text", {row: 500, column: 600});
            sinon.assert.calledOnce(screenTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(screenTOBehaviorUnderTest._executeWithEvents, sinon.match({
                0: "some text",
                1: 500,
                2: 600
            }), "SetText", 500, 600, "some text");
        });

        it("should call _executeWithEvents and pass it the correct arguments when one string is passed", function () {
            var promise = Q.resolve([15,  20]);

            screenTOBehaviorUnderTest._getROProperties.returns(promise);

            return screenTOBehaviorUnderTest.setText("some text").then(function () {
                sinon.assert.calledOnce(screenTOBehaviorUnderTest._executeWithEvents);
                sinon.assert.calledWith(screenTOBehaviorUnderTest._executeWithEvents, sinon.match({0: "some text"}), "SetText", 15, 20, "some text");
            });
        });

        it("should throw error if one argument passed which is not an object", function () {
            assert.throws(function () {
                screenTOBehaviorUnderTest.setText("some text", 500);
            });
        });

        it("should throw error if an object that not contains both properties passed", function () {
            assert.throws(function () {
                screenTOBehaviorUnderTest.setText("some text", {});
            });
        });

        it("should throw error if an object that not contains two properties passed", function () {
            assert.throws(function () {
                screenTOBehaviorUnderTest.setText("some text", {row: 500});
            });
        });

        it("should throw error if an object passed with two properties but the keys are not 'row' or 'column'", function () {
            assert.throws(function () {
                screenTOBehaviorUnderTest.setText("some text", {row: 500, height: 600});
            });
        });

        it("should throw error if an object passed with two properties but one of the values is not a number", function () {
            assert.throws(function () {
                screenTOBehaviorUnderTest.setText("some text", {row: 500, column: "50A"});
            });
        });

        it("should throw error if an passed with two arguments but one of the values is not a number", function () {
            assert.throws(function () {
                screenTOBehaviorUnderTest.setText("some text", 500, "50A");
            });
        });
    });

    describe("setCursorPosition method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            screenTOBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = screenTOBehaviorUnderTest.setCursorPosition(15, 25);
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments when two numbers passed", function () {
            screenTOBehaviorUnderTest.setCursorPosition(10, 30);
            sinon.assert.calledOnce(screenTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(screenTOBehaviorUnderTest._executeWithEvents, sinon.match({0: 10, 1: 30 }), "SetCursorPos", 10, 30);
        });

        it("should call _executeWithEvents and pass it the correct arguments when a position object passed", function () {
            screenTOBehaviorUnderTest.setCursorPosition({ row: 500, column: 600 });
            sinon.assert.calledOnce(screenTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(screenTOBehaviorUnderTest._executeWithEvents, sinon.match({ 0: { row: 500, column: 600 } }), "SetCursorPos", 500, 600);
        });

        it("should throw error if one argument passed which is not an object", function () {
            assert.throws(function () {
                screenTOBehaviorUnderTest.setCursorPosition(500);
            });
        });

        it("should throw error if an object that not contains both properties passed", function () {
            assert.throws(function () {
                screenTOBehaviorUnderTest.setCursorPosition({});
            });
        });

        it("should throw error if an object that not contains two properties passed", function () {
            assert.throws(function () {
                screenTOBehaviorUnderTest.setCursorPosition({ row: 500 });
            });
        });

        it("should throw error if an object passed with two properties but the keys are not 'row' or 'column'", function () {
            assert.throws(function () {
                screenTOBehaviorUnderTest.setCursorPosition({ row: 500, height: 600 });
            });
        });

        it("should throw error if an object passed with two properties but one of the values is not a number", function () {
            assert.throws(function () {
                screenTOBehaviorUnderTest.setCursorPosition({ row: 500, column: "50A" });
            });
        });

        it("should throw error if an passed with two arguments but one of the values is not a number", function () {
            assert.throws(function () {
                screenTOBehaviorUnderTest.setCursorPosition(500, "50A");
            });
        });
    });
});

