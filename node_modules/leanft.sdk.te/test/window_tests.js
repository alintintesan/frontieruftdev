// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/11/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var EmulatorStatus = require("../lib/emulator_status.js").EmulatorStatus;
var Protocol = require("../lib/protocol.js").Protocol;

describe("Window Description", function () {

    var Window = require("../lib/window.js").Window;
    var windowDescriptionUnderTest;

    beforeEach(function () {
        windowDescriptionUnderTest = Window();
    });

    describe("Constructor", function () {
        it("should assign 'TerminalEmulators' and 'Window' LeanFT type", function () {
            windowDescriptionUnderTest = new Window();
            assert.deepEqual(windowDescriptionUnderTest.leanFTType, {
                technology: "Terminal Emulators",
                leanftType: "Window"
            });
        });
    });

    describe("handle method", function () {
        it("should add 'handle' to _properties when value is given", function () {
            windowDescriptionUnderTest.handle(100);
            assert.strictEqual(windowDescriptionUnderTest._properties["hwnd"], 100);
        });

        it("should add 'handle' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.handle('100');
            assert.strictEqual(windowDescriptionUnderTest._properties["hwnd"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.handle(100);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'handle' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["hwnd"] = 100;
            windowDescriptionUnderTest.handle(null);
            assert(!("hwnd" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'handle' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["hwnd"] = 100;
            var result = windowDescriptionUnderTest.handle();
            assert.equal(result, 100);
        });
    });

    describe("shortName method",function() {
        it("should add 'shortName' to _properties with the correct value when value is given",function(){
            windowDescriptionUnderTest.shortName("some shortName");
            assert.strictEqual(windowDescriptionUnderTest._properties["short name"], "some shortName");
        });
        it("should add 'shortName' to _properties with the correct value when value is given using property bag",function(){
            windowDescriptionUnderTest = Window({
                shortName: "some shortName"
            });
            assert.strictEqual(windowDescriptionUnderTest._properties["short name"], "some shortName");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = windowDescriptionUnderTest.shortName("some shortName");
            assert.strictEqual(result, windowDescriptionUnderTest);
        });
        it("should remove 'shortName' from _properties when value is null",function(){
            windowDescriptionUnderTest._properties["short name"] = "some shortName";
            windowDescriptionUnderTest.shortName(null);
            assert(!("shortName" in windowDescriptionUnderTest._properties));
        });
        it("should return the value of 'shortName' from _properties when value is not given",function(){
            windowDescriptionUnderTest._properties["short name"] = "some shortName";
            var shortName = windowDescriptionUnderTest.shortName();
            assert.equal(shortName, "some shortName");
        });
    });

    describe("protocol method",function() {
        it("should add 'protocol' with the correct value",function(){
            windowDescriptionUnderTest.protocol(Protocol.pr5250);
            assert.strictEqual(windowDescriptionUnderTest._properties["protocol"], "5250");
        });
        it("should throw exception if params is not valid",function(){
            assert.throws(function() {
                windowDescriptionUnderTest.protocol("Protocol.pr5250");
            });
        });
        it("should add 'protocol' with correct value when value is given using property bag",function(){
            windowDescriptionUnderTest = Window({
                protocol: Protocol.prOther
            });
            assert.strictEqual(windowDescriptionUnderTest._properties["protocol"], "Unknown");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = windowDescriptionUnderTest.protocol(Protocol.pr3270);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });
        it("should set 'protocol' from _properties when value is null",function(){
            windowDescriptionUnderTest._properties["protocol"] = "Not Applicable";
            windowDescriptionUnderTest.protocol(null);
            assert(!("protocol" in windowDescriptionUnderTest._properties));
        });
        it("should return the value of 'protocol' from _properties when value is not given",function(){
            windowDescriptionUnderTest._properties["protocol"] = "Not Applicable";
            var protocol = windowDescriptionUnderTest.protocol();
            assert.strictEqual(protocol, Protocol.prVt100);
        });
    });

    describe("emulatorStatus method",function() {
        it("should add 'emulatorStatus' with the correct value",function(){
            windowDescriptionUnderTest.emulatorStatus(EmulatorStatus.ready);
            assert.strictEqual(windowDescriptionUnderTest._properties["emulator status"], "Ready");
        });
        it("should throw exception if params is not valid",function(){
            assert.throws(function() {
                windowDescriptionUnderTest.emulatorStatus("emulatorStatus.Ready");
            });
        });
        it("should add 'emulatorStatus' with correct value when value is given using property bag",function(){
            windowDescriptionUnderTest = Window({
                emulatorStatus: EmulatorStatus.disconnected
            });
            assert.strictEqual(windowDescriptionUnderTest._properties["emulator status"], "Disconnected");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = windowDescriptionUnderTest.emulatorStatus(EmulatorStatus.locked);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });
        it("should set 'emulatorStatus' from _properties when value is null",function(){
            windowDescriptionUnderTest._properties["emulator status"] = "Busy";
            windowDescriptionUnderTest.protocol(null);
            assert(!("emulatorStatus" in windowDescriptionUnderTest._properties));
        });
        it("should return the value of 'emulatorStatus' from _properties when value is not given",function(){
            windowDescriptionUnderTest._properties["emulator status"] = "Busy";
            var emulatorStatus = windowDescriptionUnderTest.emulatorStatus();
            assert.strictEqual(emulatorStatus, EmulatorStatus.busy);
        });
    });
});

describe("WindowTOBehavior",function(){
    var WindowTO = require("../lib/window.js").WindowTO;
    var Core = require("leanft.sdk.core");
    var MouseButton = Core.MouseButton;
    var windowTOBehaviorUnderTest;

    beforeEach(function(){
        windowTOBehaviorUnderTest = WindowTO({});

        windowTOBehaviorUnderTest._executeWithEvents = sinon.stub();
        windowTOBehaviorUnderTest._getROProperty = sinon.stub();
    });

    afterEach(function () {
        delete windowTOBehaviorUnderTest._executeWithEvents;
        delete windowTOBehaviorUnderTest._getROProperty;
    });

    describe("Protocol",function(){
        var promiseMock = {then: function(cb) {return cb("5250");}};
        it("should query the property 'protocol'",function(){
            windowTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            windowTOBehaviorUnderTest.protocol();
            assert(windowTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(windowTOBehaviorUnderTest._getROProperty.firstCall.args,["protocol", arguments]);
        });
        it("should return the correct promise according to that was returned from _getROProperty",function(){
            windowTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = windowTOBehaviorUnderTest.protocol();
            assert.strictEqual(res,Protocol.pr5250);
        });
    });

    describe("EmulatorStatus",function(){
        var promiseMock = {then: function(cb) {return cb("Ready");}};
        it("should query the property 'emulatorStatus'",function(){
            windowTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = windowTOBehaviorUnderTest.emulatorStatus();
            assert(windowTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(windowTOBehaviorUnderTest._getROProperty.firstCall.args,["emulator status", arguments]);
        });
        it("should return the correct promise according to that was returned from _getROProperty",function(){
            windowTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = windowTOBehaviorUnderTest.emulatorStatus();
            assert.strictEqual(res,EmulatorStatus.ready);
        });
    });

    describe("shortName",function(){
        it("should query the property 'shortName'",function(){
            windowTOBehaviorUnderTest.shortName();
            assert(windowTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(windowTOBehaviorUnderTest._getROProperty.firstCall.args,["short name", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            windowTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = windowTOBehaviorUnderTest.shortName();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("handle",function(){
        it("should query the property 'handle'",function(){
            windowTOBehaviorUnderTest.handle();
            assert(windowTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(windowTOBehaviorUnderTest._getROProperty.firstCall.args,["hwnd", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            windowTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = windowTOBehaviorUnderTest.handle();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("activate method", function () {
        it("should execute command 'Activate' if there is no button", function () {
            windowTOBehaviorUnderTest.activate();
            sinon.assert.calledOnce(windowTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTOBehaviorUnderTest._executeWithEvents, sinon.match({}), "Activate");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            windowTOBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = windowTOBehaviorUnderTest.activate();
            assert.equal(res, executionPromise);
        });

        it("should execute command 'Activate' if button is null", function () {
            windowTOBehaviorUnderTest.activate(null);
            sinon.assert.calledOnce(windowTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTOBehaviorUnderTest._executeWithEvents, sinon.match({}), "Activate");
        });

        it("should execute command 'Activate' if button is 'left'", function () {
            windowTOBehaviorUnderTest.activate(MouseButton.left);
            sinon.assert.calledOnce(windowTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTOBehaviorUnderTest._executeWithEvents, sinon.match({ 0: MouseButton.left }), "Activate", MouseButton._convert(MouseButton.left));
        });

        it("should execute command 'Activate' if button is 'middle'", function () {
            windowTOBehaviorUnderTest.activate(MouseButton.middle);
            sinon.assert.calledOnce(windowTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTOBehaviorUnderTest._executeWithEvents, sinon.match({ 0: MouseButton.middle }), "Activate", MouseButton._convert(MouseButton.middle));
        });

        it("should execute command 'Activate' if button is 'right'", function () {
            windowTOBehaviorUnderTest.activate(MouseButton.right);
            sinon.assert.calledOnce(windowTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTOBehaviorUnderTest._executeWithEvents, sinon.match({ 0: MouseButton.right }), "Activate", MouseButton._convert(MouseButton.right));
        });

        it("should execute command 'Activate' with undefined if button is 'wrong'", function () {
            windowTOBehaviorUnderTest.activate("wrong");
            sinon.assert.calledOnce(windowTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTOBehaviorUnderTest._executeWithEvents, sinon.match({ 0: "wrong" }), "Activate", undefined);
        });
    });
});