// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/29/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Field Description", function () {
    var Field = require("../lib/field.js").Field;
    var fieldDescriptionUnderTest;

    beforeEach(function () {
        fieldDescriptionUnderTest = Field();
    });

    describe("Constructor", function () {
        it("should assign 'TerminalEmulators' and 'Field' LeanFT type", function () {
            fieldDescriptionUnderTest = new Field();
            assert.deepEqual(fieldDescriptionUnderTest.leanFTType, {
                technology: "Terminal Emulators",
                leanftType: "Field"
            });
        });
    });

    describe("id method", function () {
        it("should add 'id' to _properties when value is given", function () {
            fieldDescriptionUnderTest.id(100);
            assert.strictEqual(fieldDescriptionUnderTest._properties["field id"], 100);
        });

        it("should add 'id' to _properties when value is given in string", function () {
            fieldDescriptionUnderTest.id('100');
            assert.strictEqual(fieldDescriptionUnderTest._properties["field id"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = fieldDescriptionUnderTest.id(100);
            assert.strictEqual(result, fieldDescriptionUnderTest);
        });

        it("should remove 'id' from _properties when value is null", function () {
            fieldDescriptionUnderTest._properties["field id"] = 100;
            fieldDescriptionUnderTest.id(null);
            assert(!("field id" in fieldDescriptionUnderTest._properties));
        });

        it("should return the value of 'id' from _properties when value is not given", function () {
            fieldDescriptionUnderTest._properties["field id"] = 100;
            var result = fieldDescriptionUnderTest.id();
            assert.equal(result, 100);
        });
    });

    describe("length method", function () {
        it("should add 'length' to _properties when value is given", function () {
            fieldDescriptionUnderTest.length(100);
            assert.strictEqual(fieldDescriptionUnderTest._properties["length"], 100);
        });

        it("should add 'length' to _properties when value is given in string", function () {
            fieldDescriptionUnderTest.length('100');
            assert.strictEqual(fieldDescriptionUnderTest._properties["length"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = fieldDescriptionUnderTest.length(100);
            assert.strictEqual(result, fieldDescriptionUnderTest);
        });

        it("should remove 'length' from _properties when value is null", function () {
            fieldDescriptionUnderTest._properties["length"] = 100;
            fieldDescriptionUnderTest.length(null);
            assert(!("length" in fieldDescriptionUnderTest._properties));
        });

        it("should return the value of 'length' from _properties when value is not given", function () {
            fieldDescriptionUnderTest._properties["length"] = 100;
            var result = fieldDescriptionUnderTest.length();
            assert.equal(result, 100);
        });
    });

    describe("attachedText method",function() {
        it("should add 'attachedText' to _properties with the correct value when value is given",function(){
            fieldDescriptionUnderTest.attachedText("some attachedText");
            assert.strictEqual(fieldDescriptionUnderTest._properties["attached text"], "some attachedText");
        });
        it("should add 'attachedText' to _properties with the correct value when value is given using property bag",function(){
            fieldDescriptionUnderTest = Field({
                attachedText: "some attachedText"
            });
            assert.strictEqual(fieldDescriptionUnderTest._properties["attached text"], "some attachedText");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = fieldDescriptionUnderTest.attachedText("some attachedText");
            assert.strictEqual(result, fieldDescriptionUnderTest);
        });
        it("should remove 'attachedText' from _properties when value is null",function(){
            fieldDescriptionUnderTest._properties["attached text"] = "some attachedText";
            fieldDescriptionUnderTest.attachedText(null);
            assert(!("attached text" in fieldDescriptionUnderTest._properties));
        });
        it("should return the value of 'attachedText' from _properties when value is not given",function(){
            fieldDescriptionUnderTest._properties["attached text"] = "some attachedText";
            var label = fieldDescriptionUnderTest.attachedText();
            assert.equal(label, "some attachedText");
        });
    });

    describe("text method",function() {
        it("should add 'text' to _properties with the correct value when value is given",function(){
            fieldDescriptionUnderTest.text("some text");
            assert.strictEqual(fieldDescriptionUnderTest._properties["text"], "some text");
        });
        it("should add 'text' to _properties with the correct value when value is given using property bag",function(){
            fieldDescriptionUnderTest = Field({
                text: "some text"
            });
            assert.strictEqual(fieldDescriptionUnderTest._properties["text"], "some text");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = fieldDescriptionUnderTest.text("some text");
            assert.strictEqual(result, fieldDescriptionUnderTest);
        });
        it("should remove 'text' from _properties when value is null",function(){
            fieldDescriptionUnderTest._properties["text"] = "some text";
            fieldDescriptionUnderTest.text(null);
            assert(!("text" in fieldDescriptionUnderTest._properties));
        });
        it("should return the value of 'text' from _properties when value is not given",function(){
            fieldDescriptionUnderTest._properties["text"] = "some text";
            var label = fieldDescriptionUnderTest.text();
            assert.equal(label, "some text");
        });
    });

    describe("isNumeric method", function () {
        it("should add 'isNumeric' to _properties when value is given", function () {
            fieldDescriptionUnderTest.isNumeric(true);
            assert.strictEqual(fieldDescriptionUnderTest._properties["numeric"], true);
        });

        it("should add 'isNumeric' to _properties when value is given in string", function () {
            fieldDescriptionUnderTest.isNumeric("true");
            assert.strictEqual(fieldDescriptionUnderTest._properties["numeric"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = fieldDescriptionUnderTest.isNumeric(true);
            assert.strictEqual(result, fieldDescriptionUnderTest);
        });

        it("should remove 'isNumeric' from _properties when value is null", function () {
            fieldDescriptionUnderTest._properties["numeric"] = true;
            fieldDescriptionUnderTest.isNumeric(null);
            assert(!("numeric" in fieldDescriptionUnderTest._properties));
        });

        it("should return the value of 'isNumeric' from _properties when value is not given", function () {
            fieldDescriptionUnderTest._properties["numeric"] = true;
            var result = fieldDescriptionUnderTest.isNumeric();
            assert.equal(result, true);
        });
    });

    describe("isProtected method", function () {
        it("should add 'isProtected' to _properties when value is given", function () {
            fieldDescriptionUnderTest.isProtected(true);
            assert.strictEqual(fieldDescriptionUnderTest._properties["protected"], true);
        });

        it("should add 'isProtected' to _properties when value is given in string", function () {
            fieldDescriptionUnderTest.isProtected("true");
            assert.strictEqual(fieldDescriptionUnderTest._properties["protected"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = fieldDescriptionUnderTest.isProtected(true);
            assert.strictEqual(result, fieldDescriptionUnderTest);
        });

        it("should remove 'isProtected' from _properties when value is null", function () {
            fieldDescriptionUnderTest._properties["protected"] = true;
            fieldDescriptionUnderTest.isProtected(null);
            assert(!("protected" in fieldDescriptionUnderTest._properties));
        });

        it("should return the value of 'isProtected' from _properties when value is not given", function () {
            fieldDescriptionUnderTest._properties["protected"] = true;
            var result = fieldDescriptionUnderTest.isProtected();
            assert.equal(result, true);
        });
    });

    describe("isVisible method", function () {
        it("should add 'isVisible' to _properties when value is given", function () {
            fieldDescriptionUnderTest.isVisible(true);
            assert.strictEqual(fieldDescriptionUnderTest._properties["visible"], true);
        });

        it("should add 'isVisible' to _properties when value is given in string", function () {
            fieldDescriptionUnderTest.isVisible("true");
            assert.strictEqual(fieldDescriptionUnderTest._properties["visible"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = fieldDescriptionUnderTest.isVisible(true);
            assert.strictEqual(result, fieldDescriptionUnderTest);
        });

        it("should remove 'isVisible' from _properties when value is null", function () {
            fieldDescriptionUnderTest._properties["visible"] = true;
            fieldDescriptionUnderTest.isVisible(null);
            assert(!("protected" in fieldDescriptionUnderTest._properties));
        });

        it("should return the value of 'isVisible' from _properties when value is not given", function () {
            fieldDescriptionUnderTest._properties["visible"] = true;
            var result = fieldDescriptionUnderTest.isVisible();
            assert.equal(result, true);
        });
    });

    describe("startPosition method", function () {
        it("should return this - builder", function () {
            var res = fieldDescriptionUnderTest.startPosition({});

            assert.strictEqual(res, fieldDescriptionUnderTest);
        });
        it("should add row to flatter when only row given", function () {
            fieldDescriptionUnderTest.startPosition({
                row: 5
            });

            assert.strictEqual(fieldDescriptionUnderTest._properties["StartPosition"].row, 5);
            assert(!("column" in fieldDescriptionUnderTest._properties["StartPosition"]));
        });
        it("should add column to flatter when only column given", function () {
            fieldDescriptionUnderTest.startPosition({
                column: 5
            });

            assert.strictEqual(fieldDescriptionUnderTest._properties["StartPosition"].column, 5);
            assert(!("row" in fieldDescriptionUnderTest._properties["StartPosition"]));
        });

        it("should add row and column to flatter when both row and column given", function () {
            fieldDescriptionUnderTest.startPosition({
                row: 3,
                column: 5
            });

            assert.strictEqual(fieldDescriptionUnderTest._properties["StartPosition"].row, 3);
            assert.strictEqual(fieldDescriptionUnderTest._properties["StartPosition"].column, 5);
        });

        it("should have correct values if get after set", function () {
            fieldDescriptionUnderTest.startPosition({
                row: 3,
                column: 5
            });

            var res = fieldDescriptionUnderTest.startPosition();

            assert.strictEqual(res.row, 3);
            assert.strictEqual(res.column, 5);
        });

        it("should modify value of row and leave column as is if modify value of row after its set", function () {
            fieldDescriptionUnderTest.startPosition({
                row: 3,
                column: 5
            });

            fieldDescriptionUnderTest.startPosition().row = 8;

            assert.strictEqual(fieldDescriptionUnderTest._properties["StartPosition"].row, 8);
            assert.strictEqual(fieldDescriptionUnderTest._properties["StartPosition"].column, 5);
        });

        it("should return an object without row and column but not null if get without set ", function () {
            var res = fieldDescriptionUnderTest.startPosition();

            assert.notStrictEqual(res, null);
            assert(!("row" in res));
            assert(!("column" in res));
        });

        it("should set the row value on the flatter if setting row without setting CursorPosition value", function () {
            fieldDescriptionUnderTest.startPosition().row = 5;

            var res = fieldDescriptionUnderTest.startPosition();

            assert.notStrictEqual(res, null);
            assert.strictEqual(res.row, 5);
        });

        it("should not delete it but reset its value if setting CursorPosition to null", function () {
            fieldDescriptionUnderTest.startPosition(null);

            var res = fieldDescriptionUnderTest.startPosition();

            assert.notStrictEqual(res, null);
            assert(!("row" in res));
            assert(!("column" in res));
        });

        it("should have correct keys map", function () {
            var res = fieldDescriptionUnderTest.startPosition();

            assert.deepEqual(res._keysMap, {
                row: "start row",
                column: "start column"
            });
        });
    });

});

describe("FieldTOBehavior",function(){
    var FieldTO = require("../lib/field.js").FieldTO;
    var fieldTOBehaviorUnderTest;

    beforeEach(function(){
        fieldTOBehaviorUnderTest = FieldTO({});
        var promiseMock = {
            then: function(cb) {
                return cb([15,40]);
            }
        };

        fieldTOBehaviorUnderTest._executeWithEvents = sinon.stub();
        fieldTOBehaviorUnderTest._getROProperty = sinon.stub();
        fieldTOBehaviorUnderTest._getROProperties = sinon.stub();
        fieldTOBehaviorUnderTest._getROProperties.returns(promiseMock);
    });

    afterEach(function () {
        delete fieldTOBehaviorUnderTest._executeWithEvents;
        delete fieldTOBehaviorUnderTest._getROProperty;
        delete fieldTOBehaviorUnderTest._getROProperties;
    });

    describe("text",function(){
        it("should query the property 'text'",function(){
            fieldTOBehaviorUnderTest.text();
            assert(fieldTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(fieldTOBehaviorUnderTest._getROProperty.firstCall.args,["text", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            fieldTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = fieldTOBehaviorUnderTest.text();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("attachedText",function(){
        it("should query the property 'attachedText'",function(){
            fieldTOBehaviorUnderTest.attachedText();
            assert(fieldTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(fieldTOBehaviorUnderTest._getROProperty.firstCall.args,["attached text", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            fieldTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = fieldTOBehaviorUnderTest.attachedText();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("length",function(){
        it("should query the property 'length'",function(){
            fieldTOBehaviorUnderTest.length();
            assert(fieldTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(fieldTOBehaviorUnderTest._getROProperty.firstCall.args,["length", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            fieldTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = fieldTOBehaviorUnderTest.length();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("id",function(){
        it("should query the property 'id'",function(){
            fieldTOBehaviorUnderTest.id();
            assert(fieldTOBehaviorUnderTest._getROProperty.calledOnce);
            assert.deepEqual(fieldTOBehaviorUnderTest._getROProperty.firstCall.args,["field id", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            fieldTOBehaviorUnderTest._getROProperty.returns(getROPromise);
            var res = fieldTOBehaviorUnderTest.id();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("startPosition",function() {
        it("should pass correct parameters to _getROProperties", function () {
            fieldTOBehaviorUnderTest.startPosition();
            assert(fieldTOBehaviorUnderTest._getROProperties.calledOnce);
            assert(fieldTOBehaviorUnderTest._getROProperties.calledWith("start row", "start column"));
        });
        it("should return correct structure", function () {
            var res = fieldTOBehaviorUnderTest.startPosition();
            assert.equal(res.row, 15);
            assert.equal(res.column, 40);
        });
    });

    describe("isVisible method", function () {
        it("should execute _getROProperty 'isVisible'", function () {
            fieldTOBehaviorUnderTest.isVisible();
            sinon.assert.calledOnce(fieldTOBehaviorUnderTest._getROProperty);
            sinon.assert.calledWith(fieldTOBehaviorUnderTest._getROProperty, "visible", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            fieldTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = fieldTOBehaviorUnderTest.isVisible();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("IsNumeric method", function () {
        it("should execute _getROProperty 'IsNumeric'", function () {
            fieldTOBehaviorUnderTest.isNumeric();
            sinon.assert.calledOnce(fieldTOBehaviorUnderTest._getROProperty);
            sinon.assert.calledWith(fieldTOBehaviorUnderTest._getROProperty, "numeric", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            fieldTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = fieldTOBehaviorUnderTest.isNumeric();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("IsProtected method", function () {
        it("should execute _getROProperty 'IsProtected'", function () {
            fieldTOBehaviorUnderTest.isProtected();
            sinon.assert.calledOnce(fieldTOBehaviorUnderTest._getROProperty);
            sinon.assert.calledWith(fieldTOBehaviorUnderTest._getROProperty, "protected", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            fieldTOBehaviorUnderTest._getROProperty.returns(promiseMock);
            var res = fieldTOBehaviorUnderTest.isProtected();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("setText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            fieldTOBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = fieldTOBehaviorUnderTest.setText("some text", 15);
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments when one string and one number passed", function () {
            fieldTOBehaviorUnderTest.setText("some text", 10);
            sinon.assert.calledOnce(fieldTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(fieldTOBehaviorUnderTest._executeWithEvents, sinon.match({0: "some text", 1: 10 }), "Set", "some text", 10);
        });

        it("should call _executeWithEvents and pass it the correct arguments when one string is passed", function () {
            fieldTOBehaviorUnderTest.setText("some text");
            sinon.assert.calledOnce(fieldTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(fieldTOBehaviorUnderTest._executeWithEvents, sinon.match({ 0: "some text" }), "Set", "some text");
        });

        it("should throw error if an passed with two arguments but one of the values is not a number", function () {
            assert.throws(function () {
                fieldTOBehaviorUnderTest.setText("some text", "50A");
            });
        });
    });

    describe("setCursor method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            fieldTOBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = fieldTOBehaviorUnderTest.setCursor(15);
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments when one number is passed", function () {
            fieldTOBehaviorUnderTest.setCursor(10);
            sinon.assert.calledOnce(fieldTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(fieldTOBehaviorUnderTest._executeWithEvents, sinon.match({0: 10 }), "SetCursorPos", 10);
        });

        it("should call _executeWithEvents and pass it the correct arguments when no inputs are passed", function () {
            fieldTOBehaviorUnderTest.setCursor();
            sinon.assert.calledOnce(fieldTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(fieldTOBehaviorUnderTest._executeWithEvents, sinon.match({}), "SetCursorPos");
        });

        it("should throw error if an passed with one argument which has value not a number", function () {
            assert.throws(function () {
                fieldTOBehaviorUnderTest.setCursor("50A");
            });
        });
    });

    describe("setSecure method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            fieldTOBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = fieldTOBehaviorUnderTest.setSecure("some text");
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments when one string passed", function () {
            fieldTOBehaviorUnderTest.setSecure("some text");
            sinon.assert.calledOnce(fieldTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(fieldTOBehaviorUnderTest._executeWithEvents, sinon.match({0: "some text"}), "SetSecure", "some text");
        });
    });
});