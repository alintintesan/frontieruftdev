// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/22/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("ScreenTOBehavior",function(){
    var TextScreenTO = require("../lib/text_screen.js").TextScreenTO;
    var textScreenTOBehaviorUnderTest;

    beforeEach(function(){
        textScreenTOBehaviorUnderTest = TextScreenTO({});

        textScreenTOBehaviorUnderTest._executeWithEvents = sinon.stub();
    });

    afterEach(function () {
        delete textScreenTOBehaviorUnderTest._executeWithEvents;
    });

    describe("click method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            textScreenTOBehaviorUnderTest._executeWithEvents.returns(executionPromise);
            var res = textScreenTOBehaviorUnderTest.clickPosition({row: 15, column: 25});
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments when one string and two numbers passed", function () {
            textScreenTOBehaviorUnderTest.clickPosition({row: 10, column: 30});
            sinon.assert.calledOnce(textScreenTOBehaviorUnderTest._executeWithEvents);
            sinon.assert.calledWith(textScreenTOBehaviorUnderTest._executeWithEvents, sinon.match({
                0: {row: 10,
                column: 30}
            }), "ClickPosition", 10, 30);
        });

        it("should throw error if one argument passed which is not an object", function () {
            assert.throws(function () {
                textScreenTOBehaviorUnderTest.clickPosition(500);
            });
        });

        it("should throw error if an object that not contains both properties passed", function () {
            assert.throws(function () {
                textScreenTOBehaviorUnderTest.clickPosition({});
            });
        });

        it("should throw error if an object that not contains two properties passed", function () {
            assert.throws(function () {
                textScreenTOBehaviorUnderTest.clickPosition({row: 500});
            });
        });

        it("should throw error if an object passed with two properties but the keys are not 'row' or 'column'", function () {
            assert.throws(function () {
                textScreenTOBehaviorUnderTest.clickPosition({row: 500, height: 600});
            });
        });

        it("should throw error if an object passed with two properties but one of the values is not a number", function () {
            assert.throws(function () {
                textScreenTOBehaviorUnderTest.clickPosition({row: 500, column: "50A"});
            });
        });
    });
});
