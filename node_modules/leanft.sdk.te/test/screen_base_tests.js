// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 8/23/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var ObjectUtils = require("leanft.sdk.core").ObjectUtils;

describe("Screen Base TO Behavior", function () {
    var ScreenBaseTO = ObjectUtils.mergeTestBehavior(require("../lib/screen_base.js").ScreenBaseTOBehavior);
    var screenBaseTOUnderTest = null;

    beforeEach(function () {
        screenBaseTOUnderTest = ScreenBaseTO;
        var promiseMock = {
            then: function(cb) {
                return cb([15,40]);
            }
        };
        screenBaseTOUnderTest._getROProperties = sinon.stub();
        screenBaseTOUnderTest._getROProperties.returns(promiseMock);
        screenBaseTOUnderTest._executeWithEvents = sinon.stub();
    });

    afterEach(function () {
        delete screenBaseTOUnderTest._getROProperties;
        delete screenBaseTOUnderTest._executeWithEvents;
    });

    describe("size",function() {
        it("should pass correct parameters to _getROProperties", function () {
            screenBaseTOUnderTest.size();
            assert(screenBaseTOUnderTest._getROProperties.calledOnce);
            assert(screenBaseTOUnderTest._getROProperties.calledWith("row count", "column count"));
        });
        it("should return correct structure", function () {
            var res = screenBaseTOUnderTest.size();
            assert.equal(res.rowCount, 15);
            assert.equal(res.columnCount, 40);
        });
    });
    describe("getText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = "some text";
            screenBaseTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = screenBaseTOUnderTest.getText();
            assert.equal(res, executionPromise);
        });

        it("should throw error if area is not object", function () {
            assert.throws(function () {
                screenBaseTOUnderTest.getText(12);
            });
        });

        it("should execute _executeWithEvents command with GetText if no input", function () {
            screenBaseTOUnderTest.getText();
            sinon.assert.calledOnce(screenBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(screenBaseTOUnderTest._executeWithEvents, sinon.match({}), "GetText");
        });

        it("should execute _executeWithEvents command with GetText if input is area", function () {
            screenBaseTOUnderTest.getText({top: 12, left: 12, bottom: 12, right: 12});
            sinon.assert.calledOnce(screenBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(screenBaseTOUnderTest._executeWithEvents, sinon.match({0: {top: 12, left: 12, bottom: 12, right: 12}}), "GetText", 12, 12, 12, 12);
        });
    });
    describe("sync method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            screenBaseTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = screenBaseTOUnderTest.sync(1500);
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments when one number passed", function () {
            screenBaseTOUnderTest.sync(10);
            sinon.assert.calledOnce(screenBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(screenBaseTOUnderTest._executeWithEvents, sinon.match({0: 10}), "Sync", 10);
        });

        it("should call _executeWithEvents and pass it the correct arguments when no arguments passed", function () {
            screenBaseTOUnderTest.sync();
            sinon.assert.calledOnce(screenBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(screenBaseTOUnderTest._executeWithEvents, sinon.match({}), "Sync");
        });

        it("should throw error if an passed with one arguments but the values is not a number", function () {
            assert.throws(function () {
                screenBaseTOUnderTest.sync("50A");
            });
        });
    });
    describe("waitForTextInArea method", function () {
        it("should throw error if area is not object", function () {
            assert.throws(function () {
                screenBaseTOUnderTest.waitForTextInArea("some text", 12, 12);
            });
        });

        it("should throw error if area is null", function () {
            assert.throws(function () {
                screenBaseTOUnderTest.waitForTextInArea("some text", null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = false;
            screenBaseTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = screenBaseTOUnderTest.waitForTextInArea("some text", {top: 12, left: 12, bottom: 12, right: 12});
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents command with WaitString if input has a string and an area object", function () {
            screenBaseTOUnderTest.waitForTextInArea("some text", {top: 12, left: 12, bottom: 12, right: 12});
            sinon.assert.calledOnce(screenBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(screenBaseTOUnderTest._executeWithEvents, sinon.match({0: "some text", 1: {top: 12, left: 12, bottom: 12, right: 12}}), "WaitString", "some text", 12, 12, 12, 12);
        });

        it("should execute _executeWithEvents command with WaitString if input has regExp, area object and milliseconds param", function () {
            screenBaseTOUnderTest.waitForTextInArea(new RegExp("some"), {top: 12, left: 12, bottom: 12, right: 12}, 5000);
            sinon.assert.calledOnce(screenBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(screenBaseTOUnderTest._executeWithEvents, sinon.match({0: "some", 1: {top: 12, left: 12, bottom: 12, right: 12}, 2: 5000}), "WaitString", "some", 12, 12, 12, 12, 5000);
        });

        it("should execute _executeWithEvents command with WaitString if input has text string, area object and milliseconds param", function () {
            screenBaseTOUnderTest.waitForTextInArea("some text", {top: 12, left: 12, bottom: 12, right: 12}, 5000);
            sinon.assert.calledOnce(screenBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(screenBaseTOUnderTest._executeWithEvents, sinon.match({0: "some text", 1: {top: 12, left: 12, bottom: 12, right: 12}, 2: 5000}), "WaitString", "some text", 12, 12, 12, 12, 5000);
        });
    });
    describe("waitForText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = false;
            screenBaseTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = screenBaseTOUnderTest.waitForText("some text");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents command with WaitString if one input", function () {
            screenBaseTOUnderTest.waitForText("some text");
            sinon.assert.calledOnce(screenBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(screenBaseTOUnderTest._executeWithEvents, sinon.match({0: "some text"}), "WaitString", "some text");
        });

        it("should execute _executeWithEvents command with WaitString if input contain string and milliseconds param", function () {
            screenBaseTOUnderTest.waitForText("some text", 5000);
            sinon.assert.calledOnce(screenBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(screenBaseTOUnderTest._executeWithEvents, sinon.match({0: "some text", 1: 5000}), "WaitString", "some text", 0, 0, 0, 0, 5000, false);
        });

        it("should execute _executeWithEvents command with WaitString if input contain regExp and milliseconds param", function () {
            screenBaseTOUnderTest.waitForText(new RegExp("some"));
            sinon.assert.calledOnce(screenBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(screenBaseTOUnderTest._executeWithEvents, sinon.match({0: "some"}), "WaitString", "some");
        });
    });
});

