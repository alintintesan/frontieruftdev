// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/16/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var Convert = Core.Convert;

/**
 * Description for a WPF edit field object.
 * @memberof WPF
 * @ignore
 */
var EditDescriptionBehavior = {
    /**
     * Indicates whether the text editing object is read-only to a user interacting with this object.
     * @param {boolean} [isReadOnly] Indicates whether the text editing object is read-only to a user interacting with this object.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns an indication of whether the text editing object is read-only to a user interacting with this object;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isReadOnly: function(isReadOnly) {
        return this._propertyHandler("isreadonly", isReadOnly, Convert.toBool);
    },

    /**
     * The name of this object.
     * @param {string} [name] The name of this object.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the name of this object;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    name: function (name) {
        return this._simplePropertyHandler("name", name);
    },

    /**
     * The text associated with the parent object of this object.
     * @param {string} [parentText] The text associated with the parent object of this object.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the text associated with the parent object of this object;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    parentText: function (parentText) {
        return this._simplePropertyHandler("parent text", parentText);
    }
};

/**
 * @param {Object} [props] Initializes an Edit test object using the supplied property bag.
 * @returns {Edit} the description object that was initialized.
 * @constructor
 * @class Edit
 * @extends WPF.UiObjectBaseDescription
 * @mixes WPF.EditDescriptionBehavior
 * @memberof WPF
 */
function Edit(props){
    var editDesc = new UiObjectBaseDescription("EditField");
    ObjUtils.extend(editDesc, EditDescriptionBehavior);
    editDesc._defineByPropertyBag(props);
    return editDesc;
}

/**
 * An EditTO object
 * @constructor
 * @class EditTO
 * @extends WPF.UiObjectBaseTO
 * @mixes WPF.EditTOBehavior._properties
 * @mixes WPF.EditTOBehavior._methods
 * @memberof WPF
 */
function EditTO(session, description) {
    description = description || Edit();
    var editTO = new UiObjectBaseTO("WpfEdit", session, description);
    editTO._mergeBehavior(EditTOBehavior);
    return editTO;
}

/**
 * The behavior of the EditTO object
 * @memberof WPF
 * @ignore
 */
var EditTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.EditTOBehavior
     */
    _properties: {
        /**
         * Indicates whether this text editing object is read-only to a user interacting with this object.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether this text editing object is read-only to a user interacting with this object.
         */
        isReadOnly: {
            wiredName: "isreadonly"
        },

        /**
         * The name of this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of this object.
         */
        name: {

        },

        /**
         * The text associated with the parent object of this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text associated with the parent object of this object.
         */
        parentText: {
            wiredName: "parent text"
        }
    },

    /**
     * @ignore
     * @memberof WPF.EditTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the text associated with this object.
         * @function
         * @param {string} text The text to be entered in this edit field.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setText: function (text) {
            if (text == null)
                throw new Error("The parameter text cannot be null.");
            return this._executeWithEvents(arguments, "Set", text);
        },

        /*jshint eqnull:true */
        /**
         * Selects text in a single line edit box.
         * All positions are 0-based.
         * @function
         * @param {number} fromCharPos Character position from which selection starts, inclusive.
         * @param {number} toCharPos Character position at which selection ends, inclusive.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        select: function (fromCharPos, toCharPos) {
            if (fromCharPos == null)
                throw new Error("The parameter fromCharPos cannot be null.");
            if (toCharPos == null)
                throw new Error("The parameter toCharPos cannot be null.");
            return this._executeWithEvents(arguments, "SetSingleLineSelection", Convert.toNumber(fromCharPos), Convert.toNumber(toCharPos) + 1);
        },

        /*jshint eqnull:true */
        /**
         * Selects text in this multi-line edit box.
         * All positions are 0-based.
         * @function
         * @param {number} fromLine The line at which the selection starts, inclusive.
         * @param {number} fromCharPos The character position at which the selection starts, inclusive.
         * @param {number} toLine The line at which the selection ends, inclusive.
         * @param {number} toCharPos The character position at which the selection ends, inclusive.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        selectMulti: function (fromLine, fromCharPos, toLine, toCharPos) {
            if (fromLine == null)
                throw new Error("The parameter fromLine cannot be null.");
            if (fromCharPos == null)
                throw new Error("The parameter fromCharPos cannot be null.");
            if (toLine == null)
                throw new Error("The parameter toLine cannot be null.");
            if (toCharPos == null)
                throw new Error("The parameter toCharPos cannot be null.");
            return this._executeWithEvents(arguments, "SetMultiLineSelection", Convert.toNumber(fromLine), Convert.toNumber(fromCharPos), Convert.toNumber(toLine), Convert.toNumber(toCharPos));
        },

        /*jshint eqnull:true */
        /**
         * Sets the encoded value of this edit box.
         * Generates the encoded value using the Password Encoder utility, available from the LeanFT > Tools menu in your IDE or from the Windows Start menu.
         * Note: The SetSecure method enables you to hide passwords displayed on the screen while running or editing a LeanFT test, but it is not intended to be a secure way to protect password information.
         * @function
         * @param {string} encodedText The encoded text to enter in this edit box.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setSecure: function (encodedText) {
            if (encodedText == null)
                throw new Error("You must pass parameter encodedText");
            return this._executeWithEvents(arguments, "SetSecure", encodedText);
        }
    }
};

module.exports.Edit = Edit;
module.exports.EditTO = EditTO;
