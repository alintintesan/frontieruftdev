// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 05/24/2016.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;

/**
 * ProgressBarDescriptionBehavior - the description for a WPF ProgressBar test object.
 * @memberof WPF
 * @ignore
 */
var ProgressBarDescriptionBehavior = {
    /**
     * The current value of the range element.
     * @param {number} [Value] When provided, this method acts as a setter and sets the value.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    value: function (value) {
        return this._propertyHandler("Value", value, Convert.toNumber);
    }
};

/**
 * The description of a WPF ProgressBar test object.
 * @param {Object} [props] Initializes a ProgressBar test object using the supplied property bag.
 * @returns {ProgressBar} the description object that was initialized.
 * @class ProgressBar 
 * @extends WPF.UiObjectBaseDescription
 * @mixes WPF.ProgressBarDescriptionBehavior
 * @memberof WPF
 */
function ProgressBar(props) {
    var progressBarDesc = new UiObjectBaseDescription("ProgressBar");
    Utils.extend(progressBarDesc, ProgressBarDescriptionBehavior);
    progressBarDesc._defineByPropertyBag(props);
    return progressBarDesc;    
}

/**
 * A .NET WPF ProgressBar object.
 * @constructor
 * @class ProgressBarTO
 * @extends WPF.UiObjectBaseTO
 * @mixes WPF.ProgressBarTOBehavior._properties
 * @memberof WPF
 */
function ProgressBarTO(session, description) {
    description = description || ProgressBar();
    var progressBarTO = new UiObjectBaseTO("WpfProgressBar", session, description);
    progressBarTO._mergeBehavior(ProgressBarTOBehavior);
    return progressBarTO;
}

/**
 * The behavior of a WPF ProgressBar object.
 * @memberof WPF
 * @ignore
 */
var ProgressBarTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.ProgressBarTOBehavior
     */
    _properties: {
        /**
         * The maximum value of this progress bar.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the maximum value of this progress bar.
         */
        maximum: {
            wiredName: "Maximum"
        },

        /**
         * The minimum value of this progress bar.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the minimum value of this progress bar.
         */
        minimum: {
            wiredName: "Minimum"
        },

        /**
         * The current value of this progress bar.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the current value of this progress bar.
         */
        value: {
            wiredName: "Value"
        }
    }
};

module.exports.ProgressBar = ProgressBar;
module.exports.ProgressBarTO = ProgressBarTO;
