// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/17/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var Convert = Core.Convert;

/**
 * Description for a WPF RadioButton object.
 * @memberof WPF
 * @ignore
 */
var RadioButtonDescriptionBehavior = {
    /**
     * Indicates whether the radio button is checked.
     * @param {boolean} [isChecked] The indication of whether the radio button is checked.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the indication of whether the radio button is checked;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isChecked: function(isChecked) {
        return this._propertyHandler("checked", isChecked, Convert.toBool);
    },

    /**
     * The name of this object.
     * @param {string} [name] The name of this object.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the name of this object;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    name: function (name) {
        return this._simplePropertyHandler("name", name);
    }
};

/**
 * @param {Object} [props] Initializes a RadioButton test object using the supplied property bag.
 * @returns {RadioButton} the description object that was initialized.
 * @constructor
 * @class RadioButton
 * @extends WPF.UiObjectBaseDescription
 * @mixes WPF.RadioButtonDescriptionBehavior
 * @memberof WPF
 */
function RadioButton(props){
    var radioButtonDesc = new UiObjectBaseDescription("RadioButton");
    ObjUtils.extend(radioButtonDesc, RadioButtonDescriptionBehavior);
    radioButtonDesc._defineByPropertyBag(props);
    return radioButtonDesc;
}

/**
 * A RadioButtonTO object
 * @constructor
 * @class RadioButtonTO
 * @extends WPF.UiObjectBaseTO
 * @mixes WPF.RadioButtonTOBehavior._properties
 * @mixes WPF.RadioButtonTOBehavior._methods
 * @memberof WPF
 */
function RadioButtonTO(session, description) {
    description = description || RadioButton();
    var radioButtonTO = new UiObjectBaseTO("WpfRadioButton", session, description);
    radioButtonTO._mergeBehavior(RadioButtonTOBehavior);
    return radioButtonTO;
}

/**
 * The behaviors of the RadioButtonTO object
 * @memberof WPF
 * @ignore
 */
var RadioButtonTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.RadioButtonTOBehavior
     */
    _methods: {
        /**
         * Selects the radio button.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        set: function () {
            return this._executeWithEvents(arguments, "Set");
        }
    },

    /**
     * @ignore
     * @memberof WPF.RadioButtonTOBehavior
     */
    _properties: {
        /**
         * Indicates whether this radio button is set.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether this radio button is set.
         */
        isChecked: {
            wiredName: "checked"
        },

        /**
         *  The name of this object.
         *  @function
         * @returns {Promise<string>} a promise that is fulfilled when the operation is performed.
         */
        name: {

        }
    }
};

module.exports.RadioButton = RadioButton;
module.exports.RadioButtonTO = RadioButtonTO;
