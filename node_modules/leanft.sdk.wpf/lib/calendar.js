// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/18/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBaseDescription = require("./ui_object_base.js").UiObjectBaseDescription;
var UiObjectBaseTO = require("./ui_object_base.js").UiObjectBaseTO;
var CalendarConverter = Core.CalendarConverter;
var Convert = Core.Convert;
var StringUtils = Core.StringUtils;
var DateFormatType = Core.DateFormatType;

/**
 * CalendarDescriptionBehavior - the description for a Calendar object
 * @memberof WPF
 * @ignore
 */
var CalendarDescriptionBehavior = {
    /**
     * The help text associated with the element.
     * @param {string} [helpText] The help text associated with the element.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the help text associated with the element;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    helpText: function (helpText) {
        return this._simplePropertyHandler("helptext", helpText);
    },

    /**
     * The text associated with the parent object of the object.
     * @param {string} [parentText] The text associated with the parent object of the object.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the text associated with the parent object of this object;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    parentText: function (parentText) {
        return this._simplePropertyHandler("parent text", parentText);
    }
};

/**
 * The description of a Calendar test object.
 * @param {Object} [props] Initializes a Calendar test object using the supplied property bag.
 * @returns {Calendar} the description object that was initialized.
 * @class Calendar
 * @extends WPF.UiObjectBaseDescription
 * @mixes WPF.CalendarDescriptionBehavior
 * @memberof WPF
 */
function Calendar(props) {
    var calendarDesc = new UiObjectBaseDescription("Calendar");
    Utils.extend(calendarDesc, CalendarDescriptionBehavior);
    calendarDesc._defineByPropertyBag(props);
    return calendarDesc;
}

/**
 * A Calendar object
 * @constructor
 * @class CalendarTO
 * @extends WPF.UiObjectBaseTO
 * @mixes WPF.CalendarTOBehavior._properties
 * @mixes WPF.CalendarTOBehavior._methods
 * @memberof WPF
 */
function CalendarTO(session, description) {
    description = description || Calendar();
    var calendarTO = new UiObjectBaseTO("WpfCalendar", session, description);
    calendarTO._mergeBehavior(CalendarTOBehavior);
    return calendarTO;
}

//Consts
var dateWiredName = "date";

/**
 * The behavior of the Calendar object
 * @memberof WPF
 * @ignore
 */
var CalendarTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.CalendarTOBehavior
     */
    _properties: {
        /**
         * The help text associated with the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the help text associated with the object.
         */
        helpText: {
            wiredName: "helptext"
        },

        /**
         * The text associated with the parent object of the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text associated with the parent object of the object.
         */
        parentText: {
            wiredName: "parent text"
        },

        /*jshint eqnull:true */
        /**
         * The date or the start date of the date range associated with the object.
         * Note:
         * - If a date range is selected, the Date property returns the start date of the range.
         * - If you try to retrieve a date value from a WPF calendar object (e.g. calendar.Date; calendar.Date.Month;  calendar.Date.Year) before performing an operation on it, LeanFT returns an exception of type: InvalidOperationException.
         * Therefore, make sure to precede the retrieve value step with a step that performs an operation on the calendar, such as using {@link WPF.CalendarTO.setDate} to set the date on the calendar to the current date.
         * @function
         * @returns {Promise<Date>} a promise that is fulfilled with the date or the start date of the date range associated with the object.
         */
		 date: {
			type: 'date',
			getter: function () {
				return this._getROProperty(dateWiredName, arguments).then(function (dateString) {
					if (StringUtils.isNullOrEmpty(dateString)) {
						throw new Error("Can't determine the current date of the test object.");
					}

					if (CalendarConverter.isNativeSingleDateFormat(dateString)) {
						return CalendarConverter.parseNativeSingleDateFormat(dateString);
					}

					return CalendarConverter.parseNativeDateRangesFormat(dateString)[0].startDate;
				});
            }
        },

        /*jshint eqnull:true */
        /**
         * The selected date range of this Month Calendar control in multi-selection mode.
         * If a single date is selected in the calendar:
         * - dateRanges returns an array with a single element
         * - Both DateRange.StartDate and DateRange.EndDate are equal to the selected date
         * @function
         * @returns {Promise<Object[]>} a promise that is fulfilled with the selected date range of this Month Calendar control in multi-selection mode.
         */
        dateRanges: {
            type: 'daterange',
            wiredName: dateWiredName,
            getter: function () {
                return this._getROProperty(dateWiredName, arguments).then(function (dateString) {
                    if (StringUtils.isNullOrEmpty(dateString)) {
                        throw new Error("Can't determine the current date of the test object.");
                    }

                    return CalendarConverter.parseNativeDateRangesFormat(dateString);
                });
            }
        }
    },

    /**
     * @ignore
     * @memberof WPF.CalendarTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the date of a WPF calendar or of a date picker.
         * @function
         * @param {Date} date The date to set.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @memberof WPF.CalendarTO
         */
        setDate: function (date) {
            if (date == null)
                throw new Error("ArgumentException: parameter date can not be null");
            return this._executeWithEvents(arguments, "SetDate", CalendarConverter.convertToNativeSingleDateFormat(date));
        },

        /*jshint eqnull:true */
        /**
         * Sets the date range of a WPF calendar or the date of a date picker.
         * @function
         * @param {Object | Date} dateRangeOrStartDate The date range to set or the start date of the range. If it is a date range, the start date is dateRangeOrStartDate.startDate and the end date is dateRangeOrStartDate.endDate.
         * @param {Date} [endDate] The end date of the range.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setDateRange: function (dateRangeOrStartDate, endDate) {
            if (dateRangeOrStartDate == null)
                throw new Error("ArgumentException: parameter dateRangeOrStartDate can not be null");

            var startDate = dateRangeOrStartDate;

            if (dateRangeOrStartDate.startDate != null) {
                startDate = dateRangeOrStartDate.startDate;
                endDate = dateRangeOrStartDate.endDate;
            }

            if (startDate == null)
                throw new Error("ArgumentException: parameter startDate can not be null");

            if (endDate == null)
                throw new Error("ArgumentException: parameter endDate can not be null");

            return this._executeWithEvents(arguments, "SetDate", (endDate.getTime() === startDate.getTime()) ?
                CalendarConverter.convertToNativeSingleDateFormat(startDate) :
                CalendarConverter.convertToNativeSingleDateRangeFormat({
                startDate: startDate,
                endDate: endDate
            }));
        },

        /*jshint eqnull:true */
        /**
         * Sets the date ranges of a WPF calendar or the date of a date picker.
         * @function
         * @param {Object[]} dateRanges Array of the date ranges to set.
         * @param {Date} dateRanges[i].startDate Start date of each date range element.
         * @param {Date} dateRanges[i].endDate End date of each date range element.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setDateRanges: function (dateRanges) {
            if(dateRanges == null)
                throw new Error("ArgumentException: Null dates array was passed as argument");

            if (!Array.isArray(dateRanges)) {
                dateRanges = Array.from(arguments);
            }

            if(dateRanges.length === 0)
                throw new Error("ArgumentException: An empty date ranges array was passed as argument");

            var returnPromise = this.setDateRange(dateRanges[0]);

            if(dateRanges.length === 1) {
                return returnPromise;
            }

            var dateRangesToAppend = dateRanges.slice(1);
            dateRangesToAppend.forEach(function (dateRangeToAppend) {
                returnPromise = returnPromise.then(function (dateRangeToAppend) {
                    var dateRangeString = (dateRangeToAppend.endDate.getTime() === dateRangeToAppend.startDate.getTime()) ?
                        CalendarConverter.convertToNativeSingleDateFormat(dateRangeToAppend.startDate) :
                        CalendarConverter.convertToNativeSingleDateRangeFormat(dateRangeToAppend);
                    return this._executeWithEvents(arguments, "SetDate", dateRangeString, true);
                }.bind(this, dateRangeToAppend));
            }, this);

            return returnPromise;
        },

        /*jshint eqnull:true */
        /**
         * Sets the month in a WPF calendar.
         * @function
         * @param {number} month The month to be set for the calendar. Possible values: 1 to 12.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setMonth: function (month) {
            if (month == null)
                throw new Error("ArgumentException: parameter date can not be null");
            month = Convert.toNumber(month);
            if (month < 1 || month > 12)
                throw new Error("ArgumentException: Invalid month argument passed. Valid months are numbers between 1 and 12");
            return this._executeWithEvents(arguments, "SetMonth", month);
        },

        /*jshint eqnull:true */
        /**
         * Sets the year in a WPF calendar.
         * @function
         * @param {number} year The year to be set for the calendar.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setYear: function (year) {
            if (year == null)
                throw new Error("ArgumentException: parameter date can not be null");
            return this._executeWithEvents(arguments, "SetYear", Convert.toNumber(year));
        },

        /*jshint eqnull:true */
        /**
         * Returns the date format type.
         * @function
         * @returns {Promise<DateFormatType>} a promise that is fulfilled with the date format type.
         */
        getDateFormatType: function () {
            return this._getROProperty("date", arguments).then(function (dateString) {
                if (StringUtils.isNullOrEmpty(dateString)) {
                    return DateFormatType.none;
                }

                if (CalendarConverter.isNativeSingleDateFormat(dateString)) {
                    return DateFormatType.singleDate;
                }

                if (CalendarConverter.isNativeSingleDateRangeFormat(dateString)) {
                    return DateFormatType.singleDateRange;
                }

                if (CalendarConverter.isNativeMultipleDateRangesFormat(dateString)) {
                    return DateFormatType.multipleDateRanges;
                }

                return DateFormatType.none;
            });
        }
    }
};

module.exports.Calendar = Calendar;
module.exports.CalendarTO = CalendarTO;
