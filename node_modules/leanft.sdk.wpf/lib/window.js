// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 05/24/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MouseButton = Core.MouseButton;
var WindowState = Core.WindowState;
var Convert = Core.Convert;
var WindowObjectBaseBehavior = Core.WindowObjectBaseBehavior;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;

/**
 * WindowDescriptionBehavior - the description for a Window object
 * @memberof WPF
 * @ignore
 */
var WindowDescriptionBehavior = {
    /**
     * Indicates whether the window is modal.
     * @param {boolean} [isModal] When provided, this method acts as a setter and sets the isModal value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isModal value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isModal: function (isModal) {
        return this._propertyHandler("Ismodal", isModal, Convert.toBool);
    },

    /**
     * The text associated with the parent object of this object.
     * @param {string} [parentText] When provided, this method acts as a setter and sets the parentText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored parentText value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    parentText: function (parentText) {
        return this._simplePropertyHandler("parent text", parentText);
    }
};

/**
 * The description of a WPF window test object.
 * @param {Object} [props] Initializes a Window test object using the supplied property bag.
 * @returns {Window} the description object that was initialized.
 * @class Window
 * @memberof WPF
 * @extends WPF.UiObjectBaseDescription
 * @mixes WPF.WindowDescriptionBehavior
 */
function Window(props) {
    var windowDesc = new UiObjectBaseDescription("Window");
    Utils.extend(windowDesc, WindowDescriptionBehavior);
    windowDesc._defineByPropertyBag(props);
    return windowDesc;
}

/**
 * A WPF Window object
 * @constructor
 * @class WindowTO
 * @extends WPF.UiObjectBaseTO
 * @mixes WindowObjectBaseBehavior._methods
 * @mixes WPF.WindowTOBehavior._methods
 * @mixes WPF.WindowTOBehavior._properties
 * @memberof WPF
 */
function WindowTO(session, description) {
    description = description || Window();
    var windowTO = new UiObjectBaseTO("WpfWindow", session, description);
    windowTO._mergeBehavior(WindowObjectBaseBehavior);
    windowTO._mergeBehavior(WindowTOBehavior);
    return windowTO;
}

/**
 * The behavior of a Window/Dialog object
 * @memberof WPF
 * @ignore
 */
var WindowTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.WindowTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Activates the Window/Dialog with a mouse button.
         * @function
         * @param {MouseButton} [button] The mouse button. See {@link MouseButton}
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         */
        activate: function (button) {
            if (button == null) {
                return this._executeWithEvents(arguments, "Activate");
            }
            return this._executeWithEvents(arguments, "Activate", MouseButton._convert(button));
        },

        /**
         * Minimizes the window/dialog.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the minimize operation ends.
         */
        minimize: function () {
            return this._executeWithEvents(arguments, "Minimize");
        }
    },

    /**
     * @ignore
     * @memberof WPF.WindowTOBehavior
     */
    _properties: {
        /*jshint eqnull:true */
        /**
         * Gets the window/dialog state.
         * @function
         * @returns {Promise<WindowState>} a promise that is fulfilled with the window/dialog state. See {@link WindowState} .
         */
        windowState: function () {
            return this._getROProperty("WindowVisualState", arguments).then(function (state) {
                if (state == null) {
                    throw new Error("Can't determine the WindowState of the test object.");
                }

                var lowerState = state.toLowerCase();
                if (lowerState === "maximized") {
                    return WindowState.maximized;
                }
                else if (lowerState === "minimized") {
                    return WindowState.minimized;
                }
                else {
                    return WindowState.normal;
                }
            });
        },

        /**
         * Indicates whether this window is modal.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the window/dialog is modal or not.
         */
        isModal: {
            wiredName: "Ismodal"
        },

        /**
         * The text associated with the parent object of this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the window/dialog text.
         */
        parentText: {
            wiredName: "parent text"
        }
    }
};

module.exports.Window = Window;
module.exports.WindowTO = WindowTO;
