// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/15/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var ContainerBehavior = Core.ContainerBehavior;
var StringUtils = Core.StringUtils;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var TreeViewNode = require("./treeview_node.js").TreeViewNode;

/**
 * TreeViewDescriptionBehavior - The description of a WPF TreeView test object.
 * @memberof WPF
 * @ignore
 */
var TreeViewDescriptionBehavior = {
    /**
     * The name of this object.
     * @param {string} [name] When provided, this method acts as a setter and sets the name value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored name value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    name: function (name) {
        return this._simplePropertyHandler("name", name);
    },

    /**
     * The text associated with the parent object of this object.
     * @param {string} [parentText] When provided, this method acts as a setter and sets the parentText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored parentText value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    parentText: function (parentText) {
        return this._simplePropertyHandler("parent text", parentText);
    },

    /**
     * All of the visible nodes in the tree-view object.
     * @param {string[]} [visibleNodes] When provided, this method acts as a setter and sets the visibleNodes value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored visibleNodes value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    visibleNodes: function (visibleNodes) {
        return this._propertyHandler("all items", visibleNodes, StringUtils.joinFunc("\n"), StringUtils.splitFunc("\n"));
    },

    /**
     * All of the selected nodes in the tree-view object.
     * @param {string[]} [selectedNodes] When provided, this method acts as a setter and sets the selectedNodes value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored selectedNodes value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedNodes: function (selectedNodes) {
        return this._propertyHandler("selection", selectedNodes, StringUtils.joinFunc("\n"), StringUtils.splitFunc("\n"));
    }
};

/**
 * The description of a WPF TreeView test object.
 * @param {Object} [props] Initializes a TreeView test object using the supplied property bag.
 * @returns {TreeView} the description object that was initialized.
 * @class TreeView
 * @memberof WPF
 * @extends WPF.UiObjectBaseDescription
 * @mixes WPF.TreeViewDescriptionBehavior
 */
function TreeView(props) {
    var treeViewDesc = new UiObjectBaseDescription("TreeView");
    Utils.extend(treeViewDesc, TreeViewDescriptionBehavior);
    treeViewDesc._defineByPropertyBag(props);
    return treeViewDesc;
}

/**
 * A .NET WPF tree-view object.
 * @constructor
 * @class TreeViewTO
 * @extends WPF.UiObjectBaseTO
 * @mixes ContainerBehavior
 * @mixes WPF.TreeViewTOBehavior._methods
 * @mixes WPF.TreeViewTOBehavior._properties
 * @memberof WPF
 */
function TreeViewTO(session, description) {
    description = description || TreeView();
    var treeViewTO = new UiObjectBaseTO("WpfTreeView", session, description);
    treeViewTO._mergeBehavior(ContainerBehavior);
    treeViewTO._mergeBehavior(WrappedItemExecutorBehavior);
    treeViewTO._mergeBehavior(TreeViewTOBehavior);
    return treeViewTO;
}

//Consts
var allItemsWiredName = "all items";
var selectedItemsWiredName = "selection";

/**
 * The behaviors of the TreeView object
 * @memberof WPF
 * @ignore
 */
var TreeViewTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.ComboBoxTOBehavior
     */
    _properties: {
        /**
         * The name of this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the treeView's name.
         */
        name: {

        },

        /**
         * The text associated with the parent object of this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the treeView's parent text.
         */
        parentText: {
            wiredName: "parent text"
        },

        /**
         * Returns an array of all visible nodes in the treeview.
         * @function
         * @returns {Promise<TreeViewNode[]>} a promise that is fulfilled with an array of all visible nodes in the tree view. See {@link WPF.TreeViewNode}
         */
        visibleNodes: {
            wiredName: allItemsWiredName,
            getter: function () {
                return this._executeWithEvents(arguments, "GetItemsCount").then((function (itemCount) {
                    if (itemCount === 0)
                        return [];
                    return this._getROPropertyWithoutEvents(allItemsWiredName).then((function (allItems) {
                        var listOfItems = allItems.split("\n", itemCount);
                        return listOfItems.map(function (item, index) {
                            return this._createItem(index + this._minimumItemIndex, item);
                        }, this);
                    }).bind(this));
                }).bind(this));
            }
        },

        /**
         * Returns an array of all selected nodes in the treeview.
         * @function
         * @returns {Promise<TreeViewNode[]>} a promise that is fulfilled with an array of all selected nodes in the treeview. See {@link WPF.TreeViewNode}
         */
        selectedNodes: {
            wiredName: selectedItemsWiredName,
            getter: function () {
                return this._getROProperty(selectedItemsWiredName, arguments).then((function (result) {
                    if (StringUtils.isNullOrEmpty(result))
                        return [];
                    var listOfItems = result.split("\n");
                    return listOfItems.map(function (item) {
                        item = item.replace("\\", ";");
                        return this._createItem(item, item);
                    }, this);
                }).bind(this));
            }
        }
    },

    /**
     * @ignore
     * @memberof WPF.ComboBoxTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Select a node.
         * @function
         * @param {TreeViewNode|number|string} node The item to be selected.
         * The input can be the TreeViewNode, the 0-based index of the node or the name/text of the node
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        select: function (node) {
            if (node == null)
                throw new Error("The node cannot be null.");

            if (typeof node === 'object') {
                if (node._identifier == null) {
                    throw new Error("The identifier of the node cannot be null.");
                }
                node = node._identifier;
            }

            return this._executeWithEvents(arguments, "Select", node);
        },

        /*jshint eqnull:true */
        /**
         * Create a TreeViewNode from its given path. When the path is not unique, returns the first matching node.
         * @function
         * @param {string} nodePath The path of the node.
         * @returns {TreeViewNode} TreeViewNode object. See {@link WPF.TreeViewNode}
         */
        getNode: function (nodePath) {
            if (nodePath == null)
                throw new Error("The parameter text cannot be null.");
            return this._createItem(nodePath, nodePath);
        }
    },

    _helpers: {
        /**
         * Collapse a node.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         * @ignore
         */
        _collapseNode: function (identifier) {
            return this._executeNotWrapped(arguments, "Collapse", identifier);
        },

        /**
         * Expand a node.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         * @ignore
         */
        _expandNode: function (identifier) {
            return this._executeNotWrapped(arguments, "Expand", identifier);
        },

        /**
         * Expand all child nodes.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * @returns {Promise<void>} a promise that is fulfilled when the activate operation ends.
         * @ignore
         */
        _expandAll: function (identifier) {
            return this._executeNotWrapped(arguments, "ExpandAll", identifier);
        },

        /**
         * Check if the node is expanded.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the node is expanded or not.
         * @ignore
         */
        _isNodeExpanded: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "expanded");
        },

        /**
         * Get the node's first child path.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<string>} a promise that is fulfilled with the node's first child path.
         * @ignore
         */
        _getNodeFirstChildPath: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "firstchild");
        },

        /**
         * Check if the node has any children.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the node has children or not.
         * @ignore
         */
        _nodeHasChildren: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "haschildren");
        },

        /**
         * Get the node's next sibling path
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<string>} a promise that is fulfilled with the node's next sibling path.
         * @ignore
         */
        _getNodeNextSiblingPath: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "nextsibling");
        },

        /**
         * Get the node's parent path
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<string>} a promise that is fulfilled with the node's parent path.
         * @ignore
         */
        _getNodeParentPath: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "parent");
        },

        /**
         * Get the node's path
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<string>} a promise that is fulfilled with the node's path.
         * @ignore
         */
        _getNodePath: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "path");
        },

        /**
         * Check if the node is selected.
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication whether the node is selected or not.
         * @ignore
         */
        _isNodeSelected: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "selected");
        },

        /**
         * Get the node's state
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<number>} a promise that is fulfilled with the node's state.
         * @ignore
         */
        _getNodeState: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "state");
        },

        /**
         * Get the node's text
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * If it is a string, it is the name of the node.
         * @returns {Promise<string>} a promise that is fulfilled with the node's text.
         * @ignore
         */
        _getNodeText: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "text");
        },

        /**
         * Create an node from the identifier and textRepresentation
         * @param {number|string} identifier The identifier of the node. If it is a number, it is the 0-based index of the node.
         * @param {string} textRepresentation The text representation if the node.
         * @returns {TreeViewNode} The TreeViewNode object
         * @ignore
         */
        _createItem: function (identifier, textRepresentation) {
            return new TreeViewNode(this, identifier, textRepresentation);
        }
    }
};

module.exports.TreeView = TreeView;
module.exports.TreeViewTO = TreeViewTO;
