// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/26/2016.
 */
var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * A single tool bar button in a .NET WPF tool bar.
 * @constructor
 * @class ToolBarItem
 * @mixes WPF.ToolBarItemBehavior._properties
 * @mixes WPF.ToolBarItemBehavior._methods
 * @memberof WPF
 */
function ToolBarItem(ownerToolBar, identifier, textRepresentation) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(ToolBarItemBehavior);
    this._ownerToolBar = ownerToolBar;
    this._identifier = identifier;
    this._textRepresentation = textRepresentation;
}

ToolBarItem.prototype = {
    _ownerToolBar: null,
    _identifier: null,
    _textRepresentation: null
};

/**
 * The methods of ToolBarItemBehavior object.
 * @memberof WPF
 * @ignore
 */
var ToolBarItemBehavior = {
    /**
     * @memberof WPF.ToolBarItemBehavior
     * @ignore
     */
    _properties: {
        /**
         * The identifier of the item.
         * @function
         * @returns {number|string} the identifier of the item.
         */
        identifier: function () {
            return this._identifier;
        },

        /**
         * Indicates whether this toggle button is set.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether this toggle button is set.
         */
        isChecked: function () {
            return this._ownerToolBar._executeWithEventsOnItemOnError(this._ownerToolBar._isItemChecked, this._identifier);
        },

        /**
         * Indicates whether this toolbar item's text is truncated and if an ellipsis (...) is displayed.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether this toolbar item's text is truncated and if an ellipsis (...) is displayed.
         */
        hasEllipses: function () {
            return this._ownerToolBar._executeWithEventsOnItemOnError(this._ownerToolBar._hasItemEllipses, this._identifier);
        },

        /**
         * Indicates whether this toolbar item can accept user input.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether this toolbar item can accept user input.
         */
        isEnabled: function () {
            return this._ownerToolBar._executeWithEventsOnItemOnError(this._ownerToolBar._isItemEnabled, this._identifier);
        },

        /**
         * Indicates whether this toolbar item appears highlighted because the mouse pointer is hovering over it.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether this toolbar item appears highlighted because the mouse pointer is hovering over it.
         */
        isHot: function () {
            return this._ownerToolBar._executeWithEventsOnItemOnError(this._ownerToolBar._isItemHot, this._identifier);
        },

        /**
         * The 1-based index of this toolbar item. The index does not include hidden and separator buttons.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the 1-based index of this toolbar item. The index does not include hidden and separator buttons.
         */
        index: function () {
            return this._ownerToolBar._executeWithEventsOnItemOnError(this._ownerToolBar._getItemIndex, this._identifier);
        },

        /**
         * The name of this toolbar item.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of this toolbar item.
         */
        name: function () {
            return this._ownerToolBar._executeWithEventsOnItemOnError(this._ownerToolBar._getItemName, this._identifier);
        },

        /**
         * The control type of this toolbar item.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the control type of this toolbar item.
         */
        type: function () {
            return this._ownerToolBar._executeWithEventsOnItemOnError(this._ownerToolBar._getItemType, this._identifier);
        },

        /**
         * The text representation of the item.
         * @function
         * @returns {string} the text representation of the item.
         */
        textRepresentation: function () {
            return this._textRepresentation;
        }
    }
};

module.exports.ToolBarItem = ToolBarItem;
