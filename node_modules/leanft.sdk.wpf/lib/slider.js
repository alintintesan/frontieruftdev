// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/05/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var CheckedState = Core.CheckedState;
var Convert = Core.Convert;

/**
 * Description for a WPF Slider object.
 * @memberof WPF
 * @ignore
 */
var SliderDescriptionBehavior = {
    /**
     * The name of this object.
     * @param {string} [name] The name of this object.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the name of this object;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    name: function (name) {
        return this._simplePropertyHandler("name", name);
    },

    /**
     * The current position of the range element.
     * @param {number} [position] The current position of the range element.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current position of the range element;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    position: function(position) {
        return this._propertyHandler("Value", position, Convert.toNumber);
    }
};

/**
 * @param {Object} [props] Initializes a Slider test object using the supplied property bag.
 * @returns {Slider} the description object that was initialized.
 * @constructor
 * @class Slider
 * @extends WPF.UiObjectBaseDescription
 * @mixes WPF.SliderDescriptionBehavior
 * @memberof WPF
 */
function Slider(props){
    var sliderDesc = new UiObjectBaseDescription("Slider");
    ObjUtils.extend(sliderDesc, SliderDescriptionBehavior);
    sliderDesc._defineByPropertyBag(props);
    return sliderDesc;
}

/**
 * A SliderTO object
 * @constructor
 * @class SliderTO
 * @extends WPF.UiObjectBaseTO
 * @mixes WPF.SliderTOBehavior._methods
 * @mixes WPF.SliderTOBehavior._properties
 * @memberof WPF
 */
function SliderTO(session, description) {
    description = description || Slider();
    var sliderTO = new UiObjectBaseTO("WpfSlider", session, description);
    sliderTO._mergeBehavior(SliderTOBehavior);
    return sliderTO;
}

//Consts
var maxWiredName = "Maximum";
var minWiredName = "Minimum";
var positionWiredName = "Value";

/**
 * The behavior of the SliderTO object
 * @memberof WPF
 * @ignore
 */
var SliderTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.SliderTOBehavior
     */
    _properties: {
        /**
         * The name of this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of this object.
         */
        name: {

        },

        /**
         * The maximum position of this slider.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the maximum position of this slider.
         */
        maximum: {
            type: 'double',
            wiredName: maxWiredName,
            getter: function () {
                return this._getROProperty(maxWiredName, arguments).then(Convert.toNumber);
            }
        },

        /**
         * The minimum position of this slider.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the minimum position of this slider.
         */
        minimum: {
            type: 'double',
            wiredName: minWiredName,
            getter: function () {
                return this._getROProperty(minWiredName, arguments).then(Convert.toNumber);
            }
        },

        /**
         * The current position of this slider.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the current position of this slider.
         */
        position: {
            type: 'double',
            wiredName: positionWiredName,
            getter: function () {
                return this._getROProperty(positionWiredName, arguments).then(Convert.toNumber);
            }
        }
    },

    /**
     * @ignore
     * @memberof WPF.SliderTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the slider position.
         * @function
         * @param {number} position The slider position to set.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        setPosition: function (position) {
            if (position == null)
                throw new Error("The parameter position cannot be null.");
            return this._executeWithEvents(arguments, "Set", Convert.toNumber(position));
        }
    }
};

module.exports.Slider = Slider;
module.exports.SliderTO = SliderTO;
