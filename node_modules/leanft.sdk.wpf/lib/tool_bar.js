// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/26/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var StringUtils = Core.StringUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;
var ToolBarItem = require("./toolbar_item.js").ToolBarItem;

/**
 * The behavior description of a WPF ToolBar test object.
 * @memberof WPF
 * @ignore
 */
var ToolBarDescriptionBehavior = {
    /**
     * The name of this object.
     * @param {string} [name] The name of this object.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the name of this object;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    name: function (name) {
        return this._simplePropertyHandler("name", name);
    }
};

/**
 * The description of a WPF ToolBar test object.
 * @param {Object} [props] Initializes a ToolBar test object using the supplied property bag.
 * @returns {ToolBar} the description object that was initialized.
 * @class ToolBar
 * @memberof WPF
 * @extends WPF.UiObjectBaseDescription
 */
function ToolBar(props) {
    var toolBarDesc = new UiObjectBaseDescription("ToolBar");
    Utils.extend(toolBarDesc, ToolBarDescriptionBehavior);
    toolBarDesc._defineByPropertyBag(props);
    return toolBarDesc;
}

/**
 * A ToolBar test object.
 * @constructor
 * @class ToolBarTO
 * @extends WPF.UiObjectBaseTO
 * @mixes WPF.ToolBarTOBehavior._properties
 * @mixes WPF.ToolBarTOBehavior._methods
 * @memberof WPF
 */
function ToolBarTO(session, description) {
    description = description || ToolBar();
    var toolBarTO = new UiObjectBaseTO("WpfToolBar", session, description);
    toolBarTO._mergeBehavior(WrappedItemExecutorBehavior);
    toolBarTO._mergeBehavior(ToolBarTOBehavior);
    toolBarTO._minimumItemIndex = 1;
    return toolBarTO;
}

/**
 * The behavior of the ToolBar object.
 * @memberof WPF
 * @ignore
 */
var ToolBarTOBehavior = {
    /**
     * @memberof WPF.ToolBarTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * The name of this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of this object.
         */
        name: {

        },

        /**
         * Returns the toolbar items in this toolbar.
         * @function
         * @returns {Promise<ToolBarItem[]>} a promise that is fulfilled with an array of all items in this ToolBar. See {@link WPF.ToolBarItem}.
         */
        items: function () {
            return this._executeWithEventsOnError(arguments, "GetContent").then(this._nativeStringToMenuItems.bind(this));
        }
    },

    /**
     * @memberof WPF.ToolBarTOBehavior
     * @ignore
     */
    _methods: {

        /**
         * Displays the overflow area of this toolbar.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        showOverflow: function () {
            return this._executeWithEvents(arguments, "ShowOverflow");
        },

        /*jshint eqnull:true */
        /**
         * Indicates whether the item resides in the overflow area of this toolbar.
         * @function
         * @param {number|string} itemPathOrIndex The identifier of the item. If it is a number, it is the 1-based index of the toolbar item. If it is a string, it is the name of the toolbar item.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the item resides in the overflow area of this toolbar.
         * @ignore
         */
        isItemOverflow: function (itemPathOrIndex) {
            if (itemPathOrIndex == null)
                throw new Error("ArgumentException: itemPathOrIndex is required.");
            return this._executeWithEvents(arguments, "IsOverflow", itemPathOrIndex);
        },

        /**
         * Creates a tool bar item from the identifier and the text representation
         * @function
         * @param {number|string} identifier The identifier of the ToolBarItem. If it is a number, it is the 1-based index of the item. If it is a string, it is the name of the item.
         * @param {string} textRepresentation The text representation of the ToolBarItem.
         * @returns {ToolBarItem} the ToolBarItem object.
         * @ignore
         */
        createItemFromIdentifier: function (identifier, textRepresentation) {
            return this._createItem(identifier, textRepresentation);
        }
    },

    _helpers: {
        /**
         * Indicates whether the item is checked.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 1-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the item is checked.
         * @ignore
         */
        _isItemChecked: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "checked");
        },

        /**
         * Indicates whether the toolbar item's text is truncated and if an ellipsis (...) is displayed.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 1-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the toolbar item's text is truncated and if an ellipsis (...) is displayed or not.
         * @ignore
         */
        _hasItemEllipses: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "ellipses");
        },

        /**
         * Indicates whether the item is enabled.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 1-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the toolbar item is enabled or not.
         * @ignore
         */
        _isItemEnabled: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "enabled");
        },

        /**
         * Indicates whether the item is hot (appears highlighted on mouseover).
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 1-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the toolbar item is hot or not.
         * @ignore
         */
        _isItemHot: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "hot");
        },

        /**
         * Gets the item index.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 1-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<number>} a promise that is fulfilled with the toolbar item index.
         * @ignore
         */
        _getItemIndex: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "index");
        },

        /**
         * Gets the item name.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 1-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<string>} a promise that is fulfilled with the toolbar item name.
         * @ignore
         */
        _getItemName: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "name");
        },

        /**
         * Gets the item type.
         * @param {number|string} identifier The identifier of the item. If it is a number, it is the 1-based index of the item. If it is a string, it is the name of the item.
         * @returns {Promise<string>} a promise that is fulfilled with the toolbar item type.
         * @ignore
         */
        _getItemType: function (identifier) {
            return this._executeNotWrapped(arguments, "GetItemProperty", identifier, "type");
        },

        /*jshint eqnull:true */
        /**
         * @ignore
         */
        _nativeStringToMenuItems: function (nativeString) {
            if (StringUtils.isNullOrEmpty(nativeString))
                return [];
            var listOfItems = nativeString.split("\n");
            return listOfItems.map(function (item) {
                return this._createItem(item, item);
            }, this);
        },

        /**
         * Creates a tool bar item from the identifier and the text representation
         * @param {number|string} identifier The identifier of the ToolBarItem. If it is a number, it is the 1-based index of the item.
         * @param {string} textRepresentation The text representation of the ToolBarItem.
         * @returns {ToolBarItem} the ToolBarItem object.
         * @ignore
         */
        _createItem: function (identifier, textRepresentation) {
            return new ToolBarItem(this, identifier, textRepresentation);
        }
    }
};

module.exports.ToolBarTO = ToolBarTO;
module.exports.ToolBar = ToolBar;
