// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/14/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var CheckedState = Core.CheckedState;
var Convert = Core.Convert;

/**
 * Description for a WPF check box object.
 * @memberof WPF
 * @ignore
 */
var CheckBoxDescriptionBehavior = {
    /**
     * The text associated with the parent of the check box.
     * @param {string} [parentText] When provided, this method acts as a setter and sets the parentText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored parentText value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    parentText: function (parentText) {
        return this._simplePropertyHandler("parent text", parentText);
    },

    /**
     * The check box's help text.
     * @param {string} [helptext] When provided, this method acts as a setter and sets the helptext value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored helptext value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    helpText: function (helpText) {
        return this._simplePropertyHandler("helptext", helpText);
    },

    /**
     * The check box's IsChecked value.
     * @param {boolean} [IsChecked] When provided, this method acts as a setter and sets the IsChecked value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current IsChecked value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isChecked: function(isChecked) {
        return this._propertyHandler("IsChecked", isChecked, Convert.toBool);
    },

    /**
     * The check box's IsThreeState value.
     * @param {boolean} [IsThreeState] When provided, this method acts as a setter and sets the IsThreeState value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current IsThreeState value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isThreeState: function(isThreeState) {
        return this._propertyHandler("IsThreeState", isThreeState, Convert.toBool);
    },

    /**
     * The check box's state.
     * @param {CheckedState} [state] When provided, this method acts as a setter and sets the state value.
     * @returns {CheckedState | Description} If no parameter is provided, the method acts as a getter and returns the current state value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    state: function(state) {
        return this._propertyHandler("checked", state, CheckedState._checkedStateToNative4DotNet, CheckedState._nativeToCheckedState4DotNet);
    }
};

/**
 * @param {Object} [props] Initializes a CheckBox test object using the supplied property bag.
 * @returns {CheckBox} the description object that was initialized.
 * @constructor
 * @class CheckBox
 * @extends WPF.UiObjectBaseDescription
 * @mixes WPF.CheckBoxDescriptionBehavior
 * @memberof WPF
 */
function CheckBox(props){
    var checkBoxDesc = new UiObjectBaseDescription("CheckBox");
    ObjUtils.extend(checkBoxDesc, CheckBoxDescriptionBehavior);
    checkBoxDesc._defineByPropertyBag(props);
    return checkBoxDesc;
}

/**
 * A CheckBoxTO object
 * @constructor
 * @class CheckBoxTO
 * @extends WPF.UiObjectBaseTO
 * @mixes WPF.CheckBoxTOBehavior._properties
 * @mixes WPF.CheckBoxTOBehavior._methods
 * @memberof WPF
 */
function CheckBoxTO(session, description) {
    description = description || CheckBox();
    var checkBoxTO = new UiObjectBaseTO("WpfCheckBox", session, description);
    checkBoxTO._mergeBehavior(CheckBoxTOBehavior);
    return checkBoxTO;
}

//Consts
var checkedWiredName = "checked";

/**
 * The behavior of the CheckBoxTO object
 * @memberof WPF
 * @ignore
 */
var CheckBoxTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.CheckBoxTOBehavior
     */
    _properties: {
        /**
         * The text associated with the parent of the check box.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text associated with the parent of the check box.
         */
        parentText: {
            wiredName: "parent text"
        },

        /**
         * The check box's help text.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the check box's help text.
         */
        helpText: {
            wiredName: "helptext"
        },

        /**
         * Checks if the check box is checked or not.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled when the operation is performed.
         */
        isChecked: {
            wiredName: "IsChecked"
        },

        /**
         * Checks if the check box is 3-state or not.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled when the operation is performed.
         */
        isThreeState: {
            wiredName: "IsThreeState"
        },

        /**
         * Gets the state of the check box
         * @function
         * @returns {Promise<CheckedState>} a promise that is fulfilled when the operation is performed.
         */
        state: {
            type: 'enum',
            enumType: CheckedState,
            enumName: 'CheckedState',
            wiredName: checkedWiredName,
            getter: function () {
                return this._getROProperty(checkedWiredName, arguments).then(CheckedState._nativeToCheckedState4DotNet);
            }
        }
    },

    /**
     * @ignore
     * @memberof WPF.CheckBoxTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the specified state.
         * @function
         * @param {CheckedState} state The state to set.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        set: function (state) {
            if (state == null)
                throw new Error("The parameter state cannot be null.");
            return this._executeWithEvents(arguments, "Set", CheckedState._checkedStateToNative(state));
        }
    }
};

module.exports.CheckBox = CheckBox;
module.exports.CheckBoxTO = CheckBoxTO;
