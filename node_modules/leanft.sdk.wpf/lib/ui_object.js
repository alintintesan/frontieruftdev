// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 05/24/2016. 
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;

/**
 * UIObjectDescriptionBehavior - the description for a standard WPF object
 * @memberof WPF
 * @ignore
 */
var UIObjectDescriptionBehavior = {
    /**
     * The name of this object.
     * @param {string} [name] When provided, this method acts as a setter and sets the name value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored name value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    name: function (name) {
        return this._simplePropertyHandler("name", name);
    },

    /**
     * This object's name as set by the developer.
     * @param {string} [parentText] When provided, this method acts as a setter and sets the parentText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored parentText value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    parentText: function (parentText) {
        return this._simplePropertyHandler("parent text", parentText);
    }
};

/**
 * The description of a standard WPF UiObject test object.
 * @param {Object} [props] Initializes a standard WPF test object using the supplied property bag.
 * @returns {UiObject} the description object that was initialized.
 * @class UiObject 
 * @extends WPF.UiObjectBaseDescription
 * @mixes WPF.UIObjectDescriptionBehavior
 * @memberof WPF
 */
function UiObject(props) {
    var uiObjectDesc = new UiObjectBaseDescription("UiObject");
    Utils.extend(uiObjectDesc, UIObjectDescriptionBehavior);
    uiObjectDesc._defineByPropertyBag(props); 
    return uiObjectDesc;
}

/**
 * A standard WPF object
 * @constructor
 * @class UIObjectTO 
 * @extends WPF.UiObjectBaseTO 
 * @mixes WPF.UIObjectTOBehavior._properties
 * @memberof WPF
 */
function UIObjectTO(session, description) {
    description = description || UiObject();
    var uiObjectTO = new UiObjectBaseTO("WpfObject", session, description);
    uiObjectTO._mergeBehavior(UIObjectTOBehavior);
    return uiObjectTO;
}

/**
 * The behavior of a standard WPF object
 * @memberof WPF
 * @ignore
 */
var UIObjectTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.UIObjectTOBehavior
     */
    _properties: {
        /**
         * The name of this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's name.
         */
        name: {

        },

        /**
         * The text associated with the parent object of this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's parent text.
         */
        parentText: {
            wiredName: "parent text"
        }
    }
};

module.exports.UiObject = UiObject;
module.exports.UIObjectTO = UIObjectTO;