// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/15/2016.
 */
var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;
var ItemDragAndDropBehavior = Core.ItemDragAndDropBehavior;

/**
 * A TreeViewNode object
 * @constructor
 * @class TreeViewNode
 * @mixes ItemDragAndDropBehavior._properties
 * @mixes ItemDragAndDropBehavior._methods
 * @mixes WPF.TreeViewNodeBehavior._properties
 * @mixes WPF.TreeViewNodeBehavior._methods
 * @memberof WPF
 */
function TreeViewNode(ownerTreeView, identifier, textRepresentation) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(TreeViewNodeBehavior);
    this._mergeBehavior(ItemDragAndDropBehavior);
    this._ownerTreeView = ownerTreeView;
    this._identifier = identifier;
    this._textRepresentation = textRepresentation;
    this._executeWithEventsOnItem = this._ownerTreeView._executeWithEventsOnItem.bind(this._ownerTreeView, this);
    this._executeWithEventsOnItemOnError = this._ownerTreeView._executeWithEventsOnItemOnError.bind(this._ownerTreeView, this);
}

TreeViewNode.prototype = {
    _ownerTreeView: null,
    _identifier: null,
    _textRepresentation: null,
    _executeWithEventsOnItem: null,
    _executeWithEventsOnItemOnError: null,
};

/**
 * The methods of the TreeViewNode object
 * @memberof WPF
 * @ignore
 */
var TreeViewNodeBehavior = {
    _helpers: {
        /**
         * Gets the identifier of the item.
         * @returns {number|string} the identifier of the item.
         * @ignore
         */
        _getIdentifier: function () {
            return this._identifier;
        },

        /**
         * Gets the text representation of the item.
         * @returns {string} the text representation of the item.
         * @ignore
         */
        _getTextRepresentation: function () {
            return this._textRepresentation;
        },

        /**
         * Gets the TreeView object of the node.
         * @returns {TreeView} the TreeView object of the node.
         * @ignore
         */
        _getOwnerTO: function () {
            return this._ownerTreeView;
        }
    },

    /**
     * @memberof WPF.TreeViewNodeBehavior
     * @ignore
     */
    _properties:{
        /**
         * Indicates whether this node is currently expanded.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the node is expanded or not.
         */
        isExpanded: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._isNodeExpanded, this._identifier);
        },

        /**
         * The full path of the node's first child node as a semi-colon delimited string.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the full path of the node's first child node.
         */
        firstChildPath: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._getNodeFirstChildPath, this._identifier);
        },

        /**
         * Indicates whether this node has children.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an idication of whether the node has children or not.
         */
        hasChildren: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._nodeHasChildren, this._identifier);
        },

        /**
         * The full path of this node's next sibling node as a semi-colon delimited string.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the full path of the node's next sibling node.
         */
        nextSiblingPath: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._getNodeNextSiblingPath, this._identifier);
        },

        /**
         * The full path of the node's parent node as a semi-colon delimited string.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the full path of the node's parent node.
         */
        parentPath: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._getNodeParentPath, this._identifier);
        },

        /**
         * The full path of the node as a semi-colon delimited string.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the full path of the node.
         */
        path: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._getNodePath, this._identifier);
        },

        /**
         * Indicates whether this node is selected.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the node is selected or not.
         */
        isSelected: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._isNodeSelected, this._identifier);
        },

        /**
         * The current state of the node's check box
         * Remarks: Applies only to nodes with check boxes.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the current state of the check box of the node.
         */
        state: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._getNodeState, this._identifier);
        },

        /**
         * The text of this node, or an empty string ("") if the node does not contain any text.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text of the node.
         */
        text: function () {
            return this._executeWithEventsOnItemOnError(this._ownerTreeView._getNodeText, this._identifier);
        }
    },

    /**
     * @memberof WPF.TreeViewNodeBehavior
     * @ignore
     */
    _methods: {
        /**
         * Hides this node's sub-nodes in the expanded TreeView object.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        collapse: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._collapseNode, this._identifier);
        },

        /**
         * Displays this node's hidden sub-nodes in the TreeView object.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        expand: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._expandNode, this._identifier);
        },

        /**
         * Expands this node and all of the nodes below it in the TreeView object.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        expandAll: function () {
            return this._executeWithEventsOnItem(this._ownerTreeView._expandAll, this._identifier);
        }
    }
};

module.exports.TreeViewNode = TreeViewNode;
