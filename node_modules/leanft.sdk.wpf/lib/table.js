// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/05/2016.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var ObjUtils = Core.ObjectUtils;
var ExecuteItemsWithEventsBehavior = Core.ExecuteItemsWithEventsBehavior;
var TableBaseOperationBehavior = Core.TableBaseOperationBehavior;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var TableCell = require("./table_cell.js").TableCell;

/**
 * Description for a WPF Table object.
 * @memberof WPF
 * @ignore
 */
var TableDescriptionBehavior = {
    /**
     * The name of this object.
     * @param {string} [name] The name of this object.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the name of this object;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    name: function (name) {
        return this._simplePropertyHandler("name", name);
    }
};

/**
 * @param {Object} [props] Initializes a Table test object using the supplied property bag.
 * @returns {Table} the description object that was initialized.
 * @constructor
 * @class Table
 * @extends WPF.UiObjectBaseDescription
 * @mixes WPF.TableDescriptionBehavior
 * @memberof WPF
 */
function Table(props){
    var tableDesc = new UiObjectBaseDescription("Table");
    ObjUtils.extend(tableDesc, TableDescriptionBehavior);
    tableDesc._defineByPropertyBag(props);
    return tableDesc;
}

/**
 * A WPF Table test object
 * @constructor
 * @class TableTO
 * @extends WPF.UiObjectBaseTO
 * @mixes TableBaseOperationBehavior._properties
 * @mixes TableBaseOperationBehavior._methods
 * @mixes ExecuteItemsWithEventsBehavior
 * @mixes WPF.TableTOBehavior._methods
 * @mixes WPF.TableTOBehavior._properties
 * @memberof WPF
 */
function TableTO(session, description) {
    description = description || Table();
    var tableTO = new UiObjectBaseTO("WpfTable", session, description);
    tableTO._mergeBehavior(TableBaseOperationBehavior);
    tableTO._mergeBehavior(ExecuteItemsWithEventsBehavior);
    tableTO._mergeBehavior(TableTOBehavior);
    return tableTO;
}

/**
 * The behavior of the Table object
 * @memberof WPF
 * @ignore
 */
var TableTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.TableTOBehavior
     */
    _properties: {
        /**
         * The name of this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of this object.
         */
        name: {

        },

         /**
         * Returns a promise for all the cells in a table (when called without arguments), all the cells in a row (when called with row only), or a specified cell.
         * @function
         * @param {number} [rowIndex] The row index of the specific cell.
         * @param {string|number} [columnOrIndex] The column header or 0-based column index in the row.
         * @returns {Promise<TableCell[][] | TableCell[] | TableCell>} a promise that is fulfilled with all the cells in the table (when called without arguments), all the cells in the row (when called with row only), or the specified cell.
         */
        cells: function (rowIndex, columnOrIndex) {
            return this._cells(rowIndex, columnOrIndex);
        }
    },

    /**
     * @ignore
     * @memberof WPF.TableTOBehavior
     */
    _methods: {
        /*jshint unused:true, eqnull:true */
        /**
         * Double-clicks the specified cell in this grid.
         * @function
         * @param {number} row The 0-based index of the row of the cell to activate.
         * @param {string|number} columnOrIndex The column header name or the 0-based index of the column of the cell to activate.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        activateCell: function (row, columnOrIndex) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnOrIndex == null)
                throw new Error("ArgumentException: columnOrIndex is required.");
            return this._executeWithEvents(arguments, "ActivateCell", Convert.toNumber(row), columnOrIndex);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Adds a cell or an entire row (if columnOrIndex is not given) to the collection of selected items in this multi-selection grid.
         * @function
         * @param {number} row 0-based row number.
         * @param {string|number} [columnOrIndex] The column header name or the 0-based column index. If it is not passed, the entire row is selected.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        extendSelect: function (row, columnOrIndex) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnOrIndex == null)
                return this._executeWithEvents(arguments, "ExtendSelect", Convert.toNumber(row));
            return this._executeWithEvents(arguments, "ExtendSelect", Convert.toNumber(row), columnOrIndex);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Clicks the specified cell in this grid.
         * @function
         * @param {number} row The 0-based row number.
         * @param {string|number} columnOrIndex The column header name or 0-based column index.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        selectCell: function (row, columnOrIndex) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            if (columnOrIndex == null)
                throw new Error("ArgumentException: columnOrIndex is required.");
            return this._executeWithEvents(arguments, "SelectCell", Convert.toNumber(row), columnOrIndex);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Clicks the specified column header in this grid.
         * @function
         * @param {string|number} columnOrIndex The column header name or 0-based column index.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        selectColumn: function (columnOrIndex) {
            if (columnOrIndex == null)
                throw new Error("ArgumentException: columnOrIndex is required.");
            return this._executeWithEvents(arguments, "SelectColumn", columnOrIndex);
        },

        /*jshint unused:true, eqnull:true */
        /**
         * Clicks the specified row header in this grid.
         * @function
         * @param {number} row The 0-based row number.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        selectRow: function (row) {
            if (row == null)
                throw new Error("ArgumentException: row is required.");
            return this._executeWithEvents(arguments, "SelectRow", Convert.toNumber(row));
        },

        /**
         * Creates the TableCell object.
         * @function
         * @param rowIndex The 0-based index.
         * @param columnIndex The 0-based index.
         * @returns {WPF.TableCell} a TableCell object.
         */
        getCell: function (rowIndex, columnIndex) {
            return this._createCell(rowIndex, columnIndex);
        }
    },

    _helpers: {
        /**
         * Gets the number of rows in the table.
         * @returns {Promise<number>} a promise that is fulfilled with the number of rows in the table.
         * @ignore
         */
        _rowCount: function () {
            return this._executeNotWrapped(arguments, "RowCount");
        },

        /**
         * Gets the number of columns in the table.
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns in the table.
         * @ignore
         */
        _columnCount: function () {
            return this._executeNotWrapped(arguments, "ColumnCount");
        },

        /**
         * The x-coordinate (in pixels) of the cell relative to the table.
         * @param {Object} rowIdentifier The 0-based index.
         * @param {Object} columnIdentifier The 0-based index.
         * @returns {Promise<number>} a promise that is fulfilled with the x-coordinate (in pixels) of the cell relative to the table.
         * @ignore
         */
        _getCellX: function (rowIdentifier, columnIdentifier) {
            return this._executeNotWrapped(arguments, "GetCellProperty", rowIdentifier, columnIdentifier, "x");
        },

        /**
         * The y-coordinate (in pixels) of the cell relative to the table.
         * @param {Object} rowIdentifier The 0-based index.
         * @param {Object} columnIdentifier The 0-based index.
         * @returns {Promise<number>} a promise that is fulfilled with the y-coordinate (in pixels) of the cell relative to the table.
         * @ignore
         */
        _getCellY: function (rowIdentifier, columnIdentifier) {
            return this._executeNotWrapped(arguments, "GetCellProperty", rowIdentifier, columnIdentifier, "y");
        },

        /**
         * The height of the cell (in pixels).
         * @param {Object} rowIdentifier The 0-based index.
         * @param {Object} columnIdentifier The 0-based index.
         * @returns {Promise<number>} a promise that is fulfilled with the height of the cell (in pixels).
         * @ignore
         */
        _getCellHeight: function (rowIdentifier, columnIdentifier) {
            return this._executeNotWrapped(arguments, "GetCellProperty", rowIdentifier, columnIdentifier, "height");
        },

        /**
         * The width of the cell (in pixels).
         * @param {Object} rowIdentifier The 0-based index.
         * @param {Object} columnIdentifier The 0-based index.
         * @returns {Promise<number>} a promise that is fulfilled with the width of the cell (in pixels).
         * @ignore
         */
        _getCellWidth: function (rowIdentifier, columnIdentifier) {
            return this._executeNotWrapped(arguments, "GetCellProperty", rowIdentifier, columnIdentifier, "width");
        },

        /**
         * The content of the cell.
         * @param {Object} rowIdentifier The 0-based index.
         * @param {Object} columnIdentifier The 0-based index.
         * @returns {Promise<Object>} a promise that is fulfilled with the content of the cell.
         * @ignore
         */
        _getCellValue: function (rowIdentifier, columnIdentifier) {
            return this._executeNotWrapped(arguments, "GetCellProperty", rowIdentifier, columnIdentifier, "value");
        },

        /**
         * The column header name of the cell.
         * @param {Object} rowIdentifier The 0-based index.
         * @param {Object} columnIdentifier The 0-based index.
         * @returns {Promise<string>} a promise that is fulfilled with the column header name of the cell.
         * @ignore
         */
        _getCellColumnName: function (rowIdentifier, columnIdentifier) {
            return this._executeNotWrapped(arguments, "GetCellProperty", rowIdentifier, columnIdentifier, "colname");
        },

        /**
         * Sets the cell to a new value.
         * @param {Object} rowIdentifier The 0-based index.
         * @param {Object} columnIdentifier The 0-based index.
         * @param {Object} value The new value to be set.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         * @ignore
         */
        _setCellValue: function (rowIdentifier, columnIdentifier, value) {
            return this._executeNotWrapped(arguments, "SetCellData", rowIdentifier, columnIdentifier, value);
        },

        /**
         * Gets the number of rows and columns.
         * @returns {Promise<Object>} a promise that is fulfilled with the number of rows and columns.
         * @ignore
         */
        _getRowAndColumnCount: function () {

            var argumentsToUse = arguments;
            return this._executeNotWrapped(argumentsToUse, "RowCount").then(function (rowCount) {
                return this._executeNotWrapped(argumentsToUse, "ColumnCount").then(function (colCount) {
                    return {
                        rowCount: rowCount,
                        columnCount: colCount
                    };
                });
            }.bind(this));
        },

        /**
         * Gets the number of columns in the table.
         * @returns {Promise<number>} a promise that is fulfilled with the number of columns in the table.
         * @ignore
         */
        _getColumnCount: function () {
            return this._executeNotWrapped(arguments, "ColumnCount");
        },

        /**
         * Creates a TableCell object.
         * @param rowIndex The 0-based index.
         * @param {string|number} columnOrIndex The column header or 0-based column index in the row, specified by the row parameter.
         * @returns {WPF.TableCell} a TableCell object.
         * @ignore
         */
        _createCell: function (rowIndex, columnOrIndex) {
            return new TableCell(this, rowIndex, columnOrIndex);
        }
    }
};

module.exports.Table = Table;
module.exports.TableTO = TableTO;
