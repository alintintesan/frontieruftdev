// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/26/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var MenuItem = require("./menu_item.js").MenuItem;
var Convert = Core.Convert;
var MenuHelperBehavior = Core.MenuHelperBehavior;
var WrappedItemExecutorBehavior = Core.ExecuteItemsWithEventsBehavior;

/**
 * The description of a Menu test object.
 * @param {Object} [props] Initializes a Menu test object using the supplied property bag.
 * @returns {Menu} the description object that was initialized.
 * @class Menu
 * @memberof WPF
 * @extends UiObjectBaseDescription
 */
function Menu(props) {
    var menuDesc = new UiObjectBaseDescription("Menu");
    menuDesc._defineByPropertyBag(props);
    return menuDesc;
}

/**
 * A Menu object
 * @constructor
 * @class MenuTO
 * @extends UiObjectBaseTO
 * @mixes MenuHelperBehavior
 * @mixes WPF.MenuTOBehavior._methods
 * @memberof WPF
 */
function MenuTO(session, description) {
    description = description || Menu();
    var menuTO = new UiObjectBaseTO("WpfMenu", session, description);
    menuTO._mergeBehavior(MenuHelperBehavior);
    menuTO._mergeBehavior(WrappedItemExecutorBehavior);
    menuTO._mergeBehavior(MenuTOBehavior);
    return menuTO;
}

/**
 * The behavior of the Menu object
 * @memberof WPF
 * @ignore
 */
var MenuTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.EditTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Returns the menu item with the specified path.
         * @function
         * @param {string} path The full path of the menu item to select from the list.
         * The path is composed of the menu item names or a numeric index separated by a semicolon.
         * To specify the index of the item to select, use <Item n>. Index values begin with 1.
         * @returns {MenuItem} the MenuItem object. See {@link WPF.MenuItem}
         */
        getItem: function (path) {
            if (path == null)
                throw new Error("The parameter path cannot be null.");
            return new MenuItem(this, path);
        },

        /**
         * Returns the path constructed from the path parts.
         * @function
         * @param {...(number|string)} menuPathParts The menu path parts can be: logical name(string), full path(comma-separated strings), or index(1-based).
         * @returns {string} the path of the specified menu item.
         */
        buildMenuPath: function (menuPathParts) {
            return this._buildMenuPath.apply(this, arguments);
        },

        /*jshint eqnull:true */
        /**
         * Selects the specified item.
         * @function
         * @param {MenuItem|string} menuItem The item to be selected. It can be the MenuItem, or the menu path.
         * Use the getItem method to get the menu item argument for this method.
         * Use the buildMenuPath method to build the item path string that can then be used as the menu path argument for this method.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        select: function (menuItem) {
            if (menuItem == null)
                throw new Error("The menuItem cannot be null.");

            var value = menuItem;
            if (typeof menuItem === 'object') {
                if (menuItem._path == null) {
                    throw new Error("The path of the menu item cannot be null.");
                }
                value = menuItem._path;
            }

            return this._executeWithEvents(arguments, "Select", value);
        }
    },

    _helpers: {
        /**
         * Gets the label of the menu item.
         * @function
         * @param {string} path The path of the menu item.
         * @returns {Promise<string>} a promise that is fulfilled with the label of the menu item.
         * @ignore
         */
        _getItemLabel: function (path) {
            return this._executeNotWrapped(arguments, "GetItemProperty", path, "Label");
        },

        /**
         * Indicates whether the menu item is checked.
         * @function
         * @param {string} path The path of the menu item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether the menu item is checked or not.
         * @ignore
         */
        _isItemChecked: function (path) {
            return this._executeNotWrapped(arguments, "GetItemProperty", path, "Checked");
        },

        /**
         * Indicates whether the menu item is enabled.
         * @function
         * @param {string} path The path of the menu item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether the menu item is enabled or not.
         * @ignore
         */
        _isItemEnabled: function (path) {
            return this._executeNotWrapped(arguments, "GetItemProperty", path, "Enabled");
        },

        /**
         * Indicates whether the menu item exists.
         * @function
         * @param {string} path The path of the menu item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether the menu item exists or not.
         * @ignore
         */
        _isItemExists: function (path) {
            return this._executeNotWrapped(arguments, "GetItemProperty", path, "Exists");
        },

        /**
         * Indicates whether the menu item has sub-menus.
         * @function
         * @param {string} path The path of the menu item.
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether the menu item has sub-menus or not.
         * @ignore
         */
        _itemHasSubMenu: function (path) {
            return this._executeNotWrapped(arguments, "GetItemProperty", path, "HasSubMenu");
        },

        /**
         * Gets the index of the menu item.
         * @function
         * @param {string} path The path of the menu item.
         * @returns {Promise<number>} a promise that is fulfilled with the index of the menu item.
         * @ignore
         */
        _getItemIndex: function (path) {
            return this._executeNotWrapped(arguments, "GetItemProperty", path, "Index");
        },

        /**
         * Gets the number of sub-menus of the menu item.
         * @function
         * @param {string} path The path of the menu item.
         * @returns {Promise<number>} a promise that is fulfilled with the number of sub-menus of the menu item.
         * @ignore
         */
        _getItemSubMenuCount: function (path) {
            return this._executeNotWrapped(arguments, "GetItemProperty", path, "SubMenuCount");
        }
    }
};

module.exports.Menu = Menu;
module.exports.MenuTO = MenuTO;
