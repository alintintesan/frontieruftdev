// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/26/2016.
 */
var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * A menu item in a .NET WPF menu.
 * @constructor
 * @class MenuItem
 * @mixes WPF.MenuItemBehavior._properties
 * @mixes WPF.MenuItemBehavior._methods
 * @memberof WPF
 */
function MenuItem(ownerMenu, itemPath) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(MenuItemBehavior);
    this._ownerMenu = ownerMenu;
    this._path = itemPath;
    this._executeWithEventsOnItemOnError = this._ownerMenu._executeWithEventsOnItemOnError.bind(this._ownerMenu, this);
}

MenuItem.prototype = {
    _ownerMenu: null,
    _path: null,
    _executeWithEventsOnItemOnError: null
};

/**
 * The methods of MenuItem object.
 * @memberof WPF
 * @ignore
 */
var MenuItemBehavior = {
    /**
     * @memberof WPF.MenuItemBehavior
     * @ignore
     */
    _properties: {
        /**
         * The path of this menu item.
         * @function
         * @returns {string} The path of this menu item.
         * @ignore
         */
        path: function () {
            return this._path;
        },

        /**
         * Indicates whether this menu item has a check mark displayed next to it.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether this menu item has a check mark displayed next to it.
         */
        isChecked: function () {
            return this._executeWithEventsOnItemOnError(this._ownerMenu._isItemChecked, this._path);
        },

        /**
         * Indicates whether this menu item is currently enabled.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether this menu item is currently enabled.
         */
        isEnabled: function () {
            return this._executeWithEventsOnItemOnError(this._ownerMenu._isItemEnabled, this._path);
        },

        /**
         * Indicates whether this menu item exists.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether this menu item exists.
         */
        exists: function () {
            return this._executeWithEventsOnItemOnError(this._ownerMenu._isItemExists, this._path);
        },

        /**
         * Indicates whether this menu item contains a sub-menu.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether this menu item contains a sub-menu.
         */
        hasSubMenu: function () {
            return this._executeWithEventsOnItemOnError(this._ownerMenu._itemHasSubMenu, this._path);
        },

        /**
         * The 1-based index of this menu item.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the 1-based index of this menu item.
         */
        index: function () {
            return this._executeWithEventsOnItemOnError(this._ownerMenu._getItemIndex, this._path);
        },

        /**
         * The menu item label as a string. If duplicate items exist, returns the index.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the menu item label as a string or the index if duplicate items exist.
         */
        label: function () {
            return this._executeWithEventsOnItemOnError(this._ownerMenu._getItemLabel, this._path);
        },

        /**
         * The number of items contained in this menu item's sub-menu.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the number of items contained in this menu item's sub-menu.
         */
        subMenuCount: function () {
            return this._executeWithEventsOnItemOnError(this._ownerMenu._getItemSubMenuCount, this._path);
        }
    }
};

module.exports.MenuItem = MenuItem;
