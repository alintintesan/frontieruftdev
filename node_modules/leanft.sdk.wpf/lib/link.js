// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/16/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var Convert = Core.Convert;

/**
 * Description for a WPF link object.
 * @memberof WPF
 * @ignore
 */
var LinkDescriptionBehavior = {
    /**
     * The link's name.
     * @param {string} [name] When provided, this method acts as a setter and sets the name value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current name value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    name: function (name) {
        return this._simplePropertyHandler("name", name);
    },

    /**
     * The text associated with the parent of the link.
     * @param {string} [parentText] When provided, this method acts as a setter and sets the parentText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored parentText value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    parentText: function (parentText) {
        return this._simplePropertyHandler("parent text", parentText);
    }
};

/**
 * @param {Object} [props] Initializes a Link test object using the supplied property bag.
 * @returns {Link} the description object that was initialized.
 * @constructor
 * @class Link
 * @extends WPF.UiObjectBaseDescription
 * @mixes WPF.LinkDescriptionBehavior
 * @memberof WPF
 */
function Link(props){
    var linkDesc = new UiObjectBaseDescription("Link");
    ObjUtils.extend(linkDesc, LinkDescriptionBehavior);
    linkDesc._defineByPropertyBag(props);
    return linkDesc;
}

/**
 * A LinkTO object
 * @constructor
 * @class LinkTO
 * @extends WPF.UiObjectBaseTO
 * @mixes WPF.LinkTOBehavior._properties
 * @memberof WPF
 */
function LinkTO(session, description) {
    description = description || Link();
    var linkTO = new UiObjectBaseTO("WpfLink", session, description);
    linkTO._mergeBehavior(LinkTOBehavior);
    return linkTO;
}

/**
 * The behavior of the LinkTO object
 * @memberof WPF
 * @ignore
 */
var LinkTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.LinkTOBehavior
     */
    _properties: {
        /**
         * The link's name.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the link's name.
         */
        name: {

        },

        /**
         * The text associated with the parent of the link.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text associated with the parent of the link.
         */
        parentText: {
            wiredName: "parent text"
        }
    }
};

module.exports.Link = Link;
module.exports.LinkTO = LinkTO;
