// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 05/24/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var Convert = Core.Convert;
var ArrayUtils = Core.ArrayUtils;
var StringUtils = Core.StringUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;

/**
 * ListDescriptionBehavior - the description for a List object
 * @memberof WPF
 * @ignore
 */
var ListDescriptionBehavior = {
    /**
     * Indicates whether the container allows more than one child element to be selected concurrently.
     * @param {boolean} [canSelectMultiple] When provided, this method acts as a setter and sets the canSelectMultiple value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored canSelectMultiple value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    canSelectMultiple: function (canSelectMultiple) {
        return this._propertyHandler("canselectmultiple", canSelectMultiple, Convert.toBool);
    },

    /**
     * The help text associated with the element.
     * @param {string} [helpText] When provided, this method acts as a setter and sets the helpText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored helpText value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    helpText: function (helpText) {
        return this._simplePropertyHandler("helptext", helpText);
    },

    /**
     * The name of this object.
     * @param {string} [name] When provided, this method acts as a setter and sets the name value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored name value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    name: function (name) {
        return this._simplePropertyHandler("name", name);
    },

    /**
     * The text associated with the parent object of this object.
     * @param {string} [parentText] When provided, this method acts as a setter and sets the parentText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored parentText value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    parentText: function (parentText) {
        return this._simplePropertyHandler("parent text", parentText);
    },

    /**
     * An array of all items in the list.
     * @param {string[]} [items] When provided, this method acts as a setter and sets the items value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored items value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    items: function (items) {
        return this._propertyHandler("all items", items, StringUtils.joinFunc("\n"), StringUtils.splitFunc("\n"));
    },

    /**
     * The list of items that are selected in the List object.
     * @param {string} [selectedItems] When provided, this method acts as a setter and sets the selectedItems.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the selectedItems;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedItems: function (selectedItems) {
        return this._propertyHandler("selection", selectedItems, StringUtils.joinFunc(";"), StringUtils.splitFunc(";"));
    }
};

/**
 * The description of a WPF List test object.
 * @param {Object} [props] Initializes a List test object using the supplied property bag.
 * @returns {List} the description object that was initialized.
 * @class List 
 * @extends WPF.UiObjectBaseDescription 
 * @mixes WPF.ListDescriptionBehavior
 * @memberof WPF
 */
function List(props) {
    var listDesc = new UiObjectBaseDescription("List");
    Utils.extend(listDesc, ListDescriptionBehavior);
    listDesc._defineByPropertyBag(props);
    return listDesc;
}

/**
 * A WPF List object
 * @constructor
 * @class ListTO
 * @extends WPF.UiObjectBaseTO
 * @mixes WPF.ListTOBehavior._methods
 * @mixes WPF.ListTOBehavior._properties
 * @memberof WPF
 */
function ListTO(session, description) {
    description = description || List();
    var listTO = new UiObjectBaseTO("WpfList", session, description);
    listTO._mergeBehavior(ListTOBehavior);
    return listTO;    
}

//Consts
var allItemsWiredName = "all items";
var selectedItemsWiredName = "selection";

/**
 * The behavior of List object
 * @memberof WPF
 * @ignore
 */
var ListTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.ListTOBehavior
     */
    _properties: {
        /**
         * Indicates whether this list allows more than one child element to be selected at the same time.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the indication of whether this list allows more than one child element to be selected at the same time.
         */
        canSelectMultiple: {
            wiredName: "canselectmultiple"
        },

        /**
         * The help text associated with this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the help text associated with this object.
         */
        helpText: {
            wiredName: "helptext"
        },

        /**
         * The name of this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the list's name.
         */
        name: {

        },

        /**
         * The text associated with the parent object of this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the list's parent text.
         */
        parentText: {
            wiredName: "parent text"
        },

        /**
         * Returns the list of items in the List object.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the items in the List object.
         */
        items: {
            wiredName: allItemsWiredName,
            getter: function () {
                return this._getROProperty(allItemsWiredName, arguments).then(function (res) {
                    return StringUtils.isNullOrEmpty(res) ? [] : res.split("\n");
                });
            }
        },

        /**
         * Returns the list of items that are selected in the List object.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the selected items of the List object.
         */
        selectedItems: {
            wiredName: selectedItemsWiredName,
            getter: function () {
                return this._getROProperty(selectedItemsWiredName, arguments).then(function (res) {
                    return StringUtils.isNullOrEmpty(res) ? [] : res.split(";");
                });
            }
        }
    },

    /**
     * @ignore
     * @memberof WPF.ListTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Deselects a list of items in the list.
         * @function
         * @param {...(number | string)} item Each item can be either the name of the item you wish to select,
         * or the numeric index of the item in the list. If it is a number, it is the 0-based index of the item.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        deselect: function (item) {
            if (item == null)
                throw new Error("The items cannot be null.");
            return this._executeSingleOpOnCollection(arguments, "DeSelect", ArrayUtils.toArray(arguments));
        },

        /*jshint eqnull:true */
        /**
         * Selects a list of items.
         * @function
         * @param {...(number | string)} item Each item can be either the name of the item you wish to select,
         * or the numeric index of the item in the list. If it is a number, it is the 0-based index of the item.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        select: function (item) {
            if (item == null)
                throw new Error("The items cannot be null.");
            return this._executeOnItemsCollection(arguments, "Select", "ExtendSelect", ArrayUtils.toArray(arguments));
        },

        /*jshint eqnull:true */
        /**
         * Selects additional items from the multi-selection list.
         * <BR>Remark: This method is applicable only to lists that allow multiple selection.
         * @function
         * @param {...(number | string)} item Each item can be either the name of the item you wish to select,
         * or the 0-based numeric index of the item in the list.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        extendSelect: function (item) {
            if (item == null)
                throw new Error("The item parameter cannot be null.");
            return this._executeOnItemsCollection(arguments, "ExtendSelect", "ExtendSelect", ArrayUtils.toArray(arguments));
        },

        /*jshint eqnull:true */
        /**
         * Selects all list items between (and including) the two specified items.
         * @function
         * @param {number} indexFrom The 0-based index of the first item in the range.
         * @param {number} indexTo The 0-based index of the last item in the range.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        selectRange: function (indexFrom, indexTo) {
            if (indexFrom == null)
                throw new Error("The parameter indexFrom cannot be null.");
            if (indexTo == null)
                throw new Error("The parameter indexTo cannot be null.");
            return this._executeWithEvents(arguments, "SelectRange", Convert.toNumber(indexFrom), Convert.toNumber(indexTo));
        }
    }
};

module.exports.List = List;
module.exports.ListTO = ListTO;
