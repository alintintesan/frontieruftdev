// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 05/24/2016.
 */

var Core = require("leanft.sdk.core");
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var StringUtils = Core.StringUtils;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var Convert = Core.Convert;

/**
 * TabStripDescriptionBehavior - the description for a TabStrip object
 * @memberof WPF
 * @ignore
 */
var TabStripDescriptionBehavior = {
    
    /**
     * The name of this object.
     * @param {string} [name] When provided, this method acts as a setter and sets the name value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored name value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    name: function (name) {
        return this._simplePropertyHandler("name", name);
    },

    /**
     * An array of all tabs in the TabStrip.
     * @param {string[]} [tabs] When provided, this method acts as a setter and sets the tabs value.
     * @returns {string[] | Description} If no parameter is provided, the method acts as a getter and returns the current stored tabs value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    tabs: function (tabs) {
        return this._propertyHandler("all items", tabs, StringUtils.joinFunc("\n"), StringUtils.splitFunc("\n"));
    },

    /**
     * The selected tab in the TabStrip.
     * @param {string} [selectedTab] When provided, this method acts as a setter and set the selectedTab value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the selectedTab value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    selectedTab: function (selectedTab) {
        return this._simplePropertyHandler("selection", selectedTab);
    }
};

/**
 * The description of a WPF TabStrip test object.
 * @param {Object} [props] Initializes a TabStrip test object using the supplied property bag.
 * @returns {TabStrip} the description object that was initialized.
 * @class TabStrip 
 * @extends WPF.UiObjectBaseDescription 
 * @mixes WPF.TabStripDescriptionBehavior
 * @memberof WPF
 */
function TabStrip(props) {
    var tabStripDesc = new UiObjectBaseDescription("TabStrip");
    Utils.extend(tabStripDesc, TabStripDescriptionBehavior);
    tabStripDesc._defineByPropertyBag(props);
    return tabStripDesc;    
}

/**
 * A .NET WPF TabStrip object.
 * @constructor
 * @class TabStripTO
 * @extends WPF.UiObjectBaseTO
 * @mixes WPF.TabStripTOBehavior._methods
 * @mixes WPF.TabStripTOBehavior._properties
 * @memberof WPF
 */
function TabStripTO(session, description) {
    description = description || TabStrip();
    var tabStripTO = new UiObjectBaseTO("WpfTabStrip", session, description);
    tabStripTO._mergeBehavior(TabStripTOBehavior);
    return tabStripTO;    
}

//Consts
var allItemsWiredName = "all items";

/**
 * The behavior of the TabStrip object
 * @memberof WPF
 * @ignore
 */
var TabStripTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.TabStripTOBehavior
     */
    _properties: {
        /**
         * The name of this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the TabStrip's name.
         */
        name: {

        },

        /**
         * Gets the selected item of the TabStrip.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the selected item of the TabStrip.
         */
        selectedTab: {
            wiredName: "selection"
        },

        /**
         * Get all items of the TabStrip.
         * @function
         * @returns {Promise<string[]>} a promise that is fulfilled with the selected item of the TabStrip.
         */
        tabs: {
            wiredName: allItemsWiredName,
            getter: function () {
                return this._getROProperty(allItemsWiredName, arguments).then(function (res) {
                    return StringUtils.isNullOrEmpty(res) ? [] : res.split("\n");
                });
            }
        }
    },

    /**
     * @ignore
     * @memberof WPF.TabStripTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Selects an item in the TabStrip.
         * @function
         * @param {number|string} indexOrItem The item to be selected.
         * The input can be the 0-based index of the item or the text of the item.
         * @returns {Promise<void>} a promise that is fulfilled when the select operation ends.
         */
        select: function (indexOrItem) {
            if (indexOrItem == null)
                throw new Error("The parameter indexOrItem cannot be null.");
            return this._executeWithEvents(arguments, "Select", indexOrItem);
        }
    }
};

module.exports.TabStrip = TabStrip;
module.exports.TabStripTO = TabStripTO;
