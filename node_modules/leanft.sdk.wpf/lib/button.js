// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/17/2016.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;

var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var ToggleButton = require("./toggle_button.js").ToggleButton;


/**
 * Description for a WPF button object.
 * @memberof WPF
 * @ignore
 */
var ButtonDescriptionBehaviour = {
    /**
     * The help text associated with the element.
     * @param {string} [helpText] The help text associated with the element.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the help text associated with the element;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    helpText: function (helpText) {
        return this._simplePropertyHandler("helptext", helpText);
    },

    /**
     * The name of the object.
     * @param {string} [name] The name of the object.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the name of the object;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    name: function (name) {
        return this._simplePropertyHandler("name", name);
    },

    /**
     * The text associated with the parent object of the object.
     * @param {string} [parentText] The text associated with the parent object of the object.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the text associated with the parent object of the object;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    parentText: function (parentText) {
        return this._simplePropertyHandler("parent text", parentText);
    }
};

/**
 * @param {Object} [props] Initializes a Button test object using the supplied property bag.
 * @returns {Button} the description object that was initialized.
 * @constructor
 * @extends WPF.UiObjectBaseDescription
 * @mixes WPF.ButtonDescriptionBehaviour
 * @memberof WPF
 */
function Button(props){
    var buttonDesc = new UiObjectBaseDescription("Button");
    ObjUtils.extend(buttonDesc, ButtonDescriptionBehaviour);
    buttonDesc._defineByPropertyBag(props);
    return buttonDesc;
}

/**
 * A ButtonTO object
 * @constructor
 * @class ButtonTO
 * @extends WPF.UiObjectBaseTO
 * @mixes WPF.ButtonTOBehavior._properties
 * @mixes WPF.ButtonTOBehavior._helpers
 * @memberof WPF
 */
function ButtonTO(session, description) {
    description = description || Button();
    var buttonTO = new UiObjectBaseTO("WpfButton", session, description);
    buttonTO._mergeBehavior(ButtonTOBehavior);
    buttonTO._toggleButton = new ToggleButton(buttonTO);
    return buttonTO;
}

/**
 * The behavior of the ButtonTO object
 * @memberof WPF
 * @ignore
 */
var ButtonTOBehavior = {
    _toggleButton: null,

    /**
     * @ignore
     * @memberof WPF.ButtonTOBehavior
     */
    _properties: {
        /**
         * The help text associated with the button.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the help text associated with the button.
         */
        helpText: {
            wiredName: "helptext"
        },

        /**
         * The name of the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the object.
         */
        name: {},

        /**
         * The text associated with the parent object of the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text associated with the parent object of the object.
         */
        parentText: {
            wiredName: "parent text"
        }
    },

    /**
     * @ignore
     * @memberof WPF.ButtonTOBehavior
     */
    _helpers: {
        // @@@@ ToDO - move back to properties and add a flag not to process this from the UI of the spy
        // @@@@ - And also remove the line @mixes WPF.ButtonTOBehavior._helpers from the ButtonTO constructor

        /**
         * The returned object enables access to toggle button functionality (relevant only if the current button is a toggle button).
         * @function
         * @returns {WPF.ToggleButton} the object enabling access to the toggle button functionality (relevant only if the current button is a toggle button).
         */
        toggleButton: function () {
            return this._toggleButton;
        }
    }
};

module.exports.Button = Button;
module.exports.ButtonTO = ButtonTO;
