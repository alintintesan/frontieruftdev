// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/07/2016.
 */

var Core = require("leanft.sdk.core");
var TestObjectBase = Core.TestObjectBase;
var NativeObjectBehavior = Core.NativeObjectBehavior;
var Utils = Core.ObjectUtils;
var DescriptionBase = Core.DescriptionBase;
var PropertyFlatter = Core.PropertyFlatter;
var Location = Core.Location;
var Convert = Core.Convert;
var UIObjectBaseBehavior = Core.UIObjectBaseBehavior;
var LocationDescriptionBehavior = Core.LocationDescriptionBehavior;
var UIObjectDescriptionBaseBehavior = Core.UIObjectDescriptionBaseBehavior;
var LocationInfoProvider = require("leanft.sdk.core/lib/location_info_provider.js").LocationInfoProvider;
var DragAndDropBehavior = Core.DragAndDropBehavior;
var ClickBehavior = Core.ClickBehavior;
var DoubleClickBehavior = Core.DoubleClickBehavior;
var SendKeysBehavior = Core.SendKeysBehavior;

/**
 * WPF namespace
 * @namespace WPF
 */

/**
 * UiObjectBaseDescription - the base description for all WPF elements
 * @class UiObjectBaseDescription
 * @extends DescriptionBase
 * @mixes LocationDescriptionBehavior
 * @mixes UIObjectDescriptionBaseBehavior
 * @memberof WPF
 * @ignore
 */
function UiObjectBaseDescription(leanFTType) {
    this._init({
        technology: "WPF",
        leanftType: leanFTType
    });
    Utils.extend(this, LocationDescriptionBehavior);
    Utils.extend(this, UIObjectDescriptionBaseBehavior);
    
    //init grouped properties
    this.location({});
    this.absoluteLocation({});
    this.size({});
    this.objectProperties({});
}

/**
 * @ignore
 */
Utils.inherit(UiObjectBaseDescription, DescriptionBase, {
    /**
     * The object's attached text.
     * @param {string} [attachedText] When provided, this method acts as a setter and sets the attachedText value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored attachedText value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WPF.UiObjectBaseDescription#
     */
    attachedText: function (attachedText) {
        return this._simplePropertyHandler("Attached text", attachedText);
    },

    /**
     * This object's name as set by the developer.
     * @param {boolean} [canFocus] When provided, this method acts as a setter and sets the canFocus value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored canFocus value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WPF.UiObjectBaseDescription#
     */
    canFocus: function (canFocus) {
        return this._propertyHandler("canfocus", canFocus, Convert.toBool);        
    },

    /**
     * The object's native class.
     * @param {string} [nativeClass] When provided, this method acts as a setter and sets the nativeClass value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored nativeClass value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WPF.UiObjectBaseDescription#
     */
    nativeClass: function (nativeClass) {
        return this._simplePropertyHandler("classname", nativeClass);
    },    

    /**
     * This object's name as set by the developer.
     * @param {string} [objectName] When provided, this method acts as a setter and sets the objectName value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored objectName value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WPF.UiObjectBaseDescription#
     */
    objectName: function (objectName) {
        return this._simplePropertyHandler("devname", objectName);
    },

    /**
     * The full hierarchy of the object's name with all parent objects.
     * @param {string} [fullNamePath] When provided, this method acts as a setter and sets the fullNamePath value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored fullNamePath value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WPF.UiObjectBaseDescription#
     */
    fullNamePath: function (fullNamePath) {
        return this._simplePropertyHandler("devnamepath", fullNamePath);
    },

    /**
     * The full type name of this object.
     * @param {string} [fullType] When provided, this method acts as a setter and sets the fullType value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored fullType value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof WPF.UiObjectBaseDescription#
     */
    fullType: function (fullType) {
        return this._simplePropertyHandler("wpftypename", fullType);
    },    

    /**
     * The concrete test object properties including custom properties.
     * @param {object} [objectProperties] When provided, this method acts as a setter and sets the objectProperties value.
     * @returns {object | Description} If no parameter is provided, the method acts as a getter and returns the current stored objectProperties value;
     * otherwise it returns 'this' for use with the builder pattern.     
     * @memberof WPF.UiObjectBaseDescription#
     */
    objectProperties: function(objectProperties) {
        return this._propertyFlatterHandler("ObjectProperties", PropertyFlatter, objectProperties, this._createUserKeysMapping(objectProperties));
    }
});

/**
 * @class UiObjectBaseTO
 * @param nativeclass
 * @param session
 * @param description
 * @constructor
 * @extends TestObjectBase
 * @mixes LocationInfoProvider._properties
 * @mixes ClickBehavior._methods
 * @mixes DoubleClickBehavior._methods
 * @mixes DragAndDropBehavior._methods
 * @mixes SendKeysBehavior._methods
 * @mixes UIObjectBaseBehavior._properties
 * @mixes NativeObjectBehavior._methods
 * @mixes WPF.UiObjectBaseTOBehavior._properties
 * @mixes WPF.UiObjectBaseTOBehavior._methods
 * @mixes WaitUntilVisibleBehavior._methods
 * @mixes WaitUntilEnabledBehavior._methods
 * @abstract
 * @memberof WPF
 * @ignore
 */
function UiObjectBaseTO(nativeclass, session, description) {
    this._init(nativeclass, session, description);
    this._mergeBehavior(UIObjectBaseBehavior);
    this._mergeBehavior(NativeObjectBehavior);
    this._mergeBehavior(UiObjectBaseTOBehavior);
}

/**
 * The behaviors of UiObjectBase object
 * @memberof WPF
 * @ignore
 */
var UiObjectBaseTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.UiObjectBaseTOBehavior
     */
    _properties: {
        /**
         * Gets the native class of the object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's native class.
         * @memberof WPF.UiObjectBaseTO#
         */
        nativeClass: {
            wiredName: "classname"
        },

        /**
         * Indicates whether this object can receive focus.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object can focus.
         * @memberof WPF.UiObjectBaseTO#
         */
        canFocus: {
            wiredName: "canfocus"
        },

        /**
         * The name of this instance.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's name.
         * @memberof WPF.UiObjectBaseTO#
         */
        objectName: {
            wiredName: "devname"
        },

        /**
         * The full hierarchy of ObjectName with all parent objects.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's full name path.
         * @memberof WPF.UiObjectBaseTO#
         */
        fullNamePath: {
            wiredName: "devnamepath"
        },

        /**
         * The full type name of this object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's full type.
         * @memberof WPF.UiObjectBaseTO#
         */
        fullType: {
            wiredName: "wpftypename"
        },

        /**
         * Returns the object's attached text.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's attached text.
         * @memberof WPF.UiObjectBaseTO#
         */
        attachedText: {
            wiredName: "attached text"
        },

        /**
         * Returns the object's text.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's text.
         * @memberof WPF.UiObjectBaseTO#
         */
        text: {

        }
    },

    /**
     * @ignore
     * @memberof WPF.UiObjectBaseTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Returns the value of a test object property.
         * @function
         * @param {string} [propName] the name of property.
         * @returns {Promise<object>} a promise that is fulfilled with the object's property.
         * @memberof WPF.UiObjectBaseTO#
         */
        getObjectProperty: function(propName){
            if (propName == null)
                throw new Error("The propName cannot be null.");
            return this._getROProperty(propName, arguments);
        },

        /**
         * Scrolls this object into view in the parent window.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the makeVisible operation ends.
         * @memberof WPF.UiObjectBaseTO#
         */
        makeVisible: function(){
            return this._executeWithEvents(arguments, "MakeVisible");
        },

        /**
         * Displays this object's context menu.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the showContextMenu operation ends.
         * @memberof WPF.UiObjectBaseTO#
         */
        showContextMenu: function(){
            return this._executeWithEvents(arguments, "ShowContextMenu");
        }
    }
};


/**
 * @ignore
 */
Utils.inherit(UiObjectBaseTO, TestObjectBase, {
});

module.exports.UiObjectBaseDescription = UiObjectBaseDescription;
module.exports.UiObjectBaseTO = UiObjectBaseTO;