// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/31/2016.
 */

var Core = require("leanft.sdk.core");
var CheckedState = Core.CheckedState;
var Utils = Core.ObjectUtils;
var MergeBehavior = Core.MergeBehavior;

/**
 * A .NET WPF toggle button object.
 * To create an instance of this object, call the toggleButton property of the relevant WPF Button object.
 * @constructor
 * @class ToggleButton
 * @mixes WPF.ToggleButtonBehavior._properties
 * @mixes WPF.ToggleButtonBehavior._methods
 * @memberof WPF
 */
function ToggleButton(ownerButton) {
    Utils.extend(this, MergeBehavior);
    this._mergeBehavior(ToggleButtonBehavior);
    this._ownerButton = ownerButton;
}

ToggleButton.prototype = {
    _ownerButton: null
};

//Consts
var isCheckedWiredName = "IsChecked";
var isThreeStateWiredName = "IsThreeState";
var stateWiredName = "checked";


var ToggleButtonBehavior = {
    /**
     * @memberof WPF.ToggleButtonBehavior
     * @ignore
     */
    _properties: {
        /**
         * Returns the Button test object that this toggle button was accessed from.
         * @function
         * @returns {WPF.ButtonTO} the Button test object that this toggle button was accessed from.
         */
        buttonTestObject: function () {
            return this._ownerButton;
        },

        /**
         * Indicates whether this toggle button is checked.
         * For a 3-state toggle button: isChecked returns true for either a Checked or Indeterminate State.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether this toggle button is checked.
         */
        isChecked: {
            wiredName: isCheckedWiredName,
            getter: function () {
                return this._ownerButton._getROProperty(isCheckedWiredName, arguments);
            }
        },

        /**
         * Indicates whether this toggle button is able to display three check states.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether this toggle button is able to display three check states.
         */
        isThreeState: {
            wiredName: isThreeStateWiredName,
            getter: function () {
                return this._ownerButton._getROProperty(isThreeStateWiredName, arguments);
            }
        },

        /**
         * Returns the current state of the toggle button. Possible values: checked, unchecked, indeterminate.
         * @function
         * @returns {Promise<CheckedState>} a promise that is fulfilled with the current state of the toggle button.
         */
        state: {
            wiredName: stateWiredName,
            getter: function () {
                return this._ownerButton._getROProperty(stateWiredName, arguments);
            }
        }
    },

    /**
     * @memberof WPF.ToggleButtonBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the value of this toggle button.
         * @function
         * @param {CheckedState} state The value to be assigned to this toggle button. Possible values: checked, unchecked, indeterminate.
         * @returns {Promise<void>} a promise that is fulfilled when the operation is performed.
         */
        set: function (state) {
            if (state == null)
                throw new Error("The parameter state cannot be null.");
            return this._ownerButton._executeWithEvents(arguments, "Set", CheckedState._checkedStateToNative(state));
        }
    }
};

module.exports.ToggleButton = ToggleButton;
