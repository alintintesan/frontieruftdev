// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 05/24/2016.
 */

var Core = require("leanft.sdk.core");
var Convert = Core.Convert;
var Utils = Core.ObjectUtils;
var UiObjectBase = require("./ui_object_base.js");
var UiObjectBaseTO = UiObjectBase.UiObjectBaseTO;
var UiObjectBaseDescription = UiObjectBase.UiObjectBaseDescription;

/**
 * The description of a WPF ScrollBar test object.
 * @param {Object} [props] Initializes a ScrollBar test object using the supplied property bag.
 * @returns {ScrollBar} the description object that was initialized.
 * @class ScrollBar 
 * @extends WPF.UiObjectBaseDescription
 * @memberof WPF
 */
function ScrollBar(props) {
    var scrollBarDesc = new UiObjectBaseDescription("ScrollBar");
    scrollBarDesc._defineByPropertyBag(props);
    return scrollBarDesc;    
}

/**
 * A .NET WPF ScrollBar object.
 * @constructor
 * @class ScrollBarTO
 * @extends WPF.UiObjectBaseTO
 * @mixes WPF.ScrollBarTOBehavior._properties
 * @mixes WPF.ScrollBarTOBehavior._methods
 * @memberof WPF
 */
function ScrollBarTO(session, description) {
    description = description || ScrollBar();
    var scrollBarTO = new UiObjectBaseTO("WpfScrollBar", session, description);
    scrollBarTO._mergeBehavior(ScrollBarTOBehavior);
    return scrollBarTO;
}

/**
 * The behavior of a WPF ScrollBar object.
 * @memberof WPF
 * @ignore
 */
var ScrollBarTOBehavior = {
    /**
     * @ignore
     * @memberof WPF.ScrollBarTOBehavior
     */
    _properties: {
        /**
         * The maximum value of this scroll bar.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the maximum value of this scroll bar.
         */
        maximum: {
            type: 'double',
            wiredName: "Maximum"
        },

        /**
         * The minimum value of this scroll bar.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the minimum value of this scroll bar.
         */
        minimum: {
            type: 'double',
            wiredName: "Minimum"
        },

        /**
         * The current value of this scroll bar.
         * @function
         * @returns {Promise<number>} a promise that is fulfilled with the current value of this scroll bar.
         */
        value: {
            type: 'double',
            wiredName: "Value"
        }
    },

    /**
     * @ignore
     * @memberof WPF.ScrollBarTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the position for the scroll bar.
         * @function
         * @param {number} position The position to be set.
         * @returns {Promise<void>} a promise that is fulfilled when the operation ends.
         */
        setPosition: function (position) {
            if (position == null)
                throw new Error("The parameter position cannot be null.");
            return this._executeWithEvents(arguments, "Set", Convert.toNumber(position));
        }
    }
};

module.exports.ScrollBar = ScrollBar;
module.exports.ScrollBarTO = ScrollBarTO;
