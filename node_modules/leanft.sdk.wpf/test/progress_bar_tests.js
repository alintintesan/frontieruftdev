// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("ProgressBar Description", function () {

    var ProgressBar = require("../lib/progress_bar.js").ProgressBar;
    var progressBarDescriptionUnderTest;
    
    beforeEach(function () {
        progressBarDescriptionUnderTest = new ProgressBar({});
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and 'ProgressBar' LeanFT type", function () {
            progressBarDescriptionUnderTest = new ProgressBar();
            assert.deepEqual(progressBarDescriptionUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "ProgressBar"
            });
        });
    });

    describe("value method", function () {
        it("should add 'Value' to _properties when value is given", function () {
            progressBarDescriptionUnderTest.value(100);
            assert.strictEqual(progressBarDescriptionUnderTest._properties["Value"], 100);
        });

        it("should add 'Value' to _properties when value is given in string", function () {
            progressBarDescriptionUnderTest.value('100');
            assert.strictEqual(progressBarDescriptionUnderTest._properties["Value"], 100);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = progressBarDescriptionUnderTest.value(100);
            assert.strictEqual(result, progressBarDescriptionUnderTest);
        });

        it("should remove 'Value' from _properties when value is null", function () {
            progressBarDescriptionUnderTest._properties["Value"] = 100;
            progressBarDescriptionUnderTest.value(null);
            assert(!("Value" in progressBarDescriptionUnderTest._properties));
        });

        it("should return the value of 'Value' from _properties when value is not given", function () {
            progressBarDescriptionUnderTest._properties["Value"] = 100;
            var result = progressBarDescriptionUnderTest.value();
            assert.equal(result, 100);
        });
    });

});

describe("ProgressBar TO", function () {

    var ProgressBarTO = require("../lib/progress_bar.js").ProgressBarTO;
    var progressBarTOUnderTest;

    beforeEach(function () {
        progressBarTOUnderTest = new ProgressBarTO();
        sinon.stub(progressBarTOUnderTest, "_getROProperty");
    });

    afterEach(function () {
        progressBarTOUnderTest._getROProperty.restore();
    });

    describe("maximum method", function () {
        
        it("should return the execution promise", function () {
            var executionPromise = {};
            progressBarTOUnderTest._getROProperty.returns(executionPromise);
            var res = progressBarTOUnderTest.maximum();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Maximum' with correct parameters", function () {
            progressBarTOUnderTest.maximum();
            sinon.assert.calledOnce(progressBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(progressBarTOUnderTest._getROProperty, "Maximum", sinon.match({}));
        });        
    });

    describe("minimum method", function () {
        
        it("should return the execution promise", function () {
            var executionPromise = {};
            progressBarTOUnderTest._getROProperty.returns(executionPromise);
            var res = progressBarTOUnderTest.minimum();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Minimum' with correct parameters", function () {
            progressBarTOUnderTest.minimum();
            sinon.assert.calledOnce(progressBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(progressBarTOUnderTest._getROProperty, "Minimum", sinon.match({}));
        });        
    });

    describe("value method", function () {
        
        it("should return the execution promise", function () {
            var executionPromise = {};
            progressBarTOUnderTest._getROProperty.returns(executionPromise);
            var res = progressBarTOUnderTest.value();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Value' with correct parameters", function () {
            progressBarTOUnderTest.value();
            sinon.assert.calledOnce(progressBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(progressBarTOUnderTest._getROProperty, "Value", sinon.match({}));
        });        
    });
    
});
