// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/16/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Link = require("../lib/link.js").Link;
var Core = require("leanft.sdk.core");
var Convert = Core.Convert;

describe("Link Description", function () {

    var linkDescriptionUnderTest;

    beforeEach(function () {
        linkDescriptionUnderTest = new Link();
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and 'Link' LeanFT type", function () {
            linkDescriptionUnderTest = new Link();
            assert.deepEqual(linkDescriptionUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "Link"
            });
        });
    });

    describe("name method", function () {
        it("should add 'name' to _properties when value is given", function () {
            linkDescriptionUnderTest.name("somename");
            assert.strictEqual(linkDescriptionUnderTest._properties["name"], "somename");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = linkDescriptionUnderTest.name("somename");
            assert.strictEqual(result, linkDescriptionUnderTest);
        });

        it("should remove 'name' from _properties when value is null", function () {
            linkDescriptionUnderTest._properties["name"] = "somename";
            assert(("name" in linkDescriptionUnderTest._properties));
            linkDescriptionUnderTest.name(null);
            assert(!("name" in linkDescriptionUnderTest._properties));
        });

        it("should return the value of 'somename' from _properties when value is not given", function () {
            linkDescriptionUnderTest._properties["name"] = "somename";
            var value = linkDescriptionUnderTest.name();
            assert.strictEqual(value, "somename");
        });
    });

    describe("parentText method", function () {
        it("should add 'parent text' to _properties when value is given", function () {
            linkDescriptionUnderTest.parentText("SomeParentText");
            assert.strictEqual(linkDescriptionUnderTest._properties["parent text"], "SomeParentText");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = linkDescriptionUnderTest.parentText("SomeParentText");
            assert.strictEqual(result, linkDescriptionUnderTest);
        });

        it("should remove 'parent text' from _properties when value is null", function () {
            linkDescriptionUnderTest._properties["parent text"] = "SomeParentText";
            assert(("parent text" in linkDescriptionUnderTest._properties));
            linkDescriptionUnderTest.parentText(null);
            assert(!("parent text" in linkDescriptionUnderTest._properties));
        });

        it("should return the value of 'SomeParentText' from _properties when value is not given", function () {
            linkDescriptionUnderTest._properties["parent text"] = "SomeParentText";
            var value = linkDescriptionUnderTest.parentText();
            assert.strictEqual(value, "SomeParentText");
        });
    });
});

describe("Link Test Object", function () {
    var LinkTO = require("../lib/link.js").LinkTO;
    var linkTestObjectUnderTest;

    beforeEach(function () {
        linkTestObjectUnderTest = new LinkTO();
        sinon.stub(linkTestObjectUnderTest, "_getROProperty");
        sinon.stub(linkTestObjectUnderTest, "_executeWithEvents");
    });

    describe("Constructor", function () {
        it("should assign 'WpfLink' native class", function () {
            assert.deepEqual(linkTestObjectUnderTest._nativeClass, "WpfLink");
        });
    });

    describe("name method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            linkTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = linkTestObjectUnderTest.name();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'name' with correct parameters", function () {
            linkTestObjectUnderTest.name();
            sinon.assert.calledOnce(linkTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(linkTestObjectUnderTest._getROProperty, "name", sinon.match({}));
        });
    });

    describe("parentText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            linkTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = linkTestObjectUnderTest.parentText();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'parent text' with correct parameters", function () {
            linkTestObjectUnderTest.parentText();
            sinon.assert.calledOnce(linkTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(linkTestObjectUnderTest._getROProperty, "parent text", sinon.match({}));
        });
    });
});
