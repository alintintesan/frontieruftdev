// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("UI Object Base Description", function () {

    var UiObjectBaseDescription = require("../lib/ui_object_base.js").UiObjectBaseDescription;
    var uiObjectBaseDescriptionUnderTest;

    beforeEach(function () {
        uiObjectBaseDescriptionUnderTest = new UiObjectBaseDescription();
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and LeanFT type", function () {
            uiObjectBaseDescriptionUnderTest = new UiObjectBaseDescription("Window");
            assert.deepEqual(uiObjectBaseDescriptionUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "Window"
            });
        });
    });

    describe("attachedText method", function () {
        it("should add 'Attached text' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.attachedText("attachedText");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["Attached text"], "attachedText");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.attachedText("attachedText");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'Attached text' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["Attached text"] = "attachedText";
            uiObjectBaseDescriptionUnderTest.attachedText(null);
            assert(!("Attached text" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'Attached text' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["Attached text"] = "attachedText";
            var result = uiObjectBaseDescriptionUnderTest.attachedText();
            assert.equal(result, "attachedText");
        });
    });

    describe("canFocus method", function () {
        it("should add 'canfocus' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.canFocus(true);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["canfocus"], true);
        });

        it("should add 'canfocus' to _properties when value is given in string", function () {
            uiObjectBaseDescriptionUnderTest.canFocus("true");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["canfocus"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.canFocus(true);
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'canfocus' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["canfocus"] = true;
            uiObjectBaseDescriptionUnderTest.canFocus(null);
            assert(!("canfocus" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'canfocus' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["canfocus"] = true;
            var result = uiObjectBaseDescriptionUnderTest.canFocus();
            assert.equal(result, true);
        });
    });

    describe("nativeClass method", function () {
        it("should add 'classname' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.nativeClass("nativeClass");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["classname"], "nativeClass");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.nativeClass("nativeClass");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'nativeClass' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["classname"] = "nativeClass";
            uiObjectBaseDescriptionUnderTest.nativeClass(null);
            assert(!("classname" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'classname' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["classname"] = "nativeClass";
            var native = uiObjectBaseDescriptionUnderTest.nativeClass();
            assert.equal(native, "nativeClass");
        });
    });

    describe("objectName method", function () {
        it("should add 'devname' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.objectName("objectName");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["devname"], "objectName");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.objectName("objectName");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'devname' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["devname"] = "objectName";
            uiObjectBaseDescriptionUnderTest.objectName(null);
            assert(!("devname" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'devname' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["devname"] = "objectName";
            var result = uiObjectBaseDescriptionUnderTest.objectName();
            assert.equal(result, "objectName");
        });
    });

    describe("fullNamePath method", function () {
        it("should add 'devnamepath' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.fullNamePath("fullNamePath");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["devnamepath"], "fullNamePath");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.fullNamePath("fullNamePath");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'devnamepath' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["devnamepath"] = "fullNamePath";
            uiObjectBaseDescriptionUnderTest.fullNamePath(null);
            assert(!("devnamepath" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'devnamepath' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["devnamepath"] = "fullNamePath";
            var result = uiObjectBaseDescriptionUnderTest.fullNamePath();
            assert.equal(result, "fullNamePath");
        });
    });

    describe("fullType method", function () {
        it("should add 'wpftypename' to _properties when value is given", function () {
            uiObjectBaseDescriptionUnderTest.fullType("fullType");
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["wpftypename"], "fullType");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectBaseDescriptionUnderTest.fullType("fullType");
            assert.strictEqual(result, uiObjectBaseDescriptionUnderTest);
        });

        it("should remove 'wpftypename' from _properties when value is null", function () {
            uiObjectBaseDescriptionUnderTest._properties["wpftypename"] = "fullType";
            uiObjectBaseDescriptionUnderTest.fullType(null);
            assert(!("wpftypename" in uiObjectBaseDescriptionUnderTest._properties));
        });

        it("should return the value of 'wpftypename' from _properties when value is not given", function () {
            uiObjectBaseDescriptionUnderTest._properties["wpftypename"] = "fullType";
            var result = uiObjectBaseDescriptionUnderTest.fullType();
            assert.equal(result, "fullType");
        });
    });

    describe("objectProperties method", function () {
        it("should return this - builder", function () {
            var res = uiObjectBaseDescriptionUnderTest.objectProperties({});
            assert.strictEqual(res, uiObjectBaseDescriptionUnderTest);
        });

        it("should add someKey to flatter when only someKey given", function () {
            uiObjectBaseDescriptionUnderTest.objectProperties({
                someKey: "someValue"
            });
            
            assert.strictEqual(Object.keys(uiObjectBaseDescriptionUnderTest._properties["ObjectProperties"]._keysMap).length, 1);
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["ObjectProperties"].someKey, "someValue");
        });

        it("should have correct values if get after set", function () {
            uiObjectBaseDescriptionUnderTest.objectProperties({
                someKey: "someValue"
            });

            var res = uiObjectBaseDescriptionUnderTest.objectProperties();
            assert.strictEqual(res.someKey, "someValue");
        });

        it("should modify value as is modify after its set", function () {
            uiObjectBaseDescriptionUnderTest.objectProperties({
                someKey: "someValue"
            });

            uiObjectBaseDescriptionUnderTest.objectProperties().someKey = "modified";
            
            assert.strictEqual(uiObjectBaseDescriptionUnderTest._properties["ObjectProperties"].someKey, "modified");
        });
    });


});

describe("UI Object Base Test Object", function () {

    var UiObjectBaseTO = require("../lib/ui_object_base.js").UiObjectBaseTO;
    var uiObjectBaseTOUnderTest;

    beforeEach(function () {
        uiObjectBaseTOUnderTest = new UiObjectBaseTO();        
        sinon.stub(uiObjectBaseTOUnderTest, "_getROProperty");
        sinon.stub(uiObjectBaseTOUnderTest, "_executeWithEvents"); 
    });

    afterEach(function () {
        uiObjectBaseTOUnderTest._getROProperty.restore();
        uiObjectBaseTOUnderTest._executeWithEvents.restore();
    });

    describe("canFocus method", function () {
        it("should execute _getROProperty 'canfocus'", function () {
            uiObjectBaseTOUnderTest.canFocus();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "canfocus", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.canFocus();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("nativeClass method", function () {
        it("should execute _getROProperty 'classname'", function () {
            uiObjectBaseTOUnderTest.nativeClass();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "classname", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.nativeClass();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("objectName method", function () {
        it("should execute _getROProperty 'devname'", function () {
            uiObjectBaseTOUnderTest.objectName();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "devname", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.objectName();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("fullNamePath method", function () {
        it("should execute _getROProperty 'devnamepath'", function () {
            uiObjectBaseTOUnderTest.fullNamePath();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "devnamepath", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.fullNamePath();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("fullType method", function () {
        it("should execute _getROProperty 'wpftypename'", function () {
            uiObjectBaseTOUnderTest.fullType();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "wpftypename", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.fullType();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("attachedText method", function () {
        it("should execute _getROProperty 'attached text'", function () {
            uiObjectBaseTOUnderTest.attachedText();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "attached text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.attachedText();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("text method", function () {
        it("should execute _getROProperty 'text'", function () {
            uiObjectBaseTOUnderTest.text();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectBaseTOUnderTest.text();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("getObjectProperty method", function () {
        it("should execute _getROProperty", function () {
            uiObjectBaseTOUnderTest.getObjectProperty('propName');
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._getROProperty, "propName", sinon.match({}));
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            uiObjectBaseTOUnderTest._getROProperty.returns(executionPromise);
            var res = uiObjectBaseTOUnderTest.getObjectProperty('propName');
            assert.equal(res, executionPromise);
        });

        it("should throw error if propName is undefined", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.getObjectProperty();
            });
        });

        it("should throw error if propName is null", function () {
            assert.throws(function () {
                uiObjectBaseTOUnderTest.getObjectProperty(null);
            });
        });
    });

    describe("makeVisible method", function () {
        it("should execute _executeWithEvents 'MakeVisible'", function () {
            uiObjectBaseTOUnderTest.makeVisible();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({}), "MakeVisible");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            uiObjectBaseTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = uiObjectBaseTOUnderTest.makeVisible();
            assert.equal(res, executionPromise);
        });
    });

    describe("showContextMenu method", function () {
        it("should execute _executeWithEvents 'ShowContextMenu'", function () {
            uiObjectBaseTOUnderTest.showContextMenu();
            sinon.assert.calledOnce(uiObjectBaseTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectBaseTOUnderTest._executeWithEvents, sinon.match({}), "ShowContextMenu");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            uiObjectBaseTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = uiObjectBaseTOUnderTest.showContextMenu();
            assert.equal(res, executionPromise);
        });
    });
    
});
