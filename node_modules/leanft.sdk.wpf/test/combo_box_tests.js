// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("ComboBox Description", function () {

    var ComboBox = require("../lib/combo_box.js").ComboBox;    
    var comboBoxDescriptionUnderTest;
    
    beforeEach(function () {
        comboBoxDescriptionUnderTest = new ComboBox({});
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and 'ComboBox' LeanFT type", function () {
            comboBoxDescriptionUnderTest = new ComboBox();
            assert.deepEqual(comboBoxDescriptionUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "ComboBox"
            });
        });
    });

    describe("helpText method", function () {
        it("should add 'helptext' to _properties when value is given", function () {
            comboBoxDescriptionUnderTest.helpText("helpText");
            assert.strictEqual(comboBoxDescriptionUnderTest._properties["helptext"], "helpText");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = comboBoxDescriptionUnderTest.helpText("helpText");
            assert.strictEqual(result, comboBoxDescriptionUnderTest);
        });

        it("should remove 'helptext' from _properties when value is null", function () {
            comboBoxDescriptionUnderTest._properties["helptext"] = "helpText";
            comboBoxDescriptionUnderTest.helpText(null);
            assert(!("helptext" in comboBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'helptext' from _properties when value is not given", function () {
            comboBoxDescriptionUnderTest._properties["helptext"] = "helpText";
            var result = comboBoxDescriptionUnderTest.helpText();
            assert.equal(result, "helpText");
        });
    });

    describe("name method", function () {
        it("should add 'name' to _properties when value is given", function () {
            comboBoxDescriptionUnderTest.name("name");
            assert.strictEqual(comboBoxDescriptionUnderTest._properties["name"], "name");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = comboBoxDescriptionUnderTest.name("name");
            assert.strictEqual(result, comboBoxDescriptionUnderTest);
        });

        it("should remove 'name' from _properties when value is null", function () {
            comboBoxDescriptionUnderTest._properties["name"] = "name";
            comboBoxDescriptionUnderTest.name(null);
            assert(!("name" in comboBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'name' from _properties when value is not given", function () {
            comboBoxDescriptionUnderTest._properties["name"] = "name";
            var name = comboBoxDescriptionUnderTest.name();
            assert.equal(name, "name");
        });
    });

    describe("parentText method", function () {
        it("should add 'parent text' to _properties when value is given", function () {
            comboBoxDescriptionUnderTest.parentText("parentText");
            assert.strictEqual(comboBoxDescriptionUnderTest._properties["parent text"], "parentText");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = comboBoxDescriptionUnderTest.parentText("parentText");
            assert.strictEqual(result, comboBoxDescriptionUnderTest);
        });

        it("should remove 'parent text' from _properties when value is null", function () {
            comboBoxDescriptionUnderTest._properties["parent text"] = "parentText";
            comboBoxDescriptionUnderTest.parentText(null);
            assert(!("parent text" in comboBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'parent text' from _properties when value is not given", function () {
            comboBoxDescriptionUnderTest._properties["parent text"] = "parentText";
            var result = comboBoxDescriptionUnderTest.parentText();
            assert.equal(result, "parentText");
        });
    });

    describe("items method", function () {
        it("should add 'all items' to _properties when value is given", function () {
            comboBoxDescriptionUnderTest.items(["item1", "item2"]);
            assert.strictEqual(comboBoxDescriptionUnderTest._properties["all items"], "item1\nitem2");
        });

        it("should add 'all items' to _properties when value is given using property bag", function () {
            comboBoxDescriptionUnderTest = ComboBox({
                items: ["item1", "item2"]
            });
            assert.strictEqual(comboBoxDescriptionUnderTest._properties["all items"], "item1\nitem2");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = comboBoxDescriptionUnderTest.items(["item1", "item2"]);
            assert.strictEqual(result, comboBoxDescriptionUnderTest);
        });

        it("should remove 'all items' from _properties when value is null", function () {
            comboBoxDescriptionUnderTest._properties["all items"] = "item1\nitem2";
            comboBoxDescriptionUnderTest.items(null);
            assert(!("all items" in comboBoxDescriptionUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties when value is not given", function () {
            comboBoxDescriptionUnderTest._properties["all items"] = "item1\nitem2";
            var value = comboBoxDescriptionUnderTest.items();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'all items' in _properties when get is called", function () {
            comboBoxDescriptionUnderTest._properties["all items"] = "item1\nitem2";
            comboBoxDescriptionUnderTest.items();
            assert.strictEqual(comboBoxDescriptionUnderTest._properties["all items"], "item1\nitem2");
        });
    });

    describe("selectedItem method", function () {
        it("should add 'selection' to _properties when value is given", function () {
            comboBoxDescriptionUnderTest.selectedItem("selectedItem");
            assert.strictEqual(comboBoxDescriptionUnderTest._properties["selection"], "selectedItem");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = comboBoxDescriptionUnderTest.selectedItem("selectedItem");
            assert.strictEqual(result, comboBoxDescriptionUnderTest);
        });

        it("should remove 'selection' from _properties when value is null", function () {
            comboBoxDescriptionUnderTest._properties["selection"] = "selectedItem";
            comboBoxDescriptionUnderTest.selectedItem(null);
            assert(!("selection" in comboBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'selection' from _properties when value is not given", function () {
            comboBoxDescriptionUnderTest._properties["selection"] = "selectedItem";
            var result = comboBoxDescriptionUnderTest.selectedItem();
            assert.equal(result, "selectedItem");
        });
    });

});

describe("ComboBox TO", function () {

    var ComboBoxTO = require("../lib/combo_box.js").ComboBoxTO;
    var comboBoxTOUnderTest;

    beforeEach(function () {
        comboBoxTOUnderTest = new ComboBoxTO();
        sinon.stub(comboBoxTOUnderTest, "_getROProperty");
        sinon.stub(comboBoxTOUnderTest, "_executeWithEvents");
    });

    afterEach(function () {
        comboBoxTOUnderTest._getROProperty.restore();
        comboBoxTOUnderTest._executeWithEvents.restore();
    });

    describe("helpText method", function () {
        it("should execute _getROProperty 'helptext'", function () {
            comboBoxTOUnderTest.helpText();
            sinon.assert.calledOnce(comboBoxTOUnderTest._getROProperty);
            sinon.assert.calledWith(comboBoxTOUnderTest._getROProperty, "helptext", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            comboBoxTOUnderTest._getROProperty.returns(promiseMock);
            var res = comboBoxTOUnderTest.helpText();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("name method", function () {
        it("should execute _getROProperty 'name'", function () {
            comboBoxTOUnderTest.name();
            sinon.assert.calledOnce(comboBoxTOUnderTest._getROProperty);
            sinon.assert.calledWith(comboBoxTOUnderTest._getROProperty, "name", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            comboBoxTOUnderTest._getROProperty.returns(promiseMock);
            var res = comboBoxTOUnderTest.name();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("parentText method", function () {
        it("should execute _getROProperty 'parent text'", function () {
            comboBoxTOUnderTest.parentText();
            sinon.assert.calledOnce(comboBoxTOUnderTest._getROProperty);
            sinon.assert.calledWith(comboBoxTOUnderTest._getROProperty, "parent text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            comboBoxTOUnderTest._getROProperty.returns(promiseMock);
            var res = comboBoxTOUnderTest.parentText();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("selectedItem method", function () {
        it("should execute _getROProperty 'selection'", function () {
            comboBoxTOUnderTest.selectedItem();
            sinon.assert.calledOnce(comboBoxTOUnderTest._getROProperty);
            sinon.assert.calledWith(comboBoxTOUnderTest._getROProperty, "selection", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            comboBoxTOUnderTest._getROProperty.returns(promiseMock);
            var res = comboBoxTOUnderTest.selectedItem();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("select method", function () {
        it("should throw error if indexOrItem is undefined", function () {
            assert.throws(function () {
                comboBoxTOUnderTest.select();
            });
        });

        it("should throw error if indexOrItem is null", function () {
            assert.throws(function () {
                comboBoxTOUnderTest.select(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            comboBoxTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = comboBoxTOUnderTest.select(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Select' if indexOrItem is a number", function () {
            comboBoxTOUnderTest.select(10);
            sinon.assert.calledOnce(comboBoxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(comboBoxTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Select", 10);
        });

        it("should execute _executeWithEvents 'Select' if indexOrItem is a string", function () {
            comboBoxTOUnderTest.select("item1");
            sinon.assert.calledOnce(comboBoxTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(comboBoxTOUnderTest._executeWithEvents, sinon.match({ 0: "item1" }), "Select", "item1");
        });        
    });

    describe("items method", function () {
        it("should query the property 'all items'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };
            comboBoxTOUnderTest._getROProperty.returns(promiseMock);
            comboBoxTOUnderTest.items();
            sinon.assert.calledOnce(comboBoxTOUnderTest._getROProperty);
            sinon.assert.calledWith(comboBoxTOUnderTest._getROProperty, "all items");
        });

        it("should return empty list if no item returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            comboBoxTOUnderTest._getROProperty.returns(promiseMock);
            var res = comboBoxTOUnderTest.items();
            assert.deepEqual(res, []);
        });

        it("should return a list  with items if items returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            comboBoxTOUnderTest._getROProperty.returns(promiseMock);
            var res = comboBoxTOUnderTest.items();
            assert.deepEqual(res, ["Item1", "Item2"]);
        });
    });
});
