// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("Image Description", function () {

    var Image = require("../lib/image.js").Image;    
    var imageDescriptionUnderTest;
    
    beforeEach(function () {
        imageDescriptionUnderTest = new Image({});
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and 'Image' LeanFT type", function () {
            imageDescriptionUnderTest = new Image();
            assert.deepEqual(imageDescriptionUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "Image"
            });
        });
    });

    describe("name method", function () {
        it("should add 'name' to _properties when value is given", function () {
            imageDescriptionUnderTest.name("name");
            assert.strictEqual(imageDescriptionUnderTest._properties["name"], "name");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = imageDescriptionUnderTest.name("name");
            assert.strictEqual(result, imageDescriptionUnderTest);
        });

        it("should remove 'name' from _properties when value is null", function () {
            imageDescriptionUnderTest._properties["name"] = "name";
            imageDescriptionUnderTest.name(null);
            assert(!("name" in imageDescriptionUnderTest._properties));
        });

        it("should return the value of 'name' from _properties when value is not given", function () {
            imageDescriptionUnderTest._properties["name"] = "name";
            var name = imageDescriptionUnderTest.name();
            assert.equal(name, "name");
        });
    });

    describe("parentText method", function () {
        it("should add 'parent text' to _properties when value is given", function () {
            imageDescriptionUnderTest.parentText("parentText");
            assert.strictEqual(imageDescriptionUnderTest._properties["parent text"], "parentText");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = imageDescriptionUnderTest.parentText("parentText");
            assert.strictEqual(result, imageDescriptionUnderTest);
        });

        it("should remove 'parent text' from _properties when value is null", function () {
            imageDescriptionUnderTest._properties["parent text"] = "parentText";
            imageDescriptionUnderTest.parentText(null);
            assert(!("parent text" in imageDescriptionUnderTest._properties));
        });

        it("should return the value of 'parent text' from _properties when value is not given", function () {
            imageDescriptionUnderTest._properties["parent text"] = "parentText";
            var result = imageDescriptionUnderTest.parentText();
            assert.equal(result, "parentText");
        });
    });
});

describe("Image TO", function () {

    var ImageTO = require("../lib/image.js").ImageTO;
    var imageTOUnderTest;

    beforeEach(function () {
        imageTOUnderTest = new ImageTO();
        sinon.stub(imageTOUnderTest, "_getROProperty");
    });

    afterEach(function () {
        imageTOUnderTest._getROProperty.restore();
    });

    describe("name method", function () {
        it("should execute _getROProperty 'name'", function () {
            imageTOUnderTest.name();
            sinon.assert.calledOnce(imageTOUnderTest._getROProperty);
            sinon.assert.calledWith(imageTOUnderTest._getROProperty, "name", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            imageTOUnderTest._getROProperty.returns(promiseMock);
            var res = imageTOUnderTest.name();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("parentText method", function () {
        it("should execute _getROProperty 'parent text'", function () {
            imageTOUnderTest.parentText();
            sinon.assert.calledOnce(imageTOUnderTest._getROProperty);
            sinon.assert.calledWith(imageTOUnderTest._getROProperty, "parent text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            imageTOUnderTest._getROProperty.returns(promiseMock);
            var res = imageTOUnderTest.parentText();
            assert.strictEqual(res, promiseMock);
        });
    });
});
