// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/05/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Slider = require("../lib/slider.js").Slider;
var Core = require("leanft.sdk.core");
var CheckedState = Core.CheckedState;
var Convert = Core.Convert;

describe("Slider Description", function () {

    var sliderDescriptionUnderTest;

    beforeEach(function () {
        sliderDescriptionUnderTest = new Slider();
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and 'Slider' LeanFT type", function () {
            sliderDescriptionUnderTest = new Slider();
            assert.deepEqual(sliderDescriptionUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "Slider"
            });
        });
    });

    describe("name method", function () {
        it("should add 'name' to _properties when value is given", function () {
            sliderDescriptionUnderTest.name("Somename");
            assert.strictEqual(sliderDescriptionUnderTest._properties["name"], "Somename");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = sliderDescriptionUnderTest.name("Somename");
            assert.strictEqual(result, sliderDescriptionUnderTest);
        });

        it("should remove 'name' from _properties when value is null", function () {
            sliderDescriptionUnderTest._properties["name"] = "Somename";
            assert(("name" in sliderDescriptionUnderTest._properties));
            sliderDescriptionUnderTest.name(null);
            assert(!("name" in sliderDescriptionUnderTest._properties));
        });

        it("should return the value of 'Somename' from _properties when value is not given", function () {
            sliderDescriptionUnderTest._properties["name"] = "Somename";
            var value = sliderDescriptionUnderTest.name();
            assert.strictEqual(value, "Somename");
        });
    });

    describe("position method",function() {
        it("should add 'Value' to _properties when value is given", function () {
            sliderDescriptionUnderTest.position(5.5);
            assert.strictEqual(sliderDescriptionUnderTest._properties["Value"], 5.5);
        });

        it("should add 'Value' to _properties when value is given in string", function () {
            sliderDescriptionUnderTest.position("7.7");
            assert.strictEqual(sliderDescriptionUnderTest._properties["Value"], 7.7);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = sliderDescriptionUnderTest.position(6.6);
            assert.strictEqual(result, sliderDescriptionUnderTest);
        });

        it("should remove 'Value' from _properties when value is null", function () {
            sliderDescriptionUnderTest._properties["Value"] = 4.4;
            assert(("Value" in sliderDescriptionUnderTest._properties));
            sliderDescriptionUnderTest.position(null);
            assert(!("Value" in sliderDescriptionUnderTest._properties));
        });

        it("should return the value of true from _properties when value is not given", function () {
            sliderDescriptionUnderTest._properties["Value"] = 3.3;
            var result = sliderDescriptionUnderTest.position();
            assert.equal(result, 3.3);
        });
    });
});

describe("Slider Test Object", function () {
    var SliderTO = require("../lib/slider.js").SliderTO;
    var sliderTestObjectUnderTest;

    beforeEach(function () {
        sliderTestObjectUnderTest = new SliderTO();
        sinon.stub(sliderTestObjectUnderTest, "_getROProperty");
        sinon.stub(sliderTestObjectUnderTest, "_executeWithEvents");
    });

    describe("Constructor", function () {
        it("should assign 'WpfSlider' native class", function () {
            assert.deepEqual(sliderTestObjectUnderTest._nativeClass, "WpfSlider");
        });
    });

    describe("name method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            sliderTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = sliderTestObjectUnderTest.name();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'name' with correct parameters", function () {
            sliderTestObjectUnderTest.name();
            sinon.assert.calledOnce(sliderTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(sliderTestObjectUnderTest._getROProperty, "name", sinon.match({}));
        });
    });

    describe("maximum method", function () {
        it("should execute _getROProperty 'Maximum'", function () {
            var promiseMock = { then: function (cb) { return cb(2); } };
            sliderTestObjectUnderTest._getROProperty.returns(promiseMock);
            sliderTestObjectUnderTest.maximum();
            sinon.assert.calledOnce(sliderTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(sliderTestObjectUnderTest._getROProperty, "Maximum", sinon.match({}));
        });

        it("should return promise as number", function () {
            var promiseMock = { then: function (cb) { return cb("5"); } };
            sliderTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = sliderTestObjectUnderTest.maximum();
            assert.strictEqual(res, 5);
        });
    });

    describe("minimum method", function () {
        it("should execute _getROProperty 'Minimum'", function () {
            var promiseMock = { then: function (cb) { return cb(3); } };
            sliderTestObjectUnderTest._getROProperty.returns(promiseMock);
            sliderTestObjectUnderTest.minimum();
            sinon.assert.calledOnce(sliderTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(sliderTestObjectUnderTest._getROProperty, "Minimum", sinon.match({}));
        });

        it("should return promise as number", function () {
            var promiseMock = { then: function (cb) { return cb("6"); } };
            sliderTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = sliderTestObjectUnderTest.minimum();
            assert.strictEqual(res, 6);
        });
    });

    describe("position method", function () {
        it("should execute _getROProperty 'Value'", function () {
            var promiseMock = { then: function (cb) { return cb(4); } };
            sliderTestObjectUnderTest._getROProperty.returns(promiseMock);
            sliderTestObjectUnderTest.position();
            sinon.assert.calledOnce(sliderTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(sliderTestObjectUnderTest._getROProperty, "Value", sinon.match({}));
        });

        it("should return promise as number", function () {
            var promiseMock = { then: function (cb) { return cb("7"); } };
            sliderTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = sliderTestObjectUnderTest.position();
            assert.strictEqual(res, 7);
        });
    });

    describe("setPosition method", function () {
        it("should throw error if no arguments passed", function () {
            assert.throws(function () {
                sliderTestObjectUnderTest.setPosition();
            });
        });
        it("should throw error if null passed", function () {
            assert.throws(function () {
                sliderTestObjectUnderTest.setPosition(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            sliderTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = sliderTestObjectUnderTest.setPosition(1.1);
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments if the input is number", function () {
            sliderTestObjectUnderTest.setPosition(2.2);
            sinon.assert.calledOnce(sliderTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(sliderTestObjectUnderTest._executeWithEvents, sinon.match({ 0: 2.2 }), "Set", 2.2);
        });

        it("should call _executeWithEvents and pass it the correct arguments if the input is string", function () {
            sliderTestObjectUnderTest.setPosition("3.3");
            sinon.assert.calledOnce(sliderTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(sliderTestObjectUnderTest._executeWithEvents, sinon.match({ 0: "3.3" }), "Set", 3.3);
        });
    });
});
