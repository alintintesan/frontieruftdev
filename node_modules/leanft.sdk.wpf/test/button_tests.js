// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 08/17/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("Button Description", function () {

    var Button = require("../lib/button.js").Button;
    var buttonDescriptionUnderTest;

    beforeEach(function () {
        buttonDescriptionUnderTest = Button();
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and 'Button' LeanFT type", function () {
            buttonDescriptionUnderTest = new Button();
            assert.deepEqual(buttonDescriptionUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "Button"
            });
        });
    });

    describe("helpText method", function () {
        it("should add 'helptext' to _properties when value is given", function () {
            buttonDescriptionUnderTest.helpText("somehelptext");
            assert.strictEqual(buttonDescriptionUnderTest._properties["helptext"], "somehelptext");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = buttonDescriptionUnderTest.helpText("somehelptext");
            assert.strictEqual(result, buttonDescriptionUnderTest);
        });

        it("should remove 'helptext' from _properties when value is null", function () {
            buttonDescriptionUnderTest._properties["helptext"] = "somehelptext";
            assert(("helptext" in buttonDescriptionUnderTest._properties));
            buttonDescriptionUnderTest.helpText(null);
            assert(!("helptext" in buttonDescriptionUnderTest._properties));
        });

        it("should return the value of 'somehelptext' from _properties when value is not given", function () {
            buttonDescriptionUnderTest._properties["helptext"] = "somehelptext";
            var value = buttonDescriptionUnderTest.helpText();
            assert.strictEqual(value, "somehelptext");
        });
    });

    describe("name method", function () {
        it("should add 'name' to _properties when value is given", function () {
            buttonDescriptionUnderTest.name("SomeName");
            assert.strictEqual(buttonDescriptionUnderTest._properties["name"], "SomeName");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = buttonDescriptionUnderTest.name("SomeName");
            assert.strictEqual(result, buttonDescriptionUnderTest);
        });

        it("should remove 'name' from _properties when value is null", function () {
            buttonDescriptionUnderTest._properties["name"] = "SomeName";
            assert(("name" in buttonDescriptionUnderTest._properties));
            buttonDescriptionUnderTest.name(null);
            assert(!("name" in buttonDescriptionUnderTest._properties));
        });

        it("should return the value of 'SomeName' from _properties when value is not given", function () {
            buttonDescriptionUnderTest._properties["name"] = "SomeName";
            var value = buttonDescriptionUnderTest.name();
            assert.strictEqual(value, "SomeName");
        });
    });

    describe("parentText method", function () {
        it("should add 'parent text' to _properties when value is given", function () {
            buttonDescriptionUnderTest.parentText("SomeParentText");
            assert.strictEqual(buttonDescriptionUnderTest._properties["parent text"], "SomeParentText");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = buttonDescriptionUnderTest.parentText("SomeParentText");
            assert.strictEqual(result, buttonDescriptionUnderTest);
        });

        it("should remove 'parent text' from _properties when value is null", function () {
            buttonDescriptionUnderTest._properties["parent text"] = "SomeParentText";
            assert(("parent text" in buttonDescriptionUnderTest._properties));
            buttonDescriptionUnderTest.parentText(null);
            assert(!("parent text" in buttonDescriptionUnderTest._properties));
        });

        it("should return the value of 'SomeParentText' from _properties when value is not given", function () {
            buttonDescriptionUnderTest._properties["parent text"] = "SomeParentText";
            var value = buttonDescriptionUnderTest.parentText();
            assert.strictEqual(value, "SomeParentText");
        });
    });
});

describe("Button Test Object", function () {
    var ButtonTO = require("../lib/button.js").ButtonTO;
    var buttonTestObjectUnderTest;

    beforeEach(function () {
        buttonTestObjectUnderTest = new ButtonTO();
        sinon.stub(buttonTestObjectUnderTest, "_getROProperty");
    });

    describe("Constructor", function () {
        it("should assign 'WpfButton' native class", function () {
            assert.deepEqual(buttonTestObjectUnderTest._nativeClass, "WpfButton");
        });
    });

    describe("helpText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            buttonTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = buttonTestObjectUnderTest.helpText();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'helptext' with correct parameters", function () {
            buttonTestObjectUnderTest.helpText();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "helptext", sinon.match({}));
        });
    });

    describe("name method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            buttonTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = buttonTestObjectUnderTest.name();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'name' with correct parameters", function () {
            buttonTestObjectUnderTest.name();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "name", sinon.match({}));
        });
    });

    describe("parentText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            buttonTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = buttonTestObjectUnderTest.parentText();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'parent text' with correct parameters", function () {
            buttonTestObjectUnderTest.parentText();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "parent text", sinon.match({}));
        });
    });

    describe("toggleButton method", function () {
        it("should return ToggleButton with correct owner", function () {
            var toggleButton = buttonTestObjectUnderTest.toggleButton();
            assert.deepEqual(buttonTestObjectUnderTest, toggleButton.buttonTestObject());
        });
    });
});
