// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/17/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var RadioButton = require("../lib/radio_button.js").RadioButton;
var Core = require("leanft.sdk.core");
var Convert = Core.Convert;

describe("RadioButton Description", function () {

    var radioButtonDescriptionUnderTest;

    beforeEach(function () {
        radioButtonDescriptionUnderTest = new RadioButton();
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and 'RadioButton' LeanFT type", function () {
            radioButtonDescriptionUnderTest = new RadioButton();
            assert.deepEqual(radioButtonDescriptionUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "RadioButton"
            });
        });
    });

    describe("isChecked method",function() {
        it("should add 'checked' to _properties when value is given", function () {
            radioButtonDescriptionUnderTest.isChecked(true);
            assert.strictEqual(radioButtonDescriptionUnderTest._properties["checked"], true);
        });

        it("should add 'checked' to _properties when value is given in string", function () {
            radioButtonDescriptionUnderTest.isChecked("true");
            assert.strictEqual(radioButtonDescriptionUnderTest._properties["checked"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = radioButtonDescriptionUnderTest.isChecked(true);
            assert.strictEqual(result, radioButtonDescriptionUnderTest);
        });

        it("should remove 'checked' from _properties when value is null", function () {
            radioButtonDescriptionUnderTest._properties["checked"] = true;
            assert(("checked" in radioButtonDescriptionUnderTest._properties));
            radioButtonDescriptionUnderTest.isChecked(null);
            assert(!("checked" in radioButtonDescriptionUnderTest._properties));
        });

        it("should return the value of true from _properties when value is not given", function () {
            radioButtonDescriptionUnderTest._properties["checked"] = true;
            var result = radioButtonDescriptionUnderTest.isChecked();
            assert.equal(result, true);
        });
    });

    describe("name method", function () {
        it("should add 'name' to _properties when value is given", function () {
            radioButtonDescriptionUnderTest.name("somename");
            assert.strictEqual(radioButtonDescriptionUnderTest._properties["name"], "somename");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = radioButtonDescriptionUnderTest.name("somename");
            assert.strictEqual(result, radioButtonDescriptionUnderTest);
        });

        it("should remove 'name' from _properties when value is null", function () {
            radioButtonDescriptionUnderTest._properties["name"] = "somename";
            assert(("name" in radioButtonDescriptionUnderTest._properties));
            radioButtonDescriptionUnderTest.name(null);
            assert(!("name" in radioButtonDescriptionUnderTest._properties));
        });

        it("should return the value of 'somename' from _properties when value is not given", function () {
            radioButtonDescriptionUnderTest._properties["name"] = "somename";
            var value = radioButtonDescriptionUnderTest.name();
            assert.strictEqual(value, "somename");
        });
    });
});

describe("RadioButton Test Object", function () {
    var RadioButtonTO = require("../lib/radio_button.js").RadioButtonTO;
    var radioButtonTestObjectUnderTest;

    beforeEach(function () {
        radioButtonTestObjectUnderTest = new RadioButtonTO();
        sinon.stub(radioButtonTestObjectUnderTest, "_getROProperty");
        sinon.stub(radioButtonTestObjectUnderTest, "_executeWithEvents");
    });

    describe("Constructor", function () {
        it("should assign 'WpfRadioButton' native class", function () {
            assert.deepEqual(radioButtonTestObjectUnderTest._nativeClass, "WpfRadioButton");
        });
    });

    describe("set method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            radioButtonTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = radioButtonTestObjectUnderTest.set();
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments", function () {
            radioButtonTestObjectUnderTest.set();
            sinon.assert.calledOnce(radioButtonTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(radioButtonTestObjectUnderTest._executeWithEvents, sinon.match({}), "Set");
        });
    });

    describe("isChecked method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            radioButtonTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = radioButtonTestObjectUnderTest.isChecked();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'checked' with correct parameters", function () {
            radioButtonTestObjectUnderTest.isChecked();
            sinon.assert.calledOnce(radioButtonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(radioButtonTestObjectUnderTest._getROProperty, "checked", sinon.match({}));
        });
    });

    describe("name method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            radioButtonTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = radioButtonTestObjectUnderTest.name();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'name' with correct parameters", function () {
            radioButtonTestObjectUnderTest.name();
            sinon.assert.calledOnce(radioButtonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(radioButtonTestObjectUnderTest._getROProperty, "name", sinon.match({}));
        });
    });
});
