// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/14/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var CheckBox = require("../lib/check_box.js").CheckBox;
var Core = require("leanft.sdk.core");
var CheckedState = Core.CheckedState;
var Convert = Core.Convert;

describe("CheckBox Description", function () {

    var checkBoxDescriptionUnderTest;

    beforeEach(function () {
        checkBoxDescriptionUnderTest = new CheckBox();
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and 'CheckBox' LeanFT type", function () {
            checkBoxDescriptionUnderTest = new CheckBox();
            assert.deepEqual(checkBoxDescriptionUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "CheckBox"
            });
        });
    });

    describe("parentText method", function () {
        it("should add 'parent text' to _properties when value is given", function () {
            checkBoxDescriptionUnderTest.parentText("SomeParentText");
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["parent text"], "SomeParentText");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = checkBoxDescriptionUnderTest.parentText("SomeParentText");
            assert.strictEqual(result, checkBoxDescriptionUnderTest);
        });

        it("should remove 'parent text' from _properties when value is null", function () {
            checkBoxDescriptionUnderTest._properties["parent text"] = "SomeParentText";
            assert(("parent text" in checkBoxDescriptionUnderTest._properties));
            checkBoxDescriptionUnderTest.parentText(null);
            assert(!("parent text" in checkBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'SomeParentText' from _properties when value is not given", function () {
            checkBoxDescriptionUnderTest._properties["parent text"] = "SomeParentText";
            var value = checkBoxDescriptionUnderTest.parentText();
            assert.strictEqual(value, "SomeParentText");
        });
    });

    describe("helpText method", function () {
        it("should add 'helptext' to _properties when value is given", function () {
            checkBoxDescriptionUnderTest.helpText("somehelptext");
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["helptext"], "somehelptext");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = checkBoxDescriptionUnderTest.helpText("somehelptext");
            assert.strictEqual(result, checkBoxDescriptionUnderTest);
        });

        it("should remove 'helptext' from _properties when value is null", function () {
            checkBoxDescriptionUnderTest._properties["helptext"] = "somehelptext";
            assert(("helptext" in checkBoxDescriptionUnderTest._properties));
            checkBoxDescriptionUnderTest.helpText(null);
            assert(!("helptext" in checkBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'somehelptext' from _properties when value is not given", function () {
            checkBoxDescriptionUnderTest._properties["helptext"] = "somehelptext";
            var value = checkBoxDescriptionUnderTest.helpText();
            assert.strictEqual(value, "somehelptext");
        });
    });

    describe("isChecked method",function() {
        it("should add 'IsChecked' to _properties when value is given", function () {
            checkBoxDescriptionUnderTest.isChecked(true);
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["IsChecked"], true);
        });

        it("should add 'IsChecked' to _properties when value is given in string", function () {
            checkBoxDescriptionUnderTest.isChecked("true");
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["IsChecked"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkBoxDescriptionUnderTest.isChecked(true);
            assert.strictEqual(result, checkBoxDescriptionUnderTest);
        });

        it("should remove 'IsChecked' from _properties when value is null", function () {
            checkBoxDescriptionUnderTest._properties["IsChecked"] = true;
            assert(("IsChecked" in checkBoxDescriptionUnderTest._properties));
            checkBoxDescriptionUnderTest.isChecked(null);
            assert(!("IsChecked" in checkBoxDescriptionUnderTest._properties));
        });

        it("should return the value of true from _properties when value is not given", function () {
            checkBoxDescriptionUnderTest._properties["IsChecked"] = true;
            var result = checkBoxDescriptionUnderTest.isChecked();
            assert.equal(result, true);
        });
    });

    describe("isThreeState method",function() {
        it("should add 'IsThreeState' to _properties when value is given", function () {
            checkBoxDescriptionUnderTest.isThreeState(true);
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["IsThreeState"], true);
        });

        it("should add 'IsThreeState' to _properties when value is given in string", function () {
            checkBoxDescriptionUnderTest.isThreeState("true");
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["IsThreeState"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = checkBoxDescriptionUnderTest.isThreeState(true);
            assert.strictEqual(result, checkBoxDescriptionUnderTest);
        });

        it("should remove 'IsThreeState' from _properties when value is null", function () {
            checkBoxDescriptionUnderTest._properties["IsThreeState"] = true;
            assert(("IsThreeState" in checkBoxDescriptionUnderTest._properties));
            checkBoxDescriptionUnderTest.isThreeState(null);
            assert(!("IsThreeState" in checkBoxDescriptionUnderTest._properties));
        });

        it("should return the value of true from _properties when value is not given", function () {
            checkBoxDescriptionUnderTest._properties["IsThreeState"] = true;
            var result = checkBoxDescriptionUnderTest.isThreeState();
            assert.equal(result, true);
        });
    });

    describe("state method", function () {
        it("should add 'checked' to _properties when value is given", function () {
            checkBoxDescriptionUnderTest.state(CheckedState.checked);
            assert.strictEqual(checkBoxDescriptionUnderTest._properties["checked"], 1);
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = checkBoxDescriptionUnderTest.state(CheckedState.checked);
            assert.strictEqual(result, checkBoxDescriptionUnderTest);
        });

        it("should remove 'checked' from _properties when value is null", function () {
            checkBoxDescriptionUnderTest._properties["checked"] = 1;
            assert(("checked" in checkBoxDescriptionUnderTest._properties));
            checkBoxDescriptionUnderTest.state(null);
            assert(!("checked" in checkBoxDescriptionUnderTest._properties));
        });

        it("should return the value of 'ON' from _properties when value is not given", function () {
            checkBoxDescriptionUnderTest._properties["checked"] = 1;
            var value = checkBoxDescriptionUnderTest.state();
            assert.strictEqual(value, CheckedState.checked);
        });
    });
});

describe("CheckBox Test Object", function () {
    var CheckBoxTO = require("../lib/check_box.js").CheckBoxTO;
    var checkBoxTestObjectUnderTest;

    beforeEach(function () {
        checkBoxTestObjectUnderTest = new CheckBoxTO();
        sinon.stub(checkBoxTestObjectUnderTest, "_getROProperty");
        sinon.stub(checkBoxTestObjectUnderTest, "_executeWithEvents");
    });

    describe("Constructor", function () {
        it("should assign 'WpfCheckBox' native class", function () {
            assert.deepEqual(checkBoxTestObjectUnderTest._nativeClass, "WpfCheckBox");
        });
    });

    describe("parentText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            checkBoxTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = checkBoxTestObjectUnderTest.parentText();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'parent text' with correct parameters", function () {
            checkBoxTestObjectUnderTest.parentText();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._getROProperty, "parent text", sinon.match({}));
        });
    });

    describe("helpText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            checkBoxTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = checkBoxTestObjectUnderTest.helpText();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'helptext' with correct parameters", function () {
            checkBoxTestObjectUnderTest.helpText();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._getROProperty, "helptext", sinon.match({}));
        });
    });

    describe("isChecked method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            checkBoxTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = checkBoxTestObjectUnderTest.isChecked();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'IsChecked' with correct parameters", function () {
            checkBoxTestObjectUnderTest.isChecked();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._getROProperty, "IsChecked", sinon.match({}));
        });
    });

    describe("isThreeState method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            checkBoxTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = checkBoxTestObjectUnderTest.isThreeState();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'IsThreeState' with correct parameters", function () {
            checkBoxTestObjectUnderTest.isThreeState();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._getROProperty, "IsThreeState", sinon.match({}));
        });
    });

    describe("set method", function () {
        it("should throw error if no arguments passed", function () {
            assert.throws(function () {
                checkBoxTestObjectUnderTest.set();
            });
        });
        it("should throw error if null passed", function () {
            assert.throws(function () {
                checkBoxTestObjectUnderTest.set(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            checkBoxTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = checkBoxTestObjectUnderTest.set(CheckedState.unchecked);
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments if the input is CheckedState", function () {
            checkBoxTestObjectUnderTest.set(CheckedState.checked);
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._executeWithEvents, sinon.match({ 0: CheckedState.checked }), "Set", "ON");
        });

        it("should call _executeWithEvents and pass it the correct arguments if the input is string", function () {
            checkBoxTestObjectUnderTest.set("checked");
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._executeWithEvents, sinon.match({ 0: "checked" }), "Set", "ON");
        });
    });

    describe("state method", function () {
        it("should execute _getROProperty 'checked'", function () {
            var promiseMock = { then: function (cb) { return cb(2); } };
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            checkBoxTestObjectUnderTest.state();
            sinon.assert.calledOnce(checkBoxTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(checkBoxTestObjectUnderTest._getROProperty, "checked", sinon.match({}));
        });

        it("should return promise as CheckedState", function () {
            var promiseMock = { then: function (cb) { return cb(2); } };
            checkBoxTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = checkBoxTestObjectUnderTest.state();
            assert.strictEqual(res, CheckedState.indeterminate);
        });
    });
});
