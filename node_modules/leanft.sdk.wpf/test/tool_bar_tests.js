// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/26/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("ToolBar Description", function () {

    var ToolBar = require("../lib/tool_bar.js").ToolBar;
    var toolBarDescUnderTest;

    beforeEach(function () {
        toolBarDescUnderTest = ToolBar();
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and 'ToolBar' LeanFT type", function () {
            toolBarDescUnderTest = new ToolBar();
            assert.deepEqual(toolBarDescUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "ToolBar"
            });
        });
    });

    describe("name method", function () {
        it("should add 'name' to _properties when value is given", function () {
            toolBarDescUnderTest.name("SomeName");
            assert.strictEqual(toolBarDescUnderTest._properties["name"], "SomeName");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = toolBarDescUnderTest.name("SomeName");
            assert.strictEqual(result, toolBarDescUnderTest);
        });

        it("should remove 'name' from _properties when value is null", function () {
            toolBarDescUnderTest._properties["name"] = "SomeName";
            assert(("name" in toolBarDescUnderTest._properties));
            toolBarDescUnderTest.name(null);
            assert(!("name" in toolBarDescUnderTest._properties));
        });

        it("should return the value of 'SomeName' from _properties when value is not given", function () {
            toolBarDescUnderTest._properties["name"] = "SomeName";
            var value = toolBarDescUnderTest.name();
            assert.strictEqual(value, "SomeName");
        });
    });
});

describe("ToolBar Test Object", function () {

    var ToolBarTO = require("../lib/tool_bar.js").ToolBarTO;
    var ToolBarItem = require("../lib/toolbar_item.js").ToolBarItem;
    var toolBarTOUnderTest;

    var removeExecutorMethods = function(array){
        array.map(function(item){
            delete item._executeWithEventsOnItem;
            delete item._executeWithEventsOnItemOnError;
        });
        return array;
    };

    beforeEach(function () {
        toolBarTOUnderTest = new ToolBarTO();
        sinon.stub(toolBarTOUnderTest, "_executeWithEventsOnError");
        sinon.stub(toolBarTOUnderTest, "_executeWithEvents");
        sinon.stub(toolBarTOUnderTest, "_getROPropertiesWithoutEvents");
        sinon.stub(toolBarTOUnderTest, "_getROProperty");
        toolBarTOUnderTest._executeNotWrapped = sinon.stub();
    });

    afterEach(function () {
        
    });

    describe("name method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._getROProperty.returns(executionPromise);
            var res = toolBarTOUnderTest.name();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'name' with correct parameters", function () {
            toolBarTOUnderTest.name();
            sinon.assert.calledOnce(toolBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(toolBarTOUnderTest._getROProperty, "name", sinon.match({}));
        });
    });

    describe("items method", function () {
        it("should call the method _executeWithEventsOnError", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            toolBarTOUnderTest._executeWithEventsOnError.returns(promiseMock);
            toolBarTOUnderTest.items();
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEventsOnError);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEventsOnError, sinon.match({}), "GetContent");
        });

         it("should return the promise as it is", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };
            toolBarTOUnderTest._executeWithEventsOnError.returns(promiseMock);
            var items = toolBarTOUnderTest.items();
            var res = removeExecutorMethods(items);
            assert.deepEqual(res, removeExecutorMethods([new ToolBarItem(toolBarTOUnderTest, "Item1", "Item1"), new ToolBarItem(toolBarTOUnderTest, "Item2", "Item2")]));
        });
    });

    describe("_nativeStringToMenuItems method", function () {
        
        it("should return empty list if no item returns from _nativeStringToMenuItems", function () {
            var res = toolBarTOUnderTest._nativeStringToMenuItems("");
            assert.deepEqual(res, []);
        });

        it("should return empty list if no item returns from _nativeStringToMenuItems", function () {
            var res = toolBarTOUnderTest._nativeStringToMenuItems();
            assert.deepEqual(res, []);
        });

         it("should return a list  with items if items returns from _executeWithEventsOnError", function () {
            var items = toolBarTOUnderTest._nativeStringToMenuItems("Item1\nItem2");
            var res = removeExecutorMethods(items);
            assert.deepEqual(res, removeExecutorMethods([new ToolBarItem(toolBarTOUnderTest, "Item1", "Item1"), new ToolBarItem(toolBarTOUnderTest, "Item2", "Item2")]));
        });
    });

    describe("_createItem method", function () {
        it("should return the ToolBarItem with correct values", function () {
            var res = toolBarTOUnderTest._createItem("Item1", 1);
            assert.strictEqual(res._identifier, "Item1");
            assert.strictEqual(res._textRepresentation, 1);
            assert.deepEqual(res._ownerToolBar, toolBarTOUnderTest);
        });
    });

    describe("showOverflow method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = toolBarTOUnderTest.showOverflow();
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments", function () {
            toolBarTOUnderTest.showOverflow();
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEvents, sinon.match({}), "ShowOverflow");
        });
    });

    describe("isItemOverflow method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = toolBarTOUnderTest.isItemOverflow(10);
            assert.equal(res, executionPromise);
        });

        it("should throw error if the 'itemPathOrIndex' parameter is null", function () {
            assert.throws(function () {
                toolBarTOUnderTest.isItemOverflow(null);
            });
        });

        it("should throw error if the 'itemPathOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                toolBarTOUnderTest.isItemOverflow();
            });
        });

        it("should execute isItemOverflow 'IsOverflow' with correct parameters, if input is number", function () {
            toolBarTOUnderTest.isItemOverflow(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEvents, sinon.match({ 0: 10}), "IsOverflow", 10);
        });

        it("should execute isItemOverflow 'IsOverflow' with correct parameters, if input is string", function () {
            toolBarTOUnderTest.isItemOverflow("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(toolBarTOUnderTest._executeWithEvents, sinon.match({ 0: "Item1"}), "IsOverflow", "Item1");
        });
    });

    describe("_isItemChecked method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._isItemChecked(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._isItemChecked(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "checked");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._isItemChecked("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "checked");
        });
    });

    describe("_hasItemEllipses method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._hasItemEllipses(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._hasItemEllipses(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "ellipses");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._hasItemEllipses("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "ellipses");
        });
    });

    describe("_isItemEnabled method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._isItemEnabled(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._isItemEnabled(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "enabled");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._isItemEnabled("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "enabled");
        });
    });

    describe("_isItemHot method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._isItemHot(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._isItemHot(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "hot");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._isItemHot("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "hot");
        });
    });

    describe("_getItemIndex method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._getItemIndex(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._getItemIndex(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "index");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._getItemIndex("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "index");
        });
    });

    describe("_getItemName method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._getItemName(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._getItemName(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "name");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._getItemName("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "name");
        });
    });

    describe("_getItemType method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            toolBarTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = toolBarTOUnderTest._getItemType(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            toolBarTOUnderTest._getItemType(10);
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "type");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            toolBarTOUnderTest._getItemType("Item1");
            sinon.assert.calledOnce(toolBarTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(toolBarTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "type");
        });
    });

    describe("createItemFromIdentifier method", function () {
        it("should return the ToolBarItem with correct values", function () {
            var res = toolBarTOUnderTest.createItemFromIdentifier("Item1", 1);
            assert.strictEqual(res._identifier, "Item1");
            assert.strictEqual(res._textRepresentation, 1);
            assert.deepEqual(res._ownerToolBar, toolBarTOUnderTest);
        });
    });
});
