// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("UI Object Description", function () {

    var UiObject = require("../lib/ui_object.js").UiObject;    
    var uiObjectDescriptionUnderTest;
    
    beforeEach(function () {
        uiObjectDescriptionUnderTest = new UiObject({});
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and 'UiObject' LeanFT type", function () {
            uiObjectDescriptionUnderTest = new UiObject();
            assert.deepEqual(uiObjectDescriptionUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "UiObject"
            });
        });
    });

    describe("name method", function () {
        it("should add 'name' to _properties when value is given", function () {
            uiObjectDescriptionUnderTest.name("name");
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["name"], "name");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectDescriptionUnderTest.name("name");
            assert.strictEqual(result, uiObjectDescriptionUnderTest);
        });

        it("should remove 'name' from _properties when value is null", function () {
            uiObjectDescriptionUnderTest._properties["name"] = "name";
            uiObjectDescriptionUnderTest.name(null);
            assert(!("name" in uiObjectDescriptionUnderTest._properties));
        });

        it("should return the value of 'name' from _properties when value is not given", function () {
            uiObjectDescriptionUnderTest._properties["name"] = "name";
            var name = uiObjectDescriptionUnderTest.name();
            assert.equal(name, "name");
        });
    });

    describe("parentText method", function () {
        it("should add 'parent text' to _properties when value is given", function () {
            uiObjectDescriptionUnderTest.parentText("parentText");
            assert.strictEqual(uiObjectDescriptionUnderTest._properties["parent text"], "parentText");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = uiObjectDescriptionUnderTest.parentText("parentText");
            assert.strictEqual(result, uiObjectDescriptionUnderTest);
        });

        it("should remove 'parent text' from _properties when value is null", function () {
            uiObjectDescriptionUnderTest._properties["parent text"] = "parentText";
            uiObjectDescriptionUnderTest.parentText(null);
            assert(!("parent text" in uiObjectDescriptionUnderTest._properties));
        });

        it("should return the value of 'parent text' from _properties when value is not given", function () {
            uiObjectDescriptionUnderTest._properties["parent text"] = "parentText";
            var result = uiObjectDescriptionUnderTest.parentText();
            assert.equal(result, "parentText");
        });
    });
});

describe("UI Object TO", function () {

    var UIObjectTO = require("../lib/ui_object.js").UIObjectTO;
    var uiObjectTOUnderTest;

    beforeEach(function () {
        uiObjectTOUnderTest = new UIObjectTO();
        sinon.stub(uiObjectTOUnderTest, "_getROProperty");
    });

    afterEach(function () {
        uiObjectTOUnderTest._getROProperty.restore();
    });

    describe("name method", function () {
        it("should execute _getROProperty 'name'", function () {
            uiObjectTOUnderTest.name();
            sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "name", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectTOUnderTest.name();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("parentText method", function () {
        it("should execute _getROProperty 'parent text'", function () {
            uiObjectTOUnderTest.parentText();
            sinon.assert.calledOnce(uiObjectTOUnderTest._getROProperty);
            sinon.assert.calledWith(uiObjectTOUnderTest._getROProperty, "parent text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            uiObjectTOUnderTest._getROProperty.returns(promiseMock);
            var res = uiObjectTOUnderTest.parentText();
            assert.strictEqual(res, promiseMock);
        });
    });
});
