// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/26/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var MouseButton = Core.MouseButton;

describe("Menu Test Object", function () {

    var MenuTO = require("../lib/menu.js").MenuTO;
    var MenuItem = require("../lib/menu_item.js").MenuItem;
    var menuTOUnderTest;

    beforeEach(function () {
        menuTOUnderTest = new MenuTO();
        sinon.stub(menuTOUnderTest, "_executeWithEvents");
        sinon.stub(menuTOUnderTest, "_getROProperty");
        sinon.stub(menuTOUnderTest, "_executeNotWrapped");
    });

    afterEach(function () {
        menuTOUnderTest._executeWithEvents.restore();
        menuTOUnderTest._getROProperty.restore();
        menuTOUnderTest._executeNotWrapped.restore();
        
    });

    describe("getItem method", function () {
        it("should throw error if path is undefined", function () {
            assert.throws(function () {
                menuTOUnderTest.getItem();
            });
        });

        it("should throw error if path is null", function () {
            assert.throws(function () {
                menuTOUnderTest.getItem(null);
            });
        });

        it("should return the MenuItem", function () {
            var res = menuTOUnderTest.getItem("Item1");
            assert.strictEqual(res._path, "Item1");
            assert.deepEqual(res._ownerMenu, menuTOUnderTest);
        });
    });


    describe("select method", function () {
        it("should throw error if menuItem is undefined", function () {
            assert.throws(function () {
                menuTOUnderTest.select();
            });
        });

        it("should throw error if menuItem is null", function () {
            assert.throws(function () {
                menuTOUnderTest.select(null);
            });
        });

        it("should throw error if menuItem has no _path", function () {
            assert.throws(function () {
                menuTOUnderTest.select({});
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            menuTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = menuTOUnderTest.select("MenuItem");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Select' with the menu path", function () {
            menuTOUnderTest.select("Menu1;Menu2;");
            sinon.assert.calledOnce(menuTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(menuTOUnderTest._executeWithEvents, sinon.match({ 0: "Menu1;Menu2;" }), "Select", "Menu1;Menu2;");
        });

        it("should execute _executeWithEvents 'Select' with the MenuItem", function () {
            var menuItem = { _path: "Menu1;Menu2;" };
            menuTOUnderTest.select(menuItem);
            sinon.assert.calledOnce(menuTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(menuTOUnderTest._executeWithEvents, sinon.match({ 0: menuItem }), "Select", "Menu1;Menu2;");
        });
    });    

    describe("_itemLabel method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            menuTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = menuTOUnderTest._getItemLabel("MenuItem");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters", function () {
            menuTOUnderTest._getItemLabel("MenuItem");
            sinon.assert.calledOnce(menuTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(menuTOUnderTest._executeNotWrapped, sinon.match({ 0: "MenuItem" }), "GetItemProperty", "MenuItem", "Label");
        });
    });

    describe("_itemIsChecked method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            menuTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = menuTOUnderTest._isItemChecked("MenuItem");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters", function () {
            menuTOUnderTest._isItemChecked("MenuItem");
            sinon.assert.calledOnce(menuTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(menuTOUnderTest._executeNotWrapped, sinon.match({ 0: "MenuItem" }), "GetItemProperty", "MenuItem", "Checked");
        });
    });

    describe("_itemIsEnabled method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            menuTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = menuTOUnderTest._isItemEnabled("MenuItem");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters", function () {
            menuTOUnderTest._isItemEnabled("MenuItem");
            sinon.assert.calledOnce(menuTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(menuTOUnderTest._executeNotWrapped, sinon.match({ 0: "MenuItem" }), "GetItemProperty", "MenuItem", "Enabled");
        });
    });

    describe("_itemExists method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            menuTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = menuTOUnderTest._isItemExists("MenuItem");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters", function () {
            menuTOUnderTest._isItemExists("MenuItem");
            sinon.assert.calledOnce(menuTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(menuTOUnderTest._executeNotWrapped, sinon.match({ 0: "MenuItem" }), "GetItemProperty", "MenuItem", "Exists");
        });
    });

    describe("_itemHasSubMenu method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            menuTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = menuTOUnderTest._itemHasSubMenu("MenuItem");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters", function () {
            menuTOUnderTest._itemHasSubMenu("MenuItem");
            sinon.assert.calledOnce(menuTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(menuTOUnderTest._executeNotWrapped, sinon.match({ 0: "MenuItem" }), "GetItemProperty", "MenuItem", "HasSubMenu");
        });
    });

    describe("_itemIndex method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            menuTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = menuTOUnderTest._getItemIndex("MenuItem");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters", function () {
            menuTOUnderTest._getItemIndex("MenuItem");
            sinon.assert.calledOnce(menuTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(menuTOUnderTest._executeNotWrapped, sinon.match({ 0: "MenuItem" }), "GetItemProperty", "MenuItem", "Index");
        });
    });

    describe("_itemSubMenuCount method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            menuTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = menuTOUnderTest._getItemSubMenuCount("MenuItem");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters", function () {
            menuTOUnderTest._getItemSubMenuCount("MenuItem");
            sinon.assert.calledOnce(menuTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(menuTOUnderTest._executeNotWrapped, sinon.match({ 0: "MenuItem" }), "GetItemProperty", "MenuItem", "SubMenuCount");
        });
    });

    describe("buildMenuPath method", function () {
        it("should throw error if menuPathParts is undefined", function () {
            assert.throws(function () {
                menuTOUnderTest.buildMenuPath();
            });
        });

        it("should throw error if menuPathParts is null", function () {
            assert.throws(function () {
                menuTOUnderTest.buildMenuPath(null);
            });
        });

        it("should throw error if menuPathParts contains a number < 1", function () {
            assert.throws(function () {
                menuTOUnderTest.buildMenuPath("Menu1", "Menu2", 0, 1);
            });
        });

        it("should throw error if menuPathParts contains a type diffrenet from string and int", function () {
            assert.throws(function () {
                menuTOUnderTest.buildMenuPath("Menu1", "Menu2", {}, 1);
            });
        });

        it("should return correct path if menuPathParts contains string only", function () {
            var res = menuTOUnderTest.buildMenuPath("Menu1", "Menu2", "Menu3");
            assert.equal(res, "Menu1;Menu2;Menu3");
        });

        it("should return correct path if menuPathParts contains int only", function () {
            var res = menuTOUnderTest.buildMenuPath(1,2,3);
            assert.equal(res, "<Item 1>;<Item 2>;<Item 3>");
        });

        it("should return correct path if menuPathParts contains string and int", function () {
            var res = menuTOUnderTest.buildMenuPath("Menu1", 2, "Menu3");
            assert.equal(res, "Menu1;<Item 2>;Menu3");
        });
    });
});
