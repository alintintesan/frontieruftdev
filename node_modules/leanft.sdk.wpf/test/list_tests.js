// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("List Description", function () {

    var List = require("../lib/list.js").List;    
    var listDescriptionUnderTest;
    
    beforeEach(function () {
        listDescriptionUnderTest = new List({});
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and 'List' LeanFT type", function () {
            listDescriptionUnderTest = new List();
            assert.deepEqual(listDescriptionUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "List"
            });
        });
    });

    describe("canSelectMultiple method", function () {
        it("should add 'canselectmultiple' to _properties when value is given", function () {
            listDescriptionUnderTest.canSelectMultiple(true);
            assert.strictEqual(listDescriptionUnderTest._properties["canselectmultiple"], true);
        });

        it("should add 'canselectmultiple' to _properties when value is given in string", function () {
            listDescriptionUnderTest.canSelectMultiple("true");
            assert.strictEqual(listDescriptionUnderTest._properties["canselectmultiple"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listDescriptionUnderTest.canSelectMultiple(true);
            assert.strictEqual(result, listDescriptionUnderTest);
        });

        it("should remove 'canselectmultiple' from _properties when value is null", function () {
            listDescriptionUnderTest._properties["canselectmultiple"] = true;
            listDescriptionUnderTest.canSelectMultiple(null);
            assert(!("canselectmultiple" in listDescriptionUnderTest._properties));
        });

        it("should return the value of 'canselectmultiple' from _properties when value is not given", function () {
            listDescriptionUnderTest._properties["canselectmultiple"] = true;
            var result = listDescriptionUnderTest.canSelectMultiple();
            assert.equal(result, true);
        });
    });

    describe("helpText method", function () {
        it("should add 'helptext' to _properties when value is given", function () {
            listDescriptionUnderTest.helpText("helpText");
            assert.strictEqual(listDescriptionUnderTest._properties["helptext"], "helpText");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listDescriptionUnderTest.helpText("helpText");
            assert.strictEqual(result, listDescriptionUnderTest);
        });

        it("should remove 'helptext' from _properties when value is null", function () {
            listDescriptionUnderTest._properties["helptext"] = "helpText";
            listDescriptionUnderTest.helpText(null);
            assert(!("helptext" in listDescriptionUnderTest._properties));
        });

        it("should return the value of 'helptext' from _properties when value is not given", function () {
            listDescriptionUnderTest._properties["helptext"] = "helpText";
            var result = listDescriptionUnderTest.helpText();
            assert.equal(result, "helpText");
        });
    });

    describe("name method", function () {
        it("should add 'name' to _properties when value is given", function () {
            listDescriptionUnderTest.name("name");
            assert.strictEqual(listDescriptionUnderTest._properties["name"], "name");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listDescriptionUnderTest.name("name");
            assert.strictEqual(result, listDescriptionUnderTest);
        });

        it("should remove 'name' from _properties when value is null", function () {
            listDescriptionUnderTest._properties["name"] = "name";
            listDescriptionUnderTest.name(null);
            assert(!("name" in listDescriptionUnderTest._properties));
        });

        it("should return the value of 'name' from _properties when value is not given", function () {
            listDescriptionUnderTest._properties["name"] = "name";
            var name = listDescriptionUnderTest.name();
            assert.equal(name, "name");
        });
    });

    describe("parentText method", function () {
        it("should add 'parent text' to _properties when value is given", function () {
            listDescriptionUnderTest.parentText("parentText");
            assert.strictEqual(listDescriptionUnderTest._properties["parent text"], "parentText");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = listDescriptionUnderTest.parentText("parentText");
            assert.strictEqual(result, listDescriptionUnderTest);
        });

        it("should remove 'parent text' from _properties when value is null", function () {
            listDescriptionUnderTest._properties["parent text"] = "parentText";
            listDescriptionUnderTest.parentText(null);
            assert(!("parent text" in listDescriptionUnderTest._properties));
        });

        it("should return the value of 'parent text' from _properties when value is not given", function () {
            listDescriptionUnderTest._properties["parent text"] = "parentText";
            var result = listDescriptionUnderTest.parentText();
            assert.equal(result, "parentText");
        });
    });

    describe("items method", function () {
        it("should add 'all items' to _properties when value is given", function () {
            listDescriptionUnderTest.items(["item1", "item2"]);
            assert.strictEqual(listDescriptionUnderTest._properties["all items"], "item1\nitem2");
        });

        it("should add 'all items' to _properties when value is given using property bag", function () {
            listDescriptionUnderTest = List({
                items: ["item1", "item2"]
            });
            assert.strictEqual(listDescriptionUnderTest._properties["all items"], "item1\nitem2");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = listDescriptionUnderTest.items(["item1", "item2"]);
            assert.strictEqual(result, listDescriptionUnderTest);
        });

        it("should remove 'all items' from _properties when value is null", function () {
            listDescriptionUnderTest._properties["all items"] = "item1\nitem2";
            listDescriptionUnderTest.items(null);
            assert(!("all items" in listDescriptionUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties when value is not given", function () {
            listDescriptionUnderTest._properties["all items"] = "item1\nitem2";
            var value = listDescriptionUnderTest.items();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'all items' in _properties when get is called", function () {
            listDescriptionUnderTest._properties["all items"] = "item1\nitem2";
            listDescriptionUnderTest.items();
            assert.strictEqual(listDescriptionUnderTest._properties["all items"], "item1\nitem2");
        });
    });

    describe("selectedItems method", function () {
        it("should add 'selection' to _properties when value is given", function () {
            listDescriptionUnderTest.selectedItems(["item1", "item2"]);
            assert.strictEqual(listDescriptionUnderTest._properties["selection"], "item1;item2");
        });

        it("should add 'selection' to _properties when value is given using property bag", function () {
            listDescriptionUnderTest = List({
                selectedItems: ["item1", "item2"]
            });
            assert.strictEqual(listDescriptionUnderTest._properties["selection"], "item1;item2");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = listDescriptionUnderTest.selectedItems(["item1", "item2"]);
            assert.strictEqual(result, listDescriptionUnderTest);
        });

        it("should remove 'all items' from _properties when value is null", function () {
            listDescriptionUnderTest._properties["selection"] = "item1;item2";
            listDescriptionUnderTest.selectedItems(null);
            assert(!("selection" in listDescriptionUnderTest._properties));
        });
        it("should return the value of 'selection' from _properties when value is not given", function () {
            listDescriptionUnderTest._properties["selection"] = "item1;item2";
            var value = listDescriptionUnderTest.selectedItems();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'selection' in _properties when get is called", function () {
            listDescriptionUnderTest._properties["selection"] = "item1;item2";
            listDescriptionUnderTest.selectedItems();
            assert.strictEqual(listDescriptionUnderTest._properties["selection"], "item1;item2");
        });
    });

});

describe("List TO", function () {

    var ListTO = require("../lib/list.js").ListTO;
    var listTOUnderTest;

    beforeEach(function () {
        listTOUnderTest = new ListTO();
        sinon.stub(listTOUnderTest, "_getROProperty");
        sinon.stub(listTOUnderTest, "_executeWithEvents");
        sinon.stub(listTOUnderTest, "_getROProperties");
        sinon.stub(listTOUnderTest, "_executeOnItemsCollection");
        sinon.stub(listTOUnderTest, "_executeSingleOpOnCollection");
    });

    afterEach(function () {
        listTOUnderTest._getROProperty.restore();
        listTOUnderTest._executeWithEvents.restore();
        listTOUnderTest._getROProperties.restore();
        listTOUnderTest._executeOnItemsCollection.restore();
        listTOUnderTest._executeSingleOpOnCollection.restore();
    });

    describe("canSelectMultiple method", function () {
        it("should execute _getROProperty 'canselectmultiple'", function () {
            listTOUnderTest.canSelectMultiple();
            sinon.assert.calledOnce(listTOUnderTest._getROProperty);
            sinon.assert.calledWith(listTOUnderTest._getROProperty, "canselectmultiple", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            listTOUnderTest._getROProperty.returns(promiseMock);
            var res = listTOUnderTest.canSelectMultiple();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("helpText method", function () {
        it("should execute _getROProperty 'helptext'", function () {
            listTOUnderTest.helpText();
            sinon.assert.calledOnce(listTOUnderTest._getROProperty);
            sinon.assert.calledWith(listTOUnderTest._getROProperty, "helptext", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            listTOUnderTest._getROProperty.returns(promiseMock);
            var res = listTOUnderTest.helpText();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("name method", function () {
        it("should execute _getROProperty 'name'", function () {
            listTOUnderTest.name();
            sinon.assert.calledOnce(listTOUnderTest._getROProperty);
            sinon.assert.calledWith(listTOUnderTest._getROProperty, "name", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            listTOUnderTest._getROProperty.returns(promiseMock);
            var res = listTOUnderTest.name();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("parentText method", function () {
        it("should execute _getROProperty 'parent text'", function () {
            listTOUnderTest.parentText();
            sinon.assert.calledOnce(listTOUnderTest._getROProperty);
            sinon.assert.calledWith(listTOUnderTest._getROProperty, "parent text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            listTOUnderTest._getROProperty.returns(promiseMock);
            var res = listTOUnderTest.parentText();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("deselect method", function () {
        it("should throw error if items is undefined", function () {
            assert.throws(function () {
                listTOUnderTest.deselect();
            });
        });

        it("should throw error if items is null", function () {
            assert.throws(function () {
                listTOUnderTest.deselect(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            listTOUnderTest._executeSingleOpOnCollection.returns(executionPromise);
            
            var res = listTOUnderTest.deselect(10);
            assert.equal(res, executionPromise);
        });

        it("should call the _executeSingleOpOnCollection method once and pass it the correct arguments", function () {
            listTOUnderTest.deselect(10);
            sinon.assert.calledOnce(listTOUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(listTOUnderTest._executeSingleOpOnCollection, sinon.match({ 0: 10 }), "DeSelect", [10]);
        });

        it("should call _executeSingleOpOnCollection method with Deselect and the parameters are item, string and number", function () {
            listTOUnderTest.deselect("item1", "item2");
            sinon.assert.calledOnce(listTOUnderTest._executeSingleOpOnCollection);
            sinon.assert.calledWith(listTOUnderTest._executeSingleOpOnCollection, sinon.match({ 0: "item1", 1: "item2" }), "DeSelect", ["item1", "item2"]);
        });
    });

    describe("select method", function () {
        it("should throw error if indexOrItem is undefined", function () {
            assert.throws(function () {
                listTOUnderTest.select();
            });
        });

        it("should throw error if indexOrItem is null", function () {
            assert.throws(function () {
                listTOUnderTest.select(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            listTOUnderTest._executeOnItemsCollection.returns(executionPromise);
            var res = listTOUnderTest.select(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeOnItemsCollection 'Select' if indexOrItem is a number", function () {
            listTOUnderTest.select(10);
            sinon.assert.calledOnce(listTOUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(listTOUnderTest._executeOnItemsCollection, sinon.match({ 0: 10 }), "Select", "ExtendSelect", [10]);
        });

        it("should execute _executeOnItemsCollection 'Select' if indexOrItem is a string", function () {
            listTOUnderTest.select("item1");
            sinon.assert.calledOnce(listTOUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(listTOUnderTest._executeOnItemsCollection, sinon.match({ 0: "item1" }), "Select", "ExtendSelect", ["item1"]);
        });
    });

    describe("extendSelect method", function () {
        it("should throw error if indexOrItem is undefined", function () {
            assert.throws(function () {
                listTOUnderTest.extendSelect();
            });
        });

        it("should throw error if indexOrItem is null", function () {
            assert.throws(function () {
                listTOUnderTest.extendSelect(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            listTOUnderTest._executeOnItemsCollection.returns(executionPromise);
            var res = listTOUnderTest.extendSelect(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeOnItemsCollection 'ExtendSelect' if indexOrItem is a number", function () {
            listTOUnderTest.extendSelect(10);
            sinon.assert.calledOnce(listTOUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(listTOUnderTest._executeOnItemsCollection, sinon.match({ 0: 10 }), "ExtendSelect", "ExtendSelect", [10]);
        });

        it("should execute _executeOnItemsCollection 'ExtendSelect' if indexOrItem is a few numbers", function () {
            listTOUnderTest.extendSelect(10, 20);
            sinon.assert.calledOnce(listTOUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(listTOUnderTest._executeOnItemsCollection, sinon.match({ 0: 10, 1:20 }), "ExtendSelect", "ExtendSelect", [10, 20]);
        });

        it("should execute _executeOnItemsCollection 'ExtendSelect' if indexOrItem is a string", function () {
            listTOUnderTest.extendSelect("item1");
            sinon.assert.calledOnce(listTOUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(listTOUnderTest._executeOnItemsCollection, sinon.match({ 0: "item1" }), "ExtendSelect", "ExtendSelect", ["item1"]);
        });

        it("should execute _executeOnItemsCollection 'ExtendSelect' if indexOrItem is a few strings", function () {
            listTOUnderTest.extendSelect("item1", "item2");
            sinon.assert.calledOnce(listTOUnderTest._executeOnItemsCollection);
            sinon.assert.calledWith(listTOUnderTest._executeOnItemsCollection, sinon.match({ 0: "item1", 1: "item2" }), "ExtendSelect", "ExtendSelect", ["item1", "item2"]);
        });
    });

    describe("selectRange method", function () {
        it("should throw error if null passed", function () {
            assert.throws(function () {
                listTOUnderTest.selectRange(null);
            });
        });
        it("should return the execution promise", function () {
            var executionPromise = {};
            listTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = listTOUnderTest.selectRange(1, 2);
            assert.equal(res, executionPromise);
        });
        it("should call _executeWithEvents and pass it the correct arguments when two numbers passed", function () {
            listTOUnderTest.selectRange(1, 2);
            assert(listTOUnderTest._executeWithEvents.calledOnce);
            assert.deepEqual(listTOUnderTest._executeWithEvents.firstCall.args.splice(1, 3), ["SelectRange", 1, 2]);
        });
        it("should throw error if one argument passed which is not an object", function () {
            assert.throws(function () {
                listTOUnderTest.selectRange(1);
            });
        });
        it("should throw error if an object that not contains both properties passed", function () {
            assert.throws(function () {
                listTOUnderTest.selectRange({});
            });
        });
        it("should throw error if an passed with two arguments but one of the values is not a number", function () {
            assert.throws(function () {
                listTOUnderTest.selectRange(1, "A");
            });
        });
    });

    describe("items method", function () {
        it("should query the property 'all items'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };
            listTOUnderTest._getROProperty.returns(promiseMock);
            listTOUnderTest.items();
            sinon.assert.calledOnce(listTOUnderTest._getROProperty);
            sinon.assert.calledWith(listTOUnderTest._getROProperty, "all items");
        });

        it("should return empty list if no item returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            listTOUnderTest._getROProperty.returns(promiseMock);
            var res = listTOUnderTest.items();
            assert.deepEqual(res, []);
        });

        it("should return a list  with items if items returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            listTOUnderTest._getROProperty.returns(promiseMock);
            var res = listTOUnderTest.items();
            assert.deepEqual(res, ["Item1", "Item2"]);
        });
    });

    describe("selectedItems method", function () {
        it("should query the property 'selection'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1;Item2");
                }
            };
            listTOUnderTest._getROProperty.returns(promiseMock);
            listTOUnderTest.selectedItems();
            sinon.assert.calledOnce(listTOUnderTest._getROProperty);
            sinon.assert.calledWith(listTOUnderTest._getROProperty, "selection");
        });

        it("should return empty list if no item returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            listTOUnderTest._getROProperty.returns(promiseMock);
            var res = listTOUnderTest.selectedItems();
            assert.deepEqual(res, []);
        });

        it("should return a list  with selectedItems if selectedItems returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1;Item2");
                }
            };

            listTOUnderTest._getROProperty.returns(promiseMock);
            var res = listTOUnderTest.selectedItems();
            assert.deepEqual(res, ["Item1", "Item2"]);
        });
    });
});
