// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/05/2016.
 */

var assert = require("assert");
var sinon = require("sinon");

describe("TableCell", function () {
    var TableCell = require("../lib/table_cell.js").TableCell;
    var tableCellUnderTest;
    var owner;
    beforeEach(function () {
        owner = {owner: "Owner", _executeWithEventsOnItem: sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub()};
        tableCellUnderTest = new TableCell(owner, 0, 0);
        tableCellUnderTest._executeWithEventsOnItem = sinon.stub();
        tableCellUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    describe("Constructor", function () {
        it("should assign correct values", function () {
            var parent = owner;
            tableCellUnderTest = new TableCell(parent, 0, 0);
            assert.strictEqual(tableCellUnderTest._ownerTable, parent);
            assert.strictEqual(tableCellUnderTest._rowIdentifier, 0);
            assert.strictEqual(tableCellUnderTest._columnIdentifier, 0);
        });
    });

    describe("x method", function () {
        it("should execute _getCellX with correct parameter", function () {
            tableCellUnderTest._ownerTable._getCellX = sinon.stub();
            tableCellUnderTest.x();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItemOnError, tableCellUnderTest._ownerTable._getCellX, 0);
        });

        it("should return what's returned from _getCellX as is", function () {
            tableCellUnderTest._executeWithEventsOnItemOnError.returns("some x");
            var res = tableCellUnderTest.x();
            assert.strictEqual(res, "some x");
        });
    });

    describe("y method", function () {
        it("should execute _getCellY with correct parameter", function () {
            tableCellUnderTest._ownerTable._getCellY = sinon.stub();
            tableCellUnderTest.y();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItemOnError, tableCellUnderTest._ownerTable._getCellY, 0);
        });

        it("should return what's returned from _getCellY as is", function () {
            tableCellUnderTest._executeWithEventsOnItemOnError.returns("some y");
            var res = tableCellUnderTest.y();
            assert.strictEqual(res, "some y");
        });
    });

    describe("height method", function () {
        it("should execute _getCellHeight with correct parameter", function () {
            tableCellUnderTest._ownerTable._getCellHeight = sinon.stub();
            tableCellUnderTest.height();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItemOnError, tableCellUnderTest._ownerTable._getCellHeight, 0);
        });

        it("should return what's returned from _getCellHeight as is", function () {
            tableCellUnderTest._executeWithEventsOnItemOnError.returns("some height");
            var res = tableCellUnderTest.height();
            assert.strictEqual(res, "some height");
        });
    });

    describe("width method", function () {
        it("should execute _getCellWidth with correct parameter", function () {
            tableCellUnderTest._ownerTable._getCellWidth = sinon.stub();
            tableCellUnderTest.width();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItemOnError, tableCellUnderTest._ownerTable._getCellWidth, 0);
        });

        it("should return what's returned from _getCellWidth as is", function () {
            tableCellUnderTest._executeWithEventsOnItemOnError.returns("some width");
            var res = tableCellUnderTest.width();
            assert.strictEqual(res, "some width");
        });
    });

    describe("value method", function () {
        it("should execute _getCellValue with correct parameter", function () {
            tableCellUnderTest._ownerTable._getCellValue = sinon.stub();
            tableCellUnderTest.value();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItemOnError, tableCellUnderTest._ownerTable._getCellValue, 0);
        });

        it("should return what's returned from _getCellValue as is", function () {
            tableCellUnderTest._executeWithEventsOnItemOnError.returns("some value");
            var res = tableCellUnderTest.value();
            assert.strictEqual(res, "some value");
        });
    });

    describe("setValue method", function () {
        it("should execute _setCellValue with correct parameter", function () {
            tableCellUnderTest._ownerTable._setCellValue = sinon.stub();
            tableCellUnderTest.setValue("some value");
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItem);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItem, tableCellUnderTest._ownerTable._setCellValue, 0, 0, "some value");
        });

        it("should return the promise as is", function () {
            var promiseMock = {};
            tableCellUnderTest._executeWithEventsOnItem.returns(promiseMock);
            var res = tableCellUnderTest.setValue("some value");
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("columnName method", function () {
        it("should execute _getCellColumnName with correct parameter", function () {
            tableCellUnderTest._ownerTable._getCellColumnName = sinon.stub();
            tableCellUnderTest.columnName();
            sinon.assert.calledOnce(tableCellUnderTest._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(tableCellUnderTest._executeWithEventsOnItemOnError, tableCellUnderTest._ownerTable._getCellColumnName, 0);
        });

        it("should return what's returned from _getCellColumnName as is", function () {
            tableCellUnderTest._executeWithEventsOnItemOnError.returns("some colname");
            var res = tableCellUnderTest.columnName();
            assert.strictEqual(res, "some colname");
        });
    });
});