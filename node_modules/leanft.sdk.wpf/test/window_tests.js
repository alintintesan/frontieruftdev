// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var WindowState = Core.WindowState;

describe("Window Description", function () {

    var Window = require("../lib/window.js").Window;
    var windowDescriptionUnderTest;

    beforeEach(function () {
        windowDescriptionUnderTest = Window();
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and 'Window' LeanFT type", function () {
            windowDescriptionUnderTest = new Window();
            assert.deepEqual(windowDescriptionUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "Window"
            });
        });
    });

    describe("isModal method", function () {
        it("should add 'Ismodal' to _properties when value is given", function () {
            windowDescriptionUnderTest.isModal(true);
            assert.strictEqual(windowDescriptionUnderTest._properties["Ismodal"], true);
        });

        it("should add 'Ismodal' to _properties when value is given in string", function () {
            windowDescriptionUnderTest.isModal("true");
            assert.strictEqual(windowDescriptionUnderTest._properties["Ismodal"], true);
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.isModal(true);
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'Ismodal' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["Ismodal"] = true;
            windowDescriptionUnderTest.isModal(null);
            assert(!("Ismodal" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'Ismodal' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["Ismodal"] = true;
            var result = windowDescriptionUnderTest.isModal();
            assert.equal(result, true);
        });
    });

    describe("parentText method", function () {
        it("should add 'parent text' to _properties when value is given", function () {
            windowDescriptionUnderTest.parentText("parentText");
            assert.strictEqual(windowDescriptionUnderTest._properties["parent text"], "parentText");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = windowDescriptionUnderTest.parentText("parentText");
            assert.strictEqual(result, windowDescriptionUnderTest);
        });

        it("should remove 'parent text' from _properties when value is null", function () {
            windowDescriptionUnderTest._properties["parent text"] = "parentText";
            windowDescriptionUnderTest.parentText(null);
            assert(!("parent text" in windowDescriptionUnderTest._properties));
        });

        it("should return the value of 'parent text' from _properties when value is not given", function () {
            windowDescriptionUnderTest._properties["parent text"] = "parentText";
            var result = windowDescriptionUnderTest.parentText();
            assert.equal(result, "parentText");
        });
    });
});

describe("Window Test Object", function () {
    var Core = require("leanft.sdk.core");
    var MouseButton = Core.MouseButton;
    var WindowTO = require("../lib/window.js").WindowTO;
    var windowTestObjectUnderTest;

    beforeEach(function () {
        windowTestObjectUnderTest = new WindowTO();
        sinon.stub(windowTestObjectUnderTest, "_getROProperty");
        sinon.stub(windowTestObjectUnderTest, "_executeWithEvents");
        sinon.stub(windowTestObjectUnderTest, "_getROProperties");
    });

    afterEach(function () {
        windowTestObjectUnderTest._executeWithEvents.restore();
        windowTestObjectUnderTest._getROProperty.restore();
        windowTestObjectUnderTest._getROProperties.restore();
    });

    describe("activate method", function () {
        it("should execute command 'Activate' if there is no button", function () {
            windowTestObjectUnderTest.activate();
            sinon.assert.calledOnce(windowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTestObjectUnderTest._executeWithEvents, sinon.match({}), "Activate");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            windowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = windowTestObjectUnderTest.activate();
            assert.equal(res, executionPromise);
        });

        it("should execute command 'Activate' if button is null", function () {
            windowTestObjectUnderTest.activate(null);
            sinon.assert.calledOnce(windowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTestObjectUnderTest._executeWithEvents, sinon.match({}), "Activate");
        });

        it("should execute command 'Activate' if button is 'left'", function () {
            windowTestObjectUnderTest.activate(MouseButton.left);
            sinon.assert.calledOnce(windowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTestObjectUnderTest._executeWithEvents, sinon.match({ 0: MouseButton.left }), "Activate", MouseButton._convert(MouseButton.left));
        });

        it("should execute command 'Activate' if button is 'middle'", function () {
            windowTestObjectUnderTest.activate(MouseButton.middle);
            sinon.assert.calledOnce(windowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTestObjectUnderTest._executeWithEvents, sinon.match({ 0: MouseButton.middle }), "Activate", MouseButton._convert(MouseButton.middle));
        });

        it("should execute command 'Activate' if button is 'right'", function () {
            windowTestObjectUnderTest.activate(MouseButton.right);
            sinon.assert.calledOnce(windowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTestObjectUnderTest._executeWithEvents, sinon.match({ 0: MouseButton.right }), "Activate", MouseButton._convert(MouseButton.right));
        });

        it("should execute command 'Activate' with undefined if button is 'wrong'", function () {
            windowTestObjectUnderTest.activate("wrong");
            sinon.assert.calledOnce(windowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTestObjectUnderTest._executeWithEvents, sinon.match({ 0: "wrong" }), "Activate", undefined);
        });
    });

    describe("minimize method", function () {
        it("should execute _executeWithEvents 'Minimize'", function () {
            windowTestObjectUnderTest.minimize();
            sinon.assert.calledOnce(windowTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(windowTestObjectUnderTest._executeWithEvents, sinon.match({}), "Minimize");
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            windowTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = windowTestObjectUnderTest.minimize();
            assert.equal(res, executionPromise);
        });
    });

    describe("windowState method", function () {
        var promiseMock = { then: function (cb) { return cb("maximized"); } };
        it("should query the property 'WindowVisualState'", function () {
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            windowTestObjectUnderTest.windowState();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "WindowVisualState", sinon.match({}));            
        });

        it("should return promise as WindowState", function () {
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.windowState();
            assert.strictEqual(res, WindowState.maximized);
        });
    });

    describe("isModal method", function () {
        it("should execute _getROProperty 'Ismodal'", function () {
            windowTestObjectUnderTest.isModal();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "Ismodal", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.isModal();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("parentText method", function () {
        it("should execute _getROProperty 'parent text'", function () {
            windowTestObjectUnderTest.parentText();
            sinon.assert.calledOnce(windowTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(windowTestObjectUnderTest._getROProperty, "parent text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            windowTestObjectUnderTest._getROProperty.returns(promiseMock);
            var res = windowTestObjectUnderTest.parentText();
            assert.strictEqual(res, promiseMock);
        });
    });
});
