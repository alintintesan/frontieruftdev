// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/03/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("ScrollBar Description", function () {

    var ScrollBar = require("../lib/scroll_bar.js").ScrollBar;
    var scrollBarDescriptionUnderTest;
    
    beforeEach(function () {
        progressBarDescriptionUnderTest = new ScrollBar({});
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and 'ScrollBar' LeanFT type", function () {
            scrollBarDescriptionUnderTest = new ScrollBar();
            assert.deepEqual(scrollBarDescriptionUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "ScrollBar"
            });
        });
    });

});

describe("ScrollBar TO", function () {

    var ScrollBarTO = require("../lib/scroll_bar.js").ScrollBarTO;
    var scrollBarTOUnderTest;

    beforeEach(function () {
        scrollBarTOUnderTest = new ScrollBarTO();
        sinon.stub(scrollBarTOUnderTest, "_getROProperty");
        sinon.stub(scrollBarTOUnderTest, "_executeWithEvents");
    });

    afterEach(function () {
        scrollBarTOUnderTest._getROProperty.restore();
        scrollBarTOUnderTest._executeWithEvents.restore();
    });

    describe("maximum method", function () {
        
        it("should return the execution promise", function () {
            var executionPromise = {};
            scrollBarTOUnderTest._getROProperty.returns(executionPromise);
            var res = scrollBarTOUnderTest.maximum();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Maximum' with correct parameters", function () {
            scrollBarTOUnderTest.maximum();
            sinon.assert.calledOnce(scrollBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(scrollBarTOUnderTest._getROProperty, "Maximum", sinon.match({}));
        });        
    });

    describe("minimum method", function () {
        
        it("should return the execution promise", function () {
            var executionPromise = {};
            scrollBarTOUnderTest._getROProperty.returns(executionPromise);
            var res = scrollBarTOUnderTest.minimum();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Minimum' with correct parameters", function () {
            scrollBarTOUnderTest.minimum();
            sinon.assert.calledOnce(scrollBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(scrollBarTOUnderTest._getROProperty, "Minimum", sinon.match({}));
        });        
    });

    describe("value method", function () {
        
        it("should return the execution promise", function () {
            var executionPromise = {};
            scrollBarTOUnderTest._getROProperty.returns(executionPromise);
            var res = scrollBarTOUnderTest.value();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'Value' with correct parameters", function () {
            scrollBarTOUnderTest.value();
            sinon.assert.calledOnce(scrollBarTOUnderTest._getROProperty);
            sinon.assert.calledWith(scrollBarTOUnderTest._getROProperty, "Value", sinon.match({}));
        });        
    });

    describe("setPosition method", function () {
        it("should throw error if position is undefined", function () {
            assert.throws(function () {
                scrollBarTOUnderTest.setPosition();
            });
        });

        it("should throw error if position is null", function () {
            assert.throws(function () {
                scrollBarTOUnderTest.setPosition(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            scrollBarTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = scrollBarTOUnderTest.setPosition(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Set' if value is a number", function () {
            scrollBarTOUnderTest.setPosition(10);
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Set", 10);
        });

        it("should execute _executeWithEvents 'Set' if value is a string", function () {
            scrollBarTOUnderTest.setPosition("10");
            sinon.assert.calledOnce(scrollBarTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(scrollBarTOUnderTest._executeWithEvents, sinon.match({ 0: "10" }), "Set", 10);
        });        
    });
    
});
