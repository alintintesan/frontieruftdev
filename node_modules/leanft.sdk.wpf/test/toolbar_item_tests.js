// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 09/26/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");

describe("ToolBarItem", function () {

    var ToolBarItem = require("../lib/toolbar_item.js").ToolBarItem;
    var toolBarItemUnderTest;

    beforeEach(function () {
        var owner = { owner: "Owner", _executeWithEventsOnItem : sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub() };
        toolBarItemUnderTest = new ToolBarItem(owner, 10, "TextRepresentation");
        toolBarItemUnderTest._executeWithEventsOnItem = sinon.stub();
        toolBarItemUnderTest._executeWithEventsOnItemOnError = sinon.stub();
    });

    afterEach(function () {        
    });


    describe("Constructor", function () {
        it("should assign correct values", function () {
            var owner = { owner: "Owner", _executeWithEventsOnItem : sinon.stub(), _executeWithEventsOnItemOnError: sinon.stub() };
            var parent = owner;
            toolBarItemUnderTest = new ToolBarItem(parent, 10, "TextRepresentation");
            assert.strictEqual(toolBarItemUnderTest._ownerToolBar, parent);
            assert.strictEqual(toolBarItemUnderTest._identifier, 10);
            assert.strictEqual(toolBarItemUnderTest._textRepresentation, "TextRepresentation");
        });        
    });

    describe("identifier method", function () {
        it("should return correct values", function () {
            var res = toolBarItemUnderTest.identifier();
            assert.strictEqual(res, 10);            
        });
    });

    describe("isChecked method", function () {
        it("should execute _isItemChecked with correct parameter", function () {
            toolBarItemUnderTest._ownerToolBar._isItemChecked = sinon.stub();
            toolBarItemUnderTest.isChecked();
            sinon.assert.calledOnce(toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError, toolBarItemUnderTest._ownerToolBar._isItemChecked, 10);
        });

        it("should return boolean if _isItemChecked returns boolean", function () {
            toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = toolBarItemUnderTest.isChecked();
            assert.strictEqual(res, true);
        });
    });

    describe("hasEllipses method", function () {
        it("should execute _hasItemEllipses with correct parameter", function () {
            toolBarItemUnderTest._ownerToolBar._hasItemEllipses = sinon.stub();
            toolBarItemUnderTest.hasEllipses();
            sinon.assert.calledOnce(toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError, toolBarItemUnderTest._ownerToolBar._hasItemEllipses, 10);
        });

        it("should return boolean if _hasItemEllipses returns boolean", function () {
            toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = toolBarItemUnderTest.hasEllipses();
            assert.strictEqual(res, true);
        });
    });

    describe("isEnabled method", function () {
        it("should execute _isItemEnabled with correct parameter", function () {
            toolBarItemUnderTest._ownerToolBar._isItemEnabled = sinon.stub();
            toolBarItemUnderTest.isEnabled();
            sinon.assert.calledOnce(toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError, toolBarItemUnderTest._ownerToolBar._isItemEnabled, 10);
        });

        it("should return boolean if _isItemEnabled returns boolean", function () {
            toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = toolBarItemUnderTest.isEnabled();
            assert.strictEqual(res, true);
        });
    });

    describe("isHot method", function () {
        it("should execute _isItemHot with correct parameter", function () {
            toolBarItemUnderTest._ownerToolBar._isItemHot = sinon.stub();
            toolBarItemUnderTest.isHot();
            sinon.assert.calledOnce(toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError, toolBarItemUnderTest._ownerToolBar._isItemHot, 10);
        });

        it("should return boolean if _isItemHot returns boolean", function () {
            toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError = sinon.stub().returns(true);;
            var res = toolBarItemUnderTest.isHot();
            assert.strictEqual(res, true);
        });
    });

    describe("index method", function () {
        it("should execute _getItemIndex with correct parameter", function () {
            toolBarItemUnderTest._ownerToolBar._getItemIndex = sinon.stub();
            toolBarItemUnderTest.index();
            sinon.assert.calledOnce(toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError, toolBarItemUnderTest._ownerToolBar._getItemIndex, 10);
        });

        it("should return number if _getItemIndex returns number", function () {
            toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError = sinon.stub().returns(10);;
            var res = toolBarItemUnderTest.index();
            assert.strictEqual(res, 10);
        });
    });

    describe("name method", function () {
        it("should execute _getItemName with correct parameter", function () {
            toolBarItemUnderTest._ownerToolBar._getItemName = sinon.stub();
            toolBarItemUnderTest.name();
            sinon.assert.calledOnce(toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError, toolBarItemUnderTest._ownerToolBar._getItemName, 10);
        });

        it("should return string if _getItemName returns string", function () {
            toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError = sinon.stub().returns("The Name");;
            var res = toolBarItemUnderTest.name();
            assert.strictEqual(res, "The Name");
        });
    });

    describe("type method", function () {
        it("should execute _getItemType with correct parameter", function () {
            toolBarItemUnderTest._ownerToolBar._getItemType = sinon.stub();
            toolBarItemUnderTest.type();
            sinon.assert.calledOnce(toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError);
            sinon.assert.calledWith(toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError, toolBarItemUnderTest._ownerToolBar._getItemType, 10);
        });

        it("should return string if _getItemType returns string", function () {
            toolBarItemUnderTest._ownerToolBar._executeWithEventsOnItemOnError = sinon.stub().returns("The Type");;
            var res = toolBarItemUnderTest.type();
            assert.strictEqual(res, "The Type");
        });
    });

    describe("textRepresentation method", function () {
        it("should return correct values", function () {
            var res = toolBarItemUnderTest.textRepresentation();
            assert.strictEqual(res, "TextRepresentation");
        });
    });
});
