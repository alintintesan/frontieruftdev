// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 10/05/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var MouseButton = Core.MouseButton;

describe("Table Description", function () {
    var Table = require("../lib/table.js").Table;
    var tableDescriptionUnderTest;

    beforeEach(function () {
        tableDescriptionUnderTest = Table();
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and 'Table' LeanFT type", function () {
            tableDescriptionUnderTest = new Table();
            assert.deepEqual(tableDescriptionUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "Table"
            });
        });
    });

    describe("name method", function () {
        it("should add 'name' to _properties when value is given", function () {
            tableDescriptionUnderTest.name("Somename");
            assert.strictEqual(tableDescriptionUnderTest._properties["name"], "Somename");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = tableDescriptionUnderTest.name("Somename");
            assert.strictEqual(result, tableDescriptionUnderTest);
        });

        it("should remove 'name' from _properties when value is null", function () {
            tableDescriptionUnderTest._properties["name"] = "Somename";
            assert(("name" in tableDescriptionUnderTest._properties));
            tableDescriptionUnderTest.name(null);
            assert(!("name" in tableDescriptionUnderTest._properties));
        });

        it("should return the value of 'Somename' from _properties when value is not given", function () {
            tableDescriptionUnderTest._properties["name"] = "Somename";
            var value = tableDescriptionUnderTest.name();
            assert.strictEqual(value, "Somename");
        });
    });
});

describe("Table Test Object", function () {
    var TableTO = require("../lib/table.js").TableTO;
    var TableKeyModifier = require("../lib/table.js").TableKeyModifier;
    var tableTestObjectUnderTest;

    beforeEach(function () {
        tableTestObjectUnderTest = new TableTO();
        sinon.stub(tableTestObjectUnderTest, "_getROProperty");
        tableTestObjectUnderTest._executeNotWrapped = sinon.stub();
        sinon.stub(tableTestObjectUnderTest, "_executeWithEvents");
        sinon.stub(tableTestObjectUnderTest, "_executeOnItemsCollection");
        sinon.stub(tableTestObjectUnderTest, "_executeSingleOpOnCollection");
        tableTestObjectUnderTest._executeWithEventsOnItem = sinon.stub();
        tableTestObjectUnderTest._executeWithEventsOnItemOnError = sinon.stub();
        tableTestObjectUnderTest._getRowAndColumnCount = sinon.stub();
        tableTestObjectUnderTest._getColumnCount = sinon.stub();
    });

    describe("name method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = tableTestObjectUnderTest.name();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'name' with correct parameters", function () {
            tableTestObjectUnderTest.name();
            sinon.assert.calledOnce(tableTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(tableTestObjectUnderTest._getROProperty, "name", sinon.match({}));
        });
    });

    describe("activateCell method", function () {
        it("should execute command 'ActivateCell' if the 'row' parameter is an index", function () {
            tableTestObjectUnderTest.activateCell(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: 0
            }), "ActivateCell", 0, 0);
        });

        it("should execute command 'ActivateCell' if the 'row' parameter is an index string", function () {
            tableTestObjectUnderTest.activateCell("0", 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0",
                1: 0
            }), "ActivateCell", 0, 0);
        });

        it("should execute command 'ActivateCell' if the 'columnOrIndex' parameter is the header of a column", function () {
            tableTestObjectUnderTest.activateCell(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: "col header"
            }), "ActivateCell", 0, "col header");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.activateCell(0, 0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.activateCell(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.activateCell();
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.activateCell(0, null);
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.activateCell(0);
            });
        });
    });

    describe("extendSelect method", function () {
        it("should execute command 'ExtendSelect' if the 'row' parameter is an index", function () {
            tableTestObjectUnderTest.extendSelect(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: 0
            }), "ExtendSelect", 0, 0);
        });

        it("should execute command 'ExtendSelect' if the 'row' parameter is an index string", function () {
            tableTestObjectUnderTest.extendSelect("0", 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0",
                1: 0
            }), "ExtendSelect", 0, 0);
        });

        it("should execute command 'ExtendSelect' if the 'columnOrIndex' parameter is the header of a column", function () {
            tableTestObjectUnderTest.extendSelect(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: "col header"
            }), "ExtendSelect", 0, "col header");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.extendSelect(0, 0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.extendSelect(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.extendSelect();
            });
        });

        it("should execute command 'ExtendSelect' if the 'columnOrIndex' parameter is null", function () {
            tableTestObjectUnderTest.extendSelect(0, null);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0
            }), "ExtendSelect", 0);
        });

        it("should execute command 'ExtendSelect' if the 'columnOrIndex' parameter is undefined", function () {
            tableTestObjectUnderTest.extendSelect(0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0
            }), "ExtendSelect", 0);
        });
    });

    describe("selectCell method", function () {
        it("should execute command 'SelectCell' if the 'row' parameter is an index", function () {
            tableTestObjectUnderTest.selectCell(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: 0
            }), "SelectCell", 0, 0);
        });

        it("should execute command 'SelectCell' if the 'row' parameter is an index string", function () {
            tableTestObjectUnderTest.selectCell("0", 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0",
                1: 0
            }), "SelectCell", 0, 0);
        });

        it("should execute command 'SelectCell' if the 'columnOrIndex' parameter is the header of a column", function () {
            tableTestObjectUnderTest.selectCell(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0,
                1: "col header"
            }), "SelectCell", 0, "col header");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.selectCell(0, 0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCell(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCell();
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCell(0, null);
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectCell(0);
            });
        });
    });

    describe("selectColumn method", function () {
        it("should execute command 'SelectColumn' if the 'columnOrIndex' parameter is an index", function () {
            tableTestObjectUnderTest.selectColumn(0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0
            }), "SelectColumn", 0);
        });

        it("should execute command 'SelectColumn' if the 'columnOrIndex' parameter is the header of a column", function () {
            tableTestObjectUnderTest.selectColumn("col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "col header"
            }), "SelectColumn", "col header");
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.selectColumn(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'columnOrIndex' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectColumn(null);
            });
        });

        it("should throw error if the 'columnOrIndex' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectColumn();
            });
        });
    });

    describe("selectRow method", function () {
        it("should execute command 'SelectRow' if the 'row' parameter is an index", function () {
            tableTestObjectUnderTest.selectRow(0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: 0
            }), "SelectRow", 0);
        });

        it("should execute command 'SelectRow' if the 'row' parameter is an index string", function () {
            tableTestObjectUnderTest.selectRow("0");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeWithEvents, sinon.match({
                0: "0"
            }), "SelectRow", 0);
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            tableTestObjectUnderTest._executeWithEvents.returns(promiseMock);
            var res = tableTestObjectUnderTest.selectRow(0);
            assert.strictEqual(res, promiseMock);
        });

        it("should throw error if the 'row' parameter is null", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectRow(null);
            });
        });

        it("should throw error if the 'row' parameter is undefined", function () {
            assert.throws(function () {
                tableTestObjectUnderTest.selectRow();
            });
        });
    });
    
    describe("_rowCount method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._rowCount();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'RowCount'", function () {
            tableTestObjectUnderTest._rowCount();
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({}), "RowCount");
        });
    });

    describe("_columnCount method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._columnCount();
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'ColumnCount'", function () {
            tableTestObjectUnderTest._columnCount();
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({}), "ColumnCount");
        });
    });

    describe("cells method", function () {
        it("should execute _cells with correct parameter", function () {
            tableTestObjectUnderTest._cells = sinon.stub();
            tableTestObjectUnderTest.cells(10, 20);
            sinon.assert.calledOnce(tableTestObjectUnderTest._cells);
            sinon.assert.calledWith(tableTestObjectUnderTest._cells, 10, 20);
        });

        it("should execute _cells with correct parameter", function () {
            tableTestObjectUnderTest._cells = sinon.stub();
            tableTestObjectUnderTest.cells(10);
            sinon.assert.calledOnce(tableTestObjectUnderTest._cells);
            sinon.assert.calledWith(tableTestObjectUnderTest._cells, 10);
        });

        it("should execute _cells with correct parameter", function () {
            tableTestObjectUnderTest._cells = sinon.stub();
            tableTestObjectUnderTest.cells();
            sinon.assert.calledOnce(tableTestObjectUnderTest._cells);
            sinon.assert.calledWith(tableTestObjectUnderTest._cells);
        });

        it("should call _getRowAndColumnCount if row is null and column is null", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb({rowCount: 3, columnCount: 5});
                }
            };
            tableTestObjectUnderTest._getRowAndColumnCount.returns(promiseMock);
            tableTestObjectUnderTest.cells();
            sinon.assert.calledOnce(tableTestObjectUnderTest._getRowAndColumnCount);
            sinon.assert.calledWith(tableTestObjectUnderTest._getRowAndColumnCount);
        });

        it("should call _getColumnCount if row is not null and column is null", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(3);
                }
            };
            tableTestObjectUnderTest._getColumnCount.returns(promiseMock);
            tableTestObjectUnderTest.cells(2);
            sinon.assert.calledOnce(tableTestObjectUnderTest._getColumnCount);
            sinon.assert.calledWith(tableTestObjectUnderTest._getColumnCount);
        });

        it("should call _createCell if row is not null and column is not null", function () {
            tableTestObjectUnderTest._createCell = sinon.stub();
            tableTestObjectUnderTest.cells(2, 3);
            sinon.assert.calledOnce(tableTestObjectUnderTest._createCell);
            sinon.assert.calledWith(tableTestObjectUnderTest._createCell, 2, 3);
        });
    });

    describe("getCell method", function () {
        it("should return the TableCell with correct values", function () {
            var res = tableTestObjectUnderTest.getCell(0, 0);
            assert.strictEqual(res._rowIdentifier, 0);
            assert.strictEqual(res._columnIdentifier, 0);
            assert.deepEqual(res._ownerTable, tableTestObjectUnderTest);
        });
    });

    describe("_getCellX method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._getCellX(0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the parameters are indices", function () {
            tableTestObjectUnderTest._getCellX(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "GetCellProperty", 0, 0, "x");
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._getCellX(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header"
            }), "GetCellProperty", 0, "col header", "x");
        });
    });

    describe("_getCellY method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._getCellY(0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the parameters are indices", function () {
            tableTestObjectUnderTest._getCellY(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "GetCellProperty", 0, 0, "y");
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._getCellY(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header"
            }), "GetCellProperty", 0, "col header", "y");
        });
    });

    describe("_getCellHeight method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._getCellHeight(0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the parameters are indices", function () {
            tableTestObjectUnderTest._getCellHeight(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "GetCellProperty", 0, 0, "height");
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._getCellHeight(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header"
            }), "GetCellProperty", 0, "col header", "height");
        });
    });

    describe("_getCellWidth method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._getCellWidth(0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the parameters are indices", function () {
            tableTestObjectUnderTest._getCellWidth(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "GetCellProperty", 0, 0, "width");
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._getCellWidth(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header"
            }), "GetCellProperty", 0, "col header", "width");
        });
    });

    describe("_getCellValue method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._getCellValue(0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the parameters are indices", function () {
            tableTestObjectUnderTest._getCellValue(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "GetCellProperty", 0, 0, "value");
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._getCellValue(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header"
            }), "GetCellProperty", 0, "col header", "value");
        });
    });

    describe("_getCellColumnName method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._getCellColumnName(0, 0);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the parameters are indices", function () {
            tableTestObjectUnderTest._getCellColumnName(0, 0);
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0
            }), "GetCellProperty", 0, 0, "colname");
        });

        it("should execute _executeNotWrapped 'GetCellProperty' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._getCellColumnName(0, "col header");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header"
            }), "GetCellProperty", 0, "col header", "colname");
        });
    });

    describe("_setCellValue method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            tableTestObjectUnderTest._executeNotWrapped.returns(executionPromise);
            var res = tableTestObjectUnderTest._setCellValue(0, 0, "some value");
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'SetCellData' if the parameters are indices", function () {
            tableTestObjectUnderTest._setCellValue(0, 0, "some value");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: 0,
                2: "some value"
            }), "SetCellData", 0, 0, "some value");
        });

        it("should execute _executeNotWrapped 'SetCellData' if the 'columnIdentifier' parameter is the header of the column", function () {
            tableTestObjectUnderTest._setCellValue(0, "col header", "some value");
            sinon.assert.calledOnce(tableTestObjectUnderTest._executeNotWrapped);
            sinon.assert.calledWith(tableTestObjectUnderTest._executeNotWrapped, sinon.match({
                0: 0,
                1: "col header",
                2: "some value"
            }), "SetCellData", 0, "col header", "some value");
        });
    });

    describe("_createCell method", function () {
        it("should return the TableCell with correct values", function () {
            var res = tableTestObjectUnderTest._createCell(0, 0);
            assert.strictEqual(res._rowIdentifier, 0);
            assert.strictEqual(res._columnIdentifier, 0);
            assert.deepEqual(res._ownerTable, tableTestObjectUnderTest);
        });
    });
});