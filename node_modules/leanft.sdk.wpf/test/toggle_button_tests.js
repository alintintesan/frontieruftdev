// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/**
 * Created on 09/05/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var ToggleButton = require("../lib/toggle_button.js").ToggleButton;
var ButtonTO = require("../lib/button.js").ButtonTO;
var Core = require("leanft.sdk.core");
var CheckedState = Core.CheckedState;

describe("ToggleButton",function() {
    var toggleButtonUnderTest;
    beforeEach(function () {
        buttonTestObjectUnderTest = new ButtonTO();
        toggleButtonUnderTest = new ToggleButton(buttonTestObjectUnderTest);
        sinon.stub(buttonTestObjectUnderTest, "_getROProperty");
        sinon.stub(buttonTestObjectUnderTest, "_executeWithEvents");
    });

    describe("isChecked method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            buttonTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = toggleButtonUnderTest.isChecked();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'IsChecked' with correct parameters", function () {
            toggleButtonUnderTest.isChecked();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "IsChecked", sinon.match({}));
        });
    });

    describe("isThreeState method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            buttonTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = toggleButtonUnderTest.isThreeState();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'IsThreeState' with correct parameters", function () {
            toggleButtonUnderTest.isThreeState();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "IsThreeState", sinon.match({}));
        });
    });

    describe("set method", function () {
        it("should throw error if no arguments passed", function () {
            assert.throws(function () {
                toggleButtonUnderTest.set();
            });
        });
        it("should throw error if null passed", function () {
            assert.throws(function () {
                toggleButtonUnderTest.set(null);
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            buttonTestObjectUnderTest._executeWithEvents.returns(executionPromise);
            var res = toggleButtonUnderTest.set(CheckedState.checked);
            assert.equal(res, executionPromise);
        });

        it("should call _executeWithEvents and pass it the correct arguments if the input is CheckedState", function () {
            toggleButtonUnderTest.set(CheckedState.checked);
            sinon.assert.calledOnce(buttonTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(buttonTestObjectUnderTest._executeWithEvents, sinon.match({ 0: CheckedState.checked }), "Set", "ON");
        });

        it("should call _executeWithEvents and pass it the correct arguments if the input is string", function () {
            toggleButtonUnderTest.set("checked");
            sinon.assert.calledOnce(buttonTestObjectUnderTest._executeWithEvents);
            sinon.assert.calledWith(buttonTestObjectUnderTest._executeWithEvents, sinon.match({ 0: "checked" }), "Set", "ON");
        });
    });

    describe("state method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            buttonTestObjectUnderTest._getROProperty.returns(executionPromise);
            var res = toggleButtonUnderTest.state();
            assert.equal(res, executionPromise);
        });

        it("should execute _getROProperty 'checked' with correct parameters", function () {
            toggleButtonUnderTest.state();
            sinon.assert.calledOnce(buttonTestObjectUnderTest._getROProperty);
            sinon.assert.calledWith(buttonTestObjectUnderTest._getROProperty, "checked", sinon.match({}));
        });
    });
});
