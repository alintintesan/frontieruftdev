// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 06/15/2016.
 */

var assert = require("assert");
var sinon = require("sinon");
var Core = require("leanft.sdk.core");
var MouseButton = Core.MouseButton;

describe("TreeView Description", function () {

    var TreeView = require("../lib/tree_view.js").TreeView;
    var treeViewDescUnderTest;

    beforeEach(function () {
        treeViewDescUnderTest = TreeView();
    });

    describe("Constructor", function () {
        it("should assign 'WPF' and 'TreeView' LeanFT type", function () {
            treeViewDescUnderTest = TreeView();
            assert.deepEqual(treeViewDescUnderTest.leanFTType, {
                technology: "WPF",
                leanftType: "TreeView"
            });
        });
    });

    describe("name method", function () {
        it("should add 'name' to _properties when value is given", function () {
            treeViewDescUnderTest.name("name");
            assert.strictEqual(treeViewDescUnderTest._properties["name"], "name");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescUnderTest.name("name");
            assert.strictEqual(result, treeViewDescUnderTest);
        });

        it("should remove 'name' from _properties when value is null", function () {
            treeViewDescUnderTest._properties["name"] = "name";
            treeViewDescUnderTest.name(null);
            assert(!("name" in treeViewDescUnderTest._properties));
        });

        it("should return the value of 'name' from _properties when value is not given", function () {
            treeViewDescUnderTest._properties["name"] = "name";
            var name = treeViewDescUnderTest.name();
            assert.equal(name, "name");
        });
    });

    describe("parentText method", function () {
        it("should add 'parent text' to _properties when value is given", function () {
            treeViewDescUnderTest.parentText("parentText");
            assert.strictEqual(treeViewDescUnderTest._properties["parent text"], "parentText");
        });

        it("should return this - builder pattern when value is given", function () {
            var result = treeViewDescUnderTest.parentText("parentText");
            assert.strictEqual(result, treeViewDescUnderTest);
        });

        it("should remove 'parent text' from _properties when value is null", function () {
            treeViewDescUnderTest._properties["parent text"] = "parentText";
            treeViewDescUnderTest.parentText(null);
            assert(!("parent text" in treeViewDescUnderTest._properties));
        });

        it("should return the value of 'parent text' from _properties when value is not given", function () {
            treeViewDescUnderTest._properties["parent text"] = "parentText";
            var result = treeViewDescUnderTest.parentText();
            assert.equal(result, "parentText");
        });
    });

    describe("visibleNodes method", function () {
        it("should add 'all items' to _properties when value is given", function () {
            treeViewDescUnderTest.visibleNodes(["item1", "item2"]);
            assert.strictEqual(treeViewDescUnderTest._properties["all items"], "item1\nitem2");
        });

        it("should add 'all items' to _properties when value is given using property bag", function () {
            treeViewDescUnderTest = TreeView({
                visibleNodes: ["item1", "item2"]
            });
            assert.strictEqual(treeViewDescUnderTest._properties["all items"], "item1\nitem2");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = treeViewDescUnderTest.visibleNodes(["item1", "item2"]);
            assert.strictEqual(result, treeViewDescUnderTest);
        });

        it("should remove 'all items' from _properties when value is null", function () {
            treeViewDescUnderTest._properties["all items"] = "item1\nitem2";
            treeViewDescUnderTest.visibleNodes(null);
            assert(!("all items" in treeViewDescUnderTest._properties));
        });
        it("should return the value of 'all items' from _properties when value is not given", function () {
            treeViewDescUnderTest._properties["all items"] = "item1\nitem2";
            var value = treeViewDescUnderTest.visibleNodes();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'all items' in _properties when get is called", function () {
            treeViewDescUnderTest._properties["all items"] = "item1\nitem2";
            treeViewDescUnderTest.visibleNodes();
            assert.strictEqual(treeViewDescUnderTest._properties["all items"], "item1\nitem2");
        });
    });

    describe("selectedNodes method", function () {
        it("should add 'selection' to _properties when value is given", function () {
            treeViewDescUnderTest.selectedNodes(["item1", "item2"]);
            assert.strictEqual(treeViewDescUnderTest._properties["selection"], "item1\nitem2");
        });

        it("should add 'selection' to _properties when value is given using property bag", function () {
            treeViewDescUnderTest = TreeView({
                selectedNodes: ["item1", "item2"]
            });
            assert.strictEqual(treeViewDescUnderTest._properties["selection"], "item1\nitem2");
        });

        it("should return this - builder pattern, when value is given", function () {
            var result = treeViewDescUnderTest.selectedNodes(["item1", "item2"]);
            assert.strictEqual(result, treeViewDescUnderTest);
        });

        it("should remove 'selection' from _properties when value is null", function () {
            treeViewDescUnderTest._properties["selection"] = "item1\nitem2";
            treeViewDescUnderTest.selectedNodes(null);
            assert(!("selection" in treeViewDescUnderTest._properties));
        });
        it("should return the value of 'selection' from _properties when value is not given", function () {
            treeViewDescUnderTest._properties["selection"] = "item1\nitem2";
            var value = treeViewDescUnderTest.selectedNodes();
            assert.deepEqual(value, ["item1", "item2"]);
        });

        it("should not change value of 'selection' in _properties when get is called", function () {
            treeViewDescUnderTest._properties["selection"] = "item1\nitem2";
            treeViewDescUnderTest.selectedNodes();
            assert.strictEqual(treeViewDescUnderTest._properties["selection"], "item1\nitem2");
        });
    });
});

describe("Tree View Test Object", function () {

    var TreeViewTO = require("../lib/tree_view.js").TreeViewTO;
    var TreeViewNode = require("../lib/treeview_node.js").TreeViewNode;
    var treeViewTOUnderTest;

    var removeExecutorMethods = function (array) {
        array.map(function (item) {
            delete item._executeWithEventsOnItem;
            delete item._executeWithEventsOnItemOnError;
        });
        return array;
    };

    beforeEach(function () {
        treeViewTOUnderTest = new TreeViewTO();
        sinon.stub(treeViewTOUnderTest, "_executeWithEvents");
        sinon.stub(treeViewTOUnderTest, "_getROProperties");        
        sinon.stub(treeViewTOUnderTest, "_getROPropertyWithoutEvents");        
        sinon.stub(treeViewTOUnderTest, "_getROProperty");
        sinon.stub(treeViewTOUnderTest, "_executeWithEventsOnError");
        sinon.stub(treeViewTOUnderTest, "_executeNotWrapped");
    });

    afterEach(function () {
        treeViewTOUnderTest._executeWithEvents.restore();
        treeViewTOUnderTest._getROProperties.restore();
        treeViewTOUnderTest._getROProperty.restore();
        treeViewTOUnderTest._executeWithEventsOnError.restore();
        treeViewTOUnderTest._executeNotWrapped.restore();
        treeViewTOUnderTest._getROPropertyWithoutEvents.restore();
    });

    describe("name method", function () {
        it("should execute _getROProperty 'name'", function () {
            treeViewTOUnderTest.name();
            sinon.assert.calledOnce(treeViewTOUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTOUnderTest._getROProperty, "name", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTOUnderTest.name();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("parentText method", function () {
        it("should execute _getROProperty 'parent text'", function () {
            treeViewTOUnderTest.parentText();
            sinon.assert.calledOnce(treeViewTOUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTOUnderTest._getROProperty, "parent text", sinon.match({}));
        });

        it("should return promise as is", function () {
            var promiseMock = {};
            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTOUnderTest.parentText();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("selectedNodes method", function () {
        it("should query the property 'selection'", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };
            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            treeViewTOUnderTest.selectedNodes();
            sinon.assert.calledOnce(treeViewTOUnderTest._getROProperty);
            sinon.assert.calledWith(treeViewTOUnderTest._getROProperty, "selection", sinon.match({}));
        });

        it("should return empty list if null returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb();
                }
            };

            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTOUnderTest.selectedNodes();
            assert.deepEqual(res, []);
        });

        it("should return empty list if no node returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("");
                }
            };

            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTOUnderTest.selectedNodes();
            assert.deepEqual(res, []);
        });

        it("should return a list  with nodes if nodes returns from _getROProperty", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb("Item1\nItem2");
                }
            };

            treeViewTOUnderTest._getROProperty.returns(promiseMock);
            var res = treeViewTOUnderTest.selectedNodes();
            assert.deepEqual(removeExecutorMethods(res), removeExecutorMethods([new TreeViewNode(treeViewTOUnderTest, "Item1", "Item1"), new TreeViewNode(treeViewTOUnderTest, "Item2", "Item2")]));
        });
    });

    describe("visibleNodes method", function () {
        it("should execute 'GetItemsCount'", function () {
            var itemCountPromise = {
                then: function (cb) {
                   return cb(1);
                }
            };
            var allItemPromise = {
                then: function(cb){
                    return cb("item");
                }
            };
            treeViewTOUnderTest._executeWithEvents.returns(itemCountPromise);
            treeViewTOUnderTest._getROPropertyWithoutEvents.returns(allItemPromise);        
            treeViewTOUnderTest.visibleNodes();
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({}), "GetItemsCount");
        });

        it("should query the property 'all items'", function () {
            var itemCountPromise = {
                then: function (cb) {
                   return cb(1);
                }
            };
            var allItemPromise = {
                then: function(cb){
                    return cb("item");
                }
            };
            treeViewTOUnderTest._executeWithEvents.returns(itemCountPromise);
            treeViewTOUnderTest._getROPropertyWithoutEvents.returns(allItemPromise);
            treeViewTOUnderTest.visibleNodes();
            sinon.assert.calledOnce(treeViewTOUnderTest._getROPropertyWithoutEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._getROPropertyWithoutEvents, "all items");
        });

        it("should return empty list if no item returns from _executeWithEvents", function () {
            var promiseMock = {
                then: function (cb) {
                    return cb(0);
                }
            };

            treeViewTOUnderTest._executeWithEvents.returns(promiseMock);
            var res = treeViewTOUnderTest.visibleNodes();
            assert.deepEqual(res, []);
        });

        it("should return a list  with items if items returns from _getROPropertiesWithoutEvents", function () {
            var itemCountPromise = {
                then: function (cb) {
                    return cb(2);
                }
            };
            var allItemPromise = {
                then: function(cb){
                    return cb("Item1\nItem2");
                }
            };
            treeViewTOUnderTest._executeWithEvents.returns(itemCountPromise);
            treeViewTOUnderTest._getROPropertyWithoutEvents.returns(allItemPromise);            
            var res = treeViewTOUnderTest.visibleNodes();
            assert.deepEqual(removeExecutorMethods(res), removeExecutorMethods([new TreeViewNode(treeViewTOUnderTest, 0, "Item1"), new TreeViewNode(treeViewTOUnderTest, 1, "Item2")]));
        });
    });

    describe("select method", function () {
        it("should throw error if node is undefined", function () {
            assert.throws(function () {
                treeViewTOUnderTest.select();
            });
        });

        it("should throw error if node is null", function () {
            assert.throws(function () {
                treeViewTOUnderTest.select(null);
            });
        });

        it("should throw error if node has no identifier", function () {
            assert.throws(function () {
                treeViewTOUnderTest.select({});
            });
        });

        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeWithEvents.returns(executionPromise);
            var res = treeViewTOUnderTest.select(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeWithEvents 'Select' if node is a number", function () {
            treeViewTOUnderTest.select(10);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Select", 10);
        });

        it("should execute _executeWithEvents 'Select' if node is a string", function () {
            treeViewTOUnderTest.select("identifier");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: "identifier" }), "Select", "identifier");
        });
		
		it("should execute _executeWithEvents 'Select' if node is an object", function () {
            var node = {}; node._identifier = 10;
            treeViewTOUnderTest.select(node);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(treeViewTOUnderTest._executeWithEvents, sinon.match({ 0: 10 }), "Select", 10);
        });

    });

    describe("getNode method", function () {
        it("should throw error if path is undefined", function () {
            assert.throws(function () {
                treeViewTOUnderTest.getNode();
            });
        });

        it("should throw error if path is null", function () {
            assert.throws(function () {
                treeViewTOUnderTest.getNode(null);
            });
        });

        it("should return the TreeViewNode", function () {
            var res = treeViewTOUnderTest.getNode("Item1");
            assert.strictEqual(res._identifier, "Item1");
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerTreeView, treeViewTOUnderTest);
        });
    });

    describe("_collapseNode method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._collapseNode(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Collapse' with correct parameters, if input is number", function () {
            treeViewTOUnderTest._collapseNode(10);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "Collapse", 10);
        });

        it("should execute _executeNotWrapped 'Collapse' with correct parameters, if input is string", function () {
            treeViewTOUnderTest._collapseNode("Item1");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "Collapse", "Item1");
        });
    });

    describe("_expandNode method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._expandNode(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'Expand' with correct parameters, if input is number", function () {
            treeViewTOUnderTest._expandNode(10);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "Expand", 10);
        });

        it("should execute _executeNotWrapped 'Expand' with correct parameters, if input is string", function () {
            treeViewTOUnderTest._expandNode("Item1");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "Expand", "Item1");
        });
    });

    describe("_expandAll method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._expandAll(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'ExpandAll' with correct parameters, if input is number", function () {
            treeViewTOUnderTest._expandAll(10);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "ExpandAll", 10);
        });

        it("should execute _executeNotWrapped 'ExpandAll' with correct parameters, if input is string", function () {
            treeViewTOUnderTest._expandAll("Item1");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "ExpandAll", "Item1");
        });
    });

    describe("_isNodeExpanded method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._isNodeExpanded(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOUnderTest._isNodeExpanded(10);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "expanded");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOUnderTest._isNodeExpanded("Item1");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "expanded");
        });
    });

    describe("_getNodeFirstChildPath method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._isNodeExpanded(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOUnderTest._getNodeFirstChildPath(10);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "firstchild");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOUnderTest._getNodeFirstChildPath("Item1");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "firstchild");
        });
    });

    describe("_nodeHasChildren method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._nodeHasChildren(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOUnderTest._nodeHasChildren(10);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "haschildren");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOUnderTest._nodeHasChildren("Item1");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "haschildren");
        });
    });

    describe("_getNodeNextSiblingPath method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._getNodeNextSiblingPath(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOUnderTest._getNodeNextSiblingPath(10);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "nextsibling");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOUnderTest._getNodeNextSiblingPath("Item1");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "nextsibling");
        });
    });

    describe("_getNodeParentPath method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._getNodeParentPath(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOUnderTest._getNodeParentPath(10);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "parent");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOUnderTest._getNodeParentPath("Item1");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "parent");
        });
    });

    describe("_getNodePath method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._getNodePath(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOUnderTest._getNodePath(10);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "path");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOUnderTest._getNodePath("Item1");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "path");
        });
    });

    describe("_isNodeSelected method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._isNodeSelected(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOUnderTest._isNodeSelected(10);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "selected");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOUnderTest._isNodeSelected("Item1");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "selected");
        });
    });

    describe("_getNodeState method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._getNodeState(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOUnderTest._getNodeState(10);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "state");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOUnderTest._getNodeState("Item1");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "state");
        });
    });

    describe("_getNodeText method", function () {
        it("should return the execution promise", function () {
            var executionPromise = {};
            treeViewTOUnderTest._executeNotWrapped.returns(executionPromise);
            var res = treeViewTOUnderTest._getNodeText(10);
            assert.equal(res, executionPromise);
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is number", function () {
            treeViewTOUnderTest._getNodeText(10);
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: 10 }), "GetItemProperty", 10, "text");
        });

        it("should execute _executeNotWrapped 'GetItemProperty' with correct parameters, if input is string", function () {
            treeViewTOUnderTest._getNodeText("Item1");
            sinon.assert.calledOnce(treeViewTOUnderTest._executeNotWrapped);
            sinon.assert.calledWith(treeViewTOUnderTest._executeNotWrapped, sinon.match({ 0: "Item1" }), "GetItemProperty", "Item1", "text");
        });
    });

    describe("_createItem method", function () {
        it("should return the TreeViewNode with correct values", function () {
            var res = treeViewTOUnderTest._createItem(10, "Item1");
            assert.strictEqual(res._identifier, 10);
            assert.strictEqual(res._textRepresentation, "Item1");
            assert.deepEqual(res._ownerTreeView, treeViewTOUnderTest);
        });
    });
    
});
