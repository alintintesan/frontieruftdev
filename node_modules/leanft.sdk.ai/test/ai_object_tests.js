// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/* jshint esversion: 6 */

const assert = require("assert");
const sinon = require("sinon");

describe("UI Object Description", function () {

    const UiObject = require("../lib/ai_object.js").AiObject;
    let uiObjectDescriptionUnderTest;
    
    beforeEach(function () {
        uiObjectDescriptionUnderTest = new UiObject({});
    });

    describe("Constructor", function () {
        it("should assign 'AI' and 'UiObject' LeanFT type", function () {
            uiObjectDescriptionUnderTest = new UiObject();
            assert.deepEqual(uiObjectDescriptionUnderTest.leanFTType, {
                technology: "AI",
                leanftType: "UiObject"
            });
        });
    });
});

describe("UI Object TO", function () {

    const UIObjectTO = require("../lib/ai_object.js").AiObjectTO;
    let uiObjectTOUnderTest;

    beforeEach(function () {
        uiObjectTOUnderTest = new UIObjectTO();
        sinon.stub(uiObjectTOUnderTest, "_getROProperty");
        sinon.stub(uiObjectTOUnderTest, "_executeWithEvents");
    });

    afterEach(function () {

    });


    describe("sendKeys method", function () {
        it("should execute command 'Type'", function () {
            uiObjectTOUnderTest.sendKeys("Text to set");
            sinon.assert.calledOnce(uiObjectTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectTOUnderTest._executeWithEvents, sinon.match({0: "Text to set"}), "Type", "Text to set");
        });

        it("should return the execution promise", function () {
            let executionPromise = {};
            uiObjectTOUnderTest._executeWithEvents.returns(executionPromise);
            const res = uiObjectTOUnderTest.sendKeys("Text to set");
            assert.strictEqual(res, executionPromise);
        });

        it("should throw error if the 'text' parameter is null", function () {
            assert.throws(function () {
                uiObjectTOUnderTest.sendKeys(null);
            });
        });

        it("should throw error if the 'text' parameter is undefined", function () {
            assert.throws(function () {
                uiObjectTOUnderTest.sendKeys();
            });
        });
    });

    describe("search method", function () {
        it("should execute command 'Search'", function () {
            uiObjectTOUnderTest.search("Text to set");
            sinon.assert.calledOnce(uiObjectTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectTOUnderTest._executeWithEvents, sinon.match({0: "Text to set"}), "Search", "Text to set");
        });

        it("should return the execution promise", function () {
            const executionPromise = {};
            uiObjectTOUnderTest._executeWithEvents.returns(executionPromise);
            const res = uiObjectTOUnderTest.search("Text to set");
            assert.strictEqual(res, executionPromise);
        });

        it("should throw error if the 'text' parameter is null", function () {
            assert.throws(function () {
                uiObjectTOUnderTest.search(null);
            });
        });

        it("should throw error if the 'text' parameter is undefined", function () {
            assert.throws(function () {
                uiObjectTOUnderTest.search();
            });
        });
    });

    describe("sendSecureKeys method", function () {
        it("should execute command 'TypeSecure'", function () {
            uiObjectTOUnderTest.sendSecureKeys("Text to set");
            sinon.assert.calledOnce(uiObjectTOUnderTest._executeWithEvents);
            sinon.assert.calledWith(uiObjectTOUnderTest._executeWithEvents, sinon.match({0: "Text to set"}), "TypeSecure", "Text to set");
        });

        it("should return the execution promise", function () {
            const executionPromise = {};
            uiObjectTOUnderTest._executeWithEvents.returns(executionPromise);
            const res = uiObjectTOUnderTest.sendSecureKeys("Text to set");
            assert.strictEqual(res, executionPromise);
        });

        it("should throw error if the 'encodedText' parameter is null", function () {
            assert.throws(function () {
                uiObjectTOUnderTest.sendSecureKeys(null);
            });
        });

        it("should throw error if the 'encodedText' parameter is undefined", function () {
            assert.throws(function () {
                uiObjectTOUnderTest.sendSecureKeys();
            });
        });
    });

    describe("setState", function(){
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                uiObjectTOUnderTest.setState();
            });
        });
        it("should throw error if null passed", function(){
            assert.throws(function(){
                uiObjectTOUnderTest.setState(null);
            });
        });
        it("should throw error if not bool string value passed", function(){
            assert.throws(function(){
                uiObjectTOUnderTest.setState("true1");
            });
        });
        it("should throw error if not bool value passed", function(){
            assert.throws(function(){
                uiObjectTOUnderTest.setState(8);
            });
        });
        it("should execute command 'SetState' and pass it the correct parameters when true passed",function(){
            uiObjectTOUnderTest.setState(true);
            assert(uiObjectTOUnderTest._executeWithEvents.calledOnce);
            sinon.assert.calledWith(uiObjectTOUnderTest._executeWithEvents, sinon.match({0: "on"}), "SetState", "on");
        });
        it("should execute command 'SetState' and pass it the correct parameters when false passed",function(){
            uiObjectTOUnderTest.setState(false);
            assert(uiObjectTOUnderTest._executeWithEvents.calledOnce);
            sinon.assert.calledWith(uiObjectTOUnderTest._executeWithEvents, sinon.match({0: "off"}), "SetState", "off");
        });
        it("should return the same promise that was returned from _executeWithEvents",function(){
            const getROPromise = {};
            uiObjectTOUnderTest._executeWithEvents.returns(getROPromise);
            const res = uiObjectTOUnderTest.setState(true);
            assert.strictEqual(res,getROPromise);
        });
    });
    
});
