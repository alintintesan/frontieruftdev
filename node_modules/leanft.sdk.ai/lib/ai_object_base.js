// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/* jshint esversion: 6 */

const Core = require("leanft.sdk.core");
const TestObjectBase = Core.TestObjectBase;
const Utils = Core.ObjectUtils;
const DescriptionBase = Core.DescriptionBase;
const ClickBehavior = Core.ClickBehavior;
const AILocators = require("./ai_locators").AILocators;

/**
 * AI namespace
 * @namespace AI
 */

/**
 * AiObjectBaseDescription - the base description for all AI elements
 * @class AiObjectBaseDescription
 * @extends DescriptionBase
 * _@mixes LocationDescriptionBehavior
 * @memberof AI
 * @ignore
 */
function AiObjectBaseDescription(leanFTType) {
    this._init({
        technology: "AI",
        leanftType: leanFTType
    });
}

/**
 * @ignore
 */
Utils.inherit(AiObjectBaseDescription, DescriptionBase, {
    /**
     * The object's attached text.
     * @param {string} [text] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof AI.AiObjectBaseDescription#
     */
    text: function (text) {
        return this._simplePropertyHandler("text", text);
    },

    /**
     * the AI Class type of the AI object list of supported classes can be taken from {@link AI.AiTypes}.
     * @param {string} [aiClass] When provided, this method acts as a setter and sets the aiClass value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored aiClass value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof AI.AiObjectBaseDescription#
     */
    aiClass: function (aiClass) {
        return this._propertyHandler("control_class", aiClass);
    },

    /**
     * Used to describe the unique location of an object that may appear multiple times in the application.
     * @param {object} [locator] When provided, this method acts as a setter and sets the locator value. Should be either {@link AI.PositionalLocator} or {@link AI.RelationalLocator}.
     * @returns {object | Description} If no parameter is provided, the method acts as a getter and returns the current stored locator value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof AI.AiObjectBaseDescription#
     */
    locator: function (locator) {
        
        if (locator === undefined) {
            // getter
            let locatorValue = this._propertyHandler("locator");
            let locatorDataValue = this._propertyHandler("locator_data");

            return AILocators.LeanFtLocator_to_SdkLocator(locatorValue, locatorDataValue);
        }
        else if (locator === null) {
            // deleter
            this._propertyHandler("locator", null);
            this._propertyHandler("locator_data", null);
            return this;
        }
        else {
            // setter
            let {leanFtLocator, leanFtLocatorData} = AILocators.SdkLocator_to_LeanFtLocator(locator);
            this._propertyHandler("locator", leanFtLocator);
            this._propertyHandler("locator_data", leanFtLocatorData);
            return this;
        }
    }
});

/**
 * @class AiObjectBaseTO
 * @param nativeclass
 * @param session
 * @param description
 * @constructor
 * @extends TestObjectBase
 * _@mixes LocationInfoProvider._properties
 * @mixes ClickBehavior._methods
 * @mixes AI.AiObjectBaseTOBehavior._properties
 * @mixes AI.AiObjectBaseTOBehavior._methods
 * @abstract
 * @memberof AI
 * @ignore
 */
function AiObjectBaseTO(nativeclass, session, description) {
    this._init(nativeclass, session, description);
    this._mergeBehavior(ClickBehavior);
    this._mergeBehavior(AiObjectBaseTOBehavior);
}

/**
 * The behaviors of AiObjectBase object
 * @memberof AI
 * @ignore
 */
let AiObjectBaseTOBehavior = {
    /**
     * @ignore
     * @memberof AI.AiObjectBaseTOBehavior
     */
    _properties: {
        /**
         * Returns the AI Class type of the AI object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's AI class.
         * @memberof AI.AiObjectBaseTO#
         */
        aiClass: {
            wiredName: "control_class"
        },

        /**
         * Returns the object's text.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the object's text.
         * @memberof AI.AiObjectBaseTO#
         */
        text: {

        }
    },

    /**
     * @ignore
     * @memberof AI.AiObjectBaseTOBehavior
     */
    _methods: {

    }
};


/**
 * @ignore
 */
Utils.inherit(AiObjectBaseTO, TestObjectBase, {
});

module.exports.AiObjectBaseDescription = AiObjectBaseDescription;
module.exports.AiObjectBaseTO = AiObjectBaseTO;