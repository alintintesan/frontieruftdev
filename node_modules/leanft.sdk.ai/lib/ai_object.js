// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/* jshint esversion: 6 */

const Core = require("leanft.sdk.core");
const Utils = Core.ObjectUtils;
const Convert = require("leanft.sdk.core").Convert;
const AiObjectBase = require("./ai_object_base.js");
const AiObjectBaseTO = AiObjectBase.AiObjectBaseTO;
const AiObjectBaseDescription = AiObjectBase.AiObjectBaseDescription;

/**
 * AiObjectDescriptionBehavior - the description for a generic AI object
 * @memberof AI
 * @ignore
 */
let AiObjectDescriptionBehavior = {

};

/**
 * The description of an object identified using Artificial Intelligence.
 * @param {Object} [props] Initializes a description of an object identified using Artificial Intelligence.
 * using the supplied property bag.
 * @returns {AiObject} the description object that was initialized.
 * @class AiObject
 * @extends AI.AiObjectBaseDescription
 * @mixes AI.AiObjectDescriptionBehavior
 * @memberof AI
 */
function AiObject(props) {
    let aiObjectDesc = new AiObjectBaseDescription("UiObject");
    Utils.extend(aiObjectDesc, AiObjectDescriptionBehavior);
    aiObjectDesc._defineByPropertyBag(props);
    return aiObjectDesc;
}

/**
 * An object identified using Artificial Intelligence.
 * @constructor
 * @class AiObjectTO
 * @extends AI.AiObjectBaseTO
 * @mixes AI.AiObjectTOBehavior._properties
 * @mixes AI.AiObjectTOBehavior._methods
 * @memberof AI
 */
function AiObjectTO(session, description) {
    description = description || AiObject();
    let aiObjectTO = new AiObjectBaseTO("AiObject", session, description);
    aiObjectTO._mergeBehavior(AiObjectTOBehavior);
    return aiObjectTO;
}

let setStateWiredName = "SetState";

/**
 * The behavior of a generic AI object
 * @memberof AI
 * @ignore
 */
let AiObjectTOBehavior = {
    /**
     * @ignore
     * @memberof AI.AiObjectTOBehavior
     */
    _properties: {

    },

    /**
     * @ignore
     * @memberof AI.AiObjectTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Types the specified text into the AI object.
         * @function
         * @param {string} text The text to type into the AI object.
         * @returns {Promise<void>} a promise that is fulfilled when the sendKeys operation ends.
         */
        sendKeys: function (text) {
            if (text == null)
                throw new Error("You must pass parameter text");
            return this._executeWithEvents(arguments, "Type", text);
        },

        /*jshint eqnull:true */
        /**
         * Types the specified text into the search box and clicks the search icon.
         * This method is supported only for search AI class.
         * @function
         * @param {string} text The text to type into the search box.
         * @returns {Promise<void>} a promise that is fulfilled when the search operation ends.
         */
        search: function (text) {
            if (text == null)
                throw new Error("You must pass parameter text");
            return this._executeWithEvents(arguments, "Search", text);
        },

        /*jshint eqnull:true */
        /**
         * Types the specified encoded text into the AI object.
         * @function
         * @param {string} encodedText The encoded text to type into the AI object.
         * @returns {Promise<void>} a promise that is fulfilled when the sendSecureKeys operation ends.
         */
        sendSecureKeys: function (encodedText) {
            if (encodedText == null)
                throw new Error("You must pass parameter encodedText");
            return this._executeWithEvents(arguments, "TypeSecure", encodedText);
        },

        /*jshint eqnull:true */
        /**
         * Sets the state of the check box/toggle button.
         * @function
         * @param {boolean} state Indicates whether this check box/toggle button will be checked.
         * @returns {Promise<void>} a promise that is fulfilled after the checkbox/toggle button is set.
         */
        setState: {
            wiredName: setStateWiredName,
            exec: function (state) { // bool
                if (state == null)
                    throw new Error("You must pass state to set() method");

                state = Convert.toBool(state);
                state = state ? "on" : "off";

                return this._executeWithEvents(arguments, setStateWiredName, state);
            }
        },

        /*jshint eqnull:true */
        /**
         * Returns the AI objectâ€™s value.
         * The value is based on the following object properties: text for text objects, state for toggleable controls, and value for input fields, text boxes, and combo boxes.
         * @function
         * @returns {Promise<any>} a promise that is fulfilled with the object's value.
         */
        getValue: function () {
            return this._executeWithEvents(arguments, "GetValue");
        }
    }
};

module.exports.AiObject = AiObject;
module.exports.AiObjectTO = AiObjectTO;