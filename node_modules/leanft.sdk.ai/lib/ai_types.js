// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/* jshint esversion: 6 */


/**
 * @typedef {Object} AiTypes - The list of supported AI classes that can be used to describe {@link AI.AiObject}.
 * @property {string} bell
 * @property {string} button
 * @property {string} camera
 * @property {string} categories
 * @property {string} chat
 * @property {string} check_box
 * @property {string} check_mark
 * @property {string} calendar
 * @property {string} close
 * @property {string} combo_box
 * @property {string} dot_menu
 * @property {string} down_triangle
 * @property {string} eq_settings
 * @property {string} exit
 * @property {string} filter
 * @property {string} facebook
 * @property {string} favorites
 * @property {string} gear_settings
 * @property {string} hamburger_menu
 * @property {string} help
 * @property {string} home
 * @property {string} info
 * @property {string} input
 * @property {string} instagram
 * @property {string} left_arrow
 * @property {string} left_triangle
 * @property {string} lock
 * @property {string} linkedin
 * @property {string} location
 * @property {string} mail
 * @property {string} minus
 * @property {string} pencil
 * @property {string} phone
 * @property {string} plus
 * @property {string} power
 * @property {string} profile
 * @property {string} radio_button
 * @property {string} right_arrow
 * @property {string} right_triangle
 * @property {string} rss_feed
 * @property {string} search
 * @property {string} share
 * @property {string} shopping_bag
 * @property {string} shopping_cart
 * @property {string} text
 * @property {string} text_block
 * @property {string} text_box
 * @property {string} toggle_button
 * @property {string} tool_settings
 * @property {string} trash
 * @property {string} twitter
 * @property {string} upload
 * @property {string} up_arrow
 * @property {string} up_down
 * @property {string} up_triangle
 * @property {string} youtube
 * @property {string} view
 * @property {string} left a general type for left_arrow and left_triangle.
 * @property {string} right a general type for right_arrow and right_triangle.
 * @property {string} up a general type for up_arrow and up_triangle.
 * @property {string} down a general type for down_triangle.
 * @property {string} field a general type for input, text_box and combo_box.
 * @property {string} toggleable a general type for check_box, radio_button and toggle_button.
 * @property {string} togglable a general type for check_box, radio_button and toggle_button.
 * @memberof AI
 */
const AiTypes = {
    bell: "bell",
    button: "button",
    camera: "camera",
    categories: "categories",
    chat: "chat",
    check_box: "check_box",
    check_mark: "check_mark",
    calendar: "calendar",
    close: "close",
    combo_box: "combo_box",
    dot_menu: "dot_menu",
    down_triangle: "down_triangle",
    eq_settings: "eq_settings",
    exit: "exit",
    filter: "filter",
    facebook: "facebook",
    favorites: "favorites",
    gear_settings: "gear_settings",
    hamburger_menu: "hamburger_menu",
    help: "help",
    home: "home",
    info: "info",
    input: "input",
    instagram: "instagram",
    left_arrow: "left_arrow",
    left_triangle: "left_triangle",
    lock: "lock",
    linkedin: "linkedin",
    location: "location",
    mail: "mail",
    minus: "minus",
    pencil: "pencil",
    phone: "phone",
    plus: "plus",
    power: "power",
    profile: "profile",
    radio_button: "radio_button",
    right_arrow: "right_arrow",
    right_triangle: "right_triangle",
    rss_feed: "rss_feed",
    search: "search",
    share: "share",
    shopping_bag: "shopping_bag",
    shopping_cart: "shopping_cart",
    text: "text",
    text_block: "text_block",
    text_box: "text_box",
    toggle_button: "toggle_button",
    tool_settings: "tool_settings",
    trash: "trash",
    twitter: "twitter",
    upload: "upload",
    up_arrow: "up_arrow",
    up_down: "up_down",
    up_triangle: "up_triangle",
    youtube: "youtube",
    view: "view",
    left: "left",
    right: "right",
    up: "up",
    down: "down",
    field: "field",
    toggleable: "toggleable",
    togglable: "togglable",
};

/**
* @typedef {object} PositionalLocator - can be used to uniquely describe an {@link AI.AiObject} using the object's ordinal position.
* @property {"fromLeft" | "fromRight" | "fromTop" | "fromBottom"} direction - the direction in which to count the ordinal position.
* @property {number} index - Optional. the 0-based index of the AI object, counting in the specified direction.
* @memberof AI
*/
function PositionalLocator() {}

/**
 * @typedef {object} RelationalLocator - can be used to uniquely describe an {@link AI.AiObject} using the object's proximity to another {@link AI.AiObject}.
 * @property {"withAnchorAbove" | "withAnchorBelow" | "withAnchorOnLeft" | "withAnchorOnRight"} relation - the relation of the anchor to the AI object.
 * @property {object} anchor - the anchor AI object used to locate the AI Object.
 * @memberof AI
 */
function RelationalLocator() {}


module.exports.AiTypes = AiTypes;