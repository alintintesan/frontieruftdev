// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

/* jshint esversion: 6 */

const {Logger} = require("leanft.sdk.core");

/**
 * @typedef {Object} AiOcrLanguages - The list of supported OCR languages set by {@link AI.AIRunSettings.OCR.set}.
 * @property {string} en - English
 * @property {string} af - Afrikaans
 * @property {string} eu - Basque
 * @property {string} ca - Catalan
 * @property {string} hr - Croatian
 * @property {string} cs - Czech
 * @property {string} da - Danish
 * @property {string} nl - Dutch
 * @property {string} eo - Esperanto
 * @property {string} et - Estonian
 * @property {string} fi - Finnish
 * @property {string} fr - French
 * @property {string} de - German
 * @property {string} hu - Hungarian
 * @property {string} is - Icelandic
 * @property {string} it - Italian
 * @property {string} ga - Irish
 * @property {string} la - Latin
 * @property {string} lv - Latvian
 * @property {string} lt - Lithuanian
 * @property {string} mt - Maltese
 * @property {string} no - Norwegian
 * @property {string} pl - Polish
 * @property {string} pt - Portuguese
 * @property {string} ro - Romanian
 * @property {string} sk - Slovak
 * @property {string} sl - Slovenian
 * @property {string} es - Spanish
 * @property {string} sv - Swedish
 * @property {string} tr - Turkish
 * @property {string} cy - Welsh
 * @property {string} ar - Arabic
 * @property {string} zhs - Simplified Chinese
 * @property {string} zht - Traditional Chinese
 * @property {string} bg - Bulgarian
 * @property {string} mk - Macedonian
 * @property {string} ru - Russian
 * @property {string} sr - Serbian
 * @property {string} uk - Ukrainian
 * @property {string} el - Greek
 * @property {string} he - Hebrew
 * @property {string} ja - Japanese
 * @property {string} ko - Korean
 * @memberof AI.AIRunSettings.OCR
 */
const AiOcrLanguages = {
    en: "en", /* english */
    af: "af", /* afrikaans */
    eu: "eu", /* basque */
    ca: "ca", /* catalan */
    hr: "hr", /* croatian */
    cs: "cs", /* czech */
    da: "da", /* danish */
    nl: "nl", /* dutch */
    eo: "eo", /* esperanto */
    et: "et", /* estonian */
    fi: "fi", /* finnish */
    fr: "fr", /* french */
    de: "de", /* german */
    hu: "hu", /* hungarian */
    is: "is", /* icelandic */
    it: "it", /* italian */
    ga: "ga", /* irish */
    la: "la", /* latin */
    lv: "lv", /* latvian */
    lt: "lt", /* lithuanian */
    mt: "mt", /* maltese */
    no: "no", /* norwegian */
    pl: "pl", /* polish */
    pt: "pt", /* portuguese */
    ro: "ro", /* romanian */
    sk: "sk", /* slovak */
    sl: "sl", /* slovenian */
    es: "es", /* spanish */
    sv: "sv", /* swedish */
    tr: "tr", /* turkish */
    cy: "cy", /* welsh */
    ar: "ar", /* arabic */
    zhs: "zhs", /* simplified chinese */
    zht: "zht", /* traditional chinese */
    bg: "bg", /* bulgarian */
    mk: "mk", /* macedonian */
    ru: "ru", /* russian */
    sr: "sr", /* serbian */
    uk: "uk", /* ukrainian */
    el: "el", /* greek */
    he: "he", /* hebrew */
    ja: "ja", /* japanese */
    ko: "ko" /* korean */
};

/**
 * Enables modifying the AI Runtime settings temporarily.
 * @class AIRunSettings
 * @hideconstructor
 * @memberOf! AI
 */
function AIRunSettings(session) {
    this._logger = new Logger("AIRunSettings");
    this._session = session;
    this._sessionSettings = {};

    /**
     * OCR settings to use in the current test run.
     * By default, only English text is identified.
     * @class OCR
     * @hideconstructor
     * @memberOf! AI.AIRunSettings
     */
    this.OCR = {
        /**
         * Specifies the OCR settings to use in the current test run.
         * @function
         * @param {object} [settings] The OCR settings to use in the current test run.
         * @param {string[]} [settings.languages] The list of languages to identify by AI OCR in the test run.
         * Possible values are listed under {@link AI.AIRunSettings.OCR.AiOcrLanguages}. If no valid languages are specified, English is used.
         * @returns  {Promise<void>} a promise that is fulfilled after the OCR settings are updated
         * @memberOf AI.AIRunSettings.OCR
         */
        set: function(settings) {
            return this._mergeAndSendUpdate("ocr_options", settings);
        }.bind(this),
    };

    /**
     * Controls automatic scrolling for AI identification in the current test run.
     * By default, the automatic scrolling is on, and set to scroll down, up to 2 times.
     * @class autoScroll
     * @hideconstructor
     * @memberOf! AI.AIRunSettings
     */
    this.autoScroll = {
        /**
         * Enables and configures automatic scrolling for AI identification in the current test run.
         * @function
         * @param {object} [settings] The automatic scrolling configuration to use in the current test run.
         * @param {string} [settings.direction] The direction in which to scroll. Possible values: up, down, right, left. Default value: down
         * @param {number} [settings.maxScrolls] The maximum number of times to scroll in search of the object. Default value: 2
         * @returns  {Promise<void>} a promise that is fulfilled after the automatic scrolling configuration is updated
         * @memberOf AI.AIRunSettings.autoScroll
         */
        enable: function(settings) {
            let enabledSettings = Object.assign({enabled:true}, settings);
            return this._mergeAndSendUpdate("autoscroll_options", enabledSettings);
        }.bind(this),

        /**
         * Disables automatic scrolling for AI identification in the current test run.
         * @function
         * @returns  {Promise<void>} a promise that is fulfilled after the automatic scrolling configuration is updated
         * @memberOf AI.AIRunSettings.autoScroll
         */
        disable: function() {
            return this._mergeAndSendUpdate("autoscroll_options", {enabled:false});
        }.bind(this)
    };
}

AIRunSettings.prototype = {
    _logger: null,
    _session: null,
    _sessionSettings: null,

    _sendUpdateCommand: function() {

        let updateMsg = { AIRunSettings: this._sessionSettings};

        this._logger.trace(`_sendUpdateCommand: send UpdateAIRunSettings command: ${JSON.stringify(updateMsg)}`);
        return this._session._communication.send("UpdateAIRunSettings", updateMsg)
            .then((result) => { 
                this._logger.trace(`_sendUpdateCommand: engine returned ${result}`);
            });
    },
	
	_mergeAndSendUpdate: function(prop, settings) {
		this._logger.trace(`_mergeAndsendUpdate: entered. settings: ${prop}:${JSON.stringify(settings)}`);
		this._sessionSettings[prop] = Object.assign({}, this._sessionSettings[prop], settings);
		return this._sendUpdateCommand();
	}

};

module.exports.AIRunSettings = AIRunSettings;