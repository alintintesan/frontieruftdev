// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..

var Core = require("leanft.sdk.core");
var SwipeDirection = Core.SwipeDirection;
var TestObjectBase = Core.TestObjectBase;
var DescriptionBase = Core.DescriptionBase;
var Utils = Core.ObjectUtils;
var Convert = Core.Convert;
var Location = Core.Location;
var Point = Core.Point;
var RectLocation = Core.RectLocation;
var WaitUntilEnabledBehavior = Core.WaitUntilEnabledBehavior;

/**
 * Mobile namespace
 * @namespace Mobile
 */

/**
 * @ignore
 * @constructor
 * @memberof Mobile
 * @mixes DescriptionBase
 */
function UiObjectBaseDescription(leanFTType){
    this._init({
        technology: "Mobile",
        leanftType: leanFTType
    });
}


Utils.inherit(UiObjectBaseDescription, DescriptionBase, {
    /**
     * The accessibility ID of the mobile object.
     * @param {string} [id] When provided, this method acts as a setter and sets the accessibilityId.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored accessibilityId;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    accessibilityId: function(id){
        return this._propertyHandler("accessibilityId", id);
    },
    /**
     * The test object class name used by UFT Mobile.
     * @param {string} [name] When provided, this method acts as a setter and sets the className.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored className;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    className: function(name) {
        if(name instanceof RegExp){
            throw new Error("Regular expressions are not supported in Mobile test objects className property");
        }
        return this._propertyHandler("class", name);
    },
    /**
     * The object's text.
     * @param {string} [text] When provided, this method acts as a setter and sets the text value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored text value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    text: function(text){
        return this._propertyHandler("text", text);
    },
    /**
     * The native class of the mobile object.
     * @param {string} [nativeClass] When provided, this method acts as a setter and sets the nativeClass.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored nativeClass;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    nativeClass: function(nativeClass) {
        return this._propertyHandler("nativeClass", nativeClass);
    },
    /**
     * The container information if the object is in a table (iOS only).
     * @param {string} [cont] When provided, this method acts as a setter and sets the container.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored container;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    container: function(cont){
        if(cont instanceof RegExp){
            throw new Error("Regular expressions are not supported in Mobile test objects container property");
        }
        return this._propertyHandler("container", cont);
    },
    /**
     * An ordinal number assigned to the object to indicate the order in which the object appears on the device relative to other objects with an otherwise identical description.
     * @param {number} [index] When provided, this method acts as a setter and sets the mobileCenterIndex.
     * @returns {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored mobileCenterIndex;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    mobileCenterIndex: function(index){
        return this._propertyHandler("mcIndex", index);
    },
    /**
     * The resource ID of the object. (Android only)
     * @param {string} [id] When provided, this method acts as a setter and sets the resourceId.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored resourceId;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    resourceId: function(id){
        return this._propertyHandler("resourceId", id);
    },
    /**
     * Indicates whether the mobile object can be tapped.
     * @param {boolean} [isClickable] When provided, this method acts as a setter and sets the isClickable value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isClickable value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    isClickable: function(isClickable){
        return this._propertyHandler("isClickable", isClickable, Convert.toBool);
    },
    /**
     * Indicates whether the mobile object can be enabled.
     * @param {boolean} [state] When provided, this method acts as a setter and sets the isEnabled value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isEnabled value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    isEnabled: function(state){
        return this._propertyHandler("isEnabled", state, Convert.toBool);
    },
    /**
     * Indicates whether the mobile object is in focus.
     * @param {boolean} [state] When provided, this method acts as a setter and sets the isFocused value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isFocused value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    isFocused: function(state){
        return this._propertyHandler("isFocused", state, Convert.toBool);
    },
    /**
     * Indicates whether the object can receive focus.
     * @param {boolean} [state] When provided, this method acts as a setter and sets the isFocusable value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isFocusable value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    isFocusable: function(state){
        return this._propertyHandler("isFocusable", state, Convert.toBool);
    },
    /**
     * Indicates whether the mobile object can be checked.
     * @param {boolean} [state] When provided, this method acts as a setter and sets the isCheckable value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isCheckable value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    isCheckable: function(state){
        return this._propertyHandler("isCheckable", state, Convert.toBool);
    },
    /**
     * Indicates whether the mobile object is checked. (Relevant for objects that can have a check mark.)
     * @param {boolean} [state] When provided, this method acts as a setter and sets the isChecked value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isChecked value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.UiObjectBaseDescription#
     */
    isChecked: function(state){
        return this._propertyHandler("isChecked", state, Convert.toBool);
    }

});

/**
 * @ignore
 * @memberof Mobile
 * @constructor
 * @extends TestObjectBase
 * @mixes Mobile.UiObjectBaseTestObjectBehavior._methods
 * @mixes Mobile.UiObjectBaseTestObjectBehavior._properties
 * @mixes WaitUntilEnabledBehavior._methods
 */
function UiObjectBaseTestObject(nativeClass,session,description){
    this._init(nativeClass,session,description);

    this._mergeBehavior(WaitUntilEnabledBehavior);
    this._mergeBehavior(UiObjectBaseTestObjectBehavior);
}

//Consts
var tapWiredName = "Tap";
var longPressWiredName = "LongPress";
var swipeWiredName = "Swipe";
var pinchWiredName = "Pinch";
var panWiredName = "Pan";

var UiObjectBaseTestObjectBehavior = {
    /**
     * @ignore
     * @memberof Mobile.UiObjectBaseTestObjectBehavior
     */
    _properties: {
        /**
         * The accessibility ID of the mobile object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the accessibility ID of the mobile object.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        accessibilityId: {

        },
        /**
         * The test object class name used by UFT Mobile.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the test object class name used by UFT Mobile.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        className: {
            wiredName: "class"
        },
        /**
         * The text of the mobile object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the text of the mobile object.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        text: {

        },
        /**
         * Instruction or example indicating the type of content to enter for the value of a control,
         * for example, a grayed out hint inside a text box.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the hint of the mobile object.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        hint: {

        },
        /**
         * Information about the table container, if the object is in a table. (iOS only)
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the information about the table container, if the object is in a table. (iOS only)
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        container: {

        },
        /**
         * Indicates whether the object can be tapped.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object can be tapped.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        isClickable: {

        },
        /**
         * Indicates whether the mobile object is enabled.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the mobile object is enabled.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        isEnabled: {

        },
        /**
         * Indicates whether the mobile object is in focus.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the mobile object is in focus.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        isFocused: {

        },
        /**
         * Indicates whether the object can receive focus.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the object can receive focus.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        isFocusable: {

        },
        /**
         * Indicates whether the mobile object is checked. (Relevant for objects that can have a check mark.)
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the mobile object is checked.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        isChecked: {

        },
        /**
         * Indicates whether the mobile object can be checked.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the mobile object can be checked.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        isCheckable: {

        },
        /**
         * The native class of the mobile object.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the native class of the mobile object.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        nativeClass: {

        },
        /**
         * The resource ID of the object. (Android only)
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the resource ID of the object. (Android only)
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        resourceId: {

        },
        /**
         * The location of the mobile object, format: {x: 0, y: 0}
         * @function
         * @returns {Promise<Point>} a promise that is fulfilled with the location of the mobile object.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        location: {
            getter: function () {
                return this._getROProperties("left", "top").then(function (pos) {
                    var left = Convert.toNumber(pos[0]),
                        top = Convert.toNumber(pos[1]);
                    return {
                        x: left,
                        y: top
                    };
                });
            }
        },
        /**
         * The size of the mobile object, format: {width: 0, height: 0}
         * @function
         * @returns {Promise<Size>} a promise that is fulfilled with the size of the mobile object.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        size: {
            getter: function () {
                return this._getROProperties("left", "top", "right", "bottom").then(function (pos) {
                    var left = Convert.toNumber(pos[0]),
                        top = Convert.toNumber(pos[1]),
                        right = Convert.toNumber(pos[2]),
                        bottom = Convert.toNumber(pos[3]);
                    return {
                        width: right - left,
                        height: bottom - top
                    };
                });
            }
        }
    },

    /**
     * @ignore
     * @memberof Mobile.UiObjectBaseTestObjectBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Taps the center of the object.
         * @function
         * @param {Object} [tapArgs] Arguments object that defines the behavior of the tap operation.
         * @param {number} [tapArgs.numberOfTaps = 1] The number of times to tap the object (iOS only).
         * @param {Location} [tapArgs.location] The location where the operation is performed.
         * @param {number} [tapArgs.numberOfTouchPoints = 1] The number of points to tap, similar to the number of fingers you would use for the gesture on a real device. (iOS only)
         * @param {string} [tapArgs.gesture = ""] The gesture class designed by the mobile application developer to handle this gesture on this object. (iOS only)
         * @returns {Promise<void>} a promise that is fulfilled after tapping the center of the object or the specific location defined by the user.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        tap: {
            wiredName: tapWiredName,
            exec: function (tapArgs) {

                if (tapArgs == null)
                    return this._executeWithEvents(arguments, tapWiredName);

                if (typeof tapArgs !== "object")
                    throw new Error("Only object allowed to be passed to tap() method");

                tapArgs.numberOfTaps = tapArgs.numberOfTaps == null ? 1 : tapArgs.numberOfTaps;
                tapArgs.numberOfTouchPoints = tapArgs.numberOfTouchPoints == null ? 1 : tapArgs.numberOfTouchPoints;
                tapArgs.gesture = tapArgs.gesture == null ? "" : tapArgs.gesture;

                return this._executeWithEvents(arguments, tapWiredName,
                    RectLocation(tapArgs.location),
                    Convert.toNumber(tapArgs.numberOfTaps),
                    Convert.toNumber(tapArgs.numberOfTouchPoints),
                    Convert.toString(tapArgs.gesture));

            }
        },
        /*jshint eqnull:true */
        /**
         * Taps and holds the object for a short time.
         * @function
         * @param {Object} [longPressArgs] Arguments object that defines the behavior of the longPress operation.
         * @param {number} [longPressArgs.duration = 0] The number of seconds to continue pressing (iOS only).
         * @param {number} [longPressArgs.numberOfTouchPoints = 1] The number of points to tap, similar to the number of fingers you would use for the gesture on a real device. (iOS only)
         * @param {Location} [longPressArgs.location] The location where the operation is performed.
         * @param {string} [longPressArgs.gesture = ""] The gesture class designed by the mobile application developer to handle this gesture on this object. (iOS only)
         * @returns {Promise<void>} a promise that is fulfilled after long-pressing the center of the object or the specific location defined by the user.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        longPress: {
            wiredName: longPressWiredName,
            exec: function (longPressArgs) {

                if (longPressArgs == null)
                    return this._executeWithEvents(arguments, longPressWiredName);

                if (typeof longPressArgs !== "object")
                    throw new Error("Only object is allowed to pass to longPress() method");

                longPressArgs.duration = longPressArgs.duration == null ? 0 : longPressArgs.duration;
                longPressArgs.numberOfTouchPoints = longPressArgs.numberOfTouchPoints == null ? 1 : longPressArgs.numberOfTouchPoints;
                longPressArgs.gesture = longPressArgs.gesture == null ? "" : longPressArgs.gesture;

                return this._executeWithEvents(arguments, longPressWiredName,
                    RectLocation(longPressArgs.location),
                    Convert.toNumber(longPressArgs.duration),
                    Convert.toNumber(longPressArgs.numberOfTouchPoints),
                    Convert.toString(longPressArgs.gesture));

            }
        },
        /*jshint eqnull:true */
        /**
         * Swipes the object in the specified direction.
         * @function
         * @param {SwipeDirection} swipeDirection The direction of the swipe.
         * @param {object} [swipeArgs] Arguments object that defines the behavior of the swipe operation, format:
         * @param {Location} [swipeArgs.location] The location where the operation is performed.
         * @param {string} [swipeArgs.gesture = ""] The gesture class designed by the mobile application developer to handle this gesture on this object. (iOS only)
         * @returns {Promise<void>} a promise that is fulfilled after the swipe has occurred.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        swipe: {
            wiredName: swipeWiredName,
            exec: function (swipeDirection, swipeArgs) {

                if (swipeDirection == null)
                    throw new Error("You must supply swipe direction to swipe() method");

                if (typeof swipeDirection !== "string")
                    throw new Error("The swipe direction must be a string type");

                var swipeDirectionString = swipeDirection.toString().toLowerCase();

                if (swipeArgs == null)
                    return this._executeWithEvents(arguments, swipeWiredName, swipeDirectionString);

                if (typeof swipeArgs !== "object")
                    throw new Error("Only object is allowed to pass to swipe() method");

                swipeArgs.gesture = swipeArgs.gesture == null ? "" : swipeArgs.gesture;

                return this._executeWithEvents(arguments, swipeWiredName, swipeDirectionString, RectLocation(swipeArgs.location), Convert.toString(swipeArgs.gesture));

            }
        },
        /*jshint eqnull:true */
        /**
         * Performs a pinch gesture on the object.
         * @function
         * @param {number} scale The scale for the pinch gesture. This number is the ratio between the start distance and the end distance between the two touch points used for the pinch.
         * For example, if you were to touch a screen with your fingers 6 cm apart, and pinch until your fingers were 3 cm apart, the scale would be 0.5.
         * @param [pinchArgs] Arguments object that defines the behavior of the pinch operation.
         * @param {number} [pinchArgs.velocity] The speed at which to perform the pinch operation.
         * @param {Location} [pinchArgs.location] The location at which to perform operation.
         * @param {string} [pinchArgs.gesture = ""] The gesture class designed by the mobile application developer to handle this gesture on this object. (iOS only)
         * @returns {Promise<void>} a promise that is fulfilled after the pinch has occurred.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        pinch: {
            wiredName: pinchWiredName,
            exec: function (scale, pinchArgs) {
                if (scale == null)
                    throw new Error("You must supply scale value to pinch() method");

                scale = Convert.toNumber(scale);

                if (pinchArgs == null)
                    return this._executeWithEvents(arguments, pinchWiredName, scale);

                if (typeof pinchArgs !== "object")
                    throw new Error("Only object is allowed to pass to pinch() method");

                pinchArgs.gesture = pinchArgs.gesture == null ? "" : pinchArgs.gesture;
                pinchArgs.velocity = pinchArgs.velocity == null ? null : Convert.toNumber(pinchArgs.velocity);

                return this._executeWithEvents(arguments, pinchWiredName, scale, pinchArgs.velocity, Location(pinchArgs.location), Convert.toString(pinchArgs.gesture));
            }
        },

        /*jshint eqnull:true */
        /**
         * Performs a pan gesture on the object, by location.
         * @function
         * @param {Location} start The location at which to start the pan gesture.
         * @param {Location} end The location at which to end the pan gesture.
         * @returns {Promise<void>} a promise that is fulfilled after the pan operation has occurred.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        panByLocations: {
            wiredName: panWiredName,
            exec: function (start, end) {
                if (start == null || end == null)
                    throw new Error("You must pass start and end objects to panByLocation() method");

                return this._executeWithEvents(arguments, panWiredName, Location(start), Location(end));
            }
        },

        /*jshint eqnull:true */
        /**
         * Performs a pan gesture on the object, using points.
         * @function
         * @param {Point} start The point at which to start the pan gesture.
         * @param {Point} end The point at which to end the pan gesture.
         * @param {Object} [panArgs] Arguments object that defines the behavior of the pan operation:
         * @param {number} [panArgs.velocity] The speed at which to perform the pan operation. (iOS Only)
         * @param {string} [panArgs.gesture = ""] The gesture class designed by the mobile application developer to handle this gesture on this object.
         * @returns {Promise<void>} a promise that is fulfilled after the pan operation has occurred.
         * @memberof Mobile.UiObjectBaseTestObject#
         */
        panByPoints: {
            wiredName: panWiredName,
            exec: function (start, end, panArgs) {
                if (start == null || end == null)
                    throw new Error("You must pass start and end objects to panByPoints() method");

                if (panArgs == null) // panArgs is optional, default to empty object
                    panArgs = {};

                if (typeof(panArgs) !== "object")
                    throw new Error("panArgs must be an object");

                start = Point(start);
                end = Point(end);

                panArgs.gesture = panArgs.gesture == null ? "" : panArgs.gesture;
                panArgs.velocity = panArgs.velocity == null ? null : Convert.toNumber(panArgs.velocity);

                if (panArgs.velocity != null && panArgs.velocity <= 0)
                    throw new Error("velocity must be a positive number");

                var xVelocity = -9999, yVelocity = -9999;

                if (panArgs.velocity != null) {
                    var velocity = panArgs.velocity,
                        lengthX = end.X - start.X,
                        lengthY = end.Y - start.Y,
                        length = Math.sqrt(lengthX * lengthX + lengthY * lengthY);

                    if (length === 0)
                        throw new Error("Start location and end location are the same");

                    var ratio = velocity / length;

                    xVelocity = lengthX * ratio;
                    yVelocity = lengthY * ratio;
                }

                return this._executeWithEvents(arguments, panWiredName, start, end, xVelocity, yVelocity, Convert.toString(panArgs.gesture));
            }
        }
    },

    _additionalProperties: {
        mobileCenterIndex: {wiredName: "mcIndex"}
    }
};

Utils.inherit(UiObjectBaseTestObject, TestObjectBase, {
});

module.exports.UiObjectBaseTestObject = UiObjectBaseTestObject;
module.exports.UiObjectBaseDescription = UiObjectBaseDescription;