// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/22/2015.
 */

var ObjUtils = require("leanft.sdk.core").ObjectUtils;
var UiObjectBase = require("./uiobject_base").UiObjectBaseTestObject;
var UiObjectBaseDesc = require("./uiobject_base").UiObjectBaseDescription;
var Convert = require("leanft.sdk.core").Convert;

/**
 * The description of a DropDown test object in a mobile application.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {DropDown} the description object that was initialized.
 * @constructor
 * @memberof Mobile
 * @extends Mobile.UiObjectBaseDescription
 */
function DropDown(props) {
    var dropDownDes = new UiObjectBaseDesc("DropDown");

    dropDownDes._defineByPropertyBag(props);

    return dropDownDes;
}

/**
 * Selects the specified item or items by index. Multiple indexes are supported only for iOS. <br/>
 * Remark: For an iOS picker wheel, you can pass an index for each wheel. <br/>
 * The 0-based indexes of the items to select.
 * @class DropDownTO
 * @memberof Mobile
 * @constructor
 * @extends Mobile.UiObjectBaseTestObject
 * @mixes Mobile.DropDownTOBehavior._methods
 */
function DropDownTO(session, description) {
    description = description || DropDown();
    var dropDownTO = new UiObjectBase("MobileDropDown", session, description);

    dropDownTO._mergeBehavior(DropDownTOBehavior);

    return dropDownTO;
}

//Consts
var selectInWheelWiredName =  "Select";

/**
 * @memberof Mobile
 * @ignore
 */
var DropDownTOBehavior = {
    /**
     * @ignore
     * @memberof Mobile.DropDownTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Selects the specified item by index.
         * @function
         * @param {number} index The 0-based index of the item to select.
         * @returns {Promise<void>} a promise that is fulfilled after the requested item is selected.
         */
        selectByIndex: {
            wiredName: selectInWheelWiredName,
            exec: function (index) {
                if (index == null)
                    throw new Error("you must pass index to selectByIndex() method");

                return this.selectInWheel(0, Convert.toNumber(index));
            }
        },
        /*jshint eqnull:true */
        /**
         * Selects the specified item or items by index or by string. Multiple indexes are supported only for iOS.
         * @function
         * @param {...string | number} items For each item: <br/>
         * - Item as a number: the 0-based index of the item to select in the respective picker wheel.<br/>
         * - Item as a string: The name of the item to select in the respective picker wheel.
         * @returns {Promise<void>} a promise that is fulfilled after all the requested selections occurred.
         */
        select: {
            wiredName: selectInWheelWiredName,
            exec: function (items) {
                if (items == null)
                    throw new Error("You must supply names or indices to select() method");

                var promise;
                for (var i = 0; i < arguments.length; i++) {
                    promise = this.selectInWheel(i, arguments[i]);
                }
                return promise;
            }
        },
        /**
         * Selects the specified item in the specified picker wheel by index or by name (iOS only).
         * @function
         * @param {number} pickerWheel The 0-based index of the picker wheel in which to select the specified item.
         * @param {number | string} item The item or index. <br/>
         * - Item as a number: the 0-based index of the item to select in the specified picker wheel.<br/>
         * - Item as a string: The name of the item to select in the picker wheel.
         * @returns {Promise<void>} a promise that is fulfilled after all the requested selections occurred.
         */
        selectInWheel: {
            wiredName: selectInWheelWiredName,
            exec: function (pickerWheel, item) {
                return this._executeWithEvents(arguments, selectInWheelWiredName, item, Convert.toNumber(pickerWheel));
            }
        }
    }
};

module.exports.DropDown = DropDown;
module.exports.DropDownTO = DropDownTO;


