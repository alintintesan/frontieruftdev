// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 13/12/2015.
 * This file will contain the implementation of the application test object and description.
 */

var Core = require("leanft.sdk.core");
var TestObjectBase = Core.TestObjectBase;
var DescriptionBase = Core.DescriptionBase;
var ObjectUtils = Core.ObjectUtils;
var Logger = Core.Logger;
var Convert = require("leanft.sdk.core").Convert;
var LabCommandTypes = Core.LabCommandTypes;
var TestObjectLabExecutor = Core.TestObjectLabExecutor;

/**
 * The description of a mobile application test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {Application} the description object that was initialized.
 * @constructor
 * @memberof Mobile
 * @mixes DescriptionBase
 */
function Application(props) {
    return new ApplicationDescription(props);
}

function ApplicationDescription(props) {
   this._init({
        technology: "Mobile",
        leanftType: "Application"
    });

    this._defineByPropertyBag(props);
}

ObjectUtils.inherit(ApplicationDescription,DescriptionBase,{
    /**
     * The application identifier string.
     * @param {string} [id] When provided, this method acts as a setter and sets the identifier value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored identifier value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.Application#
     */
    identifier: function(id) {
        if(id instanceof RegExp){
            throw new Error("Regular expressions are not supported in Application description properties");
        }
        return this._simplePropertyHandler("identifier", id);
    },

    /**
     * The name of the mobile application.
     * @param {string} [name] When provided, this method acts as a setter and sets the name value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored name value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.Application#
     */
    name: function(name) {
        if(name instanceof RegExp){
            throw new Error("Regular expressions are not supported in Application description properties");
        }
        return this._simplePropertyHandler("name", name);
    },

    /**
     * The application version.
     * @param {string} [version ] When provided, this method acts as a setter and sets the version  value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored version value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.Application#
     */
    version: function(version) {
        if(version instanceof RegExp){
            throw new Error("Regular expressions are not supported in Application description properties");
        }
        return this._simplePropertyHandler("version", version);
    },
    
    /**
     * Indicates whether this application is packaged (instrumented) or not.
     * @param {boolean} [packaged] When provided, this method acts as a setter and sets the isPackaged value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isPackaged value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.Application#
     */
    isPackaged: function(packaged){
        return this._propertyHandler("instrumented", packaged, Convert.toBool);
    },

    /**
     * The application upload number. The upload number can be used to identify the application uniquely when the application is uploaded more than once.
     * @param {number} [upload] When provided, this method acts as a setter and sets the application upload number.
     * @return {number | Description} If no parameter is provided, the method acts as a getter and returns the current stored application upload number;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.Application#
     */
    upload: function (upload) {
        return this._propertyHandler("counter", upload);
    }
});


var InstallBehavior  = {
    doNotInstall: 1,
    install: 2
};

var RestartBehavior = {
    doNotRestart: 1,
    restart: 2
};


var AppLabOperationCommandMap = {
    Kill: LabCommandTypes.MobileAppCommand,
    Uninstall: LabCommandTypes.MobileAppCommand,
    EnterCameraSimulationMode: LabCommandTypes.MobileAppCommand,
    LeaveCameraSimulationMode: LabCommandTypes.MobileAppCommand,
    SimulateAuthentication: LabCommandTypes.MobileAppCommand,
    SimulateBarcodeScan: LabCommandTypes.MobileAppCommand
};

/**
 * @typedef {Object} SimulateAuthFailReason - Authentication simulation failure reasons.
 * @property {string} lockout  Too many attempts.
 * @property {string} notRecognized  Authentication method not recognized.
 * @property {string} notRegistered  Authentication method not registered (iOS only).
 * @property {string} fingerprintIncomplete  Fingerprint incomplete, moving too fast (Android only).
 * @property {string} sensorDirty  Fingerprint sensor is dirty (Android only).
 * @memberof Mobile
 */
var SimulateAuthFailReason = {
    lockout: "lockout",
    notRecognized: "notRecognized",
    notRegistered: "notRegistered",
    fingerprintIncomplete: "fingerprintIncomplete",
    sensorDirty: "sensorDirty",

    _convertToRealMap : {
        lockout: "Lockout",
        notrecognized: "NotRecognized",
        notregistered: "NoFingerprintRegistered",
        fingerprintincomplete: "FingerIncomplete",
        sensordirty: "SensorDirty"
    },

    _tryConvertToRealValue: function (type) {
        /*jshint eqnull:true */
        var convertedValue = SimulateAuthFailReason._convertToRealMap[type.toLowerCase()];

        return convertedValue != null ? convertedValue : type;
    }
};

/**
 * @typedef {Object} SimulateAuthCancelOrigin - Authentication simulation cancellation reasons.
 * @property {string} system  Authentication operation canceled by system.
 * @property {string} user  Authentication operation canceled by user.
 * @memberof Mobile
 */
var SimulateAuthCancelOrigin = {
    system: "system",
    user: "user",

    _convertToRealMap : {
        system: "System",
        user: "User"
    },

    _tryConvertToRealValue: function (type) {
        /*jshint eqnull:true */
        var convertedValue = SimulateAuthCancelOrigin._convertToRealMap[type.toLowerCase()];

        return convertedValue != null ? convertedValue : type;
    }
};


/**
 * A mobile application.
 * @class ApplicationTO
 * @memberof Mobile
 * @constructor
 * @extends TestObjectBase
 * @mixes BrowserTOBehavior._properties
 * @mixes BrowserTOBehavior._methods
 */
function ApplicationTO(session, description) {
    description = description || Application();
    this._logger = new Logger("ApplicationTO");
    this._init("App",session, description);

    this._executor = new TestObjectLabExecutor(this, AppLabOperationCommandMap);

    this._mergeBehavior(ApplicationTOBehavior);
}

//Consts
var launchWiredName = "Launch";
var killWiredName = "Kill";
var uninstallWiredName = "Uninstall";
var enterCameraSimulationModeWiredName = "EnterCameraSimulationMode";
var leaveCameraSimulationModeWiredName = "LeaveCameraSimulationMode";
var simulateAuthenticateWiredName = "SimulateAuthentication";
var simulateBarcodeScanWiredName = "SimulateBarcodeScan";

/**
 * @memberof Mobile
 * @ignore
 */
var ApplicationTOBehavior = {
    /**
     * @ignore
     * @memberof Mobile.ApplicationTOBehavior
     */
    _properties: {
        /**
         * Returns the application identifier string.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the application identifier string.
         * @memberof Mobile.ApplicationTO#
         */
        identifier: {
            type: 'notregex'

        },

        /**
         * Returns the name of the mobile application.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the mobile application.
         * @memberof Mobile.ApplicationTO#
         */
        name: {
            type: 'notregex'
        },

        /**
         * Returns the application version.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the application version.
         * @memberof Mobile.ApplicationTO#
         */
        version: {
            type: 'notregex'
        },

         /**
         * Indicates whether the application is packaged.
          * @function
          * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the application is packaged.
         * @memberof Mobile.ApplicationTO#
         */
        isPackaged: {
            wiredName: "instrumented"
         },

        /**
         * The application upload number. The upload number can be used to identify the application uniquely when the application is uploaded more than once.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with the application upload number.
         * @memberof Mobile.ApplicationTO#
         */
        upload: {
            wiredName: "counter",
            type: 'notregex'
        }
    },

    /**
     * @ignore
     * @memberof Mobile.ApplicationTOBehavior
     */
    _methods: {
        /**
         * Launches the application if it is not already running.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the application is launched.
         * @memberof Mobile.ApplicationTO#
         */
        launch: {
            wiredName: launchWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, launchWiredName, InstallBehavior.doNotInstall, RestartBehavior.doNotRestart);
            }
        },

        /**
         * Launches the application if it is closed, or restarts the application if it is already running.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the application is launched or restarted.
         * @memberof Mobile.ApplicationTO#
         */
        restart: {
            wiredName: launchWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, launchWiredName, InstallBehavior.doNotInstall, RestartBehavior.restart);
            }
        },

        /**
         * Installs (or re-installs) the application and then launches it.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the application is installed (or re-installed).
         * @memberof Mobile.ApplicationTO#
         */
        install: {
            wiredName: launchWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, launchWiredName, InstallBehavior.install);
            }
        },

        /**
         * Stops the application.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the application is stopped.
         * @memberof Mobile.ApplicationTO#
         */
        kill: {
            wiredName: killWiredName,
            exec: function() {
                return this._executeWithEvents(arguments, killWiredName);
            }
        },

        /**
         * Uninstalls the application.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the application is uninstalled.
         * @memberof Mobile.ApplicationTO#
         */
        uninstall: {
            wiredName: uninstallWiredName,
            exec: function() {
                return this._executeWithEvents(arguments, uninstallWiredName);
            }
        },

        /**
         * Start camera simulation mode. Run after Device.uploadMediaUrl. Once simulation is completed, run stopCameraSimulationMode.
         * @function
         * @param {string} mediaId The unique ID of the uploaded media to use in the simulation, as used in Device.uploadMediaUrl.
         * @returns {Promise<void>} a promise that is fulfilled when the application enters camera simulation mode.
         * @memberof Mobile.ApplicationTO#
         */
        startCameraSimulationMode: {
            wiredName: enterCameraSimulationModeWiredName,
            exec: function(mediaId) {
                return this._executeWithEvents(arguments, enterCameraSimulationModeWiredName, mediaId);
            }
        },

        /**
         * Stop camera simulation mode.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the application leaves camera simulation mode.
         * @memberof Mobile.ApplicationTO#
         */
        stopCameraSimulationMode: {
            wiredName: leaveCameraSimulationModeWiredName,
            exec: function() {
                return this._executeWithEvents(arguments, leaveCameraSimulationModeWiredName);
            }
        },

        /**
         * Simulate barcode or QR code scan using an image file. Run after Device.UploadMedia.
         * @function
         * @param {string} mediaId The unique ID of the uploaded image to use in the simulation as used in IDevice.UploadMedia.
         * @returns {Promise<void>} a promise that is fulfilled when the simulation of barcode or QR code scan using an image file ends.
         * @memberof Mobile.ApplicationTO#
         */
        simulateBarcodeScan: {
            wiredName: simulateBarcodeScanWiredName,
            exec: function(imageID) {
                return this._executeWithEvents(arguments, simulateBarcodeScanWiredName, imageID);
            }
        },
        
        /**
         * Unsupported operation
         * @function
         * @memberof Mobile.ApplicationTO#
         * @ignore
         *
         */
        exists: function() {
            return this._throwUnsupportedErrorAsync("exists");
        },

        /**
         * Unsupported operation
         * @function
         * @memberof Mobile.ApplicationTO#
         * @ignore
         */
        snapshot: function() {
            return this._throwUnsupportedErrorAsync("snapshot");
        },

        /**
         * Unsupported operation
         * @function
         * @memberof Mobile.ApplicationTO#
         * @ignore
         */
        highlight: function() {
            return this._throwUnsupportedErrorAsync("highlight");
        },

        /**
         * Simulates authentication success.
         * @returns {Promise<void>} a promise that is fulfilled when the authentication simulation ends.
         * @function
         * @memberof Mobile.ApplicationTO#
         */
        simulateAuthSucceed: {
            wiredName: simulateAuthenticateWiredName,
            exec: function() {
                return this._simulateAuthentication("Success");
            }
        },

        /*jshint eqnull:true */
        /**
         * Simulates authentication failure with specific reason.
         * @param {Mobile.SimulateAuthFailReason} reason The reason of the authentication failure.
         * @returns {Promise<void>} a promise that is fulfilled when the authentication simulation ends.
         * @function
         * @memberof Mobile.ApplicationTO#
         */
        simulateAuthFail: {
            wiredName: simulateAuthenticateWiredName,
            exec: function(reason) {
                if(reason == null) {
                    throw new Error("reason must be provided to simulateAuthFail.");
                }

                reason = SimulateAuthFailReason._tryConvertToRealValue(reason);

                return this._simulateAuthentication("Failure", reason);
            }
        },

        /*jshint eqnull:true */
        /**
         * Simulates authentication canceling with specific origin.
         * @param {Mobile.SimulateAuthCancelOrigin} origin The cancellation origin.
         * @returns {Promise<void>} a promise that is fulfilled when the authentication simulation ends.
         * @function
         * @memberof Mobile.ApplicationTO#
         */
        simulateAuthCancel: {
            wiredName: simulateAuthenticateWiredName,
            exec: function(origin) {
                if(origin == null) {
                    throw new Error("origin must be provided to simulateAuthCancel.");
                }

                origin = SimulateAuthCancelOrigin._tryConvertToRealValue(origin);
                return this._simulateAuthentication("Cancel", origin);
            }
        }
    },

    _helpers: {
        /**
         * Helper function to control the reporting of the simulateAuth functions.
         * Reports all overloads with the same logical name, to make reporter similar to C# and Java.
         * @private
         * @ignore
         */
        _simulateAuthentication: function(result, details) {
            return this._executeWithEventsWithName(arguments, simulateAuthenticateWiredName, "simulateAuthentication", result, details);
        }
    }
};

ObjectUtils.inherit(ApplicationTO,TestObjectBase, {
});

//remove the index property for the application description
ApplicationDescription.prototype.index = undefined;

//remove the vri property for the application description
ApplicationDescription.prototype.vri = undefined;

module.exports.Application = Application;
module.exports.ApplicationTO = ApplicationTO;
module.exports.SimulateAuthFailReason = SimulateAuthFailReason;
module.exports.SimulateAuthCancelOrigin = SimulateAuthCancelOrigin;