// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/21/2015.
 */

var Convert = require("leanft.sdk.core").Convert;

///////////////// SetFocus BEHAVIOR ////////////////////
//Consts
var setFocusWiredName = "SetFocus";

/**
 * @memberof Mobile
 * @ignore
 */
var SetFocusTOBehavior = {
    /**
     * @memberof Mobile.SetFocusTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Brings the object into focus.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled after the focus operation has occurred.
         */
        setFocus: {
            wiredName: setFocusWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, setFocusWiredName);
            }
        }
    }
};

///////////////// SCROLLABLE BEHAVIOR ////////////////////
/**
 * Supplies constants representing mobile scroll direction.
 * @typedef {Object} ScrollDirection
 * @property {string} down Scroll down.
 * @property {string} up Scroll up.
 * @property {string} left Scroll left.
 * @property {string} right Scroll right.
 * @memberof Mobile
 */
var ScrollDirection = {
    /**
     * Scroll down.
     */
    down: "down",
    /**
     * Scroll up.
     */
    up: "up",
    /**
     * Scroll left.
     */
    left: "left",
    /**
     * Scroll right.
     */
    right: "right",

    _convertToRuntime: {
        down: "Down",
        up: "Up",
        left: "Left",
        right: "Right"
    },
    _convert: function(direction) {
        return ScrollDirection._convertToRuntime[direction.toLowerCase()];
    }
};

//Consts
var scrollToOffsetWiredName = "ScrollToOffset";
var scrollOnePageWiredName = "ScrollOnePage";

/**
 * @memberof Mobile
 * @ignore
 */
var ScrollableTOBehavior = {
    /**
     * @memberof Mobile.ScrollableTOBehavior
     * @ignore
     */
    _methods: {
        /**
         * Scrolls the object to the specified x,y coordinates.
         * @function
         * @param {number} x The x-coordinate for the scroll operation, in pixels. The specified coordinate is relative to the left side of the object. <br/>
         * Remarks: If an object does not support horizontal scrolling, x = 0.
         * @param {number} y The y-coordinate for the scroll operation, in pixels. The specified coordinate is relative to the top of the object.
         * @returns {Promise<void>} a promise that is fulfilled after scrolling to the requested coordinates.
         */
        scrollToOffset: {
            wiredName: scrollToOffsetWiredName,
            exec: function (x, y) {
                return this._executeWithEvents(arguments, scrollToOffsetWiredName, Convert.toNumber(x), Convert.toNumber(y));
            }
        },
        /*jshint eqnull:true */
        /**
         * Scrolls the object one page in the ScrollDirection.
         * @function
         * @param {Mobile.ScrollDirection} pageDirection The direction to scroll.
         * @returns {Promise<void>} a promise that is fulfilled after scrolling in the requested direction.
         */
        scrollOnePage: {
            wiredName: scrollOnePageWiredName,
            exec: function (pageDirection) {
                if (pageDirection == null)
                    throw new Error("You must pass pageDirection to scrollOnePage() method");

                return this._executeWithEvents(arguments, scrollOnePageWiredName, ScrollDirection._convert(pageDirection));
            }
        }
    }
};




// test objects
module.exports.SetFocusTOBehavior = SetFocusTOBehavior;
module.exports.ScrollableTOBehavior = ScrollableTOBehavior;

module.exports.ScrollDirection = ScrollDirection;