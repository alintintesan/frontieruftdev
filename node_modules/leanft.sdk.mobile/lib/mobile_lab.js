// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 13/12/2015.
 */

var Core = require("leanft.sdk.core");
var Logger = Core.Logger;
var ReplayErrorsBehavior = Core.ReplayErrorsBehavior;
var ObjectUtils = Core.ObjectUtils;
var StringUtils = Core.StringUtils;
var TestObjectUtilsBehavior = Core.TestObjectUtilsBehavior;
var NotifyEventsBehavior = Core.NotifyEventsBehavior;
var Device = require("./device.js").Device;
var DeviceSource = require("./device.js").DeviceSource;
var DeviceDescription = require("./device.js").DeviceDescription;
var DeviceTO = require("./device.js").DeviceTO;

var Application = require("./application.js").Application;
var RuntimeAccessMode = Core.RuntimeAccessMode;

/**
 * @typedef {Object} DeviceInfo
 * @property {string} id The device ID used by UFT Mobile.
 * @property {string} model The model name of the device.
 * @property {string} manufacturer The manufacturer of the device.
 * @property {string} osType The operating system currently running on the device.
 * @property {string} osVersion The version of the operating system currently running on the device.
 * @property {string} name The logical name that UFT Mobile uses to identify the device.
 * @memberof Mobile
 *
 */

/**
 * @typedef {Object} MobileCenterConfiguration
 * @property {string} username The UFT Mobile username used to log in.
 * @property {string} address The UFT Mobile server address.
 * @memberof Mobile
 */



/**
 * The UFT Mobile lab, where you manage users, applications, and devices.
 * @memberof Mobile
 * @constructor Lab
 */
function MobileLab(session, lab) {
    this._logger = new Logger("MobileLab");
    if (session === null) {
        throw new Error("The communication channel is mandatory for creating MobileLab");
    }

    ObjectUtils.extend(this, TestObjectUtilsBehavior);
    ObjectUtils.extend(this, ReplayErrorsBehavior);
    ObjectUtils.extend(this, NotifyEventsBehavior);

    this._session = session;
    this._lab = lab;
}


MobileLab.prototype = {
    _logger: null,
    _session: null,
    _lab: null,
    _collectVitalsDefault: {
        cpu: false,
        memory: false,
        freeMemory: false
    },

    /*jshint eqnull:true */
    /**
     * Obtains a device from the UFT Mobile lab and locks it, so that only LeanFT can perform actions on it.
     * @param {Mobile.Device} description The description of the device.
     * @param {Mobile.Application[]} [appsToInstall] An {@link Mobile.Application|Application} array of applications to install on the device.
     * @param {Mobile.DeviceSource} [deviceSource] The source location of the device. You can use the {@link Mobile.Device.DeviceSource|DeviceSource} object or just pass 'mobile_center', 'amazon_device_farm' or 'any' as a string.
     * @returns {Promise<Mobile.DeviceTO>} a promise that is fulfilled with the locked device.
     * @memberof Mobile.Lab#
     */
    lockDevice: function (description, appsToInstall, deviceSource) {
        var deviceDesc = description;
        var sessionOptions = {
            appsToInstall: appsToInstall,
            deviceSource: deviceSource,
            collectLogs: true,
            collectVitals: MobileLab.prototype._collectVitalsDefault
        };
        var func = function (id) {
            return this._internalLockDevice(id, deviceDesc, sessionOptions);
        };
        var options = {sender: this, onError: false, calleeArguments: arguments, type: "MobileLab"};
        return this.notifyWithEvents(func, arguments, options);
    },

    /**
     * Obtains a random device from the UFT Mobile lab and locks it, so that only LeanFT can perform actions on it.
     * @param {Mobile.Device} description The description of the device.
     * @param {Mobile.Application[]} [appsToInstall] An {@link Mobile.Application|Application} array of applications to install on the device.
     * @returns {Promise<Mobile.DeviceTO>} a promise that is fulfilled with the locked device.
     * @memberof Mobile.Lab#
     */
     lockPublicDevice: function(description, appsToInstall) {
        return this.getDeviceList().then(function(devices) {
            devices = devices.find(function(d) {
                return d.source == "HOSTED";
            });

            var device;
            if(devices && devices.length) device = devices[0];

            if(!description) description = {
                id: undefined
            };
            description.id = device ? device.deviceID : description.id;
            return this.lockDevice(description, appsToInstall);
        }.bind(this), this.handleReplayError.bind(this));
    },


    /**
     * Obtains a device from the UFT Mobile lab and locks it, so that only the current LeanFT test can perform actions on it.
     * @param {Mobile.Device} description The description of the device.
     * @param {Object} sessionOptions the session options to use.
     * @param {Mobile.Application[]} [sessionOptions.appsToInstall] An {@link Mobile.Application|Application} array of applications to install on the device.
     * @param {Mobile.DeviceSource} [sessionOptions.deviceSource] The source location of the device. You can use the {@link Mobile.Device.DeviceSource|DeviceSource} object or just pass 'mobile_center', 'amazon_device_farm' or 'any' as a string.
     * @param {bool} [sessionOptions.collectLogs=true] indicates whether logs should be collected in this session.
     * @param {Object} [sessionOptions.collectVitals] Defines which device vitals should be collected in this session.
     * @param {bool} [sessionOptions.collectVitals.cpu=false] indicates whether to collect the device CPU usage.
     * @param {bool} [sessionOptions.collectVitals.memory=false] indicates whether to collect the device memory usage.
     * @param {bool} [sessionOptions.collectVitals.freeMemory=false] indicates whether to collect the device free memory.
     * @returns {Promise<Mobile.DeviceTO>} a promise that is fulfilled with the locked device.
     * @memberof Mobile.Lab#
     */
    lockDeviceWithOptions: function (description, sessionOptions) {
        var func = function (id) {
            return this._internalLockDevice(id, description, sessionOptions);
        };
        var options = {sender: this, onError: false, calleeArguments: arguments, type: "MobileLab"};
        return this.notifyWithEvents(func, arguments, options);
    },

    ///**
    // * Format an 'extraapps' string - an optional entry at 'capabilities' which passed to method 'lockDeviceByCapabilities()'.
    // * @param {Object[]} appsToInstall Array of apps.
    // * @returns {string} the 'extraapps' string.
    // * @memberof Mobile.Lab#
    // */
    //formatExtraappsString: function (appsToInstall) {
    //    if (appsToInstall && (appsToInstall.length > 0)) {
    //        var appsToInstallStrings = appsToInstall.map(this._convertApplicationDescriptionToString);
    //        return "[" + appsToInstallStrings.join() + "]";
    //    }
    //},

    ///**
    // * Format a 'source' string - an optional entry at 'capabilities' which passed to method 'lockDeviceByCapabilities()'.
    // * @param {string} deviceSource the source name ('mobile_center', or 'amazon_device_farm', or 'any').
    // * @returns {string} the 'source' string ('MC', or 'AWS', or 'ANY').
    // * @memberof Mobile.Lab#
    // */
    //formatSourceString: function (deviceSource) {
    //    if (deviceSource) {
    //        return DeviceSource._convert(deviceSource);
    //    }
    //},

    /**
     * Obtains a device from the UFT Mobile lab by deviceID and locks it, so that only LeanFT can perform actions on it.
     * @param {string} deviceID The device ID used by UFT Mobile.
     * @returns {Promise<Mobile.DeviceTO>} a promise that is fulfilled with the locked device.
     * @memberof Mobile.Lab#
     */
    lockDeviceById: function (deviceID) {
        return this.lockDevice({id: deviceID});
    },

    /**
     * Obtains a device from the UFT Mobile lab by device name and locks it, so that only LeanFT can perform actions on it.
     * @param {string} deviceName The logical name that UFT Mobile uses to identify the device.
     * @returns {Promise<Mobile.DeviceTO>} a promise that is fulfilled with the locked device.
     * @memberof Mobile.Lab#
     */
    lockDeviceByName: function (deviceName) {
        return this.lockDevice({name: deviceName});
    },

    /*jshint eqnull:true */
    /**
     * Obtains a device from the UFT Mobile lab by device information and locks it, so that only LeanFT can perform actions on it. <br/>
     * Note: The device information is the structure returned by the getDeviceList function.
     * @param {Mobile.DeviceInfo} deviceInfo The device information of the device to lock.
     * @returns {Promise<Mobile.DeviceTO>} a promise that is fulfilled with the locked device.
     * @memberof Mobile.Lab#
     */
    lockDeviceByInfo: function (deviceInfo) {
        if (deviceInfo == null) {
            throw new Error("deviceInfo must be supplied");
        }

        return this.lockDevice({id: deviceInfo.id});
    },

    /**
     * Returns a list of all devices with an open viewer.
     * @returns {Promise<Mobile.DeviceTO>} a promise that is fulfilled with the list of all devices with an open viewer.
     * @memberof Mobile.Lab#
     */
    getDevicesWithOpenViewers: function () {
        return this._session._communication.send("GetDevicesWithOpenViewer", null).then(function (result) {
                if (result === null) {
                    throw new Error("getDevicesWithOpenViewers result cannot be null");
                }

                if (!result.Result) {
                    throw new Error("getDevicesWithOpenViewers missing result field");
                }

                return result.Result.map(function (deviceInfo) {
                    var device = new DeviceTO(this._session, null, deviceInfo.ServerCookie);
                    device._applicationInfo = deviceInfo.Properties;
                    return device;
                }, this);
            }.bind(this),
            this.handleReplayError.bind(this));
    },

    /**
     * Returns an array of device information describing all the devices in the UFT Mobile lab.
     * The device information can be passed to the lockDeviceByInfo function in order to lock the appropriate device.
     * @returns {Promise<Mobile.DeviceInfo[]>} a promise that is fulfilled with an array of device information describing all the devices in the UFT Mobile lab.
     * @memberof Mobile.Lab#
     */
    getDeviceList: function () {
        var func = function () {

            return this._session._communication.send("GetMobileDevicesList", null).then(function (result) {
                    if (result === null) {
                        throw new Error("GetMobileDevicesList result cannot be null");
                    }

                    if (!result.Result) {
                        throw new Error("GetMobileDevicesList missing result field");
                    }

                    return result.Result.map(function (deviceInfo) {
                        var devInfo = {};
                        Object.keys(deviceInfo).forEach(function (key) {
                            var newKey = StringUtils.lowerFirstLetter(key);
                            if (newKey != "type") {
                                devInfo[newKey] = deviceInfo[key];
                            }
                        });

                        return devInfo;

                        // return ObjectUtils.map(deviceInfo.Properties, function (key) {
                        //     return key.toLowerCase();
                        // }, ObjectUtils.identity);
                    }, this);
                }.bind(this),
                this.handleReplayError.bind(this));
        };
        var options = {sender: this, onError: true, calleeArguments: arguments, type: "MobileLab"};
        return this.notifyWithEvents(func, arguments, options);
    },

    /**
     * Returns the MobileCenter connection configuration.
     * @returns {Promise<Mobile.MobileCenterConfiguration>} a promise that is fulfilled with the UFT Mobile connection configuration.
     * @memberof Mobile.Lab#
     */
    getConfig: function () {
        return this._session._communication.send("GetMobileCenterConfiguration", null).then(function (result) {
                return {
                    username: result ? result.UserName : null,
                    address: result ? result.URI : null
                };
            },
            this.handleReplayError.bind(this));
    },

    /*jshint eqnull:true */
    _internalLockDevice: function (id, description, sessionOptions) {
        description = description || Device();
        sessionOptions = sessionOptions || {};
        var deviceDesc = description instanceof DeviceDescription ? ObjectUtils.clone(description) : Device(description);
        var appsToInstall = sessionOptions.appsToInstall;
        if (appsToInstall != null && appsToInstall.length > 0) {
            var appsToInstallJSON = appsToInstall.map(function (currentAppDescription) {
                return currentAppDescription ? currentAppDescription._toJSON().Properties : null;
            }).filter(function (x) {
                return x != null;
            });
            deviceDesc._properties.extraapps = appsToInstallJSON;
        }

        var deviceSource = sessionOptions.deviceSource;
        if (deviceSource != null) {
            deviceDesc._properties.source = DeviceSource._convert(deviceSource);
        }

        deviceDesc._properties.collectLogs = sessionOptions.collectLogs != null ? sessionOptions.collectLogs : true;
        var collectVitals = ObjectUtils.clone(MobileLab.prototype._collectVitalsDefault);
        ObjectUtils.extend(collectVitals, sessionOptions.collectVitals);
        deviceDesc._properties.vitalsCollectOptions = collectVitals;
        var launchInfo = deviceDesc._properties;

        var env_id = this._session._config.ENVIRONMENT_ID;
        var env_address = this._session._config.ENVIRONMENT_ADDRESS;
        var lab = this._lab;
        if (env_id) {
            this._logger.info("_internalLockDevice: overriding the given device capabilities with environment id", env_id);
            launchInfo = { environment_id: env_id, environment_address: env_address };
            lab = "srf";
        }

        launchInfo.lab = lab;

        var launchData = {
            "type": "Device",
            "launch info": launchInfo // See type 'MobileLaunchInfo' (at '..\lightweight-engine-common\lib\technologies\mobile_types.ts'
        };

        this._logger.trace("Lock device - launchData is: \n" + JSON.stringify(launchData));
        return this._session._communication.send("LaunchApplication", launchData).then(function (launchResult) {
                this._logger.trace("lockDevice: The result of the lockDevice is \n" + JSON.stringify(launchResult));
                if (launchResult === null) {
                    throw new Error("lockDevice result cannot be null");
                }
                var device = new DeviceTO(this._session, null, launchResult["AUT cookie"]);
                device._useCachedProperties(launchResult.Properties, RuntimeAccessMode.accessOnUnknownOperationOrProperty);
                device._applicationInfo = launchResult.Properties;

                if(launchResult.AdditionalInfo) {
                    this._session.fireEvent("onAdditionalDataReceivedCommand", {
                        commandId: id,
                        sender: this,
                        additionalData: launchResult.AdditionalInfo
                    });
                }

                return device;
            }.bind(this),
            this.handleReplayError.bind(this));
    }
};

module.exports.MobileLab = MobileLab;