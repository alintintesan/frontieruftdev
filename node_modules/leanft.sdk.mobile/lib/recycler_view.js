// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/3/2017.
 */

var UiObjectBase = require("./uiobject_base").UiObjectBaseTestObject;
var UiObjectBaseDesc = require("./uiobject_base").UiObjectBaseDescription;
var Convert = require("leanft.sdk.core").Convert;

/**
 * The description of a RecyclerView test object in a mobile application.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {RecyclerView} the description object that was initialized.
 * @constructor
 * @memberof Mobile
 * @extends Mobile.UiObjectBaseDescription
 */
function RecyclerView(props) {
    var recyclerViewDes = new UiObjectBaseDesc("RecyclerView");

    recyclerViewDes._defineByPropertyBag(props);

    return recyclerViewDes;
}

/**
 * A RecyclerView object in a mobile application.
 * @class RecyclerViewTO
 * @memberof Mobile
 * @constructor
 * @extends Mobile.UiObjectBaseTestObject
 * @mixes Mobile.RecyclerViewTOBehavior._methods
 */
function RecyclerViewTO(session, description) {
    description = description || RecyclerView();
    var recyclerViewTO = new UiObjectBase("MobileRecyclerView", session, description);

    recyclerViewTO._mergeBehavior(RecyclerViewTOBehavior);

    return recyclerViewTO;
}

//Consts
var scrollWiredName =  "Scroll";
var selectWiredName =  "Select";

/**
 * @memberof Mobile
 * @ignore
 */
var RecyclerViewTOBehavior = {
    /**
     * @ignore
     * @memberof Mobile.RecyclerViewTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Scrolls to the specified item in the RecyclerView.
         * @function
         * @param {number} item The item to scroll to.
         * @returns {Promise<void>} a promise that is fulfilled after the requested scroll occurred.
         */
        scroll: {
            wiredName: scrollWiredName,
            exec: function (item) {
                if (item == null)
                    throw new Error("You must supply an item to scroll to, to the scroll() method");
                return this._executeWithEvents(arguments, scrollWiredName, Convert.toNumber(item));
            }
        },
        /*jshint eqnull:true */
        /**
         * Selects an item in the RecyclerView.
         * @function
         * @param {number} item The item to select.
         * @returns {Promise<void>} a promise that is fulfilled after the passed item is selected.
         */
        select: {
            wiredName: selectWiredName,
            exec: function (item) {
                if (item == null)
                    throw new Error("You must supply an item to select to the select() method");
                return this._executeWithEvents(arguments, selectWiredName, Convert.toNumber(item));
            }
        }
    }
};

module.exports.RecyclerView = RecyclerView;
module.exports.RecyclerViewTO = RecyclerViewTO;


