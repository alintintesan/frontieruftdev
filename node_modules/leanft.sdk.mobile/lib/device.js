// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created  on 13/12/2015.
 */

var Core = require("leanft.sdk.core");
var TestObjectBase = Core.TestObjectBase;
var DescriptionBase = Core.DescriptionBase;
var ObjectUtils = Core.ObjectUtils;
var Convert = Core.Convert;
var RectLocation = Core.RectLocation;
var Logger = Core.Logger;
var SwipeDirection = Core.SwipeDirection;
var LabCommandTypes = Core.LabCommandTypes;
var TestObjectLabExecutor = Core.TestObjectLabExecutor;

/**
 * Possible values for the device orientation type.
 * @typedef {Object} DeviceOrientation
 * @property {string} portrait Sets the device in portrait mode.
 * @property {string} landscape Sets the device in landscape mode.
 * @memberof Mobile
 */
var DeviceOrientation = {
    /**
     * Sets device in portrait mode.
     */
    portrait: "portrait",
    /**
     * Sets device in landscape mode.
     */
    landscape: "landscape",

    _convertToRuntime: {
        portrait: "Portrait",
        landscape: "LandscapeRight"
    },

    _convert: function(orientation) {
        return DeviceOrientation._convertToRuntime[orientation.toLowerCase()];
    }
};

/**
 * Possible values for the device source type.
 * @typedef {Object} DeviceSource
 * @property {string} mobile_center Device is stored on UFT Mobile.
 * @property {string} amazon_device_farm Device is stored on an AWS Device Farm.
 * @property {string} storm_runner_functional Device is stored on Storm Runner Functional (SRF).
 * @property {string} any Device is stored either on UFT Mobile or an AWS Device Farm.
 * @memberof Mobile
 */
var DeviceSource = {
    /**
     * Device is stored on UFT Mobile.
     */
    mobile_center: "mobile_center",
    /**
     * Device is stored on an AWS Device Farm.
     */
    amazon_device_farm: "amazon_device_farm",
    /**
     * The device is stored on Storm Runner Functional (SRF).
     */
    srf_device_lab: "srf_device_lab",
    /**
     * Device is stored either on UFT Mobile, AWS Device Farm or Storm Runner Functional (SRF).
     */
    any: "any",

    _convertToRuntime: {
        mobile_center: "MC",
        amazon_device_farm: "AWS",
        srf_device_lab: "SRF",
        any: "ANY"
    },

    _convert: function(source) {
        return DeviceSource._convertToRuntime[source.toLowerCase()];
    },

    _valueToEnumKey: function(value) {
        
        // find enum keys with same value as input value
        var results = Object.keys(DeviceSource._convertToRuntime).filter(function(key) {
            return DeviceSource._convertToRuntime[key] === value;
        });
        
        if(results.length === 1)
            return results[0];

        throw new Error("Enum DeviceSource does not contain value " + value);
    }
};

/**
 * Supplies constants representing mobile keyboard keys, which can be used in the input parameter of the Device.sendKey(key) method.
 * @typedef {Object} Keys
 * @property {string} enter The Enter key. Supported on iOS and Android.
 * @property {string} return The Return key. Supported on iOS.
 * @property {string} backspace The Backspace key. Supported on iOS and Android.
 * @property {string} delete The Delete key. Supported on iOS and Android.
 * @property {string} tab The Tab key. Supported on Android.
 * @property {string} escape The Escape key. Supported on Android.
 * @property {string} pageUp The PageUp key. Supported on Android.
 * @property {string} pageDown The PageDown key. Supported on Android.
 * @property {string} end The End key. Supported on Android.
 * @property {string} home The Home key. Supported on Android.
 * @property {string} left The Left key. Supported on Android.
 * @property {string} right The Right key. Supported on Android.
 * @property {string} up The Up key. Supported on Android.
 * @property {string} down The Down key. Supported on Android.
 
 * @memberof Mobile
 */
var Keys = {
    /**
     * The Enter key. Supported on iOS and Android.
     */
    enter: "Enter",
    /**
     * The Return key. Supported on iOS.
     */
    return: "Return",
    /**
     * The Backspace key. Supported on iOS and Android.
     */
    backspace: "Backspace",
    /**
     * The Delete key. Supported on iOS and Android.
     */
    delete: "Delete",
    /**
     * The Tab key. Supported on Android.
     */
    tab: "Tab",
    /**
     * The Escape key. Supported on Android.
     */
    escape: "Escape",
    /**
     * The PageUp key. Supported on Android.
     */
    pageUp: "PageUp",
    /**
     * The PageDown key. Supported on Android.
     */
    pageDown: "PageDown",
    /**
     * The End key. Supported on Android.
     */
    end: "End",
    /**
     * The home key. Supported on Android.
     */
    home: "Home",
    /**
     * The Left key. Supported on Android.
     */
    left: "Left",
    /** 
     * The Right key. Supported on Android.
     */
    right: "Right",
    /**
     * The Up key. Supported on Android.
     */
    up: "Up",
    /**
     * The Down key. Supported on Android.
     */
    down: "Down",

};

function _convertKeyToNative(value) {
    var key = value.toLowerCase();
    var convert = Object.keys(Keys).filter(function(convertKey){
        return convertKey.toLowerCase() === key;
    });
    if(convert.length !== 1)
        throw new Error("You must supply a valid Key");

    return Keys[convert[0]];
}

/**
 * The description of a Mobile Device test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {Device} the description object that was initialized.
 * @constructor
 * @memberof Mobile
 */
function Device(props){
    return new DeviceDescription(props);
}

function DeviceDescription(props) {
    this._init({
        technology: "Mobile",
        leanftType: "Device"
    });

    this._defineByPropertyBag(props);
}

/**
 * @ignore
 */
ObjectUtils.inherit(DeviceDescription,DescriptionBase,{
    /*jshint unused:true, eqnull:true */
    /**
     * Override the default _defineByPropertyBag to support not modeled properties.
     * @param supportedProps
     * @private
     */
    _defineByPropertyBag: function(supportedProps){
        if(supportedProps == null)
            return;
        for(var key in supportedProps){
            var foundKey = ObjectUtils.findKeyNameIgnoreCase(this, key);
            if (foundKey) {
                this[foundKey].call(this, supportedProps[key]);
            } else {
                //key is a not modeled property - set it to _properties as is.
                this._properties[key] = supportedProps[key];
            }
        }
    },
    /**
     * The device ID used by UFT Mobile.
     * @param {string} [id] When provided, this method acts as a setter and sets the identifier value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored identifier value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.Device#
     */
    id: function(id) {
        if(id instanceof RegExp){
            throw new Error("Regular expressions are not supported in Device description properties");
        }
        return this._simplePropertyHandler("id", id);
    },

    /**
     * The logical name that UFT Mobile uses to identify the device.
     * @param {string} [name] When provided, this method acts as a setter and sets the name value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored name value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.Device#
     */
    name: function(name) {
        if(name instanceof RegExp){
            throw new Error("Regular expressions are not supported in Device description properties");
        }

        return this._simplePropertyHandler("name", name);
    },

    /**
     * The operating system currently running on the device.
     * @param {string} [osType] When provided, this method acts as a setter and sets the osType value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored osType value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.Device#
     */
    osType: function(osType) {
        if(osType instanceof RegExp){
            throw new Error("Regular expressions are not supported in Device description properties");
        }

        return this._simplePropertyHandler("ostype", osType);
    },

    /**
     * The operating system version currently running on the device.
     * <p>
     * The following symbols are supported:
     * <p>
     * &gt;, &gt;=, &lt;, &lt;=
     * <p>
     * For example:
     * <p>
     * osVersion("&gt;4.0")
     * <p>
     * osVersion("&gt;=4.1")
     * @param {string} [osVersion] When provided, this method acts as a setter and sets the osVersion value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored osVersion value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.Device#
     */
    osVersion: function(osVersion) {
        if(osVersion instanceof RegExp){
            throw new Error("Regular expressions are not supported in Device description properties");
        }

        return this._simplePropertyHandler("osversion", osVersion);
    },

    /**
     * The device manufacturer name
     * @param {string} [manufacturer] When provided, this method acts as a setter and sets the manufacturer value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored manufacturer value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.Device#
     */
    manufacturer: function(manufacturer) {
        if(manufacturer instanceof RegExp){
            throw new Error("Regular expressions are not supported in Device description properties");
        }

        return this._simplePropertyHandler("manufacturer", manufacturer);
    },

    /**
     * The device model name
     * @param {string} [model] When provided, this method acts as a setter and sets the model value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored model value;
     * otherwise it returns 'this' for use with the builder pattern.
     * @memberof Mobile.Device#
     */
    model: function(model) {
        if(model instanceof RegExp){
            throw new Error("Regular expressions are not supported in Device description properties");
        }

        return this._simplePropertyHandler("model", model);
    }

});

var DeviceLabOperationCommandMap = {
    OpenViewer: LabCommandTypes.ViewerCommand,
    CloseViewer: LabCommandTypes.ViewerCommand,
    IsViewerOpen: LabCommandTypes.ViewerCommand,
    Release: LabCommandTypes.LabManageCommand,
    UploadMedia: LabCommandTypes.MobileDeviceCommand,
    GetVitals: LabCommandTypes.MobileDeviceCommand
};

//Consts
var homeWiredName = "Home";
var backWiredName = "Back";
var menuWiredName = "Menu";
var recentAppsWiredName = "RecentApps";
var setOrientationWiredName = "SetOrientation";
var touchWiredName = "Touch";
var swipeWiredName = "Swipe";
var simulateGPSWiredName = "GPSRelocate";
var simulateIncomingCallWiredName = "IncomingCall";
var simulateIncomingSMSWiredName = "IncomingSMS";
var networkVirtualizationStartWiredName = "StartNV";
var networkVirtualizationEndWiredName = "StopNV";
var shakeWiredName = "Shake";
var openViewerWiredName = "OpenViewer";
var closeViewerWiredName = "CloseViewer";
var isViewerOpenWiredName = "IsViewerOpen";
var getLogsWiredName = "GetLogs";
var getVitalsWiredName = "GetVitals";
var unlockWiredName = "Release";
var sendStringWiredName = "SendString";
var sendKeyWiredName = "SendKey";
var uploadMediaWiredName = "UploadMedia";

/**
 * Device orientation settings.
 * @class DeviceTO
 * @memberof Mobile
 * @constructor
 * @extends TestObjectBase
 * @mixes Mobile.DeviceTOBehavior._properties
 * @mixes Mobile.DeviceTOBehavior._methods
 */
function DeviceTO(session, description, cookie) {
    description = description || Device();
    this._logger = new Logger("Device");
    this._cookie = cookie;
    this._init("Device",session,description);

    this._executor = new TestObjectLabExecutor(this, DeviceLabOperationCommandMap);

    this._mergeBehavior(DeviceTOBehavior);

}

/**
 * @memberof Mobile
 * @ignore
 */
var DeviceTOBehavior = {
    _applicationInfo: null,

    /**
     * @ignore
     * @memberof Mobile.DeviceTOBehavior
     */
    _properties: {
        /**
         * Returns the ID of the device in the UFT Mobile lab.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the ID of the device in the UFT Mobile lab.
         * @memberof Mobile.DeviceTO#
         */
        id: {

        },

        /**
         * Returns the model name of the device.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the model name of the device.
         * @memberof Mobile.DeviceTO#
         */
        model: {
            wiredName: "Model"
        },

        /**
         * Returns the manufacturer of the device.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the manufacturer of the device.
         * @memberof Mobile.DeviceTO#
         */
        manufacturer: {
            wiredName: "Manufacturer"
        },

        /**
         * Returns the operating system currently running on the device.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the operating system currently running on the device.
         * @memberof Mobile.DeviceTO#
         */
        osType: {

        },

        /**
         * Returns the version of the operating system currently running on the device.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the version of the operating system currently running on the device.
         * @memberof Mobile.DeviceTO#
         */
        osVersion: {

        },

        /**
         * Returns the name of the device as defined in UFT Mobile.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the name of the device as defined in UFT Mobile.
         * @memberof Mobile.DeviceTO#
         */
        name: {

        },

        /**
         * Returns the source of the device.
         * @function
         * @returns {Promise<Mobile.DeviceSource>} a promise that is fulfilled with the source of the device.
         * @memberof Mobile.DeviceTO#
         */
        source: {
            type: 'enum',
            enumType: DeviceSource,
            enumName: 'DeviceSource',
            getter: function () {
                return this._getROProperty("source", arguments).then(DeviceSource._valueToEnumKey);
			}
        }
    },

    /**
     * @ignore
     * @memberof Mobile.DeviceTOBehavior
     */
    _methods: {
        /**
         * Presses the device's Home button (Android only).
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the Home button is pressed.
         * @memberof Mobile.DeviceTO#
         */
        home: {
            wiredName: homeWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, homeWiredName);
            }
        },

        /**
         * Presses the device's Back button (Android only).
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the Back button is pressed.
         * @memberof Mobile.DeviceTO#
         */
        back: {
            wiredName: backWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, backWiredName);
            }
        },

        /**
         * Presses the device's Menu button (Android only).
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the Menu button is pressed.
         * @memberof Mobile.DeviceTO#
         */
        menu: {
            wiredName: menuWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, menuWiredName);
            }
        },

        /**
         * Opens the list of recent applications (Android only).
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the list of recent applications is opened.
         * @memberof Mobile.DeviceTO#
         */
        recentApps: {
            wiredName: recentAppsWiredName,
            exec: function () {
                return this._executeWithEvents(arguments, recentAppsWiredName);
            }
        },

        /**
         * Sets the device orientation.
         * @function
         * @param {Mobile.Device.DeviceOrientation} orientation The orientation to set. You can use the {@link Mobile.Device.DeviceOrientation|DeviceOrientation} object or just pass 'portrait' or 'landscape' as a string.
         * @returns {Promise<void>} a promise that is fulfilled when the device orientation is set.
         * @memberof Mobile.DeviceTO#
         */
        setOrientation: {
            wiredName: setOrientationWiredName,
            exec: function (orientation) {
                return this._executeWithEvents(arguments, setOrientationWiredName, DeviceOrientation._convert(orientation));
            }
        },

        /*jshint eqnull:true */
        /**
         * Touches the device at the specified coordinates (Android only).
         * @function
         * @param {number} x The x coordinate to touch.
         * @param {number} y The y coordinate to touch.
         * @returns {Promise<void>} a promise that is fulfilled when the touch operation is performed.
         * @memberof Mobile.DeviceTO#
         */
        touch: {
            wiredName: touchWiredName,
            exec: function (x, y) {
                if (x == null || y == null)
                    throw new Error("You must pass x and y (number) as arguments");

                return this._executeWithEvents(arguments, touchWiredName, Convert.toNumber(x), Convert.toNumber(y));
            }
        },

        /**
         * Swipes the device in the specified direction starting from the specified location.
         * @function
         * @param {SwipeDirection} direction The direction of the swipe (the SwipeDirection object can be used).
         * @param {Location} [startLocation] The coordinates from which to start the swipe. Default value: the leading edge of the element or device.
         * @returns {Promise<void>} a promise that is fulfilled when the swipe operation is performed.
         * @memberof Mobile.DeviceTO#
         */
        swipe: {
            wiredName: swipeWiredName,
            exec: function (direction, startLocation) {
                if (direction == null) {
                    throw new Error("direction must be provided");
                }

                if (startLocation == null) {
                    return this._executeWithEvents(arguments, swipeWiredName, SwipeDirection._convert(direction));
                }

                return this._executeWithEvents(arguments, swipeWiredName, SwipeDirection._convert(direction), RectLocation(startLocation));
            }
        },

        /**
         * Simulates a change in the device's GPS location (Android only).
         * @function
         * @param {number} latitude The latitude coordinate of the location.
         * @param {number} longitude The longitude coordinate of the location.
         * @returns {Promise<void>} a promise that is fulfilled when the GPS location is changed.
         * @memberof Mobile.DeviceTO#
         */
        simulateGPS: {
            wiredName: simulateGPSWiredName,
            exec: function (latitude, longitude) {
                if (latitude == null || longitude == null) {
                    throw new Error("latitude and longitude must be provided");
                }

                return this._executeWithEvents(arguments, simulateGPSWiredName, Convert.toNumber(latitude), Convert.toNumber(longitude));
            }
        },

        /**
         * Simulates an incoming call.
         * @function
         * @param {string} from The caller ID of the incoming call.
         * @param {object} [eventResponseArgs] The simulated user response to the incoming call that interrupts the flow of the application.
         * @param {number} [eventResponseArgs.timeInBackground = 10] The time (in seconds) that the application remains in the background while the event is being handled.
         * @param {boolean}   [eventResponseArgs.respondToEvent = false] Indicates whether there is a response to the simulated event. Default: false.
         * @returns {Promise<void>} a promise that is fulfilled when the call is simulated.
         * @memberof Mobile.DeviceTO#
         */
        simulateIncomingCall: {
            wiredName: simulateIncomingCallWiredName,
            exec: function(from, eventResponseArgs) {
                if(from == null) {
                    throw new Error("from must be provided");
                }

                if(eventResponseArgs == null) {
                    return this._executeWithEvents(arguments, simulateIncomingCallWiredName, from);
                }

                var eventArgs = this._prepareEventResponseArgs(eventResponseArgs);

                return this._executeWithEvents(arguments, simulateIncomingCallWiredName, from, eventArgs.timeInBackground, eventArgs.respondToEvent);
            }
        },

        /**
         * Simulates an incoming SMS.
         * @function
         * @param {string} from The caller ID of the incoming SMS message.
         * @param {string} text The text of the incoming SMS message.
         * @param {object} [eventResponseArgs] The simulated user response to the incoming SMS that interrupts the flow of the application.
         * @param {number} [eventResponseArgs.timeInBackground = 10] The time (in seconds) that the application remains in the background while the event is being handled.
         * @param {boolean} [eventResponseArgs.respondToEvent = false] Indicates whether there is a response to the simulated event. Default: false.
         * @returns {Promise<void>} a promise that is fulfilled when the incoming SMS is simulated.
         * @memberof Mobile.DeviceTO#
         */
        simulateIncomingSMS: {
            wiredName: simulateIncomingSMSWiredName,
            exec: function(from, text, eventResponseArgs) {
                if(from == null || text == null) {
                    throw new Error("from and text arguments must be provided");
                }

                if(eventResponseArgs == null) {
                    return this._executeWithEvents(arguments, simulateIncomingSMSWiredName, from, text);
                }

                var eventArgs = this._prepareEventResponseArgs(eventResponseArgs);

                return this._executeWithEvents(arguments, simulateIncomingSMSWiredName, from, text, eventArgs.timeInBackground, eventArgs.respondToEvent);
            }
        },

        /**
         * Starts the Network Virtualization service using the specified network profile.
         * @function
         * @param {string} profile The name of the profile containing the conditions that you want to apply to the virtualized network. The profile must be set up in Network Virtualization.
         * @returns {Promise<void>} a promise that is fulfilled when the Network Virtualization service is started.
         * @memberof Mobile.DeviceTO#
         */
        networkVirtualizationStart: {
            wiredName: networkVirtualizationStartWiredName,
            exec: function(profile) {
                if(profile == null) {
                    throw new Error("profile must be provided");
                }

                return this._executeWithEvents(arguments, networkVirtualizationStartWiredName, profile);
            }
        },

        /**
         * Stops the Network Virtualization service.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the Network Virtualization service is stopped.
         * @memberof Mobile.DeviceTO#
         */
        networkVirtualizationEnd: {
            wiredName: networkVirtualizationEndWiredName,
            exec: function() {
                return this._executeWithEvents(arguments, networkVirtualizationEndWiredName);
            }
        },

        /**
         * Performs a Shake gesture on the device (iOS only).
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the Shake gesture is performed.
         * @memberof Mobile.DeviceTO#
         */
        shake: {
            wiredName: shakeWiredName,
            exec: function() {
                return this._executeWithEvents(arguments, shakeWiredName);
            }
        },

        /**
         * Opens an RDP window for the device. <br/>
         * Note: If a window for the device is open already, another window will not be opened.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when an RDP window for the device is opened.
         * @memberof Mobile.DeviceTO#
         */
        openViewer: {
            wiredName: openViewerWiredName,
            exec: function() {
                return this._executeWithEvents(arguments, openViewerWiredName);
            }
        },

        /**
         * Closes the RDP window for the device (if open).<br/>
         * Note: Calling this method does not release the device if it is locked.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the RDP window for the device is closed.
         * @memberof Mobile.DeviceTO#
         */
        closeViewer: {
            wiredName: closeViewerWiredName,
            exec: function() {
                return this._executeWithEvents(arguments, closeViewerWiredName);
            }
        },

        /**
         * Checks if the RDP window for the device is open.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether an RDP window for the device is open.
         * @memberof Mobile.DeviceTO#
         */
        isViewerOpen: {
            wiredName: isViewerOpenWiredName,
            exec: function() {
                return this._executeWithEvents(arguments, isViewerOpenWiredName);
            }
        },

        /**
         * Returns the device logs collected since the device was locked.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the device logs collected since the device was locked.
         * @memberof Mobile.DeviceTO#
         */
        getLogs: {
            wiredName: getLogsWiredName,
            exec: function() {
                return this._executeWithEvents(arguments, getLogsWiredName);
            }
        },

        /**
         * Returns an accumulation of the device vitals from the time the device was locked, in one second intervals.
         * @function
         * @returns {Promise<string>} a promise that is fulfilled with the device vitals collected since the device was locked.
         * @memberof Mobile.DeviceTO#
         */
        getVitals: {
            wiredName: getVitalsWiredName,
            exec: function() {
                return this._executeWithEvents(arguments, getVitalsWiredName);
            }
        },

        /**
         * Unlocks the device in UFT Mobile if the device is not locked by another device object.
         * This method also closes the RDP window.
         * @function
         * @returns {Promise<void>} a promise that is fulfilled when the device is unlocked.
         * @memberof Mobile.DeviceTO#
         */
        unlock: {
            wiredName: unlockWiredName,
            exec: function() {
                return this._executeWithEvents(arguments, unlockWiredName);
            }
        },

        /**
         * Simulates entering text (a string) using the device keyboard, with the option to send each of the string characters in intervals of n milliseconds.
         * @function
         * @param {string} text The text to send to the device.
         * @param {number} [interval] The time (in milliseconds) to wait before injecting each subsequent character. The value must be between 200 and 3000, or 0 (default), otherwise an exception is thrown.
         * @returns {Promise<void>} a promise that is fulfilled when the sendString operation is performed.
         * @memberof Mobile.DeviceTO#
         */
        sendString: {
            wiredName: sendStringWiredName,
            exec: function (text, interval) {
                if (text == null) {
                    throw new Error("text must be provided");
                }

                if (interval == null) {
                    return this._executeWithEvents(arguments, sendStringWiredName, text);
                }

                return this._executeWithEvents(arguments, sendStringWiredName, text, interval);
            }
        },

        /**
         * Simulates pressing a special key in the device keyboard, with the option to define the time to keep the key pressed.
         * @function
         * @param {Mobile.Device.Keys} key The key to be pressed.
         * @param {number} [duration] The time (in milliseconds) to keep the key pressed. The default is 0 (zero).
         * @returns {Promise<void>} a promise that is fulfilled when the sendKey operation is performed.
         * @memberof Mobile.DeviceTO#
         */
        sendKey: {
            wiredName: sendKeyWiredName,
            exec: function (key, duration) {
                if (key == null) {
                    throw new Error("key must be provided");
                }

                if (duration == null) {
                    return this._executeWithEvents(arguments, sendKeyWiredName, _convertKeyToNative(key));
                }

                return this._executeWithEvents(arguments, sendKeyWiredName, _convertKeyToNative(key), duration);
            }
        },

        /**
         * Simulate pressing a custom device key.
         * @function
         * @param {string} keyId The ID of the key as defined by the device manufacturer.
         * @param {number} [duration] The time (in milliseconds) to keep the key pressed. The default is 0 (zero).
         * @returns {Promise<void>} a promise that is fulfilled when the sendCustomKey operation is performed.
         * @memberof Mobile.DeviceTO#
         */
        sendCustomKey: {
            wiredName: sendKeyWiredName,
            exec: function (keyId, duration) {
                if (keyId == null) {
                    throw new Error("keyId must be provided");
                }

                if (duration == null) {
                    return this._executeWithEvents(arguments, sendKeyWiredName, keyId);
                }

                return this._executeWithEvents(arguments, sendKeyWiredName, keyId, duration);
            }
        },

        /*jshint eqnull:true */
        /**
         * Upload a media file to the device for camera or video simulation, with the option to save the file. The files are deleted when the device is released. 
         * @function
         * @param {string} mediaUrl The URL, including the extention, of the media file (image or video). Supported formats: JPG, GIF, PNG, BMP, TIF (iOS only), MP4, 3GP (Android only), MKV (Android only), MOV (iOS only), M4V (iOS only).
         * @param {string} mediaId The unique ID of the uploaded media. The ID is used to start the simulation using Application.startCameraSimulationModeWiredName.
         * @param {Object} [options] Upload options.
         * @param {boolean} [options.saveToPicturesFolder] Boolean indicating whether the uploaded media file is saved to the Pictures folder or not.
         * @returns {Promise<void>} a promise that is fulfilled when the uploadMediaUrl operation is performed.
         * @memberof Mobile.DeviceTO#
         */
        uploadMediaUrl: {
            wiredName: uploadMediaWiredName,
            exec: function (mediaUrl, mediaId, options) {

                var saveToPicturesFolder = options && (options.saveToPicturesFolder != null) ? Convert.toBool(options.saveToPicturesFolder) : false;
                return this._executeWithEvents(arguments, uploadMediaWiredName, mediaUrl, mediaId, saveToPicturesFolder);
            }
        },

        /*jshint eqnull:true */
        /**
         * Upload the media object data to the device for camera or video simulation, with the option to save the file. The files are deleted when the device is released.
         * @function
         * @param {Object} mediaInfo The MediaInfo of the media file to upload.
         * @param {string} mediaInfo.Base64Data - A base64 string representation of the media file (image or video).
         * @param {string} mediaInfo.MimeType - The mime type of the media file. Possible values: <BR>
         * For BMP media type: "image/bmp" <BR>
         * For GIF media type: "image/gif" <BR>
         * For JPG media type: "image/jpeg" <BR>
         * For PNG media type: "image/png" <BR>
         * For TIF (iOS only) media type: "image/tiff" <BR>
         * For MP4 media type: "video/mp4" <BR>
         * For 3GP (Android only) media type: "video/3gpp" <BR>
         * For MKV (Android only) media type: "video/x-matroska" <BR>
         * For MOV (iOS only) media type: "video/quicktime" <BR>
         * For M4V (iOS only) media type: "video/mp4" <BR>
         * @param {string} mediaId The unique ID of the uploaded media. The ID is used to start the simulation using Application.startCameraSimulationMode.
         * @param {Object} [options] Upload options.
         * @param {boolean} [options.saveToPicturesFolder] Boolean Indicates whether the uploaded media file is saved to the Pictures folder or not.
         * @returns {Promise<void>} a promise that is fulfilled when the uploadMedia operation is performed.
         * @memberof Mobile.DeviceTO#
         */
        uploadMedia: {
            wiredName: uploadMediaWiredName,
            exec: function (mediaInfo, mediaId, options){
                if (mediaInfo == null)
                    throw new Error("mediaInfo value cannot be null");

                if (mediaInfo.Base64Data == null)
                    throw new Error("Base64Data value cannot be null");

                if (mediaInfo.MimeType == null)
                    throw new Error("MimeType value cannot be null");

                mediaInfo.Type = "Media";
                var saveToPicturesFolder = options && (options.saveToPicturesFolder != null) ? Convert.toBool(options.saveToPicturesFolder) : false;
                return this._executeWithEvents(arguments, uploadMediaWiredName, mediaInfo, mediaId, saveToPicturesFolder);

            }
        },

        _canParticipateInOptimizedPath: function() {
            return false;
        }


    },

    _helpers: {
        _prepareEventResponseArgs: function (argsObj) {
            return {
                timeInBackground: argsObj.timeInBackground != null ?
                    Convert.toNumber(argsObj.timeInBackground) : 10,
                respondToEvent: argsObj.respondToEvent != null ?
                    Convert.toBool(argsObj.respondToEvent) : false
            };
        },
        _getApplicationInfo: function () {
            return this._applicationInfo;
        },
        _release: function () {
            return this.unlock();
        }
    }
};

/**
 * @ignore
 */
ObjectUtils.inherit(DeviceTO,TestObjectBase,{

});

//remove the index property for the device description
DeviceDescription.prototype.index = undefined;

//remove the vri property for the device description
DeviceDescription.prototype.vri = undefined;

module.exports.DeviceOrientation = DeviceOrientation;
module.exports.DeviceSource = DeviceSource;
module.exports.Keys = Keys;
module.exports.Device = Device;
module.exports.DeviceTO = DeviceTO;
module.exports.DeviceDescription = DeviceDescription;
