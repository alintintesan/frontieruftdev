// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/24/2015.
 */

var Core = require("leanft.sdk.core");
var ObjUtils = Core.ObjectUtils;
var UiObjectBase = require("./uiobject_base").UiObjectBaseTestObject;
var UiObjectBaseDesc = require("./uiobject_base").UiObjectBaseDescription;
var Behaviors = require("./behaviors.js");
var Convert = Core.Convert;
var Location = Core.Location;

/**
 * @ignore
 * @memberof Mobile
 */
var ViewDescriptionBehavior = {
    /**
     * Indicates whether the view can be scrolled.
     * @param {boolean} [isScrollable] When provided, this method acts as a setter and sets the isScrollable value.
     * @returns {boolean | Description} If no parameter is provided, the method acts as a getter and returns the current stored isScrollable value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    isScrollable: function(isScrollable){
        return this._propertyHandler("isScrollable", isScrollable, Convert.toBool);
    }
};

/**
 * The description of a view test object in a mobile application.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {View} the description object that was initialized.
 * @constructor
 * @memberof Mobile
 * @extends Mobile.UiObjectBaseDescription
 * @mixes Mobile.ViewDescriptionBehavior
 */
function View(props) {
    var viewDes = new UiObjectBaseDesc("View");

    ObjUtils.extend(viewDes, ViewDescriptionBehavior);

    viewDes._defineByPropertyBag(props);

    return viewDes;
}


/**
 * A view object in a mobile application. (iOS only)
 * @class ViewTO
 * @memberof Mobile
 * @constructor
 * @extends Mobile.UiObjectBaseTestObject
 * @mixes Mobile.ScrollableTOBehavior._methods
 * @mixes Mobile.ViewTOBehavior._properties
 * @mixes Mobile.ViewTOBehavior._methods
 */
function ViewTO(session, description) {
    description = description || View();
    var viewTO = new UiObjectBase("MobileView", session, description);

    viewTO._mergeBehavior(Behaviors.ScrollableTOBehavior);
    viewTO._mergeBehavior(ViewTOBehavior);

    return viewTO;
}

//Consts
var zoomWiredName = "Zoom";

/**
 * @memberof Mobile
 * @ignore
 */
var ViewTOBehavior = {
    /**
     * @memberof Mobile.ViewTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * Indicates whether the view can be scrolled.
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether the view can be scrolled.
         */
        isScrollable: {

        }
    },
    /**
     * @ignore
     * @memberof Mobile.ViewTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Zooms to the specified scale.
         * @function
         * @param {Location} focalPoint The center location of the zoom.
         * @param {number} scale The zoom scale (0.5 to reduce to half, 2 to double the size, and so on).
         * @returns {Promise<void>} a promise that is fulfilled after the zoom occurred.
         */
        zoom: {
            wiredName: zoomWiredName,
            exec: function (focalPoint, scale) {
                if (focalPoint == null || scale == null)
                    throw new Error("You must pass focalPoint and scale to zoom() method");

                return this._executeWithEvents(arguments, zoomWiredName, Location(focalPoint), Convert.toNumber(scale));
            }
        }
    }
};

module.exports.View = View;
module.exports.ViewTO = ViewTO;