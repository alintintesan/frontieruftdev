// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/24/2015.
 */

var UiObjectBase = require("./uiobject_base").UiObjectBaseTestObject;
var UiObjectBaseDesc = require("./uiobject_base").UiObjectBaseDescription;
var Convert = require("leanft.sdk.core").Convert;

/**
 * The description of a Toggle test object in a mobile application.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {Toggle} the description object that was initialized.
 * @constructor
 * @memberof Mobile
 * @extends Mobile.UiObjectBaseDescription
 */
function Toggle(props) {
    var toggleDes = new UiObjectBaseDesc("Toggle");

    toggleDes._defineByPropertyBag(props);

    return toggleDes;
}

/**
 * A Toggle object in a mobile application.
 * @class ToggleTO
 * @memberof Mobile
 * @constructor
 * @extends Mobile.UiObjectBaseTestObject
 * @mixes Mobile.ToggleTOBehavior._methods
 */
function ToggleTO(session, description) {
    description = description || Toggle();
    var toggleTO = new UiObjectBase("MobileToggle", session, description);

    toggleTO._mergeBehavior(ToggleTOBehavior);

    return toggleTO;
}

//Consts
var setWiredName = "Set";

/**
 * @memberof Mobile
 * @ignore
 */
var ToggleTOBehavior = {
    /**
     * @ignore
     * @memberof Mobile.ToggleTOBehavior
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the state of the object, boolean value expected.
         * Remark: For Android toggles (where Class="toggleButton"), use setByName(string) giving the state to set as the parameter.
         * @function
         * @param {boolean} state Indicates whether this toggle will be checked.
         * @returns {Promise<void>} a promise that is fulfilled after the toggle operation has occurred.
         */
        set: {
            wiredName: setWiredName,
            exec: function (state) {
                if (state == null)
                    throw new Error("You must pass state to set() method");

                return this._executeWithEvents(arguments, setWiredName, Convert.toBool(state) ? "on" : "off");
            }
        },
        /*jshint eqnull:true */
        /**
         * Sets the state of the object by name.
         * @function
         * @param {string} name Possible values: the states defined in the toggle object.
         * @returns {Promise<void>} a promise that is fulfilled after the toggle operation has occurred.
         */
        setByName: {
            wiredName: setWiredName,
            exec: function (name) {
                if (name == null)
                    throw new Error("You must pass name to set() method");

                return this._executeWithEvents(arguments, setWiredName, Convert.toString(name));
            }
        }
    }
};

module.exports.Toggle = Toggle;
module.exports.ToggleTO = ToggleTO;


