// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/22/2015.
 */

var ObjUtils = require("leanft.sdk.core").ObjectUtils;
var UiObjectBase = require("./uiobject_base").UiObjectBaseTestObject;
var UiObjectBaseDesc = require("./uiobject_base").UiObjectBaseDescription;
var Behaviors = require("./behaviors.js");
var Convert = require("leanft.sdk.core").Convert;

/**
 * The description of a mobile Table test object.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {Table} the description object that was initialized.
 * @constructor
 * @memberof Mobile
 * @extends Mobile.UiObjectBaseDescription
 */
function Table(props) {
    var tableDes = new UiObjectBaseDesc("Table");

    tableDes._defineByPropertyBag(props);

    return tableDes;
}

/**
 * A table object in a mobile application.
 * @class TableTO
 * @memberof Mobile
 * @constructor
 * @extends Mobile.UiObjectBaseTestObject
 * @mixes Mobile.ScrollableTOBehavior._methods
 * @mixes Mobile.TableTOBehavior._methods
 */
function TableTO(session, description) {
    description = description || Table();
    var tableTO = new UiObjectBase("MobileList", session, description);

    tableTO._mergeBehavior(Behaviors.ScrollableTOBehavior);
    tableTO._mergeBehavior(TableTOBehavior);

    return tableTO;
}

//Consts
var scrollWiredName = "Scroll";
var selectWiredName = "Select";
var insertWiredName = "Insert";
var removeWiredName = "Delete";
var moveItemWiredName = "MoveItem";

/**
 * @memberof Mobile
 * @ignore
 */
var TableTOBehavior = {
    /**
     * @ignore
     * @memberof Mobile.TableTOBehavior
     */
    _methods: {
        /**
         * Scrolls to a specified item in the table.
         * @function
         * @param {number} item The numeric index of the item to scroll to.
         * @returns {Promise<void>} a promise that is fulfilled after scrolling to the specified item in the table.
         */
        scroll: {
            wiredName: scrollWiredName,
            exec: function (item) {
                return this._executeWithEvents(arguments, scrollWiredName, Convert.toNumber(item));
            }
        },
        /**
         * Scrolls to a specified item in the specified section of the table.
         * @function
         * @param section The numeric index of the section containing the item to scroll to.
         * @param {number} item The numeric index of the item to scroll to.
         * @returns {Promise<void>} a promise that is fulfilled after scrolling to the specified item in the specified section of the table.
         */
        scrollBySection: {
            wiredName: scrollWiredName,
            exec: function (section, item) {
                return this._executeWithEvents(arguments, scrollWiredName, Convert.toNumber(item), Convert.toNumber(section));
            }
        },
        /**
         * Selects an item in the table.
         * @function
         * @param {number} item The numeric index of the item to select.
         * @returns {Promise<void>} a promise that is fulfilled after selecting the specified item in the table.
         */
        select: {
            wiredName: selectWiredName,
            exec: function (item) {
                return this._executeWithEvents(arguments, selectWiredName, Convert.toNumber(item));
            }
        },
        /**
         * Selects an item in a section of the table.
         * @function
         * @param section The numeric index of the section containing the item to select.
         * @param {number} item The numeric index of the item to select.
         * @returns {Promise<void>} a promise that is fulfilled after selecting the specified item in the specified section of the table.
         */
        selectBySection: {
            wiredName: selectWiredName,
            exec: function (section, item) {
                return this._executeWithEvents(arguments, selectWiredName, Convert.toNumber(item), Convert.toNumber(section));
            }
        },
        /**
         * Inserts an item at a specified location in the table (iOS Only).
         * @function
         * @param {number} item The numeric index of the location to insert the item.
         * @returns {Promise<void>} a promise that is fulfilled after the item is inserted.
         */
        insert: {
            wiredName: insertWiredName,
            exec: function (item) {
                return this._executeWithEvents(arguments, insertWiredName, Convert.toNumber(item));
            }
        },
        /**
         * Inserts an item at the specified location in the table (iOS only).
         * @function
         * @param section The numeric index of the section into which to insert the specified item.
         * @param {number} item The numeric index of the location for the new item within the section.
         * @returns {Promise<void>} a promise that is fulfilled after inserting the specified item into the specified section of the table.
         */
        insertBySection: {
            wiredName: insertWiredName,
            exec: function (section, item) {
                return this._executeWithEvents(arguments, insertWiredName, Convert.toNumber(item), Convert.toNumber(section));
            }
        },
        /**
         * Deletes a specified item from the table (iOS only).
         * @function
         * @param {number} item The numeric index of the item to delete.
         * @returns {Promise<void>} a promise that is fulfilled after the item is deleted.
         */
        remove: {
            wiredName: removeWiredName,
            exec: function (item) {
                return this._executeWithEvents(arguments, removeWiredName, Convert.toNumber(item));
            }
        },
        /**
         * Deletes a specified item or section in the table (iOS Only).
         * @function
         * @param {number} section The numeric index of the section from which to delete the specified item.
         * @param {number} item The numeric index of the item to delete.
         * @returns {Promise<void>} a promise that is fulfilled after deleting the specified item from the specified section of the table.
         */
        removeBySection: {
            wiredName: removeWiredName,
            exec: function (section, item) {
                return this._executeWithEvents(arguments, removeWiredName, Convert.toNumber(item), Convert.toNumber(section));
            }
        },
        /**
         * Moves an item or section in the table (iOS only).
         * @function
         * @param {number} srcItem The numeric index of the item to move.
         * @param {number} destItem The numeric index of the new location for the item.
         * @returns {Promise<void>} a promise that is fulfilled after the item has moved.
         */
        moveItem: {
            wiredName: moveItemWiredName,
            exec: function (srcItem, destItem) {
                return this._executeWithEvents(arguments, moveItemWiredName, Convert.toNumber(srcItem), Convert.toNumber(destItem));
            }
        },
        /**
         * Moves an item or section in the table (iOS only).
         * @function
         * @param {number} srcSection The numeric index of the section from which to move the specified srcItem.
         * @param {number} srcItem The numeric index of the item to move.
         * @param {number} destSection The numeric index of the section in which to place the specified destItem
         * @param {number} destItem The numeric index of the new location for the item.
         * @returns {Promise<void>} a promise that is fulfilled after the item or section has moved.
         */
        moveItemBySection: {
            wiredName: moveItemWiredName,
            exec: function (srcSection, srcItem, destSection, destItem) {
                return this._executeWithEvents(arguments, moveItemWiredName, Convert.toNumber(srcItem), Convert.toNumber(destItem), Convert.toNumber(srcSection), Convert.toNumber(destSection));
            }
        }
    }
};

module.exports.Table = Table;
module.exports.TableTO = TableTO;

