// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created  on 12/21/2015.
 */

var ObjUtils = require("leanft.sdk.core").ObjectUtils;
var UiObjectBase = require("./uiobject_base").UiObjectBaseTestObject;
var UiObjectBaseDesc = require("./uiobject_base").UiObjectBaseDescription;
var Convert = require("leanft.sdk.core").Convert;
var Behaviors = require("./behaviors.js");

/**
 * @ignore
 * @memberof Mobile
 */
var EditDescriptionBehavior = {
    /**
     * The object's hint.
     * @param {string} [hint] When provided, this method acts as a setter and sets the hint property value.
     * @returns {string | Description} If no parameter is provided, the method acts as a getter and returns the current stored hint value;
     * otherwise it returns 'this' for use with the builder pattern.
     */
    hint: function(hint){
        return this._propertyHandler("hint", hint);
    }
};

/**
 * The description of an EditField test object in a mobile application.
 * @param {Object} [props] Initializes the description using the supplied property bag.
 * @returns {Edit} the description object that was initialized.
 * @class
 * @memberof Mobile
 * @extends Mobile.UiObjectBaseDescription
 * @mixes Mobile.EditDescriptionBehavior
 */
function Edit(props) {
    var editFieldDes = new UiObjectBaseDesc("EditField");

    ObjUtils.extend(editFieldDes, EditDescriptionBehavior);

    editFieldDes._defineByPropertyBag(props);

    return editFieldDes;
}

/**
 * An edit object in a mobile application.
 * @class EditFieldTO
 * @memberof Mobile
 * @constructor
 * @memberof Mobile
 * @extends Mobile.UiObjectBaseTestObject
 * @mixes Mobile.SetFocusTOBehavior._methods
 * @mixes Mobile.EditFieldTOBehavior._properties
 * @mixes Mobile.EditFieldTOBehavior._methods
 */
function EditFieldTO(session, description) {
    description = description || Edit();
    var editFieldTO = new UiObjectBase("MobileEdit", session, description);

    editFieldTO._mergeBehavior(Behaviors.SetFocusTOBehavior);
    editFieldTO._mergeBehavior(EditFieldTOBehavior);

    return editFieldTO;
}

//Consts
var setTextWiredName = "Set";
var setSecureWiredName = "SetSecure";

/**
 * @memberof Mobile
 * @ignore
 */
var EditFieldTOBehavior = {
    /**
     * @memberof Mobile.EditFieldTOBehavior
     * @ignore
     */
    _properties: {
        /**
         * Indicates whether this mobile edit object is a password box (Android only).
         * @function
         * @returns {Promise<boolean>} a promise that is fulfilled with an indication of whether this mobile edit object is a password box (Android only).
         */
        isPassword: {

        }
    },

    /**
     * @memberof Mobile.EditFieldTOBehavior
     * @ignore
     */
    _methods: {
        /*jshint eqnull:true */
        /**
         * Sets the specified text in the edit box.
         * @function
         * @param {string} text The specified text in the edit box.
         * @returns {Promise<void>} a promise that is fulfilled after the specified text in the edit box is set.
         */
        setText: {
            wiredName: setTextWiredName,
            exec: function (text) {
                if (text == null)
                    throw new Error("You must pass text to setText() method");

                return this._executeWithEvents(arguments, setTextWiredName, Convert.toString(text));
            }
        },

        /*jshint eqnull:true */
        /**
         * Sets the encoded value of this edit box. <br/>
         * Note:<br/>
         * - Generates the encoded value using the Password Encoder Utility, available from the LeanFT > Tools menu in your IDE or from the Windows Start menu.
         * - This method enables you to hide passwords displayed on the screen while running or editing a LeanFT test, but it is not intended to be a secure way to protect password information.
         * @function
         * @param {string} encodedText The encoded text to enter in this edit box.
         * @returns {Promise<void>} a promise that is fulfilled after the encoded text is set.
         */
        setSecure: {
            wiredName: setSecureWiredName,
            exec: function (encodedText) {
                if (encodedText == null)
                    throw new Error("You must pass the encodedText string to setSecure() method");

                return this._executeWithEvents(arguments, setSecureWiredName, Convert.toString(encodedText));
            }
        }
    }
};

module.exports.Edit = Edit;
module.exports.EditFieldTO = EditFieldTO;