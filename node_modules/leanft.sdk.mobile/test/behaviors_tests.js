// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
* Created on 12/21/2015.
*/

var assert = require("assert");
var sinon = require("sinon");
var Behaviors = require("../lib/behaviors.js");
var ObjectUtils = require("leanft.sdk.core").ObjectUtils;

describe("SetFocusTOBehavior",function() {
    var SetFocusTOBehavior = Behaviors.SetFocusTOBehavior;
    var setFocusTOUnderTest = SetFocusTOBehavior;

    beforeEach(function () {
        setFocusTOUnderTest = ObjectUtils.mergeTestBehavior(SetFocusTOBehavior);
        setFocusTOUnderTest._executeCommand = sinon.stub();
        setFocusTOUnderTest._executeWithEvents = function(){
            return this._executeCommand(arguments[1]);
        };
    });

    afterEach(function(){
        delete setFocusTOUnderTest._executeCommand;
    });

    describe("setFocus", function(){
        it("should execute command 'SetFocus' and pass it the correct parameters",function(){
            setFocusTOUnderTest.setFocus();
            assert(setFocusTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(setFocusTOUnderTest._executeCommand.firstCall.args.slice(0,1), ["SetFocus"]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            setFocusTOUnderTest._executeCommand.returns(getROPromise);
            var res = setFocusTOUnderTest.setFocus();
            assert.strictEqual(res,getROPromise);
        });
    });

});

describe("ScrollableTOBehavior",function() {
    var ScrollableTOBehavior = Behaviors.ScrollableTOBehavior;
    var scrollableTOUnderTest = ScrollableTOBehavior;

    beforeEach(function () {
        scrollableTOUnderTest = ObjectUtils.mergeTestBehavior(ScrollableTOBehavior);
        scrollableTOUnderTest._executeCommand = sinon.stub();
        scrollableTOUnderTest._executeWithEvents = function(){
            return this._executeCommand.apply(undefined, Array.prototype.slice.call(arguments,1));
        };
    });

    afterEach(function(){
        delete scrollableTOUnderTest._executeCommand;
    });

    describe("scrollToOffset", function(){
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                scrollableTOUnderTest.scrollToOffset();
            });
        });
        it("should throw error if only one argument passed", function(){
            assert.throws(function(){
                scrollableTOUnderTest.scrollToOffset(200);
            });
        });
        it("should throw error if x passed as null", function(){
            assert.throws(function(){
                scrollableTOUnderTest.scrollToOffset(null, 200);
            });
        });
        it("should throw error if y passed as null", function(){
            assert.throws(function(){
                scrollableTOUnderTest.scrollToOffset(200, null);
            });
        });
        it("should call _executeCommand method and pass it 'ScrollToOffset' and the correct parameters",function(){
            scrollableTOUnderTest.scrollToOffset(200, 300);
            assert(scrollableTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(scrollableTOUnderTest._executeCommand.firstCall.args.slice(0,3), ["ScrollToOffset", 200, 300]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            scrollableTOUnderTest._executeCommand.returns(getROPromise);
            var res = scrollableTOUnderTest.scrollToOffset(200, 300);
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("scrollOnePage", function(){
        var ScrollDirection = require("../lib/behaviors.js").ScrollDirection;
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                scrollableTOUnderTest.scrollOnePage();
            });
        });
        it("should throw error if pageDirection passed as null", function(){
            assert.throws(function(){
                scrollableTOUnderTest.scrollOnePage(null);
            });
        });
        it("should call _executeCommand method and pass it 'ScrollToOffset' and the correct parameters when using ScrollDirection object",function(){
            scrollableTOUnderTest.scrollOnePage(ScrollDirection.right);
            assert(scrollableTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(scrollableTOUnderTest._executeCommand.firstCall.args.slice(0,2), ["ScrollOnePage", "Right"]);
        });
        it("should call _executeCommand method and pass it 'ScrollToOffset' and the correct parameters when not using ScrollDirection object",function(){
            scrollableTOUnderTest.scrollOnePage("right");
            assert(scrollableTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(scrollableTOUnderTest._executeCommand.firstCall.args.slice(0,2), ["ScrollOnePage", "Right"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            scrollableTOUnderTest._executeCommand.returns(getROPromise);
            var res = scrollableTOUnderTest.scrollOnePage("right");
            assert.strictEqual(res,getROPromise);
        });
    });

});