// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/17/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var UiObjectBaseDesc = require("../lib/uiobject_base.js").UiObjectBaseDescription;
var UiObjectBaseTO = require("../lib/uiobject_base.js").UiObjectBaseTestObject;

describe("UiObjectBaseDescription",function() {
    var uiBaseDescObjUnderTest;
    beforeEach(function () {
        uiBaseDescObjUnderTest = new UiObjectBaseDesc();
    });

    describe("accessibilityId method",function() {
        it("should add 'accessibilityId' to _properties with the correct value when value is given",function(){
            uiBaseDescObjUnderTest.accessibilityId("#some-id");
            assert.strictEqual(uiBaseDescObjUnderTest._properties["accessibilityId"], "#some-id");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = uiBaseDescObjUnderTest.accessibilityId("#some-id");
            assert.strictEqual(result, uiBaseDescObjUnderTest);
        });
        it("should remove 'accessibilityId' from _properties when value is null",function(){
            uiBaseDescObjUnderTest._properties["accessibilityId"] = "#some-id";
            uiBaseDescObjUnderTest.accessibilityId(null);
            assert(!("accessibilityId" in uiBaseDescObjUnderTest._properties));
        });
        it("should return the value of 'accessibilityId' from _properties when value is not given",function(){
            uiBaseDescObjUnderTest._properties["accessibilityId"] = "#some-id";
            var accessibilityId = uiBaseDescObjUnderTest.accessibilityId();
            assert.equal(accessibilityId, "#some-id");
        });
    });

    describe("className method",function() {
        it("should add 'class' to _properties with the correct value when value is given",function(){
            uiBaseDescObjUnderTest.className(".some-class");
            assert.strictEqual(uiBaseDescObjUnderTest._properties["class"], ".some-class");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = uiBaseDescObjUnderTest.className(".some-class");
            assert.strictEqual(result, uiBaseDescObjUnderTest);
        });
        it("should remove 'accessibilityId' from _properties when value is null",function(){
            uiBaseDescObjUnderTest._properties["class"] = ".some-class";
            uiBaseDescObjUnderTest.className(null);
            assert(!("class" in uiBaseDescObjUnderTest._properties));
        });
        it("should return the value of 'class' from _properties when value is not given",function(){
            uiBaseDescObjUnderTest._properties["class"] = ".some-class";
            var className = uiBaseDescObjUnderTest.className();
            assert.equal(className, ".some-class");
        });
    });

    describe("container method",function() {
        it("should add 'container' to _properties with the correct value when value is given",function(){
            uiBaseDescObjUnderTest.container("some container");
            assert.strictEqual(uiBaseDescObjUnderTest._properties["container"], "some container");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = uiBaseDescObjUnderTest.container("some container");
            assert.strictEqual(result, uiBaseDescObjUnderTest);
        });
        it("should remove 'container' from _properties when value is null",function(){
            uiBaseDescObjUnderTest._properties["class"] = "some container";
            uiBaseDescObjUnderTest.container(null);
            assert(!("container" in uiBaseDescObjUnderTest._properties));
        });
        it("should return the value of 'container' from _properties when value is not given",function(){
            uiBaseDescObjUnderTest._properties["container"] = "some container";
            var container = uiBaseDescObjUnderTest.container();
            assert.equal(container, "some container");
        });
        it("should throw an Error if try to assign RegExp", function () {
            assert.throws(function () {
                uiBaseDescObjUnderTest.container(/some container pattern/);
            });
        });
    });

    describe("mobileCenterIndex method",function() {
        it("should add 'mcIndex' to _properties with the correct value when value is given",function(){
            uiBaseDescObjUnderTest.mobileCenterIndex(1);
            assert.strictEqual(uiBaseDescObjUnderTest._properties["mcIndex"], 1);
        });
        it("should return this - builder pattern when value is given",function(){
            var result = uiBaseDescObjUnderTest.mobileCenterIndex(1);
            assert.strictEqual(result, uiBaseDescObjUnderTest);
        });
        it("should remove 'mcIndex' from _properties when value is null",function(){
            uiBaseDescObjUnderTest._properties["mcIndex"] = 1;
            uiBaseDescObjUnderTest.mobileCenterIndex(null);
            assert(!("mcIndex" in uiBaseDescObjUnderTest._properties));
        });
        it("should return the value of 'mcIndex' from _properties when value is not given",function(){
            uiBaseDescObjUnderTest._properties["mcIndex"] = 1;
            var mobileCenterIndex = uiBaseDescObjUnderTest.mobileCenterIndex();
            assert.equal(mobileCenterIndex, 1);
        });
    });

    describe("resourceId method",function() {
        it("should add 'resourceId' to _properties with the correct value when value is given",function(){
            uiBaseDescObjUnderTest.resourceId("#some-id");
            assert.strictEqual(uiBaseDescObjUnderTest._properties["resourceId"], "#some-id");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = uiBaseDescObjUnderTest.resourceId("#some-id");
            assert.strictEqual(result, uiBaseDescObjUnderTest);
        });
        it("should remove 'resourceId' from _properties when value is null",function(){
            uiBaseDescObjUnderTest._properties["resourceId"] = "#some-id";
            uiBaseDescObjUnderTest.resourceId(null);
            assert(!("resourceId" in uiBaseDescObjUnderTest._properties));
        });
        it("should return the value of 'resourceId' from _properties when value is not given",function(){
            uiBaseDescObjUnderTest._properties["resourceId"] = "#some-id";
            var resourceId = uiBaseDescObjUnderTest.resourceId();
            assert.equal(resourceId, "#some-id");
        });
    });	
});

describe("UiObjectBaseTestObject",function() {
    var uiBaseTOUnderTest;
    beforeEach(function () {
        uiBaseTOUnderTest = new UiObjectBaseTO();
        sinon.stub(uiBaseTOUnderTest, "_getROProperty");
        sinon.stub(uiBaseTOUnderTest, "_getROProperties");
        sinon.stub(uiBaseTOUnderTest, "_executeCommand");
    });

    describe("accessibilityId",function(){
        it("should query the property 'accessibilityId'",function(){
            uiBaseTOUnderTest.accessibilityId();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["accessibilityId", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.accessibilityId();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("className",function(){
        it("should query the property 'class'",function(){
            uiBaseTOUnderTest.className();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["class", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.className();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("container",function(){
        it("should query the property 'container'",function(){
            uiBaseTOUnderTest.container();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["container", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.container();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isClickable",function(){
        it("should query the property 'isClickable'",function(){
            uiBaseTOUnderTest.isClickable();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["isClickable", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.isClickable();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isEnabled",function(){
        it("should query the property 'isEnabled'",function(){
            uiBaseTOUnderTest.isEnabled();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["isEnabled", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.isEnabled();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isFocused",function(){
        it("should query the property 'isFocused'",function(){
            uiBaseTOUnderTest.isFocused();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["isFocused", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.isFocused();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("isFocusable",function(){
        it("should query the property 'isFocusable'",function(){
            uiBaseTOUnderTest.isFocusable();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["isFocusable", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.isFocusable();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("nativeClass",function(){
        it("should query the property 'nativeClass'",function(){
            uiBaseTOUnderTest.nativeClass();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["nativeClass", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.nativeClass();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("resourceId",function(){
        it("should query the property 'resourceId'",function(){
            uiBaseTOUnderTest.resourceId();
            assert(uiBaseTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperty.firstCall.args, ["resourceId", arguments]);
        });
        it("should return the same promise that was returned from getROProperty",function(){
            var getROPromise = {};
            uiBaseTOUnderTest._getROProperty.returns(getROPromise);
            var res = uiBaseTOUnderTest.resourceId();
            assert.strictEqual(res,getROPromise);
        });
    });

    describe("location",function(){
        it("should query the properties 'left' and 'top'",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(["50","100"]);
                }
            };
            uiBaseTOUnderTest._getROProperties.returns(promiseMock);
            uiBaseTOUnderTest.location();
            assert(uiBaseTOUnderTest._getROProperties.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperties.firstCall.args,["left", "top"]);
        });
        it("should return size object with x and y properties as numbers",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(["50","100"]);
                }
            };
            uiBaseTOUnderTest._getROProperties.returns(promiseMock);
            var locationObj = uiBaseTOUnderTest.location();
            assert.strictEqual(locationObj.x, 50);
            assert.strictEqual(locationObj.y, 100);
        });
    });

    describe("size",function(){
        it("should query the properties 'left', 'top', 'right', 'bottom'",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(["50","100", "150", "205"]);
                }
            };
            uiBaseTOUnderTest._getROProperties.returns(promiseMock);
            uiBaseTOUnderTest.size();
            assert(uiBaseTOUnderTest._getROProperties.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._getROProperties.firstCall.args,["left", "top", "right", "bottom"]);
        });
        it("should return size object with width and height properties as numbers",function(){
            var promiseMock = {
                then: function(cb) {
                    return cb(["50","100", "150", "205"]);
                }
            };
            uiBaseTOUnderTest._getROProperties.returns(promiseMock);
            var sizeObj = uiBaseTOUnderTest.size();
            assert.strictEqual(sizeObj.width, 100); // width = right - left
            assert.strictEqual(sizeObj.height, 105); // height = bottom - top
        });
    });

    describe("tap", function(){
        it("should call the _executeCommand method and pass it the correct parameters, if no arguments passed",function(){
            uiBaseTOUnderTest.tap();
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,1),["Tap"]);
        });
        it("should call the _executeCommand method and pass it the correct parameters, if null passed",function(){
            uiBaseTOUnderTest.tap(null);
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,1),["Tap"]);
        });
        it("should throw error if the argument passed is not an object",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.tap(2);
            });
        });


        it("should call the _executeCommand method and pass it the default values, if tapArgsObj passed as empty object",function(){
            var expected = { // default tapArgs object that is sent to _executeCommand
                location: {
                    Type: "LocationFromRect",
                    Offset: {
                        Type: "Point",
                        X: 0,
                        Y: 0
                    },
                    Anchor: 2 // center after conversion
                },
                numberOfTaps: 1,
                numberOfTouchPoints: 1,
                gesture: ""
            };
            uiBaseTOUnderTest.tap({});
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,5), ["Tap", expected.location, expected.numberOfTaps, expected.numberOfTouchPoints, expected.gesture]);
        });


        it("should call the _executeCommand method and pass it the values that the user passes",function(){
            var expected = { // the non default tapArgs object that is generated with the users inputs and sent to _executeCommand
                location: {
                    Type: "LocationFromRect",
                    Offset: {
                        Type: "Point",
                        X: 20,
                        Y: 35
                    },
                    Anchor: 2 // center after conversion
                },
                numberOfTaps: 5,
                numberOfTouchPoints: 3,
                gesture: "some gesture"
            };
            uiBaseTOUnderTest.tap({ // the values that the user passes
                location: {
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "Center" // center after conversion
                },
                numberOfTaps: 5,
                numberOfTouchPoints: 3,
                gesture: "some gesture"
            });
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,5),
                ["Tap", expected.location, expected.numberOfTaps, expected.numberOfTouchPoints, expected.gesture]);
        });
    });

    describe("longPress", function(){
        it("should call the _executeCommand method and pass it the correct parameters, if no arguments passed",function(){
            uiBaseTOUnderTest.longPress();
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,1),["LongPress"]);
        });
        it("should call the _executeCommand method and pass it the correct parameters, if null passed",function(){
            uiBaseTOUnderTest.longPress();
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,1),["LongPress"]);
        });
        it("should throw error if the argument passed is not an object",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.longPress(2);
            });
        });


        it("should call the _executeCommand method and pass it default values, if longPressArgsObj passed as empty object",function(){
            var expected = { // default longPressArgs object that is sent to _executeCommand
                location: {
                    Type: "LocationFromRect",
                    Offset: {
                        Type: "Point",
                        X: 0,
                        Y: 0
                    },
                    Anchor: 2 // center after conversion
                },
                duration: 0,
                numberOfTouchPoints: 1,
                gesture: ""
            };
            uiBaseTOUnderTest.longPress({});
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,5),
                ["LongPress", expected.location, expected.duration, expected.numberOfTouchPoints, expected.gesture]);
        });


        it("should call the _executeCommand method and pass it the values that the user puts",function(){
            var expected = { // the non default longPressArgs object that is sent to _executeCommand
                location: {
                    Type: "LocationFromRect",
                    Offset: {
                        Type: "Point",
                        X: 20,
                        Y: 35
                    },
                    Anchor: 2 // center after conversion
                },
                duration: 5,
                numberOfTouchPoints: 3,
                gesture: "some gesture"
            };
            uiBaseTOUnderTest.longPress({
                location: {
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "center" // center after conversion
                },
                duration: 5,
                numberOfTouchPoints: 3,
                gesture: "some gesture"
            });
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,5),
                ["LongPress", expected.location, expected.duration, expected.numberOfTouchPoints, expected.gesture]);
        });
    });

    describe("swipe", function(){
        it("should call the _executeCommand method and pass it the correct parameters if swipeArgs object not passed",function(){
            uiBaseTOUnderTest.swipe("right");
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,2),["Swipe", "right"]);
        });
        it("should throw error if swipe direction is not passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.swipe();
            });
        });
        it("should throw error if null passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.swipe(null);
            });
        });
        it("should throw error if swipe direction passed is not a string",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.swipe(2);
            });
        });
        it("should throw error if the swipeArgs passed is not an object",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.longPress("right", 1);
            });
        });


        it("should call the _executeCommand method and pass it default values, if swipeArgs object passed as an empty object",function(){
            var expected = { // default swipeArgs object that is sent to _executeCommand
                location: {
                    Type: "LocationFromRect",
                    Offset: {
                        Type: "Point",
                        X: 0,
                        Y: 0
                    },
                    Anchor: 2 // center after conversion
                },
                gesture: ""
            };
            uiBaseTOUnderTest.swipe("right", {});
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,4),
                ["Swipe", "right", expected.location, expected.gesture]);
        });


        it("should call the _executeCommand method and pass it the values that the user puts",function(){
            var expected = { // the non default longPressArgs object that is sent to _executeCommand
                location: {
                    Type: "LocationFromRect",
                    Offset: {
                        Type: "Point",
                        X: 20,
                        Y: 35
                    },
                    Anchor: 2 // center after conversion
                },
                gesture: "some gesture"
            };
            uiBaseTOUnderTest.swipe("right", {
                location: {
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "center" // center after conversion
                },
                gesture: "some gesture"
            });
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,4),
                ["Swipe", "right", expected.location, expected.gesture]);
        });
    });

    describe("pinch", function(){
        it("should throw error if scale not passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.pinch();
            });
        });
        it("should throw error if null passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.pinch(null);
            });
        });
        it("should call the _executeCommand method and pass it the correct parameters if pinchArgs object is not passed",function(){
            uiBaseTOUnderTest.pinch(2);
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,2),["Pinch", 2]);
        });
        it("should throw error if the pinchArgs passed is not an object",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.longPress(2, 1);
            });
        });


        it("should call the _executeCommand method and pass it default values, if pinchArgs object passed as an empty object",function(){
            var expected = { // default swipeArgs object that is sent to _executeCommand
                location: {
                    Type: "Location",
                    Offset: {
                        Type: "Point",
                        X: 0,
                        Y: 0
                    },
                    Anchor: 2 // center after conversion
                },
                velocity: null,
                gesture: ""
            };
            uiBaseTOUnderTest.pinch(2, {});
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,5),
                ["Pinch", 2, expected.velocity, expected.location, expected.gesture]);
        });


        it("should call the _executeCommand method and pass it the values that the user puts",function(){
            var expected = { // the non default pinchArgs object that is sent to _executeCommand
                location: {
                    Type: "Location",
                    Offset: {
                        Type: "Point",
                        X: 20,
                        Y: 35
                    },
                    Anchor: 2 // center after conversion
                },
                velocity: 3,
                gesture: "some gesture"
            };
            uiBaseTOUnderTest.pinch(2, {
                location: {
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "Center" // center after conversion
                },
                velocity: 3,
                gesture: "some gesture"
            });
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,5),
                ["Pinch", 2, expected.velocity, expected.location, expected.gesture]);
        });
    });

    describe("panByLocations", function(){
        it("should throw error if no arguments passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByLocations();
            });
        });

        it("should throw error if only one argument passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByLocations({
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "Center" // center after conversion
                });
            });
        });

        it("should throw error if start is null",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByLocations(null, {
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "Center" // center after conversion
                });
            });
        });

        it("should throw error if end is null",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByLocations({
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "Center" // center after conversion
                }, null);
            });
        });

        it("should call the _executeCommand method and pass it the correct parameters when empty objects passed",function(){
            uiBaseTOUnderTest.panByLocations({}, {});
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,3),
                ["Pan",
                    { // start location
                        Type: "Location",
                        Offset: {
                            Type: "Point",
                            X: 0,
                            Y: 0
                        },
                        Anchor: 2
                    },
                    { // end location
                        Type: "Location",
                        Offset: {
                            Type: "Point",
                            X: 0,
                            Y: 0
                        },
                        Anchor: 2
                    }
                ]);
        });

        it("should call the _executeCommand method and pass it the correct parameters",function(){
            var start = {
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "Center"
                },
                end = {
                    offset: {
                        Type: "Point",
                        x: 25,
                        y: 40
                    },
                    anchor: "Center"
                };
            uiBaseTOUnderTest.panByLocations(start, end);
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,3),
                ["Pan",
                    { // start location
                        Type: "Location",
                        Offset: {
                            Type: "Point",
                            X: 20,
                            Y: 35
                        },
                        Anchor: 2
                    },
                    { // end location
                        Type: "Location",
                        Offset: {
                            Type: "Point",
                            X: 25,
                            Y: 40
                        },
                        Anchor: 2
                    }
                ]
            );
        });
    });



    describe("panByPoints", function(){
        it("should throw error if no arguments passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByPoints();
            });
        });

        it("should throw error if only one argument passed",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByPoints({ x: 20, y: 35 });
            });
        });

        it("should throw error if start is null",function(){
            var end = { x: 20, y: 35 };
            assert.throws(function(){
                uiBaseTOUnderTest.panByPoints(null, end);
            });
        });

        it("should throw error if end is null",function(){
            var start = { x: 20, y: 35 };
            assert.throws(function() {
                uiBaseTOUnderTest.panByPoints(start, null);
            });
        });

        it("should throw error if the panArgs passed is not an object",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByPoints({}, {}, 1);
            });
        });

        it("should throw error if the panArgs object is passed with velocity property as negative number",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByPoints({}, {}, { velocity: -1});
            });
        });

        it("should throw error if the panArgs object is passed with velocity property as 0",function(){
            assert.throws(function(){
                uiBaseTOUnderTest.panByPoints({}, {}, { velocity: 0});
            });
        });

        it("should throw error if start and end points are the same and velocity is set",function(){
            var start = {x: 20, y: 30}, end = {x: 20, y: 30},
                panArgs = { velocity: 2 };
            assert.throws(function(){
                uiBaseTOUnderTest.panByPoints(start, end, panArgs);
            });
        });

        it("should call the _executeCommand method and pass it the correct parameters if empty objects passed",function(){
            var panArgs = { gesture: "some gesture"};
            uiBaseTOUnderTest.panByPoints({}, {}, panArgs);
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,6),
                ["Pan", {Type: "Point", X: 0, Y: 0}, {Type: "Point", X: 0, Y: 0}, -9999, -9999, "some gesture"]);
        });

        it("should call the _executeCommand method and pass it the correct parameters if panArgs.velocity is not passed",function(){
            var start = {x: 20, y: 30}, end = {x: 45, y: 60},
                panArgs = { gesture: "some gesture"};
            uiBaseTOUnderTest.panByPoints(start, end, panArgs);
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,6),
                ["Pan", {Type: "Point", X: 20, Y: 30}, {Type: "Point", X: 45, Y: 60}, -9999, -9999, "some gesture"]);
        });

        it("should call the _executeCommand method and pass it the correct parameters if panArgs.velocity is null",function(){
            var start = {x: 20, y: 30}, end = {x: 45, y: 60},
                panArgs = { velocity: null, gesture: "some gesture"};
            uiBaseTOUnderTest.panByPoints(start, end, panArgs);
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,6),
                ["Pan", {Type: "Point", X: 20, Y: 30}, {Type: "Point", X: 45, Y: 60}, -9999, -9999, "some gesture"]);
        });

        it("should call the _executeCommand method and pass it the correct parameters if panArgs.velocity passed and is not null and start and end points are different",function(){
            var start = {x: 20, y: 30}, end = {x: 45, y: 60},
                panArgs = { gesture: "some gesture", velocity: 5 };
            uiBaseTOUnderTest.panByPoints(start, end, panArgs);
            assert(uiBaseTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(uiBaseTOUnderTest._executeCommand.firstCall.args.slice(0,6),
                ["Pan", {Type: "Point", X: 20, Y: 30}, {Type: "Point", X: 45, Y: 60}, 3.2009219983223995, 3.8411063979868794, "some gesture"]);
        });
    });

});