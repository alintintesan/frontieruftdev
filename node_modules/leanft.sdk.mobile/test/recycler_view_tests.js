// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/22/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var RecyclerViewTO = require("../lib/recycler_view.js").RecyclerViewTO;

describe("RecyclerViewTOTestObject",function() {
    var recyclerViewTOUnderTest;

    describe("scroll", function() {
        beforeEach(function () {
            recyclerViewTOUnderTest = new RecyclerViewTO();
            sinon.stub(recyclerViewTOUnderTest, "_executeCommand");
        });
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                recyclerViewTOUnderTest.scroll();
            });
        });
        it("should throw error if null passed", function(){
            assert.throws(function(){
                recyclerViewTOUnderTest.scroll(null);
            });
        });
        it("should call the _executeCommand method and pass it the correct parameters", function () {
            recyclerViewTOUnderTest.scroll(2);
            assert(recyclerViewTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(recyclerViewTOUnderTest._executeCommand.firstCall.args.slice(0,2), ["Scroll", 2]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            recyclerViewTOUnderTest._executeCommand.returns(getROPromise);
            var res = recyclerViewTOUnderTest.scroll(2);
            assert.strictEqual(res, getROPromise);
        });
    });
    describe("select", function() {
        beforeEach(function () {
            recyclerViewTOUnderTest = new RecyclerViewTO();
            sinon.stub(recyclerViewTOUnderTest, "_executeCommand");
        });
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                recyclerViewTOUnderTest.select();
            });
        });
        it("should throw error if null passed", function(){
            assert.throws(function(){
                recyclerViewTOUnderTest.select(null);
            });
        });
        it("should call the _executeCommand method and pass it the correct parameters", function () {
            recyclerViewTOUnderTest.select(3);
            assert(recyclerViewTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(recyclerViewTOUnderTest._executeCommand.firstCall.args.slice(0,2), ["Select", 3]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            recyclerViewTOUnderTest._executeCommand.returns(getROPromise);
            var res = recyclerViewTOUnderTest.select(3);
            assert.strictEqual(res, getROPromise);
        });
    });


});



