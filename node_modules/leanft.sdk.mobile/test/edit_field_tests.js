// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/22/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var EditFieldTO = require("../lib/edit_field.js").EditFieldTO;

describe("EditFieldTestObject",function() {
    var editFieldTOUnderTest;
    beforeEach(function () {
        editFieldTOUnderTest = new EditFieldTO();
        sinon.stub(editFieldTOUnderTest, "_getROProperty");
        sinon.stub(editFieldTOUnderTest, "_executeCommand");
    });

    describe("isPassword", function () {
        it("should query the property 'isPassword'", function () {
            editFieldTOUnderTest.isPassword();
            assert(editFieldTOUnderTest._getROProperty.calledOnce);
            assert.deepEqual(editFieldTOUnderTest._getROProperty.firstCall.args.slice(0,1), ["isPassword"]);
        });
        it("should return the same promise that was returned from getROProperty", function () {
            var getROPromise = {};
            editFieldTOUnderTest._getROProperty.returns(getROPromise);
            var res = editFieldTOUnderTest.isPassword();
            assert.strictEqual(res, getROPromise);
        });
    });

    describe("setText", function() {
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                editFieldTOUnderTest.setText();
            });
        });
        it("should throw error if null passed", function(){
            assert.throws(function(){
                editFieldTOUnderTest.setText(null);
            });
        });
        it("should call the _executeCommand method and pass it the correct parameters", function () {
            editFieldTOUnderTest.setText("my edit text");
            assert(editFieldTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(editFieldTOUnderTest._executeCommand.firstCall.args[0], "Set");
            // TODO:: fix the test
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            editFieldTOUnderTest._executeCommand.returns(getROPromise);
            var res = editFieldTOUnderTest.setText("my edit text");
            assert.strictEqual(res, getROPromise);
        });
    });

    describe("setSecure", function() {
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                editFieldTOUnderTest.setSecure();
            });
        });
        it("should throw error if null passed", function(){
            assert.throws(function(){
                editFieldTOUnderTest.setSecure(null);
            });
        });
        it("should call the _executeCommand method and pass it the correct parameters", function () {
            editFieldTOUnderTest.setSecure("my_encoded_text");
            assert(editFieldTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(editFieldTOUnderTest._executeCommand.firstCall.args[0], "SetSecure");
            // TODO:: fix the test
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            editFieldTOUnderTest._executeCommand.returns(getROPromise);
            var res = editFieldTOUnderTest.setSecure("my_encoded_text");
            assert.strictEqual(res, getROPromise);
        });
    });

});


