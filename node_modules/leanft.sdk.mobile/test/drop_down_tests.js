// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/22/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var DropDownTO = require("../lib/drop_down.js").DropDownTO;

describe("DropDownTOTestObject",function() {
    var dropDownTOUnderTest;

    describe("selectByIndex", function() {
        beforeEach(function () {
            dropDownTOUnderTest = new DropDownTO();
            sinon.stub(dropDownTOUnderTest, "selectInWheel");
        });
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                dropDownTOUnderTest.selectByIndex();
            });
        });
        it("should throw error if no null passed", function(){
            assert.throws(function(){
                dropDownTOUnderTest.selectByIndex(null);
            });
        });
        it("should call the selectInWheel method and pass it the correct parameters", function () {
            dropDownTOUnderTest.selectByIndex(2);
            assert(dropDownTOUnderTest.selectInWheel.calledOnce);
            assert.deepEqual(dropDownTOUnderTest.selectInWheel.firstCall.args, [0, 2]);
        });
        it("should return the same promise that was returned from selectInWheel", function () {
            var getROPromise = {};
            dropDownTOUnderTest.selectInWheel.returns(getROPromise);
            var res = dropDownTOUnderTest.selectByIndex(2);
            assert.strictEqual(res, getROPromise);
        });
    });

    describe("select", function() {
        beforeEach(function () {
            dropDownTOUnderTest = new DropDownTO();
            sinon.stub(dropDownTOUnderTest, "selectInWheel");
        });
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                dropDownTOUnderTest.select();
            });
        });
        it("should throw error if no null passed", function(){
            assert.throws(function(){
                dropDownTOUnderTest.select(null);
            });
        });
        it("should call the selectInWheel method n number of times and pass it the correct parameters each time when arguments passed", function () {
            dropDownTOUnderTest.select(1,"item-2",3);
            assert(dropDownTOUnderTest.selectInWheel.calledThrice);
            assert.deepEqual(dropDownTOUnderTest.selectInWheel.firstCall.args, [0, 1]);
            assert.deepEqual(dropDownTOUnderTest.selectInWheel.secondCall.args, [1, "item-2"]);
            assert.deepEqual(dropDownTOUnderTest.selectInWheel.thirdCall.args, [2, 3]);
        });
        it("should return the same promise that was returned from selectInWheel", function () {
            var getROPromise = {};
            dropDownTOUnderTest.selectInWheel.returns(getROPromise);
            var res = dropDownTOUnderTest.select(1,2,3);
            assert.strictEqual(res, getROPromise);
        });
    });

    describe("selectInWheel", function() {
        beforeEach(function () {
            dropDownTOUnderTest = new DropDownTO();
            sinon.stub(dropDownTOUnderTest, "_executeCommand");
        });
        it("should call the _executeCommand method and pass it the correct parameters", function () {
            dropDownTOUnderTest.selectInWheel(0, 1);
            assert(dropDownTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(dropDownTOUnderTest._executeCommand.firstCall.args.slice(0,3), ["Select", 1, 0]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            dropDownTOUnderTest._executeCommand.returns(getROPromise);
            var res = dropDownTOUnderTest.selectInWheel(0, 1);
            assert.strictEqual(res, getROPromise);
        });
    });

});



