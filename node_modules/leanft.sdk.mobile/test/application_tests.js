// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 20/12/2015.
 */

var sinon = require("sinon");
var assert = require("assert");


describe("Application Description unit tests", function() {
    var Application = require("../lib/application.js").Application;
    var appDescUnderTest;

    beforeEach(function () {
        appDescUnderTest = Application();
    });

    it("should support initialization via property bag", function () {
        appDescUnderTest = Application({
            name: "someName"
        });

        assert.strictEqual(appDescUnderTest._properties["name"], "someName");
    });

    it("should not have an index key", function () {
        assert.throws(function () {
            appDescUnderTest.index();
        });
    });

    it("should not have the vri property",function(){
        assert.strictEqual(appDescUnderTest.vri, undefined);
    });

    describe("identifier method", function () {
        it("should add 'identifier' to _properties when value is given", function () {
            appDescUnderTest.identifier("some id");
            assert.strictEqual(appDescUnderTest._properties["identifier"], "some id");
        });
        it("should add 'identifier' to _properties when value is given using property bag", function () {
            appDescUnderTest = Application({
                identifier: "some id"
            });
            assert.strictEqual(appDescUnderTest._properties["identifier"], "some id");
        });
        it("should return this - builder pattern when value is given", function () {
            var result = appDescUnderTest.identifier("some id");
            assert.strictEqual(result, appDescUnderTest);
        });
        it("should remove 'identifier' from _properties when value is null", function () {
            appDescUnderTest._properties["identifier"] = "some id";
            appDescUnderTest.identifier(null);
            assert(!("identifier" in appDescUnderTest._properties));
        });
        it("should return the value of 'id' from _properties when value is not given", function () {
            appDescUnderTest._properties["identifier"] = "some id";
            var id = appDescUnderTest.identifier();
            assert.equal(id, "some id");
        });
    });

    describe("name method", function () {
        it("should add 'name' to _properties when value is given", function () {
            appDescUnderTest.name("some name");
            assert.strictEqual(appDescUnderTest._properties["name"], "some name");
        });
        it("should add 'name' to _properties when value is given using property bag", function () {
            appDescUnderTest = Application({
                name: "some name"
            });
            assert.strictEqual(appDescUnderTest._properties["name"], "some name");
        });
        it("should return this - builder pattern when value is given", function () {
            var result = appDescUnderTest.name("some name");
            assert.strictEqual(result, appDescUnderTest);
        });
        it("should remove 'name' from _properties when value is null", function () {
            appDescUnderTest._properties["name"] = "some name";
            appDescUnderTest.name(null);
            assert(!("name" in appDescUnderTest._properties));
        });
        it("should return the value of 'name' from _properties when value is not given", function () {
            appDescUnderTest._properties["name"] = "some name";
            var name = appDescUnderTest.name();
            assert.equal(name, "some name");
        });
    });

    describe("version method", function () {
        it("should add 'version' to _properties when value is given", function () {
            appDescUnderTest.version("some version");
            assert.strictEqual(appDescUnderTest._properties["version"], "some version");
        });
        it("should add 'version' to _properties when value is given using property bag", function () {
            appDescUnderTest = Application({
                version: "some version"
            });
            assert.strictEqual(appDescUnderTest._properties["version"], "some version");
        });
        it("should return this - builder pattern when value is given", function () {
            var result = appDescUnderTest.version("some version");
            assert.strictEqual(result, appDescUnderTest);
        });
        it("should remove 'version' from _properties when value is null", function () {
            appDescUnderTest._properties["version"] = "some version";
            appDescUnderTest.version(null);
            assert(!("version" in appDescUnderTest._properties));
        });
        it("should return the value of 'version' from _properties when value is not given", function () {
            appDescUnderTest._properties["version"] = "some version";
            var version = appDescUnderTest.version();
            assert.equal(version, "some version");
        });
    });

    describe("upload method", function () {
        it("should add 'counter' to _properties when value is given", function () {
            appDescUnderTest.upload(8);
            assert.strictEqual(appDescUnderTest._properties["counter"], 8);
        });
        it("should add 'counter' to _properties when value is given using property bag", function () {
            appDescUnderTest = Application({
                upload: 8
            });
            assert.strictEqual(appDescUnderTest._properties["counter"], 8);
        });
        it("should return this - builder pattern when value is given", function () {
            var result = appDescUnderTest.upload(8);
            assert.strictEqual(result, appDescUnderTest);
        });
        it("should remove 'counter' from _properties when value is null", function () {
            appDescUnderTest._properties["counter"] = 8;
            appDescUnderTest.upload(null);
            assert(!("counter" in appDescUnderTest._properties));
        });
        it("should return the value of 'counter' from _properties when value is not given", function () {
            appDescUnderTest._properties["counter"] = 8;
            var id = appDescUnderTest.upload();
            assert.equal(id, 8);
        });
    });
});

describe("Application Test Object unit tests", function() {
    var ApplicationTO = require("../lib/application.js").ApplicationTO;
    var appUnderTest;

    beforeEach(function () {
        appUnderTest = new ApplicationTO();
        sinon.stub(appUnderTest, "_executeCommand");
        sinon.stub(appUnderTest, "_getROProperty");
    });

    describe("identifier method", function () {
        it("should execute _getROProperty 'identifier'", function () {
            appUnderTest.identifier();
            assert(appUnderTest._getROProperty.calledOnce);
            assert.equal(appUnderTest._getROProperty.getCall(0).args[0], "identifier");
        });
        it("should return promise as is", function () {
            var promiseMock = {};
            appUnderTest._getROProperty.returns(promiseMock);
            var res = appUnderTest.identifier();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("name method", function () {
        it("should execute _getROProperty 'name'", function () {
            appUnderTest.name();
            assert(appUnderTest._getROProperty.calledOnce);
            assert.equal(appUnderTest._getROProperty.getCall(0).args[0], "name");
        });
        it("should return promise as is", function () {
            var promiseMock = {};
            appUnderTest._getROProperty.returns(promiseMock);
            var res = appUnderTest.name();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("version method", function () {
        it("should execute _getROProperty 'version'", function () {
            appUnderTest.version();
            assert(appUnderTest._getROProperty.calledOnce);
            assert.equal(appUnderTest._getROProperty.getCall(0).args[0], "version");
        });
        it("should return promise as is", function () {
            var promiseMock = {};
            appUnderTest._getROProperty.returns(promiseMock);
            var res = appUnderTest.version();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("launch method", function() {
        it("should call _executeCommand and pass it 'Launch' and 1,1 as arguments", function () {
            appUnderTest.launch();
            assert(appUnderTest._executeCommand.calledOnce);
            assert.deepEqual(appUnderTest._executeCommand.firstCall.args.slice(0,3), ["Launch", 1, 1]);
        });
    });

    describe("restart method", function() {
        it("should call _executeCommand and pass it 'Launch' and 1,2 as arguments", function () {
            appUnderTest.restart();
            assert(appUnderTest._executeCommand.calledOnce);
            assert.deepEqual(appUnderTest._executeCommand.firstCall.args.slice(0,3), ["Launch", 1, 2]);
        });
    });

    describe("install method", function() {
        it("should call _executeCommand and pass it 'Launch' and 2 as arguments", function () {
            appUnderTest.install();
            assert(appUnderTest._executeCommand.calledOnce);
            assert.deepEqual(appUnderTest._executeCommand.firstCall.args.slice(0,2), ["Launch", 2]);
        });
    });

    describe("unsupported methods", function() {
        beforeEach(function () {
            sinon.stub(appUnderTest, "_throwUnsupportedErrorAsync");
        });

        ["exists", "highlight", "snapshot"].forEach(function(methodName) {
            it("should not support " + methodName, function() {
                var promiseMock = {};
                appUnderTest._throwUnsupportedErrorAsync.returns(promiseMock);

                var res = appUnderTest._throwUnsupportedErrorAsync();
                assert(appUnderTest._throwUnsupportedErrorAsync.calledOnce);
                assert.deepEqual(res, promiseMock);
            });
        });
    });
});
