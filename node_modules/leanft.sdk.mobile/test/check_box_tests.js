// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/20/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var CheckBoxTO = require("../lib/check_box.js").CheckBoxTO;

describe("CheckBox Test Object",function() {
    var checkBoxTOUnderTest;
    beforeEach(function () {
        checkBoxTOUnderTest = new CheckBoxTO();
        sinon.stub(checkBoxTOUnderTest, "_executeCommand");
    });

    describe("set", function(){
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                checkBoxTOUnderTest.set();
            });
        });
        it("should throw error if null passed", function(){
            assert.throws(function(){
                checkBoxTOUnderTest.set(null);
            });
        });
        it("should throw error if not bool string value passed", function(){
            assert.throws(function(){
                checkBoxTOUnderTest.set("true1");
            });
        });
        it("should throw error if not bool value passed", function(){
            assert.throws(function(){
                checkBoxTOUnderTest.set(8);
            });
        });
        it("should execute command 'Set' and pass it the correct parameters when no arguments passed",function(){
            checkBoxTOUnderTest.set(true);
            assert(checkBoxTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(checkBoxTOUnderTest._executeCommand.firstCall.args.slice(0,2), ["Set", "on"]);
        });
        it("should execute command 'Set' and pass it the correct parameters when true passed",function(){
            checkBoxTOUnderTest.set(true);
            assert(checkBoxTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(checkBoxTOUnderTest._executeCommand.firstCall.args.slice(0,2), ["Set", "on"]);
        });
        it("should execute command 'Set' and pass it the correct parameters when false passed",function(){
            checkBoxTOUnderTest.set(false);
            assert(checkBoxTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(checkBoxTOUnderTest._executeCommand.firstCall.args.slice(0,2), ["Set", "off"]);
        });
        it("should return the same promise that was returned from _executeCommand",function(){
            var getROPromise = {};
            checkBoxTOUnderTest._executeCommand.returns(getROPromise);
            var res = checkBoxTOUnderTest.set(true);
            assert.strictEqual(res,getROPromise);
        });
    });

});
