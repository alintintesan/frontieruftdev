// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/21/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var CalendarTO = require("../lib/calendar.js").CalendarTO;

describe("Calendar Test Object",function() {
    var calendarTOUnderTest;
    beforeEach(function () {
        calendarTOUnderTest = new CalendarTO();
        sinon.stub(calendarTOUnderTest, "_executeCommand");
    });

    describe("setValue", function(){
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                calendarTOUnderTest.setValue();
            });
        });
        it("should throw error if value passed is null", function(){
            assert.throws(function(){
                calendarTOUnderTest.setValue(null, "dd/mm/yyyy");
            });
        });
        it("should throw error if format passed is null", function(){
            assert.throws(function(){
                calendarTOUnderTest.setValue("21.12.2015", null);
            });
        });
        it("should throw error if value and format passed are null", function(){
            assert.throws(function(){
                calendarTOUnderTest.setValue(null, null);
            });
        });
        it("should execute command 'Set' and pass it the correct parameters",function(){
            calendarTOUnderTest.setValue("21.12.2015", "dd/mm/yyyy");
            assert(calendarTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(calendarTOUnderTest._executeCommand.firstCall.args.slice(0,3), ["Set", "21.12.2015", "dd/mm/yyyy"]);
        });
        it("should return the same promise that was returned from _executeCommand method",function(){
            var promise = {};
            calendarTOUnderTest._executeCommand.returns(promise);
            assert.strictEqual(calendarTOUnderTest.setValue("21.12.2015", "dd/mm/yyyy"), promise);
        });
    });

});

