// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/24/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var TableTO = require("../lib/table.js").TableTO;

describe("TableTestObject",function() {
    var tableTOUnderTest;
    beforeEach(function () {
        tableTOUnderTest = new TableTO();
        sinon.stub(tableTOUnderTest, "_executeCommand");
    });

    describe("scroll", function () {
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                tableTOUnderTest.scroll();
            });
        });
        it("should throw error if null passed", function(){
            assert.throws(function(){
                tableTOUnderTest.scroll(null);
            });
        });
        it("should throw error if item passed is a not numeric string", function(){
            assert.throws(function(){
                tableTOUnderTest.scroll("2a");
            });
        });
        it("should call the _execute method and pass it the correct arguments", function () {
            tableTOUnderTest.scroll("2");
            assert(tableTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOUnderTest._executeCommand.firstCall.args.slice(0,2), ["Scroll", 2]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            tableTOUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOUnderTest.scroll(2);
            assert.strictEqual(res, getROPromise);
        });
    });

    describe("scrollBySection", function () {
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                tableTOUnderTest.scrollBySection();
            });
        });
        it("should throw error if one argument passed", function(){
            assert.throws(function(){
                tableTOUnderTest.scrollBySection(2);
            });
        });
        it("should throw error if section passed is null", function(){
            assert.throws(function(){
                tableTOUnderTest.scrollBySection(null, 2);
            });
        });
        it("should throw error if item passed is null", function(){
            assert.throws(function(){
                tableTOUnderTest.scrollBySection(2, null);
            });
        });
        it("should throw error if a value passed is a not numeric string", function(){
            assert.throws(function(){
                tableTOUnderTest.scrollBySection("2a", 3);
            });
        });
        it("should call the _execute method and pass it the correct arguments", function () {
            tableTOUnderTest.scrollBySection(2, "3");
            assert(tableTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOUnderTest._executeCommand.firstCall.args.slice(0,3), ["Scroll", 3, 2]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            tableTOUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOUnderTest.scrollBySection(2, 3);
            assert.strictEqual(res, getROPromise);
        });
    });

    describe("select", function () {
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                tableTOUnderTest.select();
            });
        });
        it("should throw error if null passed", function(){
            assert.throws(function(){
                tableTOUnderTest.select(null);
            });
        });
        it("should throw error if item passed is a not numeric string", function(){
            assert.throws(function(){
                tableTOUnderTest.select("2a");
            });
        });
        it("should call the _execute method and pass it the correct arguments", function () {
            tableTOUnderTest.select("2");
            assert(tableTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOUnderTest._executeCommand.firstCall.args.slice(0,2), ["Select", 2]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            tableTOUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOUnderTest.select(2);
            assert.strictEqual(res, getROPromise);
        });
    });

    describe("selectBySection", function () {
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                tableTOUnderTest.selectBySection();
            });
        });
        it("should throw error if one argument passed", function(){
            assert.throws(function(){
                tableTOUnderTest.selectBySection(2);
            });
        });
        it("should throw error if section passed is null", function(){
            assert.throws(function(){
                tableTOUnderTest.selectBySection(null, 2);
            });
        });
        it("should throw error if item passed is null", function(){
            assert.throws(function(){
                tableTOUnderTest.selectBySection(2, null);
            });
        });
        it("should throw error if a value passed is a not numeric string", function(){
            assert.throws(function(){
                tableTOUnderTest.selectBySection("2a", 3);
            });
        });
        it("should call the _execute method and pass it the correct arguments", function () {
            tableTOUnderTest.selectBySection(2, "3");
            assert(tableTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOUnderTest._executeCommand.firstCall.args.slice(0,3), ["Select", 3, 2]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            tableTOUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOUnderTest.selectBySection(2, 3);
            assert.strictEqual(res, getROPromise);
        });
    });

    describe("insert", function () {
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                tableTOUnderTest.insert();
            });
        });
        it("should throw error if null passed", function(){
            assert.throws(function(){
                tableTOUnderTest.insert(null);
            });
        });
        it("should throw error if item passed is a not numeric string", function(){
            assert.throws(function(){
                tableTOUnderTest.insert("2a");
            });
        });
        it("should call the _execute method and pass it the correct arguments", function () {
            tableTOUnderTest.insert("2");
            assert(tableTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOUnderTest._executeCommand.firstCall.args.slice(0,2), ["Insert", 2]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            tableTOUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOUnderTest.insert(2);
            assert.strictEqual(res, getROPromise);
        });
    });

    describe("insertBySection", function () {
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                tableTOUnderTest.insertBySection();
            });
        });
        it("should throw error if one argument passed", function(){
            assert.throws(function(){
                tableTOUnderTest.insertBySection(2);
            });
        });
        it("should throw error if section passed is null", function(){
            assert.throws(function(){
                tableTOUnderTest.insertBySection(null, 2);
            });
        });
        it("should throw error if item passed is null", function(){
            assert.throws(function(){
                tableTOUnderTest.insertBySection(2, null);
            });
        });
        it("should throw error if a value passed is a not numeric string", function(){
            assert.throws(function(){
                tableTOUnderTest.insertBySection("2a", 3);
            });
        });
        it("should call the _execute method and pass it the correct arguments", function () {
            tableTOUnderTest.insertBySection(2, "3");
            assert(tableTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOUnderTest._executeCommand.firstCall.args.slice(0,3), ["Insert", 3, 2]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            tableTOUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOUnderTest.insertBySection(2, 3);
            assert.strictEqual(res, getROPromise);
        });
    });

    describe("remove", function () {
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                tableTOUnderTest.remove();
            });
        });
        it("should throw error if null passed", function(){
            assert.throws(function(){
                tableTOUnderTest.remove(null);
            });
        });
        it("should throw error if item passed is a not numeric string", function(){
            assert.throws(function(){
                tableTOUnderTest.remove("2a");
            });
        });
        it("should call the _execute method and pass it the correct arguments", function () {
            tableTOUnderTest.remove("2");
            assert(tableTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOUnderTest._executeCommand.firstCall.args.slice(0,2), ["Delete", 2]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            tableTOUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOUnderTest.remove(2);
            assert.strictEqual(res, getROPromise);
        });
    });

    describe("removeBySection", function () {
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                tableTOUnderTest.removeBySection();
            });
        });
        it("should throw error if one argument passed", function(){
            assert.throws(function(){
                tableTOUnderTest.removeBySection(2);
            });
        });
        it("should throw error if section passed is null", function(){
            assert.throws(function(){
                tableTOUnderTest.removeBySection(null, 2);
            });
        });
        it("should throw error if item passed is null", function(){
            assert.throws(function(){
                tableTOUnderTest.removeBySection(2, null);
            });
        });
        it("should throw error if a value passed is a not numeric string", function(){
            assert.throws(function(){
                tableTOUnderTest.removeBySection("2a", 3);
            });
        });
        it("should call the _execute method and pass it the correct arguments", function () {
            tableTOUnderTest.removeBySection(2, "3");
            assert(tableTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOUnderTest._executeCommand.firstCall.args.slice(0,3), ["Delete", 3, 2]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            tableTOUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOUnderTest.removeBySection(2, 3);
            assert.strictEqual(res, getROPromise);
        });
    });

    describe("moveItem", function () {
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                tableTOUnderTest.moveItem();
            });
        });
        it("should throw error if one argument passed", function(){
            assert.throws(function(){
                tableTOUnderTest.moveItem(2);
            });
        });
        it("should throw error if source item passed is null", function(){
            assert.throws(function(){
                tableTOUnderTest.moveItem(null, 2);
            });
        });
        it("should throw error if destination item passed is null", function(){
            assert.throws(function(){
                tableTOUnderTest.moveItem(2, null);
            });
        });
        it("should throw error if a value passed is a not numeric string", function(){
            assert.throws(function(){
                tableTOUnderTest.moveItem("2a", 3);
            });
        });
        it("should call the _execute method and pass it the correct arguments", function () {
            tableTOUnderTest.moveItem(2, "3");
            assert(tableTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOUnderTest._executeCommand.firstCall.args.slice(0,3), ["MoveItem", 2, 3]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            tableTOUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOUnderTest.moveItem(2, 3);
            assert.strictEqual(res, getROPromise);
        });
    });

    describe("moveItemBySection", function () {
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                tableTOUnderTest.moveItem();
            });
        });
        it("should throw error if one argument passed", function(){
            assert.throws(function(){
                tableTOUnderTest.moveItemBySection(2);
            });
        });
        it("should throw error if source section passed is null", function(){
            assert.throws(function(){
                tableTOUnderTest.moveItemBySection(null, 2, 3, 4);
            });
        });
        it("should throw error if source item passed is null", function(){
            assert.throws(function(){
                tableTOUnderTest.moveItemBySection(2, null, 3, 4);
            });
        });
        it("should throw error if destination section passed is null", function(){
            assert.throws(function(){
                tableTOUnderTest.moveItemBySection(1, 2, null, 4);
            });
        });
        it("should throw error if destination item passed is null", function(){
            assert.throws(function(){
                tableTOUnderTest.moveItemBySection(1, 2, 3, null);
            });
        });
        it("should throw error if a value passed is a not numeric string", function(){
            assert.throws(function(){
                tableTOUnderTest.moveItemBySection("2a", 3, 4, 1);
            });
        });
        it("should call the _execute method and pass it the correct arguments", function () {
            tableTOUnderTest.moveItemBySection(2, "3", 4, "5");
            assert(tableTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(tableTOUnderTest._executeCommand.firstCall.args.slice(0,5), ["MoveItem", 3, 5, 2, 4]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            tableTOUnderTest._executeCommand.returns(getROPromise);
            var res = tableTOUnderTest.moveItemBySection(2, 3, 4, 5);
            assert.strictEqual(res, getROPromise);
        });
    });

});



