// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/24/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var ViewTO = require("../lib/view.js").ViewTO;

describe("ViewTO",function() {
    var viewTOUnderTest;
    beforeEach(function () {
        viewTOUnderTest = new ViewTO();
        sinon.stub(viewTOUnderTest, "_executeCommand");
    });

    describe("zoom", function(){
        it("should throw error if no arguments passed",function(){
            assert.throws(function(){
                viewTOUnderTest.zoom();
            });
        });
        it("should throw error if only one argument passed",function(){
            assert.throws(function(){
                viewTOUnderTest.zoom({
                    offset: {
                        Type: "Point",
                            x: 20,
                            y: 35
                    },
                    anchor: "Center" // center after conversion
                });
            });
        });
        it("should throw error if focalPoint passed as null",function(){
            assert.throws(function(){
                viewTOUnderTest.zoom(null, 2);
            });
        });
        it("should throw error if scale passed as null",function(){
            assert.throws(function(){
                viewTOUnderTest.zoom({
                    offset: {
                        Type: "Point",
                        x: 20,
                        y: 35
                    },
                    anchor: "Center" // center after conversion
                }, null);
            });
        });
        it("should call the _executeCommand method and pass it default values of location, if focalPoint object passed as an empty object, and correct scale value",function(){
            var expected = {
                Type: "Location",
                    Offset: {
                    Type: "Point",
                        X: 0,
                        Y: 0
                },
                Anchor: 2 // center after conversion
            };
            viewTOUnderTest.zoom({}, 2);
            assert.deepEqual(viewTOUnderTest._executeCommand.firstCall.args.slice(0,3), ["Zoom", expected, 2]);
        });

        it("should call the _executeCommand method and pass it the focalPoint values that the user passes and correct scale",function(){
            var expected = {
                Type: "Location",
                Offset: {
                    Type: "Point",
                    X: 20,
                    Y: 35
                },
                Anchor: 2 // center after conversion
            };
            viewTOUnderTest.zoom(
                {
                    offset: {
                        x: 20,
                        y: 35
                    },
                    anchor: "Center" // center after conversion
                },2
            );
            assert.deepEqual(viewTOUnderTest._executeCommand.firstCall.args.slice(0,3), ["Zoom", expected, 2]);
        });
    });
});
