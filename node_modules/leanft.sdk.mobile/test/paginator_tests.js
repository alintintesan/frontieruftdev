// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/22/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var PaginatorTO = require("../lib/paginator.js").PaginatorTO;

describe("PaginatorTestObject",function() {
    var paginatorUnderTest;
    beforeEach(function () {
        paginatorUnderTest = new PaginatorTO();
        sinon.stub(paginatorUnderTest, "_executeCommand");
    });

    describe("set", function() {
        it("should throw error if no arguments passed", function(){
            assert.throws(function(){
                paginatorUnderTest.set();
            });
        });
        it("should throw error if null passed", function(){
            assert.throws(function(){
                paginatorUnderTest.set(null);
            });
        });
        it("should throw error if not numeric string passed", function(){
            assert.throws(function(){
                paginatorUnderTest.set("2a");
            });
        });
        it("should call the _executeCommand method and pass it the correct parameters when number passed", function () {
            paginatorUnderTest.set(2);
            assert(paginatorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(paginatorUnderTest._executeCommand.firstCall.args.slice(0,2), ["Set", 2]);
        });
        it("should call the _executeCommand method and pass it the correct parameters when numeric string passed", function () {
            paginatorUnderTest.set("2");
            assert(paginatorUnderTest._executeCommand.calledOnce);
            assert.deepEqual(paginatorUnderTest._executeCommand.firstCall.args.slice(0,2), ["Set", 2]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            paginatorUnderTest._executeCommand.returns(getROPromise);
            var res = paginatorUnderTest.set(2);
            assert.strictEqual(res, getROPromise);
        });
    });

});



