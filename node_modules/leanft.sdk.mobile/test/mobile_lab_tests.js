// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 14/12/2015.
 */

var sinon = require("sinon");
var assert = require("assert");

var Lab = require("../lib/mobile_lab.js").MobileLab;
var Device = require("../lib/device.js").Device;
var DeviceSource = require("../lib/device.js").DeviceSource;
var DeviceTO = require("../lib/device.js").DeviceTO;
var Application = require("../lib/application.js").Application;

describe("Mobile Lab unit tests", function() {
    var labUnderTest;

    var sessionMock;
    var launchPromise;

    beforeEach(function(){
        sessionMock = {
            _communication: {
                send: sinon.stub()
            },
            fireEvent: sinon.stub(),
            _promiseManager: {wrapPromiseFunctionWithNotifyEvents: function () {} },
            _config : {}
        };
        sinon.stub(sessionMock._promiseManager, "wrapPromiseFunctionWithNotifyEvents", function (onStart, promiseFunc) {
            return promiseFunc();
        });
        labUnderTest = new Lab(sessionMock, "someLab");

        launchPromise = {
            then: sinon.stub()
        };
        sessionMock._communication.send.returns(launchPromise);

        
    });

    describe("lockDevice", function() {
        it("should send LaunchApplication message type", function() {
            labUnderTest.lockDevice(null);

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"LaunchApplication");
        });

        it("should send type: Device in the launch info parameter", function() {
            labUnderTest.lockDevice(null);

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[1].type,"Device");
        });

        it("should pass description properties with no extraapps as launch info parameter when description is passed", function() {
            var desc = new Device();
            desc._properties = {
                name: "someName",
                id:"someId"
            };

            labUnderTest.lockDevice(desc);

            var expectedProps = {
                name: "someName",
                id:"someId",
                lab: "someLab",
                collectLogs: true,
                vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
            };

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1]["launch info"],expectedProps);
        });

        it("should pass description properties and one extraapps as launch info parameter when description and one appsToInstall description are passed", function() {
            var desc = new Device();
            desc._properties = {
                name: "someName",
                id:"someId"
            };

            var appToInstall1 = new Application();
            appToInstall1._properties = {
                identifier: "com.hp.prog1",
                instrumented: true
            };
            var appsToInstall = [appToInstall1];
            labUnderTest.lockDevice(desc, appsToInstall);

            var expectedProps = {
                name: "someName",
                id:"someId",
                extraapps: [{identifier:"com.hp.prog1",instrumented:true}],
                lab: "someLab",
                collectLogs: true,
                vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
            };

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1]["launch info"],expectedProps);
        });

        it("should pass description properties and one extraapps with counter value when upload value is set", function() {
            var desc = new Device();
            desc._properties = {
                name: "someName",
                id:"someId"
            };

            var appToInstall1 = new Application({
                identifier: "com.hp.prog1",
                isPackaged: true,
                upload: 7
            });

            var appsToInstall = [appToInstall1];
            labUnderTest.lockDevice(desc, appsToInstall);

            var expectedProps = {
                name: "someName",
                id:"someId",
                extraapps: [{identifier:"com.hp.prog1",instrumented:true,counter:7}],
                lab: "someLab",
                collectLogs: true,
                vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
            };

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1]["launch info"],expectedProps);
        });


        it("should pass description properties and two extraapps as launch info parameter when description and two appsToInstall descriptions are passed", function() {
            var desc = new Device();
            desc._properties = {
                name: "someName",
                id:"someId"
            };

            var appToInstall1 = new Application();
            appToInstall1._properties = {
                identifier: "com.hp.prog1",
                instrumented: true
            };
            var appToInstall2 = new Application();
            appToInstall2._properties = {
                identifier: "com.ebay.prog2",
                instrumented: false,
                version: "1.2.3"
            };
            var appsToInstall = [appToInstall1, appToInstall2];
            labUnderTest.lockDevice(desc, appsToInstall);

            var expectedProps = {
                name: "someName",
                id:"someId",
                extraapps: [{identifier:"com.hp.prog1",instrumented:true},{identifier:"com.ebay.prog2",version:"1.2.3",instrumented:false}],
                lab: "someLab",
                collectLogs: true,
                vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
            };

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1]["launch info"], expectedProps);
        });


        var deviceSourceParams = {};
        deviceSourceParams[DeviceSource.mobile_center] = "MC";
        deviceSourceParams[DeviceSource.amazon_device_farm] = "AWS";
        deviceSourceParams[DeviceSource.srf_device_lab] = "SRF";
        deviceSourceParams[DeviceSource.any] = "ANY";

        Object.keys(deviceSourceParams).forEach(function (key) {
            var strValue = deviceSourceParams[key];
            it("should pass description properties, one extraapps and correct DeviceSource native string value of " + strValue +
                " as launch info parameter when description, one appsToInstall description and DeviceSource." + key + " are passed", function () {
                var desc = new Device();
                desc._properties = {
                    name: "someName",
                    id:"someId"
                };

                var appToInstall1 = new Application();
                appToInstall1._properties = {
                    identifier: "com.hp.prog1",
                    instrumented: true
                };
                var appsToInstall = [appToInstall1];
                labUnderTest.lockDevice(desc, appsToInstall, key);

                var expectedProps = {
                    name: "someName",
                    id:"someId",
                    extraapps: [{identifier:"com.hp.prog1",instrumented:true}],
                    source: strValue,
                    lab: "someLab",
                    collectLogs: true,
                    vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
                };

                assert.deepEqual(sessionMock._communication.send.firstCall.args[1]["launch info"], expectedProps);

            });
        });

        it("should pass description properties, one extraapps and correct DeviceSource string as launch info parameter when description, one appsToInstall description and DeviceSource as 'mobile_center' string are passed", function() {
            var desc = new Device();
            desc._properties = {
                name: "someName",
                id:"someId"
            };

            var appToInstall1 = new Application();
            appToInstall1._properties = {
                identifier: "com.hp.prog1",
                instrumented: true
            };
            var appsToInstall = [appToInstall1];
            labUnderTest.lockDevice(desc, appsToInstall, "mobile_center");

            var expectedProps = {
                name: "someName",
                id:"someId",
                extraapps: [{identifier:"com.hp.prog1",instrumented:true}],
                source: "MC",
                lab: "someLab",
                collectLogs: true,
                vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
            };

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1]["launch info"], expectedProps);
        });

        it("should pass description properties with no extraapps as launch info parameter when property bag is passed", function() {
            labUnderTest.lockDevice({
                name: "someName",
                id:"someId"
            });

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1]["launch info"],{
                name: "someName",
                id:"someId",
                lab: "someLab",
                collectLogs: true,
                vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
            });
        });

        it("should pass description properties and one extraapps as launch info parameter when property bag and one appsToInstall description are passed", function() {
            var appToInstall1 = new Application();
            appToInstall1._properties = {
                identifier: "com.hp.prog1",
                instrumented: true
            };
            var appsToInstall = [appToInstall1];

            labUnderTest.lockDevice({
                name: "someName",
                id:"someId"
            }, appsToInstall);

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1]["launch info"],{
                name: "someName",
                id:"someId",
                extraapps: [{identifier:"com.hp.prog1",instrumented:true}],
                lab: "someLab",
                collectLogs: true,
                vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
            });
        });

        it("should throw error in case the launch result is null",function(){
            launchPromise.then.callsArgWith(0,null);

            assert.throws(function(){
                labUnderTest.lockDevice({
                    name: "someName",
                    id:"someId"
                });
            });
        });

        it("should create a new Device with the given cookie",function(){
            launchPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42
                });
            };
            var res = labUnderTest.lockDevice({
                name: "someName",
                id:"someId"
            });
            assert(res instanceof DeviceTO);
            assert.strictEqual(res._cookie,42);
        });

        it("should throw a replay exception in case a replay error is returned",function(){
            var error = new Error("SomeError");
            error.statusCode = -111;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                labUnderTest.lockDevice({
                    name: "someName",
                    id:"someId"
                });
            },/ReplayObjectNotFoundException: SomeError/);
        });

        it("should add the applicationInfo to device",function(){
            launchPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42,
                    Properties: {id:"1"}
                });
            };
            var res = labUnderTest.lockDevice({
                name: "someName",
                id:"someId"
            });
            assert(res instanceof DeviceTO);
            assert.deepEqual(res._applicationInfo,{id:"1"});
        });
    });

    describe("lockPublicDevice", function() {
        var sandbox = sinon.sandbox.create();

        beforeEach(function() {
            sandbox.stub(Lab.prototype, 'getDeviceList').returns(Promise.resolve([{
                deviceId: 1,
                source: "HOSTED"
            }]));
        });
        afterEach(function(){
            sandbox.restore();
        });

        it("should send LaunchApplication message type", async function() {
            await labUnderTest.lockPublicDevice();

            assert(sessionMock._communication.send.called);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"LaunchApplication");
        });

        it("should send type: Device in the launch info parameter", async function() {
            await labUnderTest.lockPublicDevice();

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[1].type,"Device");
        });

        it("should add the applicationInfo to device",async function(){
            launchPromise.then = function(fullfill){
                return fullfill({
                    "AUT cookie": 42,
                    Properties: {id:"1"}
                });
            };
            var res = await labUnderTest.lockPublicDevice();
            assert(res instanceof DeviceTO);
            assert.deepEqual(res._applicationInfo,{id:"1"});
        });

        it("should pass description properties, one extraapps as launch info parameter when description, one appsToInstall description string are passed", async function() {
            var desc = {
                name: "someName",
                id:"someId"
            };

            var appToInstall1 = new Application();
            appToInstall1._properties = {
                identifier: "com.hp.prog1",
                instrumented: true
            };
            var appsToInstall = [appToInstall1];
            await labUnderTest.lockPublicDevice(desc, appsToInstall);

            var expectedProps = {
                name: "someName",
                id:"someId",
                extraapps: [{identifier:"com.hp.prog1",instrumented:true}],
                lab: "someLab",
                collectLogs: true,
                vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
            };

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1]["launch info"], expectedProps);
        });

        it("should pass description properties with no extraapps as launch info parameter when property bag is passed", async function() {
            await labUnderTest.lockPublicDevice({
                name: "someName",
                id:"someId"
            });

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1]["launch info"],{
                name: "someName",
                id:"someId",
                lab: "someLab",
                collectLogs: true,
                vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
            });
        });

        it("should pass description properties and one extraapps as launch info parameter when property bag and one appsToInstall description are passed", async function() {
            var appToInstall1 = new Application();
            appToInstall1._properties = {
                identifier: "com.hp.prog1",
                instrumented: true
            };
            var appsToInstall = [appToInstall1];

            await labUnderTest.lockPublicDevice({
                name: "someName",
                id:"someId"
            }, appsToInstall);

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1]["launch info"],{
                name: "someName",
                id:"someId",
                extraapps: [{identifier:"com.hp.prog1",instrumented:true}],
                lab: "someLab",
                collectLogs: true,
                vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
            });
        });
    });

    describe("lockDeviceById", function() {
        it("should pass correct id as launch info parameter", function() {
            labUnderTest.lockDeviceById("someId");

            var expectedLaunchData = {
                "type": "Device",
                "launch info": {
                    id:"someId",
                    lab:"someLab",
                    collectLogs: true,
                    vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
                }
            };

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1],expectedLaunchData);
        });
    });

    describe("lockDeviceByName", function() {
        it("should pass correct name as launch info parameter", function() {
            labUnderTest.lockDeviceByName("someName");

            var expectedLaunchData = {
                "type": "Device",
                "launch info": {
                    name:"someName",
                    lab:"someLab",
                    collectLogs: true,
                    vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
                }
            };

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1],expectedLaunchData);
        });
    });

    describe("lockDeviceByInfo", function() {
        it("should throw if null is passed", function() {
            assert.throws( function() {
                labUnderTest.lockDeviceByInfo(null);
            });
        });

        it("should throw if undefined is passed", function() {
            assert.throws( function() {
                labUnderTest.lockDeviceByInfo();
            });
        });

        it("should take only the id field from the info as launch info parameter", function() {
            labUnderTest.lockDeviceByInfo({id:"someId", name:"someName", custom: "custom"});

            var expectedLaunchData = {
                "type": "Device",
                "launch info": {
                    id:"someId",
                    lab:"someLab",
                    collectLogs: true,
                    vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
                }
            };

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1],expectedLaunchData);
        });
    });

    describe("lockDeviceWithOptions", function () {
        it("should send LaunchApplication message type", function() {
            labUnderTest.lockDeviceWithOptions(null);

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"LaunchApplication");
        });

        it("should send message with default values of collect logs and vitals if no options passes", function () {
            var desc = new Device();
            desc._properties = {
                name: "someName",
                id:"someId"
            };

            labUnderTest.lockDeviceWithOptions(desc);

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1]["launch info"],{
                name: "someName",
                id:"someId",
                lab: "someLab",
                collectLogs: true,
                vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
            });
        });

        it("should set value of collectLogs as specified in the options", function () {
            var desc = new Device();
            desc._properties = {
                name: "someName",
                id:"someId"
            };

            labUnderTest.lockDeviceWithOptions(desc, {collectLogs: false});

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1]["launch info"],{
                name: "someName",
                id:"someId",
                lab: "someLab",
                collectLogs: false,
                vitalsCollectOptions: { cpu: false, memory: false, freeMemory: false }
            });
        });

        it("should merge values of collectVitals specified in the options with defaults", function () {
            var desc = new Device();
            desc._properties = {
                name: "someName",
                id:"someId"
            };

            labUnderTest.lockDeviceWithOptions(desc, {collectVitals: {memory: true}});

            assert.deepEqual(sessionMock._communication.send.firstCall.args[1]["launch info"],{
                name: "someName",
                id:"someId",
                lab: "someLab",
                collectLogs: true,
                vitalsCollectOptions: { cpu: false, memory: true, freeMemory: false }
            });
        });
    });

    describe("getDevicesWithOpenViewers", function() {
         it("should send message with type GetDevicesWithOpenViewer", function() {
            labUnderTest.getDevicesWithOpenViewers();

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"GetDevicesWithOpenViewer");
        });

        it("should throw error in case the launch result is null",function(){
            launchPromise.then.callsArgWith(0,null);

            assert.throws(function(){
                labUnderTest.getDevicesWithOpenViewers();
            });
        });

        it("should throw error in case the launch result does not have a Result field",function(){
            launchPromise.then.callsArgWith(0,{});

            assert.throws(function(){
                labUnderTest.getDevicesWithOpenViewers();
            });
        });

        it("should throw a replay exception in case a replay error is returned",function(){
            var error = new Error("SomeError");
            error.statusCode = -111;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                labUnderTest.getDevicesWithOpenViewers();
            },/ReplayObjectNotFoundException: SomeError/);
        });

        it("should create an array of devices from the given result",function(){
            launchPromise.then = function(cb) {
                return cb({
                    Result: [
                        {ServerCookie: 1},
                        {ServerCookie: 2}
                    ]
                });
            };

            var res = labUnderTest.getDevicesWithOpenViewers();

            assert(Array.isArray(res));
            assert(res[0] instanceof DeviceTO);
            assert.strictEqual(res[0]._cookie, 1);
            assert(res[1] instanceof DeviceTO);
            assert.strictEqual(res[1]._cookie, 2);
        });

        it("should add the applicationInfo to device",function(){
            launchPromise.then = function(fullfill){
                return fullfill({
                    Result: [
                        { Properties: {id:"1"}},
                        { Properties: {id:"2"}}
                    ]

                });
            };
            var res = labUnderTest.getDevicesWithOpenViewers({});
            assert.deepEqual(res[0]._applicationInfo, {id:"1"});
            assert.deepEqual(res[1]._applicationInfo, {id:"2"});
        });
    });

    describe("getDeviceList", function() {
        it("should send message with type GetAllOpenApplication", function() {
            labUnderTest.getDeviceList();

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"GetMobileDevicesList");
        });

        it("should throw error in case the launch result is null",function(){
            launchPromise.then.callsArgWith(0,null);

            assert.throws(function(){
                labUnderTest.getDeviceList();
            });
        });

        it("should throw error in case the launch result does not have a Result field",function(){
            launchPromise.then.callsArgWith(0,{});

            assert.throws(function(){
                labUnderTest.getDeviceList();
            });
        });

        it("should throw a replay exception in case a replay error is returned",function(){
            var error = new Error("SomeError");
            error.statusCode = -111;
            launchPromise.then.callsArgWith(1,error);

            assert.throws(function(){
                labUnderTest.getDeviceList();
            },/ReplayObjectNotFoundException: SomeError/);
        });

        it("should create an array of device infos from the given result (and change to lower case)",function(){
            launchPromise.then = function(cb) {
                return cb({
                    Result: [
                        {
                            Id: "someId",
                            Name: "someName"
                        },
                        {
                            Id: "someId2",
                            Name: "someName2"
                        }
                    ]
                });
            };

            var res = labUnderTest.getDeviceList();

            assert(Array.isArray(res));
            assert.deepEqual(res[0], {
                id: "someId",
                name: "someName"
            });
            assert(res[1], {
                id: "someId2",
                name: "someName2"
            });
        });
    });

    describe("getConfig", function() {
        it("should send message with type GetMobileCenterConfiguration", function() {
            labUnderTest.getConfig();

            assert(sessionMock._communication.send.calledOnce);
            assert.strictEqual(sessionMock._communication.send.firstCall.args[0],"GetMobileCenterConfiguration");
        });

        it("should return config object with null values in case the launch result is null",function(){
            launchPromise.then = function(cb) {
                return cb(null);
            };

            var res = labUnderTest.getConfig();

            assert.deepEqual(res, {
                username: null,
                address: null
            });
        });

        it("should return config object with correct values",function(){
            launchPromise.then = function(cb) {
                return cb({
                    UserName: "aaa",
                    URI: "bbb"
                });
            };

            var res = labUnderTest.getConfig();

            assert.deepEqual(res, {
                username: "aaa",
                address: "bbb"
            });
        });
    });
});