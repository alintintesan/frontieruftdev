// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/17/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var UiObjectDesc = require("../lib/uiobject.js").UiObject;

describe("UiObject Description",function() {
    var uiobjectDescUnderTest;
    beforeEach(function () {
        uiobjectDescUnderTest = new UiObjectDesc();
    });

    describe("accessibilityId method",function() {
        it("should add 'accessibilityId' to _properties with the correct value when value is given using property bag",function(){
            uiobjectDescUnderTest = UiObjectDesc({
                accessibilityId: "#some-id"
            });
            assert.strictEqual(uiobjectDescUnderTest._properties["accessibilityId"], "#some-id");
        });
    });

    describe("className method",function() {
        it("should add 'class' to _properties with the correct value when value is given using property bag",function(){
            uiobjectDescUnderTest = UiObjectDesc({
                className: ".some-class"
            });
            assert.strictEqual(uiobjectDescUnderTest._properties["class"], ".some-class");
        });
    });

    describe("container method",function() {
        it("should add 'container' to _properties with the correct value when value is given using property bag",function(){
            uiobjectDescUnderTest = UiObjectDesc({
                container: "some-container"
            });
            assert.strictEqual(uiobjectDescUnderTest._properties["container"], "some-container");
        });
    });

    describe("mobileCenterIndex method",function() {
        it("should add 'mcIndex' to _properties with the correct value when value is given using property bag",function(){
            uiobjectDescUnderTest = UiObjectDesc({
                mobileCenterIndex: 2
            });
            assert.strictEqual(uiobjectDescUnderTest._properties["mcIndex"], 2);
        });
    });

    describe("resourceId method",function() {
        it("should add 'resourceId' to _properties with the correct value when value is given using property bag",function(){
            uiobjectDescUnderTest = UiObjectDesc({
                resourceId: "#some-id"
            });
            assert.strictEqual(uiobjectDescUnderTest._properties["resourceId"], "#some-id");
        });
    });

    describe("isCheckable method",function() {
        it("should add 'isCheckable' to _properties with the correct value when value is given using property bag",function(){
            uiobjectDescUnderTest = UiObjectDesc({
                isCheckable: true
            });
            assert.strictEqual(uiobjectDescUnderTest._properties["isCheckable"], true);
        });
    });

    describe("isChecked method",function() {
        it("should add 'isChecked' to _properties with the correct value when value is given using property bag",function(){
            uiobjectDescUnderTest = UiObjectDesc({
                isChecked: true
            });
            assert.strictEqual(uiobjectDescUnderTest._properties["isChecked"], true);
        });
    });

});