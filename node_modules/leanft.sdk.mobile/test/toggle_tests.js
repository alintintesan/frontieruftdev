// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 12/27/2015.
 */

var assert = require("assert");
var sinon = require("sinon");
var ToggleTO = require("../lib/toggle.js").ToggleTO;

describe("ToggleTO",function() {
    var toggleTOUnderTest;
    beforeEach(function () {
        toggleTOUnderTest = new ToggleTO();
        sinon.stub(toggleTOUnderTest, "_executeCommand");
    });

    describe("set", function () {
        it("should throw error if no arguments passed", function () {
            assert.throws(function () {
                toggleTOUnderTest.set();
            });
        });
        it("should throw error if non boolean string passed", function () {
            assert.throws(function () {
                toggleTOUnderTest.set("truw");
            });
        });
        it("should throw error if null passed", function () {
            assert.throws(function () {
                toggleTOUnderTest.set(null);
            });
        });
        it("should call the _executeCommand and pass it the correct arguments when true passed", function () {
            toggleTOUnderTest.set(true);
            assert(toggleTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(toggleTOUnderTest._executeCommand.firstCall.args.splice(0,2), ["Set", "on"]);
        });
        it("should call the _executeCommand and pass it the correct arguments when false passed", function () {
            toggleTOUnderTest.set("false");
            assert(toggleTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(toggleTOUnderTest._executeCommand.firstCall.args.splice(0,2), ["Set", "off"]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            toggleTOUnderTest._executeCommand.returns(getROPromise);
            var res = toggleTOUnderTest.set(true);
            assert.strictEqual(res, getROPromise);
        });
    });

    describe("setByName", function () {
        it("should throw error if no arguments passed", function () {
            assert.throws(function () {
                toggleTOUnderTest.setByName();
            });
        });
        it("should throw error if null passed", function () {
            assert.throws(function () {
                toggleTOUnderTest.setByName(null);
            });
        });
        it("should call the _executeCommand and pass it the correct arguments", function () {
            toggleTOUnderTest.setByName("empty");
            assert(toggleTOUnderTest._executeCommand.calledOnce);
            assert.deepEqual(toggleTOUnderTest._executeCommand.firstCall.args.slice(0,2), ["Set", "empty"]);
        });
        it("should return the same promise that was returned from _executeCommand", function () {
            var getROPromise = {};
            toggleTOUnderTest._executeCommand.returns(getROPromise);
            var res = toggleTOUnderTest.setByName("full");
            assert.strictEqual(res, getROPromise);
        });
    });
});