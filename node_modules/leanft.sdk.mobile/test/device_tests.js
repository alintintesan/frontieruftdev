// (c) Copyright 2015 - 2023 Micro Focus or one of its affiliates..
/*
 * Created on 20/12/2015.
 */

var sinon = require("sinon");
var assert = require("assert");

describe("Device Description unit tests", function() {
    var Device = require("../lib/device.js").Device;
    var deviceDescUnderTest;

    beforeEach(function(){
        deviceDescUnderTest = Device();
    });

    it("should support initialization via property bag",function(){
        deviceDescUnderTest = Device({
            name: "someName"
        });

        assert.strictEqual(deviceDescUnderTest._properties["name"], "someName");
    });

    it("should not have an index key", function() {
        assert.throws(function(){
            deviceDescUnderTest.index();
        });
    });

    it("should set not modeled properties to the _properties member", function () {
        deviceDescUnderTest = Device({
            notModeled: "someValue"
        });

        assert.strictEqual(deviceDescUnderTest._properties["notModeled"], "someValue");
    });

    describe("id method",function() {
        it("should add 'id' to _properties when value is given",function(){
            deviceDescUnderTest.id("some id");
            assert.strictEqual(deviceDescUnderTest._properties["id"], "some id");
        });
        it("should add 'id' to _properties when value is given using property bag",function(){
            deviceDescUnderTest = Device({
                id: "some id"
            });
            assert.strictEqual(deviceDescUnderTest._properties["id"], "some id");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = deviceDescUnderTest.id("some id");
            assert.strictEqual(result, deviceDescUnderTest);
        });
        it("should remove 'id' from _properties when value is null",function(){
            deviceDescUnderTest._properties["id"] = "some id";
            deviceDescUnderTest.id(null);
            assert(!("id" in deviceDescUnderTest._properties));
        });
        it("should return the value of 'id' from _properties when value is not given",function(){
            deviceDescUnderTest._properties["id"] = "some id";
            var id = deviceDescUnderTest.id();
            assert.equal(id, "some id");
        });
    });

    describe("name method",function() {
        it("should add 'name' to _properties when value is given",function(){
            deviceDescUnderTest.name("some name");
            assert.strictEqual(deviceDescUnderTest._properties["name"], "some name");
        });
        it("should add 'name' to _properties when value is given using property bag",function(){
            deviceDescUnderTest = Device({
                name: "some name"
            });
            assert.strictEqual(deviceDescUnderTest._properties["name"], "some name");
        });
        it("should return this - builder pattern when value is given",function(){
            var result = deviceDescUnderTest.name("some name");
            assert.strictEqual(result, deviceDescUnderTest);
        });
        it("should remove 'name' from _properties when value is null",function(){
            deviceDescUnderTest._properties["name"] = "some name";
            deviceDescUnderTest.name(null);
            assert(!("name" in deviceDescUnderTest._properties));
        });
        it("should return the value of 'name' from _properties when value is not given",function(){
            deviceDescUnderTest._properties["name"] = "some name";
            var name = deviceDescUnderTest.name();
            assert.equal(name, "some name");
        });
    });

    it("should not have the vri property",function(){
        assert.strictEqual(deviceDescUnderTest.vri, undefined);
    });
});

describe("Device Test Object unit tests", function() {
    var DeviceTO = require("../lib/device.js").DeviceTO;
    var deviceUnderTest;

    beforeEach(function() {
        deviceUnderTest = new DeviceTO();
        sinon.stub(deviceUnderTest, "_executeCommand");
        sinon.stub(deviceUnderTest, "_getROProperty");
    });

    describe("id method",function() {
        it("should execute _getROProperty 'id'",function(){
            deviceUnderTest.id();
            assert(deviceUnderTest._getROProperty.calledOnce);
            assert.equal(deviceUnderTest._getROProperty.getCall(0).args[0].toLowerCase(),"id");
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            deviceUnderTest._getROProperty.returns(promiseMock);
            var res = deviceUnderTest.id();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("model method",function() {
        it("should execute _getROProperty 'Model'",function(){
            deviceUnderTest.model();
            assert(deviceUnderTest._getROProperty.calledOnce);
            assert.equal(deviceUnderTest._getROProperty.getCall(0).args[0],"Model");
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            deviceUnderTest._getROProperty.returns(promiseMock);
            var res = deviceUnderTest.model();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("manufacturer method",function() {
        it("should execute _getROProperty 'Manufacturer'",function(){
            deviceUnderTest.manufacturer();
            assert(deviceUnderTest._getROProperty.calledOnce);
            assert.equal(deviceUnderTest._getROProperty.getCall(0).args[0],"Manufacturer");
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            deviceUnderTest._getROProperty.returns(promiseMock);
            var res = deviceUnderTest.manufacturer();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("osType method",function() {
        it("should execute _getROProperty 'osType'",function(){
            deviceUnderTest.osType();
            assert(deviceUnderTest._getROProperty.calledOnce);
            assert.equal(deviceUnderTest._getROProperty.getCall(0).args[0],"osType");
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            deviceUnderTest._getROProperty.returns(promiseMock);
            var res = deviceUnderTest.osType();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("osVersion method",function() {
        it("should execute _getROProperty 'osVersion'",function(){
            deviceUnderTest.osVersion();
            assert(deviceUnderTest._getROProperty.calledOnce);
            assert.equal(deviceUnderTest._getROProperty.getCall(0).args[0],"osVersion");
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            deviceUnderTest._getROProperty.returns(promiseMock);
            var res = deviceUnderTest.osVersion();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("name method",function() {
        it("should execute _getROProperty 'name'",function(){
            deviceUnderTest.name();
            assert(deviceUnderTest._getROProperty.calledOnce);
            assert.equal(deviceUnderTest._getROProperty.getCall(0).args[0],"name");
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            deviceUnderTest._getROProperty.returns(promiseMock);
            var res = deviceUnderTest.name();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("home", function() {
        it("should call _executeCommand and pass it 'Home' as argument", function () {
            deviceUnderTest.home();
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,1), ["Home"]);
        });
    });

    describe("back", function() {
        it("should call _executeCommand and pass it 'Back' as argument", function () {
            deviceUnderTest.back();
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,1), ["Back"]);
        });
    });

    describe("menu", function() {
        it("should call _executeCommand and pass it 'Menu' as argument", function () {
            deviceUnderTest.menu();
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,1), ["Menu"]);
        });
    });

    describe("recentApps", function() {
        it("should call _executeCommand and pass it 'RecentApps' as argument", function () {
            deviceUnderTest.recentApps();
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,1), ["RecentApps"]);
        });
    });

    describe("setOrientation", function() {
        it("should call _executeCommand and pass it 'SetOrientation' as argument", function () {
            deviceUnderTest.setOrientation('portrait');
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.strictEqual(deviceUnderTest._executeCommand.firstCall.args[0], "SetOrientation");
        });

        it("should pass 'Portrait' as second argument if 'portrait' is passed as the argument", function () {
            deviceUnderTest.setOrientation('portrait');
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.strictEqual(deviceUnderTest._executeCommand.firstCall.args[1], "Portrait");
        });

        it("should pass 'LandscapeRight' as second argument if 'landscape' is passed as the argument", function () {
            deviceUnderTest.setOrientation('landscape');
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.strictEqual(deviceUnderTest._executeCommand.firstCall.args[1], "LandscapeRight");
        });
    });

    describe("touch", function() {
        it("should call _executeCommand and pass it 'Touch' as argument", function () {
            deviceUnderTest.touch(1,2);
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.strictEqual(deviceUnderTest._executeCommand.firstCall.args[0], "Touch");
        });

        it("should call _executeCommand and pass it x and y as arguments", function () {
            deviceUnderTest.touch(1,"2");
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.strictEqual(deviceUnderTest._executeCommand.firstCall.args[1], 1);
            assert.strictEqual(deviceUnderTest._executeCommand.firstCall.args[2], 2);
        });

        it("should throw if x is null", function() {
            assert.throws(function(){
                deviceUnderTest.touch(null,2)
            });
        });

        it("should throw if x is undefined", function() {
            assert.throws(function(){
                deviceUnderTest.touch(undefined,2)
            });
        });

        it("should throw if y is null", function() {
            assert.throws(function(){
                deviceUnderTest.touch(1,null)
            });
        });

        it("should throw if y is undefined", function() {
            assert.throws(function(){
                deviceUnderTest.touch(1,undefined)
            });
        });
    });

    describe("swipe", function() {
        it("should call _executeCommand and pass it 'Swipe' as argument", function () {
            deviceUnderTest.swipe("left");
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.strictEqual(deviceUnderTest._executeCommand.firstCall.args[0], "Swipe");
        });

        it("should call _executeCommand with direction only when location is not passed", function() {
            deviceUnderTest.swipe("left");
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,2), ["Swipe", "Left"])
        });

        it("should pass a RectLocation with correct args when startLocation arg is passed", function() {
            var Position = require("leanft.sdk.core").Position;
            deviceUnderTest.swipe("left", {anchor: Position.bottomRight, offset: {x: 5, y: 8}});
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,3), ["Swipe", "Left", {
                Type: "LocationFromRect",
                Offset: {Type: "Point",
                    X: 5,
                    Y: 8},
                Anchor: Position._convert(Position.bottomRight)
            }])
        });

        it("should throw when direction is not provided", function() {
            assert.throws(function() {
               deviceUnderTest.swipe();
            });
        });

        it("should throw when direction is null", function() {
            assert.throws(function() {
                deviceUnderTest.swipe(null);
            });
        });
    });

    describe("simulateGPS", function() {
        it("should call _executeCommand and pass it 'GPSRelocate' as argument", function () {
            deviceUnderTest.simulateGPS(1,2);
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.strictEqual(deviceUnderTest._executeCommand.firstCall.args[0], "GPSRelocate");
        });

        it("should call _executeCommand and pass it latitude and longitude as arguments", function () {
            deviceUnderTest.simulateGPS(1,"2");
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.strictEqual(deviceUnderTest._executeCommand.firstCall.args[1], 1);
            assert.strictEqual(deviceUnderTest._executeCommand.firstCall.args[2], 2);
        });

        it("should throw if latitude is null", function() {
            assert.throws(function(){
                deviceUnderTest.simulateGPS(null,2);
            });
        });

        it("should throw if latitude is undefined", function() {
            assert.throws(function(){
                deviceUnderTest.simulateGPS(undefined,2);
            });
        });

        it("should throw if longitude is null", function() {
            assert.throws(function(){
                deviceUnderTest.simulateGPS(1,null);
            });
        });

        it("should throw if longitude is undefined", function() {
            assert.throws(function(){
                deviceUnderTest.simulateGPS(1,undefined);
            });
        });
    });

    describe("simulateIncomingCall", function() {
        it("should call _executeCommand and pass it 'IncomingCall' as argument", function () {
            deviceUnderTest.simulateIncomingCall("caller");
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.strictEqual(deviceUnderTest._executeCommand.firstCall.args[0], "IncomingCall");
        });

        it("should call _executeCommand with from only when eventResponseArgs is not passed", function() {
            deviceUnderTest.simulateIncomingCall("caller");
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,2), ["IncomingCall", "caller"])
        });

        it("should use default values if an object without timeInBackground and respondToEvent is passed", function() {
            deviceUnderTest.simulateIncomingCall("caller", {});
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,4), ["IncomingCall", "caller", 10, false])
        });

        it("should use values eventResponseArgs as passed", function() {
            deviceUnderTest.simulateIncomingCall("caller", {timeInBackground: 11, respondToEvent: true});
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,4), ["IncomingCall", "caller", 11, true])
        });

        it("should use timeInBackground default value when it is not passed", function() {
            deviceUnderTest.simulateIncomingCall("caller", {respondToEvent: true});
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,4), ["IncomingCall", "caller", 10, true])
        });

        it("should use respondToEvent default value when it is not passed", function() {
            deviceUnderTest.simulateIncomingCall("caller", {timeInBackground: 11});
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,4), ["IncomingCall", "caller", 11, false])
        });

        it("should throw if from is null", function() {
            assert.throws(function(){
                deviceUnderTest.simulateIncomingCall(null);
            });
        });

        it("should throw if from is undefined", function() {
            assert.throws(function(){
                deviceUnderTest.simulateIncomingCall();
            });
        });
    });

    describe("simulateIncomingSMS", function() {
        it("should call _executeCommand and pass it 'IncomingSMS' as argument", function () {
            deviceUnderTest.simulateIncomingSMS("sender", "text");
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.strictEqual(deviceUnderTest._executeCommand.firstCall.args[0], "IncomingSMS");
        });

        it("should call _executeCommand with from only when eventResponseArgs is not passed", function() {
            deviceUnderTest.simulateIncomingSMS("sender", "text");
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,3), ["IncomingSMS", "sender", "text"])
        });

        it("should use default values if an object without timeInBackground and respondToEvent is passed", function() {
            deviceUnderTest.simulateIncomingSMS("sender", "text", {});
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,5), ["IncomingSMS", "sender", "text", 10, false])
        });

        it("should use values eventResponseArgs as passed", function() {
            deviceUnderTest.simulateIncomingSMS("sender", "text", {timeInBackground: 11, respondToEvent: true});
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,5), ["IncomingSMS", "sender", "text", 11, true])
        });

        it("should use timeInBackground default value when it is not passed", function() {
            deviceUnderTest.simulateIncomingSMS("sender", "text", {respondToEvent: true});
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,5), ["IncomingSMS", "sender", "text", 10, true])
        });

        it("should use respondToEvent default value when it is not passed", function() {
            deviceUnderTest.simulateIncomingSMS("sender", "text", {timeInBackground: 11});
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,5), ["IncomingSMS", "sender", "text", 11, false])
        });

        it("should throw if from is null", function() {
            assert.throws(function(){
                deviceUnderTest.simulateIncomingSMS(null, "a");
            });
        });

        it("should throw if from is undefined", function() {
            assert.throws(function(){
                deviceUnderTest.simulateIncomingSMS(undefined, "a");
            });
        });

        it("should throw if text is null", function() {
            assert.throws(function(){
                deviceUnderTest.simulateIncomingSMS("a",null);
            });
        });

        it("should throw if text is undefined", function() {
            assert.throws(function(){
                deviceUnderTest.simulateIncomingSMS("a");
            });
        });
    });

    describe("networkVirtualizationStart", function() {
        it("should call _executeCommand and pass it 'StartNV' as argument", function () {
            deviceUnderTest.networkVirtualizationStart("profile");
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.strictEqual(deviceUnderTest._executeCommand.firstCall.args[0], "StartNV");
        });

        it("should pass profile as is", function () {
            deviceUnderTest.networkVirtualizationStart("profile");
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,2), ["StartNV", "profile"]);
        });

        it("should throw if profile is null", function() {
            assert.throws(function(){
                deviceUnderTest.networkVirtualizationStart(null);
            });
        });

        it("should throw if profile is undefined", function() {
            assert.throws(function(){
                deviceUnderTest.networkVirtualizationStart();
            });
        });
    });

    describe("networkVirtualizationEnd", function() {
        it("should call _executeCommand and pass it 'StopNV' as argument", function () {
            deviceUnderTest.networkVirtualizationEnd();
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,1), ["StopNV"]);
        });
    });

    describe("shake", function() {
        it("should call _executeCommand and pass it 'Shake' as argument", function () {
            deviceUnderTest.shake();
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,1), ["Shake"]);
        });
    });

    describe("openViewer", function() {
        it("should call _executeCommand and pass it 'OpenViewer' as argument", function () {
            deviceUnderTest.openViewer();
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,1), ["OpenViewer"]);
        });
    });

    describe("closeViewer", function() {
        it("should call _executeCommand and pass it 'CloseViewer' as argument", function () {
            deviceUnderTest.closeViewer();
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,1), ["CloseViewer"]);
        });
    });

    describe("isViewerOpen", function() {
        it("should call _executeCommand and pass it 'IsViewerOpen' as argument", function () {
            deviceUnderTest.isViewerOpen();
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,1), ["IsViewerOpen"]);
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            deviceUnderTest._executeCommand.returns(promiseMock);
            var res = deviceUnderTest.isViewerOpen();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("getLogs", function() {
        it("should call _executeCommand and pass it 'GetLogs' as argument", function () {
            deviceUnderTest.getLogs();
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,1), ["GetLogs"]);
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            deviceUnderTest._executeCommand.returns(promiseMock);
            var res = deviceUnderTest.getLogs();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("getVitals", function() {
        it("should call _executeCommand and pass it 'GetVitals' as argument", function () {
            deviceUnderTest.getVitals();
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,1), ["GetVitals"]);
        });
        it("should return promise as is", function() {
            var promiseMock = {};
            deviceUnderTest._executeCommand.returns(promiseMock);
            var res = deviceUnderTest.getVitals();
            assert.strictEqual(res, promiseMock);
        });
    });

    describe("unlock", function() {
        it("should call _executeCommand and pass it 'Release' as argument", function () {
            deviceUnderTest.unlock();
            assert(deviceUnderTest._executeCommand.calledOnce);
            assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,1), ["Release"]);
        });
    });

    describe("sendKey", function() {
        var Keys = require("../lib/device.js").Keys;
        it("should throw if key parameter is null", function() {
            assert.throws(function(){
                deviceUnderTest.sendKey(null);
            });
        });
        it("should throw if key parameter string is not in the enums", function() {
            assert.throws(function(){
                deviceUnderTest.sendKey("NonExisting");
            });
        });

        Object.keys(Keys).forEach(function (keyboardKey){
            var argumentToSend = Keys[keyboardKey];
            it("should call _executeCommand with SendKey and the key enum parameter '" + keyboardKey +
                "' converted correctly to '" + argumentToSend + "'", function() {
                deviceUnderTest.sendKey(keyboardKey);
                assert(deviceUnderTest._executeCommand.calledOnce);
                assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,2), ["SendKey", argumentToSend])
            });

            var wrongCaseKey = keyboardKey[0] + keyboardKey[1].toUpperCase() + keyboardKey.substr(2);
            it("should call _executeCommand with SendKey and the key string parameter '" + keyboardKey +
                "' (with wrong case) converted correctly to '" + argumentToSend + "'", function () {
                deviceUnderTest.sendKey(wrongCaseKey);
                assert(deviceUnderTest._executeCommand.calledOnce);
                assert.deepEqual(deviceUnderTest._executeCommand.firstCall.args.slice(0,2), ["SendKey", argumentToSend])
            });
        });

    });
});